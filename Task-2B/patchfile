diff -ruN xv6-public/ASCII_image.h xv6-public_mine/ASCII_image.h
--- xv6-public/ASCII_image.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ASCII_image.h	2021-08-19 18:27:11.000000000 +0530
@@ -0,0 +1,31 @@
+// define ASCII images here
+#define wolfi "               \t\t\t,ood8888booo,\n\
+                              ,od8           8bo,\n\
+                           ,od                   bo,\n\
+                         ,d8                       8b,\n\
+                        ,o                           o,    ,a8b\n\
+                       ,8                             8,,od8  8\n\
+                       8'                             d8'     8b\n\
+                       8                           d8'ba     aP'\n\
+                       Y,                       o8'         aP'\n\
+                        Y8,                      YaaaP'    ba\n\
+                         Y8o                   Y8'         88\n\
+                          `Y8               ,8\"           `P\n\
+                            Y8o        ,d8P'              ba\n\
+                       ooood8888888P\"\"\"'                  P'\n\
+                    ,od                                  8\n\
+                 ,dP     o88o                           o'\n\
+                ,dP          8                          8\n\
+               ,d'   oo       8                       ,8\n\
+               $    d$\"8      8           Y    Y  o   8\n\
+              d    d  d8    od  \"\"boooooooob   d\"\" 8   8\n\
+              $    8  d   ood' ,   8        b  8   '8  b\n\
+              $   $  8  8     d  d8        `b  d    '8  b\n\
+               $  $ 8   b    Y  d8          8 ,P     '8  b\n\
+               `$$  Yb  b     8b 8b         8 8,      '8  o,\n\
+                    `Y  b      8o  $$o      d  b        b   $o\n\
+                     8   '$     8$,,$\"      $   $o      '$o$$\n\
+                      $o$$P\"                 $$o$\n\n"
+
+#define hello "this is woking.. need to find a new ascii file."
+
diff -ruN xv6-public/bio.d xv6-public_mine/bio.d
--- xv6-public/bio.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/bio.d	2021-09-30 23:41:42.747318435 +0530
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/bio.o and xv6-public_mine/bio.o differ
diff -ruN xv6-public/bootasm.d xv6-public_mine/bootasm.d
--- xv6-public/bootasm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/bootasm.d	2021-09-30 23:41:41.859433700 +0530
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files xv6-public/bootasm.o and xv6-public_mine/bootasm.o differ
Binary files xv6-public/bootblock and xv6-public_mine/bootblock differ
diff -ruN xv6-public/bootblock.asm xv6-public_mine/bootblock.asm
--- xv6-public/bootblock.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/bootblock.asm	2021-09-30 23:41:42.003414900 +0530
@@ -0,0 +1,361 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0xe>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 fc 00 00 00       	call   7d49 <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+  entry();
+}
+
+void
+waitdisk(void)
+{
+    7c7e:	f3 0f 1e fb          	endbr32 
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c82:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c87:	ec                   	in     (%dx),%al
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c88:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c8b:	3c 40                	cmp    $0x40,%al
+    7c8d:	75 f8                	jne    7c87 <waitdisk+0x9>
+    ;
+}
+    7c8f:	c3                   	ret    
+
+00007c90 <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c90:	f3 0f 1e fb          	endbr32 
+    7c94:	55                   	push   %ebp
+    7c95:	89 e5                	mov    %esp,%ebp
+    7c97:	57                   	push   %edi
+    7c98:	53                   	push   %ebx
+    7c99:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c9c:	e8 dd ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7ca1:	b8 01 00 00 00       	mov    $0x1,%eax
+    7ca6:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7cab:	ee                   	out    %al,(%dx)
+    7cac:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cb1:	89 d8                	mov    %ebx,%eax
+    7cb3:	ee                   	out    %al,(%dx)
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+    7cb4:	89 d8                	mov    %ebx,%eax
+    7cb6:	c1 e8 08             	shr    $0x8,%eax
+    7cb9:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cbe:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+    7cbf:	89 d8                	mov    %ebx,%eax
+    7cc1:	c1 e8 10             	shr    $0x10,%eax
+    7cc4:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc9:	ee                   	out    %al,(%dx)
+  outb(0x1F6, (offset >> 24) | 0xE0);
+    7cca:	89 d8                	mov    %ebx,%eax
+    7ccc:	c1 e8 18             	shr    $0x18,%eax
+    7ccf:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cd2:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cd7:	ee                   	out    %al,(%dx)
+    7cd8:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cdd:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7ce2:	ee                   	out    %al,(%dx)
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7ce3:	e8 96 ff ff ff       	call   7c7e <waitdisk>
+  asm volatile("cld; rep insl" :
+    7ce8:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ceb:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7cf0:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7cf5:	fc                   	cld    
+    7cf6:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf8:	5b                   	pop    %ebx
+    7cf9:	5f                   	pop    %edi
+    7cfa:	5d                   	pop    %ebp
+    7cfb:	c3                   	ret    
+
+00007cfc <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cfc:	f3 0f 1e fb          	endbr32 
+    7d00:	55                   	push   %ebp
+    7d01:	89 e5                	mov    %esp,%ebp
+    7d03:	57                   	push   %edi
+    7d04:	56                   	push   %esi
+    7d05:	53                   	push   %ebx
+    7d06:	83 ec 0c             	sub    $0xc,%esp
+    7d09:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d0c:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d0f:	89 df                	mov    %ebx,%edi
+    7d11:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d14:	89 f0                	mov    %esi,%eax
+    7d16:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d1b:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d1d:	c1 ee 09             	shr    $0x9,%esi
+    7d20:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d23:	39 df                	cmp    %ebx,%edi
+    7d25:	76 1a                	jbe    7d41 <readseg+0x45>
+    readsect(pa, offset);
+    7d27:	83 ec 08             	sub    $0x8,%esp
+    7d2a:	56                   	push   %esi
+    7d2b:	53                   	push   %ebx
+    7d2c:	e8 5f ff ff ff       	call   7c90 <readsect>
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d31:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d37:	83 c6 01             	add    $0x1,%esi
+    7d3a:	83 c4 10             	add    $0x10,%esp
+    7d3d:	39 df                	cmp    %ebx,%edi
+    7d3f:	77 e6                	ja     7d27 <readseg+0x2b>
+}
+    7d41:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d44:	5b                   	pop    %ebx
+    7d45:	5e                   	pop    %esi
+    7d46:	5f                   	pop    %edi
+    7d47:	5d                   	pop    %ebp
+    7d48:	c3                   	ret    
+
+00007d49 <bootmain>:
+{
+    7d49:	f3 0f 1e fb          	endbr32 
+    7d4d:	55                   	push   %ebp
+    7d4e:	89 e5                	mov    %esp,%ebp
+    7d50:	57                   	push   %edi
+    7d51:	56                   	push   %esi
+    7d52:	53                   	push   %ebx
+    7d53:	83 ec 10             	sub    $0x10,%esp
+  readseg((uchar*)elf, 4096, 0);
+    7d56:	6a 00                	push   $0x0
+    7d58:	68 00 10 00 00       	push   $0x1000
+    7d5d:	68 00 00 01 00       	push   $0x10000
+    7d62:	e8 95 ff ff ff       	call   7cfc <readseg>
+  if(elf->magic != ELF_MAGIC)
+    7d67:	83 c4 10             	add    $0x10,%esp
+    7d6a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d71:	45 4c 46 
+    7d74:	75 21                	jne    7d97 <bootmain+0x4e>
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d76:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d7b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d81:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d88:	c1 e6 05             	shl    $0x5,%esi
+    7d8b:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d8d:	39 f3                	cmp    %esi,%ebx
+    7d8f:	72 15                	jb     7da6 <bootmain+0x5d>
+  entry();
+    7d91:	ff 15 18 00 01 00    	call   *0x10018
+}
+    7d97:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d9a:	5b                   	pop    %ebx
+    7d9b:	5e                   	pop    %esi
+    7d9c:	5f                   	pop    %edi
+    7d9d:	5d                   	pop    %ebp
+    7d9e:	c3                   	ret    
+  for(; ph < eph; ph++){
+    7d9f:	83 c3 20             	add    $0x20,%ebx
+    7da2:	39 de                	cmp    %ebx,%esi
+    7da4:	76 eb                	jbe    7d91 <bootmain+0x48>
+    pa = (uchar*)ph->paddr;
+    7da6:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7da9:	83 ec 04             	sub    $0x4,%esp
+    7dac:	ff 73 04             	pushl  0x4(%ebx)
+    7daf:	ff 73 10             	pushl  0x10(%ebx)
+    7db2:	57                   	push   %edi
+    7db3:	e8 44 ff ff ff       	call   7cfc <readseg>
+    if(ph->memsz > ph->filesz)
+    7db8:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7dbb:	8b 43 10             	mov    0x10(%ebx),%eax
+    7dbe:	83 c4 10             	add    $0x10,%esp
+    7dc1:	39 c1                	cmp    %eax,%ecx
+    7dc3:	76 da                	jbe    7d9f <bootmain+0x56>
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+    7dc5:	01 c7                	add    %eax,%edi
+    7dc7:	29 c1                	sub    %eax,%ecx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7dc9:	b8 00 00 00 00       	mov    $0x0,%eax
+    7dce:	fc                   	cld    
+    7dcf:	f3 aa                	rep stos %al,%es:(%edi)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+    7dd1:	eb cc                	jmp    7d9f <bootmain+0x56>
Binary files xv6-public/bootblock.o and xv6-public_mine/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-public_mine/bootblockother.o differ
diff -ruN xv6-public/bootmain.d xv6-public_mine/bootmain.d
--- xv6-public/bootmain.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/bootmain.d	2021-09-30 23:41:41.219517247 +0530
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files xv6-public/bootmain.o and xv6-public_mine/bootmain.o differ
Binary files xv6-public/_cat and xv6-public_mine/_cat differ
diff -ruN xv6-public/cat.asm xv6-public_mine/cat.asm
--- xv6-public/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/cat.asm	2021-09-30 23:42:19.679314008 +0530
@@ -0,0 +1,1306 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 50                	jle    7d <main+0x7d>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 77 03 00 00       	call   3b3 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 3f 03 00 00       	call   39b <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 0a 03 00 00       	call   373 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 7b 08 00 00       	push   $0x87b
+  71:	6a 01                	push   $0x1
+  73:	e8 78 04 00 00       	call   4f0 <printf>
+      exit();
+  78:	e8 f6 02 00 00       	call   373 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 e7 02 00 00       	call   373 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	56                   	push   %esi
+  98:	8b 75 08             	mov    0x8(%ebp),%esi
+  9b:	53                   	push   %ebx
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  9c:	eb 19                	jmp    b7 <cat+0x27>
+  9e:	66 90                	xchg   %ax,%ax
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 a0 0b 00 00       	push   $0xba0
+  a9:	6a 01                	push   $0x1
+  ab:	e8 e3 02 00 00       	call   393 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 25                	jne    dc <cat+0x4c>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 a0 0b 00 00       	push   $0xba0
+  c4:	56                   	push   %esi
+  c5:	e8 c1 02 00 00       	call   38b <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	89 c3                	mov    %eax,%ebx
+  cf:	85 c0                	test   %eax,%eax
+  d1:	7f cd                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d3:	75 1b                	jne    f0 <cat+0x60>
+}
+  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d8:	5b                   	pop    %ebx
+  d9:	5e                   	pop    %esi
+  da:	5d                   	pop    %ebp
+  db:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dc:	83 ec 08             	sub    $0x8,%esp
+  df:	68 58 08 00 00       	push   $0x858
+  e4:	6a 01                	push   $0x1
+  e6:	e8 05 04 00 00       	call   4f0 <printf>
+      exit();
+  eb:	e8 83 02 00 00       	call   373 <exit>
+    printf(1, "cat: read error\n");
+  f0:	50                   	push   %eax
+  f1:	50                   	push   %eax
+  f2:	68 6a 08 00 00       	push   $0x86a
+  f7:	6a 01                	push   $0x1
+  f9:	e8 f2 03 00 00       	call   4f0 <printf>
+    exit();
+  fe:	e8 70 02 00 00       	call   373 <exit>
+ 103:	66 90                	xchg   %ax,%ax
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 115:	31 c0                	xor    %eax,%eax
+{
+ 117:	89 e5                	mov    %esp,%ebp
+ 119:	53                   	push   %ebx
+ 11a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 11d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 127:	83 c0 01             	add    $0x1,%eax
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 12e:	89 c8                	mov    %ecx,%eax
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	53                   	push   %ebx
+ 148:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 14e:	0f b6 01             	movzbl (%ecx),%eax
+ 151:	0f b6 1a             	movzbl (%edx),%ebx
+ 154:	84 c0                	test   %al,%al
+ 156:	75 19                	jne    171 <strcmp+0x31>
+ 158:	eb 26                	jmp    180 <strcmp+0x40>
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 164:	83 c1 01             	add    $0x1,%ecx
+ 167:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 16a:	0f b6 1a             	movzbl (%edx),%ebx
+ 16d:	84 c0                	test   %al,%al
+ 16f:	74 0f                	je     180 <strcmp+0x40>
+ 171:	38 d8                	cmp    %bl,%al
+ 173:	74 eb                	je     160 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 175:	29 d8                	sub    %ebx,%eax
+}
+ 177:	5b                   	pop    %ebx
+ 178:	5d                   	pop    %ebp
+ 179:	c3                   	ret    
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 180:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18e:	66 90                	xchg   %ax,%ax
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 19a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 19d:	74 21                	je     1c0 <strlen+0x30>
+ 19f:	31 c0                	xor    %eax,%eax
+ 1a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1a8:	83 c0 01             	add    $0x1,%eax
+ 1ab:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1af:	89 c1                	mov    %eax,%ecx
+ 1b1:	75 f5                	jne    1a8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1b3:	89 c8                	mov    %ecx,%eax
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1c0:	31 c9                	xor    %ecx,%ecx
+}
+ 1c2:	5d                   	pop    %ebp
+ 1c3:	89 c8                	mov    %ecx,%eax
+ 1c5:	c3                   	ret    
+ 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	57                   	push   %edi
+ 1d8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1db:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1de:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1e1:	89 d7                	mov    %edx,%edi
+ 1e3:	fc                   	cld    
+ 1e4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1e6:	89 d0                	mov    %edx,%eax
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1f0:	f3 0f 1e fb          	endbr32 
+ 1f4:	55                   	push   %ebp
+ 1f5:	89 e5                	mov    %esp,%ebp
+ 1f7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fa:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1fe:	0f b6 10             	movzbl (%eax),%edx
+ 201:	84 d2                	test   %dl,%dl
+ 203:	75 16                	jne    21b <strchr+0x2b>
+ 205:	eb 21                	jmp    228 <strchr+0x38>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+ 210:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 214:	83 c0 01             	add    $0x1,%eax
+ 217:	84 d2                	test   %dl,%dl
+ 219:	74 0d                	je     228 <strchr+0x38>
+    if(*s == c)
+ 21b:	38 d1                	cmp    %dl,%cl
+ 21d:	75 f1                	jne    210 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 21f:	5d                   	pop    %ebp
+ 220:	c3                   	ret    
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 228:	31 c0                	xor    %eax,%eax
+}
+ 22a:	5d                   	pop    %ebp
+ 22b:	c3                   	ret    
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000230 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 239:	31 f6                	xor    %esi,%esi
+{
+ 23b:	53                   	push   %ebx
+ 23c:	89 f3                	mov    %esi,%ebx
+ 23e:	83 ec 1c             	sub    $0x1c,%esp
+ 241:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 244:	eb 33                	jmp    279 <gets+0x49>
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 250:	83 ec 04             	sub    $0x4,%esp
+ 253:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 256:	6a 01                	push   $0x1
+ 258:	50                   	push   %eax
+ 259:	6a 00                	push   $0x0
+ 25b:	e8 2b 01 00 00       	call   38b <read>
+    if(cc < 1)
+ 260:	83 c4 10             	add    $0x10,%esp
+ 263:	85 c0                	test   %eax,%eax
+ 265:	7e 1c                	jle    283 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 267:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 26b:	83 c7 01             	add    $0x1,%edi
+ 26e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 271:	3c 0a                	cmp    $0xa,%al
+ 273:	74 23                	je     298 <gets+0x68>
+ 275:	3c 0d                	cmp    $0xd,%al
+ 277:	74 1f                	je     298 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 279:	83 c3 01             	add    $0x1,%ebx
+ 27c:	89 fe                	mov    %edi,%esi
+ 27e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 281:	7c cd                	jl     250 <gets+0x20>
+ 283:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 285:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 288:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28e:	5b                   	pop    %ebx
+ 28f:	5e                   	pop    %esi
+ 290:	5f                   	pop    %edi
+ 291:	5d                   	pop    %ebp
+ 292:	c3                   	ret    
+ 293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 297:	90                   	nop
+ 298:	8b 75 08             	mov    0x8(%ebp),%esi
+ 29b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29e:	01 de                	add    %ebx,%esi
+ 2a0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2a2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a8:	5b                   	pop    %ebx
+ 2a9:	5e                   	pop    %esi
+ 2aa:	5f                   	pop    %edi
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	56                   	push   %esi
+ 2b8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	6a 00                	push   $0x0
+ 2be:	ff 75 08             	pushl  0x8(%ebp)
+ 2c1:	e8 ed 00 00 00       	call   3b3 <open>
+  if(fd < 0)
+ 2c6:	83 c4 10             	add    $0x10,%esp
+ 2c9:	85 c0                	test   %eax,%eax
+ 2cb:	78 2b                	js     2f8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2cd:	83 ec 08             	sub    $0x8,%esp
+ 2d0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2d3:	89 c3                	mov    %eax,%ebx
+ 2d5:	50                   	push   %eax
+ 2d6:	e8 f0 00 00 00       	call   3cb <fstat>
+  close(fd);
+ 2db:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2de:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2e0:	e8 b6 00 00 00       	call   39b <close>
+  return r;
+ 2e5:	83 c4 10             	add    $0x10,%esp
+}
+ 2e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2eb:	89 f0                	mov    %esi,%eax
+ 2ed:	5b                   	pop    %ebx
+ 2ee:	5e                   	pop    %esi
+ 2ef:	5d                   	pop    %ebp
+ 2f0:	c3                   	ret    
+ 2f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2f8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2fd:	eb e9                	jmp    2e8 <stat+0x38>
+ 2ff:	90                   	nop
+
+00000300 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 300:	f3 0f 1e fb          	endbr32 
+ 304:	55                   	push   %ebp
+ 305:	89 e5                	mov    %esp,%ebp
+ 307:	53                   	push   %ebx
+ 308:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 30b:	0f be 02             	movsbl (%edx),%eax
+ 30e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 311:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 314:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 319:	77 1a                	ja     335 <atoi+0x35>
+ 31b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 31f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 320:	83 c2 01             	add    $0x1,%edx
+ 323:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 326:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 32a:	0f be 02             	movsbl (%edx),%eax
+ 32d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 330:	80 fb 09             	cmp    $0x9,%bl
+ 333:	76 eb                	jbe    320 <atoi+0x20>
+  return n;
+}
+ 335:	89 c8                	mov    %ecx,%eax
+ 337:	5b                   	pop    %ebx
+ 338:	5d                   	pop    %ebp
+ 339:	c3                   	ret    
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000340 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	57                   	push   %edi
+ 348:	8b 45 10             	mov    0x10(%ebp),%eax
+ 34b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 34e:	56                   	push   %esi
+ 34f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 352:	85 c0                	test   %eax,%eax
+ 354:	7e 0f                	jle    365 <memmove+0x25>
+ 356:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 358:	89 d7                	mov    %edx,%edi
+ 35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 360:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 361:	39 f8                	cmp    %edi,%eax
+ 363:	75 fb                	jne    360 <memmove+0x20>
+  return vdst;
+}
+ 365:	5e                   	pop    %esi
+ 366:	89 d0                	mov    %edx,%eax
+ 368:	5f                   	pop    %edi
+ 369:	5d                   	pop    %ebp
+ 36a:	c3                   	ret    
+
+0000036b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 36b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <exit>:
+SYSCALL(exit)
+ 373:	b8 02 00 00 00       	mov    $0x2,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <wait>:
+SYSCALL(wait)
+ 37b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <pipe>:
+SYSCALL(pipe)
+ 383:	b8 04 00 00 00       	mov    $0x4,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <read>:
+SYSCALL(read)
+ 38b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <write>:
+SYSCALL(write)
+ 393:	b8 10 00 00 00       	mov    $0x10,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <close>:
+SYSCALL(close)
+ 39b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <kill>:
+SYSCALL(kill)
+ 3a3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <exec>:
+SYSCALL(exec)
+ 3ab:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <open>:
+SYSCALL(open)
+ 3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mknod>:
+SYSCALL(mknod)
+ 3bb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <unlink>:
+SYSCALL(unlink)
+ 3c3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <fstat>:
+SYSCALL(fstat)
+ 3cb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <link>:
+SYSCALL(link)
+ 3d3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mkdir>:
+SYSCALL(mkdir)
+ 3db:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <chdir>:
+SYSCALL(chdir)
+ 3e3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <dup>:
+SYSCALL(dup)
+ 3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getpid>:
+SYSCALL(getpid)
+ 3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <sbrk>:
+SYSCALL(sbrk)
+ 3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <sleep>:
+SYSCALL(sleep)
+ 403:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <uptime>:
+SYSCALL(uptime)
+ 40b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <draw>:
+SYSCALL(draw)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <history>:
+SYSCALL(history)
+ 41b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <wait2>:
+SYSCALL(wait2)
+ 423:	b8 18 00 00 00       	mov    $0x18,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <set_prio>:
+SYSCALL(set_prio)
+ 42b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <yield2>:
+SYSCALL(yield2)
+ 433:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+ 43b:	66 90                	xchg   %ax,%ax
+ 43d:	66 90                	xchg   %ax,%ax
+ 43f:	90                   	nop
+
+00000440 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 3c             	sub    $0x3c,%esp
+ 449:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 44c:	89 d1                	mov    %edx,%ecx
+{
+ 44e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 451:	85 d2                	test   %edx,%edx
+ 453:	0f 89 7f 00 00 00    	jns    4d8 <printint+0x98>
+ 459:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 45d:	74 79                	je     4d8 <printint+0x98>
+    neg = 1;
+ 45f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 466:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 468:	31 db                	xor    %ebx,%ebx
+ 46a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 470:	89 c8                	mov    %ecx,%eax
+ 472:	31 d2                	xor    %edx,%edx
+ 474:	89 cf                	mov    %ecx,%edi
+ 476:	f7 75 c4             	divl   -0x3c(%ebp)
+ 479:	0f b6 92 98 08 00 00 	movzbl 0x898(%edx),%edx
+ 480:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 483:	89 d8                	mov    %ebx,%eax
+ 485:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 488:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 48b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 48e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 491:	76 dd                	jbe    470 <printint+0x30>
+  if(neg)
+ 493:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 496:	85 c9                	test   %ecx,%ecx
+ 498:	74 0c                	je     4a6 <printint+0x66>
+    buf[i++] = '-';
+ 49a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 49f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4a1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4a6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4a9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4ad:	eb 07                	jmp    4b6 <printint+0x76>
+ 4af:	90                   	nop
+ 4b0:	0f b6 13             	movzbl (%ebx),%edx
+ 4b3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4b6:	83 ec 04             	sub    $0x4,%esp
+ 4b9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4bc:	6a 01                	push   $0x1
+ 4be:	56                   	push   %esi
+ 4bf:	57                   	push   %edi
+ 4c0:	e8 ce fe ff ff       	call   393 <write>
+  while(--i >= 0)
+ 4c5:	83 c4 10             	add    $0x10,%esp
+ 4c8:	39 de                	cmp    %ebx,%esi
+ 4ca:	75 e4                	jne    4b0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4cf:	5b                   	pop    %ebx
+ 4d0:	5e                   	pop    %esi
+ 4d1:	5f                   	pop    %edi
+ 4d2:	5d                   	pop    %ebp
+ 4d3:	c3                   	ret    
+ 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4d8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4df:	eb 87                	jmp    468 <printint+0x28>
+ 4e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
+
+000004f0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4f0:	f3 0f 1e fb          	endbr32 
+ 4f4:	55                   	push   %ebp
+ 4f5:	89 e5                	mov    %esp,%ebp
+ 4f7:	57                   	push   %edi
+ 4f8:	56                   	push   %esi
+ 4f9:	53                   	push   %ebx
+ 4fa:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4fd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 500:	0f b6 1e             	movzbl (%esi),%ebx
+ 503:	84 db                	test   %bl,%bl
+ 505:	0f 84 b4 00 00 00    	je     5bf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 50b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 50e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 511:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 514:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 516:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 519:	eb 33                	jmp    54e <printf+0x5e>
+ 51b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 51f:	90                   	nop
+ 520:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 523:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	74 17                	je     544 <printf+0x54>
+  write(fd, &c, 1);
+ 52d:	83 ec 04             	sub    $0x4,%esp
+ 530:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 533:	6a 01                	push   $0x1
+ 535:	57                   	push   %edi
+ 536:	ff 75 08             	pushl  0x8(%ebp)
+ 539:	e8 55 fe ff ff       	call   393 <write>
+ 53e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 541:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 544:	0f b6 1e             	movzbl (%esi),%ebx
+ 547:	83 c6 01             	add    $0x1,%esi
+ 54a:	84 db                	test   %bl,%bl
+ 54c:	74 71                	je     5bf <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 54e:	0f be cb             	movsbl %bl,%ecx
+ 551:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 554:	85 d2                	test   %edx,%edx
+ 556:	74 c8                	je     520 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 558:	83 fa 25             	cmp    $0x25,%edx
+ 55b:	75 e7                	jne    544 <printf+0x54>
+      if(c == 'd'){
+ 55d:	83 f8 64             	cmp    $0x64,%eax
+ 560:	0f 84 9a 00 00 00    	je     600 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 566:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 56c:	83 f9 70             	cmp    $0x70,%ecx
+ 56f:	74 5f                	je     5d0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 571:	83 f8 73             	cmp    $0x73,%eax
+ 574:	0f 84 d6 00 00 00    	je     650 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 57a:	83 f8 63             	cmp    $0x63,%eax
+ 57d:	0f 84 8d 00 00 00    	je     610 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 583:	83 f8 25             	cmp    $0x25,%eax
+ 586:	0f 84 b4 00 00 00    	je     640 <printf+0x150>
+  write(fd, &c, 1);
+ 58c:	83 ec 04             	sub    $0x4,%esp
+ 58f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 593:	6a 01                	push   $0x1
+ 595:	57                   	push   %edi
+ 596:	ff 75 08             	pushl  0x8(%ebp)
+ 599:	e8 f5 fd ff ff       	call   393 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 59e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a1:	83 c4 0c             	add    $0xc,%esp
+ 5a4:	6a 01                	push   $0x1
+ 5a6:	83 c6 01             	add    $0x1,%esi
+ 5a9:	57                   	push   %edi
+ 5aa:	ff 75 08             	pushl  0x8(%ebp)
+ 5ad:	e8 e1 fd ff ff       	call   393 <write>
+  for(i = 0; fmt[i]; i++){
+ 5b2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5b6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5b9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5bb:	84 db                	test   %bl,%bl
+ 5bd:	75 8f                	jne    54e <printf+0x5e>
+    }
+  }
+}
+ 5bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5c2:	5b                   	pop    %ebx
+ 5c3:	5e                   	pop    %esi
+ 5c4:	5f                   	pop    %edi
+ 5c5:	5d                   	pop    %ebp
+ 5c6:	c3                   	ret    
+ 5c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ce:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5d8:	6a 00                	push   $0x0
+ 5da:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5dd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5e0:	8b 13                	mov    (%ebx),%edx
+ 5e2:	e8 59 fe ff ff       	call   440 <printint>
+        ap++;
+ 5e7:	89 d8                	mov    %ebx,%eax
+ 5e9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ec:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ee:	83 c0 04             	add    $0x4,%eax
+ 5f1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5f4:	e9 4b ff ff ff       	jmp    544 <printf+0x54>
+ 5f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	eb ce                	jmp    5da <printf+0xea>
+ 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 610:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 616:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 618:	6a 01                	push   $0x1
+        ap++;
+ 61a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 61d:	57                   	push   %edi
+ 61e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 621:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 624:	e8 6a fd ff ff       	call   393 <write>
+        ap++;
+ 629:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 62c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 0e ff ff ff       	jmp    544 <printf+0x54>
+ 636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 640:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+ 646:	e9 59 ff ff ff       	jmp    5a4 <printf+0xb4>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+        s = (char*)*ap;
+ 650:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 653:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 655:	83 c0 04             	add    $0x4,%eax
+ 658:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 65b:	85 db                	test   %ebx,%ebx
+ 65d:	74 17                	je     676 <printf+0x186>
+        while(*s != 0){
+ 65f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 662:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 664:	84 c0                	test   %al,%al
+ 666:	0f 84 d8 fe ff ff    	je     544 <printf+0x54>
+ 66c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 66f:	89 de                	mov    %ebx,%esi
+ 671:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 674:	eb 1a                	jmp    690 <printf+0x1a0>
+          s = "(null)";
+ 676:	bb 90 08 00 00       	mov    $0x890,%ebx
+        while(*s != 0){
+ 67b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 67e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 683:	89 de                	mov    %ebx,%esi
+ 685:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+  write(fd, &c, 1);
+ 690:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 693:	83 c6 01             	add    $0x1,%esi
+ 696:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 699:	6a 01                	push   $0x1
+ 69b:	57                   	push   %edi
+ 69c:	53                   	push   %ebx
+ 69d:	e8 f1 fc ff ff       	call   393 <write>
+        while(*s != 0){
+ 6a2:	0f b6 06             	movzbl (%esi),%eax
+ 6a5:	83 c4 10             	add    $0x10,%esp
+ 6a8:	84 c0                	test   %al,%al
+ 6aa:	75 e4                	jne    690 <printf+0x1a0>
+ 6ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6af:	31 d2                	xor    %edx,%edx
+ 6b1:	e9 8e fe ff ff       	jmp    544 <printf+0x54>
+ 6b6:	66 90                	xchg   %ax,%ax
+ 6b8:	66 90                	xchg   %ax,%ax
+ 6ba:	66 90                	xchg   %ax,%ax
+ 6bc:	66 90                	xchg   %ax,%ax
+ 6be:	66 90                	xchg   %ax,%ax
+
+000006c0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c5:	a1 80 0b 00 00       	mov    0xb80,%eax
+{
+ 6ca:	89 e5                	mov    %esp,%ebp
+ 6cc:	57                   	push   %edi
+ 6cd:	56                   	push   %esi
+ 6ce:	53                   	push   %ebx
+ 6cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6d2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6d7:	39 c8                	cmp    %ecx,%eax
+ 6d9:	73 15                	jae    6f0 <free+0x30>
+ 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+ 6e0:	39 d1                	cmp    %edx,%ecx
+ 6e2:	72 14                	jb     6f8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e4:	39 d0                	cmp    %edx,%eax
+ 6e6:	73 10                	jae    6f8 <free+0x38>
+{
+ 6e8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ea:	8b 10                	mov    (%eax),%edx
+ 6ec:	39 c8                	cmp    %ecx,%eax
+ 6ee:	72 f0                	jb     6e0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f0:	39 d0                	cmp    %edx,%eax
+ 6f2:	72 f4                	jb     6e8 <free+0x28>
+ 6f4:	39 d1                	cmp    %edx,%ecx
+ 6f6:	73 f0                	jae    6e8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6fe:	39 fa                	cmp    %edi,%edx
+ 700:	74 1e                	je     720 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 702:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 705:	8b 50 04             	mov    0x4(%eax),%edx
+ 708:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 70b:	39 f1                	cmp    %esi,%ecx
+ 70d:	74 28                	je     737 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 70f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 711:	5b                   	pop    %ebx
+  freep = p;
+ 712:	a3 80 0b 00 00       	mov    %eax,0xb80
+}
+ 717:	5e                   	pop    %esi
+ 718:	5f                   	pop    %edi
+ 719:	5d                   	pop    %ebp
+ 71a:	c3                   	ret    
+ 71b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 720:	03 72 04             	add    0x4(%edx),%esi
+ 723:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 726:	8b 10                	mov    (%eax),%edx
+ 728:	8b 12                	mov    (%edx),%edx
+ 72a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 72d:	8b 50 04             	mov    0x4(%eax),%edx
+ 730:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 733:	39 f1                	cmp    %esi,%ecx
+ 735:	75 d8                	jne    70f <free+0x4f>
+    p->s.size += bp->s.size;
+ 737:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 73a:	a3 80 0b 00 00       	mov    %eax,0xb80
+    p->s.size += bp->s.size;
+ 73f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 742:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 745:	89 10                	mov    %edx,(%eax)
+}
+ 747:	5b                   	pop    %ebx
+ 748:	5e                   	pop    %esi
+ 749:	5f                   	pop    %edi
+ 74a:	5d                   	pop    %ebp
+ 74b:	c3                   	ret    
+ 74c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000750 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 750:	f3 0f 1e fb          	endbr32 
+ 754:	55                   	push   %ebp
+ 755:	89 e5                	mov    %esp,%ebp
+ 757:	57                   	push   %edi
+ 758:	56                   	push   %esi
+ 759:	53                   	push   %ebx
+ 75a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 75d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 760:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 766:	8d 70 07             	lea    0x7(%eax),%esi
+ 769:	c1 ee 03             	shr    $0x3,%esi
+ 76c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 76f:	85 ff                	test   %edi,%edi
+ 771:	0f 84 a9 00 00 00    	je     820 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 777:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 779:	8b 48 04             	mov    0x4(%eax),%ecx
+ 77c:	39 f1                	cmp    %esi,%ecx
+ 77e:	73 6d                	jae    7ed <malloc+0x9d>
+ 780:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 786:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 78b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 78e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 795:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 798:	eb 17                	jmp    7b1 <malloc+0x61>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7a2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7a5:	39 f1                	cmp    %esi,%ecx
+ 7a7:	73 4f                	jae    7f8 <malloc+0xa8>
+ 7a9:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
+ 7af:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b1:	39 c7                	cmp    %eax,%edi
+ 7b3:	75 eb                	jne    7a0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7b5:	83 ec 0c             	sub    $0xc,%esp
+ 7b8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7bb:	e8 3b fc ff ff       	call   3fb <sbrk>
+  if(p == (char*)-1)
+ 7c0:	83 c4 10             	add    $0x10,%esp
+ 7c3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7c6:	74 1b                	je     7e3 <malloc+0x93>
+  hp->s.size = nu;
+ 7c8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7cb:	83 ec 0c             	sub    $0xc,%esp
+ 7ce:	83 c0 08             	add    $0x8,%eax
+ 7d1:	50                   	push   %eax
+ 7d2:	e8 e9 fe ff ff       	call   6c0 <free>
+  return freep;
+ 7d7:	a1 80 0b 00 00       	mov    0xb80,%eax
+      if((p = morecore(nunits)) == 0)
+ 7dc:	83 c4 10             	add    $0x10,%esp
+ 7df:	85 c0                	test   %eax,%eax
+ 7e1:	75 bd                	jne    7a0 <malloc+0x50>
+        return 0;
+  }
+}
+ 7e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7e6:	31 c0                	xor    %eax,%eax
+}
+ 7e8:	5b                   	pop    %ebx
+ 7e9:	5e                   	pop    %esi
+ 7ea:	5f                   	pop    %edi
+ 7eb:	5d                   	pop    %ebp
+ 7ec:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7ed:	89 c2                	mov    %eax,%edx
+ 7ef:	89 f8                	mov    %edi,%eax
+ 7f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7f8:	39 ce                	cmp    %ecx,%esi
+ 7fa:	74 54                	je     850 <malloc+0x100>
+        p->s.size -= nunits;
+ 7fc:	29 f1                	sub    %esi,%ecx
+ 7fe:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 801:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 804:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 807:	a3 80 0b 00 00       	mov    %eax,0xb80
+}
+ 80c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 80f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 812:	5b                   	pop    %ebx
+ 813:	5e                   	pop    %esi
+ 814:	5f                   	pop    %edi
+ 815:	5d                   	pop    %ebp
+ 816:	c3                   	ret    
+ 817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 81e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 820:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
+ 827:	0b 00 00 
+    base.s.size = 0;
+ 82a:	bf 84 0b 00 00       	mov    $0xb84,%edi
+    base.s.ptr = freep = prevp = &base;
+ 82f:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
+ 836:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 839:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 83b:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
+ 842:	00 00 00 
+    if(p->s.size >= nunits){
+ 845:	e9 36 ff ff ff       	jmp    780 <malloc+0x30>
+ 84a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 850:	8b 0a                	mov    (%edx),%ecx
+ 852:	89 08                	mov    %ecx,(%eax)
+ 854:	eb b1                	jmp    807 <malloc+0xb7>
diff -ruN xv6-public/cat.d xv6-public_mine/cat.d
--- xv6-public/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/cat.d	2021-09-30 23:42:19.567276531 +0530
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/cat.o and xv6-public_mine/cat.o differ
diff -ruN xv6-public/cat.sym xv6-public_mine/cat.sym
--- xv6-public/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/cat.sym	2021-09-30 23:42:19.759340778 +0530
@@ -0,0 +1,64 @@
+00000000 .text
+00000858 .rodata
+000008ac .eh_frame
+00000b80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000440 printint
+00000898 digits.1101
+00000000 umalloc.c
+00000b80 freep
+00000b84 base
+00000110 strcpy
+0000042b set_prio
+000004f0 printf
+00000340 memmove
+000003bb mknod
+00000230 gets
+000003f3 getpid
+00000090 cat
+00000750 malloc
+00000403 sleep
+00000423 wait2
+00000383 pipe
+00000393 write
+0000041b history
+000003cb fstat
+000003a3 kill
+000003e3 chdir
+000003ab exec
+0000037b wait
+0000038b read
+000003c3 unlink
+0000036b fork
+000003fb sbrk
+0000040b uptime
+00000b7c __bss_start
+000001d0 memset
+00000000 main
+00000140 strcmp
+000003eb dup
+00000ba0 buf
+000002b0 stat
+00000b7c _edata
+00000da0 _end
+000003d3 link
+00000373 exit
+00000300 atoi
+00000433 yield2
+00000413 draw
+00000190 strlen
+000003b3 open
+000001f0 strchr
+000003db mkdir
+0000039b close
+000006c0 free
diff -ruN xv6-public/console.c xv6-public_mine/console.c
--- xv6-public/console.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/console.c	2021-09-15 20:34:40.000000000 +0530
@@ -1,7 +1,7 @@
 // Console input and output.
 // Input is from the keyboard or serial port.
 // Output is written to the screen and serial port.
-
+#include "console.h"
 #include "types.h"
 #include "defs.h"
 #include "param.h"
@@ -124,8 +124,7 @@
 }
 
 //PAGEBREAK: 50
-#define BACKSPACE 0x100
-#define CRTPORT 0x3d4
+
 static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
 
 static void
@@ -139,18 +138,25 @@
   outb(CRTPORT, 15);
   pos |= inb(CRTPORT+1);
 
-  if(c == '\n')
-    pos += 80 - pos%80;
-  else if(c == BACKSPACE){
-    if(pos > 0) --pos;
-  } else
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  switch(c) {
+    case '\n':
+      pos += 80 - pos%80;
+      break;
+    case BACKSPACE:
+      if(pos > 0) --pos;
+      break;
+    case LEFT_ARROW:
+      if(pos > 0) --pos;
+      break;
+    default:
+      crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  }
 
   if(pos < 0 || pos > 25*80)
     panic("pos under/overflow");
 
   if((pos/80) >= 24){  // Scroll up.
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+    memmove(crt, crt+80, sizeof(crt[0])*23*80); 
     pos -= 80;
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
   }
@@ -159,7 +165,8 @@
   outb(CRTPORT+1, pos>>8);
   outb(CRTPORT, 15);
   outb(CRTPORT+1, pos);
-  crt[pos] = ' ' | 0x0700;
+  if (c == BACKSPACE)
+    crt[pos] = ' ' | 0x0700;
 }
 
 void
@@ -171,60 +178,224 @@
       ;
   }
 
-  if(c == BACKSPACE){
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-  } else
-    uartputc(c);
+  switch (c) {
+    case BACKSPACE:
+      uartputc('\b'); uartputc(' '); uartputc('\b');  // uart is writing to the linux shell
+      break;
+    case LEFT_ARROW:
+      uartputc('\b');
+      break;
+    default:
+      uartputc(c);
+  }
   cgaputc(c);
+  // uartputc prints to Linux's terminal and cgaputc prints to QEMU's terminal
 }
 
-#define INPUT_BUF 128
 struct {
   char buf[INPUT_BUF];
   uint r;  // Read index
   uint w;  // Write index
   uint e;  // Edit index
+  uint rightmost; // the first empty char in the line
 } input;
 
+// stores the charactes in the input which have to be shifted while backspacing and typing while caret is not at the end.
+char buffToBeShifted[INPUT_BUF]; 
+
+// this struct stores the commands and its details.
+struct {
+  char CommandMemArr[MAX_HISTORY][INPUT_BUF];   // holds the actual command strings.
+  uint lengthsArr[MAX_HISTORY];                 // this will hold the length of each command string.
+  uint FinalCMdIndex;                          // the index of the last command entered to history.
+  int TotalCMDsInMem;                           // total number of commands executed from the system boot.
+  int currentPosition;                          // no. of skips in history array while toggling up and down arrow.
+} HistoryMem;
+
+char oldBuf[INPUT_BUF]; // this will hold the details of the command that was written before accessing the history
+uint lengthOfOldBuf;
+
+char buf2[INPUT_BUF];
+
 #define C(x)  ((x)-'@')  // Control-x
 
+// copies the contents which have to be shifted from input to bufftoshifted 
+void copybuffToBeShifted() {
+  uint n = input.rightmost - input.e; // contents after edit have to be shifted when typed or backspaced.
+  uint i;
+  for (i = 0; i < n; i++)
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+}
+
+// shifts the input to right by one position and repaints it on the line on the screen from edit index and brings back caret to the original position
+void shiftbufright() {
+  uint n = input.rightmost - input.e;
+  int i;
+  for (i = 0; i < n; i++) {
+
+    char c = buffToBeShifted[i];
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+    consputc(c); // repaitning the screen.
+  }
+  // reset buffToBeShifted for future use
+  memset(buffToBeShifted, '\0', INPUT_BUF);
+  // return the caret to its correct position
+  for (i = 0; i < n; i++) {
+    consputc(LEFT_ARROW);
+  }
+}
+
+// Shift input.buf one positon to the left, and repaint the chars on-screen. Used only when punching in BACKSPACE and the caret isn't at the end of the line.
+void shiftbufleft() {
+  uint n = input.rightmost - input.e;
+  uint i;
+  consputc(LEFT_ARROW);
+  input.e--;
+  for (i = 0; i < n; i++) {
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+    consputc(c); // repainting the screen.
+  }
+  input.rightmost--;
+  consputc(' '); // delete the last char in line
+  for (i = 0; i <= n; i++) {
+    consputc(LEFT_ARROW); // shift the caret back to the left
+  }
+}
+
 void
 consoleintr(int (*getc)(void))
 {
   int c, doprocdump = 0;
-
+  uint tempIndex;
   acquire(&cons.lock);
   while((c = getc()) >= 0){
     switch(c){
-    case C('P'):  // Process listing.
-      // procdump() locks cons.lock indirectly; invoke later
-      doprocdump = 1;
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    default:
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-        c = (c == '\r') ? '\n' : c;
-        input.buf[input.e++ % INPUT_BUF] = c;
-        consputc(c);
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-          input.w = input.e;
-          wakeup(&input.r);
+    	case C('P'):  // Process listing.
+        doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
+        break;
+      case C('U'):  // Kill line.
+        if (input.rightmost > input.e) { // caret isn't at the end of the line
+          uint numtoshift = input.rightmost - input.e;
+          uint placestoshift = input.e - input.r;
+          uint i;
+          for (i = 0; i < placestoshift; i++) {
+            consputc(LEFT_ARROW);
+          }
+          memset(buf2, '\0', INPUT_BUF);
+          for (i = 0; i < numtoshift; i++) {
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+          }
+          for (i = 0; i < numtoshift; i++) {
+            input.buf[(input.r + i) % INPUT_BUF] = buf2[i];
+          }
+          input.e -= placestoshift;
+          input.rightmost -= placestoshift;
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+          }
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+            consputc(' ');
+          }
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+            consputc(LEFT_ARROW);
+          }
+        }
+        else { // caret is at the end of the line -                                       ( deleting everything from both screen and inputbuf)
+          while(input.e != input.r &&
+                input.buf[(input.e - 1) % INPUT_BUF] != '\n'){ 
+            input.e--;
+            input.rightmost--;
+            consputc(BACKSPACE);
+          }
+        }
+        break;
+      case C('H'): case '\x7f':  // Backspace
+        if (input.rightmost != input.e && input.e != input.r) { // caret isn't at the end of the line
+          shiftbufleft(); // shifting buffer to one position left.
+          break;
+        }
+        if(input.e != input.r){ // caret is at the end of the line - deleting last char
+          input.e--;
+          input.rightmost--;
+          consputc(BACKSPACE);
         }
+        break;
+      case LEFT_ARROW:
+        if (input.e != input.r) {
+          input.e--;
+          consputc(c);
+        }
+        break;
+      case RIGHT_ARROW:
+        if (input.e < input.rightmost) {
+          consputc(input.buf[input.e % INPUT_BUF]);
+          input.e++;
+        }
+        else if (input.e == input.rightmost){ // This line add the cursor at the end ogf the line. 
+          consputc(' ');
+          consputc(LEFT_ARROW);
+        }
+        break;
+      case UP_ARROW:
+       if (HistoryMem.currentPosition < HistoryMem.TotalCMDsInMem-1 && HistoryMem.currentPosition < MAX_HISTORY-1 ){ 
+          // current history means the oldest possible will be MAX_HISTORY-1
+          earaseCurrentLineOnScreen(); // eraseing the whole line 
+          earaseContentOnInputBuf();   // erasing in input.buf
+          if (HistoryMem.currentPosition == -1) // if it is the first toggle we make then the our written command  should be stored.
+              copybuffToBeShiftedToOldBuf();
+          HistoryMem.currentPosition++; // toggling by increasing out current position.
+          tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) %MAX_HISTORY; // gives us the index of currentposition'th index from the recent command.
+          copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+          copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+        }
+        break;
+      case DOWN_ARROW:
+        switch(HistoryMem.currentPosition){
+          case -1:
+            //does nothing
+            break;
+          case 0: // prints the string from oldbuff
+            earaseCurrentLineOnScreen();
+            copyBufferToInputBuf(oldBuf, lengthOfOldBuf);
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+            HistoryMem.currentPosition--; // decreasing out current position.
+            break;
+          default:
+            earaseCurrentLineOnScreen();
+            HistoryMem.currentPosition--; // decreasing out current position.
+            tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) % MAX_HISTORY;
+            copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+            copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+            break;
+        }
+        break;
+      case '\n':
+      case '\r':
+	  input.e = input.rightmost;
+      default:
+	if(c != 0 && input.e-input.r < INPUT_BUF){
+	  c = (c == '\r') ? '\n' : c;
+	  if (input.rightmost > input.e) { // caret isn't at the end of the line
+	    copybuffToBeShifted();
+	    input.buf[input.e++ % INPUT_BUF] = c;
+	    input.rightmost++;
+	    consputc(c);
+	    shiftbufright();
+	  }
+	  else {
+	    input.buf[input.e++ % INPUT_BUF] = c;
+	    input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+	    consputc(c);
+	  }
+	  if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
+	    saveCMDinHistoryMem(); // when enter is entered we saving that command to historyMem
+	    input.w = input.rightmost;
+	    wakeup(&input.r);
+	  }
+	}
+	break;
       }
-      break;
-    }
   }
   release(&cons.lock);
   if(doprocdump) {
@@ -232,6 +403,97 @@
   }
 }
 
+// this method eareases the current line from screen
+void
+earaseCurrentLineOnScreen(void){
+    uint numToEarase = input.rightmost - input.r;
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+          consputc(input.buf[input.e % INPUT_BUF]);
+          input.e++;
+        }
+    uint i;
+    for (i = 0; i < numToEarase; i++) {
+      consputc(BACKSPACE); // backspacing the whole line.
+    }
+}
+
+// this method copies the chars currently on display (and on Input.buf) to oldBuf and save its length on current_history_viewed.lengthOld
+void
+copybuffToBeShiftedToOldBuf(void){
+    lengthOfOldBuf = input.rightmost - input.r;
+    uint i;
+    for (i = 0; i < lengthOfOldBuf; i++) {
+        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
+    }
+
+}
+
+// this method earase all the content of the current command on the inputbuf
+void
+earaseContentOnInputBuf(){
+  input.rightmost = input.r;
+  input.e = input.r;
+}
+
+/*
+  this method will print the given buf on the screen
+*/
+void
+copyBufferToScreen(char * bufToPrintOnScreen, uint length){
+  uint i;
+  for (i = 0; i < length; i++) {
+    consputc(bufToPrintOnScreen[i]);
+  }
+}
+
+
+// this method will copy the given buf to Input.buf will set the input.e and input.rightmost assumes input.r=input.w=input.rightmost=input.e
+void
+copyBufferToInputBuf(char * bufToSaveInInput, uint length){
+  uint i;
+  for (i = 0; i < length; i++) {
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+  }
+  input.e = input.r+length;
+  input.rightmost = input.e;
+}
+
+// This method saves the current command into the historyMem
+void
+saveCMDinHistoryMem(){
+  HistoryMem.TotalCMDsInMem++; // counting the total no.of commands executed till now.
+  uint l = input.rightmost-input.r -1;
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+  HistoryMem.lengthsArr[HistoryMem.FinalCMdIndex] = l;
+  uint i;
+  for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
+    HistoryMem.CommandMemArr[HistoryMem.FinalCMdIndex][i] =  input.buf[(input.r+i)%INPUT_BUF];
+  }
+  return;
+}
+
+/*
+  this is the function that gets called by the sys_history and writes the requested command history in the buffer
+*/
+int history(char *buffer, int historyId) {
+  // this function returns command which was executed at historID+1 position in the stored MAX_HISTORY commands.
+  if (historyId < 0 || historyId > MAX_HISTORY - 1)
+    return -2;
+  if (historyId >= HistoryMem.TotalCMDsInMem )
+    return -1;
+  memset(buffer, '\0', INPUT_BUF);
+  uint temp;
+  if(HistoryMem.TotalCMDsInMem > MAX_HISTORY){
+    temp = HistoryMem.FinalCMdIndex - 1;
+  }
+  else{
+    temp = MAX_HISTORY - 1;
+  }
+  temp = (temp - historyId) % MAX_HISTORY;
+  memmove(buffer, HistoryMem.CommandMemArr[temp], HistoryMem.lengthsArr[temp]);
+  return 0;
+}
+
 int
 consoleread(struct inode *ip, char *dst, int n)
 {
@@ -295,5 +557,8 @@
   cons.locking = 1;
 
   ioapicenable(IRQ_KBD, 0);
+  HistoryMem.TotalCMDsInMem = 0;
+  HistoryMem.FinalCMdIndex = 0;
+  HistoryMem.currentPosition = -1;
 }
 
diff -ruN xv6-public/console.d xv6-public_mine/console.d
--- xv6-public/console.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/console.d	2021-09-30 23:41:44.327114927 +0530
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h console.h types.h defs.h \
+ param.h traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h \
+ proc.h x86.h
diff -ruN xv6-public/console.h xv6-public_mine/console.h
--- xv6-public/console.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/console.h	2021-09-14 22:22:57.000000000 +0530
@@ -0,0 +1,36 @@
+//constants used in console.c
+#define BACKSPACE 0x100
+#define CRTPORT 0x3d4
+#define INPUT_BUF 128
+#define UP_ARROW 226
+#define DOWN_ARROW 227
+#define LEFT_ARROW 228
+#define RIGHT_ARROW 229
+#define MAX_HISTORY 16
+
+#include "types.h"
+
+
+void
+earaseCurrentLineOnScreen(void);
+
+
+void
+copybuffToBeShiftedToOldBuf(void);
+
+
+
+void
+earaseContentOnInputBuf();
+
+void
+copyBufferToScreen(char * bufToPrintOnScreen, uint length);
+
+void
+copyBufferToInputBuf(char * bufToSaveInInput, uint length);
+
+
+void
+saveCMDinHistoryMem();
+
+int history(char *buffer, int historyId);
\ No newline at end of file
Binary files xv6-public/console.o and xv6-public_mine/console.o differ
diff -ruN xv6-public/defs.h xv6-public_mine/defs.h
--- xv6-public/defs.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/defs.h	2021-09-30 21:12:12.000000000 +0530
@@ -21,6 +21,7 @@
 void            cprintf(char*, ...);
 void            consoleintr(int(*)(void));
 void            panic(char*) __attribute__((noreturn));
+int             history(char* , int);
 
 // exec.c
 int             exec(char*, char**);
@@ -118,6 +119,7 @@
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
 int             wait(void);
+int             wait2(int*, int *, int *, int *); // adding wait2 here.
 void            wakeup(void*);
 void            yield(void);
 
Binary files xv6-public/_Drawtest and xv6-public_mine/_Drawtest differ
diff -ruN xv6-public/Drawtest.asm xv6-public_mine/Drawtest.asm
--- xv6-public/Drawtest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/Drawtest.asm	2021-09-30 23:42:32.503136852 +0530
@@ -0,0 +1,1305 @@
+
+_Drawtest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+//maximum size of the buffer
+const int max_size = 1578;
+
+int main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 14             	sub    $0x14,%esp
+
+    void* k = malloc(100); int n;
+  18:	6a 64                	push   $0x64
+  1a:	e8 01 07 00 00       	call   720 <malloc>
+  1f:	89 c6                	mov    %eax,%esi
+    // Taking buffer size from the user.
+    printf(1, "ENTER BUFFER SIZE : ");
+  21:	58                   	pop    %eax
+  22:	5a                   	pop    %edx
+  23:	68 28 08 00 00       	push   $0x828
+  28:	6a 01                	push   $0x1
+  2a:	e8 91 04 00 00       	call   4c0 <printf>
+    n = read(0, k, 100);
+  2f:	83 c4 0c             	add    $0xc,%esp
+  32:	6a 64                	push   $0x64
+  34:	56                   	push   %esi
+  35:	6a 00                	push   $0x0
+  37:	e8 1f 03 00 00       	call   35b <read>
+    if(n < 0) {
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	78 7d                	js     c0 <main+0xc0>
+	printf(2, "read error\n");
+	exit();
+    }
+    char* size_str= (char*)k;
+    
+    uint size=0, i=0;
+  43:	31 db                	xor    %ebx,%ebx
+    while(i<n-1){
+  45:	83 f8 01             	cmp    $0x1,%eax
+  48:	74 1f                	je     69 <main+0x69>
+  4a:	89 f2                	mov    %esi,%edx
+  4c:	8d 7c 06 ff          	lea    -0x1(%esi,%eax,1),%edi
+    uint size=0, i=0;
+  50:	31 db                	xor    %ebx,%ebx
+  52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    	size = 10*size + (int) size_str[i]-48;
+  58:	0f be 02             	movsbl (%edx),%eax
+  5b:	8d 0c 9b             	lea    (%ebx,%ebx,4),%ecx
+  5e:	83 c2 01             	add    $0x1,%edx
+  61:	8d 5c 48 d0          	lea    -0x30(%eax,%ecx,2),%ebx
+    while(i<n-1){
+  65:	39 fa                	cmp    %edi,%edx
+  67:	75 ef                	jne    58 <main+0x58>
+	i++;
+    }
+    // Created a buffer with maximum size as size
+    void *draw_buffer = malloc(size);
+  69:	83 ec 0c             	sub    $0xc,%esp
+  6c:	53                   	push   %ebx
+  6d:	e8 ae 06 00 00       	call   720 <malloc>
+
+    // Called the system call and stored the size of image.
+    int draw_size = draw(draw_buffer,size);
+  72:	59                   	pop    %ecx
+    void *draw_buffer = malloc(size);
+  73:	89 c7                	mov    %eax,%edi
+    int draw_size = draw(draw_buffer,size);
+  75:	58                   	pop    %eax
+  76:	53                   	push   %ebx
+  77:	57                   	push   %edi
+  78:	e8 66 03 00 00       	call   3e3 <draw>
+
+    // If the size of image is in buffer is greater than size then print a error message
+    if (draw_size == -1)
+  7d:	83 c4 10             	add    $0x10,%esp
+  80:	83 f8 ff             	cmp    $0xffffffff,%eax
+  83:	74 28                	je     ad <main+0xad>
+        // file descriptor 1 used to print on the standard output i.e (stdout)
+        printf(1, "Buffer size is too small\n");
+    }
+    else
+    {
+        printf(1, "%s\n", (char *)draw_buffer);
+  85:	50                   	push   %eax
+  86:	57                   	push   %edi
+  87:	68 63 08 00 00       	push   $0x863
+  8c:	6a 01                	push   $0x1
+  8e:	e8 2d 04 00 00       	call   4c0 <printf>
+  93:	83 c4 10             	add    $0x10,%esp
+        
+    }
+    free(k); // Deallocating buffer which was used to take buffer size from the user.
+  96:	83 ec 0c             	sub    $0xc,%esp
+  99:	56                   	push   %esi
+  9a:	e8 f1 05 00 00       	call   690 <free>
+
+    return 0;
+}
+  9f:	8d 65 f0             	lea    -0x10(%ebp),%esp
+  a2:	31 c0                	xor    %eax,%eax
+  a4:	59                   	pop    %ecx
+  a5:	5b                   	pop    %ebx
+  a6:	5e                   	pop    %esi
+  a7:	5f                   	pop    %edi
+  a8:	5d                   	pop    %ebp
+  a9:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  ac:	c3                   	ret    
+        printf(1, "Buffer size is too small\n");
+  ad:	52                   	push   %edx
+  ae:	52                   	push   %edx
+  af:	68 49 08 00 00       	push   $0x849
+  b4:	6a 01                	push   $0x1
+  b6:	e8 05 04 00 00       	call   4c0 <printf>
+  bb:	83 c4 10             	add    $0x10,%esp
+  be:	eb d6                	jmp    96 <main+0x96>
+	printf(2, "read error\n");
+  c0:	50                   	push   %eax
+  c1:	50                   	push   %eax
+  c2:	68 3d 08 00 00       	push   $0x83d
+  c7:	6a 02                	push   $0x2
+  c9:	e8 f2 03 00 00       	call   4c0 <printf>
+	exit();
+  ce:	e8 70 02 00 00       	call   343 <exit>
+  d3:	66 90                	xchg   %ax,%ax
+  d5:	66 90                	xchg   %ax,%ax
+  d7:	66 90                	xchg   %ax,%ax
+  d9:	66 90                	xchg   %ax,%ax
+  db:	66 90                	xchg   %ax,%ax
+  dd:	66 90                	xchg   %ax,%ax
+  df:	90                   	nop
+
+000000e0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  e0:	f3 0f 1e fb          	endbr32 
+  e4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  e5:	31 c0                	xor    %eax,%eax
+{
+  e7:	89 e5                	mov    %esp,%ebp
+  e9:	53                   	push   %ebx
+  ea:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ed:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  f0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  f4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  f7:	83 c0 01             	add    $0x1,%eax
+  fa:	84 d2                	test   %dl,%dl
+  fc:	75 f2                	jne    f0 <strcpy+0x10>
+    ;
+  return os;
+}
+  fe:	89 c8                	mov    %ecx,%eax
+ 100:	5b                   	pop    %ebx
+ 101:	5d                   	pop    %ebp
+ 102:	c3                   	ret    
+ 103:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000110 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	53                   	push   %ebx
+ 118:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 11b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 11e:	0f b6 01             	movzbl (%ecx),%eax
+ 121:	0f b6 1a             	movzbl (%edx),%ebx
+ 124:	84 c0                	test   %al,%al
+ 126:	75 19                	jne    141 <strcmp+0x31>
+ 128:	eb 26                	jmp    150 <strcmp+0x40>
+ 12a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 130:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 134:	83 c1 01             	add    $0x1,%ecx
+ 137:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 13a:	0f b6 1a             	movzbl (%edx),%ebx
+ 13d:	84 c0                	test   %al,%al
+ 13f:	74 0f                	je     150 <strcmp+0x40>
+ 141:	38 d8                	cmp    %bl,%al
+ 143:	74 eb                	je     130 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 145:	29 d8                	sub    %ebx,%eax
+}
+ 147:	5b                   	pop    %ebx
+ 148:	5d                   	pop    %ebp
+ 149:	c3                   	ret    
+ 14a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 150:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 152:	29 d8                	sub    %ebx,%eax
+}
+ 154:	5b                   	pop    %ebx
+ 155:	5d                   	pop    %ebp
+ 156:	c3                   	ret    
+ 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15e:	66 90                	xchg   %ax,%ax
+
+00000160 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 16a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 16d:	74 21                	je     190 <strlen+0x30>
+ 16f:	31 c0                	xor    %eax,%eax
+ 171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 178:	83 c0 01             	add    $0x1,%eax
+ 17b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 17f:	89 c1                	mov    %eax,%ecx
+ 181:	75 f5                	jne    178 <strlen+0x18>
+    ;
+  return n;
+}
+ 183:	89 c8                	mov    %ecx,%eax
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 190:	31 c9                	xor    %ecx,%ecx
+}
+ 192:	5d                   	pop    %ebp
+ 193:	89 c8                	mov    %ecx,%eax
+ 195:	c3                   	ret    
+ 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001a0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1ab:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ae:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1b1:	89 d7                	mov    %edx,%edi
+ 1b3:	fc                   	cld    
+ 1b4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1b6:	89 d0                	mov    %edx,%eax
+ 1b8:	5f                   	pop    %edi
+ 1b9:	5d                   	pop    %ebp
+ 1ba:	c3                   	ret    
+ 1bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1ca:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1ce:	0f b6 10             	movzbl (%eax),%edx
+ 1d1:	84 d2                	test   %dl,%dl
+ 1d3:	75 16                	jne    1eb <strchr+0x2b>
+ 1d5:	eb 21                	jmp    1f8 <strchr+0x38>
+ 1d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1de:	66 90                	xchg   %ax,%ax
+ 1e0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1e4:	83 c0 01             	add    $0x1,%eax
+ 1e7:	84 d2                	test   %dl,%dl
+ 1e9:	74 0d                	je     1f8 <strchr+0x38>
+    if(*s == c)
+ 1eb:	38 d1                	cmp    %dl,%cl
+ 1ed:	75 f1                	jne    1e0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 1f8:	31 c0                	xor    %eax,%eax
+}
+ 1fa:	5d                   	pop    %ebp
+ 1fb:	c3                   	ret    
+ 1fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	57                   	push   %edi
+ 208:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 209:	31 f6                	xor    %esi,%esi
+{
+ 20b:	53                   	push   %ebx
+ 20c:	89 f3                	mov    %esi,%ebx
+ 20e:	83 ec 1c             	sub    $0x1c,%esp
+ 211:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 214:	eb 33                	jmp    249 <gets+0x49>
+ 216:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 220:	83 ec 04             	sub    $0x4,%esp
+ 223:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 226:	6a 01                	push   $0x1
+ 228:	50                   	push   %eax
+ 229:	6a 00                	push   $0x0
+ 22b:	e8 2b 01 00 00       	call   35b <read>
+    if(cc < 1)
+ 230:	83 c4 10             	add    $0x10,%esp
+ 233:	85 c0                	test   %eax,%eax
+ 235:	7e 1c                	jle    253 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 237:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 23b:	83 c7 01             	add    $0x1,%edi
+ 23e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 241:	3c 0a                	cmp    $0xa,%al
+ 243:	74 23                	je     268 <gets+0x68>
+ 245:	3c 0d                	cmp    $0xd,%al
+ 247:	74 1f                	je     268 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 249:	83 c3 01             	add    $0x1,%ebx
+ 24c:	89 fe                	mov    %edi,%esi
+ 24e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 251:	7c cd                	jl     220 <gets+0x20>
+ 253:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 255:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 258:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 25b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 25e:	5b                   	pop    %ebx
+ 25f:	5e                   	pop    %esi
+ 260:	5f                   	pop    %edi
+ 261:	5d                   	pop    %ebp
+ 262:	c3                   	ret    
+ 263:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 267:	90                   	nop
+ 268:	8b 75 08             	mov    0x8(%ebp),%esi
+ 26b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 26e:	01 de                	add    %ebx,%esi
+ 270:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 272:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 275:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 278:	5b                   	pop    %ebx
+ 279:	5e                   	pop    %esi
+ 27a:	5f                   	pop    %edi
+ 27b:	5d                   	pop    %ebp
+ 27c:	c3                   	ret    
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000280 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 280:	f3 0f 1e fb          	endbr32 
+ 284:	55                   	push   %ebp
+ 285:	89 e5                	mov    %esp,%ebp
+ 287:	56                   	push   %esi
+ 288:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 289:	83 ec 08             	sub    $0x8,%esp
+ 28c:	6a 00                	push   $0x0
+ 28e:	ff 75 08             	pushl  0x8(%ebp)
+ 291:	e8 ed 00 00 00       	call   383 <open>
+  if(fd < 0)
+ 296:	83 c4 10             	add    $0x10,%esp
+ 299:	85 c0                	test   %eax,%eax
+ 29b:	78 2b                	js     2c8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 29d:	83 ec 08             	sub    $0x8,%esp
+ 2a0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2a3:	89 c3                	mov    %eax,%ebx
+ 2a5:	50                   	push   %eax
+ 2a6:	e8 f0 00 00 00       	call   39b <fstat>
+  close(fd);
+ 2ab:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ae:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2b0:	e8 b6 00 00 00       	call   36b <close>
+  return r;
+ 2b5:	83 c4 10             	add    $0x10,%esp
+}
+ 2b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2bb:	89 f0                	mov    %esi,%eax
+ 2bd:	5b                   	pop    %ebx
+ 2be:	5e                   	pop    %esi
+ 2bf:	5d                   	pop    %ebp
+ 2c0:	c3                   	ret    
+ 2c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2c8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2cd:	eb e9                	jmp    2b8 <stat+0x38>
+ 2cf:	90                   	nop
+
+000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	f3 0f 1e fb          	endbr32 
+ 2d4:	55                   	push   %ebp
+ 2d5:	89 e5                	mov    %esp,%ebp
+ 2d7:	53                   	push   %ebx
+ 2d8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2db:	0f be 02             	movsbl (%edx),%eax
+ 2de:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2e1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2e4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2e9:	77 1a                	ja     305 <atoi+0x35>
+ 2eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ef:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 2f0:	83 c2 01             	add    $0x1,%edx
+ 2f3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2f6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2fa:	0f be 02             	movsbl (%edx),%eax
+ 2fd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 300:	80 fb 09             	cmp    $0x9,%bl
+ 303:	76 eb                	jbe    2f0 <atoi+0x20>
+  return n;
+}
+ 305:	89 c8                	mov    %ecx,%eax
+ 307:	5b                   	pop    %ebx
+ 308:	5d                   	pop    %ebp
+ 309:	c3                   	ret    
+ 30a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000310 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 310:	f3 0f 1e fb          	endbr32 
+ 314:	55                   	push   %ebp
+ 315:	89 e5                	mov    %esp,%ebp
+ 317:	57                   	push   %edi
+ 318:	8b 45 10             	mov    0x10(%ebp),%eax
+ 31b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 31e:	56                   	push   %esi
+ 31f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 322:	85 c0                	test   %eax,%eax
+ 324:	7e 0f                	jle    335 <memmove+0x25>
+ 326:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 328:	89 d7                	mov    %edx,%edi
+ 32a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 330:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 331:	39 f8                	cmp    %edi,%eax
+ 333:	75 fb                	jne    330 <memmove+0x20>
+  return vdst;
+}
+ 335:	5e                   	pop    %esi
+ 336:	89 d0                	mov    %edx,%eax
+ 338:	5f                   	pop    %edi
+ 339:	5d                   	pop    %ebp
+ 33a:	c3                   	ret    
+
+0000033b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 33b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <exit>:
+SYSCALL(exit)
+ 343:	b8 02 00 00 00       	mov    $0x2,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <wait>:
+SYSCALL(wait)
+ 34b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <pipe>:
+SYSCALL(pipe)
+ 353:	b8 04 00 00 00       	mov    $0x4,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <read>:
+SYSCALL(read)
+ 35b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <write>:
+SYSCALL(write)
+ 363:	b8 10 00 00 00       	mov    $0x10,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <close>:
+SYSCALL(close)
+ 36b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <kill>:
+SYSCALL(kill)
+ 373:	b8 06 00 00 00       	mov    $0x6,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <exec>:
+SYSCALL(exec)
+ 37b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <open>:
+SYSCALL(open)
+ 383:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <mknod>:
+SYSCALL(mknod)
+ 38b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <unlink>:
+SYSCALL(unlink)
+ 393:	b8 12 00 00 00       	mov    $0x12,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <fstat>:
+SYSCALL(fstat)
+ 39b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <link>:
+SYSCALL(link)
+ 3a3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <mkdir>:
+SYSCALL(mkdir)
+ 3ab:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <chdir>:
+SYSCALL(chdir)
+ 3b3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <dup>:
+SYSCALL(dup)
+ 3bb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getpid>:
+SYSCALL(getpid)
+ 3c3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <sbrk>:
+SYSCALL(sbrk)
+ 3cb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <sleep>:
+SYSCALL(sleep)
+ 3d3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <uptime>:
+SYSCALL(uptime)
+ 3db:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <draw>:
+SYSCALL(draw)
+ 3e3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <history>:
+SYSCALL(history)
+ 3eb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <wait2>:
+SYSCALL(wait2)
+ 3f3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <set_prio>:
+SYSCALL(set_prio)
+ 3fb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <yield2>:
+SYSCALL(yield2)
+ 403:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+ 40b:	66 90                	xchg   %ax,%ax
+ 40d:	66 90                	xchg   %ax,%ax
+ 40f:	90                   	nop
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+ 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 41c:	89 d1                	mov    %edx,%ecx
+{
+ 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 421:	85 d2                	test   %edx,%edx
+ 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
+ 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 42d:	74 79                	je     4a8 <printint+0x98>
+    neg = 1;
+ 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 436:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 438:	31 db                	xor    %ebx,%ebx
+ 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 440:	89 c8                	mov    %ecx,%eax
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	89 cf                	mov    %ecx,%edi
+ 446:	f7 75 c4             	divl   -0x3c(%ebp)
+ 449:	0f b6 92 74 08 00 00 	movzbl 0x874(%edx),%edx
+ 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 453:	89 d8                	mov    %ebx,%eax
+ 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 461:	76 dd                	jbe    440 <printint+0x30>
+  if(neg)
+ 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 466:	85 c9                	test   %ecx,%ecx
+ 468:	74 0c                	je     476 <printint+0x66>
+    buf[i++] = '-';
+ 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 46f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 47d:	eb 07                	jmp    486 <printint+0x76>
+ 47f:	90                   	nop
+ 480:	0f b6 13             	movzbl (%ebx),%edx
+ 483:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 486:	83 ec 04             	sub    $0x4,%esp
+ 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 48c:	6a 01                	push   $0x1
+ 48e:	56                   	push   %esi
+ 48f:	57                   	push   %edi
+ 490:	e8 ce fe ff ff       	call   363 <write>
+  while(--i >= 0)
+ 495:	83 c4 10             	add    $0x10,%esp
+ 498:	39 de                	cmp    %ebx,%esi
+ 49a:	75 e4                	jne    480 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49f:	5b                   	pop    %ebx
+ 4a0:	5e                   	pop    %esi
+ 4a1:	5f                   	pop    %edi
+ 4a2:	5d                   	pop    %ebp
+ 4a3:	c3                   	ret    
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4af:	eb 87                	jmp    438 <printint+0x28>
+ 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+
+000004c0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4c0:	f3 0f 1e fb          	endbr32 
+ 4c4:	55                   	push   %ebp
+ 4c5:	89 e5                	mov    %esp,%ebp
+ 4c7:	57                   	push   %edi
+ 4c8:	56                   	push   %esi
+ 4c9:	53                   	push   %ebx
+ 4ca:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4cd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4d0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4d3:	84 db                	test   %bl,%bl
+ 4d5:	0f 84 b4 00 00 00    	je     58f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4db:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4de:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4e1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4e4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4e9:	eb 33                	jmp    51e <printf+0x5e>
+ 4eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
+ 4f0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4f3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	74 17                	je     514 <printf+0x54>
+  write(fd, &c, 1);
+ 4fd:	83 ec 04             	sub    $0x4,%esp
+ 500:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 55 fe ff ff       	call   363 <write>
+ 50e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 511:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 514:	0f b6 1e             	movzbl (%esi),%ebx
+ 517:	83 c6 01             	add    $0x1,%esi
+ 51a:	84 db                	test   %bl,%bl
+ 51c:	74 71                	je     58f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 51e:	0f be cb             	movsbl %bl,%ecx
+ 521:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 524:	85 d2                	test   %edx,%edx
+ 526:	74 c8                	je     4f0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 528:	83 fa 25             	cmp    $0x25,%edx
+ 52b:	75 e7                	jne    514 <printf+0x54>
+      if(c == 'd'){
+ 52d:	83 f8 64             	cmp    $0x64,%eax
+ 530:	0f 84 9a 00 00 00    	je     5d0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 536:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 53c:	83 f9 70             	cmp    $0x70,%ecx
+ 53f:	74 5f                	je     5a0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 541:	83 f8 73             	cmp    $0x73,%eax
+ 544:	0f 84 d6 00 00 00    	je     620 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 54a:	83 f8 63             	cmp    $0x63,%eax
+ 54d:	0f 84 8d 00 00 00    	je     5e0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 553:	83 f8 25             	cmp    $0x25,%eax
+ 556:	0f 84 b4 00 00 00    	je     610 <printf+0x150>
+  write(fd, &c, 1);
+ 55c:	83 ec 04             	sub    $0x4,%esp
+ 55f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 563:	6a 01                	push   $0x1
+ 565:	57                   	push   %edi
+ 566:	ff 75 08             	pushl  0x8(%ebp)
+ 569:	e8 f5 fd ff ff       	call   363 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 56e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 571:	83 c4 0c             	add    $0xc,%esp
+ 574:	6a 01                	push   $0x1
+ 576:	83 c6 01             	add    $0x1,%esi
+ 579:	57                   	push   %edi
+ 57a:	ff 75 08             	pushl  0x8(%ebp)
+ 57d:	e8 e1 fd ff ff       	call   363 <write>
+  for(i = 0; fmt[i]; i++){
+ 582:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 586:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 589:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 58b:	84 db                	test   %bl,%bl
+ 58d:	75 8f                	jne    51e <printf+0x5e>
+    }
+  }
+}
+ 58f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 592:	5b                   	pop    %ebx
+ 593:	5e                   	pop    %esi
+ 594:	5f                   	pop    %edi
+ 595:	5d                   	pop    %ebp
+ 596:	c3                   	ret    
+ 597:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a8:	6a 00                	push   $0x0
+ 5aa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5b0:	8b 13                	mov    (%ebx),%edx
+ 5b2:	e8 59 fe ff ff       	call   410 <printint>
+        ap++;
+ 5b7:	89 d8                	mov    %ebx,%eax
+ 5b9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5bc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5be:	83 c0 04             	add    $0x4,%eax
+ 5c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5c4:	e9 4b ff ff ff       	jmp    514 <printf+0x54>
+ 5c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5d8:	6a 01                	push   $0x1
+ 5da:	eb ce                	jmp    5aa <printf+0xea>
+ 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5e3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5e6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5e8:	6a 01                	push   $0x1
+        ap++;
+ 5ea:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5ed:	57                   	push   %edi
+ 5ee:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5f1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f4:	e8 6a fd ff ff       	call   363 <write>
+        ap++;
+ 5f9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5fc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 0e ff ff ff       	jmp    514 <printf+0x54>
+ 606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 610:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+ 616:	e9 59 ff ff ff       	jmp    574 <printf+0xb4>
+ 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+        s = (char*)*ap;
+ 620:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 623:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 625:	83 c0 04             	add    $0x4,%eax
+ 628:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 62b:	85 db                	test   %ebx,%ebx
+ 62d:	74 17                	je     646 <printf+0x186>
+        while(*s != 0){
+ 62f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 632:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 634:	84 c0                	test   %al,%al
+ 636:	0f 84 d8 fe ff ff    	je     514 <printf+0x54>
+ 63c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 63f:	89 de                	mov    %ebx,%esi
+ 641:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 644:	eb 1a                	jmp    660 <printf+0x1a0>
+          s = "(null)";
+ 646:	bb 6c 08 00 00       	mov    $0x86c,%ebx
+        while(*s != 0){
+ 64b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 64e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 653:	89 de                	mov    %ebx,%esi
+ 655:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 658:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+  write(fd, &c, 1);
+ 660:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 663:	83 c6 01             	add    $0x1,%esi
+ 666:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 669:	6a 01                	push   $0x1
+ 66b:	57                   	push   %edi
+ 66c:	53                   	push   %ebx
+ 66d:	e8 f1 fc ff ff       	call   363 <write>
+        while(*s != 0){
+ 672:	0f b6 06             	movzbl (%esi),%eax
+ 675:	83 c4 10             	add    $0x10,%esp
+ 678:	84 c0                	test   %al,%al
+ 67a:	75 e4                	jne    660 <printf+0x1a0>
+ 67c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 67f:	31 d2                	xor    %edx,%edx
+ 681:	e9 8e fe ff ff       	jmp    514 <printf+0x54>
+ 686:	66 90                	xchg   %ax,%ax
+ 688:	66 90                	xchg   %ax,%ax
+ 68a:	66 90                	xchg   %ax,%ax
+ 68c:	66 90                	xchg   %ax,%ax
+ 68e:	66 90                	xchg   %ax,%ax
+
+00000690 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 690:	f3 0f 1e fb          	endbr32 
+ 694:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 695:	a1 40 0b 00 00       	mov    0xb40,%eax
+{
+ 69a:	89 e5                	mov    %esp,%ebp
+ 69c:	57                   	push   %edi
+ 69d:	56                   	push   %esi
+ 69e:	53                   	push   %ebx
+ 69f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6a4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a7:	39 c8                	cmp    %ecx,%eax
+ 6a9:	73 15                	jae    6c0 <free+0x30>
+ 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6af:	90                   	nop
+ 6b0:	39 d1                	cmp    %edx,%ecx
+ 6b2:	72 14                	jb     6c8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b4:	39 d0                	cmp    %edx,%eax
+ 6b6:	73 10                	jae    6c8 <free+0x38>
+{
+ 6b8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ba:	8b 10                	mov    (%eax),%edx
+ 6bc:	39 c8                	cmp    %ecx,%eax
+ 6be:	72 f0                	jb     6b0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c0:	39 d0                	cmp    %edx,%eax
+ 6c2:	72 f4                	jb     6b8 <free+0x28>
+ 6c4:	39 d1                	cmp    %edx,%ecx
+ 6c6:	73 f0                	jae    6b8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ce:	39 fa                	cmp    %edi,%edx
+ 6d0:	74 1e                	je     6f0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6d2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6d5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6db:	39 f1                	cmp    %esi,%ecx
+ 6dd:	74 28                	je     707 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6df:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6e1:	5b                   	pop    %ebx
+  freep = p;
+ 6e2:	a3 40 0b 00 00       	mov    %eax,0xb40
+}
+ 6e7:	5e                   	pop    %esi
+ 6e8:	5f                   	pop    %edi
+ 6e9:	5d                   	pop    %ebp
+ 6ea:	c3                   	ret    
+ 6eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6f0:	03 72 04             	add    0x4(%edx),%esi
+ 6f3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6f6:	8b 10                	mov    (%eax),%edx
+ 6f8:	8b 12                	mov    (%edx),%edx
+ 6fa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6fd:	8b 50 04             	mov    0x4(%eax),%edx
+ 700:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 703:	39 f1                	cmp    %esi,%ecx
+ 705:	75 d8                	jne    6df <free+0x4f>
+    p->s.size += bp->s.size;
+ 707:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 70a:	a3 40 0b 00 00       	mov    %eax,0xb40
+    p->s.size += bp->s.size;
+ 70f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 712:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 715:	89 10                	mov    %edx,(%eax)
+}
+ 717:	5b                   	pop    %ebx
+ 718:	5e                   	pop    %esi
+ 719:	5f                   	pop    %edi
+ 71a:	5d                   	pop    %ebp
+ 71b:	c3                   	ret    
+ 71c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000720 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 720:	f3 0f 1e fb          	endbr32 
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	57                   	push   %edi
+ 728:	56                   	push   %esi
+ 729:	53                   	push   %ebx
+ 72a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 72d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 730:	8b 3d 40 0b 00 00    	mov    0xb40,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 736:	8d 70 07             	lea    0x7(%eax),%esi
+ 739:	c1 ee 03             	shr    $0x3,%esi
+ 73c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 73f:	85 ff                	test   %edi,%edi
+ 741:	0f 84 a9 00 00 00    	je     7f0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 747:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 749:	8b 48 04             	mov    0x4(%eax),%ecx
+ 74c:	39 f1                	cmp    %esi,%ecx
+ 74e:	73 6d                	jae    7bd <malloc+0x9d>
+ 750:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 756:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 75b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 75e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 765:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 768:	eb 17                	jmp    781 <malloc+0x61>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 770:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 772:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 775:	39 f1                	cmp    %esi,%ecx
+ 777:	73 4f                	jae    7c8 <malloc+0xa8>
+ 779:	8b 3d 40 0b 00 00    	mov    0xb40,%edi
+ 77f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 781:	39 c7                	cmp    %eax,%edi
+ 783:	75 eb                	jne    770 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 785:	83 ec 0c             	sub    $0xc,%esp
+ 788:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 78b:	e8 3b fc ff ff       	call   3cb <sbrk>
+  if(p == (char*)-1)
+ 790:	83 c4 10             	add    $0x10,%esp
+ 793:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 796:	74 1b                	je     7b3 <malloc+0x93>
+  hp->s.size = nu;
+ 798:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 79b:	83 ec 0c             	sub    $0xc,%esp
+ 79e:	83 c0 08             	add    $0x8,%eax
+ 7a1:	50                   	push   %eax
+ 7a2:	e8 e9 fe ff ff       	call   690 <free>
+  return freep;
+ 7a7:	a1 40 0b 00 00       	mov    0xb40,%eax
+      if((p = morecore(nunits)) == 0)
+ 7ac:	83 c4 10             	add    $0x10,%esp
+ 7af:	85 c0                	test   %eax,%eax
+ 7b1:	75 bd                	jne    770 <malloc+0x50>
+        return 0;
+  }
+}
+ 7b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7b6:	31 c0                	xor    %eax,%eax
+}
+ 7b8:	5b                   	pop    %ebx
+ 7b9:	5e                   	pop    %esi
+ 7ba:	5f                   	pop    %edi
+ 7bb:	5d                   	pop    %ebp
+ 7bc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7bd:	89 c2                	mov    %eax,%edx
+ 7bf:	89 f8                	mov    %edi,%eax
+ 7c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7c8:	39 ce                	cmp    %ecx,%esi
+ 7ca:	74 54                	je     820 <malloc+0x100>
+        p->s.size -= nunits;
+ 7cc:	29 f1                	sub    %esi,%ecx
+ 7ce:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7d1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7d4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7d7:	a3 40 0b 00 00       	mov    %eax,0xb40
+}
+ 7dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7df:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 7e2:	5b                   	pop    %ebx
+ 7e3:	5e                   	pop    %esi
+ 7e4:	5f                   	pop    %edi
+ 7e5:	5d                   	pop    %ebp
+ 7e6:	c3                   	ret    
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7f0:	c7 05 40 0b 00 00 44 	movl   $0xb44,0xb40
+ 7f7:	0b 00 00 
+    base.s.size = 0;
+ 7fa:	bf 44 0b 00 00       	mov    $0xb44,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7ff:	c7 05 44 0b 00 00 44 	movl   $0xb44,0xb44
+ 806:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 809:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 80b:	c7 05 48 0b 00 00 00 	movl   $0x0,0xb48
+ 812:	00 00 00 
+    if(p->s.size >= nunits){
+ 815:	e9 36 ff ff ff       	jmp    750 <malloc+0x30>
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 820:	8b 0a                	mov    (%edx),%ecx
+ 822:	89 08                	mov    %ecx,(%eax)
+ 824:	eb b1                	jmp    7d7 <malloc+0xb7>
diff -ruN xv6-public/Drawtest.c xv6-public_mine/Drawtest.c
--- xv6-public/Drawtest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/Drawtest.c	2021-08-20 16:18:38.000000000 +0530
@@ -0,0 +1,46 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+//maximum size of the buffer
+const int max_size = 1578;
+
+int main(void)
+{
+
+    void* k = malloc(100); int n;
+    // Taking buffer size from the user.
+    printf(1, "ENTER BUFFER SIZE : ");
+    n = read(0, k, 100);
+    if(n < 0) {
+	printf(2, "read error\n");
+	exit();
+    }
+    char* size_str= (char*)k;
+    
+    uint size=0, i=0;
+    while(i<n-1){
+    	size = 10*size + (int) size_str[i]-48;
+	i++;
+    }
+    // Created a buffer with maximum size as size
+    void *draw_buffer = malloc(size);
+
+    // Called the system call and stored the size of image.
+    int draw_size = draw(draw_buffer,size);
+
+    // If the size of image is in buffer is greater than size then print a error message
+    if (draw_size == -1)
+    {
+        // file descriptor 1 used to print on the standard output i.e (stdout)
+        printf(1, "Buffer size is too small\n");
+    }
+    else
+    {
+        printf(1, "%s\n", (char *)draw_buffer);
+        
+    }
+    free(k); // Deallocating buffer which was used to take buffer size from the user.
+
+    return 0;
+}
diff -ruN xv6-public/Drawtest.d xv6-public_mine/Drawtest.d
--- xv6-public/Drawtest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/Drawtest.d	2021-09-30 23:42:32.315087043 +0530
@@ -0,0 +1 @@
+Drawtest.o: Drawtest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/Drawtest.o and xv6-public_mine/Drawtest.o differ
diff -ruN xv6-public/Drawtest.sym xv6-public_mine/Drawtest.sym
--- xv6-public/Drawtest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/Drawtest.sym	2021-09-30 23:42:32.683184546 +0530
@@ -0,0 +1,63 @@
+00000000 .text
+00000828 .rodata
+00000888 .eh_frame
+00000b40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 Drawtest.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000874 digits.1101
+00000000 umalloc.c
+00000b40 freep
+00000b44 base
+000000e0 strcpy
+000003fb set_prio
+000004c0 printf
+00000310 memmove
+0000038b mknod
+00000200 gets
+000003c3 getpid
+00000720 malloc
+000003d3 sleep
+000003f3 wait2
+00000868 max_size
+00000353 pipe
+00000363 write
+000003eb history
+0000039b fstat
+00000373 kill
+000003b3 chdir
+0000037b exec
+0000034b wait
+0000035b read
+00000393 unlink
+0000033b fork
+000003cb sbrk
+000003db uptime
+00000b40 __bss_start
+000001a0 memset
+00000000 main
+00000110 strcmp
+000003bb dup
+00000280 stat
+00000b40 _edata
+00000b4c _end
+000003a3 link
+00000343 exit
+000002d0 atoi
+00000403 yield2
+000003e3 draw
+00000160 strlen
+00000383 open
+000001c0 strchr
+000003ab mkdir
+0000036b close
+00000690 free
Binary files xv6-public/_echo and xv6-public_mine/_echo differ
diff -ruN xv6-public/echo.asm xv6-public_mine/echo.asm
--- xv6-public/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/echo.asm	2021-09-30 23:42:20.311524315 +0530
@@ -0,0 +1,1225 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 4b                	jle    6c <main+0x6c>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  27:	83 c3 04             	add    $0x4,%ebx
+  2a:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  2d:	39 f3                	cmp    %esi,%ebx
+  2f:	74 26                	je     57 <main+0x57>
+  31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  38:	68 c8 07 00 00       	push   $0x7c8
+  3d:	83 c3 04             	add    $0x4,%ebx
+  40:	50                   	push   %eax
+  41:	68 ca 07 00 00       	push   $0x7ca
+  46:	6a 01                	push   $0x1
+  48:	e8 13 04 00 00       	call   460 <printf>
+  for(i = 1; i < argc; i++)
+  4d:	8b 43 fc             	mov    -0x4(%ebx),%eax
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  50:	83 c4 10             	add    $0x10,%esp
+  53:	39 f3                	cmp    %esi,%ebx
+  55:	75 e1                	jne    38 <main+0x38>
+  57:	68 cf 07 00 00       	push   $0x7cf
+  5c:	50                   	push   %eax
+  5d:	68 ca 07 00 00       	push   $0x7ca
+  62:	6a 01                	push   $0x1
+  64:	e8 f7 03 00 00       	call   460 <printf>
+  69:	83 c4 10             	add    $0x10,%esp
+  exit();
+  6c:	e8 72 02 00 00       	call   2e3 <exit>
+  71:	66 90                	xchg   %ax,%ax
+  73:	66 90                	xchg   %ax,%ax
+  75:	66 90                	xchg   %ax,%ax
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <draw>:
+SYSCALL(draw)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <history>:
+SYSCALL(history)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <wait2>:
+SYSCALL(wait2)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_prio>:
+SYSCALL(set_prio)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <yield2>:
+SYSCALL(yield2)
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 d8 07 00 00 	movzbl 0x7d8(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 ce fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 55 fe ff ff       	call   303 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 f5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 e1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 6a fd ff ff       	call   303 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb d1 07 00 00       	mov    $0x7d1,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 f1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 88 0a 00 00       	mov    0xa88,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 88 0a 00 00       	mov    %eax,0xa88
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 88 0a 00 00       	mov    %eax,0xa88
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d 88 0a 00 00    	mov    0xa88,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d 88 0a 00 00    	mov    0xa88,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 3b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 88 0a 00 00       	mov    0xa88,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 88 0a 00 00       	mov    %eax,0xa88
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 88 0a 00 00 8c 	movl   $0xa8c,0xa88
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	bf 8c 0a 00 00       	mov    $0xa8c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 8c 0a 00 00 8c 	movl   $0xa8c,0xa8c
+ 7a6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 90 0a 00 00 00 	movl   $0x0,0xa90
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/echo.d xv6-public_mine/echo.d
--- xv6-public/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/echo.d	2021-09-30 23:42:19.995419751 +0530
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/echo.o and xv6-public_mine/echo.o differ
diff -ruN xv6-public/echo.sym xv6-public_mine/echo.sym
--- xv6-public/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/echo.sym	2021-09-30 23:42:20.311524315 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007c8 .rodata
+000007ec .eh_frame
+00000a88 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+000007d8 digits.1101
+00000000 umalloc.c
+00000a88 freep
+00000a8c base
+00000080 strcpy
+0000039b set_prio
+00000460 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006c0 malloc
+00000373 sleep
+00000393 wait2
+000002f3 pipe
+00000303 write
+0000038b history
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000a88 __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000035b dup
+00000220 stat
+00000a88 _edata
+00000a94 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+000003a3 yield2
+00000383 draw
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000630 free
Binary files xv6-public/entry.o and xv6-public_mine/entry.o differ
Binary files xv6-public/entryother and xv6-public_mine/entryother differ
diff -ruN xv6-public/entryother.asm xv6-public_mine/entryother.asm
--- xv6-public/entryother.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/entryother.asm	2021-09-30 23:42:01.860973775 +0530
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -ruN xv6-public/entryother.d xv6-public_mine/entryother.d
--- xv6-public/entryother.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/entryother.d	2021-09-30 23:42:01.816978933 +0530
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files xv6-public/entryother.o and xv6-public_mine/entryother.o differ
diff -ruN xv6-public/exec.c xv6-public_mine/exec.c
--- xv6-public/exec.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/exec.c	2021-09-30 10:44:01.000000000 +0530
@@ -26,6 +26,11 @@
     cprintf("exec: fail\n");
     return -1;
   }
+  
+  #ifdef DML    //reset the priority to 2
+  reset_priority();
+  #endif
+  
   ilock(ip);
   pgdir = 0;
 
diff -ruN xv6-public/exec.d xv6-public_mine/exec.d
--- xv6-public/exec.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/exec.d	2021-09-30 23:41:45.051022303 +0530
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files xv6-public/exec.o and xv6-public_mine/exec.o differ
diff -ruN xv6-public/file.d xv6-public_mine/file.d
--- xv6-public/file.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/file.d	2021-09-30 23:41:45.898914459 +0530
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files xv6-public/file.o and xv6-public_mine/file.o differ
Binary files xv6-public/_forktest and xv6-public_mine/_forktest differ
diff -ruN xv6-public/forktest.asm xv6-public_mine/forktest.asm
--- xv6-public/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/forktest.asm	2021-09-30 23:42:20.875709721 +0530
@@ -0,0 +1,709 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	55                   	push   %ebp
+   5:	89 e5                	mov    %esp,%ebp
+   7:	83 e4 f0             	and    $0xfffffff0,%esp
+  forktest();
+   a:	e8 41 00 00 00       	call   50 <forktest>
+  exit();
+   f:	e8 9f 03 00 00       	call   3b3 <exit>
+  14:	66 90                	xchg   %ax,%ax
+  16:	66 90                	xchg   %ax,%ax
+  18:	66 90                	xchg   %ax,%ax
+  1a:	66 90                	xchg   %ax,%ax
+  1c:	66 90                	xchg   %ax,%ax
+  1e:	66 90                	xchg   %ax,%ax
+
+00000020 <printf>:
+{
+  20:	f3 0f 1e fb          	endbr32 
+  24:	55                   	push   %ebp
+  25:	89 e5                	mov    %esp,%ebp
+  27:	53                   	push   %ebx
+  28:	83 ec 10             	sub    $0x10,%esp
+  2b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  2e:	53                   	push   %ebx
+  2f:	e8 9c 01 00 00       	call   1d0 <strlen>
+  34:	83 c4 0c             	add    $0xc,%esp
+  37:	50                   	push   %eax
+  38:	53                   	push   %ebx
+  39:	ff 75 08             	pushl  0x8(%ebp)
+  3c:	e8 92 03 00 00       	call   3d3 <write>
+}
+  41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  44:	83 c4 10             	add    $0x10,%esp
+  47:	c9                   	leave  
+  48:	c3                   	ret    
+  49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000050 <forktest>:
+{
+  50:	f3 0f 1e fb          	endbr32 
+  54:	55                   	push   %ebp
+  55:	89 e5                	mov    %esp,%ebp
+  57:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  58:	31 db                	xor    %ebx,%ebx
+{
+  5a:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  5d:	68 7c 04 00 00       	push   $0x47c
+  62:	e8 69 01 00 00       	call   1d0 <strlen>
+  67:	83 c4 0c             	add    $0xc,%esp
+  6a:	50                   	push   %eax
+  6b:	68 7c 04 00 00       	push   $0x47c
+  70:	6a 01                	push   $0x1
+  72:	e8 5c 03 00 00       	call   3d3 <write>
+  77:	83 c4 10             	add    $0x10,%esp
+  7a:	eb 15                	jmp    91 <forktest+0x41>
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid == 0)
+  80:	74 58                	je     da <forktest+0x8a>
+  for(n=0; n<N; n++){
+  82:	83 c3 01             	add    $0x1,%ebx
+  85:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  8b:	0f 84 92 00 00 00    	je     123 <forktest+0xd3>
+    pid = fork();
+  91:	e8 15 03 00 00       	call   3ab <fork>
+    if(pid < 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	79 e6                	jns    80 <forktest+0x30>
+  for(; n > 0; n--){
+  9a:	85 db                	test   %ebx,%ebx
+  9c:	74 10                	je     ae <forktest+0x5e>
+  9e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  a0:	e8 16 03 00 00       	call   3bb <wait>
+  a5:	85 c0                	test   %eax,%eax
+  a7:	78 36                	js     df <forktest+0x8f>
+  for(; n > 0; n--){
+  a9:	83 eb 01             	sub    $0x1,%ebx
+  ac:	75 f2                	jne    a0 <forktest+0x50>
+  if(wait() != -1){
+  ae:	e8 08 03 00 00       	call   3bb <wait>
+  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  b6:	75 49                	jne    101 <forktest+0xb1>
+  write(fd, s, strlen(s));
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	68 ae 04 00 00       	push   $0x4ae
+  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
+  c5:	83 c4 0c             	add    $0xc,%esp
+  c8:	50                   	push   %eax
+  c9:	68 ae 04 00 00       	push   $0x4ae
+  ce:	6a 01                	push   $0x1
+  d0:	e8 fe 02 00 00       	call   3d3 <write>
+}
+  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d8:	c9                   	leave  
+  d9:	c3                   	ret    
+      exit();
+  da:	e8 d4 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+  df:	83 ec 0c             	sub    $0xc,%esp
+  e2:	68 87 04 00 00       	push   $0x487
+  e7:	e8 e4 00 00 00       	call   1d0 <strlen>
+  ec:	83 c4 0c             	add    $0xc,%esp
+  ef:	50                   	push   %eax
+  f0:	68 87 04 00 00       	push   $0x487
+  f5:	6a 01                	push   $0x1
+  f7:	e8 d7 02 00 00       	call   3d3 <write>
+      exit();
+  fc:	e8 b2 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 101:	83 ec 0c             	sub    $0xc,%esp
+ 104:	68 9b 04 00 00       	push   $0x49b
+ 109:	e8 c2 00 00 00       	call   1d0 <strlen>
+ 10e:	83 c4 0c             	add    $0xc,%esp
+ 111:	50                   	push   %eax
+ 112:	68 9b 04 00 00       	push   $0x49b
+ 117:	6a 01                	push   $0x1
+ 119:	e8 b5 02 00 00       	call   3d3 <write>
+    exit();
+ 11e:	e8 90 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 123:	83 ec 0c             	sub    $0xc,%esp
+ 126:	68 bc 04 00 00       	push   $0x4bc
+ 12b:	e8 a0 00 00 00       	call   1d0 <strlen>
+ 130:	83 c4 0c             	add    $0xc,%esp
+ 133:	50                   	push   %eax
+ 134:	68 bc 04 00 00       	push   $0x4bc
+ 139:	6a 01                	push   $0x1
+ 13b:	e8 93 02 00 00       	call   3d3 <write>
+    exit();
+ 140:	e8 6e 02 00 00       	call   3b3 <exit>
+ 145:	66 90                	xchg   %ax,%ax
+ 147:	66 90                	xchg   %ax,%ax
+ 149:	66 90                	xchg   %ax,%ax
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 155:	31 c0                	xor    %eax,%eax
+{
+ 157:	89 e5                	mov    %esp,%ebp
+ 159:	53                   	push   %ebx
+ 15a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 15d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 160:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 164:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 167:	83 c0 01             	add    $0x1,%eax
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 16e:	89 c8                	mov    %ecx,%eax
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	53                   	push   %ebx
+ 188:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 18b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 18e:	0f b6 01             	movzbl (%ecx),%eax
+ 191:	0f b6 1a             	movzbl (%edx),%ebx
+ 194:	84 c0                	test   %al,%al
+ 196:	75 19                	jne    1b1 <strcmp+0x31>
+ 198:	eb 26                	jmp    1c0 <strcmp+0x40>
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1a4:	83 c1 01             	add    $0x1,%ecx
+ 1a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1aa:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ad:	84 c0                	test   %al,%al
+ 1af:	74 0f                	je     1c0 <strcmp+0x40>
+ 1b1:	38 d8                	cmp    %bl,%al
+ 1b3:	74 eb                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b5:	29 d8                	sub    %ebx,%eax
+}
+ 1b7:	5b                   	pop    %ebx
+ 1b8:	5d                   	pop    %ebp
+ 1b9:	c3                   	ret    
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ce:	66 90                	xchg   %ax,%ax
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1da:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1dd:	74 21                	je     200 <strlen+0x30>
+ 1df:	31 c0                	xor    %eax,%eax
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	83 c0 01             	add    $0x1,%eax
+ 1eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1ef:	89 c1                	mov    %eax,%ecx
+ 1f1:	75 f5                	jne    1e8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 200:	31 c9                	xor    %ecx,%ecx
+}
+ 202:	5d                   	pop    %ebp
+ 203:	89 c8                	mov    %ecx,%eax
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 21b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 221:	89 d7                	mov    %edx,%edi
+ 223:	fc                   	cld    
+ 224:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 226:	89 d0                	mov    %edx,%eax
+ 228:	5f                   	pop    %edi
+ 229:	5d                   	pop    %ebp
+ 22a:	c3                   	ret    
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	8b 45 08             	mov    0x8(%ebp),%eax
+ 23a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 23e:	0f b6 10             	movzbl (%eax),%edx
+ 241:	84 d2                	test   %dl,%dl
+ 243:	75 16                	jne    25b <strchr+0x2b>
+ 245:	eb 21                	jmp    268 <strchr+0x38>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+ 250:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 254:	83 c0 01             	add    $0x1,%eax
+ 257:	84 d2                	test   %dl,%dl
+ 259:	74 0d                	je     268 <strchr+0x38>
+    if(*s == c)
+ 25b:	38 d1                	cmp    %dl,%cl
+ 25d:	75 f1                	jne    250 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 268:	31 c0                	xor    %eax,%eax
+}
+ 26a:	5d                   	pop    %ebp
+ 26b:	c3                   	ret    
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	57                   	push   %edi
+ 278:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 279:	31 f6                	xor    %esi,%esi
+{
+ 27b:	53                   	push   %ebx
+ 27c:	89 f3                	mov    %esi,%ebx
+ 27e:	83 ec 1c             	sub    $0x1c,%esp
+ 281:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 284:	eb 33                	jmp    2b9 <gets+0x49>
+ 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 290:	83 ec 04             	sub    $0x4,%esp
+ 293:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 296:	6a 01                	push   $0x1
+ 298:	50                   	push   %eax
+ 299:	6a 00                	push   $0x0
+ 29b:	e8 2b 01 00 00       	call   3cb <read>
+    if(cc < 1)
+ 2a0:	83 c4 10             	add    $0x10,%esp
+ 2a3:	85 c0                	test   %eax,%eax
+ 2a5:	7e 1c                	jle    2c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2ab:	83 c7 01             	add    $0x1,%edi
+ 2ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2b1:	3c 0a                	cmp    $0xa,%al
+ 2b3:	74 23                	je     2d8 <gets+0x68>
+ 2b5:	3c 0d                	cmp    $0xd,%al
+ 2b7:	74 1f                	je     2d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2b9:	83 c3 01             	add    $0x1,%ebx
+ 2bc:	89 fe                	mov    %edi,%esi
+ 2be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2c1:	7c cd                	jl     290 <gets+0x20>
+ 2c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ce:	5b                   	pop    %ebx
+ 2cf:	5e                   	pop    %esi
+ 2d0:	5f                   	pop    %edi
+ 2d1:	5d                   	pop    %ebp
+ 2d2:	c3                   	ret    
+ 2d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d7:	90                   	nop
+ 2d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2de:	01 de                	add    %ebx,%esi
+ 2e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e8:	5b                   	pop    %ebx
+ 2e9:	5e                   	pop    %esi
+ 2ea:	5f                   	pop    %edi
+ 2eb:	5d                   	pop    %ebp
+ 2ec:	c3                   	ret    
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2f0:	f3 0f 1e fb          	endbr32 
+ 2f4:	55                   	push   %ebp
+ 2f5:	89 e5                	mov    %esp,%ebp
+ 2f7:	56                   	push   %esi
+ 2f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	6a 00                	push   $0x0
+ 2fe:	ff 75 08             	pushl  0x8(%ebp)
+ 301:	e8 ed 00 00 00       	call   3f3 <open>
+  if(fd < 0)
+ 306:	83 c4 10             	add    $0x10,%esp
+ 309:	85 c0                	test   %eax,%eax
+ 30b:	78 2b                	js     338 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 30d:	83 ec 08             	sub    $0x8,%esp
+ 310:	ff 75 0c             	pushl  0xc(%ebp)
+ 313:	89 c3                	mov    %eax,%ebx
+ 315:	50                   	push   %eax
+ 316:	e8 f0 00 00 00       	call   40b <fstat>
+  close(fd);
+ 31b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 31e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 320:	e8 b6 00 00 00       	call   3db <close>
+  return r;
+ 325:	83 c4 10             	add    $0x10,%esp
+}
+ 328:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 32b:	89 f0                	mov    %esi,%eax
+ 32d:	5b                   	pop    %ebx
+ 32e:	5e                   	pop    %esi
+ 32f:	5d                   	pop    %ebp
+ 330:	c3                   	ret    
+ 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 338:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 33d:	eb e9                	jmp    328 <stat+0x38>
+ 33f:	90                   	nop
+
+00000340 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	53                   	push   %ebx
+ 348:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 34b:	0f be 02             	movsbl (%edx),%eax
+ 34e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 351:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 354:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 359:	77 1a                	ja     375 <atoi+0x35>
+ 35b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 35f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 360:	83 c2 01             	add    $0x1,%edx
+ 363:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 366:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 36a:	0f be 02             	movsbl (%edx),%eax
+ 36d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 370:	80 fb 09             	cmp    $0x9,%bl
+ 373:	76 eb                	jbe    360 <atoi+0x20>
+  return n;
+}
+ 375:	89 c8                	mov    %ecx,%eax
+ 377:	5b                   	pop    %ebx
+ 378:	5d                   	pop    %ebp
+ 379:	c3                   	ret    
+ 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	57                   	push   %edi
+ 388:	8b 45 10             	mov    0x10(%ebp),%eax
+ 38b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 38e:	56                   	push   %esi
+ 38f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 392:	85 c0                	test   %eax,%eax
+ 394:	7e 0f                	jle    3a5 <memmove+0x25>
+ 396:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 398:	89 d7                	mov    %edx,%edi
+ 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3a1:	39 f8                	cmp    %edi,%eax
+ 3a3:	75 fb                	jne    3a0 <memmove+0x20>
+  return vdst;
+}
+ 3a5:	5e                   	pop    %esi
+ 3a6:	89 d0                	mov    %edx,%eax
+ 3a8:	5f                   	pop    %edi
+ 3a9:	5d                   	pop    %ebp
+ 3aa:	c3                   	ret    
+
+000003ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <exit>:
+SYSCALL(exit)
+ 3b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <wait>:
+SYSCALL(wait)
+ 3bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <pipe>:
+SYSCALL(pipe)
+ 3c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <read>:
+SYSCALL(read)
+ 3cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <write>:
+SYSCALL(write)
+ 3d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <close>:
+SYSCALL(close)
+ 3db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <kill>:
+SYSCALL(kill)
+ 3e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <exec>:
+SYSCALL(exec)
+ 3eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <open>:
+SYSCALL(open)
+ 3f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <mknod>:
+SYSCALL(mknod)
+ 3fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <unlink>:
+SYSCALL(unlink)
+ 403:	b8 12 00 00 00       	mov    $0x12,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <fstat>:
+SYSCALL(fstat)
+ 40b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <link>:
+SYSCALL(link)
+ 413:	b8 13 00 00 00       	mov    $0x13,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <mkdir>:
+SYSCALL(mkdir)
+ 41b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <chdir>:
+SYSCALL(chdir)
+ 423:	b8 09 00 00 00       	mov    $0x9,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <dup>:
+SYSCALL(dup)
+ 42b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getpid>:
+SYSCALL(getpid)
+ 433:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <sbrk>:
+SYSCALL(sbrk)
+ 43b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <sleep>:
+SYSCALL(sleep)
+ 443:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <uptime>:
+SYSCALL(uptime)
+ 44b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <draw>:
+SYSCALL(draw)
+ 453:	b8 16 00 00 00       	mov    $0x16,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <history>:
+SYSCALL(history)
+ 45b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <wait2>:
+SYSCALL(wait2)
+ 463:	b8 18 00 00 00       	mov    $0x18,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <set_prio>:
+SYSCALL(set_prio)
+ 46b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <yield2>:
+SYSCALL(yield2)
+ 473:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
diff -ruN xv6-public/forktest.d xv6-public_mine/forktest.d
--- xv6-public/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/forktest.d	2021-09-30 23:42:20.531596640 +0530
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/forktest.o and xv6-public_mine/forktest.o differ
diff -ruN xv6-public/fs.d xv6-public_mine/fs.d
--- xv6-public/fs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/fs.d	2021-09-30 23:41:47.510710989 +0530
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files xv6-public/fs.img and xv6-public_mine/fs.img differ
Binary files xv6-public/fs.o and xv6-public_mine/fs.o differ
Binary files xv6-public/_grep and xv6-public_mine/_grep differ
diff -ruN xv6-public/grep.asm xv6-public_mine/grep.asm
--- xv6-public/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/grep.asm	2021-09-30 23:42:21.703977955 +0530
@@ -0,0 +1,1591 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 18             	sub    $0x18,%esp
+  18:	8b 01                	mov    (%ecx),%eax
+  1a:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  20:	83 f8 01             	cmp    $0x1,%eax
+  23:	7e 6b                	jle    90 <main+0x90>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  25:	8b 43 04             	mov    0x4(%ebx),%eax
+  28:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  2b:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  2f:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  34:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  37:	75 29                	jne    62 <main+0x62>
+  39:	eb 68                	jmp    a3 <main+0xa3>
+  3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  3f:	90                   	nop
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  40:	83 ec 08             	sub    $0x8,%esp
+  for(i = 2; i < argc; i++){
+  43:	83 c6 01             	add    $0x1,%esi
+  46:	83 c3 04             	add    $0x4,%ebx
+    grep(pattern, fd);
+  49:	50                   	push   %eax
+  4a:	ff 75 e0             	pushl  -0x20(%ebp)
+  4d:	e8 de 01 00 00       	call   230 <grep>
+    close(fd);
+  52:	89 3c 24             	mov    %edi,(%esp)
+  55:	e8 71 05 00 00       	call   5cb <close>
+  for(i = 2; i < argc; i++){
+  5a:	83 c4 10             	add    $0x10,%esp
+  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  60:	7e 29                	jle    8b <main+0x8b>
+    if((fd = open(argv[i], 0)) < 0){
+  62:	83 ec 08             	sub    $0x8,%esp
+  65:	6a 00                	push   $0x0
+  67:	ff 33                	pushl  (%ebx)
+  69:	e8 75 05 00 00       	call   5e3 <open>
+  6e:	83 c4 10             	add    $0x10,%esp
+  71:	89 c7                	mov    %eax,%edi
+  73:	85 c0                	test   %eax,%eax
+  75:	79 c9                	jns    40 <main+0x40>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  77:	50                   	push   %eax
+  78:	ff 33                	pushl  (%ebx)
+  7a:	68 a8 0a 00 00       	push   $0xaa8
+  7f:	6a 01                	push   $0x1
+  81:	e8 9a 06 00 00       	call   720 <printf>
+      exit();
+  86:	e8 18 05 00 00       	call   5a3 <exit>
+  }
+  exit();
+  8b:	e8 13 05 00 00       	call   5a3 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  90:	51                   	push   %ecx
+  91:	51                   	push   %ecx
+  92:	68 88 0a 00 00       	push   $0xa88
+  97:	6a 02                	push   $0x2
+  99:	e8 82 06 00 00       	call   720 <printf>
+    exit();
+  9e:	e8 00 05 00 00       	call   5a3 <exit>
+    grep(pattern, 0);
+  a3:	52                   	push   %edx
+  a4:	52                   	push   %edx
+  a5:	6a 00                	push   $0x0
+  a7:	50                   	push   %eax
+  a8:	e8 83 01 00 00       	call   230 <grep>
+    exit();
+  ad:	e8 f1 04 00 00       	call   5a3 <exit>
+  b2:	66 90                	xchg   %ax,%ax
+  b4:	66 90                	xchg   %ax,%ax
+  b6:	66 90                	xchg   %ax,%ax
+  b8:	66 90                	xchg   %ax,%ax
+  ba:	66 90                	xchg   %ax,%ax
+  bc:	66 90                	xchg   %ax,%ax
+  be:	66 90                	xchg   %ax,%ax
+
+000000c0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  c0:	f3 0f 1e fb          	endbr32 
+  c4:	55                   	push   %ebp
+  c5:	89 e5                	mov    %esp,%ebp
+  c7:	57                   	push   %edi
+  c8:	56                   	push   %esi
+  c9:	53                   	push   %ebx
+  ca:	83 ec 0c             	sub    $0xc,%esp
+  cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  d0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  d3:	8b 7d 10             	mov    0x10(%ebp),%edi
+  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  e0:	83 ec 08             	sub    $0x8,%esp
+  e3:	57                   	push   %edi
+  e4:	56                   	push   %esi
+  e5:	e8 36 00 00 00       	call   120 <matchhere>
+  ea:	83 c4 10             	add    $0x10,%esp
+  ed:	85 c0                	test   %eax,%eax
+  ef:	75 1f                	jne    110 <matchstar+0x50>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  f1:	0f be 17             	movsbl (%edi),%edx
+  f4:	84 d2                	test   %dl,%dl
+  f6:	74 0c                	je     104 <matchstar+0x44>
+  f8:	83 c7 01             	add    $0x1,%edi
+  fb:	39 da                	cmp    %ebx,%edx
+  fd:	74 e1                	je     e0 <matchstar+0x20>
+  ff:	83 fb 2e             	cmp    $0x2e,%ebx
+ 102:	74 dc                	je     e0 <matchstar+0x20>
+  return 0;
+}
+ 104:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 107:	5b                   	pop    %ebx
+ 108:	5e                   	pop    %esi
+ 109:	5f                   	pop    %edi
+ 10a:	5d                   	pop    %ebp
+ 10b:	c3                   	ret    
+ 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 110:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+ 113:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 118:	5b                   	pop    %ebx
+ 119:	5e                   	pop    %esi
+ 11a:	5f                   	pop    %edi
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <matchhere>:
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	56                   	push   %esi
+ 129:	53                   	push   %ebx
+ 12a:	83 ec 0c             	sub    $0xc,%esp
+ 12d:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 130:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 133:	0f b6 01             	movzbl (%ecx),%eax
+ 136:	84 c0                	test   %al,%al
+ 138:	75 2b                	jne    165 <matchhere+0x45>
+ 13a:	eb 64                	jmp    1a0 <matchhere+0x80>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(re[0] == '$' && re[1] == '\0')
+ 140:	0f b6 37             	movzbl (%edi),%esi
+ 143:	80 fa 24             	cmp    $0x24,%dl
+ 146:	75 04                	jne    14c <matchhere+0x2c>
+ 148:	84 c0                	test   %al,%al
+ 14a:	74 61                	je     1ad <matchhere+0x8d>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 14c:	89 f3                	mov    %esi,%ebx
+ 14e:	84 db                	test   %bl,%bl
+ 150:	74 3e                	je     190 <matchhere+0x70>
+ 152:	80 fa 2e             	cmp    $0x2e,%dl
+ 155:	74 04                	je     15b <matchhere+0x3b>
+ 157:	38 d3                	cmp    %dl,%bl
+ 159:	75 35                	jne    190 <matchhere+0x70>
+    return matchhere(re+1, text+1);
+ 15b:	83 c7 01             	add    $0x1,%edi
+ 15e:	83 c1 01             	add    $0x1,%ecx
+  if(re[0] == '\0')
+ 161:	84 c0                	test   %al,%al
+ 163:	74 3b                	je     1a0 <matchhere+0x80>
+  if(re[1] == '*')
+ 165:	0f be d0             	movsbl %al,%edx
+ 168:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+ 16c:	3c 2a                	cmp    $0x2a,%al
+ 16e:	75 d0                	jne    140 <matchhere+0x20>
+    return matchstar(re[0], re+2, text);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	83 c1 02             	add    $0x2,%ecx
+ 176:	57                   	push   %edi
+ 177:	51                   	push   %ecx
+ 178:	52                   	push   %edx
+ 179:	e8 42 ff ff ff       	call   c0 <matchstar>
+ 17e:	83 c4 10             	add    $0x10,%esp
+}
+ 181:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 184:	5b                   	pop    %ebx
+ 185:	5e                   	pop    %esi
+ 186:	5f                   	pop    %edi
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 190:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 193:	31 c0                	xor    %eax,%eax
+}
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+ 197:	5f                   	pop    %edi
+ 198:	5d                   	pop    %ebp
+ 199:	c3                   	ret    
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 1;
+ 1a3:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1a8:	5b                   	pop    %ebx
+ 1a9:	5e                   	pop    %esi
+ 1aa:	5f                   	pop    %edi
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+    return *text == '\0';
+ 1ad:	89 f0                	mov    %esi,%eax
+ 1af:	84 c0                	test   %al,%al
+ 1b1:	0f 94 c0             	sete   %al
+ 1b4:	0f b6 c0             	movzbl %al,%eax
+ 1b7:	eb c8                	jmp    181 <matchhere+0x61>
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <match>:
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	56                   	push   %esi
+ 1c8:	53                   	push   %ebx
+ 1c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 1cc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(re[0] == '^')
+ 1cf:	80 3b 5e             	cmpb   $0x5e,(%ebx)
+ 1d2:	75 15                	jne    1e9 <match+0x29>
+ 1d4:	eb 3a                	jmp    210 <match+0x50>
+ 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 1e0:	83 c6 01             	add    $0x1,%esi
+ 1e3:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 1e7:	74 16                	je     1ff <match+0x3f>
+    if(matchhere(re, text))
+ 1e9:	83 ec 08             	sub    $0x8,%esp
+ 1ec:	56                   	push   %esi
+ 1ed:	53                   	push   %ebx
+ 1ee:	e8 2d ff ff ff       	call   120 <matchhere>
+ 1f3:	83 c4 10             	add    $0x10,%esp
+ 1f6:	85 c0                	test   %eax,%eax
+ 1f8:	74 e6                	je     1e0 <match+0x20>
+      return 1;
+ 1fa:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 202:	5b                   	pop    %ebx
+ 203:	5e                   	pop    %esi
+ 204:	5d                   	pop    %ebp
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+    return matchhere(re+1, text);
+ 210:	83 c3 01             	add    $0x1,%ebx
+ 213:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 21c:	e9 ff fe ff ff       	jmp    120 <matchhere>
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <grep>:
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+ 239:	53                   	push   %ebx
+ 23a:	83 ec 1c             	sub    $0x1c,%esp
+  m = 0;
+ 23d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+{
+ 244:	8b 75 08             	mov    0x8(%ebp),%esi
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 250:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 253:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 258:	83 ec 04             	sub    $0x4,%esp
+ 25b:	29 c8                	sub    %ecx,%eax
+ 25d:	50                   	push   %eax
+ 25e:	8d 81 a0 0e 00 00    	lea    0xea0(%ecx),%eax
+ 264:	50                   	push   %eax
+ 265:	ff 75 0c             	pushl  0xc(%ebp)
+ 268:	e8 4e 03 00 00       	call   5bb <read>
+ 26d:	83 c4 10             	add    $0x10,%esp
+ 270:	85 c0                	test   %eax,%eax
+ 272:	0f 8e b8 00 00 00    	jle    330 <grep+0x100>
+    m += n;
+ 278:	01 45 e4             	add    %eax,-0x1c(%ebp)
+ 27b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+    p = buf;
+ 27e:	bb a0 0e 00 00       	mov    $0xea0,%ebx
+    buf[m] = '\0';
+ 283:	c6 81 a0 0e 00 00 00 	movb   $0x0,0xea0(%ecx)
+    while((q = strchr(p, '\n')) != 0){
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 290:	83 ec 08             	sub    $0x8,%esp
+ 293:	6a 0a                	push   $0xa
+ 295:	53                   	push   %ebx
+ 296:	e8 85 01 00 00       	call   420 <strchr>
+ 29b:	83 c4 10             	add    $0x10,%esp
+ 29e:	89 c7                	mov    %eax,%edi
+ 2a0:	85 c0                	test   %eax,%eax
+ 2a2:	74 3c                	je     2e0 <grep+0xb0>
+      if(match(pattern, p)){
+ 2a4:	83 ec 08             	sub    $0x8,%esp
+      *q = 0;
+ 2a7:	c6 07 00             	movb   $0x0,(%edi)
+      if(match(pattern, p)){
+ 2aa:	53                   	push   %ebx
+ 2ab:	56                   	push   %esi
+ 2ac:	e8 0f ff ff ff       	call   1c0 <match>
+ 2b1:	83 c4 10             	add    $0x10,%esp
+ 2b4:	8d 57 01             	lea    0x1(%edi),%edx
+ 2b7:	85 c0                	test   %eax,%eax
+ 2b9:	75 05                	jne    2c0 <grep+0x90>
+      p = q+1;
+ 2bb:	89 d3                	mov    %edx,%ebx
+ 2bd:	eb d1                	jmp    290 <grep+0x60>
+ 2bf:	90                   	nop
+        write(1, p, q+1 - p);
+ 2c0:	89 d0                	mov    %edx,%eax
+ 2c2:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 2c5:	c6 07 0a             	movb   $0xa,(%edi)
+        write(1, p, q+1 - p);
+ 2c8:	29 d8                	sub    %ebx,%eax
+ 2ca:	89 55 e0             	mov    %edx,-0x20(%ebp)
+ 2cd:	50                   	push   %eax
+ 2ce:	53                   	push   %ebx
+ 2cf:	6a 01                	push   $0x1
+ 2d1:	e8 ed 02 00 00       	call   5c3 <write>
+ 2d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 2d9:	83 c4 10             	add    $0x10,%esp
+      p = q+1;
+ 2dc:	89 d3                	mov    %edx,%ebx
+ 2de:	eb b0                	jmp    290 <grep+0x60>
+    if(p == buf)
+ 2e0:	81 fb a0 0e 00 00    	cmp    $0xea0,%ebx
+ 2e6:	74 38                	je     320 <grep+0xf0>
+    if(m > 0){
+ 2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 2eb:	85 c9                	test   %ecx,%ecx
+ 2ed:	0f 8e 5d ff ff ff    	jle    250 <grep+0x20>
+      m -= p - buf;
+ 2f3:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2f5:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2f8:	2d a0 0e 00 00       	sub    $0xea0,%eax
+ 2fd:	29 c1                	sub    %eax,%ecx
+      memmove(buf, p, m);
+ 2ff:	51                   	push   %ecx
+ 300:	53                   	push   %ebx
+ 301:	68 a0 0e 00 00       	push   $0xea0
+      m -= p - buf;
+ 306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+      memmove(buf, p, m);
+ 309:	e8 62 02 00 00       	call   570 <memmove>
+ 30e:	83 c4 10             	add    $0x10,%esp
+ 311:	e9 3a ff ff ff       	jmp    250 <grep+0x20>
+ 316:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 0;
+ 320:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 327:	e9 24 ff ff ff       	jmp    250 <grep+0x20>
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+ 330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 333:	5b                   	pop    %ebx
+ 334:	5e                   	pop    %esi
+ 335:	5f                   	pop    %edi
+ 336:	5d                   	pop    %ebp
+ 337:	c3                   	ret    
+ 338:	66 90                	xchg   %ax,%ax
+ 33a:	66 90                	xchg   %ax,%ax
+ 33c:	66 90                	xchg   %ax,%ax
+ 33e:	66 90                	xchg   %ax,%ax
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <draw>:
+SYSCALL(draw)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <history>:
+SYSCALL(history)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <wait2>:
+SYSCALL(wait2)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <set_prio>:
+SYSCALL(set_prio)
+ 65b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <yield2>:
+SYSCALL(yield2)
+ 663:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+ 66b:	66 90                	xchg   %ax,%ax
+ 66d:	66 90                	xchg   %ax,%ax
+ 66f:	90                   	nop
+
+00000670 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 3c             	sub    $0x3c,%esp
+ 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 67c:	89 d1                	mov    %edx,%ecx
+{
+ 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 681:	85 d2                	test   %edx,%edx
+ 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
+ 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 68d:	74 79                	je     708 <printint+0x98>
+    neg = 1;
+ 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 696:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 698:	31 db                	xor    %ebx,%ebx
+ 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 69d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	89 c8                	mov    %ecx,%eax
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	89 cf                	mov    %ecx,%edi
+ 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6a9:	0f b6 92 c8 0a 00 00 	movzbl 0xac8(%edx),%edx
+ 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6b3:	89 d8                	mov    %ebx,%eax
+ 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6c1:	76 dd                	jbe    6a0 <printint+0x30>
+  if(neg)
+ 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6c6:	85 c9                	test   %ecx,%ecx
+ 6c8:	74 0c                	je     6d6 <printint+0x66>
+    buf[i++] = '-';
+ 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6dd:	eb 07                	jmp    6e6 <printint+0x76>
+ 6df:	90                   	nop
+ 6e0:	0f b6 13             	movzbl (%ebx),%edx
+ 6e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6e6:	83 ec 04             	sub    $0x4,%esp
+ 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6ec:	6a 01                	push   $0x1
+ 6ee:	56                   	push   %esi
+ 6ef:	57                   	push   %edi
+ 6f0:	e8 ce fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	39 de                	cmp    %ebx,%esi
+ 6fa:	75 e4                	jne    6e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ff:	5b                   	pop    %ebx
+ 700:	5e                   	pop    %esi
+ 701:	5f                   	pop    %edi
+ 702:	5d                   	pop    %ebp
+ 703:	c3                   	ret    
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 70f:	eb 87                	jmp    698 <printint+0x28>
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+
+00000720 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 720:	f3 0f 1e fb          	endbr32 
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	57                   	push   %edi
+ 728:	56                   	push   %esi
+ 729:	53                   	push   %ebx
+ 72a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 72d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 730:	0f b6 1e             	movzbl (%esi),%ebx
+ 733:	84 db                	test   %bl,%bl
+ 735:	0f 84 b4 00 00 00    	je     7ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 73b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 73e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 741:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 744:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 746:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 749:	eb 33                	jmp    77e <printf+0x5e>
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+ 750:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 753:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	74 17                	je     774 <printf+0x54>
+  write(fd, &c, 1);
+ 75d:	83 ec 04             	sub    $0x4,%esp
+ 760:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 763:	6a 01                	push   $0x1
+ 765:	57                   	push   %edi
+ 766:	ff 75 08             	pushl  0x8(%ebp)
+ 769:	e8 55 fe ff ff       	call   5c3 <write>
+ 76e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 771:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 774:	0f b6 1e             	movzbl (%esi),%ebx
+ 777:	83 c6 01             	add    $0x1,%esi
+ 77a:	84 db                	test   %bl,%bl
+ 77c:	74 71                	je     7ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 77e:	0f be cb             	movsbl %bl,%ecx
+ 781:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 784:	85 d2                	test   %edx,%edx
+ 786:	74 c8                	je     750 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 788:	83 fa 25             	cmp    $0x25,%edx
+ 78b:	75 e7                	jne    774 <printf+0x54>
+      if(c == 'd'){
+ 78d:	83 f8 64             	cmp    $0x64,%eax
+ 790:	0f 84 9a 00 00 00    	je     830 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 796:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 79c:	83 f9 70             	cmp    $0x70,%ecx
+ 79f:	74 5f                	je     800 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7a1:	83 f8 73             	cmp    $0x73,%eax
+ 7a4:	0f 84 d6 00 00 00    	je     880 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7aa:	83 f8 63             	cmp    $0x63,%eax
+ 7ad:	0f 84 8d 00 00 00    	je     840 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7b3:	83 f8 25             	cmp    $0x25,%eax
+ 7b6:	0f 84 b4 00 00 00    	je     870 <printf+0x150>
+  write(fd, &c, 1);
+ 7bc:	83 ec 04             	sub    $0x4,%esp
+ 7bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7c3:	6a 01                	push   $0x1
+ 7c5:	57                   	push   %edi
+ 7c6:	ff 75 08             	pushl  0x8(%ebp)
+ 7c9:	e8 f5 fd ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7d1:	83 c4 0c             	add    $0xc,%esp
+ 7d4:	6a 01                	push   $0x1
+ 7d6:	83 c6 01             	add    $0x1,%esi
+ 7d9:	57                   	push   %edi
+ 7da:	ff 75 08             	pushl  0x8(%ebp)
+ 7dd:	e8 e1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7eb:	84 db                	test   %bl,%bl
+ 7ed:	75 8f                	jne    77e <printf+0x5e>
+    }
+  }
+}
+ 7ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f2:	5b                   	pop    %ebx
+ 7f3:	5e                   	pop    %esi
+ 7f4:	5f                   	pop    %edi
+ 7f5:	5d                   	pop    %ebp
+ 7f6:	c3                   	ret    
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 808:	6a 00                	push   $0x0
+ 80a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 80d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 810:	8b 13                	mov    (%ebx),%edx
+ 812:	e8 59 fe ff ff       	call   670 <printint>
+        ap++;
+ 817:	89 d8                	mov    %ebx,%eax
+ 819:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 81c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 81e:	83 c0 04             	add    $0x4,%eax
+ 821:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 824:	e9 4b ff ff ff       	jmp    774 <printf+0x54>
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 838:	6a 01                	push   $0x1
+ 83a:	eb ce                	jmp    80a <printf+0xea>
+ 83c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 843:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 846:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 848:	6a 01                	push   $0x1
+        ap++;
+ 84a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 84d:	57                   	push   %edi
+ 84e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 851:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 854:	e8 6a fd ff ff       	call   5c3 <write>
+        ap++;
+ 859:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 85c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 85f:	31 d2                	xor    %edx,%edx
+ 861:	e9 0e ff ff ff       	jmp    774 <printf+0x54>
+ 866:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 86d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 870:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 873:	83 ec 04             	sub    $0x4,%esp
+ 876:	e9 59 ff ff ff       	jmp    7d4 <printf+0xb4>
+ 87b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 87f:	90                   	nop
+        s = (char*)*ap;
+ 880:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 883:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 885:	83 c0 04             	add    $0x4,%eax
+ 888:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 88b:	85 db                	test   %ebx,%ebx
+ 88d:	74 17                	je     8a6 <printf+0x186>
+        while(*s != 0){
+ 88f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 892:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 894:	84 c0                	test   %al,%al
+ 896:	0f 84 d8 fe ff ff    	je     774 <printf+0x54>
+ 89c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89f:	89 de                	mov    %ebx,%esi
+ 8a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a4:	eb 1a                	jmp    8c0 <printf+0x1a0>
+          s = "(null)";
+ 8a6:	bb be 0a 00 00       	mov    $0xabe,%ebx
+        while(*s != 0){
+ 8ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8b3:	89 de                	mov    %ebx,%esi
+ 8b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8bf:	90                   	nop
+  write(fd, &c, 1);
+ 8c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8c3:	83 c6 01             	add    $0x1,%esi
+ 8c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8c9:	6a 01                	push   $0x1
+ 8cb:	57                   	push   %edi
+ 8cc:	53                   	push   %ebx
+ 8cd:	e8 f1 fc ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8d2:	0f b6 06             	movzbl (%esi),%eax
+ 8d5:	83 c4 10             	add    $0x10,%esp
+ 8d8:	84 c0                	test   %al,%al
+ 8da:	75 e4                	jne    8c0 <printf+0x1a0>
+ 8dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8df:	31 d2                	xor    %edx,%edx
+ 8e1:	e9 8e fe ff ff       	jmp    774 <printf+0x54>
+ 8e6:	66 90                	xchg   %ax,%ax
+ 8e8:	66 90                	xchg   %ax,%ax
+ 8ea:	66 90                	xchg   %ax,%ax
+ 8ec:	66 90                	xchg   %ax,%ax
+ 8ee:	66 90                	xchg   %ax,%ax
+
+000008f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8f0:	f3 0f 1e fb          	endbr32 
+ 8f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f5:	a1 80 0e 00 00       	mov    0xe80,%eax
+{
+ 8fa:	89 e5                	mov    %esp,%ebp
+ 8fc:	57                   	push   %edi
+ 8fd:	56                   	push   %esi
+ 8fe:	53                   	push   %ebx
+ 8ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 902:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 904:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 907:	39 c8                	cmp    %ecx,%eax
+ 909:	73 15                	jae    920 <free+0x30>
+ 90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 90f:	90                   	nop
+ 910:	39 d1                	cmp    %edx,%ecx
+ 912:	72 14                	jb     928 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 914:	39 d0                	cmp    %edx,%eax
+ 916:	73 10                	jae    928 <free+0x38>
+{
+ 918:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 91a:	8b 10                	mov    (%eax),%edx
+ 91c:	39 c8                	cmp    %ecx,%eax
+ 91e:	72 f0                	jb     910 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 920:	39 d0                	cmp    %edx,%eax
+ 922:	72 f4                	jb     918 <free+0x28>
+ 924:	39 d1                	cmp    %edx,%ecx
+ 926:	73 f0                	jae    918 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 928:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 92b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 92e:	39 fa                	cmp    %edi,%edx
+ 930:	74 1e                	je     950 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 932:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 935:	8b 50 04             	mov    0x4(%eax),%edx
+ 938:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 93b:	39 f1                	cmp    %esi,%ecx
+ 93d:	74 28                	je     967 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 93f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 941:	5b                   	pop    %ebx
+  freep = p;
+ 942:	a3 80 0e 00 00       	mov    %eax,0xe80
+}
+ 947:	5e                   	pop    %esi
+ 948:	5f                   	pop    %edi
+ 949:	5d                   	pop    %ebp
+ 94a:	c3                   	ret    
+ 94b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 94f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 950:	03 72 04             	add    0x4(%edx),%esi
+ 953:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 956:	8b 10                	mov    (%eax),%edx
+ 958:	8b 12                	mov    (%edx),%edx
+ 95a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 95d:	8b 50 04             	mov    0x4(%eax),%edx
+ 960:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 963:	39 f1                	cmp    %esi,%ecx
+ 965:	75 d8                	jne    93f <free+0x4f>
+    p->s.size += bp->s.size;
+ 967:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 96a:	a3 80 0e 00 00       	mov    %eax,0xe80
+    p->s.size += bp->s.size;
+ 96f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 972:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 975:	89 10                	mov    %edx,(%eax)
+}
+ 977:	5b                   	pop    %ebx
+ 978:	5e                   	pop    %esi
+ 979:	5f                   	pop    %edi
+ 97a:	5d                   	pop    %ebp
+ 97b:	c3                   	ret    
+ 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000980 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+ 985:	89 e5                	mov    %esp,%ebp
+ 987:	57                   	push   %edi
+ 988:	56                   	push   %esi
+ 989:	53                   	push   %ebx
+ 98a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 98d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 990:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 996:	8d 70 07             	lea    0x7(%eax),%esi
+ 999:	c1 ee 03             	shr    $0x3,%esi
+ 99c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 99f:	85 ff                	test   %edi,%edi
+ 9a1:	0f 84 a9 00 00 00    	je     a50 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9ac:	39 f1                	cmp    %esi,%ecx
+ 9ae:	73 6d                	jae    a1d <malloc+0x9d>
+ 9b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9c8:	eb 17                	jmp    9e1 <malloc+0x61>
+ 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9d5:	39 f1                	cmp    %esi,%ecx
+ 9d7:	73 4f                	jae    a28 <malloc+0xa8>
+ 9d9:	8b 3d 80 0e 00 00    	mov    0xe80,%edi
+ 9df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9e1:	39 c7                	cmp    %eax,%edi
+ 9e3:	75 eb                	jne    9d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9e5:	83 ec 0c             	sub    $0xc,%esp
+ 9e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9eb:	e8 3b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ 9f0:	83 c4 10             	add    $0x10,%esp
+ 9f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9f6:	74 1b                	je     a13 <malloc+0x93>
+  hp->s.size = nu;
+ 9f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9fb:	83 ec 0c             	sub    $0xc,%esp
+ 9fe:	83 c0 08             	add    $0x8,%eax
+ a01:	50                   	push   %eax
+ a02:	e8 e9 fe ff ff       	call   8f0 <free>
+  return freep;
+ a07:	a1 80 0e 00 00       	mov    0xe80,%eax
+      if((p = morecore(nunits)) == 0)
+ a0c:	83 c4 10             	add    $0x10,%esp
+ a0f:	85 c0                	test   %eax,%eax
+ a11:	75 bd                	jne    9d0 <malloc+0x50>
+        return 0;
+  }
+}
+ a13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a16:	31 c0                	xor    %eax,%eax
+}
+ a18:	5b                   	pop    %ebx
+ a19:	5e                   	pop    %esi
+ a1a:	5f                   	pop    %edi
+ a1b:	5d                   	pop    %ebp
+ a1c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a1d:	89 c2                	mov    %eax,%edx
+ a1f:	89 f8                	mov    %edi,%eax
+ a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a28:	39 ce                	cmp    %ecx,%esi
+ a2a:	74 54                	je     a80 <malloc+0x100>
+        p->s.size -= nunits;
+ a2c:	29 f1                	sub    %esi,%ecx
+ a2e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a31:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a34:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a37:	a3 80 0e 00 00       	mov    %eax,0xe80
+}
+ a3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a3f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a42:	5b                   	pop    %ebx
+ a43:	5e                   	pop    %esi
+ a44:	5f                   	pop    %edi
+ a45:	5d                   	pop    %ebp
+ a46:	c3                   	ret    
+ a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a4e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a50:	c7 05 80 0e 00 00 84 	movl   $0xe84,0xe80
+ a57:	0e 00 00 
+    base.s.size = 0;
+ a5a:	bf 84 0e 00 00       	mov    $0xe84,%edi
+    base.s.ptr = freep = prevp = &base;
+ a5f:	c7 05 84 0e 00 00 84 	movl   $0xe84,0xe84
+ a66:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a69:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a6b:	c7 05 88 0e 00 00 00 	movl   $0x0,0xe88
+ a72:	00 00 00 
+    if(p->s.size >= nunits){
+ a75:	e9 36 ff ff ff       	jmp    9b0 <malloc+0x30>
+ a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a80:	8b 0a                	mov    (%edx),%ecx
+ a82:	89 08                	mov    %ecx,(%eax)
+ a84:	eb b1                	jmp    a37 <malloc+0xb7>
diff -ruN xv6-public/grep.d xv6-public_mine/grep.d
--- xv6-public/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/grep.d	2021-09-30 23:42:21.351864269 +0530
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/grep.o and xv6-public_mine/grep.o differ
diff -ruN xv6-public/grep.sym xv6-public_mine/grep.sym
--- xv6-public/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/grep.sym	2021-09-30 23:42:21.900041255 +0530
@@ -0,0 +1,67 @@
+00000000 .text
+00000a88 .rodata
+00000adc .eh_frame
+00000e80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000670 printint
+00000ac8 digits.1101
+00000000 umalloc.c
+00000e80 freep
+00000e84 base
+00000340 strcpy
+0000065b set_prio
+00000720 printf
+00000570 memmove
+00000120 matchhere
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000230 grep
+00000980 malloc
+00000633 sleep
+00000653 wait2
+000005b3 pipe
+000005c3 write
+0000064b history
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+00000e64 __bss_start
+00000400 memset
+00000000 main
+000000c0 matchstar
+00000370 strcmp
+0000061b dup
+00000ea0 buf
+000004e0 stat
+00000e64 _edata
+000012a0 _end
+000001c0 match
+00000603 link
+000005a3 exit
+00000530 atoi
+00000663 yield2
+00000643 draw
+000003c0 strlen
+000005e3 open
+00000420 strchr
+0000060b mkdir
+000005cb close
+000008f0 free
diff -ruN xv6-public/ide.d xv6-public_mine/ide.d
--- xv6-public/ide.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ide.d	2021-09-30 23:41:48.014647674 +0530
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files xv6-public/ide.o and xv6-public_mine/ide.o differ
Binary files xv6-public/_init and xv6-public_mine/_init differ
diff -ruN xv6-public/init.asm xv6-public_mine/init.asm
--- xv6-public/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/init.asm	2021-09-30 23:42:22.416205570 +0530
@@ -0,0 +1,1280 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	53                   	push   %ebx
+  12:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+  13:	83 ec 08             	sub    $0x8,%esp
+  16:	6a 02                	push   $0x2
+  18:	68 38 08 00 00       	push   $0x838
+  1d:	e8 71 03 00 00       	call   393 <open>
+  22:	83 c4 10             	add    $0x10,%esp
+  25:	85 c0                	test   %eax,%eax
+  27:	0f 88 9b 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  2d:	83 ec 0c             	sub    $0xc,%esp
+  30:	6a 00                	push   $0x0
+  32:	e8 94 03 00 00       	call   3cb <dup>
+  dup(0);  // stderr
+  37:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3e:	e8 88 03 00 00       	call   3cb <dup>
+  43:	83 c4 10             	add    $0x10,%esp
+  46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  50:	83 ec 08             	sub    $0x8,%esp
+  53:	68 40 08 00 00       	push   $0x840
+  58:	6a 01                	push   $0x1
+  5a:	e8 71 04 00 00       	call   4d0 <printf>
+    pid = fork();
+  5f:	e8 e7 02 00 00       	call   34b <fork>
+    if(pid < 0){
+  64:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  67:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  69:	85 c0                	test   %eax,%eax
+  6b:	78 24                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  6d:	74 35                	je     a4 <main+0xa4>
+  6f:	90                   	nop
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 e6 02 00 00       	call   35b <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 d7                	js     50 <main+0x50>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 d3                	je     50 <main+0x50>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 7f 08 00 00       	push   $0x87f
+  85:	6a 01                	push   $0x1
+  87:	e8 44 04 00 00       	call   4d0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 53 08 00 00       	push   $0x853
+  98:	6a 01                	push   $0x1
+  9a:	e8 31 04 00 00       	call   4d0 <printf>
+      exit();
+  9f:	e8 af 02 00 00       	call   353 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 3c 0b 00 00       	push   $0xb3c
+  ab:	68 66 08 00 00       	push   $0x866
+  b0:	e8 d6 02 00 00       	call   38b <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 69 08 00 00       	push   $0x869
+  bc:	6a 01                	push   $0x1
+  be:	e8 0d 04 00 00       	call   4d0 <printf>
+      exit();
+  c3:	e8 8b 02 00 00       	call   353 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 38 08 00 00       	push   $0x838
+  d2:	e8 c4 02 00 00       	call   39b <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 38 08 00 00       	push   $0x838
+  e0:	e8 ae 02 00 00       	call   393 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f5:	31 c0                	xor    %eax,%eax
+{
+  f7:	89 e5                	mov    %esp,%ebp
+  f9:	53                   	push   %ebx
+  fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  fd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 107:	83 c0 01             	add    $0x1,%eax
+ 10a:	84 d2                	test   %dl,%dl
+ 10c:	75 f2                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 10e:	89 c8                	mov    %ecx,%eax
+ 110:	5b                   	pop    %ebx
+ 111:	5d                   	pop    %ebp
+ 112:	c3                   	ret    
+ 113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	53                   	push   %ebx
+ 128:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 12b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 12e:	0f b6 01             	movzbl (%ecx),%eax
+ 131:	0f b6 1a             	movzbl (%edx),%ebx
+ 134:	84 c0                	test   %al,%al
+ 136:	75 19                	jne    151 <strcmp+0x31>
+ 138:	eb 26                	jmp    160 <strcmp+0x40>
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 140:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 144:	83 c1 01             	add    $0x1,%ecx
+ 147:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 14a:	0f b6 1a             	movzbl (%edx),%ebx
+ 14d:	84 c0                	test   %al,%al
+ 14f:	74 0f                	je     160 <strcmp+0x40>
+ 151:	38 d8                	cmp    %bl,%al
+ 153:	74 eb                	je     140 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 155:	29 d8                	sub    %ebx,%eax
+}
+ 157:	5b                   	pop    %ebx
+ 158:	5d                   	pop    %ebp
+ 159:	c3                   	ret    
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 162:	29 d8                	sub    %ebx,%eax
+}
+ 164:	5b                   	pop    %ebx
+ 165:	5d                   	pop    %ebp
+ 166:	c3                   	ret    
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 17a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 17d:	74 21                	je     1a0 <strlen+0x30>
+ 17f:	31 c0                	xor    %eax,%eax
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 188:	83 c0 01             	add    $0x1,%eax
+ 18b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 18f:	89 c1                	mov    %eax,%ecx
+ 191:	75 f5                	jne    188 <strlen+0x18>
+    ;
+  return n;
+}
+ 193:	89 c8                	mov    %ecx,%eax
+ 195:	5d                   	pop    %ebp
+ 196:	c3                   	ret    
+ 197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1a0:	31 c9                	xor    %ecx,%ecx
+}
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	89 c8                	mov    %ecx,%eax
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001b0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1b0:	f3 0f 1e fb          	endbr32 
+ 1b4:	55                   	push   %ebp
+ 1b5:	89 e5                	mov    %esp,%ebp
+ 1b7:	57                   	push   %edi
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1bb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1be:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1c1:	89 d7                	mov    %edx,%edi
+ 1c3:	fc                   	cld    
+ 1c4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1c6:	89 d0                	mov    %edx,%eax
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1da:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1de:	0f b6 10             	movzbl (%eax),%edx
+ 1e1:	84 d2                	test   %dl,%dl
+ 1e3:	75 16                	jne    1fb <strchr+0x2b>
+ 1e5:	eb 21                	jmp    208 <strchr+0x38>
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+ 1f0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1f4:	83 c0 01             	add    $0x1,%eax
+ 1f7:	84 d2                	test   %dl,%dl
+ 1f9:	74 0d                	je     208 <strchr+0x38>
+    if(*s == c)
+ 1fb:	38 d1                	cmp    %dl,%cl
+ 1fd:	75 f1                	jne    1f0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 208:	31 c0                	xor    %eax,%eax
+}
+ 20a:	5d                   	pop    %ebp
+ 20b:	c3                   	ret    
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 219:	31 f6                	xor    %esi,%esi
+{
+ 21b:	53                   	push   %ebx
+ 21c:	89 f3                	mov    %esi,%ebx
+ 21e:	83 ec 1c             	sub    $0x1c,%esp
+ 221:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 224:	eb 33                	jmp    259 <gets+0x49>
+ 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 230:	83 ec 04             	sub    $0x4,%esp
+ 233:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 236:	6a 01                	push   $0x1
+ 238:	50                   	push   %eax
+ 239:	6a 00                	push   $0x0
+ 23b:	e8 2b 01 00 00       	call   36b <read>
+    if(cc < 1)
+ 240:	83 c4 10             	add    $0x10,%esp
+ 243:	85 c0                	test   %eax,%eax
+ 245:	7e 1c                	jle    263 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 247:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 24b:	83 c7 01             	add    $0x1,%edi
+ 24e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 251:	3c 0a                	cmp    $0xa,%al
+ 253:	74 23                	je     278 <gets+0x68>
+ 255:	3c 0d                	cmp    $0xd,%al
+ 257:	74 1f                	je     278 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 259:	83 c3 01             	add    $0x1,%ebx
+ 25c:	89 fe                	mov    %edi,%esi
+ 25e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 261:	7c cd                	jl     230 <gets+0x20>
+ 263:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 265:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 268:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 26b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 26e:	5b                   	pop    %ebx
+ 26f:	5e                   	pop    %esi
+ 270:	5f                   	pop    %edi
+ 271:	5d                   	pop    %ebp
+ 272:	c3                   	ret    
+ 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 277:	90                   	nop
+ 278:	8b 75 08             	mov    0x8(%ebp),%esi
+ 27b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27e:	01 de                	add    %ebx,%esi
+ 280:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 282:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 285:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 288:	5b                   	pop    %ebx
+ 289:	5e                   	pop    %esi
+ 28a:	5f                   	pop    %edi
+ 28b:	5d                   	pop    %ebp
+ 28c:	c3                   	ret    
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000290 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	56                   	push   %esi
+ 298:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	6a 00                	push   $0x0
+ 29e:	ff 75 08             	pushl  0x8(%ebp)
+ 2a1:	e8 ed 00 00 00       	call   393 <open>
+  if(fd < 0)
+ 2a6:	83 c4 10             	add    $0x10,%esp
+ 2a9:	85 c0                	test   %eax,%eax
+ 2ab:	78 2b                	js     2d8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2ad:	83 ec 08             	sub    $0x8,%esp
+ 2b0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2b3:	89 c3                	mov    %eax,%ebx
+ 2b5:	50                   	push   %eax
+ 2b6:	e8 f0 00 00 00       	call   3ab <fstat>
+  close(fd);
+ 2bb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2be:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2c0:	e8 b6 00 00 00       	call   37b <close>
+  return r;
+ 2c5:	83 c4 10             	add    $0x10,%esp
+}
+ 2c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2cb:	89 f0                	mov    %esi,%eax
+ 2cd:	5b                   	pop    %ebx
+ 2ce:	5e                   	pop    %esi
+ 2cf:	5d                   	pop    %ebp
+ 2d0:	c3                   	ret    
+ 2d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2d8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2dd:	eb e9                	jmp    2c8 <stat+0x38>
+ 2df:	90                   	nop
+
+000002e0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	53                   	push   %ebx
+ 2e8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2eb:	0f be 02             	movsbl (%edx),%eax
+ 2ee:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2f1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2f4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2f9:	77 1a                	ja     315 <atoi+0x35>
+ 2fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ff:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 300:	83 c2 01             	add    $0x1,%edx
+ 303:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 306:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 30a:	0f be 02             	movsbl (%edx),%eax
+ 30d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 310:	80 fb 09             	cmp    $0x9,%bl
+ 313:	76 eb                	jbe    300 <atoi+0x20>
+  return n;
+}
+ 315:	89 c8                	mov    %ecx,%eax
+ 317:	5b                   	pop    %ebx
+ 318:	5d                   	pop    %ebp
+ 319:	c3                   	ret    
+ 31a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000320 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 320:	f3 0f 1e fb          	endbr32 
+ 324:	55                   	push   %ebp
+ 325:	89 e5                	mov    %esp,%ebp
+ 327:	57                   	push   %edi
+ 328:	8b 45 10             	mov    0x10(%ebp),%eax
+ 32b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 32e:	56                   	push   %esi
+ 32f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 332:	85 c0                	test   %eax,%eax
+ 334:	7e 0f                	jle    345 <memmove+0x25>
+ 336:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 338:	89 d7                	mov    %edx,%edi
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 340:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 341:	39 f8                	cmp    %edi,%eax
+ 343:	75 fb                	jne    340 <memmove+0x20>
+  return vdst;
+}
+ 345:	5e                   	pop    %esi
+ 346:	89 d0                	mov    %edx,%eax
+ 348:	5f                   	pop    %edi
+ 349:	5d                   	pop    %ebp
+ 34a:	c3                   	ret    
+
+0000034b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 34b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <exit>:
+SYSCALL(exit)
+ 353:	b8 02 00 00 00       	mov    $0x2,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <wait>:
+SYSCALL(wait)
+ 35b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <pipe>:
+SYSCALL(pipe)
+ 363:	b8 04 00 00 00       	mov    $0x4,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <read>:
+SYSCALL(read)
+ 36b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <write>:
+SYSCALL(write)
+ 373:	b8 10 00 00 00       	mov    $0x10,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <close>:
+SYSCALL(close)
+ 37b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <kill>:
+SYSCALL(kill)
+ 383:	b8 06 00 00 00       	mov    $0x6,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <exec>:
+SYSCALL(exec)
+ 38b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <open>:
+SYSCALL(open)
+ 393:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <mknod>:
+SYSCALL(mknod)
+ 39b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <unlink>:
+SYSCALL(unlink)
+ 3a3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <fstat>:
+SYSCALL(fstat)
+ 3ab:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <link>:
+SYSCALL(link)
+ 3b3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mkdir>:
+SYSCALL(mkdir)
+ 3bb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <chdir>:
+SYSCALL(chdir)
+ 3c3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <dup>:
+SYSCALL(dup)
+ 3cb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <getpid>:
+SYSCALL(getpid)
+ 3d3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <sbrk>:
+SYSCALL(sbrk)
+ 3db:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <sleep>:
+SYSCALL(sleep)
+ 3e3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <uptime>:
+SYSCALL(uptime)
+ 3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <draw>:
+SYSCALL(draw)
+ 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <history>:
+SYSCALL(history)
+ 3fb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <wait2>:
+SYSCALL(wait2)
+ 403:	b8 18 00 00 00       	mov    $0x18,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <set_prio>:
+SYSCALL(set_prio)
+ 40b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <yield2>:
+SYSCALL(yield2)
+ 413:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+ 41b:	66 90                	xchg   %ax,%ax
+ 41d:	66 90                	xchg   %ax,%ax
+ 41f:	90                   	nop
+
+00000420 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	57                   	push   %edi
+ 424:	56                   	push   %esi
+ 425:	53                   	push   %ebx
+ 426:	83 ec 3c             	sub    $0x3c,%esp
+ 429:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 42c:	89 d1                	mov    %edx,%ecx
+{
+ 42e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 431:	85 d2                	test   %edx,%edx
+ 433:	0f 89 7f 00 00 00    	jns    4b8 <printint+0x98>
+ 439:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 43d:	74 79                	je     4b8 <printint+0x98>
+    neg = 1;
+ 43f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 446:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 448:	31 db                	xor    %ebx,%ebx
+ 44a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 44d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 450:	89 c8                	mov    %ecx,%eax
+ 452:	31 d2                	xor    %edx,%edx
+ 454:	89 cf                	mov    %ecx,%edi
+ 456:	f7 75 c4             	divl   -0x3c(%ebp)
+ 459:	0f b6 92 90 08 00 00 	movzbl 0x890(%edx),%edx
+ 460:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 463:	89 d8                	mov    %ebx,%eax
+ 465:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 468:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 46b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 46e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 471:	76 dd                	jbe    450 <printint+0x30>
+  if(neg)
+ 473:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 476:	85 c9                	test   %ecx,%ecx
+ 478:	74 0c                	je     486 <printint+0x66>
+    buf[i++] = '-';
+ 47a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 47f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 481:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 486:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 489:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 48d:	eb 07                	jmp    496 <printint+0x76>
+ 48f:	90                   	nop
+ 490:	0f b6 13             	movzbl (%ebx),%edx
+ 493:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 496:	83 ec 04             	sub    $0x4,%esp
+ 499:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 49c:	6a 01                	push   $0x1
+ 49e:	56                   	push   %esi
+ 49f:	57                   	push   %edi
+ 4a0:	e8 ce fe ff ff       	call   373 <write>
+  while(--i >= 0)
+ 4a5:	83 c4 10             	add    $0x10,%esp
+ 4a8:	39 de                	cmp    %ebx,%esi
+ 4aa:	75 e4                	jne    490 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4ac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4af:	5b                   	pop    %ebx
+ 4b0:	5e                   	pop    %esi
+ 4b1:	5f                   	pop    %edi
+ 4b2:	5d                   	pop    %ebp
+ 4b3:	c3                   	ret    
+ 4b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4b8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4bf:	eb 87                	jmp    448 <printint+0x28>
+ 4c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
+
+000004d0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4d0:	f3 0f 1e fb          	endbr32 
+ 4d4:	55                   	push   %ebp
+ 4d5:	89 e5                	mov    %esp,%ebp
+ 4d7:	57                   	push   %edi
+ 4d8:	56                   	push   %esi
+ 4d9:	53                   	push   %ebx
+ 4da:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4dd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4e0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4e3:	84 db                	test   %bl,%bl
+ 4e5:	0f 84 b4 00 00 00    	je     59f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4eb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ee:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4f1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4f4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4f9:	eb 33                	jmp    52e <printf+0x5e>
+ 4fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+ 500:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 503:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 508:	83 f8 25             	cmp    $0x25,%eax
+ 50b:	74 17                	je     524 <printf+0x54>
+  write(fd, &c, 1);
+ 50d:	83 ec 04             	sub    $0x4,%esp
+ 510:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 55 fe ff ff       	call   373 <write>
+ 51e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 521:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 524:	0f b6 1e             	movzbl (%esi),%ebx
+ 527:	83 c6 01             	add    $0x1,%esi
+ 52a:	84 db                	test   %bl,%bl
+ 52c:	74 71                	je     59f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 52e:	0f be cb             	movsbl %bl,%ecx
+ 531:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 534:	85 d2                	test   %edx,%edx
+ 536:	74 c8                	je     500 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 538:	83 fa 25             	cmp    $0x25,%edx
+ 53b:	75 e7                	jne    524 <printf+0x54>
+      if(c == 'd'){
+ 53d:	83 f8 64             	cmp    $0x64,%eax
+ 540:	0f 84 9a 00 00 00    	je     5e0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 546:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 54c:	83 f9 70             	cmp    $0x70,%ecx
+ 54f:	74 5f                	je     5b0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 551:	83 f8 73             	cmp    $0x73,%eax
+ 554:	0f 84 d6 00 00 00    	je     630 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 55a:	83 f8 63             	cmp    $0x63,%eax
+ 55d:	0f 84 8d 00 00 00    	je     5f0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 563:	83 f8 25             	cmp    $0x25,%eax
+ 566:	0f 84 b4 00 00 00    	je     620 <printf+0x150>
+  write(fd, &c, 1);
+ 56c:	83 ec 04             	sub    $0x4,%esp
+ 56f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 573:	6a 01                	push   $0x1
+ 575:	57                   	push   %edi
+ 576:	ff 75 08             	pushl  0x8(%ebp)
+ 579:	e8 f5 fd ff ff       	call   373 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 57e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 581:	83 c4 0c             	add    $0xc,%esp
+ 584:	6a 01                	push   $0x1
+ 586:	83 c6 01             	add    $0x1,%esi
+ 589:	57                   	push   %edi
+ 58a:	ff 75 08             	pushl  0x8(%ebp)
+ 58d:	e8 e1 fd ff ff       	call   373 <write>
+  for(i = 0; fmt[i]; i++){
+ 592:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 596:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 599:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 59b:	84 db                	test   %bl,%bl
+ 59d:	75 8f                	jne    52e <printf+0x5e>
+    }
+  }
+}
+ 59f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5a2:	5b                   	pop    %ebx
+ 5a3:	5e                   	pop    %esi
+ 5a4:	5f                   	pop    %edi
+ 5a5:	5d                   	pop    %ebp
+ 5a6:	c3                   	ret    
+ 5a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5b8:	6a 00                	push   $0x0
+ 5ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5bd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5c0:	8b 13                	mov    (%ebx),%edx
+ 5c2:	e8 59 fe ff ff       	call   420 <printint>
+        ap++;
+ 5c7:	89 d8                	mov    %ebx,%eax
+ 5c9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5cc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ce:	83 c0 04             	add    $0x4,%eax
+ 5d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5d4:	e9 4b ff ff ff       	jmp    524 <printf+0x54>
+ 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5e0:	83 ec 0c             	sub    $0xc,%esp
+ 5e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5e8:	6a 01                	push   $0x1
+ 5ea:	eb ce                	jmp    5ba <printf+0xea>
+ 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5f6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5f8:	6a 01                	push   $0x1
+        ap++;
+ 5fa:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5fd:	57                   	push   %edi
+ 5fe:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 601:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 604:	e8 6a fd ff ff       	call   373 <write>
+        ap++;
+ 609:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 60c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 0e ff ff ff       	jmp    524 <printf+0x54>
+ 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 620:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 623:	83 ec 04             	sub    $0x4,%esp
+ 626:	e9 59 ff ff ff       	jmp    584 <printf+0xb4>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+        s = (char*)*ap;
+ 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 633:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 635:	83 c0 04             	add    $0x4,%eax
+ 638:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 63b:	85 db                	test   %ebx,%ebx
+ 63d:	74 17                	je     656 <printf+0x186>
+        while(*s != 0){
+ 63f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 642:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 644:	84 c0                	test   %al,%al
+ 646:	0f 84 d8 fe ff ff    	je     524 <printf+0x54>
+ 64c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 64f:	89 de                	mov    %ebx,%esi
+ 651:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 654:	eb 1a                	jmp    670 <printf+0x1a0>
+          s = "(null)";
+ 656:	bb 88 08 00 00       	mov    $0x888,%ebx
+        while(*s != 0){
+ 65b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 65e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 663:	89 de                	mov    %ebx,%esi
+ 665:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+  write(fd, &c, 1);
+ 670:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 673:	83 c6 01             	add    $0x1,%esi
+ 676:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 679:	6a 01                	push   $0x1
+ 67b:	57                   	push   %edi
+ 67c:	53                   	push   %ebx
+ 67d:	e8 f1 fc ff ff       	call   373 <write>
+        while(*s != 0){
+ 682:	0f b6 06             	movzbl (%esi),%eax
+ 685:	83 c4 10             	add    $0x10,%esp
+ 688:	84 c0                	test   %al,%al
+ 68a:	75 e4                	jne    670 <printf+0x1a0>
+ 68c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 68f:	31 d2                	xor    %edx,%edx
+ 691:	e9 8e fe ff ff       	jmp    524 <printf+0x54>
+ 696:	66 90                	xchg   %ax,%ax
+ 698:	66 90                	xchg   %ax,%ax
+ 69a:	66 90                	xchg   %ax,%ax
+ 69c:	66 90                	xchg   %ax,%ax
+ 69e:	66 90                	xchg   %ax,%ax
+
+000006a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6a0:	f3 0f 1e fb          	endbr32 
+ 6a4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a5:	a1 44 0b 00 00       	mov    0xb44,%eax
+{
+ 6aa:	89 e5                	mov    %esp,%ebp
+ 6ac:	57                   	push   %edi
+ 6ad:	56                   	push   %esi
+ 6ae:	53                   	push   %ebx
+ 6af:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6b4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b7:	39 c8                	cmp    %ecx,%eax
+ 6b9:	73 15                	jae    6d0 <free+0x30>
+ 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6bf:	90                   	nop
+ 6c0:	39 d1                	cmp    %edx,%ecx
+ 6c2:	72 14                	jb     6d8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c4:	39 d0                	cmp    %edx,%eax
+ 6c6:	73 10                	jae    6d8 <free+0x38>
+{
+ 6c8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ca:	8b 10                	mov    (%eax),%edx
+ 6cc:	39 c8                	cmp    %ecx,%eax
+ 6ce:	72 f0                	jb     6c0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d0:	39 d0                	cmp    %edx,%eax
+ 6d2:	72 f4                	jb     6c8 <free+0x28>
+ 6d4:	39 d1                	cmp    %edx,%ecx
+ 6d6:	73 f0                	jae    6c8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 fa                	cmp    %edi,%edx
+ 6e0:	74 1e                	je     700 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6e5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6eb:	39 f1                	cmp    %esi,%ecx
+ 6ed:	74 28                	je     717 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6ef:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6f1:	5b                   	pop    %ebx
+  freep = p;
+ 6f2:	a3 44 0b 00 00       	mov    %eax,0xb44
+}
+ 6f7:	5e                   	pop    %esi
+ 6f8:	5f                   	pop    %edi
+ 6f9:	5d                   	pop    %ebp
+ 6fa:	c3                   	ret    
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 700:	03 72 04             	add    0x4(%edx),%esi
+ 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 706:	8b 10                	mov    (%eax),%edx
+ 708:	8b 12                	mov    (%edx),%edx
+ 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 70d:	8b 50 04             	mov    0x4(%eax),%edx
+ 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 713:	39 f1                	cmp    %esi,%ecx
+ 715:	75 d8                	jne    6ef <free+0x4f>
+    p->s.size += bp->s.size;
+ 717:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 71a:	a3 44 0b 00 00       	mov    %eax,0xb44
+    p->s.size += bp->s.size;
+ 71f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 722:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 725:	89 10                	mov    %edx,(%eax)
+}
+ 727:	5b                   	pop    %ebx
+ 728:	5e                   	pop    %esi
+ 729:	5f                   	pop    %edi
+ 72a:	5d                   	pop    %ebp
+ 72b:	c3                   	ret    
+ 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000730 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+ 735:	89 e5                	mov    %esp,%ebp
+ 737:	57                   	push   %edi
+ 738:	56                   	push   %esi
+ 739:	53                   	push   %ebx
+ 73a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 73d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 740:	8b 3d 44 0b 00 00    	mov    0xb44,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 746:	8d 70 07             	lea    0x7(%eax),%esi
+ 749:	c1 ee 03             	shr    $0x3,%esi
+ 74c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 74f:	85 ff                	test   %edi,%edi
+ 751:	0f 84 a9 00 00 00    	je     800 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 757:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 759:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75c:	39 f1                	cmp    %esi,%ecx
+ 75e:	73 6d                	jae    7cd <malloc+0x9d>
+ 760:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 766:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 76b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 76e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 775:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 778:	eb 17                	jmp    791 <malloc+0x61>
+ 77a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 780:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 782:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 785:	39 f1                	cmp    %esi,%ecx
+ 787:	73 4f                	jae    7d8 <malloc+0xa8>
+ 789:	8b 3d 44 0b 00 00    	mov    0xb44,%edi
+ 78f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 791:	39 c7                	cmp    %eax,%edi
+ 793:	75 eb                	jne    780 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 795:	83 ec 0c             	sub    $0xc,%esp
+ 798:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 79b:	e8 3b fc ff ff       	call   3db <sbrk>
+  if(p == (char*)-1)
+ 7a0:	83 c4 10             	add    $0x10,%esp
+ 7a3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7a6:	74 1b                	je     7c3 <malloc+0x93>
+  hp->s.size = nu;
+ 7a8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7ab:	83 ec 0c             	sub    $0xc,%esp
+ 7ae:	83 c0 08             	add    $0x8,%eax
+ 7b1:	50                   	push   %eax
+ 7b2:	e8 e9 fe ff ff       	call   6a0 <free>
+  return freep;
+ 7b7:	a1 44 0b 00 00       	mov    0xb44,%eax
+      if((p = morecore(nunits)) == 0)
+ 7bc:	83 c4 10             	add    $0x10,%esp
+ 7bf:	85 c0                	test   %eax,%eax
+ 7c1:	75 bd                	jne    780 <malloc+0x50>
+        return 0;
+  }
+}
+ 7c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7c6:	31 c0                	xor    %eax,%eax
+}
+ 7c8:	5b                   	pop    %ebx
+ 7c9:	5e                   	pop    %esi
+ 7ca:	5f                   	pop    %edi
+ 7cb:	5d                   	pop    %ebp
+ 7cc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7cd:	89 c2                	mov    %eax,%edx
+ 7cf:	89 f8                	mov    %edi,%eax
+ 7d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7d8:	39 ce                	cmp    %ecx,%esi
+ 7da:	74 54                	je     830 <malloc+0x100>
+        p->s.size -= nunits;
+ 7dc:	29 f1                	sub    %esi,%ecx
+ 7de:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7e1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7e4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7e7:	a3 44 0b 00 00       	mov    %eax,0xb44
+}
+ 7ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7ef:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 7f2:	5b                   	pop    %ebx
+ 7f3:	5e                   	pop    %esi
+ 7f4:	5f                   	pop    %edi
+ 7f5:	5d                   	pop    %ebp
+ 7f6:	c3                   	ret    
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 800:	c7 05 44 0b 00 00 48 	movl   $0xb48,0xb44
+ 807:	0b 00 00 
+    base.s.size = 0;
+ 80a:	bf 48 0b 00 00       	mov    $0xb48,%edi
+    base.s.ptr = freep = prevp = &base;
+ 80f:	c7 05 48 0b 00 00 48 	movl   $0xb48,0xb48
+ 816:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 819:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 81b:	c7 05 4c 0b 00 00 00 	movl   $0x0,0xb4c
+ 822:	00 00 00 
+    if(p->s.size >= nunits){
+ 825:	e9 36 ff ff ff       	jmp    760 <malloc+0x30>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 830:	8b 0a                	mov    (%edx),%ecx
+ 832:	89 08                	mov    %ecx,(%eax)
+ 834:	eb b1                	jmp    7e7 <malloc+0xb7>
Binary files xv6-public/initcode and xv6-public_mine/initcode differ
diff -ruN xv6-public/initcode.asm xv6-public_mine/initcode.asm
--- xv6-public/initcode.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/initcode.asm	2021-09-30 23:42:01.860973775 +0530
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -ruN xv6-public/initcode.d xv6-public_mine/initcode.d
--- xv6-public/initcode.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/initcode.d	2021-09-30 23:42:01.860973775 +0530
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files xv6-public/initcode.o and xv6-public_mine/initcode.o differ
Binary files xv6-public/initcode.out and xv6-public_mine/initcode.out differ
diff -ruN xv6-public/init.d xv6-public_mine/init.d
--- xv6-public/init.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/init.d	2021-09-30 23:42:22.100105318 +0530
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files xv6-public/init.o and xv6-public_mine/init.o differ
diff -ruN xv6-public/init.sym xv6-public_mine/init.sym
--- xv6-public/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/init.sym	2021-09-30 23:42:22.480225875 +0530
@@ -0,0 +1,64 @@
+00000000 .text
+00000838 .rodata
+000008a4 .eh_frame
+00000b3c .data
+00000b44 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+00000420 printint
+00000890 digits.1101
+00000000 umalloc.c
+00000b44 freep
+00000b48 base
+000000f0 strcpy
+0000040b set_prio
+000004d0 printf
+00000b3c argv
+00000320 memmove
+0000039b mknod
+00000210 gets
+000003d3 getpid
+00000730 malloc
+000003e3 sleep
+00000403 wait2
+00000363 pipe
+00000373 write
+000003fb history
+000003ab fstat
+00000383 kill
+000003c3 chdir
+0000038b exec
+0000035b wait
+0000036b read
+000003a3 unlink
+0000034b fork
+000003db sbrk
+000003eb uptime
+00000b44 __bss_start
+000001b0 memset
+00000000 main
+00000120 strcmp
+000003cb dup
+00000290 stat
+00000b44 _edata
+00000b50 _end
+000003b3 link
+00000353 exit
+000002e0 atoi
+00000413 yield2
+000003f3 draw
+00000170 strlen
+00000393 open
+000001d0 strchr
+000003bb mkdir
+0000037b close
+000006a0 free
diff -ruN xv6-public/ioapic.d xv6-public_mine/ioapic.d
--- xv6-public/ioapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ioapic.d	2021-09-30 23:41:48.354605209 +0530
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files xv6-public/ioapic.o and xv6-public_mine/ioapic.o differ
diff -ruN xv6-public/kalloc.d xv6-public_mine/kalloc.d
--- xv6-public/kalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/kalloc.d	2021-09-30 23:41:48.822546749 +0530
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files xv6-public/kalloc.o and xv6-public_mine/kalloc.o differ
diff -ruN xv6-public/kbd.d xv6-public_mine/kbd.d
--- xv6-public/kbd.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/kbd.d	2021-09-30 23:41:49.238494953 +0530
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files xv6-public/kbd.o and xv6-public_mine/kbd.o differ
Binary files xv6-public/kernel and xv6-public_mine/kernel differ
diff -ruN xv6-public/kernel.asm xv6-public_mine/kernel.asm
--- xv6-public/kernel.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/kernel.asm	2021-09-30 23:42:02.388912001 +0530
@@ -0,0 +1,17783 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 b0 10 00       	mov    $0x10b000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc c0 d5 10 80       	mov    $0x8010d5c0,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 30 3a 10 80       	mov    $0x80103a30,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100040:	f3 0f 1e fb          	endbr32 
+80100044:	55                   	push   %ebp
+80100045:	89 e5                	mov    %esp,%ebp
+80100047:	53                   	push   %ebx
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100048:	bb f4 d5 10 80       	mov    $0x8010d5f4,%ebx
+{
+8010004d:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&bcache.lock, "bcache");
+80100050:	68 e0 84 10 80       	push   $0x801084e0
+80100055:	68 c0 d5 10 80       	push   $0x8010d5c0
+8010005a:	e8 f1 55 00 00       	call   80105650 <initlock>
+  bcache.head.next = &bcache.head;
+8010005f:	83 c4 10             	add    $0x10,%esp
+80100062:	b8 bc 1c 11 80       	mov    $0x80111cbc,%eax
+  bcache.head.prev = &bcache.head;
+80100067:	c7 05 0c 1d 11 80 bc 	movl   $0x80111cbc,0x80111d0c
+8010006e:	1c 11 80 
+  bcache.head.next = &bcache.head;
+80100071:	c7 05 10 1d 11 80 bc 	movl   $0x80111cbc,0x80111d10
+80100078:	1c 11 80 
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+8010007b:	eb 05                	jmp    80100082 <binit+0x42>
+8010007d:	8d 76 00             	lea    0x0(%esi),%esi
+80100080:	89 d3                	mov    %edx,%ebx
+    b->next = bcache.head.next;
+80100082:	89 43 54             	mov    %eax,0x54(%ebx)
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+80100085:	83 ec 08             	sub    $0x8,%esp
+80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
+    b->prev = &bcache.head;
+8010008b:	c7 43 50 bc 1c 11 80 	movl   $0x80111cbc,0x50(%ebx)
+    initsleeplock(&b->lock, "buffer");
+80100092:	68 e7 84 10 80       	push   $0x801084e7
+80100097:	50                   	push   %eax
+80100098:	e8 73 54 00 00       	call   80105510 <initsleeplock>
+    bcache.head.next->prev = b;
+8010009d:	a1 10 1d 11 80       	mov    0x80111d10,%eax
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
+801000a8:	83 c4 10             	add    $0x10,%esp
+    bcache.head.next->prev = b;
+801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+801000ae:	89 d8                	mov    %ebx,%eax
+801000b0:	89 1d 10 1d 11 80    	mov    %ebx,0x80111d10
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000b6:	81 fb 60 1a 11 80    	cmp    $0x80111a60,%ebx
+801000bc:	75 c2                	jne    80100080 <binit+0x40>
+  }
+}
+801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c1:	c9                   	leave  
+801000c2:	c3                   	ret    
+801000c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801000d0 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+801000d0:	f3 0f 1e fb          	endbr32 
+801000d4:	55                   	push   %ebp
+801000d5:	89 e5                	mov    %esp,%ebp
+801000d7:	57                   	push   %edi
+801000d8:	56                   	push   %esi
+801000d9:	53                   	push   %ebx
+801000da:	83 ec 18             	sub    $0x18,%esp
+801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
+801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&bcache.lock);
+801000e3:	68 c0 d5 10 80       	push   $0x8010d5c0
+801000e8:	e8 e3 56 00 00       	call   801057d0 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000ed:	8b 1d 10 1d 11 80    	mov    0x80111d10,%ebx
+801000f3:	83 c4 10             	add    $0x10,%esp
+801000f6:	81 fb bc 1c 11 80    	cmp    $0x80111cbc,%ebx
+801000fc:	75 0d                	jne    8010010b <bread+0x3b>
+801000fe:	eb 20                	jmp    80100120 <bread+0x50>
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb bc 1c 11 80    	cmp    $0x80111cbc,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+    if(b->dev == dev && b->blockno == blockno){
+8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 73 08             	cmp    0x8(%ebx),%esi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+      b->refcnt++;
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010011f:	90                   	nop
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100120:	8b 1d 0c 1d 11 80    	mov    0x80111d0c,%ebx
+80100126:	81 fb bc 1c 11 80    	cmp    $0x80111cbc,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb bc 1c 11 80    	cmp    $0x80111cbc,%ebx
+80100139:	74 65                	je     801001a0 <bread+0xd0>
+    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+      b->dev = dev;
+80100147:	89 7b 04             	mov    %edi,0x4(%ebx)
+      b->blockno = blockno;
+8010014a:	89 73 08             	mov    %esi,0x8(%ebx)
+      b->flags = 0;
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+      b->refcnt = 1;
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 c0 d5 10 80       	push   $0x8010d5c0
+80100162:	e8 29 57 00 00       	call   80105890 <release>
+      acquiresleep(&b->lock);
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 de 53 00 00       	call   80105550 <acquiresleep>
+      return b;
+80100172:	83 c4 10             	add    $0x10,%esp
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if((b->flags & B_VALID) == 0) {
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	74 0e                	je     80100188 <bread+0xb8>
+    iderw(b);
+  }
+  return b;
+}
+8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010017d:	89 d8                	mov    %ebx,%eax
+8010017f:	5b                   	pop    %ebx
+80100180:	5e                   	pop    %esi
+80100181:	5f                   	pop    %edi
+80100182:	5d                   	pop    %ebp
+80100183:	c3                   	ret    
+80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    iderw(b);
+80100188:	83 ec 0c             	sub    $0xc,%esp
+8010018b:	53                   	push   %ebx
+8010018c:	e8 df 2a 00 00       	call   80102c70 <iderw>
+80100191:	83 c4 10             	add    $0x10,%esp
+}
+80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100197:	89 d8                	mov    %ebx,%eax
+80100199:	5b                   	pop    %ebx
+8010019a:	5e                   	pop    %esi
+8010019b:	5f                   	pop    %edi
+8010019c:	5d                   	pop    %ebp
+8010019d:	c3                   	ret    
+8010019e:	66 90                	xchg   %ax,%ax
+  panic("bget: no buffers");
+801001a0:	83 ec 0c             	sub    $0xc,%esp
+801001a3:	68 ee 84 10 80       	push   $0x801084ee
+801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
+801001ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001b0 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+801001b0:	f3 0f 1e fb          	endbr32 
+801001b4:	55                   	push   %ebp
+801001b5:	89 e5                	mov    %esp,%ebp
+801001b7:	53                   	push   %ebx
+801001b8:	83 ec 10             	sub    $0x10,%esp
+801001bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001c1:	50                   	push   %eax
+801001c2:	e8 29 54 00 00       	call   801055f0 <holdingsleep>
+801001c7:	83 c4 10             	add    $0x10,%esp
+801001ca:	85 c0                	test   %eax,%eax
+801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+801001ce:	83 0b 04             	orl    $0x4,(%ebx)
+  iderw(b);
+801001d1:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801001d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001d7:	c9                   	leave  
+  iderw(b);
+801001d8:	e9 93 2a 00 00       	jmp    80102c70 <iderw>
+    panic("bwrite");
+801001dd:	83 ec 0c             	sub    $0xc,%esp
+801001e0:	68 ff 84 10 80       	push   $0x801084ff
+801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
+801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801001f0 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+801001f0:	f3 0f 1e fb          	endbr32 
+801001f4:	55                   	push   %ebp
+801001f5:	89 e5                	mov    %esp,%ebp
+801001f7:	56                   	push   %esi
+801001f8:	53                   	push   %ebx
+801001f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001ff:	83 ec 0c             	sub    $0xc,%esp
+80100202:	56                   	push   %esi
+80100203:	e8 e8 53 00 00       	call   801055f0 <holdingsleep>
+80100208:	83 c4 10             	add    $0x10,%esp
+8010020b:	85 c0                	test   %eax,%eax
+8010020d:	74 66                	je     80100275 <brelse+0x85>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+8010020f:	83 ec 0c             	sub    $0xc,%esp
+80100212:	56                   	push   %esi
+80100213:	e8 98 53 00 00       	call   801055b0 <releasesleep>
+
+  acquire(&bcache.lock);
+80100218:	c7 04 24 c0 d5 10 80 	movl   $0x8010d5c0,(%esp)
+8010021f:	e8 ac 55 00 00       	call   801057d0 <acquire>
+  b->refcnt--;
+80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
+  if (b->refcnt == 0) {
+80100227:	83 c4 10             	add    $0x10,%esp
+  b->refcnt--;
+8010022a:	83 e8 01             	sub    $0x1,%eax
+8010022d:	89 43 4c             	mov    %eax,0x4c(%ebx)
+  if (b->refcnt == 0) {
+80100230:	85 c0                	test   %eax,%eax
+80100232:	75 2f                	jne    80100263 <brelse+0x73>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+80100234:	8b 43 54             	mov    0x54(%ebx),%eax
+80100237:	8b 53 50             	mov    0x50(%ebx),%edx
+8010023a:	89 50 50             	mov    %edx,0x50(%eax)
+    b->prev->next = b->next;
+8010023d:	8b 43 50             	mov    0x50(%ebx),%eax
+80100240:	8b 53 54             	mov    0x54(%ebx),%edx
+80100243:	89 50 54             	mov    %edx,0x54(%eax)
+    b->next = bcache.head.next;
+80100246:	a1 10 1d 11 80       	mov    0x80111d10,%eax
+    b->prev = &bcache.head;
+8010024b:	c7 43 50 bc 1c 11 80 	movl   $0x80111cbc,0x50(%ebx)
+    b->next = bcache.head.next;
+80100252:	89 43 54             	mov    %eax,0x54(%ebx)
+    bcache.head.next->prev = b;
+80100255:	a1 10 1d 11 80       	mov    0x80111d10,%eax
+8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+8010025d:	89 1d 10 1d 11 80    	mov    %ebx,0x80111d10
+  }
+  
+  release(&bcache.lock);
+80100263:	c7 45 08 c0 d5 10 80 	movl   $0x8010d5c0,0x8(%ebp)
+}
+8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010026d:	5b                   	pop    %ebx
+8010026e:	5e                   	pop    %esi
+8010026f:	5d                   	pop    %ebp
+  release(&bcache.lock);
+80100270:	e9 1b 56 00 00       	jmp    80105890 <release>
+    panic("brelse");
+80100275:	83 ec 0c             	sub    $0xc,%esp
+80100278:	68 06 85 10 80       	push   $0x80108506
+8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
+80100282:	66 90                	xchg   %ax,%ax
+80100284:	66 90                	xchg   %ax,%ax
+80100286:	66 90                	xchg   %ax,%ax
+80100288:	66 90                	xchg   %ax,%ax
+8010028a:	66 90                	xchg   %ax,%ax
+8010028c:	66 90                	xchg   %ax,%ax
+8010028e:	66 90                	xchg   %ax,%ax
+
+80100290 <consoleread>:
+  return 0;
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+80100290:	f3 0f 1e fb          	endbr32 
+80100294:	55                   	push   %ebp
+80100295:	89 e5                	mov    %esp,%ebp
+80100297:	57                   	push   %edi
+80100298:	56                   	push   %esi
+80100299:	53                   	push   %ebx
+8010029a:	83 ec 18             	sub    $0x18,%esp
+  uint target;
+  int c;
+
+  iunlock(ip);
+8010029d:	ff 75 08             	pushl  0x8(%ebp)
+{
+801002a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  target = n;
+801002a3:	89 de                	mov    %ebx,%esi
+  iunlock(ip);
+801002a5:	e8 86 1f 00 00       	call   80102230 <iunlock>
+  acquire(&cons.lock);
+801002aa:	c7 04 24 20 c5 10 80 	movl   $0x8010c520,(%esp)
+801002b1:	e8 1a 55 00 00       	call   801057d0 <acquire>
+        // caller gets a 0-byte result.
+        input.r--;
+      }
+      break;
+    }
+    *dst++ = c;
+801002b6:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  while(n > 0){
+801002b9:	83 c4 10             	add    $0x10,%esp
+    *dst++ = c;
+801002bc:	01 df                	add    %ebx,%edi
+  while(n > 0){
+801002be:	85 db                	test   %ebx,%ebx
+801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
+    while(input.r == input.w){
+801002c6:	a1 20 20 11 80       	mov    0x80112020,%eax
+801002cb:	3b 05 24 20 11 80    	cmp    0x80112024,%eax
+801002d1:	74 27                	je     801002fa <consoleread+0x6a>
+801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
+801002d5:	8d 76 00             	lea    0x0(%esi),%esi
+      sleep(&input.r, &cons.lock);
+801002d8:	83 ec 08             	sub    $0x8,%esp
+801002db:	68 20 c5 10 80       	push   $0x8010c520
+801002e0:	68 20 20 11 80       	push   $0x80112020
+801002e5:	e8 56 48 00 00       	call   80104b40 <sleep>
+    while(input.r == input.w){
+801002ea:	a1 20 20 11 80       	mov    0x80112020,%eax
+801002ef:	83 c4 10             	add    $0x10,%esp
+801002f2:	3b 05 24 20 11 80    	cmp    0x80112024,%eax
+801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
+      if(myproc()->killed){
+801002fa:	e8 81 42 00 00       	call   80104580 <myproc>
+801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
+80100302:	85 c9                	test   %ecx,%ecx
+80100304:	74 d2                	je     801002d8 <consoleread+0x48>
+        release(&cons.lock);
+80100306:	83 ec 0c             	sub    $0xc,%esp
+80100309:	68 20 c5 10 80       	push   $0x8010c520
+8010030e:	e8 7d 55 00 00       	call   80105890 <release>
+        ilock(ip);
+80100313:	5a                   	pop    %edx
+80100314:	ff 75 08             	pushl  0x8(%ebp)
+80100317:	e8 34 1e 00 00       	call   80102150 <ilock>
+        return -1;
+8010031c:	83 c4 10             	add    $0x10,%esp
+  }
+  release(&cons.lock);
+  ilock(ip);
+
+  return target - n;
+}
+8010031f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return -1;
+80100322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100327:	5b                   	pop    %ebx
+80100328:	5e                   	pop    %esi
+80100329:	5f                   	pop    %edi
+8010032a:	5d                   	pop    %ebp
+8010032b:	c3                   	ret    
+8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = input.buf[input.r++ % INPUT_BUF];
+80100330:	8d 50 01             	lea    0x1(%eax),%edx
+80100333:	89 15 20 20 11 80    	mov    %edx,0x80112020
+80100339:	89 c2                	mov    %eax,%edx
+8010033b:	83 e2 7f             	and    $0x7f,%edx
+8010033e:	0f be 8a a0 1f 11 80 	movsbl -0x7feee060(%edx),%ecx
+    if(c == C('D')){  // EOF
+80100345:	80 f9 04             	cmp    $0x4,%cl
+80100348:	74 38                	je     80100382 <consoleread+0xf2>
+    *dst++ = c;
+8010034a:	89 d8                	mov    %ebx,%eax
+    --n;
+8010034c:	83 eb 01             	sub    $0x1,%ebx
+    *dst++ = c;
+8010034f:	f7 d8                	neg    %eax
+80100351:	88 0c 07             	mov    %cl,(%edi,%eax,1)
+    if(c == '\n')
+80100354:	83 f9 0a             	cmp    $0xa,%ecx
+80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
+  release(&cons.lock);
+8010035d:	83 ec 0c             	sub    $0xc,%esp
+80100360:	68 20 c5 10 80       	push   $0x8010c520
+80100365:	e8 26 55 00 00       	call   80105890 <release>
+  ilock(ip);
+8010036a:	58                   	pop    %eax
+8010036b:	ff 75 08             	pushl  0x8(%ebp)
+8010036e:	e8 dd 1d 00 00       	call   80102150 <ilock>
+  return target - n;
+80100373:	89 f0                	mov    %esi,%eax
+80100375:	83 c4 10             	add    $0x10,%esp
+}
+80100378:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return target - n;
+8010037b:	29 d8                	sub    %ebx,%eax
+}
+8010037d:	5b                   	pop    %ebx
+8010037e:	5e                   	pop    %esi
+8010037f:	5f                   	pop    %edi
+80100380:	5d                   	pop    %ebp
+80100381:	c3                   	ret    
+      if(n < target){
+80100382:	39 f3                	cmp    %esi,%ebx
+80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
+        input.r--;
+80100386:	a3 20 20 11 80       	mov    %eax,0x80112020
+8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
+8010038d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100390 <panic>:
+{
+80100390:	f3 0f 1e fb          	endbr32 
+80100394:	55                   	push   %ebp
+80100395:	89 e5                	mov    %esp,%ebp
+80100397:	56                   	push   %esi
+80100398:	53                   	push   %ebx
+80100399:	83 ec 30             	sub    $0x30,%esp
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+8010039c:	fa                   	cli    
+  cons.locking = 0;
+8010039d:	c7 05 54 c5 10 80 00 	movl   $0x0,0x8010c554
+801003a4:	00 00 00 
+  getcallerpcs(&s, pcs);
+801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+801003aa:	8d 75 f8             	lea    -0x8(%ebp),%esi
+  cprintf("lapicid %d: panic: ", lapicid());
+801003ad:	e8 de 2e 00 00       	call   80103290 <lapicid>
+801003b2:	83 ec 08             	sub    $0x8,%esp
+801003b5:	50                   	push   %eax
+801003b6:	68 0d 85 10 80       	push   $0x8010850d
+801003bb:	e8 30 03 00 00       	call   801006f0 <cprintf>
+  cprintf(s);
+801003c0:	58                   	pop    %eax
+801003c1:	ff 75 08             	pushl  0x8(%ebp)
+801003c4:	e8 27 03 00 00       	call   801006f0 <cprintf>
+  cprintf("\n");
+801003c9:	c7 04 24 d7 94 10 80 	movl   $0x801094d7,(%esp)
+801003d0:	e8 1b 03 00 00       	call   801006f0 <cprintf>
+  getcallerpcs(&s, pcs);
+801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
+801003d8:	5a                   	pop    %edx
+801003d9:	59                   	pop    %ecx
+801003da:	53                   	push   %ebx
+801003db:	50                   	push   %eax
+801003dc:	e8 8f 52 00 00       	call   80105670 <getcallerpcs>
+  for(i=0; i<10; i++)
+801003e1:	83 c4 10             	add    $0x10,%esp
+    cprintf(" %p", pcs[i]);
+801003e4:	83 ec 08             	sub    $0x8,%esp
+801003e7:	ff 33                	pushl  (%ebx)
+801003e9:	83 c3 04             	add    $0x4,%ebx
+801003ec:	68 21 85 10 80       	push   $0x80108521
+801003f1:	e8 fa 02 00 00       	call   801006f0 <cprintf>
+  for(i=0; i<10; i++)
+801003f6:	83 c4 10             	add    $0x10,%esp
+801003f9:	39 f3                	cmp    %esi,%ebx
+801003fb:	75 e7                	jne    801003e4 <panic+0x54>
+  panicked = 1; // freeze other CPU
+801003fd:	c7 05 58 c5 10 80 01 	movl   $0x1,0x8010c558
+80100404:	00 00 00 
+  for(;;)
+80100407:	eb fe                	jmp    80100407 <panic+0x77>
+80100409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100410 <consputc.part.0>:
+consputc(int c)
+80100410:	55                   	push   %ebp
+80100411:	89 e5                	mov    %esp,%ebp
+80100413:	57                   	push   %edi
+80100414:	56                   	push   %esi
+80100415:	89 c6                	mov    %eax,%esi
+80100417:	53                   	push   %ebx
+80100418:	83 ec 1c             	sub    $0x1c,%esp
+  switch (c) {
+8010041b:	3d e4 00 00 00       	cmp    $0xe4,%eax
+80100420:	0f 84 52 01 00 00    	je     80100578 <consputc.part.0+0x168>
+80100426:	3d 00 01 00 00       	cmp    $0x100,%eax
+8010042b:	0f 85 5f 01 00 00    	jne    80100590 <consputc.part.0+0x180>
+      uartputc('\b'); uartputc(' '); uartputc('\b');  // uart is writing to the linux shell
+80100431:	83 ec 0c             	sub    $0xc,%esp
+80100434:	6a 08                	push   $0x8
+80100436:	e8 95 6c 00 00       	call   801070d0 <uartputc>
+8010043b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+80100442:	e8 89 6c 00 00       	call   801070d0 <uartputc>
+80100447:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+8010044e:	e8 7d 6c 00 00       	call   801070d0 <uartputc>
+      break;
+80100453:	83 c4 10             	add    $0x10,%esp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100456:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+8010045b:	b8 0e 00 00 00       	mov    $0xe,%eax
+80100460:	89 da                	mov    %ebx,%edx
+80100462:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100463:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+80100468:	89 ca                	mov    %ecx,%edx
+8010046a:	ec                   	in     (%dx),%al
+  pos = inb(CRTPORT+1) << 8;
+8010046b:	0f b6 f8             	movzbl %al,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010046e:	89 da                	mov    %ebx,%edx
+80100470:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100475:	c1 e7 08             	shl    $0x8,%edi
+80100478:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100479:	89 ca                	mov    %ecx,%edx
+8010047b:	ec                   	in     (%dx),%al
+  pos |= inb(CRTPORT+1);
+8010047c:	0f b6 d8             	movzbl %al,%ebx
+8010047f:	09 fb                	or     %edi,%ebx
+  switch(c) {
+80100481:	81 fe e4 00 00 00    	cmp    $0xe4,%esi
+80100487:	0f 84 db 00 00 00    	je     80100568 <consputc.part.0+0x158>
+8010048d:	81 fe 00 01 00 00    	cmp    $0x100,%esi
+80100493:	0f 84 cf 00 00 00    	je     80100568 <consputc.part.0+0x158>
+80100499:	83 fe 0a             	cmp    $0xa,%esi
+8010049c:	0f 84 16 01 00 00    	je     801005b8 <consputc.part.0+0x1a8>
+      crt[pos++] = (c&0xff) | 0x0700;  // black on white
+801004a2:	89 f0                	mov    %esi,%eax
+801004a4:	0f b6 c0             	movzbl %al,%eax
+801004a7:	80 cc 07             	or     $0x7,%ah
+801004aa:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+801004b1:	80 
+801004b2:	83 c3 01             	add    $0x1,%ebx
+  if(pos < 0 || pos > 25*80)
+801004b5:	81 fb d0 07 00 00    	cmp    $0x7d0,%ebx
+801004bb:	0f 8f 11 01 00 00    	jg     801005d2 <consputc.part.0+0x1c2>
+  if((pos/80) >= 24){  // Scroll up.
+801004c1:	81 fb 7f 07 00 00    	cmp    $0x77f,%ebx
+801004c7:	7f 57                	jg     80100520 <consputc.part.0+0x110>
+801004c9:	0f b6 c7             	movzbl %bh,%eax
+801004cc:	88 5d e7             	mov    %bl,-0x19(%ebp)
+801004cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801004d2:	bf d4 03 00 00       	mov    $0x3d4,%edi
+801004d7:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004dc:	89 fa                	mov    %edi,%edx
+801004de:	ee                   	out    %al,(%dx)
+801004df:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+801004e4:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+801004e8:	89 ca                	mov    %ecx,%edx
+801004ea:	ee                   	out    %al,(%dx)
+801004eb:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004f0:	89 fa                	mov    %edi,%edx
+801004f2:	ee                   	out    %al,(%dx)
+801004f3:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+801004f7:	89 ca                	mov    %ecx,%edx
+801004f9:	ee                   	out    %al,(%dx)
+  if (c == BACKSPACE)
+801004fa:	81 fe 00 01 00 00    	cmp    $0x100,%esi
+80100500:	75 0d                	jne    8010050f <consputc.part.0+0xff>
+    crt[pos] = ' ' | 0x0700;
+80100502:	b8 20 07 00 00       	mov    $0x720,%eax
+80100507:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+8010050e:	80 
+}
+8010050f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100512:	5b                   	pop    %ebx
+80100513:	5e                   	pop    %esi
+80100514:	5f                   	pop    %edi
+80100515:	5d                   	pop    %ebp
+80100516:	c3                   	ret    
+80100517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010051e:	66 90                	xchg   %ax,%ax
+    memmove(crt, crt+80, sizeof(crt[0])*23*80); 
+80100520:	83 ec 04             	sub    $0x4,%esp
+    pos -= 80;
+80100523:	83 eb 50             	sub    $0x50,%ebx
+    memmove(crt, crt+80, sizeof(crt[0])*23*80); 
+80100526:	68 60 0e 00 00       	push   $0xe60
+8010052b:	68 a0 80 0b 80       	push   $0x800b80a0
+80100530:	68 00 80 0b 80       	push   $0x800b8000
+80100535:	e8 46 54 00 00       	call   80105980 <memmove>
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+8010053a:	b8 80 07 00 00       	mov    $0x780,%eax
+8010053f:	83 c4 0c             	add    $0xc,%esp
+80100542:	29 d8                	sub    %ebx,%eax
+80100544:	01 c0                	add    %eax,%eax
+80100546:	50                   	push   %eax
+80100547:	8d 84 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%eax
+8010054e:	6a 00                	push   $0x0
+80100550:	50                   	push   %eax
+80100551:	e8 8a 53 00 00       	call   801058e0 <memset>
+80100556:	88 5d e7             	mov    %bl,-0x19(%ebp)
+80100559:	83 c4 10             	add    $0x10,%esp
+8010055c:	c6 45 e0 07          	movb   $0x7,-0x20(%ebp)
+80100560:	e9 6d ff ff ff       	jmp    801004d2 <consputc.part.0+0xc2>
+80100565:	8d 76 00             	lea    0x0(%esi),%esi
+      if(pos > 0) --pos;
+80100568:	85 db                	test   %ebx,%ebx
+8010056a:	74 3c                	je     801005a8 <consputc.part.0+0x198>
+8010056c:	83 eb 01             	sub    $0x1,%ebx
+8010056f:	e9 41 ff ff ff       	jmp    801004b5 <consputc.part.0+0xa5>
+80100574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      uartputc('\b');
+80100578:	83 ec 0c             	sub    $0xc,%esp
+8010057b:	6a 08                	push   $0x8
+8010057d:	e8 4e 6b 00 00       	call   801070d0 <uartputc>
+      break;
+80100582:	83 c4 10             	add    $0x10,%esp
+80100585:	e9 cc fe ff ff       	jmp    80100456 <consputc.part.0+0x46>
+8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      uartputc(c);
+80100590:	83 ec 0c             	sub    $0xc,%esp
+80100593:	50                   	push   %eax
+80100594:	e8 37 6b 00 00       	call   801070d0 <uartputc>
+80100599:	83 c4 10             	add    $0x10,%esp
+8010059c:	e9 b5 fe ff ff       	jmp    80100456 <consputc.part.0+0x46>
+801005a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801005a8:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
+801005ac:	c6 45 e0 00          	movb   $0x0,-0x20(%ebp)
+801005b0:	e9 1d ff ff ff       	jmp    801004d2 <consputc.part.0+0xc2>
+801005b5:	8d 76 00             	lea    0x0(%esi),%esi
+      pos += 80 - pos%80;
+801005b8:	89 d8                	mov    %ebx,%eax
+801005ba:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+801005bf:	f7 e2                	mul    %edx
+801005c1:	c1 ea 06             	shr    $0x6,%edx
+801005c4:	8d 04 92             	lea    (%edx,%edx,4),%eax
+801005c7:	c1 e0 04             	shl    $0x4,%eax
+801005ca:	8d 58 50             	lea    0x50(%eax),%ebx
+      break;
+801005cd:	e9 e3 fe ff ff       	jmp    801004b5 <consputc.part.0+0xa5>
+    panic("pos under/overflow");
+801005d2:	83 ec 0c             	sub    $0xc,%esp
+801005d5:	68 25 85 10 80       	push   $0x80108525
+801005da:	e8 b1 fd ff ff       	call   80100390 <panic>
+801005df:	90                   	nop
+
+801005e0 <printint>:
+{
+801005e0:	55                   	push   %ebp
+801005e1:	89 e5                	mov    %esp,%ebp
+801005e3:	57                   	push   %edi
+801005e4:	56                   	push   %esi
+801005e5:	53                   	push   %ebx
+801005e6:	83 ec 2c             	sub    $0x2c,%esp
+801005e9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  if(sign && (sign = xx < 0))
+801005ec:	85 c9                	test   %ecx,%ecx
+801005ee:	74 04                	je     801005f4 <printint+0x14>
+801005f0:	85 c0                	test   %eax,%eax
+801005f2:	78 6d                	js     80100661 <printint+0x81>
+    x = xx;
+801005f4:	89 c1                	mov    %eax,%ecx
+801005f6:	31 f6                	xor    %esi,%esi
+  i = 0;
+801005f8:	89 75 cc             	mov    %esi,-0x34(%ebp)
+801005fb:	31 db                	xor    %ebx,%ebx
+801005fd:	8d 7d d7             	lea    -0x29(%ebp),%edi
+    buf[i++] = digits[x % base];
+80100600:	89 c8                	mov    %ecx,%eax
+80100602:	31 d2                	xor    %edx,%edx
+80100604:	89 ce                	mov    %ecx,%esi
+80100606:	f7 75 d4             	divl   -0x2c(%ebp)
+80100609:	0f b6 92 88 85 10 80 	movzbl -0x7fef7a78(%edx),%edx
+80100610:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80100613:	89 d8                	mov    %ebx,%eax
+80100615:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+80100618:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+8010061b:	89 75 d0             	mov    %esi,-0x30(%ebp)
+    buf[i++] = digits[x % base];
+8010061e:	88 14 1f             	mov    %dl,(%edi,%ebx,1)
+  }while((x /= base) != 0);
+80100621:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+80100624:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+80100627:	73 d7                	jae    80100600 <printint+0x20>
+80100629:	8b 75 cc             	mov    -0x34(%ebp),%esi
+  if(sign)
+8010062c:	85 f6                	test   %esi,%esi
+8010062e:	74 0c                	je     8010063c <printint+0x5c>
+    buf[i++] = '-';
+80100630:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+80100635:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+80100637:	ba 2d 00 00 00       	mov    $0x2d,%edx
+  while(--i >= 0)
+8010063c:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+80100640:	0f be c2             	movsbl %dl,%eax
+  if(panicked){
+80100643:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+80100649:	85 d2                	test   %edx,%edx
+8010064b:	74 03                	je     80100650 <printint+0x70>
+  asm volatile("cli");
+8010064d:	fa                   	cli    
+    for(;;)
+8010064e:	eb fe                	jmp    8010064e <printint+0x6e>
+80100650:	e8 bb fd ff ff       	call   80100410 <consputc.part.0>
+  while(--i >= 0)
+80100655:	39 fb                	cmp    %edi,%ebx
+80100657:	74 10                	je     80100669 <printint+0x89>
+80100659:	0f be 03             	movsbl (%ebx),%eax
+8010065c:	83 eb 01             	sub    $0x1,%ebx
+8010065f:	eb e2                	jmp    80100643 <printint+0x63>
+    x = -xx;
+80100661:	f7 d8                	neg    %eax
+80100663:	89 ce                	mov    %ecx,%esi
+80100665:	89 c1                	mov    %eax,%ecx
+80100667:	eb 8f                	jmp    801005f8 <printint+0x18>
+}
+80100669:	83 c4 2c             	add    $0x2c,%esp
+8010066c:	5b                   	pop    %ebx
+8010066d:	5e                   	pop    %esi
+8010066e:	5f                   	pop    %edi
+8010066f:	5d                   	pop    %ebp
+80100670:	c3                   	ret    
+80100671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010067f:	90                   	nop
+
+80100680 <consolewrite>:
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100680:	f3 0f 1e fb          	endbr32 
+80100684:	55                   	push   %ebp
+80100685:	89 e5                	mov    %esp,%ebp
+80100687:	57                   	push   %edi
+80100688:	56                   	push   %esi
+80100689:	53                   	push   %ebx
+8010068a:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  iunlock(ip);
+8010068d:	ff 75 08             	pushl  0x8(%ebp)
+{
+80100690:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  iunlock(ip);
+80100693:	e8 98 1b 00 00       	call   80102230 <iunlock>
+  acquire(&cons.lock);
+80100698:	c7 04 24 20 c5 10 80 	movl   $0x8010c520,(%esp)
+8010069f:	e8 2c 51 00 00       	call   801057d0 <acquire>
+  for(i = 0; i < n; i++)
+801006a4:	83 c4 10             	add    $0x10,%esp
+801006a7:	85 db                	test   %ebx,%ebx
+801006a9:	7e 24                	jle    801006cf <consolewrite+0x4f>
+801006ab:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801006ae:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
+  if(panicked){
+801006b1:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+801006b7:	85 d2                	test   %edx,%edx
+801006b9:	74 05                	je     801006c0 <consolewrite+0x40>
+801006bb:	fa                   	cli    
+    for(;;)
+801006bc:	eb fe                	jmp    801006bc <consolewrite+0x3c>
+801006be:	66 90                	xchg   %ax,%ax
+    consputc(buf[i] & 0xff);
+801006c0:	0f b6 07             	movzbl (%edi),%eax
+801006c3:	83 c7 01             	add    $0x1,%edi
+801006c6:	e8 45 fd ff ff       	call   80100410 <consputc.part.0>
+  for(i = 0; i < n; i++)
+801006cb:	39 fe                	cmp    %edi,%esi
+801006cd:	75 e2                	jne    801006b1 <consolewrite+0x31>
+  release(&cons.lock);
+801006cf:	83 ec 0c             	sub    $0xc,%esp
+801006d2:	68 20 c5 10 80       	push   $0x8010c520
+801006d7:	e8 b4 51 00 00       	call   80105890 <release>
+  ilock(ip);
+801006dc:	58                   	pop    %eax
+801006dd:	ff 75 08             	pushl  0x8(%ebp)
+801006e0:	e8 6b 1a 00 00       	call   80102150 <ilock>
+
+  return n;
+}
+801006e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801006e8:	89 d8                	mov    %ebx,%eax
+801006ea:	5b                   	pop    %ebx
+801006eb:	5e                   	pop    %esi
+801006ec:	5f                   	pop    %edi
+801006ed:	5d                   	pop    %ebp
+801006ee:	c3                   	ret    
+801006ef:	90                   	nop
+
+801006f0 <cprintf>:
+{
+801006f0:	f3 0f 1e fb          	endbr32 
+801006f4:	55                   	push   %ebp
+801006f5:	89 e5                	mov    %esp,%ebp
+801006f7:	57                   	push   %edi
+801006f8:	56                   	push   %esi
+801006f9:	53                   	push   %ebx
+801006fa:	83 ec 1c             	sub    $0x1c,%esp
+  locking = cons.locking;
+801006fd:	a1 54 c5 10 80       	mov    0x8010c554,%eax
+80100702:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(locking)
+80100705:	85 c0                	test   %eax,%eax
+80100707:	0f 85 e8 00 00 00    	jne    801007f5 <cprintf+0x105>
+  if (fmt == 0)
+8010070d:	8b 45 08             	mov    0x8(%ebp),%eax
+80100710:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100713:	85 c0                	test   %eax,%eax
+80100715:	0f 84 5a 01 00 00    	je     80100875 <cprintf+0x185>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010071b:	0f b6 00             	movzbl (%eax),%eax
+8010071e:	85 c0                	test   %eax,%eax
+80100720:	74 36                	je     80100758 <cprintf+0x68>
+  argp = (uint*)(void*)(&fmt + 1);
+80100722:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100725:	31 f6                	xor    %esi,%esi
+    if(c != '%'){
+80100727:	83 f8 25             	cmp    $0x25,%eax
+8010072a:	74 44                	je     80100770 <cprintf+0x80>
+  if(panicked){
+8010072c:	8b 0d 58 c5 10 80    	mov    0x8010c558,%ecx
+80100732:	85 c9                	test   %ecx,%ecx
+80100734:	74 0f                	je     80100745 <cprintf+0x55>
+80100736:	fa                   	cli    
+    for(;;)
+80100737:	eb fe                	jmp    80100737 <cprintf+0x47>
+80100739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100740:	b8 25 00 00 00       	mov    $0x25,%eax
+80100745:	e8 c6 fc ff ff       	call   80100410 <consputc.part.0>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010074a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010074d:	83 c6 01             	add    $0x1,%esi
+80100750:	0f b6 04 30          	movzbl (%eax,%esi,1),%eax
+80100754:	85 c0                	test   %eax,%eax
+80100756:	75 cf                	jne    80100727 <cprintf+0x37>
+  if(locking)
+80100758:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010075b:	85 c0                	test   %eax,%eax
+8010075d:	0f 85 fd 00 00 00    	jne    80100860 <cprintf+0x170>
+}
+80100763:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100766:	5b                   	pop    %ebx
+80100767:	5e                   	pop    %esi
+80100768:	5f                   	pop    %edi
+80100769:	5d                   	pop    %ebp
+8010076a:	c3                   	ret    
+8010076b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010076f:	90                   	nop
+    c = fmt[++i] & 0xff;
+80100770:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100773:	83 c6 01             	add    $0x1,%esi
+80100776:	0f b6 3c 30          	movzbl (%eax,%esi,1),%edi
+    if(c == 0)
+8010077a:	85 ff                	test   %edi,%edi
+8010077c:	74 da                	je     80100758 <cprintf+0x68>
+    switch(c){
+8010077e:	83 ff 70             	cmp    $0x70,%edi
+80100781:	74 5a                	je     801007dd <cprintf+0xed>
+80100783:	7f 2a                	jg     801007af <cprintf+0xbf>
+80100785:	83 ff 25             	cmp    $0x25,%edi
+80100788:	0f 84 92 00 00 00    	je     80100820 <cprintf+0x130>
+8010078e:	83 ff 64             	cmp    $0x64,%edi
+80100791:	0f 85 a1 00 00 00    	jne    80100838 <cprintf+0x148>
+      printint(*argp++, 10, 1);
+80100797:	8b 03                	mov    (%ebx),%eax
+80100799:	8d 7b 04             	lea    0x4(%ebx),%edi
+8010079c:	b9 01 00 00 00       	mov    $0x1,%ecx
+801007a1:	ba 0a 00 00 00       	mov    $0xa,%edx
+801007a6:	89 fb                	mov    %edi,%ebx
+801007a8:	e8 33 fe ff ff       	call   801005e0 <printint>
+      break;
+801007ad:	eb 9b                	jmp    8010074a <cprintf+0x5a>
+    switch(c){
+801007af:	83 ff 73             	cmp    $0x73,%edi
+801007b2:	75 24                	jne    801007d8 <cprintf+0xe8>
+      if((s = (char*)*argp++) == 0)
+801007b4:	8d 7b 04             	lea    0x4(%ebx),%edi
+801007b7:	8b 1b                	mov    (%ebx),%ebx
+801007b9:	85 db                	test   %ebx,%ebx
+801007bb:	75 55                	jne    80100812 <cprintf+0x122>
+        s = "(null)";
+801007bd:	bb 38 85 10 80       	mov    $0x80108538,%ebx
+      for(; *s; s++)
+801007c2:	b8 28 00 00 00       	mov    $0x28,%eax
+  if(panicked){
+801007c7:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+801007cd:	85 d2                	test   %edx,%edx
+801007cf:	74 39                	je     8010080a <cprintf+0x11a>
+801007d1:	fa                   	cli    
+    for(;;)
+801007d2:	eb fe                	jmp    801007d2 <cprintf+0xe2>
+801007d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    switch(c){
+801007d8:	83 ff 78             	cmp    $0x78,%edi
+801007db:	75 5b                	jne    80100838 <cprintf+0x148>
+      printint(*argp++, 16, 0);
+801007dd:	8b 03                	mov    (%ebx),%eax
+801007df:	8d 7b 04             	lea    0x4(%ebx),%edi
+801007e2:	31 c9                	xor    %ecx,%ecx
+801007e4:	ba 10 00 00 00       	mov    $0x10,%edx
+801007e9:	89 fb                	mov    %edi,%ebx
+801007eb:	e8 f0 fd ff ff       	call   801005e0 <printint>
+      break;
+801007f0:	e9 55 ff ff ff       	jmp    8010074a <cprintf+0x5a>
+    acquire(&cons.lock);
+801007f5:	83 ec 0c             	sub    $0xc,%esp
+801007f8:	68 20 c5 10 80       	push   $0x8010c520
+801007fd:	e8 ce 4f 00 00       	call   801057d0 <acquire>
+80100802:	83 c4 10             	add    $0x10,%esp
+80100805:	e9 03 ff ff ff       	jmp    8010070d <cprintf+0x1d>
+8010080a:	e8 01 fc ff ff       	call   80100410 <consputc.part.0>
+      for(; *s; s++)
+8010080f:	83 c3 01             	add    $0x1,%ebx
+80100812:	0f be 03             	movsbl (%ebx),%eax
+80100815:	84 c0                	test   %al,%al
+80100817:	75 ae                	jne    801007c7 <cprintf+0xd7>
+      if((s = (char*)*argp++) == 0)
+80100819:	89 fb                	mov    %edi,%ebx
+8010081b:	e9 2a ff ff ff       	jmp    8010074a <cprintf+0x5a>
+  if(panicked){
+80100820:	8b 3d 58 c5 10 80    	mov    0x8010c558,%edi
+80100826:	85 ff                	test   %edi,%edi
+80100828:	0f 84 12 ff ff ff    	je     80100740 <cprintf+0x50>
+8010082e:	fa                   	cli    
+    for(;;)
+8010082f:	eb fe                	jmp    8010082f <cprintf+0x13f>
+80100831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(panicked){
+80100838:	8b 0d 58 c5 10 80    	mov    0x8010c558,%ecx
+8010083e:	85 c9                	test   %ecx,%ecx
+80100840:	74 06                	je     80100848 <cprintf+0x158>
+80100842:	fa                   	cli    
+    for(;;)
+80100843:	eb fe                	jmp    80100843 <cprintf+0x153>
+80100845:	8d 76 00             	lea    0x0(%esi),%esi
+80100848:	b8 25 00 00 00       	mov    $0x25,%eax
+8010084d:	e8 be fb ff ff       	call   80100410 <consputc.part.0>
+  if(panicked){
+80100852:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+80100858:	85 d2                	test   %edx,%edx
+8010085a:	74 2c                	je     80100888 <cprintf+0x198>
+8010085c:	fa                   	cli    
+    for(;;)
+8010085d:	eb fe                	jmp    8010085d <cprintf+0x16d>
+8010085f:	90                   	nop
+    release(&cons.lock);
+80100860:	83 ec 0c             	sub    $0xc,%esp
+80100863:	68 20 c5 10 80       	push   $0x8010c520
+80100868:	e8 23 50 00 00       	call   80105890 <release>
+8010086d:	83 c4 10             	add    $0x10,%esp
+}
+80100870:	e9 ee fe ff ff       	jmp    80100763 <cprintf+0x73>
+    panic("null fmt");
+80100875:	83 ec 0c             	sub    $0xc,%esp
+80100878:	68 3f 85 10 80       	push   $0x8010853f
+8010087d:	e8 0e fb ff ff       	call   80100390 <panic>
+80100882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100888:	89 f8                	mov    %edi,%eax
+8010088a:	e8 81 fb ff ff       	call   80100410 <consputc.part.0>
+8010088f:	e9 b6 fe ff ff       	jmp    8010074a <cprintf+0x5a>
+80100894:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010089b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010089f:	90                   	nop
+
+801008a0 <copybuffToBeShifted>:
+void copybuffToBeShifted() {
+801008a0:	f3 0f 1e fb          	endbr32 
+801008a4:	55                   	push   %ebp
+  for (i = 0; i < n; i++)
+801008a5:	8b 0d 2c 20 11 80    	mov    0x8011202c,%ecx
+void copybuffToBeShifted() {
+801008ab:	89 e5                	mov    %esp,%ebp
+801008ad:	53                   	push   %ebx
+  uint n = input.rightmost - input.e; // contents after edit have to be shifted when typed or backspaced.
+801008ae:	8b 1d 28 20 11 80    	mov    0x80112028,%ebx
+  for (i = 0; i < n; i++)
+801008b4:	29 d9                	sub    %ebx,%ecx
+801008b6:	74 22                	je     801008da <copybuffToBeShifted+0x3a>
+801008b8:	31 c0                	xor    %eax,%eax
+801008ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+801008c0:	8d 14 03             	lea    (%ebx,%eax,1),%edx
+  for (i = 0; i < n; i++)
+801008c3:	83 c0 01             	add    $0x1,%eax
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+801008c6:	83 e2 7f             	and    $0x7f,%edx
+801008c9:	0f b6 92 a0 1f 11 80 	movzbl -0x7feee060(%edx),%edx
+801008d0:	88 90 3f 29 11 80    	mov    %dl,-0x7feed6c1(%eax)
+  for (i = 0; i < n; i++)
+801008d6:	39 c1                	cmp    %eax,%ecx
+801008d8:	75 e6                	jne    801008c0 <copybuffToBeShifted+0x20>
+}
+801008da:	5b                   	pop    %ebx
+801008db:	5d                   	pop    %ebp
+801008dc:	c3                   	ret    
+801008dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801008e0 <shiftbufright>:
+void shiftbufright() {
+801008e0:	f3 0f 1e fb          	endbr32 
+801008e4:	55                   	push   %ebp
+801008e5:	89 e5                	mov    %esp,%ebp
+801008e7:	57                   	push   %edi
+801008e8:	56                   	push   %esi
+801008e9:	53                   	push   %ebx
+801008ea:	83 ec 0c             	sub    $0xc,%esp
+  uint n = input.rightmost - input.e;
+801008ed:	a1 28 20 11 80       	mov    0x80112028,%eax
+  for (i = 0; i < n; i++) {
+801008f2:	8b 3d 2c 20 11 80    	mov    0x8011202c,%edi
+801008f8:	29 c7                	sub    %eax,%edi
+801008fa:	74 79                	je     80100975 <shiftbufright+0x95>
+801008fc:	31 db                	xor    %ebx,%ebx
+    char c = buffToBeShifted[i];
+801008fe:	0f b6 93 40 29 11 80 	movzbl -0x7feed6c0(%ebx),%edx
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+80100905:	01 d8                	add    %ebx,%eax
+  if(panicked){
+80100907:	8b 35 58 c5 10 80    	mov    0x8010c558,%esi
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+8010090d:	83 e0 7f             	and    $0x7f,%eax
+80100910:	88 90 a0 1f 11 80    	mov    %dl,-0x7feee060(%eax)
+  if(panicked){
+80100916:	85 f6                	test   %esi,%esi
+80100918:	74 06                	je     80100920 <shiftbufright+0x40>
+8010091a:	fa                   	cli    
+    for(;;)
+8010091b:	eb fe                	jmp    8010091b <shiftbufright+0x3b>
+8010091d:	8d 76 00             	lea    0x0(%esi),%esi
+    consputc(c); // repaitning the screen.
+80100920:	0f be c2             	movsbl %dl,%eax
+80100923:	e8 e8 fa ff ff       	call   80100410 <consputc.part.0>
+  for (i = 0; i < n; i++) {
+80100928:	8d 53 01             	lea    0x1(%ebx),%edx
+8010092b:	39 d7                	cmp    %edx,%edi
+8010092d:	74 09                	je     80100938 <shiftbufright+0x58>
+8010092f:	a1 28 20 11 80       	mov    0x80112028,%eax
+80100934:	89 d3                	mov    %edx,%ebx
+80100936:	eb c6                	jmp    801008fe <shiftbufright+0x1e>
+  memset(buffToBeShifted, '\0', INPUT_BUF);
+80100938:	83 ec 04             	sub    $0x4,%esp
+8010093b:	68 80 00 00 00       	push   $0x80
+80100940:	6a 00                	push   $0x0
+80100942:	68 40 29 11 80       	push   $0x80112940
+80100947:	e8 94 4f 00 00       	call   801058e0 <memset>
+8010094c:	83 c4 10             	add    $0x10,%esp
+  if(panicked){
+8010094f:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+80100954:	85 c0                	test   %eax,%eax
+80100956:	74 08                	je     80100960 <shiftbufright+0x80>
+80100958:	fa                   	cli    
+    for(;;)
+80100959:	eb fe                	jmp    80100959 <shiftbufright+0x79>
+8010095b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010095f:	90                   	nop
+80100960:	b8 e4 00 00 00       	mov    $0xe4,%eax
+80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
+  for (i = 0; i < n; i++) {
+8010096a:	8d 46 01             	lea    0x1(%esi),%eax
+8010096d:	39 f3                	cmp    %esi,%ebx
+8010096f:	74 1b                	je     8010098c <shiftbufright+0xac>
+80100971:	89 c6                	mov    %eax,%esi
+80100973:	eb da                	jmp    8010094f <shiftbufright+0x6f>
+  memset(buffToBeShifted, '\0', INPUT_BUF);
+80100975:	83 ec 04             	sub    $0x4,%esp
+80100978:	68 80 00 00 00       	push   $0x80
+8010097d:	6a 00                	push   $0x0
+8010097f:	68 40 29 11 80       	push   $0x80112940
+80100984:	e8 57 4f 00 00       	call   801058e0 <memset>
+80100989:	83 c4 10             	add    $0x10,%esp
+}
+8010098c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010098f:	5b                   	pop    %ebx
+80100990:	5e                   	pop    %esi
+80100991:	5f                   	pop    %edi
+80100992:	5d                   	pop    %ebp
+80100993:	c3                   	ret    
+80100994:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010099b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010099f:	90                   	nop
+
+801009a0 <shiftbufleft>:
+void shiftbufleft() {
+801009a0:	f3 0f 1e fb          	endbr32 
+  if(panicked){
+801009a4:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+801009a9:	85 c0                	test   %eax,%eax
+801009ab:	74 03                	je     801009b0 <shiftbufleft+0x10>
+801009ad:	fa                   	cli    
+    for(;;)
+801009ae:	eb fe                	jmp    801009ae <shiftbufleft+0xe>
+void shiftbufleft() {
+801009b0:	55                   	push   %ebp
+801009b1:	b8 e4 00 00 00       	mov    $0xe4,%eax
+801009b6:	89 e5                	mov    %esp,%ebp
+801009b8:	56                   	push   %esi
+801009b9:	53                   	push   %ebx
+  uint n = input.rightmost - input.e;
+801009ba:	8b 1d 2c 20 11 80    	mov    0x8011202c,%ebx
+801009c0:	2b 1d 28 20 11 80    	sub    0x80112028,%ebx
+801009c6:	e8 45 fa ff ff       	call   80100410 <consputc.part.0>
+  input.e--;
+801009cb:	a1 28 20 11 80       	mov    0x80112028,%eax
+801009d0:	83 e8 01             	sub    $0x1,%eax
+801009d3:	a3 28 20 11 80       	mov    %eax,0x80112028
+  for (i = 0; i < n; i++) {
+801009d8:	85 db                	test   %ebx,%ebx
+801009da:	74 42                	je     80100a1e <shiftbufleft+0x7e>
+801009dc:	31 f6                	xor    %esi,%esi
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+801009de:	01 f0                	add    %esi,%eax
+  if(panicked){
+801009e0:	8b 0d 58 c5 10 80    	mov    0x8010c558,%ecx
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+801009e6:	8d 50 01             	lea    0x1(%eax),%edx
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+801009e9:	83 e0 7f             	and    $0x7f,%eax
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+801009ec:	83 e2 7f             	and    $0x7f,%edx
+801009ef:	0f b6 92 a0 1f 11 80 	movzbl -0x7feee060(%edx),%edx
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+801009f6:	88 90 a0 1f 11 80    	mov    %dl,-0x7feee060(%eax)
+  if(panicked){
+801009fc:	85 c9                	test   %ecx,%ecx
+801009fe:	74 08                	je     80100a08 <shiftbufleft+0x68>
+80100a00:	fa                   	cli    
+    for(;;)
+80100a01:	eb fe                	jmp    80100a01 <shiftbufleft+0x61>
+80100a03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100a07:	90                   	nop
+    consputc(c); // repainting the screen.
+80100a08:	0f be c2             	movsbl %dl,%eax
+  for (i = 0; i < n; i++) {
+80100a0b:	83 c6 01             	add    $0x1,%esi
+80100a0e:	e8 fd f9 ff ff       	call   80100410 <consputc.part.0>
+80100a13:	39 f3                	cmp    %esi,%ebx
+80100a15:	74 07                	je     80100a1e <shiftbufleft+0x7e>
+80100a17:	a1 28 20 11 80       	mov    0x80112028,%eax
+80100a1c:	eb c0                	jmp    801009de <shiftbufleft+0x3e>
+  if(panicked){
+80100a1e:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+  input.rightmost--;
+80100a24:	83 2d 2c 20 11 80 01 	subl   $0x1,0x8011202c
+  if(panicked){
+80100a2b:	85 d2                	test   %edx,%edx
+80100a2d:	75 21                	jne    80100a50 <shiftbufleft+0xb0>
+80100a2f:	b8 20 00 00 00       	mov    $0x20,%eax
+  for (i = 0; i <= n; i++) {
+80100a34:	31 f6                	xor    %esi,%esi
+80100a36:	e8 d5 f9 ff ff       	call   80100410 <consputc.part.0>
+  if(panicked){
+80100a3b:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+80100a40:	85 c0                	test   %eax,%eax
+80100a42:	74 14                	je     80100a58 <shiftbufleft+0xb8>
+80100a44:	fa                   	cli    
+    for(;;)
+80100a45:	eb fe                	jmp    80100a45 <shiftbufleft+0xa5>
+80100a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100a4e:	66 90                	xchg   %ax,%ax
+80100a50:	fa                   	cli    
+80100a51:	eb fe                	jmp    80100a51 <shiftbufleft+0xb1>
+80100a53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100a57:	90                   	nop
+80100a58:	b8 e4 00 00 00       	mov    $0xe4,%eax
+  for (i = 0; i <= n; i++) {
+80100a5d:	83 c6 01             	add    $0x1,%esi
+80100a60:	e8 ab f9 ff ff       	call   80100410 <consputc.part.0>
+80100a65:	39 f3                	cmp    %esi,%ebx
+80100a67:	73 d2                	jae    80100a3b <shiftbufleft+0x9b>
+}
+80100a69:	5b                   	pop    %ebx
+80100a6a:	5e                   	pop    %esi
+80100a6b:	5d                   	pop    %ebp
+80100a6c:	c3                   	ret    
+80100a6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100a70 <earaseCurrentLineOnScreen>:
+earaseCurrentLineOnScreen(void){
+80100a70:	f3 0f 1e fb          	endbr32 
+80100a74:	55                   	push   %ebp
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+80100a75:	a1 28 20 11 80       	mov    0x80112028,%eax
+earaseCurrentLineOnScreen(void){
+80100a7a:	89 e5                	mov    %esp,%ebp
+80100a7c:	56                   	push   %esi
+    uint numToEarase = input.rightmost - input.r;
+80100a7d:	8b 35 2c 20 11 80    	mov    0x8011202c,%esi
+earaseCurrentLineOnScreen(void){
+80100a83:	53                   	push   %ebx
+    uint numToEarase = input.rightmost - input.r;
+80100a84:	8b 1d 20 20 11 80    	mov    0x80112020,%ebx
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+80100a8a:	39 c6                	cmp    %eax,%esi
+80100a8c:	76 36                	jbe    80100ac4 <earaseCurrentLineOnScreen+0x54>
+  if(panicked){
+80100a8e:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+80100a94:	85 d2                	test   %edx,%edx
+80100a96:	74 08                	je     80100aa0 <earaseCurrentLineOnScreen+0x30>
+80100a98:	fa                   	cli    
+    for(;;)
+80100a99:	eb fe                	jmp    80100a99 <earaseCurrentLineOnScreen+0x29>
+80100a9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100a9f:	90                   	nop
+          consputc(input.buf[input.e % INPUT_BUF]);
+80100aa0:	83 e0 7f             	and    $0x7f,%eax
+80100aa3:	0f be 80 a0 1f 11 80 	movsbl -0x7feee060(%eax),%eax
+80100aaa:	e8 61 f9 ff ff       	call   80100410 <consputc.part.0>
+          input.e++;
+80100aaf:	a1 28 20 11 80       	mov    0x80112028,%eax
+80100ab4:	83 c0 01             	add    $0x1,%eax
+80100ab7:	a3 28 20 11 80       	mov    %eax,0x80112028
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+80100abc:	3b 05 2c 20 11 80    	cmp    0x8011202c,%eax
+80100ac2:	72 ca                	jb     80100a8e <earaseCurrentLineOnScreen+0x1e>
+    for (i = 0; i < numToEarase; i++) {
+80100ac4:	29 de                	sub    %ebx,%esi
+80100ac6:	74 29                	je     80100af1 <earaseCurrentLineOnScreen+0x81>
+80100ac8:	31 db                	xor    %ebx,%ebx
+  if(panicked){
+80100aca:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+80100acf:	85 c0                	test   %eax,%eax
+80100ad1:	74 0d                	je     80100ae0 <earaseCurrentLineOnScreen+0x70>
+80100ad3:	fa                   	cli    
+    for(;;)
+80100ad4:	eb fe                	jmp    80100ad4 <earaseCurrentLineOnScreen+0x64>
+80100ad6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100add:	8d 76 00             	lea    0x0(%esi),%esi
+80100ae0:	b8 00 01 00 00       	mov    $0x100,%eax
+    for (i = 0; i < numToEarase; i++) {
+80100ae5:	83 c3 01             	add    $0x1,%ebx
+80100ae8:	e8 23 f9 ff ff       	call   80100410 <consputc.part.0>
+80100aed:	39 de                	cmp    %ebx,%esi
+80100aef:	75 d9                	jne    80100aca <earaseCurrentLineOnScreen+0x5a>
+}
+80100af1:	5b                   	pop    %ebx
+80100af2:	5e                   	pop    %esi
+80100af3:	5d                   	pop    %ebp
+80100af4:	c3                   	ret    
+80100af5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100b00 <copybuffToBeShiftedToOldBuf>:
+copybuffToBeShiftedToOldBuf(void){
+80100b00:	f3 0f 1e fb          	endbr32 
+80100b04:	55                   	push   %ebp
+    lengthOfOldBuf = input.rightmost - input.r;
+80100b05:	8b 0d 2c 20 11 80    	mov    0x8011202c,%ecx
+copybuffToBeShiftedToOldBuf(void){
+80100b0b:	89 e5                	mov    %esp,%ebp
+80100b0d:	53                   	push   %ebx
+    lengthOfOldBuf = input.rightmost - input.r;
+80100b0e:	8b 1d 20 20 11 80    	mov    0x80112020,%ebx
+80100b14:	29 d9                	sub    %ebx,%ecx
+80100b16:	89 0d c0 20 11 80    	mov    %ecx,0x801120c0
+    for (i = 0; i < lengthOfOldBuf; i++) {
+80100b1c:	74 1c                	je     80100b3a <copybuffToBeShiftedToOldBuf+0x3a>
+80100b1e:	31 c0                	xor    %eax,%eax
+        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
+80100b20:	8d 14 03             	lea    (%ebx,%eax,1),%edx
+    for (i = 0; i < lengthOfOldBuf; i++) {
+80100b23:	83 c0 01             	add    $0x1,%eax
+        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
+80100b26:	83 e2 7f             	and    $0x7f,%edx
+80100b29:	0f b6 92 a0 1f 11 80 	movzbl -0x7feee060(%edx),%edx
+80100b30:	88 90 1f 1f 11 80    	mov    %dl,-0x7feee0e1(%eax)
+    for (i = 0; i < lengthOfOldBuf; i++) {
+80100b36:	39 c1                	cmp    %eax,%ecx
+80100b38:	75 e6                	jne    80100b20 <copybuffToBeShiftedToOldBuf+0x20>
+}
+80100b3a:	5b                   	pop    %ebx
+80100b3b:	5d                   	pop    %ebp
+80100b3c:	c3                   	ret    
+80100b3d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100b40 <earaseContentOnInputBuf>:
+earaseContentOnInputBuf(){
+80100b40:	f3 0f 1e fb          	endbr32 
+  input.rightmost = input.r;
+80100b44:	a1 20 20 11 80       	mov    0x80112020,%eax
+80100b49:	a3 2c 20 11 80       	mov    %eax,0x8011202c
+  input.e = input.r;
+80100b4e:	a3 28 20 11 80       	mov    %eax,0x80112028
+}
+80100b53:	c3                   	ret    
+80100b54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100b5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100b5f:	90                   	nop
+
+80100b60 <copyBufferToScreen>:
+copyBufferToScreen(char * bufToPrintOnScreen, uint length){
+80100b60:	f3 0f 1e fb          	endbr32 
+80100b64:	55                   	push   %ebp
+80100b65:	89 e5                	mov    %esp,%ebp
+80100b67:	56                   	push   %esi
+80100b68:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100b6b:	53                   	push   %ebx
+  for (i = 0; i < length; i++) {
+80100b6c:	85 c0                	test   %eax,%eax
+80100b6e:	74 27                	je     80100b97 <copyBufferToScreen+0x37>
+80100b70:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100b73:	8d 34 03             	lea    (%ebx,%eax,1),%esi
+  if(panicked){
+80100b76:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+80100b7b:	85 c0                	test   %eax,%eax
+80100b7d:	74 09                	je     80100b88 <copyBufferToScreen+0x28>
+80100b7f:	fa                   	cli    
+    for(;;)
+80100b80:	eb fe                	jmp    80100b80 <copyBufferToScreen+0x20>
+80100b82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    consputc(bufToPrintOnScreen[i]);
+80100b88:	0f be 03             	movsbl (%ebx),%eax
+80100b8b:	83 c3 01             	add    $0x1,%ebx
+80100b8e:	e8 7d f8 ff ff       	call   80100410 <consputc.part.0>
+  for (i = 0; i < length; i++) {
+80100b93:	39 f3                	cmp    %esi,%ebx
+80100b95:	75 df                	jne    80100b76 <copyBufferToScreen+0x16>
+}
+80100b97:	5b                   	pop    %ebx
+80100b98:	5e                   	pop    %esi
+80100b99:	5d                   	pop    %ebp
+80100b9a:	c3                   	ret    
+80100b9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100b9f:	90                   	nop
+
+80100ba0 <copyBufferToInputBuf>:
+copyBufferToInputBuf(char * bufToSaveInInput, uint length){
+80100ba0:	f3 0f 1e fb          	endbr32 
+80100ba4:	55                   	push   %ebp
+80100ba5:	8b 15 20 20 11 80    	mov    0x80112020,%edx
+80100bab:	89 d0                	mov    %edx,%eax
+80100bad:	89 e5                	mov    %esp,%ebp
+80100baf:	56                   	push   %esi
+80100bb0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100bb3:	8b 75 08             	mov    0x8(%ebp),%esi
+copyBufferToInputBuf(char * bufToSaveInInput, uint length){
+80100bb6:	53                   	push   %ebx
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100bb7:	29 d6                	sub    %edx,%esi
+80100bb9:	8d 1c 11             	lea    (%ecx,%edx,1),%ebx
+  for (i = 0; i < length; i++) {
+80100bbc:	85 c9                	test   %ecx,%ecx
+80100bbe:	74 30                	je     80100bf0 <copyBufferToInputBuf+0x50>
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100bc0:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80100bc4:	89 c2                	mov    %eax,%edx
+80100bc6:	83 c0 01             	add    $0x1,%eax
+80100bc9:	83 e2 7f             	and    $0x7f,%edx
+80100bcc:	88 8a a0 1f 11 80    	mov    %cl,-0x7feee060(%edx)
+  for (i = 0; i < length; i++) {
+80100bd2:	39 d8                	cmp    %ebx,%eax
+80100bd4:	75 ea                	jne    80100bc0 <copyBufferToInputBuf+0x20>
+  input.e = input.r+length;
+80100bd6:	89 1d 28 20 11 80    	mov    %ebx,0x80112028
+  input.rightmost = input.e;
+80100bdc:	89 1d 2c 20 11 80    	mov    %ebx,0x8011202c
+}
+80100be2:	5b                   	pop    %ebx
+80100be3:	5e                   	pop    %esi
+80100be4:	5d                   	pop    %ebp
+80100be5:	c3                   	ret    
+80100be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100bed:	8d 76 00             	lea    0x0(%esi),%esi
+80100bf0:	89 d3                	mov    %edx,%ebx
+80100bf2:	eb e2                	jmp    80100bd6 <copyBufferToInputBuf+0x36>
+80100bf4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100bff:	90                   	nop
+
+80100c00 <saveCMDinHistoryMem>:
+saveCMDinHistoryMem(){
+80100c00:	f3 0f 1e fb          	endbr32 
+  HistoryMem.TotalCMDsInMem++; // counting the total no.of commands executed till now.
+80100c04:	8b 0d 2c 20 11 80    	mov    0x8011202c,%ecx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c0a:	8b 15 20 29 11 80    	mov    0x80112920,%edx
+saveCMDinHistoryMem(){
+80100c10:	55                   	push   %ebp
+  uint l = input.rightmost-input.r -1;
+80100c11:	a1 20 20 11 80       	mov    0x80112020,%eax
+  HistoryMem.TotalCMDsInMem++; // counting the total no.of commands executed till now.
+80100c16:	83 05 24 29 11 80 01 	addl   $0x1,0x80112924
+  uint l = input.rightmost-input.r -1;
+80100c1d:	83 e9 01             	sub    $0x1,%ecx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c20:	83 ea 01             	sub    $0x1,%edx
+saveCMDinHistoryMem(){
+80100c23:	89 e5                	mov    %esp,%ebp
+80100c25:	53                   	push   %ebx
+  uint l = input.rightmost-input.r -1;
+80100c26:	89 cb                	mov    %ecx,%ebx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c28:	83 e2 0f             	and    $0xf,%edx
+  uint l = input.rightmost-input.r -1;
+80100c2b:	29 c3                	sub    %eax,%ebx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c2d:	89 15 20 29 11 80    	mov    %edx,0x80112920
+  HistoryMem.lengthsArr[HistoryMem.FinalCMdIndex] = l;
+80100c33:	89 1c 95 e0 28 11 80 	mov    %ebx,-0x7feed720(,%edx,4)
+  for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
+80100c3a:	85 db                	test   %ebx,%ebx
+80100c3c:	74 24                	je     80100c62 <saveCMDinHistoryMem+0x62>
+80100c3e:	c1 e2 07             	shl    $0x7,%edx
+80100c41:	29 c2                	sub    %eax,%edx
+80100c43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100c47:	90                   	nop
+    HistoryMem.CommandMemArr[HistoryMem.FinalCMdIndex][i] =  input.buf[(input.r+i)%INPUT_BUF];
+80100c48:	89 c3                	mov    %eax,%ebx
+80100c4a:	83 e3 7f             	and    $0x7f,%ebx
+80100c4d:	0f b6 9b a0 1f 11 80 	movzbl -0x7feee060(%ebx),%ebx
+80100c54:	88 9c 02 e0 20 11 80 	mov    %bl,-0x7feedf20(%edx,%eax,1)
+80100c5b:	83 c0 01             	add    $0x1,%eax
+  for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
+80100c5e:	39 c1                	cmp    %eax,%ecx
+80100c60:	75 e6                	jne    80100c48 <saveCMDinHistoryMem+0x48>
+}
+80100c62:	5b                   	pop    %ebx
+80100c63:	5d                   	pop    %ebp
+80100c64:	c3                   	ret    
+80100c65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100c6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100c70 <consoleintr>:
+{
+80100c70:	f3 0f 1e fb          	endbr32 
+80100c74:	55                   	push   %ebp
+80100c75:	89 e5                	mov    %esp,%ebp
+80100c77:	57                   	push   %edi
+80100c78:	56                   	push   %esi
+80100c79:	53                   	push   %ebx
+  int c, doprocdump = 0;
+80100c7a:	31 db                	xor    %ebx,%ebx
+{
+80100c7c:	83 ec 38             	sub    $0x38,%esp
+80100c7f:	8b 45 08             	mov    0x8(%ebp),%eax
+  acquire(&cons.lock);
+80100c82:	68 20 c5 10 80       	push   $0x8010c520
+{
+80100c87:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  acquire(&cons.lock);
+80100c8a:	e8 41 4b 00 00       	call   801057d0 <acquire>
+  while((c = getc()) >= 0){
+80100c8f:	83 c4 10             	add    $0x10,%esp
+80100c92:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80100c95:	ff d0                	call   *%eax
+80100c97:	89 c6                	mov    %eax,%esi
+80100c99:	85 c0                	test   %eax,%eax
+80100c9b:	0f 88 1c 05 00 00    	js     801011bd <consoleintr+0x54d>
+    switch(c){
+80100ca1:	83 fe 7f             	cmp    $0x7f,%esi
+80100ca4:	0f 84 cf 01 00 00    	je     80100e79 <consoleintr+0x209>
+80100caa:	0f 8e a0 00 00 00    	jle    80100d50 <consoleintr+0xe0>
+80100cb0:	81 fe e4 00 00 00    	cmp    $0xe4,%esi
+80100cb6:	0f 84 1c 02 00 00    	je     80100ed8 <consoleintr+0x268>
+80100cbc:	0f 8f ac 00 00 00    	jg     80100d6e <consoleintr+0xfe>
+80100cc2:	81 fe e2 00 00 00    	cmp    $0xe2,%esi
+80100cc8:	0f 84 3a 02 00 00    	je     80100f08 <consoleintr+0x298>
+80100cce:	81 fe e3 00 00 00    	cmp    $0xe3,%esi
+80100cd4:	0f 85 2a 01 00 00    	jne    80100e04 <consoleintr+0x194>
+        switch(HistoryMem.currentPosition){
+80100cda:	a1 28 29 11 80       	mov    0x80112928,%eax
+80100cdf:	83 f8 ff             	cmp    $0xffffffff,%eax
+80100ce2:	74 ae                	je     80100c92 <consoleintr+0x22>
+80100ce4:	85 c0                	test   %eax,%eax
+80100ce6:	0f 85 3c 04 00 00    	jne    80101128 <consoleintr+0x4b8>
+            earaseCurrentLineOnScreen();
+80100cec:	e8 7f fd ff ff       	call   80100a70 <earaseCurrentLineOnScreen>
+            copyBufferToInputBuf(oldBuf, lengthOfOldBuf);
+80100cf1:	8b 35 c0 20 11 80    	mov    0x801120c0,%esi
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100cf7:	a1 20 20 11 80       	mov    0x80112020,%eax
+  for (i = 0; i < length; i++) {
+80100cfc:	85 f6                	test   %esi,%esi
+80100cfe:	74 20                	je     80100d20 <consoleintr+0xb0>
+80100d00:	31 d2                	xor    %edx,%edx
+80100d02:	89 df                	mov    %ebx,%edi
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100d04:	0f b6 9a 20 1f 11 80 	movzbl -0x7feee0e0(%edx),%ebx
+80100d0b:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
+  for (i = 0; i < length; i++) {
+80100d0e:	83 c2 01             	add    $0x1,%edx
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100d11:	83 e1 7f             	and    $0x7f,%ecx
+80100d14:	88 99 a0 1f 11 80    	mov    %bl,-0x7feee060(%ecx)
+  for (i = 0; i < length; i++) {
+80100d1a:	39 d6                	cmp    %edx,%esi
+80100d1c:	75 e6                	jne    80100d04 <consoleintr+0x94>
+80100d1e:	89 fb                	mov    %edi,%ebx
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+80100d20:	83 ec 08             	sub    $0x8,%esp
+  input.e = input.r+length;
+80100d23:	01 f0                	add    %esi,%eax
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+80100d25:	56                   	push   %esi
+80100d26:	68 20 1f 11 80       	push   $0x80111f20
+  input.e = input.r+length;
+80100d2b:	a3 28 20 11 80       	mov    %eax,0x80112028
+  input.rightmost = input.e;
+80100d30:	a3 2c 20 11 80       	mov    %eax,0x8011202c
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+80100d35:	e8 26 fe ff ff       	call   80100b60 <copyBufferToScreen>
+            HistoryMem.currentPosition--; // decreasing out current position.
+80100d3a:	83 2d 28 29 11 80 01 	subl   $0x1,0x80112928
+            break;
+80100d41:	83 c4 10             	add    $0x10,%esp
+80100d44:	e9 49 ff ff ff       	jmp    80100c92 <consoleintr+0x22>
+80100d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    switch(c){
+80100d50:	8d 46 f8             	lea    -0x8(%esi),%eax
+80100d53:	83 f8 0d             	cmp    $0xd,%eax
+80100d56:	0f 87 a0 00 00 00    	ja     80100dfc <consoleintr+0x18c>
+80100d5c:	3e ff 24 85 50 85 10 	notrack jmp *-0x7fef7ab0(,%eax,4)
+80100d63:	80 
+80100d64:	bb 01 00 00 00       	mov    $0x1,%ebx
+80100d69:	e9 24 ff ff ff       	jmp    80100c92 <consoleintr+0x22>
+80100d6e:	81 fe e5 00 00 00    	cmp    $0xe5,%esi
+80100d74:	0f 85 8a 00 00 00    	jne    80100e04 <consoleintr+0x194>
+        if (input.e < input.rightmost) {
+80100d7a:	a1 28 20 11 80       	mov    0x80112028,%eax
+80100d7f:	3b 05 2c 20 11 80    	cmp    0x8011202c,%eax
+80100d85:	0f 83 19 01 00 00    	jae    80100ea4 <consoleintr+0x234>
+  if(panicked){
+80100d8b:	8b 3d 58 c5 10 80    	mov    0x8010c558,%edi
+80100d91:	85 ff                	test   %edi,%edi
+80100d93:	0f 84 26 03 00 00    	je     801010bf <consoleintr+0x44f>
+80100d99:	fa                   	cli    
+    for(;;)
+80100d9a:	eb fe                	jmp    80100d9a <consoleintr+0x12a>
+        if (input.rightmost > input.e) { // caret isn't at the end of the line
+80100d9c:	a1 2c 20 11 80       	mov    0x8011202c,%eax
+80100da1:	8b 15 28 20 11 80    	mov    0x80112028,%edx
+80100da7:	8b 35 20 20 11 80    	mov    0x80112020,%esi
+80100dad:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100db0:	39 d0                	cmp    %edx,%eax
+80100db2:	0f 87 13 02 00 00    	ja     80100fcb <consoleintr+0x35b>
+          while(input.e != input.r &&
+80100db8:	39 f2                	cmp    %esi,%edx
+80100dba:	0f 84 d2 fe ff ff    	je     80100c92 <consoleintr+0x22>
+                input.buf[(input.e - 1) % INPUT_BUF] != '\n'){ 
+80100dc0:	83 ea 01             	sub    $0x1,%edx
+80100dc3:	89 d0                	mov    %edx,%eax
+80100dc5:	83 e0 7f             	and    $0x7f,%eax
+          while(input.e != input.r &&
+80100dc8:	80 b8 a0 1f 11 80 0a 	cmpb   $0xa,-0x7feee060(%eax)
+80100dcf:	0f 84 bd fe ff ff    	je     80100c92 <consoleintr+0x22>
+  if(panicked){
+80100dd5:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+            input.rightmost--;
+80100dda:	83 2d 2c 20 11 80 01 	subl   $0x1,0x8011202c
+            input.e--;
+80100de1:	89 15 28 20 11 80    	mov    %edx,0x80112028
+  if(panicked){
+80100de7:	85 c0                	test   %eax,%eax
+80100de9:	0f 84 eb 02 00 00    	je     801010da <consoleintr+0x46a>
+80100def:	fa                   	cli    
+    for(;;)
+80100df0:	eb fe                	jmp    80100df0 <consoleintr+0x180>
+	  input.e = input.rightmost;
+80100df2:	a1 2c 20 11 80       	mov    0x8011202c,%eax
+80100df7:	a3 28 20 11 80       	mov    %eax,0x80112028
+	if(c != 0 && input.e-input.r < INPUT_BUF){
+80100dfc:	85 f6                	test   %esi,%esi
+80100dfe:	0f 84 8e fe ff ff    	je     80100c92 <consoleintr+0x22>
+80100e04:	8b 15 28 20 11 80    	mov    0x80112028,%edx
+80100e0a:	89 d0                	mov    %edx,%eax
+80100e0c:	2b 05 20 20 11 80    	sub    0x80112020,%eax
+80100e12:	83 f8 7f             	cmp    $0x7f,%eax
+80100e15:	0f 87 77 fe ff ff    	ja     80100c92 <consoleintr+0x22>
+	  c = (c == '\r') ? '\n' : c;
+80100e1b:	83 fe 0d             	cmp    $0xd,%esi
+80100e1e:	0f 84 5c 04 00 00    	je     80101280 <consoleintr+0x610>
+80100e24:	89 f0                	mov    %esi,%eax
+80100e26:	88 45 e0             	mov    %al,-0x20(%ebp)
+	  if (input.rightmost > input.e) { // caret isn't at the end of the line
+80100e29:	8b 0d 2c 20 11 80    	mov    0x8011202c,%ecx
+80100e2f:	89 d7                	mov    %edx,%edi
+80100e31:	8d 42 01             	lea    0x1(%edx),%eax
+80100e34:	83 e7 7f             	and    $0x7f,%edi
+80100e37:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80100e3a:	89 7d dc             	mov    %edi,-0x24(%ebp)
+80100e3d:	39 ca                	cmp    %ecx,%edx
+80100e3f:	0f 82 e1 03 00 00    	jb     80101226 <consoleintr+0x5b6>
+	    input.buf[input.e++ % INPUT_BUF] = c;
+80100e45:	0f b6 4d e0          	movzbl -0x20(%ebp),%ecx
+80100e49:	8b 7d dc             	mov    -0x24(%ebp),%edi
+	    input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+80100e4c:	89 c2                	mov    %eax,%edx
+	    input.buf[input.e++ % INPUT_BUF] = c;
+80100e4e:	a3 28 20 11 80       	mov    %eax,0x80112028
+80100e53:	88 8f a0 1f 11 80    	mov    %cl,-0x7feee060(%edi)
+	    input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+80100e59:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80100e5c:	29 ca                	sub    %ecx,%edx
+80100e5e:	83 fa 01             	cmp    $0x1,%edx
+80100e61:	0f 45 c1             	cmovne %ecx,%eax
+80100e64:	a3 2c 20 11 80       	mov    %eax,0x8011202c
+  if(panicked){
+80100e69:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+80100e6e:	85 c0                	test   %eax,%eax
+80100e70:	0f 84 67 03 00 00    	je     801011dd <consoleintr+0x56d>
+80100e76:	fa                   	cli    
+    for(;;)
+80100e77:	eb fe                	jmp    80100e77 <consoleintr+0x207>
+        if (input.rightmost != input.e && input.e != input.r) { // caret isn't at the end of the line
+80100e79:	a1 2c 20 11 80       	mov    0x8011202c,%eax
+80100e7e:	8b 0d 28 20 11 80    	mov    0x80112028,%ecx
+80100e84:	8b 15 20 20 11 80    	mov    0x80112020,%edx
+80100e8a:	39 c8                	cmp    %ecx,%eax
+80100e8c:	0f 84 6e 02 00 00    	je     80101100 <consoleintr+0x490>
+80100e92:	39 d1                	cmp    %edx,%ecx
+80100e94:	0f 84 f8 fd ff ff    	je     80100c92 <consoleintr+0x22>
+          shiftbufleft(); // shifting buffer to one position left.
+80100e9a:	e8 01 fb ff ff       	call   801009a0 <shiftbufleft>
+          break;
+80100e9f:	e9 ee fd ff ff       	jmp    80100c92 <consoleintr+0x22>
+        else if (input.e == input.rightmost){ // This line add the cursor at the end ogf the line. 
+80100ea4:	0f 85 e8 fd ff ff    	jne    80100c92 <consoleintr+0x22>
+  if(panicked){
+80100eaa:	8b 35 58 c5 10 80    	mov    0x8010c558,%esi
+80100eb0:	85 f6                	test   %esi,%esi
+80100eb2:	0f 85 d6 03 00 00    	jne    8010128e <consoleintr+0x61e>
+80100eb8:	b8 20 00 00 00       	mov    $0x20,%eax
+80100ebd:	e8 4e f5 ff ff       	call   80100410 <consputc.part.0>
+80100ec2:	8b 0d 58 c5 10 80    	mov    0x8010c558,%ecx
+80100ec8:	85 c9                	test   %ecx,%ecx
+80100eca:	0f 84 e0 01 00 00    	je     801010b0 <consoleintr+0x440>
+80100ed0:	fa                   	cli    
+    for(;;)
+80100ed1:	eb fe                	jmp    80100ed1 <consoleintr+0x261>
+80100ed3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100ed7:	90                   	nop
+        if (input.e != input.r) {
+80100ed8:	a1 28 20 11 80       	mov    0x80112028,%eax
+80100edd:	3b 05 20 20 11 80    	cmp    0x80112020,%eax
+80100ee3:	0f 84 a9 fd ff ff    	je     80100c92 <consoleintr+0x22>
+          input.e--;
+80100ee9:	83 e8 01             	sub    $0x1,%eax
+80100eec:	a3 28 20 11 80       	mov    %eax,0x80112028
+  if(panicked){
+80100ef1:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+80100ef6:	85 c0                	test   %eax,%eax
+80100ef8:	0f 84 b2 01 00 00    	je     801010b0 <consoleintr+0x440>
+80100efe:	fa                   	cli    
+    for(;;)
+80100eff:	eb fe                	jmp    80100eff <consoleintr+0x28f>
+80100f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+       if (HistoryMem.currentPosition < HistoryMem.TotalCMDsInMem-1 && HistoryMem.currentPosition < MAX_HISTORY-1 ){ 
+80100f08:	a1 24 29 11 80       	mov    0x80112924,%eax
+80100f0d:	8b 15 28 29 11 80    	mov    0x80112928,%edx
+80100f13:	83 e8 01             	sub    $0x1,%eax
+80100f16:	39 c2                	cmp    %eax,%edx
+80100f18:	0f 8d 74 fd ff ff    	jge    80100c92 <consoleintr+0x22>
+80100f1e:	83 fa 0e             	cmp    $0xe,%edx
+80100f21:	0f 8f 6b fd ff ff    	jg     80100c92 <consoleintr+0x22>
+          earaseCurrentLineOnScreen(); // eraseing the whole line 
+80100f27:	e8 44 fb ff ff       	call   80100a70 <earaseCurrentLineOnScreen>
+  input.rightmost = input.r;
+80100f2c:	a1 20 20 11 80       	mov    0x80112020,%eax
+80100f31:	a3 2c 20 11 80       	mov    %eax,0x8011202c
+  input.e = input.r;
+80100f36:	a3 28 20 11 80       	mov    %eax,0x80112028
+          if (HistoryMem.currentPosition == -1) // if it is the first toggle we make then the our written command  should be stored.
+80100f3b:	a1 28 29 11 80       	mov    0x80112928,%eax
+80100f40:	83 f8 ff             	cmp    $0xffffffff,%eax
+80100f43:	75 0a                	jne    80100f4f <consoleintr+0x2df>
+    lengthOfOldBuf = input.rightmost - input.r;
+80100f45:	c7 05 c0 20 11 80 00 	movl   $0x0,0x801120c0
+80100f4c:	00 00 00 
+          HistoryMem.currentPosition++; // toggling by increasing out current position.
+80100f4f:	83 c0 01             	add    $0x1,%eax
+          copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80100f52:	83 ec 08             	sub    $0x8,%esp
+          HistoryMem.currentPosition++; // toggling by increasing out current position.
+80100f55:	a3 28 29 11 80       	mov    %eax,0x80112928
+          tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) %MAX_HISTORY; // gives us the index of currentposition'th index from the recent command.
+80100f5a:	03 05 20 29 11 80    	add    0x80112920,%eax
+80100f60:	89 c6                	mov    %eax,%esi
+80100f62:	83 e6 0f             	and    $0xf,%esi
+          copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80100f65:	89 f2                	mov    %esi,%edx
+80100f67:	81 c6 00 02 00 00    	add    $0x200,%esi
+80100f6d:	c1 e2 07             	shl    $0x7,%edx
+80100f70:	ff 34 b5 e0 20 11 80 	pushl  -0x7feedf20(,%esi,4)
+80100f77:	8d ba e0 20 11 80    	lea    -0x7feedf20(%edx),%edi
+80100f7d:	57                   	push   %edi
+80100f7e:	e8 dd fb ff ff       	call   80100b60 <copyBufferToScreen>
+          copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80100f83:	8b 34 b5 e0 20 11 80 	mov    -0x7feedf20(,%esi,4),%esi
+  for (i = 0; i < length; i++) {
+80100f8a:	83 c4 10             	add    $0x10,%esp
+80100f8d:	85 f6                	test   %esi,%esi
+80100f8f:	0f 84 1a 03 00 00    	je     801012af <consoleintr+0x63f>
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100f95:	a1 20 20 11 80       	mov    0x80112020,%eax
+80100f9a:	29 c7                	sub    %eax,%edi
+80100f9c:	01 c6                	add    %eax,%esi
+80100f9e:	89 fa                	mov    %edi,%edx
+80100fa0:	89 df                	mov    %ebx,%edi
+80100fa2:	0f b6 1c 02          	movzbl (%edx,%eax,1),%ebx
+80100fa6:	89 c1                	mov    %eax,%ecx
+80100fa8:	83 c0 01             	add    $0x1,%eax
+80100fab:	83 e1 7f             	and    $0x7f,%ecx
+80100fae:	88 99 a0 1f 11 80    	mov    %bl,-0x7feee060(%ecx)
+  for (i = 0; i < length; i++) {
+80100fb4:	39 c6                	cmp    %eax,%esi
+80100fb6:	75 ea                	jne    80100fa2 <consoleintr+0x332>
+80100fb8:	89 fb                	mov    %edi,%ebx
+  input.e = input.r+length;
+80100fba:	89 35 28 20 11 80    	mov    %esi,0x80112028
+  input.rightmost = input.e;
+80100fc0:	89 35 2c 20 11 80    	mov    %esi,0x8011202c
+}
+80100fc6:	e9 c7 fc ff ff       	jmp    80100c92 <consoleintr+0x22>
+          for (i = 0; i < placestoshift; i++) {
+80100fcb:	89 d7                	mov    %edx,%edi
+80100fcd:	31 c9                	xor    %ecx,%ecx
+80100fcf:	29 f7                	sub    %esi,%edi
+80100fd1:	74 36                	je     80101009 <consoleintr+0x399>
+80100fd3:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80100fd6:	89 cb                	mov    %ecx,%ebx
+80100fd8:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80100fdb:	89 d6                	mov    %edx,%esi
+  if(panicked){
+80100fdd:	8b 0d 58 c5 10 80    	mov    0x8010c558,%ecx
+80100fe3:	85 c9                	test   %ecx,%ecx
+80100fe5:	74 09                	je     80100ff0 <consoleintr+0x380>
+80100fe7:	fa                   	cli    
+    for(;;)
+80100fe8:	eb fe                	jmp    80100fe8 <consoleintr+0x378>
+80100fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100ff0:	b8 e4 00 00 00       	mov    $0xe4,%eax
+          for (i = 0; i < placestoshift; i++) {
+80100ff5:	83 c3 01             	add    $0x1,%ebx
+80100ff8:	e8 13 f4 ff ff       	call   80100410 <consputc.part.0>
+80100ffd:	39 df                	cmp    %ebx,%edi
+80100fff:	75 dc                	jne    80100fdd <consoleintr+0x36d>
+80101001:	89 f2                	mov    %esi,%edx
+80101003:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101006:	8b 75 dc             	mov    -0x24(%ebp),%esi
+          memset(buf2, '\0', INPUT_BUF);
+80101009:	83 ec 04             	sub    $0x4,%esp
+          uint numtoshift = input.rightmost - input.e;
+8010100c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010100f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+          memset(buf2, '\0', INPUT_BUF);
+80101012:	68 80 00 00 00       	push   $0x80
+80101017:	6a 00                	push   $0x0
+          uint numtoshift = input.rightmost - input.e;
+80101019:	29 d0                	sub    %edx,%eax
+          memset(buf2, '\0', INPUT_BUF);
+8010101b:	68 40 20 11 80       	push   $0x80112040
+          uint numtoshift = input.rightmost - input.e;
+80101020:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+          memset(buf2, '\0', INPUT_BUF);
+80101023:	e8 b8 48 00 00       	call   801058e0 <memset>
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+80101028:	a1 20 20 11 80       	mov    0x80112020,%eax
+8010102d:	8b 55 d0             	mov    -0x30(%ebp),%edx
+80101030:	83 c4 10             	add    $0x10,%esp
+80101033:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101036:	01 f8                	add    %edi,%eax
+80101038:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+          for (i = 0; i < numtoshift; i++) {
+8010103b:	31 c0                	xor    %eax,%eax
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+8010103d:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+80101040:	01 c1                	add    %eax,%ecx
+          for (i = 0; i < numtoshift; i++) {
+80101042:	83 c0 01             	add    $0x1,%eax
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+80101045:	83 e1 7f             	and    $0x7f,%ecx
+80101048:	0f b6 89 a0 1f 11 80 	movzbl -0x7feee060(%ecx),%ecx
+8010104f:	88 88 3f 20 11 80    	mov    %cl,-0x7feedfc1(%eax)
+          for (i = 0; i < numtoshift; i++) {
+80101055:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+80101058:	75 e3                	jne    8010103d <consoleintr+0x3cd>
+          for (i = 0; i < numtoshift; i++) {
+8010105a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+8010105d:	31 c0                	xor    %eax,%eax
+            input.buf[(input.r + i) % INPUT_BUF] = buf2[i];
+8010105f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+80101062:	0f b6 90 40 20 11 80 	movzbl -0x7feedfc0(%eax),%edx
+80101069:	01 c1                	add    %eax,%ecx
+          for (i = 0; i < numtoshift; i++) {
+8010106b:	83 c0 01             	add    $0x1,%eax
+            input.buf[(input.r + i) % INPUT_BUF] = buf2[i];
+8010106e:	83 e1 7f             	and    $0x7f,%ecx
+80101071:	88 91 a0 1f 11 80    	mov    %dl,-0x7feee060(%ecx)
+          for (i = 0; i < numtoshift; i++) {
+80101077:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+8010107a:	75 e3                	jne    8010105f <consoleintr+0x3ef>
+8010107c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          input.e -= placestoshift;
+8010107f:	89 f0                	mov    %esi,%eax
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+80101081:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101084:	89 de                	mov    %ebx,%esi
+80101086:	29 d0                	sub    %edx,%eax
+80101088:	89 c2                	mov    %eax,%edx
+          input.e -= placestoshift;
+8010108a:	03 05 28 20 11 80    	add    0x80112028,%eax
+          input.rightmost -= placestoshift;
+80101090:	01 15 2c 20 11 80    	add    %edx,0x8011202c
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+80101096:	31 d2                	xor    %edx,%edx
+          input.e -= placestoshift;
+80101098:	a3 28 20 11 80       	mov    %eax,0x80112028
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+8010109d:	89 d3                	mov    %edx,%ebx
+  if(panicked){
+8010109f:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+801010a5:	85 d2                	test   %edx,%edx
+801010a7:	0f 84 1e 02 00 00    	je     801012cb <consoleintr+0x65b>
+801010ad:	fa                   	cli    
+    for(;;)
+801010ae:	eb fe                	jmp    801010ae <consoleintr+0x43e>
+801010b0:	b8 e4 00 00 00       	mov    $0xe4,%eax
+801010b5:	e8 56 f3 ff ff       	call   80100410 <consputc.part.0>
+801010ba:	e9 d3 fb ff ff       	jmp    80100c92 <consoleintr+0x22>
+          consputc(input.buf[input.e % INPUT_BUF]);
+801010bf:	83 e0 7f             	and    $0x7f,%eax
+801010c2:	0f be 80 a0 1f 11 80 	movsbl -0x7feee060(%eax),%eax
+801010c9:	e8 42 f3 ff ff       	call   80100410 <consputc.part.0>
+          input.e++;
+801010ce:	83 05 28 20 11 80 01 	addl   $0x1,0x80112028
+801010d5:	e9 b8 fb ff ff       	jmp    80100c92 <consoleintr+0x22>
+801010da:	b8 00 01 00 00       	mov    $0x100,%eax
+801010df:	e8 2c f3 ff ff       	call   80100410 <consputc.part.0>
+          while(input.e != input.r &&
+801010e4:	8b 15 28 20 11 80    	mov    0x80112028,%edx
+801010ea:	3b 15 20 20 11 80    	cmp    0x80112020,%edx
+801010f0:	0f 85 ca fc ff ff    	jne    80100dc0 <consoleintr+0x150>
+801010f6:	e9 97 fb ff ff       	jmp    80100c92 <consoleintr+0x22>
+801010fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801010ff:	90                   	nop
+        if(input.e != input.r){ // caret is at the end of the line - deleting last char
+80101100:	39 d0                	cmp    %edx,%eax
+80101102:	0f 84 8a fb ff ff    	je     80100c92 <consoleintr+0x22>
+          input.e--;
+80101108:	83 e8 01             	sub    $0x1,%eax
+8010110b:	a3 28 20 11 80       	mov    %eax,0x80112028
+          input.rightmost--;
+80101110:	a3 2c 20 11 80       	mov    %eax,0x8011202c
+  if(panicked){
+80101115:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+8010111a:	85 c0                	test   %eax,%eax
+8010111c:	0f 84 8c 00 00 00    	je     801011ae <consoleintr+0x53e>
+80101122:	fa                   	cli    
+    for(;;)
+80101123:	eb fe                	jmp    80101123 <consoleintr+0x4b3>
+80101125:	8d 76 00             	lea    0x0(%esi),%esi
+            earaseCurrentLineOnScreen();
+80101128:	e8 43 f9 ff ff       	call   80100a70 <earaseCurrentLineOnScreen>
+            HistoryMem.currentPosition--; // decreasing out current position.
+8010112d:	a1 28 29 11 80       	mov    0x80112928,%eax
+            copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80101132:	83 ec 08             	sub    $0x8,%esp
+            HistoryMem.currentPosition--; // decreasing out current position.
+80101135:	83 e8 01             	sub    $0x1,%eax
+80101138:	a3 28 29 11 80       	mov    %eax,0x80112928
+            tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) % MAX_HISTORY;
+8010113d:	03 05 20 29 11 80    	add    0x80112920,%eax
+80101143:	89 c6                	mov    %eax,%esi
+80101145:	83 e6 0f             	and    $0xf,%esi
+            copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80101148:	89 f7                	mov    %esi,%edi
+8010114a:	81 c6 00 02 00 00    	add    $0x200,%esi
+80101150:	c1 e7 07             	shl    $0x7,%edi
+80101153:	ff 34 b5 e0 20 11 80 	pushl  -0x7feedf20(,%esi,4)
+8010115a:	81 c7 e0 20 11 80    	add    $0x801120e0,%edi
+80101160:	57                   	push   %edi
+80101161:	e8 fa f9 ff ff       	call   80100b60 <copyBufferToScreen>
+            copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80101166:	8b 14 b5 e0 20 11 80 	mov    -0x7feedf20(,%esi,4),%edx
+  for (i = 0; i < length; i++) {
+8010116d:	83 c4 10             	add    $0x10,%esp
+80101170:	85 d2                	test   %edx,%edx
+80101172:	0f 84 2c 01 00 00    	je     801012a4 <consoleintr+0x634>
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80101178:	a1 20 20 11 80       	mov    0x80112020,%eax
+8010117d:	29 c7                	sub    %eax,%edi
+8010117f:	01 c2                	add    %eax,%edx
+80101181:	89 fe                	mov    %edi,%esi
+80101183:	89 df                	mov    %ebx,%edi
+80101185:	0f b6 1c 06          	movzbl (%esi,%eax,1),%ebx
+80101189:	89 c1                	mov    %eax,%ecx
+8010118b:	83 c0 01             	add    $0x1,%eax
+8010118e:	83 e1 7f             	and    $0x7f,%ecx
+80101191:	88 99 a0 1f 11 80    	mov    %bl,-0x7feee060(%ecx)
+  for (i = 0; i < length; i++) {
+80101197:	39 c2                	cmp    %eax,%edx
+80101199:	75 ea                	jne    80101185 <consoleintr+0x515>
+8010119b:	89 fb                	mov    %edi,%ebx
+  input.e = input.r+length;
+8010119d:	89 15 28 20 11 80    	mov    %edx,0x80112028
+  input.rightmost = input.e;
+801011a3:	89 15 2c 20 11 80    	mov    %edx,0x8011202c
+}
+801011a9:	e9 e4 fa ff ff       	jmp    80100c92 <consoleintr+0x22>
+801011ae:	b8 00 01 00 00       	mov    $0x100,%eax
+801011b3:	e8 58 f2 ff ff       	call   80100410 <consputc.part.0>
+801011b8:	e9 d5 fa ff ff       	jmp    80100c92 <consoleintr+0x22>
+  release(&cons.lock);
+801011bd:	83 ec 0c             	sub    $0xc,%esp
+801011c0:	68 20 c5 10 80       	push   $0x8010c520
+801011c5:	e8 c6 46 00 00       	call   80105890 <release>
+  if(doprocdump) {
+801011ca:	83 c4 10             	add    $0x10,%esp
+801011cd:	85 db                	test   %ebx,%ebx
+801011cf:	0f 85 c3 00 00 00    	jne    80101298 <consoleintr+0x628>
+}
+801011d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801011d8:	5b                   	pop    %ebx
+801011d9:	5e                   	pop    %esi
+801011da:	5f                   	pop    %edi
+801011db:	5d                   	pop    %ebp
+801011dc:	c3                   	ret    
+801011dd:	89 f0                	mov    %esi,%eax
+801011df:	e8 2c f2 ff ff       	call   80100410 <consputc.part.0>
+	  if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
+801011e4:	83 fe 0a             	cmp    $0xa,%esi
+801011e7:	74 19                	je     80101202 <consoleintr+0x592>
+801011e9:	83 fe 04             	cmp    $0x4,%esi
+801011ec:	74 14                	je     80101202 <consoleintr+0x592>
+801011ee:	a1 20 20 11 80       	mov    0x80112020,%eax
+801011f3:	83 e8 80             	sub    $0xffffff80,%eax
+801011f6:	39 05 2c 20 11 80    	cmp    %eax,0x8011202c
+801011fc:	0f 85 90 fa ff ff    	jne    80100c92 <consoleintr+0x22>
+	    saveCMDinHistoryMem(); // when enter is entered we saving that command to historyMem
+80101202:	e8 f9 f9 ff ff       	call   80100c00 <saveCMDinHistoryMem>
+	    wakeup(&input.r);
+80101207:	83 ec 0c             	sub    $0xc,%esp
+	    input.w = input.rightmost;
+8010120a:	a1 2c 20 11 80       	mov    0x8011202c,%eax
+	    wakeup(&input.r);
+8010120f:	68 20 20 11 80       	push   $0x80112020
+	    input.w = input.rightmost;
+80101214:	a3 24 20 11 80       	mov    %eax,0x80112024
+	    wakeup(&input.r);
+80101219:	e8 52 3c 00 00       	call   80104e70 <wakeup>
+8010121e:	83 c4 10             	add    $0x10,%esp
+80101221:	e9 6c fa ff ff       	jmp    80100c92 <consoleintr+0x22>
+  for (i = 0; i < n; i++)
+80101226:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  uint n = input.rightmost - input.e; // contents after edit have to be shifted when typed or backspaced.
+80101229:	29 d1                	sub    %edx,%ecx
+8010122b:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  for (i = 0; i < n; i++)
+8010122e:	31 c9                	xor    %ecx,%ecx
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+80101230:	8d 3c 0a             	lea    (%edx,%ecx,1),%edi
+  for (i = 0; i < n; i++)
+80101233:	83 c1 01             	add    $0x1,%ecx
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+80101236:	83 e7 7f             	and    $0x7f,%edi
+80101239:	0f b6 87 a0 1f 11 80 	movzbl -0x7feee060(%edi),%eax
+80101240:	88 81 3f 29 11 80    	mov    %al,-0x7feed6c1(%ecx)
+  for (i = 0; i < n; i++)
+80101246:	39 4d d4             	cmp    %ecx,-0x2c(%ebp)
+80101249:	75 e5                	jne    80101230 <consoleintr+0x5c0>
+8010124b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+	    input.buf[input.e++ % INPUT_BUF] = c;
+8010124e:	8b 7d dc             	mov    -0x24(%ebp),%edi
+  if(panicked){
+80101251:	8b 15 58 c5 10 80    	mov    0x8010c558,%edx
+	    input.buf[input.e++ % INPUT_BUF] = c;
+80101257:	a3 28 20 11 80       	mov    %eax,0x80112028
+8010125c:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+80101260:	88 87 a0 1f 11 80    	mov    %al,-0x7feee060(%edi)
+	    input.rightmost++;
+80101266:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101269:	83 c0 01             	add    $0x1,%eax
+8010126c:	a3 2c 20 11 80       	mov    %eax,0x8011202c
+  if(panicked){
+80101271:	85 d2                	test   %edx,%edx
+80101273:	74 45                	je     801012ba <consoleintr+0x64a>
+80101275:	fa                   	cli    
+    for(;;)
+80101276:	eb fe                	jmp    80101276 <consoleintr+0x606>
+80101278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010127f:	90                   	nop
+80101280:	c6 45 e0 0a          	movb   $0xa,-0x20(%ebp)
+	  c = (c == '\r') ? '\n' : c;
+80101284:	be 0a 00 00 00       	mov    $0xa,%esi
+80101289:	e9 9b fb ff ff       	jmp    80100e29 <consoleintr+0x1b9>
+8010128e:	fa                   	cli    
+    for(;;)
+8010128f:	eb fe                	jmp    8010128f <consoleintr+0x61f>
+80101291:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+}
+80101298:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010129b:	5b                   	pop    %ebx
+8010129c:	5e                   	pop    %esi
+8010129d:	5f                   	pop    %edi
+8010129e:	5d                   	pop    %ebp
+    procdump();  // now call procdump() wo. cons.lock held
+8010129f:	e9 cc 3c 00 00       	jmp    80104f70 <procdump>
+801012a4:	8b 15 20 20 11 80    	mov    0x80112020,%edx
+801012aa:	e9 ee fe ff ff       	jmp    8010119d <consoleintr+0x52d>
+801012af:	8b 35 20 20 11 80    	mov    0x80112020,%esi
+801012b5:	e9 00 fd ff ff       	jmp    80100fba <consoleintr+0x34a>
+801012ba:	89 f0                	mov    %esi,%eax
+801012bc:	e8 4f f1 ff ff       	call   80100410 <consputc.part.0>
+	    shiftbufright();
+801012c1:	e8 1a f6 ff ff       	call   801008e0 <shiftbufright>
+801012c6:	e9 19 ff ff ff       	jmp    801011e4 <consoleintr+0x574>
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+801012cb:	01 d8                	add    %ebx,%eax
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+801012cd:	83 c3 01             	add    $0x1,%ebx
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+801012d0:	83 e0 7f             	and    $0x7f,%eax
+801012d3:	0f be 80 a0 1f 11 80 	movsbl -0x7feee060(%eax),%eax
+801012da:	e8 31 f1 ff ff       	call   80100410 <consputc.part.0>
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+801012df:	39 5d e4             	cmp    %ebx,-0x1c(%ebp)
+801012e2:	74 0a                	je     801012ee <consoleintr+0x67e>
+801012e4:	a1 28 20 11 80       	mov    0x80112028,%eax
+801012e9:	e9 b1 fd ff ff       	jmp    8010109f <consoleintr+0x42f>
+801012ee:	89 f3                	mov    %esi,%ebx
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+801012f0:	31 d2                	xor    %edx,%edx
+801012f2:	8b 75 dc             	mov    -0x24(%ebp),%esi
+801012f5:	85 ff                	test   %edi,%edi
+801012f7:	74 2d                	je     80101326 <consoleintr+0x6b6>
+801012f9:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+801012fc:	89 de                	mov    %ebx,%esi
+801012fe:	89 d3                	mov    %edx,%ebx
+  if(panicked){
+80101300:	a1 58 c5 10 80       	mov    0x8010c558,%eax
+80101305:	85 c0                	test   %eax,%eax
+80101307:	74 07                	je     80101310 <consoleintr+0x6a0>
+80101309:	fa                   	cli    
+    for(;;)
+8010130a:	eb fe                	jmp    8010130a <consoleintr+0x69a>
+8010130c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101310:	b8 20 00 00 00       	mov    $0x20,%eax
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+80101315:	83 c3 01             	add    $0x1,%ebx
+80101318:	e8 f3 f0 ff ff       	call   80100410 <consputc.part.0>
+8010131d:	39 df                	cmp    %ebx,%edi
+8010131f:	75 df                	jne    80101300 <consoleintr+0x690>
+80101321:	89 f3                	mov    %esi,%ebx
+80101323:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+80101326:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101329:	31 ff                	xor    %edi,%edi
+8010132b:	29 f0                	sub    %esi,%eax
+8010132d:	89 c6                	mov    %eax,%esi
+8010132f:	39 fe                	cmp    %edi,%esi
+80101331:	0f 86 5b f9 ff ff    	jbe    80100c92 <consoleintr+0x22>
+  if(panicked){
+80101337:	83 3d 58 c5 10 80 00 	cmpl   $0x0,0x8010c558
+8010133e:	74 03                	je     80101343 <consoleintr+0x6d3>
+80101340:	fa                   	cli    
+    for(;;)
+80101341:	eb fe                	jmp    80101341 <consoleintr+0x6d1>
+80101343:	b8 e4 00 00 00       	mov    $0xe4,%eax
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+80101348:	83 c7 01             	add    $0x1,%edi
+8010134b:	e8 c0 f0 ff ff       	call   80100410 <consputc.part.0>
+80101350:	eb dd                	jmp    8010132f <consoleintr+0x6bf>
+80101352:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101360 <history>:
+int history(char *buffer, int historyId) {
+80101360:	f3 0f 1e fb          	endbr32 
+80101364:	55                   	push   %ebp
+80101365:	89 e5                	mov    %esp,%ebp
+80101367:	56                   	push   %esi
+80101368:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010136b:	53                   	push   %ebx
+8010136c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (historyId < 0 || historyId > MAX_HISTORY - 1)
+8010136f:	83 fe 0f             	cmp    $0xf,%esi
+80101372:	77 7c                	ja     801013f0 <history+0x90>
+  if (historyId >= HistoryMem.TotalCMDsInMem )
+80101374:	39 35 24 29 11 80    	cmp    %esi,0x80112924
+8010137a:	7e 64                	jle    801013e0 <history+0x80>
+  memset(buffer, '\0', INPUT_BUF);
+8010137c:	83 ec 04             	sub    $0x4,%esp
+8010137f:	68 80 00 00 00       	push   $0x80
+80101384:	6a 00                	push   $0x0
+80101386:	53                   	push   %ebx
+80101387:	e8 54 45 00 00       	call   801058e0 <memset>
+  if(HistoryMem.TotalCMDsInMem > MAX_HISTORY){
+8010138c:	83 c4 10             	add    $0x10,%esp
+8010138f:	83 3d 24 29 11 80 10 	cmpl   $0x10,0x80112924
+    temp = MAX_HISTORY - 1;
+80101396:	b8 0f 00 00 00       	mov    $0xf,%eax
+  if(HistoryMem.TotalCMDsInMem > MAX_HISTORY){
+8010139b:	7f 33                	jg     801013d0 <history+0x70>
+  temp = (temp - historyId) % MAX_HISTORY;
+8010139d:	29 f0                	sub    %esi,%eax
+  memmove(buffer, HistoryMem.CommandMemArr[temp], HistoryMem.lengthsArr[temp]);
+8010139f:	83 ec 04             	sub    $0x4,%esp
+  temp = (temp - historyId) % MAX_HISTORY;
+801013a2:	83 e0 0f             	and    $0xf,%eax
+  memmove(buffer, HistoryMem.CommandMemArr[temp], HistoryMem.lengthsArr[temp]);
+801013a5:	ff 34 85 e0 28 11 80 	pushl  -0x7feed720(,%eax,4)
+801013ac:	c1 e0 07             	shl    $0x7,%eax
+801013af:	05 e0 20 11 80       	add    $0x801120e0,%eax
+801013b4:	50                   	push   %eax
+801013b5:	53                   	push   %ebx
+801013b6:	e8 c5 45 00 00       	call   80105980 <memmove>
+  return 0;
+801013bb:	83 c4 10             	add    $0x10,%esp
+801013be:	31 c0                	xor    %eax,%eax
+}
+801013c0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801013c3:	5b                   	pop    %ebx
+801013c4:	5e                   	pop    %esi
+801013c5:	5d                   	pop    %ebp
+801013c6:	c3                   	ret    
+801013c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013ce:	66 90                	xchg   %ax,%ax
+    temp = HistoryMem.FinalCMdIndex - 1;
+801013d0:	a1 20 29 11 80       	mov    0x80112920,%eax
+801013d5:	83 e8 01             	sub    $0x1,%eax
+801013d8:	eb c3                	jmp    8010139d <history+0x3d>
+801013da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+801013e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801013e5:	eb d9                	jmp    801013c0 <history+0x60>
+801013e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013ee:	66 90                	xchg   %ax,%ax
+    return -2;
+801013f0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+801013f5:	eb c9                	jmp    801013c0 <history+0x60>
+801013f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013fe:	66 90                	xchg   %ax,%ax
+
+80101400 <consoleinit>:
+
+void
+consoleinit(void)
+{
+80101400:	f3 0f 1e fb          	endbr32 
+80101404:	55                   	push   %ebp
+80101405:	89 e5                	mov    %esp,%ebp
+80101407:	83 ec 10             	sub    $0x10,%esp
+  initlock(&cons.lock, "console");
+8010140a:	68 48 85 10 80       	push   $0x80108548
+8010140f:	68 20 c5 10 80       	push   $0x8010c520
+80101414:	e8 37 42 00 00       	call   80105650 <initlock>
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  ioapicenable(IRQ_KBD, 0);
+80101419:	58                   	pop    %eax
+8010141a:	5a                   	pop    %edx
+8010141b:	6a 00                	push   $0x0
+8010141d:	6a 01                	push   $0x1
+  devsw[CONSOLE].write = consolewrite;
+8010141f:	c7 05 6c 33 11 80 80 	movl   $0x80100680,0x8011336c
+80101426:	06 10 80 
+  devsw[CONSOLE].read = consoleread;
+80101429:	c7 05 68 33 11 80 90 	movl   $0x80100290,0x80113368
+80101430:	02 10 80 
+  cons.locking = 1;
+80101433:	c7 05 54 c5 10 80 01 	movl   $0x1,0x8010c554
+8010143a:	00 00 00 
+  ioapicenable(IRQ_KBD, 0);
+8010143d:	e8 de 19 00 00       	call   80102e20 <ioapicenable>
+  HistoryMem.TotalCMDsInMem = 0;
+  HistoryMem.FinalCMdIndex = 0;
+  HistoryMem.currentPosition = -1;
+}
+80101442:	83 c4 10             	add    $0x10,%esp
+  HistoryMem.TotalCMDsInMem = 0;
+80101445:	c7 05 24 29 11 80 00 	movl   $0x0,0x80112924
+8010144c:	00 00 00 
+  HistoryMem.FinalCMdIndex = 0;
+8010144f:	c7 05 20 29 11 80 00 	movl   $0x0,0x80112920
+80101456:	00 00 00 
+  HistoryMem.currentPosition = -1;
+80101459:	c7 05 28 29 11 80 ff 	movl   $0xffffffff,0x80112928
+80101460:	ff ff ff 
+}
+80101463:	c9                   	leave  
+80101464:	c3                   	ret    
+80101465:	66 90                	xchg   %ax,%ax
+80101467:	66 90                	xchg   %ax,%ax
+80101469:	66 90                	xchg   %ax,%ax
+8010146b:	66 90                	xchg   %ax,%ax
+8010146d:	66 90                	xchg   %ax,%ax
+8010146f:	90                   	nop
+
+80101470 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+80101470:	f3 0f 1e fb          	endbr32 
+80101474:	55                   	push   %ebp
+80101475:	89 e5                	mov    %esp,%ebp
+80101477:	57                   	push   %edi
+80101478:	56                   	push   %esi
+80101479:	53                   	push   %ebx
+8010147a:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+  struct proc *curproc = myproc();
+80101480:	e8 fb 30 00 00       	call   80104580 <myproc>
+80101485:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+
+  begin_op();
+8010148b:	e8 90 22 00 00       	call   80103720 <begin_op>
+
+  if((ip = namei(path)) == 0){
+80101490:	83 ec 0c             	sub    $0xc,%esp
+80101493:	ff 75 08             	pushl  0x8(%ebp)
+80101496:	e8 85 15 00 00       	call   80102a20 <namei>
+8010149b:	83 c4 10             	add    $0x10,%esp
+8010149e:	85 c0                	test   %eax,%eax
+801014a0:	0f 84 fe 02 00 00    	je     801017a4 <exec+0x334>
+  
+  #ifdef DML    //reset the priority to 2
+  reset_priority();
+  #endif
+  
+  ilock(ip);
+801014a6:	83 ec 0c             	sub    $0xc,%esp
+801014a9:	89 c3                	mov    %eax,%ebx
+801014ab:	50                   	push   %eax
+801014ac:	e8 9f 0c 00 00       	call   80102150 <ilock>
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+801014b1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+801014b7:	6a 34                	push   $0x34
+801014b9:	6a 00                	push   $0x0
+801014bb:	50                   	push   %eax
+801014bc:	53                   	push   %ebx
+801014bd:	e8 8e 0f 00 00       	call   80102450 <readi>
+801014c2:	83 c4 20             	add    $0x20,%esp
+801014c5:	83 f8 34             	cmp    $0x34,%eax
+801014c8:	74 26                	je     801014f0 <exec+0x80>
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+801014ca:	83 ec 0c             	sub    $0xc,%esp
+801014cd:	53                   	push   %ebx
+801014ce:	e8 1d 0f 00 00       	call   801023f0 <iunlockput>
+    end_op();
+801014d3:	e8 b8 22 00 00       	call   80103790 <end_op>
+801014d8:	83 c4 10             	add    $0x10,%esp
+  }
+  return -1;
+801014db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801014e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801014e3:	5b                   	pop    %ebx
+801014e4:	5e                   	pop    %esi
+801014e5:	5f                   	pop    %edi
+801014e6:	5d                   	pop    %ebp
+801014e7:	c3                   	ret    
+801014e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014ef:	90                   	nop
+  if(elf.magic != ELF_MAGIC)
+801014f0:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+801014f7:	45 4c 46 
+801014fa:	75 ce                	jne    801014ca <exec+0x5a>
+  if((pgdir = setupkvm()) == 0)
+801014fc:	e8 3f 6d 00 00       	call   80108240 <setupkvm>
+80101501:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+80101507:	85 c0                	test   %eax,%eax
+80101509:	74 bf                	je     801014ca <exec+0x5a>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+8010150b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80101512:	00 
+80101513:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
+80101519:	0f 84 a4 02 00 00    	je     801017c3 <exec+0x353>
+  sz = 0;
+8010151f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
+80101526:	00 00 00 
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80101529:	31 ff                	xor    %edi,%edi
+8010152b:	e9 86 00 00 00       	jmp    801015b6 <exec+0x146>
+    if(ph.type != ELF_PROG_LOAD)
+80101530:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80101537:	75 6c                	jne    801015a5 <exec+0x135>
+    if(ph.memsz < ph.filesz)
+80101539:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+8010153f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80101545:	0f 82 87 00 00 00    	jb     801015d2 <exec+0x162>
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+8010154b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80101551:	72 7f                	jb     801015d2 <exec+0x162>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80101553:	83 ec 04             	sub    $0x4,%esp
+80101556:	50                   	push   %eax
+80101557:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+8010155d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80101563:	e8 f8 6a 00 00       	call   80108060 <allocuvm>
+80101568:	83 c4 10             	add    $0x10,%esp
+8010156b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80101571:	85 c0                	test   %eax,%eax
+80101573:	74 5d                	je     801015d2 <exec+0x162>
+    if(ph.vaddr % PGSIZE != 0)
+80101575:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+8010157b:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80101580:	75 50                	jne    801015d2 <exec+0x162>
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80101582:	83 ec 0c             	sub    $0xc,%esp
+80101585:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+8010158b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80101591:	53                   	push   %ebx
+80101592:	50                   	push   %eax
+80101593:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80101599:	e8 f2 69 00 00       	call   80107f90 <loaduvm>
+8010159e:	83 c4 20             	add    $0x20,%esp
+801015a1:	85 c0                	test   %eax,%eax
+801015a3:	78 2d                	js     801015d2 <exec+0x162>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+801015a5:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+801015ac:	83 c7 01             	add    $0x1,%edi
+801015af:	83 c6 20             	add    $0x20,%esi
+801015b2:	39 f8                	cmp    %edi,%eax
+801015b4:	7e 3a                	jle    801015f0 <exec+0x180>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+801015b6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+801015bc:	6a 20                	push   $0x20
+801015be:	56                   	push   %esi
+801015bf:	50                   	push   %eax
+801015c0:	53                   	push   %ebx
+801015c1:	e8 8a 0e 00 00       	call   80102450 <readi>
+801015c6:	83 c4 10             	add    $0x10,%esp
+801015c9:	83 f8 20             	cmp    $0x20,%eax
+801015cc:	0f 84 5e ff ff ff    	je     80101530 <exec+0xc0>
+    freevm(pgdir);
+801015d2:	83 ec 0c             	sub    $0xc,%esp
+801015d5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+801015db:	e8 e0 6b 00 00       	call   801081c0 <freevm>
+  if(ip){
+801015e0:	83 c4 10             	add    $0x10,%esp
+801015e3:	e9 e2 fe ff ff       	jmp    801014ca <exec+0x5a>
+801015e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801015ef:	90                   	nop
+801015f0:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
+801015f6:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+801015fc:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80101602:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+  iunlockput(ip);
+80101608:	83 ec 0c             	sub    $0xc,%esp
+8010160b:	53                   	push   %ebx
+8010160c:	e8 df 0d 00 00       	call   801023f0 <iunlockput>
+  end_op();
+80101611:	e8 7a 21 00 00       	call   80103790 <end_op>
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80101616:	83 c4 0c             	add    $0xc,%esp
+80101619:	56                   	push   %esi
+8010161a:	57                   	push   %edi
+8010161b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80101621:	57                   	push   %edi
+80101622:	e8 39 6a 00 00       	call   80108060 <allocuvm>
+80101627:	83 c4 10             	add    $0x10,%esp
+8010162a:	89 c6                	mov    %eax,%esi
+8010162c:	85 c0                	test   %eax,%eax
+8010162e:	0f 84 94 00 00 00    	je     801016c8 <exec+0x258>
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80101634:	83 ec 08             	sub    $0x8,%esp
+80101637:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+  for(argc = 0; argv[argc]; argc++) {
+8010163d:	89 f3                	mov    %esi,%ebx
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+8010163f:	50                   	push   %eax
+80101640:	57                   	push   %edi
+  for(argc = 0; argv[argc]; argc++) {
+80101641:	31 ff                	xor    %edi,%edi
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80101643:	e8 98 6c 00 00       	call   801082e0 <clearpteu>
+  for(argc = 0; argv[argc]; argc++) {
+80101648:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010164b:	83 c4 10             	add    $0x10,%esp
+8010164e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80101654:	8b 00                	mov    (%eax),%eax
+80101656:	85 c0                	test   %eax,%eax
+80101658:	0f 84 8b 00 00 00    	je     801016e9 <exec+0x279>
+8010165e:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
+80101664:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
+8010166a:	eb 23                	jmp    8010168f <exec+0x21f>
+8010166c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101670:	8b 45 0c             	mov    0xc(%ebp),%eax
+    ustack[3+argc] = sp;
+80101673:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+  for(argc = 0; argv[argc]; argc++) {
+8010167a:	83 c7 01             	add    $0x1,%edi
+    ustack[3+argc] = sp;
+8010167d:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+  for(argc = 0; argv[argc]; argc++) {
+80101683:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80101686:	85 c0                	test   %eax,%eax
+80101688:	74 59                	je     801016e3 <exec+0x273>
+    if(argc >= MAXARG)
+8010168a:	83 ff 20             	cmp    $0x20,%edi
+8010168d:	74 39                	je     801016c8 <exec+0x258>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+8010168f:	83 ec 0c             	sub    $0xc,%esp
+80101692:	50                   	push   %eax
+80101693:	e8 48 44 00 00       	call   80105ae0 <strlen>
+80101698:	f7 d0                	not    %eax
+8010169a:	01 c3                	add    %eax,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+8010169c:	58                   	pop    %eax
+8010169d:	8b 45 0c             	mov    0xc(%ebp),%eax
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+801016a0:	83 e3 fc             	and    $0xfffffffc,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+801016a3:	ff 34 b8             	pushl  (%eax,%edi,4)
+801016a6:	e8 35 44 00 00       	call   80105ae0 <strlen>
+801016ab:	83 c0 01             	add    $0x1,%eax
+801016ae:	50                   	push   %eax
+801016af:	8b 45 0c             	mov    0xc(%ebp),%eax
+801016b2:	ff 34 b8             	pushl  (%eax,%edi,4)
+801016b5:	53                   	push   %ebx
+801016b6:	56                   	push   %esi
+801016b7:	e8 84 6d 00 00       	call   80108440 <copyout>
+801016bc:	83 c4 20             	add    $0x20,%esp
+801016bf:	85 c0                	test   %eax,%eax
+801016c1:	79 ad                	jns    80101670 <exec+0x200>
+801016c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801016c7:	90                   	nop
+    freevm(pgdir);
+801016c8:	83 ec 0c             	sub    $0xc,%esp
+801016cb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+801016d1:	e8 ea 6a 00 00       	call   801081c0 <freevm>
+801016d6:	83 c4 10             	add    $0x10,%esp
+  return -1;
+801016d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801016de:	e9 fd fd ff ff       	jmp    801014e0 <exec+0x70>
+801016e3:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+801016e9:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+801016f0:	89 d9                	mov    %ebx,%ecx
+  ustack[3+argc] = 0;
+801016f2:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+801016f9:	00 00 00 00 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+801016fd:	29 c1                	sub    %eax,%ecx
+  sp -= (3+argc+1) * 4;
+801016ff:	83 c0 0c             	add    $0xc,%eax
+  ustack[1] = argc;
+80101702:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+  sp -= (3+argc+1) * 4;
+80101708:	29 c3                	sub    %eax,%ebx
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+8010170a:	50                   	push   %eax
+8010170b:	52                   	push   %edx
+8010170c:	53                   	push   %ebx
+8010170d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+  ustack[0] = 0xffffffff;  // fake return PC
+80101713:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+8010171a:	ff ff ff 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+8010171d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80101723:	e8 18 6d 00 00       	call   80108440 <copyout>
+80101728:	83 c4 10             	add    $0x10,%esp
+8010172b:	85 c0                	test   %eax,%eax
+8010172d:	78 99                	js     801016c8 <exec+0x258>
+  for(last=s=path; *s; s++)
+8010172f:	8b 45 08             	mov    0x8(%ebp),%eax
+80101732:	8b 55 08             	mov    0x8(%ebp),%edx
+80101735:	0f b6 00             	movzbl (%eax),%eax
+80101738:	84 c0                	test   %al,%al
+8010173a:	74 13                	je     8010174f <exec+0x2df>
+8010173c:	89 d1                	mov    %edx,%ecx
+8010173e:	66 90                	xchg   %ax,%ax
+    if(*s == '/')
+80101740:	83 c1 01             	add    $0x1,%ecx
+80101743:	3c 2f                	cmp    $0x2f,%al
+  for(last=s=path; *s; s++)
+80101745:	0f b6 01             	movzbl (%ecx),%eax
+    if(*s == '/')
+80101748:	0f 44 d1             	cmove  %ecx,%edx
+  for(last=s=path; *s; s++)
+8010174b:	84 c0                	test   %al,%al
+8010174d:	75 f1                	jne    80101740 <exec+0x2d0>
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+8010174f:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
+80101755:	83 ec 04             	sub    $0x4,%esp
+80101758:	6a 10                	push   $0x10
+8010175a:	89 f8                	mov    %edi,%eax
+8010175c:	52                   	push   %edx
+8010175d:	83 c0 6c             	add    $0x6c,%eax
+80101760:	50                   	push   %eax
+80101761:	e8 3a 43 00 00       	call   80105aa0 <safestrcpy>
+  curproc->pgdir = pgdir;
+80101766:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
+  oldpgdir = curproc->pgdir;
+8010176c:	89 f8                	mov    %edi,%eax
+8010176e:	8b 7f 04             	mov    0x4(%edi),%edi
+  curproc->sz = sz;
+80101771:	89 30                	mov    %esi,(%eax)
+  curproc->pgdir = pgdir;
+80101773:	89 48 04             	mov    %ecx,0x4(%eax)
+  curproc->tf->eip = elf.entry;  // main
+80101776:	89 c1                	mov    %eax,%ecx
+80101778:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+8010177e:	8b 40 18             	mov    0x18(%eax),%eax
+80101781:	89 50 38             	mov    %edx,0x38(%eax)
+  curproc->tf->esp = sp;
+80101784:	8b 41 18             	mov    0x18(%ecx),%eax
+80101787:	89 58 44             	mov    %ebx,0x44(%eax)
+  switchuvm(curproc);
+8010178a:	89 0c 24             	mov    %ecx,(%esp)
+8010178d:	e8 6e 66 00 00       	call   80107e00 <switchuvm>
+  freevm(oldpgdir);
+80101792:	89 3c 24             	mov    %edi,(%esp)
+80101795:	e8 26 6a 00 00       	call   801081c0 <freevm>
+  return 0;
+8010179a:	83 c4 10             	add    $0x10,%esp
+8010179d:	31 c0                	xor    %eax,%eax
+8010179f:	e9 3c fd ff ff       	jmp    801014e0 <exec+0x70>
+    end_op();
+801017a4:	e8 e7 1f 00 00       	call   80103790 <end_op>
+    cprintf("exec: fail\n");
+801017a9:	83 ec 0c             	sub    $0xc,%esp
+801017ac:	68 99 85 10 80       	push   $0x80108599
+801017b1:	e8 3a ef ff ff       	call   801006f0 <cprintf>
+    return -1;
+801017b6:	83 c4 10             	add    $0x10,%esp
+801017b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801017be:	e9 1d fd ff ff       	jmp    801014e0 <exec+0x70>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+801017c3:	31 ff                	xor    %edi,%edi
+801017c5:	be 00 20 00 00       	mov    $0x2000,%esi
+801017ca:	e9 39 fe ff ff       	jmp    80101608 <exec+0x198>
+801017cf:	90                   	nop
+
+801017d0 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+801017d0:	f3 0f 1e fb          	endbr32 
+801017d4:	55                   	push   %ebp
+801017d5:	89 e5                	mov    %esp,%ebp
+801017d7:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ftable.lock, "ftable");
+801017da:	68 a5 85 10 80       	push   $0x801085a5
+801017df:	68 c0 29 11 80       	push   $0x801129c0
+801017e4:	e8 67 3e 00 00       	call   80105650 <initlock>
+}
+801017e9:	83 c4 10             	add    $0x10,%esp
+801017ec:	c9                   	leave  
+801017ed:	c3                   	ret    
+801017ee:	66 90                	xchg   %ax,%ax
+
+801017f0 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+801017f0:	f3 0f 1e fb          	endbr32 
+801017f4:	55                   	push   %ebp
+801017f5:	89 e5                	mov    %esp,%ebp
+801017f7:	53                   	push   %ebx
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+801017f8:	bb f4 29 11 80       	mov    $0x801129f4,%ebx
+{
+801017fd:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ftable.lock);
+80101800:	68 c0 29 11 80       	push   $0x801129c0
+80101805:	e8 c6 3f 00 00       	call   801057d0 <acquire>
+8010180a:	83 c4 10             	add    $0x10,%esp
+8010180d:	eb 0c                	jmp    8010181b <filealloc+0x2b>
+8010180f:	90                   	nop
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80101810:	83 c3 18             	add    $0x18,%ebx
+80101813:	81 fb 54 33 11 80    	cmp    $0x80113354,%ebx
+80101819:	74 25                	je     80101840 <filealloc+0x50>
+    if(f->ref == 0){
+8010181b:	8b 43 04             	mov    0x4(%ebx),%eax
+8010181e:	85 c0                	test   %eax,%eax
+80101820:	75 ee                	jne    80101810 <filealloc+0x20>
+      f->ref = 1;
+      release(&ftable.lock);
+80101822:	83 ec 0c             	sub    $0xc,%esp
+      f->ref = 1;
+80101825:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+      release(&ftable.lock);
+8010182c:	68 c0 29 11 80       	push   $0x801129c0
+80101831:	e8 5a 40 00 00       	call   80105890 <release>
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+80101836:	89 d8                	mov    %ebx,%eax
+      return f;
+80101838:	83 c4 10             	add    $0x10,%esp
+}
+8010183b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010183e:	c9                   	leave  
+8010183f:	c3                   	ret    
+  release(&ftable.lock);
+80101840:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80101843:	31 db                	xor    %ebx,%ebx
+  release(&ftable.lock);
+80101845:	68 c0 29 11 80       	push   $0x801129c0
+8010184a:	e8 41 40 00 00       	call   80105890 <release>
+}
+8010184f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80101851:	83 c4 10             	add    $0x10,%esp
+}
+80101854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101857:	c9                   	leave  
+80101858:	c3                   	ret    
+80101859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101860 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80101860:	f3 0f 1e fb          	endbr32 
+80101864:	55                   	push   %ebp
+80101865:	89 e5                	mov    %esp,%ebp
+80101867:	53                   	push   %ebx
+80101868:	83 ec 10             	sub    $0x10,%esp
+8010186b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ftable.lock);
+8010186e:	68 c0 29 11 80       	push   $0x801129c0
+80101873:	e8 58 3f 00 00       	call   801057d0 <acquire>
+  if(f->ref < 1)
+80101878:	8b 43 04             	mov    0x4(%ebx),%eax
+8010187b:	83 c4 10             	add    $0x10,%esp
+8010187e:	85 c0                	test   %eax,%eax
+80101880:	7e 1a                	jle    8010189c <filedup+0x3c>
+    panic("filedup");
+  f->ref++;
+80101882:	83 c0 01             	add    $0x1,%eax
+  release(&ftable.lock);
+80101885:	83 ec 0c             	sub    $0xc,%esp
+  f->ref++;
+80101888:	89 43 04             	mov    %eax,0x4(%ebx)
+  release(&ftable.lock);
+8010188b:	68 c0 29 11 80       	push   $0x801129c0
+80101890:	e8 fb 3f 00 00       	call   80105890 <release>
+  return f;
+}
+80101895:	89 d8                	mov    %ebx,%eax
+80101897:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010189a:	c9                   	leave  
+8010189b:	c3                   	ret    
+    panic("filedup");
+8010189c:	83 ec 0c             	sub    $0xc,%esp
+8010189f:	68 ac 85 10 80       	push   $0x801085ac
+801018a4:	e8 e7 ea ff ff       	call   80100390 <panic>
+801018a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801018b0 <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+801018b0:	f3 0f 1e fb          	endbr32 
+801018b4:	55                   	push   %ebp
+801018b5:	89 e5                	mov    %esp,%ebp
+801018b7:	57                   	push   %edi
+801018b8:	56                   	push   %esi
+801018b9:	53                   	push   %ebx
+801018ba:	83 ec 28             	sub    $0x28,%esp
+801018bd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct file ff;
+
+  acquire(&ftable.lock);
+801018c0:	68 c0 29 11 80       	push   $0x801129c0
+801018c5:	e8 06 3f 00 00       	call   801057d0 <acquire>
+  if(f->ref < 1)
+801018ca:	8b 53 04             	mov    0x4(%ebx),%edx
+801018cd:	83 c4 10             	add    $0x10,%esp
+801018d0:	85 d2                	test   %edx,%edx
+801018d2:	0f 8e a1 00 00 00    	jle    80101979 <fileclose+0xc9>
+    panic("fileclose");
+  if(--f->ref > 0){
+801018d8:	83 ea 01             	sub    $0x1,%edx
+801018db:	89 53 04             	mov    %edx,0x4(%ebx)
+801018de:	75 40                	jne    80101920 <fileclose+0x70>
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+801018e0:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+801018e4:	83 ec 0c             	sub    $0xc,%esp
+  ff = *f;
+801018e7:	8b 3b                	mov    (%ebx),%edi
+  f->type = FD_NONE;
+801018e9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  ff = *f;
+801018ef:	8b 73 0c             	mov    0xc(%ebx),%esi
+801018f2:	88 45 e7             	mov    %al,-0x19(%ebp)
+801018f5:	8b 43 10             	mov    0x10(%ebx),%eax
+  release(&ftable.lock);
+801018f8:	68 c0 29 11 80       	push   $0x801129c0
+  ff = *f;
+801018fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  release(&ftable.lock);
+80101900:	e8 8b 3f 00 00       	call   80105890 <release>
+
+  if(ff.type == FD_PIPE)
+80101905:	83 c4 10             	add    $0x10,%esp
+80101908:	83 ff 01             	cmp    $0x1,%edi
+8010190b:	74 53                	je     80101960 <fileclose+0xb0>
+    pipeclose(ff.pipe, ff.writable);
+  else if(ff.type == FD_INODE){
+8010190d:	83 ff 02             	cmp    $0x2,%edi
+80101910:	74 26                	je     80101938 <fileclose+0x88>
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80101912:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101915:	5b                   	pop    %ebx
+80101916:	5e                   	pop    %esi
+80101917:	5f                   	pop    %edi
+80101918:	5d                   	pop    %ebp
+80101919:	c3                   	ret    
+8010191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    release(&ftable.lock);
+80101920:	c7 45 08 c0 29 11 80 	movl   $0x801129c0,0x8(%ebp)
+}
+80101927:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010192a:	5b                   	pop    %ebx
+8010192b:	5e                   	pop    %esi
+8010192c:	5f                   	pop    %edi
+8010192d:	5d                   	pop    %ebp
+    release(&ftable.lock);
+8010192e:	e9 5d 3f 00 00       	jmp    80105890 <release>
+80101933:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101937:	90                   	nop
+    begin_op();
+80101938:	e8 e3 1d 00 00       	call   80103720 <begin_op>
+    iput(ff.ip);
+8010193d:	83 ec 0c             	sub    $0xc,%esp
+80101940:	ff 75 e0             	pushl  -0x20(%ebp)
+80101943:	e8 38 09 00 00       	call   80102280 <iput>
+    end_op();
+80101948:	83 c4 10             	add    $0x10,%esp
+}
+8010194b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010194e:	5b                   	pop    %ebx
+8010194f:	5e                   	pop    %esi
+80101950:	5f                   	pop    %edi
+80101951:	5d                   	pop    %ebp
+    end_op();
+80101952:	e9 39 1e 00 00       	jmp    80103790 <end_op>
+80101957:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010195e:	66 90                	xchg   %ax,%ax
+    pipeclose(ff.pipe, ff.writable);
+80101960:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80101964:	83 ec 08             	sub    $0x8,%esp
+80101967:	53                   	push   %ebx
+80101968:	56                   	push   %esi
+80101969:	e8 82 25 00 00       	call   80103ef0 <pipeclose>
+8010196e:	83 c4 10             	add    $0x10,%esp
+}
+80101971:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101974:	5b                   	pop    %ebx
+80101975:	5e                   	pop    %esi
+80101976:	5f                   	pop    %edi
+80101977:	5d                   	pop    %ebp
+80101978:	c3                   	ret    
+    panic("fileclose");
+80101979:	83 ec 0c             	sub    $0xc,%esp
+8010197c:	68 b4 85 10 80       	push   $0x801085b4
+80101981:	e8 0a ea ff ff       	call   80100390 <panic>
+80101986:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010198d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101990 <filestat>:
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+80101990:	f3 0f 1e fb          	endbr32 
+80101994:	55                   	push   %ebp
+80101995:	89 e5                	mov    %esp,%ebp
+80101997:	53                   	push   %ebx
+80101998:	83 ec 04             	sub    $0x4,%esp
+8010199b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(f->type == FD_INODE){
+8010199e:	83 3b 02             	cmpl   $0x2,(%ebx)
+801019a1:	75 2d                	jne    801019d0 <filestat+0x40>
+    ilock(f->ip);
+801019a3:	83 ec 0c             	sub    $0xc,%esp
+801019a6:	ff 73 10             	pushl  0x10(%ebx)
+801019a9:	e8 a2 07 00 00       	call   80102150 <ilock>
+    stati(f->ip, st);
+801019ae:	58                   	pop    %eax
+801019af:	5a                   	pop    %edx
+801019b0:	ff 75 0c             	pushl  0xc(%ebp)
+801019b3:	ff 73 10             	pushl  0x10(%ebx)
+801019b6:	e8 65 0a 00 00       	call   80102420 <stati>
+    iunlock(f->ip);
+801019bb:	59                   	pop    %ecx
+801019bc:	ff 73 10             	pushl  0x10(%ebx)
+801019bf:	e8 6c 08 00 00       	call   80102230 <iunlock>
+    return 0;
+  }
+  return -1;
+}
+801019c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    return 0;
+801019c7:	83 c4 10             	add    $0x10,%esp
+801019ca:	31 c0                	xor    %eax,%eax
+}
+801019cc:	c9                   	leave  
+801019cd:	c3                   	ret    
+801019ce:	66 90                	xchg   %ax,%ax
+801019d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  return -1;
+801019d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801019d8:	c9                   	leave  
+801019d9:	c3                   	ret    
+801019da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801019e0 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+801019e0:	f3 0f 1e fb          	endbr32 
+801019e4:	55                   	push   %ebp
+801019e5:	89 e5                	mov    %esp,%ebp
+801019e7:	57                   	push   %edi
+801019e8:	56                   	push   %esi
+801019e9:	53                   	push   %ebx
+801019ea:	83 ec 0c             	sub    $0xc,%esp
+801019ed:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801019f0:	8b 75 0c             	mov    0xc(%ebp),%esi
+801019f3:	8b 7d 10             	mov    0x10(%ebp),%edi
+  int r;
+
+  if(f->readable == 0)
+801019f6:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+801019fa:	74 64                	je     80101a60 <fileread+0x80>
+    return -1;
+  if(f->type == FD_PIPE)
+801019fc:	8b 03                	mov    (%ebx),%eax
+801019fe:	83 f8 01             	cmp    $0x1,%eax
+80101a01:	74 45                	je     80101a48 <fileread+0x68>
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+80101a03:	83 f8 02             	cmp    $0x2,%eax
+80101a06:	75 5f                	jne    80101a67 <fileread+0x87>
+    ilock(f->ip);
+80101a08:	83 ec 0c             	sub    $0xc,%esp
+80101a0b:	ff 73 10             	pushl  0x10(%ebx)
+80101a0e:	e8 3d 07 00 00       	call   80102150 <ilock>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+80101a13:	57                   	push   %edi
+80101a14:	ff 73 14             	pushl  0x14(%ebx)
+80101a17:	56                   	push   %esi
+80101a18:	ff 73 10             	pushl  0x10(%ebx)
+80101a1b:	e8 30 0a 00 00       	call   80102450 <readi>
+80101a20:	83 c4 20             	add    $0x20,%esp
+80101a23:	89 c6                	mov    %eax,%esi
+80101a25:	85 c0                	test   %eax,%eax
+80101a27:	7e 03                	jle    80101a2c <fileread+0x4c>
+      f->off += r;
+80101a29:	01 43 14             	add    %eax,0x14(%ebx)
+    iunlock(f->ip);
+80101a2c:	83 ec 0c             	sub    $0xc,%esp
+80101a2f:	ff 73 10             	pushl  0x10(%ebx)
+80101a32:	e8 f9 07 00 00       	call   80102230 <iunlock>
+    return r;
+80101a37:	83 c4 10             	add    $0x10,%esp
+  }
+  panic("fileread");
+}
+80101a3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a3d:	89 f0                	mov    %esi,%eax
+80101a3f:	5b                   	pop    %ebx
+80101a40:	5e                   	pop    %esi
+80101a41:	5f                   	pop    %edi
+80101a42:	5d                   	pop    %ebp
+80101a43:	c3                   	ret    
+80101a44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return piperead(f->pipe, addr, n);
+80101a48:	8b 43 0c             	mov    0xc(%ebx),%eax
+80101a4b:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80101a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a51:	5b                   	pop    %ebx
+80101a52:	5e                   	pop    %esi
+80101a53:	5f                   	pop    %edi
+80101a54:	5d                   	pop    %ebp
+    return piperead(f->pipe, addr, n);
+80101a55:	e9 36 26 00 00       	jmp    80104090 <piperead>
+80101a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80101a60:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80101a65:	eb d3                	jmp    80101a3a <fileread+0x5a>
+  panic("fileread");
+80101a67:	83 ec 0c             	sub    $0xc,%esp
+80101a6a:	68 be 85 10 80       	push   $0x801085be
+80101a6f:	e8 1c e9 ff ff       	call   80100390 <panic>
+80101a74:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101a7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101a7f:	90                   	nop
+
+80101a80 <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+80101a80:	f3 0f 1e fb          	endbr32 
+80101a84:	55                   	push   %ebp
+80101a85:	89 e5                	mov    %esp,%ebp
+80101a87:	57                   	push   %edi
+80101a88:	56                   	push   %esi
+80101a89:	53                   	push   %ebx
+80101a8a:	83 ec 1c             	sub    $0x1c,%esp
+80101a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101a90:	8b 75 08             	mov    0x8(%ebp),%esi
+80101a93:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101a96:	8b 45 10             	mov    0x10(%ebp),%eax
+  int r;
+
+  if(f->writable == 0)
+80101a99:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
+{
+80101a9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(f->writable == 0)
+80101aa0:	0f 84 c1 00 00 00    	je     80101b67 <filewrite+0xe7>
+    return -1;
+  if(f->type == FD_PIPE)
+80101aa6:	8b 06                	mov    (%esi),%eax
+80101aa8:	83 f8 01             	cmp    $0x1,%eax
+80101aab:	0f 84 c3 00 00 00    	je     80101b74 <filewrite+0xf4>
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+80101ab1:	83 f8 02             	cmp    $0x2,%eax
+80101ab4:	0f 85 cc 00 00 00    	jne    80101b86 <filewrite+0x106>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+80101aba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    int i = 0;
+80101abd:	31 ff                	xor    %edi,%edi
+    while(i < n){
+80101abf:	85 c0                	test   %eax,%eax
+80101ac1:	7f 34                	jg     80101af7 <filewrite+0x77>
+80101ac3:	e9 98 00 00 00       	jmp    80101b60 <filewrite+0xe0>
+80101ac8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101acf:	90                   	nop
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+80101ad0:	01 46 14             	add    %eax,0x14(%esi)
+      iunlock(f->ip);
+80101ad3:	83 ec 0c             	sub    $0xc,%esp
+80101ad6:	ff 76 10             	pushl  0x10(%esi)
+        f->off += r;
+80101ad9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+      iunlock(f->ip);
+80101adc:	e8 4f 07 00 00       	call   80102230 <iunlock>
+      end_op();
+80101ae1:	e8 aa 1c 00 00       	call   80103790 <end_op>
+
+      if(r < 0)
+        break;
+      if(r != n1)
+80101ae6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101ae9:	83 c4 10             	add    $0x10,%esp
+80101aec:	39 c3                	cmp    %eax,%ebx
+80101aee:	75 60                	jne    80101b50 <filewrite+0xd0>
+        panic("short filewrite");
+      i += r;
+80101af0:	01 df                	add    %ebx,%edi
+    while(i < n){
+80101af2:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101af5:	7e 69                	jle    80101b60 <filewrite+0xe0>
+      int n1 = n - i;
+80101af7:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101afa:	b8 00 06 00 00       	mov    $0x600,%eax
+80101aff:	29 fb                	sub    %edi,%ebx
+      if(n1 > max)
+80101b01:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
+80101b07:	0f 4f d8             	cmovg  %eax,%ebx
+      begin_op();
+80101b0a:	e8 11 1c 00 00       	call   80103720 <begin_op>
+      ilock(f->ip);
+80101b0f:	83 ec 0c             	sub    $0xc,%esp
+80101b12:	ff 76 10             	pushl  0x10(%esi)
+80101b15:	e8 36 06 00 00       	call   80102150 <ilock>
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+80101b1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101b1d:	53                   	push   %ebx
+80101b1e:	ff 76 14             	pushl  0x14(%esi)
+80101b21:	01 f8                	add    %edi,%eax
+80101b23:	50                   	push   %eax
+80101b24:	ff 76 10             	pushl  0x10(%esi)
+80101b27:	e8 24 0a 00 00       	call   80102550 <writei>
+80101b2c:	83 c4 20             	add    $0x20,%esp
+80101b2f:	85 c0                	test   %eax,%eax
+80101b31:	7f 9d                	jg     80101ad0 <filewrite+0x50>
+      iunlock(f->ip);
+80101b33:	83 ec 0c             	sub    $0xc,%esp
+80101b36:	ff 76 10             	pushl  0x10(%esi)
+80101b39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101b3c:	e8 ef 06 00 00       	call   80102230 <iunlock>
+      end_op();
+80101b41:	e8 4a 1c 00 00       	call   80103790 <end_op>
+      if(r < 0)
+80101b46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101b49:	83 c4 10             	add    $0x10,%esp
+80101b4c:	85 c0                	test   %eax,%eax
+80101b4e:	75 17                	jne    80101b67 <filewrite+0xe7>
+        panic("short filewrite");
+80101b50:	83 ec 0c             	sub    $0xc,%esp
+80101b53:	68 c7 85 10 80       	push   $0x801085c7
+80101b58:	e8 33 e8 ff ff       	call   80100390 <panic>
+80101b5d:	8d 76 00             	lea    0x0(%esi),%esi
+    }
+    return i == n ? n : -1;
+80101b60:	89 f8                	mov    %edi,%eax
+80101b62:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80101b65:	74 05                	je     80101b6c <filewrite+0xec>
+80101b67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  panic("filewrite");
+}
+80101b6c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b6f:	5b                   	pop    %ebx
+80101b70:	5e                   	pop    %esi
+80101b71:	5f                   	pop    %edi
+80101b72:	5d                   	pop    %ebp
+80101b73:	c3                   	ret    
+    return pipewrite(f->pipe, addr, n);
+80101b74:	8b 46 0c             	mov    0xc(%esi),%eax
+80101b77:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80101b7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b7d:	5b                   	pop    %ebx
+80101b7e:	5e                   	pop    %esi
+80101b7f:	5f                   	pop    %edi
+80101b80:	5d                   	pop    %ebp
+    return pipewrite(f->pipe, addr, n);
+80101b81:	e9 0a 24 00 00       	jmp    80103f90 <pipewrite>
+  panic("filewrite");
+80101b86:	83 ec 0c             	sub    $0xc,%esp
+80101b89:	68 cd 85 10 80       	push   $0x801085cd
+80101b8e:	e8 fd e7 ff ff       	call   80100390 <panic>
+80101b93:	66 90                	xchg   %ax,%ax
+80101b95:	66 90                	xchg   %ax,%ax
+80101b97:	66 90                	xchg   %ax,%ax
+80101b99:	66 90                	xchg   %ax,%ax
+80101b9b:	66 90                	xchg   %ax,%ax
+80101b9d:	66 90                	xchg   %ax,%ax
+80101b9f:	90                   	nop
+
+80101ba0 <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+80101ba0:	55                   	push   %ebp
+80101ba1:	89 c1                	mov    %eax,%ecx
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+80101ba3:	89 d0                	mov    %edx,%eax
+80101ba5:	c1 e8 0c             	shr    $0xc,%eax
+80101ba8:	03 05 d8 33 11 80    	add    0x801133d8,%eax
+{
+80101bae:	89 e5                	mov    %esp,%ebp
+80101bb0:	56                   	push   %esi
+80101bb1:	53                   	push   %ebx
+80101bb2:	89 d3                	mov    %edx,%ebx
+  bp = bread(dev, BBLOCK(b, sb));
+80101bb4:	83 ec 08             	sub    $0x8,%esp
+80101bb7:	50                   	push   %eax
+80101bb8:	51                   	push   %ecx
+80101bb9:	e8 12 e5 ff ff       	call   801000d0 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+80101bbe:	89 d9                	mov    %ebx,%ecx
+  if((bp->data[bi/8] & m) == 0)
+80101bc0:	c1 fb 03             	sar    $0x3,%ebx
+  m = 1 << (bi % 8);
+80101bc3:	ba 01 00 00 00       	mov    $0x1,%edx
+80101bc8:	83 e1 07             	and    $0x7,%ecx
+  if((bp->data[bi/8] & m) == 0)
+80101bcb:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+80101bd1:	83 c4 10             	add    $0x10,%esp
+  m = 1 << (bi % 8);
+80101bd4:	d3 e2                	shl    %cl,%edx
+  if((bp->data[bi/8] & m) == 0)
+80101bd6:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+80101bdb:	85 d1                	test   %edx,%ecx
+80101bdd:	74 25                	je     80101c04 <bfree+0x64>
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+80101bdf:	f7 d2                	not    %edx
+  log_write(bp);
+80101be1:	83 ec 0c             	sub    $0xc,%esp
+80101be4:	89 c6                	mov    %eax,%esi
+  bp->data[bi/8] &= ~m;
+80101be6:	21 ca                	and    %ecx,%edx
+80101be8:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
+  log_write(bp);
+80101bec:	50                   	push   %eax
+80101bed:	e8 0e 1d 00 00       	call   80103900 <log_write>
+  brelse(bp);
+80101bf2:	89 34 24             	mov    %esi,(%esp)
+80101bf5:	e8 f6 e5 ff ff       	call   801001f0 <brelse>
+}
+80101bfa:	83 c4 10             	add    $0x10,%esp
+80101bfd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101c00:	5b                   	pop    %ebx
+80101c01:	5e                   	pop    %esi
+80101c02:	5d                   	pop    %ebp
+80101c03:	c3                   	ret    
+    panic("freeing free block");
+80101c04:	83 ec 0c             	sub    $0xc,%esp
+80101c07:	68 d7 85 10 80       	push   $0x801085d7
+80101c0c:	e8 7f e7 ff ff       	call   80100390 <panic>
+80101c11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c1f:	90                   	nop
+
+80101c20 <balloc>:
+{
+80101c20:	55                   	push   %ebp
+80101c21:	89 e5                	mov    %esp,%ebp
+80101c23:	57                   	push   %edi
+80101c24:	56                   	push   %esi
+80101c25:	53                   	push   %ebx
+80101c26:	83 ec 1c             	sub    $0x1c,%esp
+  for(b = 0; b < sb.size; b += BPB){
+80101c29:	8b 0d c0 33 11 80    	mov    0x801133c0,%ecx
+{
+80101c2f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  for(b = 0; b < sb.size; b += BPB){
+80101c32:	85 c9                	test   %ecx,%ecx
+80101c34:	0f 84 87 00 00 00    	je     80101cc1 <balloc+0xa1>
+80101c3a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    bp = bread(dev, BBLOCK(b, sb));
+80101c41:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101c44:	83 ec 08             	sub    $0x8,%esp
+80101c47:	89 f0                	mov    %esi,%eax
+80101c49:	c1 f8 0c             	sar    $0xc,%eax
+80101c4c:	03 05 d8 33 11 80    	add    0x801133d8,%eax
+80101c52:	50                   	push   %eax
+80101c53:	ff 75 d8             	pushl  -0x28(%ebp)
+80101c56:	e8 75 e4 ff ff       	call   801000d0 <bread>
+80101c5b:	83 c4 10             	add    $0x10,%esp
+80101c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+80101c61:	a1 c0 33 11 80       	mov    0x801133c0,%eax
+80101c66:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101c69:	31 c0                	xor    %eax,%eax
+80101c6b:	eb 2f                	jmp    80101c9c <balloc+0x7c>
+80101c6d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 1 << (bi % 8);
+80101c70:	89 c1                	mov    %eax,%ecx
+80101c72:	bb 01 00 00 00       	mov    $0x1,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101c77:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      m = 1 << (bi % 8);
+80101c7a:	83 e1 07             	and    $0x7,%ecx
+80101c7d:	d3 e3                	shl    %cl,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101c7f:	89 c1                	mov    %eax,%ecx
+80101c81:	c1 f9 03             	sar    $0x3,%ecx
+80101c84:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+80101c89:	89 fa                	mov    %edi,%edx
+80101c8b:	85 df                	test   %ebx,%edi
+80101c8d:	74 41                	je     80101cd0 <balloc+0xb0>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+80101c8f:	83 c0 01             	add    $0x1,%eax
+80101c92:	83 c6 01             	add    $0x1,%esi
+80101c95:	3d 00 10 00 00       	cmp    $0x1000,%eax
+80101c9a:	74 05                	je     80101ca1 <balloc+0x81>
+80101c9c:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+80101c9f:	77 cf                	ja     80101c70 <balloc+0x50>
+    brelse(bp);
+80101ca1:	83 ec 0c             	sub    $0xc,%esp
+80101ca4:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101ca7:	e8 44 e5 ff ff       	call   801001f0 <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+80101cac:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+80101cb3:	83 c4 10             	add    $0x10,%esp
+80101cb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101cb9:	39 05 c0 33 11 80    	cmp    %eax,0x801133c0
+80101cbf:	77 80                	ja     80101c41 <balloc+0x21>
+  panic("balloc: out of blocks");
+80101cc1:	83 ec 0c             	sub    $0xc,%esp
+80101cc4:	68 ea 85 10 80       	push   $0x801085ea
+80101cc9:	e8 c2 e6 ff ff       	call   80100390 <panic>
+80101cce:	66 90                	xchg   %ax,%ax
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101cd0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        log_write(bp);
+80101cd3:	83 ec 0c             	sub    $0xc,%esp
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101cd6:	09 da                	or     %ebx,%edx
+80101cd8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+        log_write(bp);
+80101cdc:	57                   	push   %edi
+80101cdd:	e8 1e 1c 00 00       	call   80103900 <log_write>
+        brelse(bp);
+80101ce2:	89 3c 24             	mov    %edi,(%esp)
+80101ce5:	e8 06 e5 ff ff       	call   801001f0 <brelse>
+  bp = bread(dev, bno);
+80101cea:	58                   	pop    %eax
+80101ceb:	5a                   	pop    %edx
+80101cec:	56                   	push   %esi
+80101ced:	ff 75 d8             	pushl  -0x28(%ebp)
+80101cf0:	e8 db e3 ff ff       	call   801000d0 <bread>
+  memset(bp->data, 0, BSIZE);
+80101cf5:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, bno);
+80101cf8:	89 c3                	mov    %eax,%ebx
+  memset(bp->data, 0, BSIZE);
+80101cfa:	8d 40 5c             	lea    0x5c(%eax),%eax
+80101cfd:	68 00 02 00 00       	push   $0x200
+80101d02:	6a 00                	push   $0x0
+80101d04:	50                   	push   %eax
+80101d05:	e8 d6 3b 00 00       	call   801058e0 <memset>
+  log_write(bp);
+80101d0a:	89 1c 24             	mov    %ebx,(%esp)
+80101d0d:	e8 ee 1b 00 00       	call   80103900 <log_write>
+  brelse(bp);
+80101d12:	89 1c 24             	mov    %ebx,(%esp)
+80101d15:	e8 d6 e4 ff ff       	call   801001f0 <brelse>
+}
+80101d1a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d1d:	89 f0                	mov    %esi,%eax
+80101d1f:	5b                   	pop    %ebx
+80101d20:	5e                   	pop    %esi
+80101d21:	5f                   	pop    %edi
+80101d22:	5d                   	pop    %ebp
+80101d23:	c3                   	ret    
+80101d24:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d2f:	90                   	nop
+
+80101d30 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+80101d30:	55                   	push   %ebp
+80101d31:	89 e5                	mov    %esp,%ebp
+80101d33:	57                   	push   %edi
+80101d34:	89 c7                	mov    %eax,%edi
+80101d36:	56                   	push   %esi
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+80101d37:	31 f6                	xor    %esi,%esi
+{
+80101d39:	53                   	push   %ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d3a:	bb 14 34 11 80       	mov    $0x80113414,%ebx
+{
+80101d3f:	83 ec 28             	sub    $0x28,%esp
+80101d42:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  acquire(&icache.lock);
+80101d45:	68 e0 33 11 80       	push   $0x801133e0
+80101d4a:	e8 81 3a 00 00       	call   801057d0 <acquire>
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d4f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  acquire(&icache.lock);
+80101d52:	83 c4 10             	add    $0x10,%esp
+80101d55:	eb 1b                	jmp    80101d72 <iget+0x42>
+80101d57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d5e:	66 90                	xchg   %ax,%ax
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101d60:	39 3b                	cmp    %edi,(%ebx)
+80101d62:	74 6c                	je     80101dd0 <iget+0xa0>
+80101d64:	81 c3 90 00 00 00    	add    $0x90,%ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d6a:	81 fb 34 50 11 80    	cmp    $0x80115034,%ebx
+80101d70:	73 26                	jae    80101d98 <iget+0x68>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101d72:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101d75:	85 c9                	test   %ecx,%ecx
+80101d77:	7f e7                	jg     80101d60 <iget+0x30>
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+80101d79:	85 f6                	test   %esi,%esi
+80101d7b:	75 e7                	jne    80101d64 <iget+0x34>
+80101d7d:	89 d8                	mov    %ebx,%eax
+80101d7f:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101d85:	85 c9                	test   %ecx,%ecx
+80101d87:	75 6e                	jne    80101df7 <iget+0xc7>
+80101d89:	89 c6                	mov    %eax,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d8b:	81 fb 34 50 11 80    	cmp    $0x80115034,%ebx
+80101d91:	72 df                	jb     80101d72 <iget+0x42>
+80101d93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d97:	90                   	nop
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+80101d98:	85 f6                	test   %esi,%esi
+80101d9a:	74 73                	je     80101e0f <iget+0xdf>
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+80101d9c:	83 ec 0c             	sub    $0xc,%esp
+  ip->dev = dev;
+80101d9f:	89 3e                	mov    %edi,(%esi)
+  ip->inum = inum;
+80101da1:	89 56 04             	mov    %edx,0x4(%esi)
+  ip->ref = 1;
+80101da4:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+  ip->valid = 0;
+80101dab:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+  release(&icache.lock);
+80101db2:	68 e0 33 11 80       	push   $0x801133e0
+80101db7:	e8 d4 3a 00 00       	call   80105890 <release>
+
+  return ip;
+80101dbc:	83 c4 10             	add    $0x10,%esp
+}
+80101dbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101dc2:	89 f0                	mov    %esi,%eax
+80101dc4:	5b                   	pop    %ebx
+80101dc5:	5e                   	pop    %esi
+80101dc6:	5f                   	pop    %edi
+80101dc7:	5d                   	pop    %ebp
+80101dc8:	c3                   	ret    
+80101dc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101dd0:	39 53 04             	cmp    %edx,0x4(%ebx)
+80101dd3:	75 8f                	jne    80101d64 <iget+0x34>
+      release(&icache.lock);
+80101dd5:	83 ec 0c             	sub    $0xc,%esp
+      ip->ref++;
+80101dd8:	83 c1 01             	add    $0x1,%ecx
+      return ip;
+80101ddb:	89 de                	mov    %ebx,%esi
+      release(&icache.lock);
+80101ddd:	68 e0 33 11 80       	push   $0x801133e0
+      ip->ref++;
+80101de2:	89 4b 08             	mov    %ecx,0x8(%ebx)
+      release(&icache.lock);
+80101de5:	e8 a6 3a 00 00       	call   80105890 <release>
+      return ip;
+80101dea:	83 c4 10             	add    $0x10,%esp
+}
+80101ded:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101df0:	89 f0                	mov    %esi,%eax
+80101df2:	5b                   	pop    %ebx
+80101df3:	5e                   	pop    %esi
+80101df4:	5f                   	pop    %edi
+80101df5:	5d                   	pop    %ebp
+80101df6:	c3                   	ret    
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101df7:	81 fb 34 50 11 80    	cmp    $0x80115034,%ebx
+80101dfd:	73 10                	jae    80101e0f <iget+0xdf>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101dff:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101e02:	85 c9                	test   %ecx,%ecx
+80101e04:	0f 8f 56 ff ff ff    	jg     80101d60 <iget+0x30>
+80101e0a:	e9 6e ff ff ff       	jmp    80101d7d <iget+0x4d>
+    panic("iget: no inodes");
+80101e0f:	83 ec 0c             	sub    $0xc,%esp
+80101e12:	68 00 86 10 80       	push   $0x80108600
+80101e17:	e8 74 e5 ff ff       	call   80100390 <panic>
+80101e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101e20 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+80101e20:	55                   	push   %ebp
+80101e21:	89 e5                	mov    %esp,%ebp
+80101e23:	57                   	push   %edi
+80101e24:	56                   	push   %esi
+80101e25:	89 c6                	mov    %eax,%esi
+80101e27:	53                   	push   %ebx
+80101e28:	83 ec 1c             	sub    $0x1c,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+80101e2b:	83 fa 0b             	cmp    $0xb,%edx
+80101e2e:	0f 86 84 00 00 00    	jbe    80101eb8 <bmap+0x98>
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+80101e34:	8d 5a f4             	lea    -0xc(%edx),%ebx
+
+  if(bn < NINDIRECT){
+80101e37:	83 fb 7f             	cmp    $0x7f,%ebx
+80101e3a:	0f 87 98 00 00 00    	ja     80101ed8 <bmap+0xb8>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101e40:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
+80101e46:	8b 16                	mov    (%esi),%edx
+80101e48:	85 c0                	test   %eax,%eax
+80101e4a:	74 54                	je     80101ea0 <bmap+0x80>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+80101e4c:	83 ec 08             	sub    $0x8,%esp
+80101e4f:	50                   	push   %eax
+80101e50:	52                   	push   %edx
+80101e51:	e8 7a e2 ff ff       	call   801000d0 <bread>
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+80101e56:	83 c4 10             	add    $0x10,%esp
+80101e59:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+    bp = bread(ip->dev, addr);
+80101e5d:	89 c7                	mov    %eax,%edi
+    if((addr = a[bn]) == 0){
+80101e5f:	8b 1a                	mov    (%edx),%ebx
+80101e61:	85 db                	test   %ebx,%ebx
+80101e63:	74 1b                	je     80101e80 <bmap+0x60>
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+80101e65:	83 ec 0c             	sub    $0xc,%esp
+80101e68:	57                   	push   %edi
+80101e69:	e8 82 e3 ff ff       	call   801001f0 <brelse>
+    return addr;
+80101e6e:	83 c4 10             	add    $0x10,%esp
+  }
+
+  panic("bmap: out of range");
+}
+80101e71:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101e74:	89 d8                	mov    %ebx,%eax
+80101e76:	5b                   	pop    %ebx
+80101e77:	5e                   	pop    %esi
+80101e78:	5f                   	pop    %edi
+80101e79:	5d                   	pop    %ebp
+80101e7a:	c3                   	ret    
+80101e7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101e7f:	90                   	nop
+      a[bn] = addr = balloc(ip->dev);
+80101e80:	8b 06                	mov    (%esi),%eax
+80101e82:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101e85:	e8 96 fd ff ff       	call   80101c20 <balloc>
+80101e8a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      log_write(bp);
+80101e8d:	83 ec 0c             	sub    $0xc,%esp
+      a[bn] = addr = balloc(ip->dev);
+80101e90:	89 c3                	mov    %eax,%ebx
+80101e92:	89 02                	mov    %eax,(%edx)
+      log_write(bp);
+80101e94:	57                   	push   %edi
+80101e95:	e8 66 1a 00 00       	call   80103900 <log_write>
+80101e9a:	83 c4 10             	add    $0x10,%esp
+80101e9d:	eb c6                	jmp    80101e65 <bmap+0x45>
+80101e9f:	90                   	nop
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+80101ea0:	89 d0                	mov    %edx,%eax
+80101ea2:	e8 79 fd ff ff       	call   80101c20 <balloc>
+80101ea7:	8b 16                	mov    (%esi),%edx
+80101ea9:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+80101eaf:	eb 9b                	jmp    80101e4c <bmap+0x2c>
+80101eb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((addr = ip->addrs[bn]) == 0)
+80101eb8:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+80101ebb:	8b 5f 5c             	mov    0x5c(%edi),%ebx
+80101ebe:	85 db                	test   %ebx,%ebx
+80101ec0:	75 af                	jne    80101e71 <bmap+0x51>
+      ip->addrs[bn] = addr = balloc(ip->dev);
+80101ec2:	8b 00                	mov    (%eax),%eax
+80101ec4:	e8 57 fd ff ff       	call   80101c20 <balloc>
+80101ec9:	89 47 5c             	mov    %eax,0x5c(%edi)
+80101ecc:	89 c3                	mov    %eax,%ebx
+}
+80101ece:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ed1:	89 d8                	mov    %ebx,%eax
+80101ed3:	5b                   	pop    %ebx
+80101ed4:	5e                   	pop    %esi
+80101ed5:	5f                   	pop    %edi
+80101ed6:	5d                   	pop    %ebp
+80101ed7:	c3                   	ret    
+  panic("bmap: out of range");
+80101ed8:	83 ec 0c             	sub    $0xc,%esp
+80101edb:	68 10 86 10 80       	push   $0x80108610
+80101ee0:	e8 ab e4 ff ff       	call   80100390 <panic>
+80101ee5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101ef0 <readsb>:
+{
+80101ef0:	f3 0f 1e fb          	endbr32 
+80101ef4:	55                   	push   %ebp
+80101ef5:	89 e5                	mov    %esp,%ebp
+80101ef7:	56                   	push   %esi
+80101ef8:	53                   	push   %ebx
+80101ef9:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bp = bread(dev, 1);
+80101efc:	83 ec 08             	sub    $0x8,%esp
+80101eff:	6a 01                	push   $0x1
+80101f01:	ff 75 08             	pushl  0x8(%ebp)
+80101f04:	e8 c7 e1 ff ff       	call   801000d0 <bread>
+  memmove(sb, bp->data, sizeof(*sb));
+80101f09:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, 1);
+80101f0c:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+80101f0e:	8d 40 5c             	lea    0x5c(%eax),%eax
+80101f11:	6a 1c                	push   $0x1c
+80101f13:	50                   	push   %eax
+80101f14:	56                   	push   %esi
+80101f15:	e8 66 3a 00 00       	call   80105980 <memmove>
+  brelse(bp);
+80101f1a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101f1d:	83 c4 10             	add    $0x10,%esp
+}
+80101f20:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101f23:	5b                   	pop    %ebx
+80101f24:	5e                   	pop    %esi
+80101f25:	5d                   	pop    %ebp
+  brelse(bp);
+80101f26:	e9 c5 e2 ff ff       	jmp    801001f0 <brelse>
+80101f2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101f2f:	90                   	nop
+
+80101f30 <iinit>:
+{
+80101f30:	f3 0f 1e fb          	endbr32 
+80101f34:	55                   	push   %ebp
+80101f35:	89 e5                	mov    %esp,%ebp
+80101f37:	53                   	push   %ebx
+80101f38:	bb 20 34 11 80       	mov    $0x80113420,%ebx
+80101f3d:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&icache.lock, "icache");
+80101f40:	68 23 86 10 80       	push   $0x80108623
+80101f45:	68 e0 33 11 80       	push   $0x801133e0
+80101f4a:	e8 01 37 00 00       	call   80105650 <initlock>
+  for(i = 0; i < NINODE; i++) {
+80101f4f:	83 c4 10             	add    $0x10,%esp
+80101f52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    initsleeplock(&icache.inode[i].lock, "inode");
+80101f58:	83 ec 08             	sub    $0x8,%esp
+80101f5b:	68 2a 86 10 80       	push   $0x8010862a
+80101f60:	53                   	push   %ebx
+80101f61:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101f67:	e8 a4 35 00 00       	call   80105510 <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+80101f6c:	83 c4 10             	add    $0x10,%esp
+80101f6f:	81 fb 40 50 11 80    	cmp    $0x80115040,%ebx
+80101f75:	75 e1                	jne    80101f58 <iinit+0x28>
+  readsb(dev, &sb);
+80101f77:	83 ec 08             	sub    $0x8,%esp
+80101f7a:	68 c0 33 11 80       	push   $0x801133c0
+80101f7f:	ff 75 08             	pushl  0x8(%ebp)
+80101f82:	e8 69 ff ff ff       	call   80101ef0 <readsb>
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+80101f87:	ff 35 d8 33 11 80    	pushl  0x801133d8
+80101f8d:	ff 35 d4 33 11 80    	pushl  0x801133d4
+80101f93:	ff 35 d0 33 11 80    	pushl  0x801133d0
+80101f99:	ff 35 cc 33 11 80    	pushl  0x801133cc
+80101f9f:	ff 35 c8 33 11 80    	pushl  0x801133c8
+80101fa5:	ff 35 c4 33 11 80    	pushl  0x801133c4
+80101fab:	ff 35 c0 33 11 80    	pushl  0x801133c0
+80101fb1:	68 90 86 10 80       	push   $0x80108690
+80101fb6:	e8 35 e7 ff ff       	call   801006f0 <cprintf>
+}
+80101fbb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101fbe:	83 c4 30             	add    $0x30,%esp
+80101fc1:	c9                   	leave  
+80101fc2:	c3                   	ret    
+80101fc3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101fca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101fd0 <ialloc>:
+{
+80101fd0:	f3 0f 1e fb          	endbr32 
+80101fd4:	55                   	push   %ebp
+80101fd5:	89 e5                	mov    %esp,%ebp
+80101fd7:	57                   	push   %edi
+80101fd8:	56                   	push   %esi
+80101fd9:	53                   	push   %ebx
+80101fda:	83 ec 1c             	sub    $0x1c,%esp
+80101fdd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101fe0:	83 3d c8 33 11 80 01 	cmpl   $0x1,0x801133c8
+{
+80101fe7:	8b 75 08             	mov    0x8(%ebp),%esi
+80101fea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101fed:	0f 86 8d 00 00 00    	jbe    80102080 <ialloc+0xb0>
+80101ff3:	bf 01 00 00 00       	mov    $0x1,%edi
+80101ff8:	eb 1d                	jmp    80102017 <ialloc+0x47>
+80101ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    brelse(bp);
+80102000:	83 ec 0c             	sub    $0xc,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+80102003:	83 c7 01             	add    $0x1,%edi
+    brelse(bp);
+80102006:	53                   	push   %ebx
+80102007:	e8 e4 e1 ff ff       	call   801001f0 <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+8010200c:	83 c4 10             	add    $0x10,%esp
+8010200f:	3b 3d c8 33 11 80    	cmp    0x801133c8,%edi
+80102015:	73 69                	jae    80102080 <ialloc+0xb0>
+    bp = bread(dev, IBLOCK(inum, sb));
+80102017:	89 f8                	mov    %edi,%eax
+80102019:	83 ec 08             	sub    $0x8,%esp
+8010201c:	c1 e8 03             	shr    $0x3,%eax
+8010201f:	03 05 d4 33 11 80    	add    0x801133d4,%eax
+80102025:	50                   	push   %eax
+80102026:	56                   	push   %esi
+80102027:	e8 a4 e0 ff ff       	call   801000d0 <bread>
+    if(dip->type == 0){  // a free inode
+8010202c:	83 c4 10             	add    $0x10,%esp
+    bp = bread(dev, IBLOCK(inum, sb));
+8010202f:	89 c3                	mov    %eax,%ebx
+    dip = (struct dinode*)bp->data + inum%IPB;
+80102031:	89 f8                	mov    %edi,%eax
+80102033:	83 e0 07             	and    $0x7,%eax
+80102036:	c1 e0 06             	shl    $0x6,%eax
+80102039:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
+    if(dip->type == 0){  // a free inode
+8010203d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80102041:	75 bd                	jne    80102000 <ialloc+0x30>
+      memset(dip, 0, sizeof(*dip));
+80102043:	83 ec 04             	sub    $0x4,%esp
+80102046:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80102049:	6a 40                	push   $0x40
+8010204b:	6a 00                	push   $0x0
+8010204d:	51                   	push   %ecx
+8010204e:	e8 8d 38 00 00       	call   801058e0 <memset>
+      dip->type = type;
+80102053:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80102057:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010205a:	66 89 01             	mov    %ax,(%ecx)
+      log_write(bp);   // mark it allocated on the disk
+8010205d:	89 1c 24             	mov    %ebx,(%esp)
+80102060:	e8 9b 18 00 00       	call   80103900 <log_write>
+      brelse(bp);
+80102065:	89 1c 24             	mov    %ebx,(%esp)
+80102068:	e8 83 e1 ff ff       	call   801001f0 <brelse>
+      return iget(dev, inum);
+8010206d:	83 c4 10             	add    $0x10,%esp
+}
+80102070:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return iget(dev, inum);
+80102073:	89 fa                	mov    %edi,%edx
+}
+80102075:	5b                   	pop    %ebx
+      return iget(dev, inum);
+80102076:	89 f0                	mov    %esi,%eax
+}
+80102078:	5e                   	pop    %esi
+80102079:	5f                   	pop    %edi
+8010207a:	5d                   	pop    %ebp
+      return iget(dev, inum);
+8010207b:	e9 b0 fc ff ff       	jmp    80101d30 <iget>
+  panic("ialloc: no inodes");
+80102080:	83 ec 0c             	sub    $0xc,%esp
+80102083:	68 30 86 10 80       	push   $0x80108630
+80102088:	e8 03 e3 ff ff       	call   80100390 <panic>
+8010208d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102090 <iupdate>:
+{
+80102090:	f3 0f 1e fb          	endbr32 
+80102094:	55                   	push   %ebp
+80102095:	89 e5                	mov    %esp,%ebp
+80102097:	56                   	push   %esi
+80102098:	53                   	push   %ebx
+80102099:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+8010209c:	8b 43 04             	mov    0x4(%ebx),%eax
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010209f:	83 c3 5c             	add    $0x5c,%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801020a2:	83 ec 08             	sub    $0x8,%esp
+801020a5:	c1 e8 03             	shr    $0x3,%eax
+801020a8:	03 05 d4 33 11 80    	add    0x801133d4,%eax
+801020ae:	50                   	push   %eax
+801020af:	ff 73 a4             	pushl  -0x5c(%ebx)
+801020b2:	e8 19 e0 ff ff       	call   801000d0 <bread>
+  dip->type = ip->type;
+801020b7:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801020bb:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801020be:	89 c6                	mov    %eax,%esi
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+801020c0:	8b 43 a8             	mov    -0x58(%ebx),%eax
+801020c3:	83 e0 07             	and    $0x7,%eax
+801020c6:	c1 e0 06             	shl    $0x6,%eax
+801020c9:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+  dip->type = ip->type;
+801020cd:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+801020d0:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801020d4:	83 c0 0c             	add    $0xc,%eax
+  dip->major = ip->major;
+801020d7:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+  dip->minor = ip->minor;
+801020db:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+801020df:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+  dip->nlink = ip->nlink;
+801020e3:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+801020e7:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+  dip->size = ip->size;
+801020eb:	8b 53 fc             	mov    -0x4(%ebx),%edx
+801020ee:	89 50 fc             	mov    %edx,-0x4(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801020f1:	6a 34                	push   $0x34
+801020f3:	53                   	push   %ebx
+801020f4:	50                   	push   %eax
+801020f5:	e8 86 38 00 00       	call   80105980 <memmove>
+  log_write(bp);
+801020fa:	89 34 24             	mov    %esi,(%esp)
+801020fd:	e8 fe 17 00 00       	call   80103900 <log_write>
+  brelse(bp);
+80102102:	89 75 08             	mov    %esi,0x8(%ebp)
+80102105:	83 c4 10             	add    $0x10,%esp
+}
+80102108:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010210b:	5b                   	pop    %ebx
+8010210c:	5e                   	pop    %esi
+8010210d:	5d                   	pop    %ebp
+  brelse(bp);
+8010210e:	e9 dd e0 ff ff       	jmp    801001f0 <brelse>
+80102113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010211a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102120 <idup>:
+{
+80102120:	f3 0f 1e fb          	endbr32 
+80102124:	55                   	push   %ebp
+80102125:	89 e5                	mov    %esp,%ebp
+80102127:	53                   	push   %ebx
+80102128:	83 ec 10             	sub    $0x10,%esp
+8010212b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&icache.lock);
+8010212e:	68 e0 33 11 80       	push   $0x801133e0
+80102133:	e8 98 36 00 00       	call   801057d0 <acquire>
+  ip->ref++;
+80102138:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+8010213c:	c7 04 24 e0 33 11 80 	movl   $0x801133e0,(%esp)
+80102143:	e8 48 37 00 00       	call   80105890 <release>
+}
+80102148:	89 d8                	mov    %ebx,%eax
+8010214a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010214d:	c9                   	leave  
+8010214e:	c3                   	ret    
+8010214f:	90                   	nop
+
+80102150 <ilock>:
+{
+80102150:	f3 0f 1e fb          	endbr32 
+80102154:	55                   	push   %ebp
+80102155:	89 e5                	mov    %esp,%ebp
+80102157:	56                   	push   %esi
+80102158:	53                   	push   %ebx
+80102159:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || ip->ref < 1)
+8010215c:	85 db                	test   %ebx,%ebx
+8010215e:	0f 84 b3 00 00 00    	je     80102217 <ilock+0xc7>
+80102164:	8b 53 08             	mov    0x8(%ebx),%edx
+80102167:	85 d2                	test   %edx,%edx
+80102169:	0f 8e a8 00 00 00    	jle    80102217 <ilock+0xc7>
+  acquiresleep(&ip->lock);
+8010216f:	83 ec 0c             	sub    $0xc,%esp
+80102172:	8d 43 0c             	lea    0xc(%ebx),%eax
+80102175:	50                   	push   %eax
+80102176:	e8 d5 33 00 00       	call   80105550 <acquiresleep>
+  if(ip->valid == 0){
+8010217b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010217e:	83 c4 10             	add    $0x10,%esp
+80102181:	85 c0                	test   %eax,%eax
+80102183:	74 0b                	je     80102190 <ilock+0x40>
+}
+80102185:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102188:	5b                   	pop    %ebx
+80102189:	5e                   	pop    %esi
+8010218a:	5d                   	pop    %ebp
+8010218b:	c3                   	ret    
+8010218c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+80102190:	8b 43 04             	mov    0x4(%ebx),%eax
+80102193:	83 ec 08             	sub    $0x8,%esp
+80102196:	c1 e8 03             	shr    $0x3,%eax
+80102199:	03 05 d4 33 11 80    	add    0x801133d4,%eax
+8010219f:	50                   	push   %eax
+801021a0:	ff 33                	pushl  (%ebx)
+801021a2:	e8 29 df ff ff       	call   801000d0 <bread>
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801021a7:	83 c4 0c             	add    $0xc,%esp
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801021aa:	89 c6                	mov    %eax,%esi
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801021ac:	8b 43 04             	mov    0x4(%ebx),%eax
+801021af:	83 e0 07             	and    $0x7,%eax
+801021b2:	c1 e0 06             	shl    $0x6,%eax
+801021b5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+    ip->type = dip->type;
+801021b9:	0f b7 10             	movzwl (%eax),%edx
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801021bc:	83 c0 0c             	add    $0xc,%eax
+    ip->type = dip->type;
+801021bf:	66 89 53 50          	mov    %dx,0x50(%ebx)
+    ip->major = dip->major;
+801021c3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+801021c7:	66 89 53 52          	mov    %dx,0x52(%ebx)
+    ip->minor = dip->minor;
+801021cb:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+801021cf:	66 89 53 54          	mov    %dx,0x54(%ebx)
+    ip->nlink = dip->nlink;
+801021d3:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+801021d7:	66 89 53 56          	mov    %dx,0x56(%ebx)
+    ip->size = dip->size;
+801021db:	8b 50 fc             	mov    -0x4(%eax),%edx
+801021de:	89 53 58             	mov    %edx,0x58(%ebx)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801021e1:	6a 34                	push   $0x34
+801021e3:	50                   	push   %eax
+801021e4:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801021e7:	50                   	push   %eax
+801021e8:	e8 93 37 00 00       	call   80105980 <memmove>
+    brelse(bp);
+801021ed:	89 34 24             	mov    %esi,(%esp)
+801021f0:	e8 fb df ff ff       	call   801001f0 <brelse>
+    if(ip->type == 0)
+801021f5:	83 c4 10             	add    $0x10,%esp
+801021f8:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+    ip->valid = 1;
+801021fd:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+    if(ip->type == 0)
+80102204:	0f 85 7b ff ff ff    	jne    80102185 <ilock+0x35>
+      panic("ilock: no type");
+8010220a:	83 ec 0c             	sub    $0xc,%esp
+8010220d:	68 48 86 10 80       	push   $0x80108648
+80102212:	e8 79 e1 ff ff       	call   80100390 <panic>
+    panic("ilock");
+80102217:	83 ec 0c             	sub    $0xc,%esp
+8010221a:	68 42 86 10 80       	push   $0x80108642
+8010221f:	e8 6c e1 ff ff       	call   80100390 <panic>
+80102224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010222b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010222f:	90                   	nop
+
+80102230 <iunlock>:
+{
+80102230:	f3 0f 1e fb          	endbr32 
+80102234:	55                   	push   %ebp
+80102235:	89 e5                	mov    %esp,%ebp
+80102237:	56                   	push   %esi
+80102238:	53                   	push   %ebx
+80102239:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+8010223c:	85 db                	test   %ebx,%ebx
+8010223e:	74 28                	je     80102268 <iunlock+0x38>
+80102240:	83 ec 0c             	sub    $0xc,%esp
+80102243:	8d 73 0c             	lea    0xc(%ebx),%esi
+80102246:	56                   	push   %esi
+80102247:	e8 a4 33 00 00       	call   801055f0 <holdingsleep>
+8010224c:	83 c4 10             	add    $0x10,%esp
+8010224f:	85 c0                	test   %eax,%eax
+80102251:	74 15                	je     80102268 <iunlock+0x38>
+80102253:	8b 43 08             	mov    0x8(%ebx),%eax
+80102256:	85 c0                	test   %eax,%eax
+80102258:	7e 0e                	jle    80102268 <iunlock+0x38>
+  releasesleep(&ip->lock);
+8010225a:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+8010225d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102260:	5b                   	pop    %ebx
+80102261:	5e                   	pop    %esi
+80102262:	5d                   	pop    %ebp
+  releasesleep(&ip->lock);
+80102263:	e9 48 33 00 00       	jmp    801055b0 <releasesleep>
+    panic("iunlock");
+80102268:	83 ec 0c             	sub    $0xc,%esp
+8010226b:	68 57 86 10 80       	push   $0x80108657
+80102270:	e8 1b e1 ff ff       	call   80100390 <panic>
+80102275:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010227c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102280 <iput>:
+{
+80102280:	f3 0f 1e fb          	endbr32 
+80102284:	55                   	push   %ebp
+80102285:	89 e5                	mov    %esp,%ebp
+80102287:	57                   	push   %edi
+80102288:	56                   	push   %esi
+80102289:	53                   	push   %ebx
+8010228a:	83 ec 28             	sub    $0x28,%esp
+8010228d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquiresleep(&ip->lock);
+80102290:	8d 7b 0c             	lea    0xc(%ebx),%edi
+80102293:	57                   	push   %edi
+80102294:	e8 b7 32 00 00       	call   80105550 <acquiresleep>
+  if(ip->valid && ip->nlink == 0){
+80102299:	8b 53 4c             	mov    0x4c(%ebx),%edx
+8010229c:	83 c4 10             	add    $0x10,%esp
+8010229f:	85 d2                	test   %edx,%edx
+801022a1:	74 07                	je     801022aa <iput+0x2a>
+801022a3:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801022a8:	74 36                	je     801022e0 <iput+0x60>
+  releasesleep(&ip->lock);
+801022aa:	83 ec 0c             	sub    $0xc,%esp
+801022ad:	57                   	push   %edi
+801022ae:	e8 fd 32 00 00       	call   801055b0 <releasesleep>
+  acquire(&icache.lock);
+801022b3:	c7 04 24 e0 33 11 80 	movl   $0x801133e0,(%esp)
+801022ba:	e8 11 35 00 00       	call   801057d0 <acquire>
+  ip->ref--;
+801022bf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+801022c3:	83 c4 10             	add    $0x10,%esp
+801022c6:	c7 45 08 e0 33 11 80 	movl   $0x801133e0,0x8(%ebp)
+}
+801022cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801022d0:	5b                   	pop    %ebx
+801022d1:	5e                   	pop    %esi
+801022d2:	5f                   	pop    %edi
+801022d3:	5d                   	pop    %ebp
+  release(&icache.lock);
+801022d4:	e9 b7 35 00 00       	jmp    80105890 <release>
+801022d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    acquire(&icache.lock);
+801022e0:	83 ec 0c             	sub    $0xc,%esp
+801022e3:	68 e0 33 11 80       	push   $0x801133e0
+801022e8:	e8 e3 34 00 00       	call   801057d0 <acquire>
+    int r = ip->ref;
+801022ed:	8b 73 08             	mov    0x8(%ebx),%esi
+    release(&icache.lock);
+801022f0:	c7 04 24 e0 33 11 80 	movl   $0x801133e0,(%esp)
+801022f7:	e8 94 35 00 00       	call   80105890 <release>
+    if(r == 1){
+801022fc:	83 c4 10             	add    $0x10,%esp
+801022ff:	83 fe 01             	cmp    $0x1,%esi
+80102302:	75 a6                	jne    801022aa <iput+0x2a>
+80102304:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+8010230a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+8010230d:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102310:	89 cf                	mov    %ecx,%edi
+80102312:	eb 0b                	jmp    8010231f <iput+0x9f>
+80102314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80102318:	83 c6 04             	add    $0x4,%esi
+8010231b:	39 fe                	cmp    %edi,%esi
+8010231d:	74 19                	je     80102338 <iput+0xb8>
+    if(ip->addrs[i]){
+8010231f:	8b 16                	mov    (%esi),%edx
+80102321:	85 d2                	test   %edx,%edx
+80102323:	74 f3                	je     80102318 <iput+0x98>
+      bfree(ip->dev, ip->addrs[i]);
+80102325:	8b 03                	mov    (%ebx),%eax
+80102327:	e8 74 f8 ff ff       	call   80101ba0 <bfree>
+      ip->addrs[i] = 0;
+8010232c:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80102332:	eb e4                	jmp    80102318 <iput+0x98>
+80102334:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+80102338:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+8010233e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80102341:	85 c0                	test   %eax,%eax
+80102343:	75 33                	jne    80102378 <iput+0xf8>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+80102345:	83 ec 0c             	sub    $0xc,%esp
+  ip->size = 0;
+80102348:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  iupdate(ip);
+8010234f:	53                   	push   %ebx
+80102350:	e8 3b fd ff ff       	call   80102090 <iupdate>
+      ip->type = 0;
+80102355:	31 c0                	xor    %eax,%eax
+80102357:	66 89 43 50          	mov    %ax,0x50(%ebx)
+      iupdate(ip);
+8010235b:	89 1c 24             	mov    %ebx,(%esp)
+8010235e:	e8 2d fd ff ff       	call   80102090 <iupdate>
+      ip->valid = 0;
+80102363:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+8010236a:	83 c4 10             	add    $0x10,%esp
+8010236d:	e9 38 ff ff ff       	jmp    801022aa <iput+0x2a>
+80102372:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+80102378:	83 ec 08             	sub    $0x8,%esp
+8010237b:	50                   	push   %eax
+8010237c:	ff 33                	pushl  (%ebx)
+8010237e:	e8 4d dd ff ff       	call   801000d0 <bread>
+80102383:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80102386:	83 c4 10             	add    $0x10,%esp
+80102389:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+8010238f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(j = 0; j < NINDIRECT; j++){
+80102392:	8d 70 5c             	lea    0x5c(%eax),%esi
+80102395:	89 cf                	mov    %ecx,%edi
+80102397:	eb 0e                	jmp    801023a7 <iput+0x127>
+80102399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801023a0:	83 c6 04             	add    $0x4,%esi
+801023a3:	39 f7                	cmp    %esi,%edi
+801023a5:	74 19                	je     801023c0 <iput+0x140>
+      if(a[j])
+801023a7:	8b 16                	mov    (%esi),%edx
+801023a9:	85 d2                	test   %edx,%edx
+801023ab:	74 f3                	je     801023a0 <iput+0x120>
+        bfree(ip->dev, a[j]);
+801023ad:	8b 03                	mov    (%ebx),%eax
+801023af:	e8 ec f7 ff ff       	call   80101ba0 <bfree>
+801023b4:	eb ea                	jmp    801023a0 <iput+0x120>
+801023b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801023bd:	8d 76 00             	lea    0x0(%esi),%esi
+    brelse(bp);
+801023c0:	83 ec 0c             	sub    $0xc,%esp
+801023c3:	ff 75 e4             	pushl  -0x1c(%ebp)
+801023c6:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801023c9:	e8 22 de ff ff       	call   801001f0 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+801023ce:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+801023d4:	8b 03                	mov    (%ebx),%eax
+801023d6:	e8 c5 f7 ff ff       	call   80101ba0 <bfree>
+    ip->addrs[NDIRECT] = 0;
+801023db:	83 c4 10             	add    $0x10,%esp
+801023de:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+801023e5:	00 00 00 
+801023e8:	e9 58 ff ff ff       	jmp    80102345 <iput+0xc5>
+801023ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801023f0 <iunlockput>:
+{
+801023f0:	f3 0f 1e fb          	endbr32 
+801023f4:	55                   	push   %ebp
+801023f5:	89 e5                	mov    %esp,%ebp
+801023f7:	53                   	push   %ebx
+801023f8:	83 ec 10             	sub    $0x10,%esp
+801023fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  iunlock(ip);
+801023fe:	53                   	push   %ebx
+801023ff:	e8 2c fe ff ff       	call   80102230 <iunlock>
+  iput(ip);
+80102404:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80102407:	83 c4 10             	add    $0x10,%esp
+}
+8010240a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010240d:	c9                   	leave  
+  iput(ip);
+8010240e:	e9 6d fe ff ff       	jmp    80102280 <iput>
+80102413:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010241a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102420 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+80102420:	f3 0f 1e fb          	endbr32 
+80102424:	55                   	push   %ebp
+80102425:	89 e5                	mov    %esp,%ebp
+80102427:	8b 55 08             	mov    0x8(%ebp),%edx
+8010242a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  st->dev = ip->dev;
+8010242d:	8b 0a                	mov    (%edx),%ecx
+8010242f:	89 48 04             	mov    %ecx,0x4(%eax)
+  st->ino = ip->inum;
+80102432:	8b 4a 04             	mov    0x4(%edx),%ecx
+80102435:	89 48 08             	mov    %ecx,0x8(%eax)
+  st->type = ip->type;
+80102438:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+8010243c:	66 89 08             	mov    %cx,(%eax)
+  st->nlink = ip->nlink;
+8010243f:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+80102443:	66 89 48 0c          	mov    %cx,0xc(%eax)
+  st->size = ip->size;
+80102447:	8b 52 58             	mov    0x58(%edx),%edx
+8010244a:	89 50 10             	mov    %edx,0x10(%eax)
+}
+8010244d:	5d                   	pop    %ebp
+8010244e:	c3                   	ret    
+8010244f:	90                   	nop
+
+80102450 <readi>:
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80102450:	f3 0f 1e fb          	endbr32 
+80102454:	55                   	push   %ebp
+80102455:	89 e5                	mov    %esp,%ebp
+80102457:	57                   	push   %edi
+80102458:	56                   	push   %esi
+80102459:	53                   	push   %ebx
+8010245a:	83 ec 1c             	sub    $0x1c,%esp
+8010245d:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80102460:	8b 45 08             	mov    0x8(%ebp),%eax
+80102463:	8b 75 10             	mov    0x10(%ebp),%esi
+80102466:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80102469:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+8010246c:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80102471:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102474:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+  if(ip->type == T_DEV){
+80102477:	0f 84 a3 00 00 00    	je     80102520 <readi+0xd0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+8010247d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80102480:	8b 40 58             	mov    0x58(%eax),%eax
+80102483:	39 c6                	cmp    %eax,%esi
+80102485:	0f 87 b6 00 00 00    	ja     80102541 <readi+0xf1>
+8010248b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+8010248e:	31 c9                	xor    %ecx,%ecx
+80102490:	89 da                	mov    %ebx,%edx
+80102492:	01 f2                	add    %esi,%edx
+80102494:	0f 92 c1             	setb   %cl
+80102497:	89 cf                	mov    %ecx,%edi
+80102499:	0f 82 a2 00 00 00    	jb     80102541 <readi+0xf1>
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+8010249f:	89 c1                	mov    %eax,%ecx
+801024a1:	29 f1                	sub    %esi,%ecx
+801024a3:	39 d0                	cmp    %edx,%eax
+801024a5:	0f 43 cb             	cmovae %ebx,%ecx
+801024a8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801024ab:	85 c9                	test   %ecx,%ecx
+801024ad:	74 63                	je     80102512 <readi+0xc2>
+801024af:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801024b0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+801024b3:	89 f2                	mov    %esi,%edx
+801024b5:	c1 ea 09             	shr    $0x9,%edx
+801024b8:	89 d8                	mov    %ebx,%eax
+801024ba:	e8 61 f9 ff ff       	call   80101e20 <bmap>
+801024bf:	83 ec 08             	sub    $0x8,%esp
+801024c2:	50                   	push   %eax
+801024c3:	ff 33                	pushl  (%ebx)
+801024c5:	e8 06 dc ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024ca:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+801024cd:	b9 00 02 00 00       	mov    $0x200,%ecx
+801024d2:	83 c4 0c             	add    $0xc,%esp
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801024d5:	89 c2                	mov    %eax,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024d7:	89 f0                	mov    %esi,%eax
+801024d9:	25 ff 01 00 00       	and    $0x1ff,%eax
+801024de:	29 fb                	sub    %edi,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+801024e0:	89 55 dc             	mov    %edx,-0x24(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024e3:	29 c1                	sub    %eax,%ecx
+    memmove(dst, bp->data + off%BSIZE, m);
+801024e5:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024e9:	39 d9                	cmp    %ebx,%ecx
+801024eb:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+801024ee:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801024ef:	01 df                	add    %ebx,%edi
+801024f1:	01 de                	add    %ebx,%esi
+    memmove(dst, bp->data + off%BSIZE, m);
+801024f3:	50                   	push   %eax
+801024f4:	ff 75 e0             	pushl  -0x20(%ebp)
+801024f7:	e8 84 34 00 00       	call   80105980 <memmove>
+    brelse(bp);
+801024fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801024ff:	89 14 24             	mov    %edx,(%esp)
+80102502:	e8 e9 dc ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80102507:	01 5d e0             	add    %ebx,-0x20(%ebp)
+8010250a:	83 c4 10             	add    $0x10,%esp
+8010250d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80102510:	77 9e                	ja     801024b0 <readi+0x60>
+  }
+  return n;
+80102512:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+}
+80102515:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102518:	5b                   	pop    %ebx
+80102519:	5e                   	pop    %esi
+8010251a:	5f                   	pop    %edi
+8010251b:	5d                   	pop    %ebp
+8010251c:	c3                   	ret    
+8010251d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80102520:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80102524:	66 83 f8 09          	cmp    $0x9,%ax
+80102528:	77 17                	ja     80102541 <readi+0xf1>
+8010252a:	8b 04 c5 60 33 11 80 	mov    -0x7feecca0(,%eax,8),%eax
+80102531:	85 c0                	test   %eax,%eax
+80102533:	74 0c                	je     80102541 <readi+0xf1>
+    return devsw[ip->major].read(ip, dst, n);
+80102535:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80102538:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010253b:	5b                   	pop    %ebx
+8010253c:	5e                   	pop    %esi
+8010253d:	5f                   	pop    %edi
+8010253e:	5d                   	pop    %ebp
+    return devsw[ip->major].read(ip, dst, n);
+8010253f:	ff e0                	jmp    *%eax
+      return -1;
+80102541:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102546:	eb cd                	jmp    80102515 <readi+0xc5>
+80102548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010254f:	90                   	nop
+
+80102550 <writei>:
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80102550:	f3 0f 1e fb          	endbr32 
+80102554:	55                   	push   %ebp
+80102555:	89 e5                	mov    %esp,%ebp
+80102557:	57                   	push   %edi
+80102558:	56                   	push   %esi
+80102559:	53                   	push   %ebx
+8010255a:	83 ec 1c             	sub    $0x1c,%esp
+8010255d:	8b 45 08             	mov    0x8(%ebp),%eax
+80102560:	8b 75 0c             	mov    0xc(%ebp),%esi
+80102563:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80102566:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+8010256b:	89 75 dc             	mov    %esi,-0x24(%ebp)
+8010256e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102571:	8b 75 10             	mov    0x10(%ebp),%esi
+80102574:	89 7d e0             	mov    %edi,-0x20(%ebp)
+  if(ip->type == T_DEV){
+80102577:	0f 84 b3 00 00 00    	je     80102630 <writei+0xe0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+8010257d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80102580:	39 70 58             	cmp    %esi,0x58(%eax)
+80102583:	0f 82 e3 00 00 00    	jb     8010266c <writei+0x11c>
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+80102589:	8b 7d e0             	mov    -0x20(%ebp),%edi
+8010258c:	89 f8                	mov    %edi,%eax
+8010258e:	01 f0                	add    %esi,%eax
+80102590:	0f 82 d6 00 00 00    	jb     8010266c <writei+0x11c>
+80102596:	3d 00 18 01 00       	cmp    $0x11800,%eax
+8010259b:	0f 87 cb 00 00 00    	ja     8010266c <writei+0x11c>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+801025a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801025a8:	85 ff                	test   %edi,%edi
+801025aa:	74 75                	je     80102621 <writei+0xd1>
+801025ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801025b0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+801025b3:	89 f2                	mov    %esi,%edx
+801025b5:	c1 ea 09             	shr    $0x9,%edx
+801025b8:	89 f8                	mov    %edi,%eax
+801025ba:	e8 61 f8 ff ff       	call   80101e20 <bmap>
+801025bf:	83 ec 08             	sub    $0x8,%esp
+801025c2:	50                   	push   %eax
+801025c3:	ff 37                	pushl  (%edi)
+801025c5:	e8 06 db ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+801025ca:	b9 00 02 00 00       	mov    $0x200,%ecx
+801025cf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+801025d2:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801025d5:	89 c7                	mov    %eax,%edi
+    m = min(n - tot, BSIZE - off%BSIZE);
+801025d7:	89 f0                	mov    %esi,%eax
+801025d9:	83 c4 0c             	add    $0xc,%esp
+801025dc:	25 ff 01 00 00       	and    $0x1ff,%eax
+801025e1:	29 c1                	sub    %eax,%ecx
+    memmove(bp->data + off%BSIZE, src, m);
+801025e3:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+801025e7:	39 d9                	cmp    %ebx,%ecx
+801025e9:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(bp->data + off%BSIZE, src, m);
+801025ec:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+801025ed:	01 de                	add    %ebx,%esi
+    memmove(bp->data + off%BSIZE, src, m);
+801025ef:	ff 75 dc             	pushl  -0x24(%ebp)
+801025f2:	50                   	push   %eax
+801025f3:	e8 88 33 00 00       	call   80105980 <memmove>
+    log_write(bp);
+801025f8:	89 3c 24             	mov    %edi,(%esp)
+801025fb:	e8 00 13 00 00       	call   80103900 <log_write>
+    brelse(bp);
+80102600:	89 3c 24             	mov    %edi,(%esp)
+80102603:	e8 e8 db ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80102608:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+8010260b:	83 c4 10             	add    $0x10,%esp
+8010260e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80102611:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80102614:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80102617:	77 97                	ja     801025b0 <writei+0x60>
+  }
+
+  if(n > 0 && off > ip->size){
+80102619:	8b 45 d8             	mov    -0x28(%ebp),%eax
+8010261c:	3b 70 58             	cmp    0x58(%eax),%esi
+8010261f:	77 37                	ja     80102658 <writei+0x108>
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+80102621:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+80102624:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102627:	5b                   	pop    %ebx
+80102628:	5e                   	pop    %esi
+80102629:	5f                   	pop    %edi
+8010262a:	5d                   	pop    %ebp
+8010262b:	c3                   	ret    
+8010262c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80102630:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80102634:	66 83 f8 09          	cmp    $0x9,%ax
+80102638:	77 32                	ja     8010266c <writei+0x11c>
+8010263a:	8b 04 c5 64 33 11 80 	mov    -0x7feecc9c(,%eax,8),%eax
+80102641:	85 c0                	test   %eax,%eax
+80102643:	74 27                	je     8010266c <writei+0x11c>
+    return devsw[ip->major].write(ip, src, n);
+80102645:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80102648:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010264b:	5b                   	pop    %ebx
+8010264c:	5e                   	pop    %esi
+8010264d:	5f                   	pop    %edi
+8010264e:	5d                   	pop    %ebp
+    return devsw[ip->major].write(ip, src, n);
+8010264f:	ff e0                	jmp    *%eax
+80102651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    ip->size = off;
+80102658:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    iupdate(ip);
+8010265b:	83 ec 0c             	sub    $0xc,%esp
+    ip->size = off;
+8010265e:	89 70 58             	mov    %esi,0x58(%eax)
+    iupdate(ip);
+80102661:	50                   	push   %eax
+80102662:	e8 29 fa ff ff       	call   80102090 <iupdate>
+80102667:	83 c4 10             	add    $0x10,%esp
+8010266a:	eb b5                	jmp    80102621 <writei+0xd1>
+      return -1;
+8010266c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102671:	eb b1                	jmp    80102624 <writei+0xd4>
+80102673:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010267a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102680 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80102680:	f3 0f 1e fb          	endbr32 
+80102684:	55                   	push   %ebp
+80102685:	89 e5                	mov    %esp,%ebp
+80102687:	83 ec 0c             	sub    $0xc,%esp
+  return strncmp(s, t, DIRSIZ);
+8010268a:	6a 0e                	push   $0xe
+8010268c:	ff 75 0c             	pushl  0xc(%ebp)
+8010268f:	ff 75 08             	pushl  0x8(%ebp)
+80102692:	e8 59 33 00 00       	call   801059f0 <strncmp>
+}
+80102697:	c9                   	leave  
+80102698:	c3                   	ret    
+80102699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801026a0 <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+801026a0:	f3 0f 1e fb          	endbr32 
+801026a4:	55                   	push   %ebp
+801026a5:	89 e5                	mov    %esp,%ebp
+801026a7:	57                   	push   %edi
+801026a8:	56                   	push   %esi
+801026a9:	53                   	push   %ebx
+801026aa:	83 ec 1c             	sub    $0x1c,%esp
+801026ad:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+801026b0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801026b5:	0f 85 89 00 00 00    	jne    80102744 <dirlookup+0xa4>
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+801026bb:	8b 53 58             	mov    0x58(%ebx),%edx
+801026be:	31 ff                	xor    %edi,%edi
+801026c0:	8d 75 d8             	lea    -0x28(%ebp),%esi
+801026c3:	85 d2                	test   %edx,%edx
+801026c5:	74 42                	je     80102709 <dirlookup+0x69>
+801026c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801026ce:	66 90                	xchg   %ax,%ax
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801026d0:	6a 10                	push   $0x10
+801026d2:	57                   	push   %edi
+801026d3:	56                   	push   %esi
+801026d4:	53                   	push   %ebx
+801026d5:	e8 76 fd ff ff       	call   80102450 <readi>
+801026da:	83 c4 10             	add    $0x10,%esp
+801026dd:	83 f8 10             	cmp    $0x10,%eax
+801026e0:	75 55                	jne    80102737 <dirlookup+0x97>
+      panic("dirlookup read");
+    if(de.inum == 0)
+801026e2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801026e7:	74 18                	je     80102701 <dirlookup+0x61>
+  return strncmp(s, t, DIRSIZ);
+801026e9:	83 ec 04             	sub    $0x4,%esp
+801026ec:	8d 45 da             	lea    -0x26(%ebp),%eax
+801026ef:	6a 0e                	push   $0xe
+801026f1:	50                   	push   %eax
+801026f2:	ff 75 0c             	pushl  0xc(%ebp)
+801026f5:	e8 f6 32 00 00       	call   801059f0 <strncmp>
+      continue;
+    if(namecmp(name, de.name) == 0){
+801026fa:	83 c4 10             	add    $0x10,%esp
+801026fd:	85 c0                	test   %eax,%eax
+801026ff:	74 17                	je     80102718 <dirlookup+0x78>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80102701:	83 c7 10             	add    $0x10,%edi
+80102704:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80102707:	72 c7                	jb     801026d0 <dirlookup+0x30>
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+80102709:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010270c:	31 c0                	xor    %eax,%eax
+}
+8010270e:	5b                   	pop    %ebx
+8010270f:	5e                   	pop    %esi
+80102710:	5f                   	pop    %edi
+80102711:	5d                   	pop    %ebp
+80102712:	c3                   	ret    
+80102713:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102717:	90                   	nop
+      if(poff)
+80102718:	8b 45 10             	mov    0x10(%ebp),%eax
+8010271b:	85 c0                	test   %eax,%eax
+8010271d:	74 05                	je     80102724 <dirlookup+0x84>
+        *poff = off;
+8010271f:	8b 45 10             	mov    0x10(%ebp),%eax
+80102722:	89 38                	mov    %edi,(%eax)
+      inum = de.inum;
+80102724:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+      return iget(dp->dev, inum);
+80102728:	8b 03                	mov    (%ebx),%eax
+8010272a:	e8 01 f6 ff ff       	call   80101d30 <iget>
+}
+8010272f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102732:	5b                   	pop    %ebx
+80102733:	5e                   	pop    %esi
+80102734:	5f                   	pop    %edi
+80102735:	5d                   	pop    %ebp
+80102736:	c3                   	ret    
+      panic("dirlookup read");
+80102737:	83 ec 0c             	sub    $0xc,%esp
+8010273a:	68 71 86 10 80       	push   $0x80108671
+8010273f:	e8 4c dc ff ff       	call   80100390 <panic>
+    panic("dirlookup not DIR");
+80102744:	83 ec 0c             	sub    $0xc,%esp
+80102747:	68 5f 86 10 80       	push   $0x8010865f
+8010274c:	e8 3f dc ff ff       	call   80100390 <panic>
+80102751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010275f:	90                   	nop
+
+80102760 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80102760:	55                   	push   %ebp
+80102761:	89 e5                	mov    %esp,%ebp
+80102763:	57                   	push   %edi
+80102764:	56                   	push   %esi
+80102765:	53                   	push   %ebx
+80102766:	89 c3                	mov    %eax,%ebx
+80102768:	83 ec 1c             	sub    $0x1c,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+8010276b:	80 38 2f             	cmpb   $0x2f,(%eax)
+{
+8010276e:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80102771:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  if(*path == '/')
+80102774:	0f 84 86 01 00 00    	je     80102900 <namex+0x1a0>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+8010277a:	e8 01 1e 00 00       	call   80104580 <myproc>
+  acquire(&icache.lock);
+8010277f:	83 ec 0c             	sub    $0xc,%esp
+80102782:	89 df                	mov    %ebx,%edi
+    ip = idup(myproc()->cwd);
+80102784:	8b 70 68             	mov    0x68(%eax),%esi
+  acquire(&icache.lock);
+80102787:	68 e0 33 11 80       	push   $0x801133e0
+8010278c:	e8 3f 30 00 00       	call   801057d0 <acquire>
+  ip->ref++;
+80102791:	83 46 08 01          	addl   $0x1,0x8(%esi)
+  release(&icache.lock);
+80102795:	c7 04 24 e0 33 11 80 	movl   $0x801133e0,(%esp)
+8010279c:	e8 ef 30 00 00       	call   80105890 <release>
+801027a1:	83 c4 10             	add    $0x10,%esp
+801027a4:	eb 0d                	jmp    801027b3 <namex+0x53>
+801027a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027ad:	8d 76 00             	lea    0x0(%esi),%esi
+    path++;
+801027b0:	83 c7 01             	add    $0x1,%edi
+  while(*path == '/')
+801027b3:	0f b6 07             	movzbl (%edi),%eax
+801027b6:	3c 2f                	cmp    $0x2f,%al
+801027b8:	74 f6                	je     801027b0 <namex+0x50>
+  if(*path == 0)
+801027ba:	84 c0                	test   %al,%al
+801027bc:	0f 84 ee 00 00 00    	je     801028b0 <namex+0x150>
+  while(*path != '/' && *path != 0)
+801027c2:	0f b6 07             	movzbl (%edi),%eax
+801027c5:	84 c0                	test   %al,%al
+801027c7:	0f 84 fb 00 00 00    	je     801028c8 <namex+0x168>
+801027cd:	89 fb                	mov    %edi,%ebx
+801027cf:	3c 2f                	cmp    $0x2f,%al
+801027d1:	0f 84 f1 00 00 00    	je     801028c8 <namex+0x168>
+801027d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027de:	66 90                	xchg   %ax,%ax
+801027e0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
+    path++;
+801027e4:	83 c3 01             	add    $0x1,%ebx
+  while(*path != '/' && *path != 0)
+801027e7:	3c 2f                	cmp    $0x2f,%al
+801027e9:	74 04                	je     801027ef <namex+0x8f>
+801027eb:	84 c0                	test   %al,%al
+801027ed:	75 f1                	jne    801027e0 <namex+0x80>
+  len = path - s;
+801027ef:	89 d8                	mov    %ebx,%eax
+801027f1:	29 f8                	sub    %edi,%eax
+  if(len >= DIRSIZ)
+801027f3:	83 f8 0d             	cmp    $0xd,%eax
+801027f6:	0f 8e 84 00 00 00    	jle    80102880 <namex+0x120>
+    memmove(name, s, DIRSIZ);
+801027fc:	83 ec 04             	sub    $0x4,%esp
+801027ff:	6a 0e                	push   $0xe
+80102801:	57                   	push   %edi
+    path++;
+80102802:	89 df                	mov    %ebx,%edi
+    memmove(name, s, DIRSIZ);
+80102804:	ff 75 e4             	pushl  -0x1c(%ebp)
+80102807:	e8 74 31 00 00       	call   80105980 <memmove>
+8010280c:	83 c4 10             	add    $0x10,%esp
+  while(*path == '/')
+8010280f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80102812:	75 0c                	jne    80102820 <namex+0xc0>
+80102814:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    path++;
+80102818:	83 c7 01             	add    $0x1,%edi
+  while(*path == '/')
+8010281b:	80 3f 2f             	cmpb   $0x2f,(%edi)
+8010281e:	74 f8                	je     80102818 <namex+0xb8>
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+80102820:	83 ec 0c             	sub    $0xc,%esp
+80102823:	56                   	push   %esi
+80102824:	e8 27 f9 ff ff       	call   80102150 <ilock>
+    if(ip->type != T_DIR){
+80102829:	83 c4 10             	add    $0x10,%esp
+8010282c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80102831:	0f 85 a1 00 00 00    	jne    801028d8 <namex+0x178>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+80102837:	8b 55 e0             	mov    -0x20(%ebp),%edx
+8010283a:	85 d2                	test   %edx,%edx
+8010283c:	74 09                	je     80102847 <namex+0xe7>
+8010283e:	80 3f 00             	cmpb   $0x0,(%edi)
+80102841:	0f 84 d9 00 00 00    	je     80102920 <namex+0x1c0>
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80102847:	83 ec 04             	sub    $0x4,%esp
+8010284a:	6a 00                	push   $0x0
+8010284c:	ff 75 e4             	pushl  -0x1c(%ebp)
+8010284f:	56                   	push   %esi
+80102850:	e8 4b fe ff ff       	call   801026a0 <dirlookup>
+80102855:	83 c4 10             	add    $0x10,%esp
+80102858:	89 c3                	mov    %eax,%ebx
+8010285a:	85 c0                	test   %eax,%eax
+8010285c:	74 7a                	je     801028d8 <namex+0x178>
+  iunlock(ip);
+8010285e:	83 ec 0c             	sub    $0xc,%esp
+80102861:	56                   	push   %esi
+80102862:	e8 c9 f9 ff ff       	call   80102230 <iunlock>
+  iput(ip);
+80102867:	89 34 24             	mov    %esi,(%esp)
+8010286a:	89 de                	mov    %ebx,%esi
+8010286c:	e8 0f fa ff ff       	call   80102280 <iput>
+80102871:	83 c4 10             	add    $0x10,%esp
+80102874:	e9 3a ff ff ff       	jmp    801027b3 <namex+0x53>
+80102879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102880:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80102883:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
+80102886:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+    memmove(name, s, len);
+80102889:	83 ec 04             	sub    $0x4,%esp
+8010288c:	50                   	push   %eax
+8010288d:	57                   	push   %edi
+    name[len] = 0;
+8010288e:	89 df                	mov    %ebx,%edi
+    memmove(name, s, len);
+80102890:	ff 75 e4             	pushl  -0x1c(%ebp)
+80102893:	e8 e8 30 00 00       	call   80105980 <memmove>
+    name[len] = 0;
+80102898:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010289b:	83 c4 10             	add    $0x10,%esp
+8010289e:	c6 00 00             	movb   $0x0,(%eax)
+801028a1:	e9 69 ff ff ff       	jmp    8010280f <namex+0xaf>
+801028a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028ad:	8d 76 00             	lea    0x0(%esi),%esi
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+801028b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801028b3:	85 c0                	test   %eax,%eax
+801028b5:	0f 85 85 00 00 00    	jne    80102940 <namex+0x1e0>
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+801028bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801028be:	89 f0                	mov    %esi,%eax
+801028c0:	5b                   	pop    %ebx
+801028c1:	5e                   	pop    %esi
+801028c2:	5f                   	pop    %edi
+801028c3:	5d                   	pop    %ebp
+801028c4:	c3                   	ret    
+801028c5:	8d 76 00             	lea    0x0(%esi),%esi
+  while(*path != '/' && *path != 0)
+801028c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801028cb:	89 fb                	mov    %edi,%ebx
+801028cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801028d0:	31 c0                	xor    %eax,%eax
+801028d2:	eb b5                	jmp    80102889 <namex+0x129>
+801028d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  iunlock(ip);
+801028d8:	83 ec 0c             	sub    $0xc,%esp
+801028db:	56                   	push   %esi
+801028dc:	e8 4f f9 ff ff       	call   80102230 <iunlock>
+  iput(ip);
+801028e1:	89 34 24             	mov    %esi,(%esp)
+      return 0;
+801028e4:	31 f6                	xor    %esi,%esi
+  iput(ip);
+801028e6:	e8 95 f9 ff ff       	call   80102280 <iput>
+      return 0;
+801028eb:	83 c4 10             	add    $0x10,%esp
+}
+801028ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801028f1:	89 f0                	mov    %esi,%eax
+801028f3:	5b                   	pop    %ebx
+801028f4:	5e                   	pop    %esi
+801028f5:	5f                   	pop    %edi
+801028f6:	5d                   	pop    %ebp
+801028f7:	c3                   	ret    
+801028f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028ff:	90                   	nop
+    ip = iget(ROOTDEV, ROOTINO);
+80102900:	ba 01 00 00 00       	mov    $0x1,%edx
+80102905:	b8 01 00 00 00       	mov    $0x1,%eax
+8010290a:	89 df                	mov    %ebx,%edi
+8010290c:	e8 1f f4 ff ff       	call   80101d30 <iget>
+80102911:	89 c6                	mov    %eax,%esi
+80102913:	e9 9b fe ff ff       	jmp    801027b3 <namex+0x53>
+80102918:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010291f:	90                   	nop
+      iunlock(ip);
+80102920:	83 ec 0c             	sub    $0xc,%esp
+80102923:	56                   	push   %esi
+80102924:	e8 07 f9 ff ff       	call   80102230 <iunlock>
+      return ip;
+80102929:	83 c4 10             	add    $0x10,%esp
+}
+8010292c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010292f:	89 f0                	mov    %esi,%eax
+80102931:	5b                   	pop    %ebx
+80102932:	5e                   	pop    %esi
+80102933:	5f                   	pop    %edi
+80102934:	5d                   	pop    %ebp
+80102935:	c3                   	ret    
+80102936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010293d:	8d 76 00             	lea    0x0(%esi),%esi
+    iput(ip);
+80102940:	83 ec 0c             	sub    $0xc,%esp
+80102943:	56                   	push   %esi
+    return 0;
+80102944:	31 f6                	xor    %esi,%esi
+    iput(ip);
+80102946:	e8 35 f9 ff ff       	call   80102280 <iput>
+    return 0;
+8010294b:	83 c4 10             	add    $0x10,%esp
+8010294e:	e9 68 ff ff ff       	jmp    801028bb <namex+0x15b>
+80102953:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010295a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102960 <dirlink>:
+{
+80102960:	f3 0f 1e fb          	endbr32 
+80102964:	55                   	push   %ebp
+80102965:	89 e5                	mov    %esp,%ebp
+80102967:	57                   	push   %edi
+80102968:	56                   	push   %esi
+80102969:	53                   	push   %ebx
+8010296a:	83 ec 20             	sub    $0x20,%esp
+8010296d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80102970:	6a 00                	push   $0x0
+80102972:	ff 75 0c             	pushl  0xc(%ebp)
+80102975:	53                   	push   %ebx
+80102976:	e8 25 fd ff ff       	call   801026a0 <dirlookup>
+8010297b:	83 c4 10             	add    $0x10,%esp
+8010297e:	85 c0                	test   %eax,%eax
+80102980:	75 6b                	jne    801029ed <dirlink+0x8d>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80102982:	8b 7b 58             	mov    0x58(%ebx),%edi
+80102985:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80102988:	85 ff                	test   %edi,%edi
+8010298a:	74 2d                	je     801029b9 <dirlink+0x59>
+8010298c:	31 ff                	xor    %edi,%edi
+8010298e:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80102991:	eb 0d                	jmp    801029a0 <dirlink+0x40>
+80102993:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102997:	90                   	nop
+80102998:	83 c7 10             	add    $0x10,%edi
+8010299b:	3b 7b 58             	cmp    0x58(%ebx),%edi
+8010299e:	73 19                	jae    801029b9 <dirlink+0x59>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029a0:	6a 10                	push   $0x10
+801029a2:	57                   	push   %edi
+801029a3:	56                   	push   %esi
+801029a4:	53                   	push   %ebx
+801029a5:	e8 a6 fa ff ff       	call   80102450 <readi>
+801029aa:	83 c4 10             	add    $0x10,%esp
+801029ad:	83 f8 10             	cmp    $0x10,%eax
+801029b0:	75 4e                	jne    80102a00 <dirlink+0xa0>
+    if(de.inum == 0)
+801029b2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801029b7:	75 df                	jne    80102998 <dirlink+0x38>
+  strncpy(de.name, name, DIRSIZ);
+801029b9:	83 ec 04             	sub    $0x4,%esp
+801029bc:	8d 45 da             	lea    -0x26(%ebp),%eax
+801029bf:	6a 0e                	push   $0xe
+801029c1:	ff 75 0c             	pushl  0xc(%ebp)
+801029c4:	50                   	push   %eax
+801029c5:	e8 76 30 00 00       	call   80105a40 <strncpy>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029ca:	6a 10                	push   $0x10
+  de.inum = inum;
+801029cc:	8b 45 10             	mov    0x10(%ebp),%eax
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029cf:	57                   	push   %edi
+801029d0:	56                   	push   %esi
+801029d1:	53                   	push   %ebx
+  de.inum = inum;
+801029d2:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029d6:	e8 75 fb ff ff       	call   80102550 <writei>
+801029db:	83 c4 20             	add    $0x20,%esp
+801029de:	83 f8 10             	cmp    $0x10,%eax
+801029e1:	75 2a                	jne    80102a0d <dirlink+0xad>
+  return 0;
+801029e3:	31 c0                	xor    %eax,%eax
+}
+801029e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801029e8:	5b                   	pop    %ebx
+801029e9:	5e                   	pop    %esi
+801029ea:	5f                   	pop    %edi
+801029eb:	5d                   	pop    %ebp
+801029ec:	c3                   	ret    
+    iput(ip);
+801029ed:	83 ec 0c             	sub    $0xc,%esp
+801029f0:	50                   	push   %eax
+801029f1:	e8 8a f8 ff ff       	call   80102280 <iput>
+    return -1;
+801029f6:	83 c4 10             	add    $0x10,%esp
+801029f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801029fe:	eb e5                	jmp    801029e5 <dirlink+0x85>
+      panic("dirlink read");
+80102a00:	83 ec 0c             	sub    $0xc,%esp
+80102a03:	68 80 86 10 80       	push   $0x80108680
+80102a08:	e8 83 d9 ff ff       	call   80100390 <panic>
+    panic("dirlink");
+80102a0d:	83 ec 0c             	sub    $0xc,%esp
+80102a10:	68 92 8c 10 80       	push   $0x80108c92
+80102a15:	e8 76 d9 ff ff       	call   80100390 <panic>
+80102a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102a20 <namei>:
+
+struct inode*
+namei(char *path)
+{
+80102a20:	f3 0f 1e fb          	endbr32 
+80102a24:	55                   	push   %ebp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+80102a25:	31 d2                	xor    %edx,%edx
+{
+80102a27:	89 e5                	mov    %esp,%ebp
+80102a29:	83 ec 18             	sub    $0x18,%esp
+  return namex(path, 0, name);
+80102a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+80102a2f:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80102a32:	e8 29 fd ff ff       	call   80102760 <namex>
+}
+80102a37:	c9                   	leave  
+80102a38:	c3                   	ret    
+80102a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102a40 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+80102a40:	f3 0f 1e fb          	endbr32 
+80102a44:	55                   	push   %ebp
+  return namex(path, 1, name);
+80102a45:	ba 01 00 00 00       	mov    $0x1,%edx
+{
+80102a4a:	89 e5                	mov    %esp,%ebp
+  return namex(path, 1, name);
+80102a4c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102a4f:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80102a52:	5d                   	pop    %ebp
+  return namex(path, 1, name);
+80102a53:	e9 08 fd ff ff       	jmp    80102760 <namex>
+80102a58:	66 90                	xchg   %ax,%ax
+80102a5a:	66 90                	xchg   %ax,%ax
+80102a5c:	66 90                	xchg   %ax,%ax
+80102a5e:	66 90                	xchg   %ax,%ax
+
+80102a60 <idestart>:
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80102a60:	55                   	push   %ebp
+80102a61:	89 e5                	mov    %esp,%ebp
+80102a63:	57                   	push   %edi
+80102a64:	56                   	push   %esi
+80102a65:	53                   	push   %ebx
+80102a66:	83 ec 0c             	sub    $0xc,%esp
+  if(b == 0)
+80102a69:	85 c0                	test   %eax,%eax
+80102a6b:	0f 84 b4 00 00 00    	je     80102b25 <idestart+0xc5>
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+80102a71:	8b 70 08             	mov    0x8(%eax),%esi
+80102a74:	89 c3                	mov    %eax,%ebx
+80102a76:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
+80102a7c:	0f 87 96 00 00 00    	ja     80102b18 <idestart+0xb8>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a82:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80102a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102a8e:	66 90                	xchg   %ax,%ax
+80102a90:	89 ca                	mov    %ecx,%edx
+80102a92:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102a93:	83 e0 c0             	and    $0xffffffc0,%eax
+80102a96:	3c 40                	cmp    $0x40,%al
+80102a98:	75 f6                	jne    80102a90 <idestart+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a9a:	31 ff                	xor    %edi,%edi
+80102a9c:	ba f6 03 00 00       	mov    $0x3f6,%edx
+80102aa1:	89 f8                	mov    %edi,%eax
+80102aa3:	ee                   	out    %al,(%dx)
+80102aa4:	b8 01 00 00 00       	mov    $0x1,%eax
+80102aa9:	ba f2 01 00 00       	mov    $0x1f2,%edx
+80102aae:	ee                   	out    %al,(%dx)
+80102aaf:	ba f3 01 00 00       	mov    $0x1f3,%edx
+80102ab4:	89 f0                	mov    %esi,%eax
+80102ab6:	ee                   	out    %al,(%dx)
+
+  idewait(0);
+  outb(0x3f6, 0);  // generate interrupt
+  outb(0x1f2, sector_per_block);  // number of sectors
+  outb(0x1f3, sector & 0xff);
+  outb(0x1f4, (sector >> 8) & 0xff);
+80102ab7:	89 f0                	mov    %esi,%eax
+80102ab9:	ba f4 01 00 00       	mov    $0x1f4,%edx
+80102abe:	c1 f8 08             	sar    $0x8,%eax
+80102ac1:	ee                   	out    %al,(%dx)
+80102ac2:	ba f5 01 00 00       	mov    $0x1f5,%edx
+80102ac7:	89 f8                	mov    %edi,%eax
+80102ac9:	ee                   	out    %al,(%dx)
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+80102aca:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
+80102ace:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102ad3:	c1 e0 04             	shl    $0x4,%eax
+80102ad6:	83 e0 10             	and    $0x10,%eax
+80102ad9:	83 c8 e0             	or     $0xffffffe0,%eax
+80102adc:	ee                   	out    %al,(%dx)
+  if(b->flags & B_DIRTY){
+80102add:	f6 03 04             	testb  $0x4,(%ebx)
+80102ae0:	75 16                	jne    80102af8 <idestart+0x98>
+80102ae2:	b8 20 00 00 00       	mov    $0x20,%eax
+80102ae7:	89 ca                	mov    %ecx,%edx
+80102ae9:	ee                   	out    %al,(%dx)
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+80102aea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102aed:	5b                   	pop    %ebx
+80102aee:	5e                   	pop    %esi
+80102aef:	5f                   	pop    %edi
+80102af0:	5d                   	pop    %ebp
+80102af1:	c3                   	ret    
+80102af2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102af8:	b8 30 00 00 00       	mov    $0x30,%eax
+80102afd:	89 ca                	mov    %ecx,%edx
+80102aff:	ee                   	out    %al,(%dx)
+  asm volatile("cld; rep outsl" :
+80102b00:	b9 80 00 00 00       	mov    $0x80,%ecx
+    outsl(0x1f0, b->data, BSIZE/4);
+80102b05:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102b08:	ba f0 01 00 00       	mov    $0x1f0,%edx
+80102b0d:	fc                   	cld    
+80102b0e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+}
+80102b10:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102b13:	5b                   	pop    %ebx
+80102b14:	5e                   	pop    %esi
+80102b15:	5f                   	pop    %edi
+80102b16:	5d                   	pop    %ebp
+80102b17:	c3                   	ret    
+    panic("incorrect blockno");
+80102b18:	83 ec 0c             	sub    $0xc,%esp
+80102b1b:	68 ec 86 10 80       	push   $0x801086ec
+80102b20:	e8 6b d8 ff ff       	call   80100390 <panic>
+    panic("idestart");
+80102b25:	83 ec 0c             	sub    $0xc,%esp
+80102b28:	68 e3 86 10 80       	push   $0x801086e3
+80102b2d:	e8 5e d8 ff ff       	call   80100390 <panic>
+80102b32:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102b39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102b40 <ideinit>:
+{
+80102b40:	f3 0f 1e fb          	endbr32 
+80102b44:	55                   	push   %ebp
+80102b45:	89 e5                	mov    %esp,%ebp
+80102b47:	83 ec 10             	sub    $0x10,%esp
+  initlock(&idelock, "ide");
+80102b4a:	68 fe 86 10 80       	push   $0x801086fe
+80102b4f:	68 80 c5 10 80       	push   $0x8010c580
+80102b54:	e8 f7 2a 00 00       	call   80105650 <initlock>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+80102b59:	58                   	pop    %eax
+80102b5a:	a1 00 57 11 80       	mov    0x80115700,%eax
+80102b5f:	5a                   	pop    %edx
+80102b60:	83 e8 01             	sub    $0x1,%eax
+80102b63:	50                   	push   %eax
+80102b64:	6a 0e                	push   $0xe
+80102b66:	e8 b5 02 00 00       	call   80102e20 <ioapicenable>
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102b6b:	83 c4 10             	add    $0x10,%esp
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b6e:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102b73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102b77:	90                   	nop
+80102b78:	ec                   	in     (%dx),%al
+80102b79:	83 e0 c0             	and    $0xffffffc0,%eax
+80102b7c:	3c 40                	cmp    $0x40,%al
+80102b7e:	75 f8                	jne    80102b78 <ideinit+0x38>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b80:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+80102b85:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102b8a:	ee                   	out    %al,(%dx)
+80102b8b:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b90:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102b95:	eb 0e                	jmp    80102ba5 <ideinit+0x65>
+80102b97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102b9e:	66 90                	xchg   %ax,%ax
+  for(i=0; i<1000; i++){
+80102ba0:	83 e9 01             	sub    $0x1,%ecx
+80102ba3:	74 0f                	je     80102bb4 <ideinit+0x74>
+80102ba5:	ec                   	in     (%dx),%al
+    if(inb(0x1f7) != 0){
+80102ba6:	84 c0                	test   %al,%al
+80102ba8:	74 f6                	je     80102ba0 <ideinit+0x60>
+      havedisk1 = 1;
+80102baa:	c7 05 60 c5 10 80 01 	movl   $0x1,0x8010c560
+80102bb1:	00 00 00 
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102bb4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+80102bb9:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102bbe:	ee                   	out    %al,(%dx)
+}
+80102bbf:	c9                   	leave  
+80102bc0:	c3                   	ret    
+80102bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102bc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102bcf:	90                   	nop
+
+80102bd0 <ideintr>:
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102bd0:	f3 0f 1e fb          	endbr32 
+80102bd4:	55                   	push   %ebp
+80102bd5:	89 e5                	mov    %esp,%ebp
+80102bd7:	57                   	push   %edi
+80102bd8:	56                   	push   %esi
+80102bd9:	53                   	push   %ebx
+80102bda:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+80102bdd:	68 80 c5 10 80       	push   $0x8010c580
+80102be2:	e8 e9 2b 00 00       	call   801057d0 <acquire>
+
+  if((b = idequeue) == 0){
+80102be7:	8b 1d 64 c5 10 80    	mov    0x8010c564,%ebx
+80102bed:	83 c4 10             	add    $0x10,%esp
+80102bf0:	85 db                	test   %ebx,%ebx
+80102bf2:	74 5f                	je     80102c53 <ideintr+0x83>
+    release(&idelock);
+    return;
+  }
+  idequeue = b->qnext;
+80102bf4:	8b 43 58             	mov    0x58(%ebx),%eax
+80102bf7:	a3 64 c5 10 80       	mov    %eax,0x8010c564
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+80102bfc:	8b 33                	mov    (%ebx),%esi
+80102bfe:	f7 c6 04 00 00 00    	test   $0x4,%esi
+80102c04:	75 2b                	jne    80102c31 <ideintr+0x61>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102c06:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102c0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c0f:	90                   	nop
+80102c10:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102c11:	89 c1                	mov    %eax,%ecx
+80102c13:	83 e1 c0             	and    $0xffffffc0,%ecx
+80102c16:	80 f9 40             	cmp    $0x40,%cl
+80102c19:	75 f5                	jne    80102c10 <ideintr+0x40>
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+80102c1b:	a8 21                	test   $0x21,%al
+80102c1d:	75 12                	jne    80102c31 <ideintr+0x61>
+    insl(0x1f0, b->data, BSIZE/4);
+80102c1f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+  asm volatile("cld; rep insl" :
+80102c22:	b9 80 00 00 00       	mov    $0x80,%ecx
+80102c27:	ba f0 01 00 00       	mov    $0x1f0,%edx
+80102c2c:	fc                   	cld    
+80102c2d:	f3 6d                	rep insl (%dx),%es:(%edi)
+80102c2f:	8b 33                	mov    (%ebx),%esi
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+80102c31:	83 e6 fb             	and    $0xfffffffb,%esi
+  wakeup(b);
+80102c34:	83 ec 0c             	sub    $0xc,%esp
+  b->flags &= ~B_DIRTY;
+80102c37:	83 ce 02             	or     $0x2,%esi
+80102c3a:	89 33                	mov    %esi,(%ebx)
+  wakeup(b);
+80102c3c:	53                   	push   %ebx
+80102c3d:	e8 2e 22 00 00       	call   80104e70 <wakeup>
+
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+80102c42:	a1 64 c5 10 80       	mov    0x8010c564,%eax
+80102c47:	83 c4 10             	add    $0x10,%esp
+80102c4a:	85 c0                	test   %eax,%eax
+80102c4c:	74 05                	je     80102c53 <ideintr+0x83>
+    idestart(idequeue);
+80102c4e:	e8 0d fe ff ff       	call   80102a60 <idestart>
+    release(&idelock);
+80102c53:	83 ec 0c             	sub    $0xc,%esp
+80102c56:	68 80 c5 10 80       	push   $0x8010c580
+80102c5b:	e8 30 2c 00 00       	call   80105890 <release>
+
+  release(&idelock);
+}
+80102c60:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102c63:	5b                   	pop    %ebx
+80102c64:	5e                   	pop    %esi
+80102c65:	5f                   	pop    %edi
+80102c66:	5d                   	pop    %ebp
+80102c67:	c3                   	ret    
+80102c68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102c6f:	90                   	nop
+
+80102c70 <iderw>:
+// Sync buf with disk.
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+80102c70:	f3 0f 1e fb          	endbr32 
+80102c74:	55                   	push   %ebp
+80102c75:	89 e5                	mov    %esp,%ebp
+80102c77:	53                   	push   %ebx
+80102c78:	83 ec 10             	sub    $0x10,%esp
+80102c7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+80102c7e:	8d 43 0c             	lea    0xc(%ebx),%eax
+80102c81:	50                   	push   %eax
+80102c82:	e8 69 29 00 00       	call   801055f0 <holdingsleep>
+80102c87:	83 c4 10             	add    $0x10,%esp
+80102c8a:	85 c0                	test   %eax,%eax
+80102c8c:	0f 84 cf 00 00 00    	je     80102d61 <iderw+0xf1>
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+80102c92:	8b 03                	mov    (%ebx),%eax
+80102c94:	83 e0 06             	and    $0x6,%eax
+80102c97:	83 f8 02             	cmp    $0x2,%eax
+80102c9a:	0f 84 b4 00 00 00    	je     80102d54 <iderw+0xe4>
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+80102ca0:	8b 53 04             	mov    0x4(%ebx),%edx
+80102ca3:	85 d2                	test   %edx,%edx
+80102ca5:	74 0d                	je     80102cb4 <iderw+0x44>
+80102ca7:	a1 60 c5 10 80       	mov    0x8010c560,%eax
+80102cac:	85 c0                	test   %eax,%eax
+80102cae:	0f 84 93 00 00 00    	je     80102d47 <iderw+0xd7>
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+80102cb4:	83 ec 0c             	sub    $0xc,%esp
+80102cb7:	68 80 c5 10 80       	push   $0x8010c580
+80102cbc:	e8 0f 2b 00 00       	call   801057d0 <acquire>
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102cc1:	a1 64 c5 10 80       	mov    0x8010c564,%eax
+  b->qnext = 0;
+80102cc6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102ccd:	83 c4 10             	add    $0x10,%esp
+80102cd0:	85 c0                	test   %eax,%eax
+80102cd2:	74 6c                	je     80102d40 <iderw+0xd0>
+80102cd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102cd8:	89 c2                	mov    %eax,%edx
+80102cda:	8b 40 58             	mov    0x58(%eax),%eax
+80102cdd:	85 c0                	test   %eax,%eax
+80102cdf:	75 f7                	jne    80102cd8 <iderw+0x68>
+80102ce1:	83 c2 58             	add    $0x58,%edx
+    ;
+  *pp = b;
+80102ce4:	89 1a                	mov    %ebx,(%edx)
+
+  // Start disk if necessary.
+  if(idequeue == b)
+80102ce6:	39 1d 64 c5 10 80    	cmp    %ebx,0x8010c564
+80102cec:	74 42                	je     80102d30 <iderw+0xc0>
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+80102cee:	8b 03                	mov    (%ebx),%eax
+80102cf0:	83 e0 06             	and    $0x6,%eax
+80102cf3:	83 f8 02             	cmp    $0x2,%eax
+80102cf6:	74 23                	je     80102d1b <iderw+0xab>
+80102cf8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102cff:	90                   	nop
+    sleep(b, &idelock);
+80102d00:	83 ec 08             	sub    $0x8,%esp
+80102d03:	68 80 c5 10 80       	push   $0x8010c580
+80102d08:	53                   	push   %ebx
+80102d09:	e8 32 1e 00 00       	call   80104b40 <sleep>
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+80102d0e:	8b 03                	mov    (%ebx),%eax
+80102d10:	83 c4 10             	add    $0x10,%esp
+80102d13:	83 e0 06             	and    $0x6,%eax
+80102d16:	83 f8 02             	cmp    $0x2,%eax
+80102d19:	75 e5                	jne    80102d00 <iderw+0x90>
+  }
+
+
+  release(&idelock);
+80102d1b:	c7 45 08 80 c5 10 80 	movl   $0x8010c580,0x8(%ebp)
+}
+80102d22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102d25:	c9                   	leave  
+  release(&idelock);
+80102d26:	e9 65 2b 00 00       	jmp    80105890 <release>
+80102d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102d2f:	90                   	nop
+    idestart(b);
+80102d30:	89 d8                	mov    %ebx,%eax
+80102d32:	e8 29 fd ff ff       	call   80102a60 <idestart>
+80102d37:	eb b5                	jmp    80102cee <iderw+0x7e>
+80102d39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102d40:	ba 64 c5 10 80       	mov    $0x8010c564,%edx
+80102d45:	eb 9d                	jmp    80102ce4 <iderw+0x74>
+    panic("iderw: ide disk 1 not present");
+80102d47:	83 ec 0c             	sub    $0xc,%esp
+80102d4a:	68 2d 87 10 80       	push   $0x8010872d
+80102d4f:	e8 3c d6 ff ff       	call   80100390 <panic>
+    panic("iderw: nothing to do");
+80102d54:	83 ec 0c             	sub    $0xc,%esp
+80102d57:	68 18 87 10 80       	push   $0x80108718
+80102d5c:	e8 2f d6 ff ff       	call   80100390 <panic>
+    panic("iderw: buf not locked");
+80102d61:	83 ec 0c             	sub    $0xc,%esp
+80102d64:	68 02 87 10 80       	push   $0x80108702
+80102d69:	e8 22 d6 ff ff       	call   80100390 <panic>
+80102d6e:	66 90                	xchg   %ax,%ax
+
+80102d70 <ioapicinit>:
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+80102d70:	f3 0f 1e fb          	endbr32 
+80102d74:	55                   	push   %ebp
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+80102d75:	c7 05 34 50 11 80 00 	movl   $0xfec00000,0x80115034
+80102d7c:	00 c0 fe 
+{
+80102d7f:	89 e5                	mov    %esp,%ebp
+80102d81:	56                   	push   %esi
+80102d82:	53                   	push   %ebx
+  ioapic->reg = reg;
+80102d83:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+80102d8a:	00 00 00 
+  return ioapic->data;
+80102d8d:	8b 15 34 50 11 80    	mov    0x80115034,%edx
+80102d93:	8b 72 10             	mov    0x10(%edx),%esi
+  ioapic->reg = reg;
+80102d96:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+  return ioapic->data;
+80102d9c:	8b 0d 34 50 11 80    	mov    0x80115034,%ecx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+80102da2:	0f b6 15 60 51 11 80 	movzbl 0x80115160,%edx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+80102da9:	c1 ee 10             	shr    $0x10,%esi
+80102dac:	89 f0                	mov    %esi,%eax
+80102dae:	0f b6 f0             	movzbl %al,%esi
+  return ioapic->data;
+80102db1:	8b 41 10             	mov    0x10(%ecx),%eax
+  id = ioapicread(REG_ID) >> 24;
+80102db4:	c1 e8 18             	shr    $0x18,%eax
+  if(id != ioapicid)
+80102db7:	39 c2                	cmp    %eax,%edx
+80102db9:	74 16                	je     80102dd1 <ioapicinit+0x61>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+80102dbb:	83 ec 0c             	sub    $0xc,%esp
+80102dbe:	68 4c 87 10 80       	push   $0x8010874c
+80102dc3:	e8 28 d9 ff ff       	call   801006f0 <cprintf>
+80102dc8:	8b 0d 34 50 11 80    	mov    0x80115034,%ecx
+80102dce:	83 c4 10             	add    $0x10,%esp
+80102dd1:	83 c6 21             	add    $0x21,%esi
+{
+80102dd4:	ba 10 00 00 00       	mov    $0x10,%edx
+80102dd9:	b8 20 00 00 00       	mov    $0x20,%eax
+80102dde:	66 90                	xchg   %ax,%ax
+  ioapic->reg = reg;
+80102de0:	89 11                	mov    %edx,(%ecx)
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102de2:	89 c3                	mov    %eax,%ebx
+  ioapic->data = data;
+80102de4:	8b 0d 34 50 11 80    	mov    0x80115034,%ecx
+80102dea:	83 c0 01             	add    $0x1,%eax
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102ded:	81 cb 00 00 01 00    	or     $0x10000,%ebx
+  ioapic->data = data;
+80102df3:	89 59 10             	mov    %ebx,0x10(%ecx)
+  ioapic->reg = reg;
+80102df6:	8d 5a 01             	lea    0x1(%edx),%ebx
+80102df9:	83 c2 02             	add    $0x2,%edx
+80102dfc:	89 19                	mov    %ebx,(%ecx)
+  ioapic->data = data;
+80102dfe:	8b 0d 34 50 11 80    	mov    0x80115034,%ecx
+80102e04:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+  for(i = 0; i <= maxintr; i++){
+80102e0b:	39 f0                	cmp    %esi,%eax
+80102e0d:	75 d1                	jne    80102de0 <ioapicinit+0x70>
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+80102e0f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102e12:	5b                   	pop    %ebx
+80102e13:	5e                   	pop    %esi
+80102e14:	5d                   	pop    %ebp
+80102e15:	c3                   	ret    
+80102e16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102e1d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102e20 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+80102e20:	f3 0f 1e fb          	endbr32 
+80102e24:	55                   	push   %ebp
+  ioapic->reg = reg;
+80102e25:	8b 0d 34 50 11 80    	mov    0x80115034,%ecx
+{
+80102e2b:	89 e5                	mov    %esp,%ebp
+80102e2d:	8b 45 08             	mov    0x8(%ebp),%eax
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+80102e30:	8d 50 20             	lea    0x20(%eax),%edx
+80102e33:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+  ioapic->reg = reg;
+80102e37:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+80102e39:	8b 0d 34 50 11 80    	mov    0x80115034,%ecx
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102e3f:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+80102e42:	89 51 10             	mov    %edx,0x10(%ecx)
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102e45:	8b 55 0c             	mov    0xc(%ebp),%edx
+  ioapic->reg = reg;
+80102e48:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+80102e4a:	a1 34 50 11 80       	mov    0x80115034,%eax
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102e4f:	c1 e2 18             	shl    $0x18,%edx
+  ioapic->data = data;
+80102e52:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80102e55:	5d                   	pop    %ebp
+80102e56:	c3                   	ret    
+80102e57:	66 90                	xchg   %ax,%ax
+80102e59:	66 90                	xchg   %ax,%ax
+80102e5b:	66 90                	xchg   %ax,%ax
+80102e5d:	66 90                	xchg   %ax,%ax
+80102e5f:	90                   	nop
+
+80102e60 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+80102e60:	f3 0f 1e fb          	endbr32 
+80102e64:	55                   	push   %ebp
+80102e65:	89 e5                	mov    %esp,%ebp
+80102e67:	53                   	push   %ebx
+80102e68:	83 ec 04             	sub    $0x4,%esp
+80102e6b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+80102e6e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+80102e74:	75 7a                	jne    80102ef0 <kfree+0x90>
+80102e76:	81 fb 08 88 11 80    	cmp    $0x80118808,%ebx
+80102e7c:	72 72                	jb     80102ef0 <kfree+0x90>
+80102e7e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80102e84:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102e89:	77 65                	ja     80102ef0 <kfree+0x90>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+80102e8b:	83 ec 04             	sub    $0x4,%esp
+80102e8e:	68 00 10 00 00       	push   $0x1000
+80102e93:	6a 01                	push   $0x1
+80102e95:	53                   	push   %ebx
+80102e96:	e8 45 2a 00 00       	call   801058e0 <memset>
+
+  if(kmem.use_lock)
+80102e9b:	8b 15 74 50 11 80    	mov    0x80115074,%edx
+80102ea1:	83 c4 10             	add    $0x10,%esp
+80102ea4:	85 d2                	test   %edx,%edx
+80102ea6:	75 20                	jne    80102ec8 <kfree+0x68>
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+80102ea8:	a1 78 50 11 80       	mov    0x80115078,%eax
+80102ead:	89 03                	mov    %eax,(%ebx)
+  kmem.freelist = r;
+  if(kmem.use_lock)
+80102eaf:	a1 74 50 11 80       	mov    0x80115074,%eax
+  kmem.freelist = r;
+80102eb4:	89 1d 78 50 11 80    	mov    %ebx,0x80115078
+  if(kmem.use_lock)
+80102eba:	85 c0                	test   %eax,%eax
+80102ebc:	75 22                	jne    80102ee0 <kfree+0x80>
+    release(&kmem.lock);
+}
+80102ebe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102ec1:	c9                   	leave  
+80102ec2:	c3                   	ret    
+80102ec3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102ec7:	90                   	nop
+    acquire(&kmem.lock);
+80102ec8:	83 ec 0c             	sub    $0xc,%esp
+80102ecb:	68 40 50 11 80       	push   $0x80115040
+80102ed0:	e8 fb 28 00 00       	call   801057d0 <acquire>
+80102ed5:	83 c4 10             	add    $0x10,%esp
+80102ed8:	eb ce                	jmp    80102ea8 <kfree+0x48>
+80102eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    release(&kmem.lock);
+80102ee0:	c7 45 08 40 50 11 80 	movl   $0x80115040,0x8(%ebp)
+}
+80102ee7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102eea:	c9                   	leave  
+    release(&kmem.lock);
+80102eeb:	e9 a0 29 00 00       	jmp    80105890 <release>
+    panic("kfree");
+80102ef0:	83 ec 0c             	sub    $0xc,%esp
+80102ef3:	68 7e 87 10 80       	push   $0x8010877e
+80102ef8:	e8 93 d4 ff ff       	call   80100390 <panic>
+80102efd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102f00 <freerange>:
+{
+80102f00:	f3 0f 1e fb          	endbr32 
+80102f04:	55                   	push   %ebp
+80102f05:	89 e5                	mov    %esp,%ebp
+80102f07:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f08:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102f0b:	8b 75 0c             	mov    0xc(%ebp),%esi
+80102f0e:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f0f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102f15:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f1b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102f21:	39 de                	cmp    %ebx,%esi
+80102f23:	72 1f                	jb     80102f44 <freerange+0x44>
+80102f25:	8d 76 00             	lea    0x0(%esi),%esi
+    kfree(p);
+80102f28:	83 ec 0c             	sub    $0xc,%esp
+80102f2b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f31:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102f37:	50                   	push   %eax
+80102f38:	e8 23 ff ff ff       	call   80102e60 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f3d:	83 c4 10             	add    $0x10,%esp
+80102f40:	39 f3                	cmp    %esi,%ebx
+80102f42:	76 e4                	jbe    80102f28 <freerange+0x28>
+}
+80102f44:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102f47:	5b                   	pop    %ebx
+80102f48:	5e                   	pop    %esi
+80102f49:	5d                   	pop    %ebp
+80102f4a:	c3                   	ret    
+80102f4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102f4f:	90                   	nop
+
+80102f50 <kinit1>:
+{
+80102f50:	f3 0f 1e fb          	endbr32 
+80102f54:	55                   	push   %ebp
+80102f55:	89 e5                	mov    %esp,%ebp
+80102f57:	56                   	push   %esi
+80102f58:	53                   	push   %ebx
+80102f59:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+80102f5c:	83 ec 08             	sub    $0x8,%esp
+80102f5f:	68 84 87 10 80       	push   $0x80108784
+80102f64:	68 40 50 11 80       	push   $0x80115040
+80102f69:	e8 e2 26 00 00       	call   80105650 <initlock>
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f6e:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f71:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+80102f74:	c7 05 74 50 11 80 00 	movl   $0x0,0x80115074
+80102f7b:	00 00 00 
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f7e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102f84:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f8a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102f90:	39 de                	cmp    %ebx,%esi
+80102f92:	72 20                	jb     80102fb4 <kinit1+0x64>
+80102f94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102f98:	83 ec 0c             	sub    $0xc,%esp
+80102f9b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102fa1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102fa7:	50                   	push   %eax
+80102fa8:	e8 b3 fe ff ff       	call   80102e60 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102fad:	83 c4 10             	add    $0x10,%esp
+80102fb0:	39 de                	cmp    %ebx,%esi
+80102fb2:	73 e4                	jae    80102f98 <kinit1+0x48>
+}
+80102fb4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102fb7:	5b                   	pop    %ebx
+80102fb8:	5e                   	pop    %esi
+80102fb9:	5d                   	pop    %ebp
+80102fba:	c3                   	ret    
+80102fbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102fbf:	90                   	nop
+
+80102fc0 <kinit2>:
+{
+80102fc0:	f3 0f 1e fb          	endbr32 
+80102fc4:	55                   	push   %ebp
+80102fc5:	89 e5                	mov    %esp,%ebp
+80102fc7:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102fc8:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102fcb:	8b 75 0c             	mov    0xc(%ebp),%esi
+80102fce:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+80102fcf:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102fd5:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102fdb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102fe1:	39 de                	cmp    %ebx,%esi
+80102fe3:	72 1f                	jb     80103004 <kinit2+0x44>
+80102fe5:	8d 76 00             	lea    0x0(%esi),%esi
+    kfree(p);
+80102fe8:	83 ec 0c             	sub    $0xc,%esp
+80102feb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102ff1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102ff7:	50                   	push   %eax
+80102ff8:	e8 63 fe ff ff       	call   80102e60 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102ffd:	83 c4 10             	add    $0x10,%esp
+80103000:	39 de                	cmp    %ebx,%esi
+80103002:	73 e4                	jae    80102fe8 <kinit2+0x28>
+  kmem.use_lock = 1;
+80103004:	c7 05 74 50 11 80 01 	movl   $0x1,0x80115074
+8010300b:	00 00 00 
+}
+8010300e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103011:	5b                   	pop    %ebx
+80103012:	5e                   	pop    %esi
+80103013:	5d                   	pop    %ebp
+80103014:	c3                   	ret    
+80103015:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010301c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103020 <kalloc>:
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+char*
+kalloc(void)
+{
+80103020:	f3 0f 1e fb          	endbr32 
+  struct run *r;
+
+  if(kmem.use_lock)
+80103024:	a1 74 50 11 80       	mov    0x80115074,%eax
+80103029:	85 c0                	test   %eax,%eax
+8010302b:	75 1b                	jne    80103048 <kalloc+0x28>
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+8010302d:	a1 78 50 11 80       	mov    0x80115078,%eax
+  if(r)
+80103032:	85 c0                	test   %eax,%eax
+80103034:	74 0a                	je     80103040 <kalloc+0x20>
+    kmem.freelist = r->next;
+80103036:	8b 10                	mov    (%eax),%edx
+80103038:	89 15 78 50 11 80    	mov    %edx,0x80115078
+  if(kmem.use_lock)
+8010303e:	c3                   	ret    
+8010303f:	90                   	nop
+    release(&kmem.lock);
+  return (char*)r;
+}
+80103040:	c3                   	ret    
+80103041:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+80103048:	55                   	push   %ebp
+80103049:	89 e5                	mov    %esp,%ebp
+8010304b:	83 ec 24             	sub    $0x24,%esp
+    acquire(&kmem.lock);
+8010304e:	68 40 50 11 80       	push   $0x80115040
+80103053:	e8 78 27 00 00       	call   801057d0 <acquire>
+  r = kmem.freelist;
+80103058:	a1 78 50 11 80       	mov    0x80115078,%eax
+  if(r)
+8010305d:	8b 15 74 50 11 80    	mov    0x80115074,%edx
+80103063:	83 c4 10             	add    $0x10,%esp
+80103066:	85 c0                	test   %eax,%eax
+80103068:	74 08                	je     80103072 <kalloc+0x52>
+    kmem.freelist = r->next;
+8010306a:	8b 08                	mov    (%eax),%ecx
+8010306c:	89 0d 78 50 11 80    	mov    %ecx,0x80115078
+  if(kmem.use_lock)
+80103072:	85 d2                	test   %edx,%edx
+80103074:	74 16                	je     8010308c <kalloc+0x6c>
+    release(&kmem.lock);
+80103076:	83 ec 0c             	sub    $0xc,%esp
+80103079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010307c:	68 40 50 11 80       	push   $0x80115040
+80103081:	e8 0a 28 00 00       	call   80105890 <release>
+  return (char*)r;
+80103086:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    release(&kmem.lock);
+80103089:	83 c4 10             	add    $0x10,%esp
+}
+8010308c:	c9                   	leave  
+8010308d:	c3                   	ret    
+8010308e:	66 90                	xchg   %ax,%ax
+
+80103090 <kbdgetc>:
+#include "defs.h"
+#include "kbd.h"
+
+int
+kbdgetc(void)
+{
+80103090:	f3 0f 1e fb          	endbr32 
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103094:	ba 64 00 00 00       	mov    $0x64,%edx
+80103099:	ec                   	in     (%dx),%al
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+8010309a:	a8 01                	test   $0x1,%al
+8010309c:	0f 84 be 00 00 00    	je     80103160 <kbdgetc+0xd0>
+{
+801030a2:	55                   	push   %ebp
+801030a3:	ba 60 00 00 00       	mov    $0x60,%edx
+801030a8:	89 e5                	mov    %esp,%ebp
+801030aa:	53                   	push   %ebx
+801030ab:	ec                   	in     (%dx),%al
+  return data;
+801030ac:	8b 1d b4 c5 10 80    	mov    0x8010c5b4,%ebx
+    return -1;
+  data = inb(KBDATAP);
+801030b2:	0f b6 d0             	movzbl %al,%edx
+
+  if(data == 0xE0){
+801030b5:	3c e0                	cmp    $0xe0,%al
+801030b7:	74 57                	je     80103110 <kbdgetc+0x80>
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+801030b9:	89 d9                	mov    %ebx,%ecx
+801030bb:	83 e1 40             	and    $0x40,%ecx
+801030be:	84 c0                	test   %al,%al
+801030c0:	78 5e                	js     80103120 <kbdgetc+0x90>
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+801030c2:	85 c9                	test   %ecx,%ecx
+801030c4:	74 09                	je     801030cf <kbdgetc+0x3f>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+801030c6:	83 c8 80             	or     $0xffffff80,%eax
+    shift &= ~E0ESC;
+801030c9:	83 e3 bf             	and    $0xffffffbf,%ebx
+    data |= 0x80;
+801030cc:	0f b6 d0             	movzbl %al,%edx
+  }
+
+  shift |= shiftcode[data];
+801030cf:	0f b6 8a c0 88 10 80 	movzbl -0x7fef7740(%edx),%ecx
+  shift ^= togglecode[data];
+801030d6:	0f b6 82 c0 87 10 80 	movzbl -0x7fef7840(%edx),%eax
+  shift |= shiftcode[data];
+801030dd:	09 d9                	or     %ebx,%ecx
+  shift ^= togglecode[data];
+801030df:	31 c1                	xor    %eax,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+801030e1:	89 c8                	mov    %ecx,%eax
+  shift ^= togglecode[data];
+801030e3:	89 0d b4 c5 10 80    	mov    %ecx,0x8010c5b4
+  c = charcode[shift & (CTL | SHIFT)][data];
+801030e9:	83 e0 03             	and    $0x3,%eax
+  if(shift & CAPSLOCK){
+801030ec:	83 e1 08             	and    $0x8,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+801030ef:	8b 04 85 a0 87 10 80 	mov    -0x7fef7860(,%eax,4),%eax
+801030f6:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+  if(shift & CAPSLOCK){
+801030fa:	74 0b                	je     80103107 <kbdgetc+0x77>
+    if('a' <= c && c <= 'z')
+801030fc:	8d 50 9f             	lea    -0x61(%eax),%edx
+801030ff:	83 fa 19             	cmp    $0x19,%edx
+80103102:	77 44                	ja     80103148 <kbdgetc+0xb8>
+      c += 'A' - 'a';
+80103104:	83 e8 20             	sub    $0x20,%eax
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+80103107:	5b                   	pop    %ebx
+80103108:	5d                   	pop    %ebp
+80103109:	c3                   	ret    
+8010310a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    shift |= E0ESC;
+80103110:	83 cb 40             	or     $0x40,%ebx
+    return 0;
+80103113:	31 c0                	xor    %eax,%eax
+    shift |= E0ESC;
+80103115:	89 1d b4 c5 10 80    	mov    %ebx,0x8010c5b4
+}
+8010311b:	5b                   	pop    %ebx
+8010311c:	5d                   	pop    %ebp
+8010311d:	c3                   	ret    
+8010311e:	66 90                	xchg   %ax,%ax
+    data = (shift & E0ESC ? data : data & 0x7F);
+80103120:	83 e0 7f             	and    $0x7f,%eax
+80103123:	85 c9                	test   %ecx,%ecx
+80103125:	0f 44 d0             	cmove  %eax,%edx
+    return 0;
+80103128:	31 c0                	xor    %eax,%eax
+    shift &= ~(shiftcode[data] | E0ESC);
+8010312a:	0f b6 8a c0 88 10 80 	movzbl -0x7fef7740(%edx),%ecx
+80103131:	83 c9 40             	or     $0x40,%ecx
+80103134:	0f b6 c9             	movzbl %cl,%ecx
+80103137:	f7 d1                	not    %ecx
+80103139:	21 d9                	and    %ebx,%ecx
+}
+8010313b:	5b                   	pop    %ebx
+8010313c:	5d                   	pop    %ebp
+    shift &= ~(shiftcode[data] | E0ESC);
+8010313d:	89 0d b4 c5 10 80    	mov    %ecx,0x8010c5b4
+}
+80103143:	c3                   	ret    
+80103144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    else if('A' <= c && c <= 'Z')
+80103148:	8d 48 bf             	lea    -0x41(%eax),%ecx
+      c += 'a' - 'A';
+8010314b:	8d 50 20             	lea    0x20(%eax),%edx
+}
+8010314e:	5b                   	pop    %ebx
+8010314f:	5d                   	pop    %ebp
+      c += 'a' - 'A';
+80103150:	83 f9 1a             	cmp    $0x1a,%ecx
+80103153:	0f 42 c2             	cmovb  %edx,%eax
+}
+80103156:	c3                   	ret    
+80103157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010315e:	66 90                	xchg   %ax,%ax
+    return -1;
+80103160:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80103165:	c3                   	ret    
+80103166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010316d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103170 <kbdintr>:
+
+void
+kbdintr(void)
+{
+80103170:	f3 0f 1e fb          	endbr32 
+80103174:	55                   	push   %ebp
+80103175:	89 e5                	mov    %esp,%ebp
+80103177:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(kbdgetc);
+8010317a:	68 90 30 10 80       	push   $0x80103090
+8010317f:	e8 ec da ff ff       	call   80100c70 <consoleintr>
+}
+80103184:	83 c4 10             	add    $0x10,%esp
+80103187:	c9                   	leave  
+80103188:	c3                   	ret    
+80103189:	66 90                	xchg   %ax,%ax
+8010318b:	66 90                	xchg   %ax,%ax
+8010318d:	66 90                	xchg   %ax,%ax
+8010318f:	90                   	nop
+
+80103190 <lapicinit>:
+  lapic[ID];  // wait for write to finish, by reading
+}
+
+void
+lapicinit(void)
+{
+80103190:	f3 0f 1e fb          	endbr32 
+  if(!lapic)
+80103194:	a1 7c 50 11 80       	mov    0x8011507c,%eax
+80103199:	85 c0                	test   %eax,%eax
+8010319b:	0f 84 c7 00 00 00    	je     80103268 <lapicinit+0xd8>
+  lapic[index] = value;
+801031a1:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+801031a8:	01 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031ab:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031ae:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+801031b5:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031b8:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031bb:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+801031c2:	00 02 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031c5:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031c8:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+801031cf:	96 98 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031d2:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031d5:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+801031dc:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031df:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031e2:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+801031e9:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031ec:	8b 50 20             	mov    0x20(%eax),%edx
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+801031ef:	8b 50 30             	mov    0x30(%eax),%edx
+801031f2:	c1 ea 10             	shr    $0x10,%edx
+801031f5:	81 e2 fc 00 00 00    	and    $0xfc,%edx
+801031fb:	75 73                	jne    80103270 <lapicinit+0xe0>
+  lapic[index] = value;
+801031fd:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80103204:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103207:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010320a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+80103211:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103214:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103217:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010321e:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103221:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103224:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+8010322b:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010322e:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103231:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+80103238:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010323b:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010323e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+80103245:	85 08 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103248:	8b 50 20             	mov    0x20(%eax),%edx
+8010324b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010324f:	90                   	nop
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+80103250:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+80103256:	80 e6 10             	and    $0x10,%dh
+80103259:	75 f5                	jne    80103250 <lapicinit+0xc0>
+  lapic[index] = value;
+8010325b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+80103262:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103265:	8b 40 20             	mov    0x20(%eax),%eax
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+80103268:	c3                   	ret    
+80103269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  lapic[index] = value;
+80103270:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80103277:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010327a:	8b 50 20             	mov    0x20(%eax),%edx
+}
+8010327d:	e9 7b ff ff ff       	jmp    801031fd <lapicinit+0x6d>
+80103282:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103290 <lapicid>:
+
+int
+lapicid(void)
+{
+80103290:	f3 0f 1e fb          	endbr32 
+  if (!lapic)
+80103294:	a1 7c 50 11 80       	mov    0x8011507c,%eax
+80103299:	85 c0                	test   %eax,%eax
+8010329b:	74 0b                	je     801032a8 <lapicid+0x18>
+    return 0;
+  return lapic[ID] >> 24;
+8010329d:	8b 40 20             	mov    0x20(%eax),%eax
+801032a0:	c1 e8 18             	shr    $0x18,%eax
+801032a3:	c3                   	ret    
+801032a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return 0;
+801032a8:	31 c0                	xor    %eax,%eax
+}
+801032aa:	c3                   	ret    
+801032ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801032af:	90                   	nop
+
+801032b0 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+801032b0:	f3 0f 1e fb          	endbr32 
+  if(lapic)
+801032b4:	a1 7c 50 11 80       	mov    0x8011507c,%eax
+801032b9:	85 c0                	test   %eax,%eax
+801032bb:	74 0d                	je     801032ca <lapiceoi+0x1a>
+  lapic[index] = value;
+801032bd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801032c4:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801032c7:	8b 40 20             	mov    0x20(%eax),%eax
+    lapicw(EOI, 0);
+}
+801032ca:	c3                   	ret    
+801032cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801032cf:	90                   	nop
+
+801032d0 <microdelay>:
+
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+801032d0:	f3 0f 1e fb          	endbr32 
+}
+801032d4:	c3                   	ret    
+801032d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801032dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801032e0 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+801032e0:	f3 0f 1e fb          	endbr32 
+801032e4:	55                   	push   %ebp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801032e5:	b8 0f 00 00 00       	mov    $0xf,%eax
+801032ea:	ba 70 00 00 00       	mov    $0x70,%edx
+801032ef:	89 e5                	mov    %esp,%ebp
+801032f1:	53                   	push   %ebx
+801032f2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801032f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801032f8:	ee                   	out    %al,(%dx)
+801032f9:	b8 0a 00 00 00       	mov    $0xa,%eax
+801032fe:	ba 71 00 00 00       	mov    $0x71,%edx
+80103303:	ee                   	out    %al,(%dx)
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+80103304:	31 c0                	xor    %eax,%eax
+  wrv[1] = addr >> 4;
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+80103306:	c1 e3 18             	shl    $0x18,%ebx
+  wrv[0] = 0;
+80103309:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+  wrv[1] = addr >> 4;
+8010330f:	89 c8                	mov    %ecx,%eax
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80103311:	c1 e9 0c             	shr    $0xc,%ecx
+  lapicw(ICRHI, apicid<<24);
+80103314:	89 da                	mov    %ebx,%edx
+  wrv[1] = addr >> 4;
+80103316:	c1 e8 04             	shr    $0x4,%eax
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80103319:	80 cd 06             	or     $0x6,%ch
+  wrv[1] = addr >> 4;
+8010331c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+  lapic[index] = value;
+80103322:	a1 7c 50 11 80       	mov    0x8011507c,%eax
+80103327:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+8010332d:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80103330:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80103337:	c5 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010333a:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+8010333d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+80103344:	85 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103347:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+8010334a:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80103350:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80103353:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80103359:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+8010335c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80103362:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103365:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+    microdelay(200);
+  }
+}
+8010336b:	5b                   	pop    %ebx
+  lapic[ID];  // wait for write to finish, by reading
+8010336c:	8b 40 20             	mov    0x20(%eax),%eax
+}
+8010336f:	5d                   	pop    %ebp
+80103370:	c3                   	ret    
+80103371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103378:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010337f:	90                   	nop
+
+80103380 <cmostime>:
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void
+cmostime(struct rtcdate *r)
+{
+80103380:	f3 0f 1e fb          	endbr32 
+80103384:	55                   	push   %ebp
+80103385:	b8 0b 00 00 00       	mov    $0xb,%eax
+8010338a:	ba 70 00 00 00       	mov    $0x70,%edx
+8010338f:	89 e5                	mov    %esp,%ebp
+80103391:	57                   	push   %edi
+80103392:	56                   	push   %esi
+80103393:	53                   	push   %ebx
+80103394:	83 ec 4c             	sub    $0x4c,%esp
+80103397:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103398:	ba 71 00 00 00       	mov    $0x71,%edx
+8010339d:	ec                   	in     (%dx),%al
+  struct rtcdate t1, t2;
+  int sb, bcd;
+
+  sb = cmos_read(CMOS_STATB);
+
+  bcd = (sb & (1 << 2)) == 0;
+8010339e:	83 e0 04             	and    $0x4,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033a1:	bb 70 00 00 00       	mov    $0x70,%ebx
+801033a6:	88 45 b3             	mov    %al,-0x4d(%ebp)
+801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033b0:	31 c0                	xor    %eax,%eax
+801033b2:	89 da                	mov    %ebx,%edx
+801033b4:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033b5:	b9 71 00 00 00       	mov    $0x71,%ecx
+801033ba:	89 ca                	mov    %ecx,%edx
+801033bc:	ec                   	in     (%dx),%al
+801033bd:	88 45 b7             	mov    %al,-0x49(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033c0:	89 da                	mov    %ebx,%edx
+801033c2:	b8 02 00 00 00       	mov    $0x2,%eax
+801033c7:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033c8:	89 ca                	mov    %ecx,%edx
+801033ca:	ec                   	in     (%dx),%al
+801033cb:	88 45 b6             	mov    %al,-0x4a(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033ce:	89 da                	mov    %ebx,%edx
+801033d0:	b8 04 00 00 00       	mov    $0x4,%eax
+801033d5:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033d6:	89 ca                	mov    %ecx,%edx
+801033d8:	ec                   	in     (%dx),%al
+801033d9:	88 45 b5             	mov    %al,-0x4b(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033dc:	89 da                	mov    %ebx,%edx
+801033de:	b8 07 00 00 00       	mov    $0x7,%eax
+801033e3:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033e4:	89 ca                	mov    %ecx,%edx
+801033e6:	ec                   	in     (%dx),%al
+801033e7:	88 45 b4             	mov    %al,-0x4c(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033ea:	89 da                	mov    %ebx,%edx
+801033ec:	b8 08 00 00 00       	mov    $0x8,%eax
+801033f1:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033f2:	89 ca                	mov    %ecx,%edx
+801033f4:	ec                   	in     (%dx),%al
+801033f5:	89 c7                	mov    %eax,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033f7:	89 da                	mov    %ebx,%edx
+801033f9:	b8 09 00 00 00       	mov    $0x9,%eax
+801033fe:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033ff:	89 ca                	mov    %ecx,%edx
+80103401:	ec                   	in     (%dx),%al
+80103402:	89 c6                	mov    %eax,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103404:	89 da                	mov    %ebx,%edx
+80103406:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010340b:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010340c:	89 ca                	mov    %ecx,%edx
+8010340e:	ec                   	in     (%dx),%al
+
+  // make sure CMOS doesn't modify time while we read it
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+8010340f:	84 c0                	test   %al,%al
+80103411:	78 9d                	js     801033b0 <cmostime+0x30>
+  return inb(CMOS_RETURN);
+80103413:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+80103417:	89 fa                	mov    %edi,%edx
+80103419:	0f b6 fa             	movzbl %dl,%edi
+8010341c:	89 f2                	mov    %esi,%edx
+8010341e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80103421:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80103425:	0f b6 f2             	movzbl %dl,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103428:	89 da                	mov    %ebx,%edx
+8010342a:	89 7d c8             	mov    %edi,-0x38(%ebp)
+8010342d:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80103430:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+80103434:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80103437:	89 45 c0             	mov    %eax,-0x40(%ebp)
+8010343a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+8010343e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80103441:	31 c0                	xor    %eax,%eax
+80103443:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103444:	89 ca                	mov    %ecx,%edx
+80103446:	ec                   	in     (%dx),%al
+80103447:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010344a:	89 da                	mov    %ebx,%edx
+8010344c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+8010344f:	b8 02 00 00 00       	mov    $0x2,%eax
+80103454:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103455:	89 ca                	mov    %ecx,%edx
+80103457:	ec                   	in     (%dx),%al
+80103458:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010345b:	89 da                	mov    %ebx,%edx
+8010345d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80103460:	b8 04 00 00 00       	mov    $0x4,%eax
+80103465:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103466:	89 ca                	mov    %ecx,%edx
+80103468:	ec                   	in     (%dx),%al
+80103469:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010346c:	89 da                	mov    %ebx,%edx
+8010346e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80103471:	b8 07 00 00 00       	mov    $0x7,%eax
+80103476:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103477:	89 ca                	mov    %ecx,%edx
+80103479:	ec                   	in     (%dx),%al
+8010347a:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010347d:	89 da                	mov    %ebx,%edx
+8010347f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80103482:	b8 08 00 00 00       	mov    $0x8,%eax
+80103487:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103488:	89 ca                	mov    %ecx,%edx
+8010348a:	ec                   	in     (%dx),%al
+8010348b:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010348e:	89 da                	mov    %ebx,%edx
+80103490:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80103493:	b8 09 00 00 00       	mov    $0x9,%eax
+80103498:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103499:	89 ca                	mov    %ecx,%edx
+8010349b:	ec                   	in     (%dx),%al
+8010349c:	0f b6 c0             	movzbl %al,%eax
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+8010349f:	83 ec 04             	sub    $0x4,%esp
+  return inb(CMOS_RETURN);
+801034a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+801034a5:	8d 45 d0             	lea    -0x30(%ebp),%eax
+801034a8:	6a 18                	push   $0x18
+801034aa:	50                   	push   %eax
+801034ab:	8d 45 b8             	lea    -0x48(%ebp),%eax
+801034ae:	50                   	push   %eax
+801034af:	e8 7c 24 00 00       	call   80105930 <memcmp>
+801034b4:	83 c4 10             	add    $0x10,%esp
+801034b7:	85 c0                	test   %eax,%eax
+801034b9:	0f 85 f1 fe ff ff    	jne    801033b0 <cmostime+0x30>
+      break;
+  }
+
+  // convert
+  if(bcd) {
+801034bf:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+801034c3:	75 78                	jne    8010353d <cmostime+0x1bd>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+801034c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
+801034c8:	89 c2                	mov    %eax,%edx
+801034ca:	83 e0 0f             	and    $0xf,%eax
+801034cd:	c1 ea 04             	shr    $0x4,%edx
+801034d0:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801034d3:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801034d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    CONV(minute);
+801034d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
+801034dc:	89 c2                	mov    %eax,%edx
+801034de:	83 e0 0f             	and    $0xf,%eax
+801034e1:	c1 ea 04             	shr    $0x4,%edx
+801034e4:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801034e7:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801034ea:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    CONV(hour  );
+801034ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
+801034f0:	89 c2                	mov    %eax,%edx
+801034f2:	83 e0 0f             	and    $0xf,%eax
+801034f5:	c1 ea 04             	shr    $0x4,%edx
+801034f8:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801034fb:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801034fe:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    CONV(day   );
+80103501:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80103504:	89 c2                	mov    %eax,%edx
+80103506:	83 e0 0f             	and    $0xf,%eax
+80103509:	c1 ea 04             	shr    $0x4,%edx
+8010350c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+8010350f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80103512:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    CONV(month );
+80103515:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80103518:	89 c2                	mov    %eax,%edx
+8010351a:	83 e0 0f             	and    $0xf,%eax
+8010351d:	c1 ea 04             	shr    $0x4,%edx
+80103520:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80103523:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80103526:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    CONV(year  );
+80103529:	8b 45 cc             	mov    -0x34(%ebp),%eax
+8010352c:	89 c2                	mov    %eax,%edx
+8010352e:	83 e0 0f             	and    $0xf,%eax
+80103531:	c1 ea 04             	shr    $0x4,%edx
+80103534:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80103537:	8d 04 50             	lea    (%eax,%edx,2),%eax
+8010353a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+8010353d:	8b 75 08             	mov    0x8(%ebp),%esi
+80103540:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80103543:	89 06                	mov    %eax,(%esi)
+80103545:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80103548:	89 46 04             	mov    %eax,0x4(%esi)
+8010354b:	8b 45 c0             	mov    -0x40(%ebp),%eax
+8010354e:	89 46 08             	mov    %eax,0x8(%esi)
+80103551:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80103554:	89 46 0c             	mov    %eax,0xc(%esi)
+80103557:	8b 45 c8             	mov    -0x38(%ebp),%eax
+8010355a:	89 46 10             	mov    %eax,0x10(%esi)
+8010355d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80103560:	89 46 14             	mov    %eax,0x14(%esi)
+  r->year += 2000;
+80103563:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+}
+8010356a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010356d:	5b                   	pop    %ebx
+8010356e:	5e                   	pop    %esi
+8010356f:	5f                   	pop    %edi
+80103570:	5d                   	pop    %ebp
+80103571:	c3                   	ret    
+80103572:	66 90                	xchg   %ax,%ax
+80103574:	66 90                	xchg   %ax,%ax
+80103576:	66 90                	xchg   %ax,%ax
+80103578:	66 90                	xchg   %ax,%ax
+8010357a:	66 90                	xchg   %ax,%ax
+8010357c:	66 90                	xchg   %ax,%ax
+8010357e:	66 90                	xchg   %ax,%ax
+
+80103580 <install_trans>:
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103580:	8b 0d c8 50 11 80    	mov    0x801150c8,%ecx
+80103586:	85 c9                	test   %ecx,%ecx
+80103588:	0f 8e 8a 00 00 00    	jle    80103618 <install_trans+0x98>
+{
+8010358e:	55                   	push   %ebp
+8010358f:	89 e5                	mov    %esp,%ebp
+80103591:	57                   	push   %edi
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103592:	31 ff                	xor    %edi,%edi
+{
+80103594:	56                   	push   %esi
+80103595:	53                   	push   %ebx
+80103596:	83 ec 0c             	sub    $0xc,%esp
+80103599:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+801035a0:	a1 b4 50 11 80       	mov    0x801150b4,%eax
+801035a5:	83 ec 08             	sub    $0x8,%esp
+801035a8:	01 f8                	add    %edi,%eax
+801035aa:	83 c0 01             	add    $0x1,%eax
+801035ad:	50                   	push   %eax
+801035ae:	ff 35 c4 50 11 80    	pushl  0x801150c4
+801035b4:	e8 17 cb ff ff       	call   801000d0 <bread>
+801035b9:	89 c6                	mov    %eax,%esi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801035bb:	58                   	pop    %eax
+801035bc:	5a                   	pop    %edx
+801035bd:	ff 34 bd cc 50 11 80 	pushl  -0x7feeaf34(,%edi,4)
+801035c4:	ff 35 c4 50 11 80    	pushl  0x801150c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+801035ca:	83 c7 01             	add    $0x1,%edi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801035cd:	e8 fe ca ff ff       	call   801000d0 <bread>
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+801035d2:	83 c4 0c             	add    $0xc,%esp
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801035d5:	89 c3                	mov    %eax,%ebx
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+801035d7:	8d 46 5c             	lea    0x5c(%esi),%eax
+801035da:	68 00 02 00 00       	push   $0x200
+801035df:	50                   	push   %eax
+801035e0:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801035e3:	50                   	push   %eax
+801035e4:	e8 97 23 00 00       	call   80105980 <memmove>
+    bwrite(dbuf);  // write dst to disk
+801035e9:	89 1c 24             	mov    %ebx,(%esp)
+801035ec:	e8 bf cb ff ff       	call   801001b0 <bwrite>
+    brelse(lbuf);
+801035f1:	89 34 24             	mov    %esi,(%esp)
+801035f4:	e8 f7 cb ff ff       	call   801001f0 <brelse>
+    brelse(dbuf);
+801035f9:	89 1c 24             	mov    %ebx,(%esp)
+801035fc:	e8 ef cb ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103601:	83 c4 10             	add    $0x10,%esp
+80103604:	39 3d c8 50 11 80    	cmp    %edi,0x801150c8
+8010360a:	7f 94                	jg     801035a0 <install_trans+0x20>
+  }
+}
+8010360c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010360f:	5b                   	pop    %ebx
+80103610:	5e                   	pop    %esi
+80103611:	5f                   	pop    %edi
+80103612:	5d                   	pop    %ebp
+80103613:	c3                   	ret    
+80103614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103618:	c3                   	ret    
+80103619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103620 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+80103620:	55                   	push   %ebp
+80103621:	89 e5                	mov    %esp,%ebp
+80103623:	53                   	push   %ebx
+80103624:	83 ec 0c             	sub    $0xc,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80103627:	ff 35 b4 50 11 80    	pushl  0x801150b4
+8010362d:	ff 35 c4 50 11 80    	pushl  0x801150c4
+80103633:	e8 98 ca ff ff       	call   801000d0 <bread>
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+80103638:	83 c4 10             	add    $0x10,%esp
+  struct buf *buf = bread(log.dev, log.start);
+8010363b:	89 c3                	mov    %eax,%ebx
+  hb->n = log.lh.n;
+8010363d:	a1 c8 50 11 80       	mov    0x801150c8,%eax
+80103642:	89 43 5c             	mov    %eax,0x5c(%ebx)
+  for (i = 0; i < log.lh.n; i++) {
+80103645:	85 c0                	test   %eax,%eax
+80103647:	7e 19                	jle    80103662 <write_head+0x42>
+80103649:	31 d2                	xor    %edx,%edx
+8010364b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010364f:	90                   	nop
+    hb->block[i] = log.lh.block[i];
+80103650:	8b 0c 95 cc 50 11 80 	mov    -0x7feeaf34(,%edx,4),%ecx
+80103657:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+8010365b:	83 c2 01             	add    $0x1,%edx
+8010365e:	39 d0                	cmp    %edx,%eax
+80103660:	75 ee                	jne    80103650 <write_head+0x30>
+  }
+  bwrite(buf);
+80103662:	83 ec 0c             	sub    $0xc,%esp
+80103665:	53                   	push   %ebx
+80103666:	e8 45 cb ff ff       	call   801001b0 <bwrite>
+  brelse(buf);
+8010366b:	89 1c 24             	mov    %ebx,(%esp)
+8010366e:	e8 7d cb ff ff       	call   801001f0 <brelse>
+}
+80103673:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103676:	83 c4 10             	add    $0x10,%esp
+80103679:	c9                   	leave  
+8010367a:	c3                   	ret    
+8010367b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010367f:	90                   	nop
+
+80103680 <initlog>:
+{
+80103680:	f3 0f 1e fb          	endbr32 
+80103684:	55                   	push   %ebp
+80103685:	89 e5                	mov    %esp,%ebp
+80103687:	53                   	push   %ebx
+80103688:	83 ec 2c             	sub    $0x2c,%esp
+8010368b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&log.lock, "log");
+8010368e:	68 c0 89 10 80       	push   $0x801089c0
+80103693:	68 80 50 11 80       	push   $0x80115080
+80103698:	e8 b3 1f 00 00       	call   80105650 <initlock>
+  readsb(dev, &sb);
+8010369d:	58                   	pop    %eax
+8010369e:	8d 45 dc             	lea    -0x24(%ebp),%eax
+801036a1:	5a                   	pop    %edx
+801036a2:	50                   	push   %eax
+801036a3:	53                   	push   %ebx
+801036a4:	e8 47 e8 ff ff       	call   80101ef0 <readsb>
+  log.start = sb.logstart;
+801036a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  struct buf *buf = bread(log.dev, log.start);
+801036ac:	59                   	pop    %ecx
+  log.dev = dev;
+801036ad:	89 1d c4 50 11 80    	mov    %ebx,0x801150c4
+  log.size = sb.nlog;
+801036b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  log.start = sb.logstart;
+801036b6:	a3 b4 50 11 80       	mov    %eax,0x801150b4
+  log.size = sb.nlog;
+801036bb:	89 15 b8 50 11 80    	mov    %edx,0x801150b8
+  struct buf *buf = bread(log.dev, log.start);
+801036c1:	5a                   	pop    %edx
+801036c2:	50                   	push   %eax
+801036c3:	53                   	push   %ebx
+801036c4:	e8 07 ca ff ff       	call   801000d0 <bread>
+  for (i = 0; i < log.lh.n; i++) {
+801036c9:	83 c4 10             	add    $0x10,%esp
+  log.lh.n = lh->n;
+801036cc:	8b 48 5c             	mov    0x5c(%eax),%ecx
+801036cf:	89 0d c8 50 11 80    	mov    %ecx,0x801150c8
+  for (i = 0; i < log.lh.n; i++) {
+801036d5:	85 c9                	test   %ecx,%ecx
+801036d7:	7e 19                	jle    801036f2 <initlog+0x72>
+801036d9:	31 d2                	xor    %edx,%edx
+801036db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801036df:	90                   	nop
+    log.lh.block[i] = lh->block[i];
+801036e0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
+801036e4:	89 1c 95 cc 50 11 80 	mov    %ebx,-0x7feeaf34(,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+801036eb:	83 c2 01             	add    $0x1,%edx
+801036ee:	39 d1                	cmp    %edx,%ecx
+801036f0:	75 ee                	jne    801036e0 <initlog+0x60>
+  brelse(buf);
+801036f2:	83 ec 0c             	sub    $0xc,%esp
+801036f5:	50                   	push   %eax
+801036f6:	e8 f5 ca ff ff       	call   801001f0 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(); // if committed, copy from log to disk
+801036fb:	e8 80 fe ff ff       	call   80103580 <install_trans>
+  log.lh.n = 0;
+80103700:	c7 05 c8 50 11 80 00 	movl   $0x0,0x801150c8
+80103707:	00 00 00 
+  write_head(); // clear the log
+8010370a:	e8 11 ff ff ff       	call   80103620 <write_head>
+}
+8010370f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103712:	83 c4 10             	add    $0x10,%esp
+80103715:	c9                   	leave  
+80103716:	c3                   	ret    
+80103717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010371e:	66 90                	xchg   %ax,%ax
+
+80103720 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+80103720:	f3 0f 1e fb          	endbr32 
+80103724:	55                   	push   %ebp
+80103725:	89 e5                	mov    %esp,%ebp
+80103727:	83 ec 14             	sub    $0x14,%esp
+  acquire(&log.lock);
+8010372a:	68 80 50 11 80       	push   $0x80115080
+8010372f:	e8 9c 20 00 00       	call   801057d0 <acquire>
+80103734:	83 c4 10             	add    $0x10,%esp
+80103737:	eb 1c                	jmp    80103755 <begin_op+0x35>
+80103739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+80103740:	83 ec 08             	sub    $0x8,%esp
+80103743:	68 80 50 11 80       	push   $0x80115080
+80103748:	68 80 50 11 80       	push   $0x80115080
+8010374d:	e8 ee 13 00 00       	call   80104b40 <sleep>
+80103752:	83 c4 10             	add    $0x10,%esp
+    if(log.committing){
+80103755:	a1 c0 50 11 80       	mov    0x801150c0,%eax
+8010375a:	85 c0                	test   %eax,%eax
+8010375c:	75 e2                	jne    80103740 <begin_op+0x20>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+8010375e:	a1 bc 50 11 80       	mov    0x801150bc,%eax
+80103763:	8b 15 c8 50 11 80    	mov    0x801150c8,%edx
+80103769:	83 c0 01             	add    $0x1,%eax
+8010376c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+8010376f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80103772:	83 fa 1e             	cmp    $0x1e,%edx
+80103775:	7f c9                	jg     80103740 <begin_op+0x20>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+80103777:	83 ec 0c             	sub    $0xc,%esp
+      log.outstanding += 1;
+8010377a:	a3 bc 50 11 80       	mov    %eax,0x801150bc
+      release(&log.lock);
+8010377f:	68 80 50 11 80       	push   $0x80115080
+80103784:	e8 07 21 00 00       	call   80105890 <release>
+      break;
+    }
+  }
+}
+80103789:	83 c4 10             	add    $0x10,%esp
+8010378c:	c9                   	leave  
+8010378d:	c3                   	ret    
+8010378e:	66 90                	xchg   %ax,%ax
+
+80103790 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80103790:	f3 0f 1e fb          	endbr32 
+80103794:	55                   	push   %ebp
+80103795:	89 e5                	mov    %esp,%ebp
+80103797:	57                   	push   %edi
+80103798:	56                   	push   %esi
+80103799:	53                   	push   %ebx
+8010379a:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+
+  acquire(&log.lock);
+8010379d:	68 80 50 11 80       	push   $0x80115080
+801037a2:	e8 29 20 00 00       	call   801057d0 <acquire>
+  log.outstanding -= 1;
+801037a7:	a1 bc 50 11 80       	mov    0x801150bc,%eax
+  if(log.committing)
+801037ac:	8b 35 c0 50 11 80    	mov    0x801150c0,%esi
+801037b2:	83 c4 10             	add    $0x10,%esp
+  log.outstanding -= 1;
+801037b5:	8d 58 ff             	lea    -0x1(%eax),%ebx
+801037b8:	89 1d bc 50 11 80    	mov    %ebx,0x801150bc
+  if(log.committing)
+801037be:	85 f6                	test   %esi,%esi
+801037c0:	0f 85 1e 01 00 00    	jne    801038e4 <end_op+0x154>
+    panic("log.committing");
+  if(log.outstanding == 0){
+801037c6:	85 db                	test   %ebx,%ebx
+801037c8:	0f 85 f2 00 00 00    	jne    801038c0 <end_op+0x130>
+    do_commit = 1;
+    log.committing = 1;
+801037ce:	c7 05 c0 50 11 80 01 	movl   $0x1,0x801150c0
+801037d5:	00 00 00 
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+801037d8:	83 ec 0c             	sub    $0xc,%esp
+801037db:	68 80 50 11 80       	push   $0x80115080
+801037e0:	e8 ab 20 00 00       	call   80105890 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+801037e5:	8b 0d c8 50 11 80    	mov    0x801150c8,%ecx
+801037eb:	83 c4 10             	add    $0x10,%esp
+801037ee:	85 c9                	test   %ecx,%ecx
+801037f0:	7f 3e                	jg     80103830 <end_op+0xa0>
+    acquire(&log.lock);
+801037f2:	83 ec 0c             	sub    $0xc,%esp
+801037f5:	68 80 50 11 80       	push   $0x80115080
+801037fa:	e8 d1 1f 00 00       	call   801057d0 <acquire>
+    wakeup(&log);
+801037ff:	c7 04 24 80 50 11 80 	movl   $0x80115080,(%esp)
+    log.committing = 0;
+80103806:	c7 05 c0 50 11 80 00 	movl   $0x0,0x801150c0
+8010380d:	00 00 00 
+    wakeup(&log);
+80103810:	e8 5b 16 00 00       	call   80104e70 <wakeup>
+    release(&log.lock);
+80103815:	c7 04 24 80 50 11 80 	movl   $0x80115080,(%esp)
+8010381c:	e8 6f 20 00 00       	call   80105890 <release>
+80103821:	83 c4 10             	add    $0x10,%esp
+}
+80103824:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103827:	5b                   	pop    %ebx
+80103828:	5e                   	pop    %esi
+80103829:	5f                   	pop    %edi
+8010382a:	5d                   	pop    %ebp
+8010382b:	c3                   	ret    
+8010382c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80103830:	a1 b4 50 11 80       	mov    0x801150b4,%eax
+80103835:	83 ec 08             	sub    $0x8,%esp
+80103838:	01 d8                	add    %ebx,%eax
+8010383a:	83 c0 01             	add    $0x1,%eax
+8010383d:	50                   	push   %eax
+8010383e:	ff 35 c4 50 11 80    	pushl  0x801150c4
+80103844:	e8 87 c8 ff ff       	call   801000d0 <bread>
+80103849:	89 c6                	mov    %eax,%esi
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+8010384b:	58                   	pop    %eax
+8010384c:	5a                   	pop    %edx
+8010384d:	ff 34 9d cc 50 11 80 	pushl  -0x7feeaf34(,%ebx,4)
+80103854:	ff 35 c4 50 11 80    	pushl  0x801150c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+8010385a:	83 c3 01             	add    $0x1,%ebx
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+8010385d:	e8 6e c8 ff ff       	call   801000d0 <bread>
+    memmove(to->data, from->data, BSIZE);
+80103862:	83 c4 0c             	add    $0xc,%esp
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80103865:	89 c7                	mov    %eax,%edi
+    memmove(to->data, from->data, BSIZE);
+80103867:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010386a:	68 00 02 00 00       	push   $0x200
+8010386f:	50                   	push   %eax
+80103870:	8d 46 5c             	lea    0x5c(%esi),%eax
+80103873:	50                   	push   %eax
+80103874:	e8 07 21 00 00       	call   80105980 <memmove>
+    bwrite(to);  // write the log
+80103879:	89 34 24             	mov    %esi,(%esp)
+8010387c:	e8 2f c9 ff ff       	call   801001b0 <bwrite>
+    brelse(from);
+80103881:	89 3c 24             	mov    %edi,(%esp)
+80103884:	e8 67 c9 ff ff       	call   801001f0 <brelse>
+    brelse(to);
+80103889:	89 34 24             	mov    %esi,(%esp)
+8010388c:	e8 5f c9 ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103891:	83 c4 10             	add    $0x10,%esp
+80103894:	3b 1d c8 50 11 80    	cmp    0x801150c8,%ebx
+8010389a:	7c 94                	jl     80103830 <end_op+0xa0>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+8010389c:	e8 7f fd ff ff       	call   80103620 <write_head>
+    install_trans(); // Now install writes to home locations
+801038a1:	e8 da fc ff ff       	call   80103580 <install_trans>
+    log.lh.n = 0;
+801038a6:	c7 05 c8 50 11 80 00 	movl   $0x0,0x801150c8
+801038ad:	00 00 00 
+    write_head();    // Erase the transaction from the log
+801038b0:	e8 6b fd ff ff       	call   80103620 <write_head>
+801038b5:	e9 38 ff ff ff       	jmp    801037f2 <end_op+0x62>
+801038ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    wakeup(&log);
+801038c0:	83 ec 0c             	sub    $0xc,%esp
+801038c3:	68 80 50 11 80       	push   $0x80115080
+801038c8:	e8 a3 15 00 00       	call   80104e70 <wakeup>
+  release(&log.lock);
+801038cd:	c7 04 24 80 50 11 80 	movl   $0x80115080,(%esp)
+801038d4:	e8 b7 1f 00 00       	call   80105890 <release>
+801038d9:	83 c4 10             	add    $0x10,%esp
+}
+801038dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801038df:	5b                   	pop    %ebx
+801038e0:	5e                   	pop    %esi
+801038e1:	5f                   	pop    %edi
+801038e2:	5d                   	pop    %ebp
+801038e3:	c3                   	ret    
+    panic("log.committing");
+801038e4:	83 ec 0c             	sub    $0xc,%esp
+801038e7:	68 c4 89 10 80       	push   $0x801089c4
+801038ec:	e8 9f ca ff ff       	call   80100390 <panic>
+801038f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038ff:	90                   	nop
+
+80103900 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80103900:	f3 0f 1e fb          	endbr32 
+80103904:	55                   	push   %ebp
+80103905:	89 e5                	mov    %esp,%ebp
+80103907:	53                   	push   %ebx
+80103908:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+8010390b:	8b 15 c8 50 11 80    	mov    0x801150c8,%edx
+{
+80103911:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80103914:	83 fa 1d             	cmp    $0x1d,%edx
+80103917:	0f 8f 91 00 00 00    	jg     801039ae <log_write+0xae>
+8010391d:	a1 b8 50 11 80       	mov    0x801150b8,%eax
+80103922:	83 e8 01             	sub    $0x1,%eax
+80103925:	39 c2                	cmp    %eax,%edx
+80103927:	0f 8d 81 00 00 00    	jge    801039ae <log_write+0xae>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+8010392d:	a1 bc 50 11 80       	mov    0x801150bc,%eax
+80103932:	85 c0                	test   %eax,%eax
+80103934:	0f 8e 81 00 00 00    	jle    801039bb <log_write+0xbb>
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+8010393a:	83 ec 0c             	sub    $0xc,%esp
+8010393d:	68 80 50 11 80       	push   $0x80115080
+80103942:	e8 89 1e 00 00       	call   801057d0 <acquire>
+  for (i = 0; i < log.lh.n; i++) {
+80103947:	8b 15 c8 50 11 80    	mov    0x801150c8,%edx
+8010394d:	83 c4 10             	add    $0x10,%esp
+80103950:	85 d2                	test   %edx,%edx
+80103952:	7e 4e                	jle    801039a2 <log_write+0xa2>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80103954:	8b 4b 08             	mov    0x8(%ebx),%ecx
+  for (i = 0; i < log.lh.n; i++) {
+80103957:	31 c0                	xor    %eax,%eax
+80103959:	eb 0c                	jmp    80103967 <log_write+0x67>
+8010395b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010395f:	90                   	nop
+80103960:	83 c0 01             	add    $0x1,%eax
+80103963:	39 c2                	cmp    %eax,%edx
+80103965:	74 29                	je     80103990 <log_write+0x90>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80103967:	39 0c 85 cc 50 11 80 	cmp    %ecx,-0x7feeaf34(,%eax,4)
+8010396e:	75 f0                	jne    80103960 <log_write+0x60>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+80103970:	89 0c 85 cc 50 11 80 	mov    %ecx,-0x7feeaf34(,%eax,4)
+  if (i == log.lh.n)
+    log.lh.n++;
+  b->flags |= B_DIRTY; // prevent eviction
+80103977:	83 0b 04             	orl    $0x4,(%ebx)
+  release(&log.lock);
+}
+8010397a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  release(&log.lock);
+8010397d:	c7 45 08 80 50 11 80 	movl   $0x80115080,0x8(%ebp)
+}
+80103984:	c9                   	leave  
+  release(&log.lock);
+80103985:	e9 06 1f 00 00       	jmp    80105890 <release>
+8010398a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  log.lh.block[i] = b->blockno;
+80103990:	89 0c 95 cc 50 11 80 	mov    %ecx,-0x7feeaf34(,%edx,4)
+    log.lh.n++;
+80103997:	83 c2 01             	add    $0x1,%edx
+8010399a:	89 15 c8 50 11 80    	mov    %edx,0x801150c8
+801039a0:	eb d5                	jmp    80103977 <log_write+0x77>
+  log.lh.block[i] = b->blockno;
+801039a2:	8b 43 08             	mov    0x8(%ebx),%eax
+801039a5:	a3 cc 50 11 80       	mov    %eax,0x801150cc
+  if (i == log.lh.n)
+801039aa:	75 cb                	jne    80103977 <log_write+0x77>
+801039ac:	eb e9                	jmp    80103997 <log_write+0x97>
+    panic("too big a transaction");
+801039ae:	83 ec 0c             	sub    $0xc,%esp
+801039b1:	68 d3 89 10 80       	push   $0x801089d3
+801039b6:	e8 d5 c9 ff ff       	call   80100390 <panic>
+    panic("log_write outside of trans");
+801039bb:	83 ec 0c             	sub    $0xc,%esp
+801039be:	68 e9 89 10 80       	push   $0x801089e9
+801039c3:	e8 c8 c9 ff ff       	call   80100390 <panic>
+801039c8:	66 90                	xchg   %ax,%ax
+801039ca:	66 90                	xchg   %ax,%ax
+801039cc:	66 90                	xchg   %ax,%ax
+801039ce:	66 90                	xchg   %ax,%ax
+
+801039d0 <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+801039d0:	55                   	push   %ebp
+801039d1:	89 e5                	mov    %esp,%ebp
+801039d3:	53                   	push   %ebx
+801039d4:	83 ec 04             	sub    $0x4,%esp
+  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
+801039d7:	e8 84 0b 00 00       	call   80104560 <cpuid>
+801039dc:	89 c3                	mov    %eax,%ebx
+801039de:	e8 7d 0b 00 00       	call   80104560 <cpuid>
+801039e3:	83 ec 04             	sub    $0x4,%esp
+801039e6:	53                   	push   %ebx
+801039e7:	50                   	push   %eax
+801039e8:	68 04 8a 10 80       	push   $0x80108a04
+801039ed:	e8 fe cc ff ff       	call   801006f0 <cprintf>
+  idtinit();       // load idt register
+801039f2:	e8 e9 32 00 00       	call   80106ce0 <idtinit>
+  xchg(&(mycpu()->started), 1); // tell startothers() we're up
+801039f7:	e8 f4 0a 00 00       	call   801044f0 <mycpu>
+801039fc:	89 c2                	mov    %eax,%edx
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+801039fe:	b8 01 00 00 00       	mov    $0x1,%eax
+80103a03:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+  scheduler();     // start running processes
+80103a0a:	e8 41 0e 00 00       	call   80104850 <scheduler>
+80103a0f:	90                   	nop
+
+80103a10 <mpenter>:
+{
+80103a10:	f3 0f 1e fb          	endbr32 
+80103a14:	55                   	push   %ebp
+80103a15:	89 e5                	mov    %esp,%ebp
+80103a17:	83 ec 08             	sub    $0x8,%esp
+  switchkvm();
+80103a1a:	e8 c1 43 00 00       	call   80107de0 <switchkvm>
+  seginit();
+80103a1f:	e8 2c 43 00 00       	call   80107d50 <seginit>
+  lapicinit();
+80103a24:	e8 67 f7 ff ff       	call   80103190 <lapicinit>
+  mpmain();
+80103a29:	e8 a2 ff ff ff       	call   801039d0 <mpmain>
+80103a2e:	66 90                	xchg   %ax,%ax
+
+80103a30 <main>:
+{
+80103a30:	f3 0f 1e fb          	endbr32 
+80103a34:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80103a38:	83 e4 f0             	and    $0xfffffff0,%esp
+80103a3b:	ff 71 fc             	pushl  -0x4(%ecx)
+80103a3e:	55                   	push   %ebp
+80103a3f:	89 e5                	mov    %esp,%ebp
+80103a41:	53                   	push   %ebx
+80103a42:	51                   	push   %ecx
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+80103a43:	83 ec 08             	sub    $0x8,%esp
+80103a46:	68 00 00 40 80       	push   $0x80400000
+80103a4b:	68 08 88 11 80       	push   $0x80118808
+80103a50:	e8 fb f4 ff ff       	call   80102f50 <kinit1>
+  kvmalloc();      // kernel page table
+80103a55:	e8 66 48 00 00       	call   801082c0 <kvmalloc>
+  mpinit();        // detect other processors
+80103a5a:	e8 81 01 00 00       	call   80103be0 <mpinit>
+  lapicinit();     // interrupt controller
+80103a5f:	e8 2c f7 ff ff       	call   80103190 <lapicinit>
+  seginit();       // segment descriptors
+80103a64:	e8 e7 42 00 00       	call   80107d50 <seginit>
+  picinit();       // disable pic
+80103a69:	e8 52 03 00 00       	call   80103dc0 <picinit>
+  ioapicinit();    // another interrupt controller
+80103a6e:	e8 fd f2 ff ff       	call   80102d70 <ioapicinit>
+  consoleinit();   // console hardware
+80103a73:	e8 88 d9 ff ff       	call   80101400 <consoleinit>
+  uartinit();      // serial port
+80103a78:	e8 93 35 00 00       	call   80107010 <uartinit>
+  pinit();         // process table
+80103a7d:	e8 be 09 00 00       	call   80104440 <pinit>
+  tvinit();        // trap vectors
+80103a82:	e8 d9 31 00 00       	call   80106c60 <tvinit>
+  binit();         // buffer cache
+80103a87:	e8 b4 c5 ff ff       	call   80100040 <binit>
+  fileinit();      // file table
+80103a8c:	e8 3f dd ff ff       	call   801017d0 <fileinit>
+  ideinit();       // disk 
+80103a91:	e8 aa f0 ff ff       	call   80102b40 <ideinit>
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+80103a96:	83 c4 0c             	add    $0xc,%esp
+80103a99:	68 8a 00 00 00       	push   $0x8a
+80103a9e:	68 8c c4 10 80       	push   $0x8010c48c
+80103aa3:	68 00 70 00 80       	push   $0x80007000
+80103aa8:	e8 d3 1e 00 00       	call   80105980 <memmove>
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80103aad:	83 c4 10             	add    $0x10,%esp
+80103ab0:	69 05 00 57 11 80 b0 	imul   $0xb0,0x80115700,%eax
+80103ab7:	00 00 00 
+80103aba:	05 80 51 11 80       	add    $0x80115180,%eax
+80103abf:	3d 80 51 11 80       	cmp    $0x80115180,%eax
+80103ac4:	76 7a                	jbe    80103b40 <main+0x110>
+80103ac6:	bb 80 51 11 80       	mov    $0x80115180,%ebx
+80103acb:	eb 1c                	jmp    80103ae9 <main+0xb9>
+80103acd:	8d 76 00             	lea    0x0(%esi),%esi
+80103ad0:	69 05 00 57 11 80 b0 	imul   $0xb0,0x80115700,%eax
+80103ad7:	00 00 00 
+80103ada:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+80103ae0:	05 80 51 11 80       	add    $0x80115180,%eax
+80103ae5:	39 c3                	cmp    %eax,%ebx
+80103ae7:	73 57                	jae    80103b40 <main+0x110>
+    if(c == mycpu())  // We've started already.
+80103ae9:	e8 02 0a 00 00       	call   801044f0 <mycpu>
+80103aee:	39 c3                	cmp    %eax,%ebx
+80103af0:	74 de                	je     80103ad0 <main+0xa0>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80103af2:	e8 29 f5 ff ff       	call   80103020 <kalloc>
+    *(void**)(code-4) = stack + KSTACKSIZE;
+    *(void(**)(void))(code-8) = mpenter;
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+
+    lapicstartap(c->apicid, V2P(code));
+80103af7:	83 ec 08             	sub    $0x8,%esp
+    *(void(**)(void))(code-8) = mpenter;
+80103afa:	c7 05 f8 6f 00 80 10 	movl   $0x80103a10,0x80006ff8
+80103b01:	3a 10 80 
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+80103b04:	c7 05 f4 6f 00 80 00 	movl   $0x10b000,0x80006ff4
+80103b0b:	b0 10 00 
+    *(void**)(code-4) = stack + KSTACKSIZE;
+80103b0e:	05 00 10 00 00       	add    $0x1000,%eax
+80103b13:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+    lapicstartap(c->apicid, V2P(code));
+80103b18:	0f b6 03             	movzbl (%ebx),%eax
+80103b1b:	68 00 70 00 00       	push   $0x7000
+80103b20:	50                   	push   %eax
+80103b21:	e8 ba f7 ff ff       	call   801032e0 <lapicstartap>
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+80103b26:	83 c4 10             	add    $0x10,%esp
+80103b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b30:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80103b36:	85 c0                	test   %eax,%eax
+80103b38:	74 f6                	je     80103b30 <main+0x100>
+80103b3a:	eb 94                	jmp    80103ad0 <main+0xa0>
+80103b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+80103b40:	83 ec 08             	sub    $0x8,%esp
+80103b43:	68 00 00 00 8e       	push   $0x8e000000
+80103b48:	68 00 00 40 80       	push   $0x80400000
+80103b4d:	e8 6e f4 ff ff       	call   80102fc0 <kinit2>
+  userinit();      // first user process
+80103b52:	e8 59 0a 00 00       	call   801045b0 <userinit>
+  mpmain();        // finish this processor's setup
+80103b57:	e8 74 fe ff ff       	call   801039d0 <mpmain>
+80103b5c:	66 90                	xchg   %ax,%ax
+80103b5e:	66 90                	xchg   %ax,%ax
+
+80103b60 <mpsearch1>:
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80103b60:	55                   	push   %ebp
+80103b61:	89 e5                	mov    %esp,%ebp
+80103b63:	57                   	push   %edi
+80103b64:	56                   	push   %esi
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+80103b65:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+{
+80103b6b:	53                   	push   %ebx
+  e = addr+len;
+80103b6c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+{
+80103b6f:	83 ec 0c             	sub    $0xc,%esp
+  for(p = addr; p < e; p += sizeof(struct mp))
+80103b72:	39 de                	cmp    %ebx,%esi
+80103b74:	72 10                	jb     80103b86 <mpsearch1+0x26>
+80103b76:	eb 50                	jmp    80103bc8 <mpsearch1+0x68>
+80103b78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b7f:	90                   	nop
+80103b80:	89 fe                	mov    %edi,%esi
+80103b82:	39 fb                	cmp    %edi,%ebx
+80103b84:	76 42                	jbe    80103bc8 <mpsearch1+0x68>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103b86:	83 ec 04             	sub    $0x4,%esp
+80103b89:	8d 7e 10             	lea    0x10(%esi),%edi
+80103b8c:	6a 04                	push   $0x4
+80103b8e:	68 18 8a 10 80       	push   $0x80108a18
+80103b93:	56                   	push   %esi
+80103b94:	e8 97 1d 00 00       	call   80105930 <memcmp>
+80103b99:	83 c4 10             	add    $0x10,%esp
+80103b9c:	85 c0                	test   %eax,%eax
+80103b9e:	75 e0                	jne    80103b80 <mpsearch1+0x20>
+80103ba0:	89 f2                	mov    %esi,%edx
+80103ba2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    sum += addr[i];
+80103ba8:	0f b6 0a             	movzbl (%edx),%ecx
+80103bab:	83 c2 01             	add    $0x1,%edx
+80103bae:	01 c8                	add    %ecx,%eax
+  for(i=0; i<len; i++)
+80103bb0:	39 fa                	cmp    %edi,%edx
+80103bb2:	75 f4                	jne    80103ba8 <mpsearch1+0x48>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103bb4:	84 c0                	test   %al,%al
+80103bb6:	75 c8                	jne    80103b80 <mpsearch1+0x20>
+      return (struct mp*)p;
+  return 0;
+}
+80103bb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103bbb:	89 f0                	mov    %esi,%eax
+80103bbd:	5b                   	pop    %ebx
+80103bbe:	5e                   	pop    %esi
+80103bbf:	5f                   	pop    %edi
+80103bc0:	5d                   	pop    %ebp
+80103bc1:	c3                   	ret    
+80103bc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103bc8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80103bcb:	31 f6                	xor    %esi,%esi
+}
+80103bcd:	5b                   	pop    %ebx
+80103bce:	89 f0                	mov    %esi,%eax
+80103bd0:	5e                   	pop    %esi
+80103bd1:	5f                   	pop    %edi
+80103bd2:	5d                   	pop    %ebp
+80103bd3:	c3                   	ret    
+80103bd4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103bdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103bdf:	90                   	nop
+
+80103be0 <mpinit>:
+  return conf;
+}
+
+void
+mpinit(void)
+{
+80103be0:	f3 0f 1e fb          	endbr32 
+80103be4:	55                   	push   %ebp
+80103be5:	89 e5                	mov    %esp,%ebp
+80103be7:	57                   	push   %edi
+80103be8:	56                   	push   %esi
+80103be9:	53                   	push   %ebx
+80103bea:	83 ec 1c             	sub    $0x1c,%esp
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80103bed:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103bf4:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+80103bfb:	c1 e0 08             	shl    $0x8,%eax
+80103bfe:	09 d0                	or     %edx,%eax
+80103c00:	c1 e0 04             	shl    $0x4,%eax
+80103c03:	75 1b                	jne    80103c20 <mpinit+0x40>
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+80103c05:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+80103c0c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103c13:	c1 e0 08             	shl    $0x8,%eax
+80103c16:	09 d0                	or     %edx,%eax
+80103c18:	c1 e0 0a             	shl    $0xa,%eax
+    if((mp = mpsearch1(p-1024, 1024)))
+80103c1b:	2d 00 04 00 00       	sub    $0x400,%eax
+    if((mp = mpsearch1(p, 1024)))
+80103c20:	ba 00 04 00 00       	mov    $0x400,%edx
+80103c25:	e8 36 ff ff ff       	call   80103b60 <mpsearch1>
+80103c2a:	89 c6                	mov    %eax,%esi
+80103c2c:	85 c0                	test   %eax,%eax
+80103c2e:	0f 84 4c 01 00 00    	je     80103d80 <mpinit+0x1a0>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103c34:	8b 5e 04             	mov    0x4(%esi),%ebx
+80103c37:	85 db                	test   %ebx,%ebx
+80103c39:	0f 84 61 01 00 00    	je     80103da0 <mpinit+0x1c0>
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103c3f:	83 ec 04             	sub    $0x4,%esp
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+80103c42:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103c48:	6a 04                	push   $0x4
+80103c4a:	68 1d 8a 10 80       	push   $0x80108a1d
+80103c4f:	50                   	push   %eax
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+80103c50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103c53:	e8 d8 1c 00 00       	call   80105930 <memcmp>
+80103c58:	83 c4 10             	add    $0x10,%esp
+80103c5b:	85 c0                	test   %eax,%eax
+80103c5d:	0f 85 3d 01 00 00    	jne    80103da0 <mpinit+0x1c0>
+  if(conf->version != 1 && conf->version != 4)
+80103c63:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+80103c6a:	3c 01                	cmp    $0x1,%al
+80103c6c:	74 08                	je     80103c76 <mpinit+0x96>
+80103c6e:	3c 04                	cmp    $0x4,%al
+80103c70:	0f 85 2a 01 00 00    	jne    80103da0 <mpinit+0x1c0>
+  if(sum((uchar*)conf, conf->length) != 0)
+80103c76:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+  for(i=0; i<len; i++)
+80103c7d:	66 85 d2             	test   %dx,%dx
+80103c80:	74 26                	je     80103ca8 <mpinit+0xc8>
+80103c82:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
+80103c85:	89 d8                	mov    %ebx,%eax
+  sum = 0;
+80103c87:	31 d2                	xor    %edx,%edx
+80103c89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    sum += addr[i];
+80103c90:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
+80103c97:	83 c0 01             	add    $0x1,%eax
+80103c9a:	01 ca                	add    %ecx,%edx
+  for(i=0; i<len; i++)
+80103c9c:	39 f8                	cmp    %edi,%eax
+80103c9e:	75 f0                	jne    80103c90 <mpinit+0xb0>
+  if(sum((uchar*)conf, conf->length) != 0)
+80103ca0:	84 d2                	test   %dl,%dl
+80103ca2:	0f 85 f8 00 00 00    	jne    80103da0 <mpinit+0x1c0>
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+80103ca8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+80103cae:	a3 7c 50 11 80       	mov    %eax,0x8011507c
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103cb3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+80103cb9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+  ismp = 1;
+80103cc0:	bb 01 00 00 00       	mov    $0x1,%ebx
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103cc5:	03 55 e4             	add    -0x1c(%ebp),%edx
+80103cc8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80103ccb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ccf:	90                   	nop
+80103cd0:	39 c2                	cmp    %eax,%edx
+80103cd2:	76 15                	jbe    80103ce9 <mpinit+0x109>
+    switch(*p){
+80103cd4:	0f b6 08             	movzbl (%eax),%ecx
+80103cd7:	80 f9 02             	cmp    $0x2,%cl
+80103cda:	74 5c                	je     80103d38 <mpinit+0x158>
+80103cdc:	77 42                	ja     80103d20 <mpinit+0x140>
+80103cde:	84 c9                	test   %cl,%cl
+80103ce0:	74 6e                	je     80103d50 <mpinit+0x170>
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+80103ce2:	83 c0 08             	add    $0x8,%eax
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103ce5:	39 c2                	cmp    %eax,%edx
+80103ce7:	77 eb                	ja     80103cd4 <mpinit+0xf4>
+80103ce9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+    default:
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+80103cec:	85 db                	test   %ebx,%ebx
+80103cee:	0f 84 b9 00 00 00    	je     80103dad <mpinit+0x1cd>
+    panic("Didn't find a suitable machine");
+
+  if(mp->imcrp){
+80103cf4:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
+80103cf8:	74 15                	je     80103d0f <mpinit+0x12f>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103cfa:	b8 70 00 00 00       	mov    $0x70,%eax
+80103cff:	ba 22 00 00 00       	mov    $0x22,%edx
+80103d04:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103d05:	ba 23 00 00 00       	mov    $0x23,%edx
+80103d0a:	ec                   	in     (%dx),%al
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+80103d0b:	83 c8 01             	or     $0x1,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103d0e:	ee                   	out    %al,(%dx)
+  }
+}
+80103d0f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103d12:	5b                   	pop    %ebx
+80103d13:	5e                   	pop    %esi
+80103d14:	5f                   	pop    %edi
+80103d15:	5d                   	pop    %ebp
+80103d16:	c3                   	ret    
+80103d17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d1e:	66 90                	xchg   %ax,%ax
+    switch(*p){
+80103d20:	83 e9 03             	sub    $0x3,%ecx
+80103d23:	80 f9 01             	cmp    $0x1,%cl
+80103d26:	76 ba                	jbe    80103ce2 <mpinit+0x102>
+80103d28:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80103d2f:	eb 9f                	jmp    80103cd0 <mpinit+0xf0>
+80103d31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      ioapicid = ioapic->apicno;
+80103d38:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
+      p += sizeof(struct mpioapic);
+80103d3c:	83 c0 08             	add    $0x8,%eax
+      ioapicid = ioapic->apicno;
+80103d3f:	88 0d 60 51 11 80    	mov    %cl,0x80115160
+      continue;
+80103d45:	eb 89                	jmp    80103cd0 <mpinit+0xf0>
+80103d47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d4e:	66 90                	xchg   %ax,%ax
+      if(ncpu < NCPU) {
+80103d50:	8b 0d 00 57 11 80    	mov    0x80115700,%ecx
+80103d56:	83 f9 07             	cmp    $0x7,%ecx
+80103d59:	7f 19                	jg     80103d74 <mpinit+0x194>
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+80103d5b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+80103d61:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+        ncpu++;
+80103d65:	83 c1 01             	add    $0x1,%ecx
+80103d68:	89 0d 00 57 11 80    	mov    %ecx,0x80115700
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+80103d6e:	88 9f 80 51 11 80    	mov    %bl,-0x7feeae80(%edi)
+      p += sizeof(struct mpproc);
+80103d74:	83 c0 14             	add    $0x14,%eax
+      continue;
+80103d77:	e9 54 ff ff ff       	jmp    80103cd0 <mpinit+0xf0>
+80103d7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return mpsearch1(0xF0000, 0x10000);
+80103d80:	ba 00 00 01 00       	mov    $0x10000,%edx
+80103d85:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+80103d8a:	e8 d1 fd ff ff       	call   80103b60 <mpsearch1>
+80103d8f:	89 c6                	mov    %eax,%esi
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103d91:	85 c0                	test   %eax,%eax
+80103d93:	0f 85 9b fe ff ff    	jne    80103c34 <mpinit+0x54>
+80103d99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    panic("Expect to run on an SMP");
+80103da0:	83 ec 0c             	sub    $0xc,%esp
+80103da3:	68 22 8a 10 80       	push   $0x80108a22
+80103da8:	e8 e3 c5 ff ff       	call   80100390 <panic>
+    panic("Didn't find a suitable machine");
+80103dad:	83 ec 0c             	sub    $0xc,%esp
+80103db0:	68 3c 8a 10 80       	push   $0x80108a3c
+80103db5:	e8 d6 c5 ff ff       	call   80100390 <panic>
+80103dba:	66 90                	xchg   %ax,%ax
+80103dbc:	66 90                	xchg   %ax,%ax
+80103dbe:	66 90                	xchg   %ax,%ax
+
+80103dc0 <picinit>:
+#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
+
+// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
+void
+picinit(void)
+{
+80103dc0:	f3 0f 1e fb          	endbr32 
+80103dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103dc9:	ba 21 00 00 00       	mov    $0x21,%edx
+80103dce:	ee                   	out    %al,(%dx)
+80103dcf:	ba a1 00 00 00       	mov    $0xa1,%edx
+80103dd4:	ee                   	out    %al,(%dx)
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+}
+80103dd5:	c3                   	ret    
+80103dd6:	66 90                	xchg   %ax,%ax
+80103dd8:	66 90                	xchg   %ax,%ax
+80103dda:	66 90                	xchg   %ax,%ax
+80103ddc:	66 90                	xchg   %ax,%ax
+80103dde:	66 90                	xchg   %ax,%ax
+
+80103de0 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+80103de0:	f3 0f 1e fb          	endbr32 
+80103de4:	55                   	push   %ebp
+80103de5:	89 e5                	mov    %esp,%ebp
+80103de7:	57                   	push   %edi
+80103de8:	56                   	push   %esi
+80103de9:	53                   	push   %ebx
+80103dea:	83 ec 0c             	sub    $0xc,%esp
+80103ded:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103df0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+80103df3:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103df9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+80103dff:	e8 ec d9 ff ff       	call   801017f0 <filealloc>
+80103e04:	89 03                	mov    %eax,(%ebx)
+80103e06:	85 c0                	test   %eax,%eax
+80103e08:	0f 84 ac 00 00 00    	je     80103eba <pipealloc+0xda>
+80103e0e:	e8 dd d9 ff ff       	call   801017f0 <filealloc>
+80103e13:	89 06                	mov    %eax,(%esi)
+80103e15:	85 c0                	test   %eax,%eax
+80103e17:	0f 84 8b 00 00 00    	je     80103ea8 <pipealloc+0xc8>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103e1d:	e8 fe f1 ff ff       	call   80103020 <kalloc>
+80103e22:	89 c7                	mov    %eax,%edi
+80103e24:	85 c0                	test   %eax,%eax
+80103e26:	0f 84 b4 00 00 00    	je     80103ee0 <pipealloc+0x100>
+    goto bad;
+  p->readopen = 1;
+80103e2c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+80103e33:	00 00 00 
+  p->writeopen = 1;
+  p->nwrite = 0;
+  p->nread = 0;
+  initlock(&p->lock, "pipe");
+80103e36:	83 ec 08             	sub    $0x8,%esp
+  p->writeopen = 1;
+80103e39:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+80103e40:	00 00 00 
+  p->nwrite = 0;
+80103e43:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+80103e4a:	00 00 00 
+  p->nread = 0;
+80103e4d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80103e54:	00 00 00 
+  initlock(&p->lock, "pipe");
+80103e57:	68 5b 8a 10 80       	push   $0x80108a5b
+80103e5c:	50                   	push   %eax
+80103e5d:	e8 ee 17 00 00       	call   80105650 <initlock>
+  (*f0)->type = FD_PIPE;
+80103e62:	8b 03                	mov    (%ebx),%eax
+  (*f0)->pipe = p;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = p;
+  return 0;
+80103e64:	83 c4 10             	add    $0x10,%esp
+  (*f0)->type = FD_PIPE;
+80103e67:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+80103e6d:	8b 03                	mov    (%ebx),%eax
+80103e6f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+80103e73:	8b 03                	mov    (%ebx),%eax
+80103e75:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+80103e79:	8b 03                	mov    (%ebx),%eax
+80103e7b:	89 78 0c             	mov    %edi,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+80103e7e:	8b 06                	mov    (%esi),%eax
+80103e80:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+80103e86:	8b 06                	mov    (%esi),%eax
+80103e88:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+80103e8c:	8b 06                	mov    (%esi),%eax
+80103e8e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+80103e92:	8b 06                	mov    (%esi),%eax
+80103e94:	89 78 0c             	mov    %edi,0xc(%eax)
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+80103e97:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80103e9a:	31 c0                	xor    %eax,%eax
+}
+80103e9c:	5b                   	pop    %ebx
+80103e9d:	5e                   	pop    %esi
+80103e9e:	5f                   	pop    %edi
+80103e9f:	5d                   	pop    %ebp
+80103ea0:	c3                   	ret    
+80103ea1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(*f0)
+80103ea8:	8b 03                	mov    (%ebx),%eax
+80103eaa:	85 c0                	test   %eax,%eax
+80103eac:	74 1e                	je     80103ecc <pipealloc+0xec>
+    fileclose(*f0);
+80103eae:	83 ec 0c             	sub    $0xc,%esp
+80103eb1:	50                   	push   %eax
+80103eb2:	e8 f9 d9 ff ff       	call   801018b0 <fileclose>
+80103eb7:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+80103eba:	8b 06                	mov    (%esi),%eax
+80103ebc:	85 c0                	test   %eax,%eax
+80103ebe:	74 0c                	je     80103ecc <pipealloc+0xec>
+    fileclose(*f1);
+80103ec0:	83 ec 0c             	sub    $0xc,%esp
+80103ec3:	50                   	push   %eax
+80103ec4:	e8 e7 d9 ff ff       	call   801018b0 <fileclose>
+80103ec9:	83 c4 10             	add    $0x10,%esp
+}
+80103ecc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+80103ecf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80103ed4:	5b                   	pop    %ebx
+80103ed5:	5e                   	pop    %esi
+80103ed6:	5f                   	pop    %edi
+80103ed7:	5d                   	pop    %ebp
+80103ed8:	c3                   	ret    
+80103ed9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(*f0)
+80103ee0:	8b 03                	mov    (%ebx),%eax
+80103ee2:	85 c0                	test   %eax,%eax
+80103ee4:	75 c8                	jne    80103eae <pipealloc+0xce>
+80103ee6:	eb d2                	jmp    80103eba <pipealloc+0xda>
+80103ee8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103eef:	90                   	nop
+
+80103ef0 <pipeclose>:
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+80103ef0:	f3 0f 1e fb          	endbr32 
+80103ef4:	55                   	push   %ebp
+80103ef5:	89 e5                	mov    %esp,%ebp
+80103ef7:	56                   	push   %esi
+80103ef8:	53                   	push   %ebx
+80103ef9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103efc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&p->lock);
+80103eff:	83 ec 0c             	sub    $0xc,%esp
+80103f02:	53                   	push   %ebx
+80103f03:	e8 c8 18 00 00       	call   801057d0 <acquire>
+  if(writable){
+80103f08:	83 c4 10             	add    $0x10,%esp
+80103f0b:	85 f6                	test   %esi,%esi
+80103f0d:	74 41                	je     80103f50 <pipeclose+0x60>
+    p->writeopen = 0;
+    wakeup(&p->nread);
+80103f0f:	83 ec 0c             	sub    $0xc,%esp
+80103f12:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+    p->writeopen = 0;
+80103f18:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+80103f1f:	00 00 00 
+    wakeup(&p->nread);
+80103f22:	50                   	push   %eax
+80103f23:	e8 48 0f 00 00       	call   80104e70 <wakeup>
+80103f28:	83 c4 10             	add    $0x10,%esp
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+80103f2b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+80103f31:	85 d2                	test   %edx,%edx
+80103f33:	75 0a                	jne    80103f3f <pipeclose+0x4f>
+80103f35:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+80103f3b:	85 c0                	test   %eax,%eax
+80103f3d:	74 31                	je     80103f70 <pipeclose+0x80>
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+80103f3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80103f42:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f45:	5b                   	pop    %ebx
+80103f46:	5e                   	pop    %esi
+80103f47:	5d                   	pop    %ebp
+    release(&p->lock);
+80103f48:	e9 43 19 00 00       	jmp    80105890 <release>
+80103f4d:	8d 76 00             	lea    0x0(%esi),%esi
+    wakeup(&p->nwrite);
+80103f50:	83 ec 0c             	sub    $0xc,%esp
+80103f53:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+    p->readopen = 0;
+80103f59:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+80103f60:	00 00 00 
+    wakeup(&p->nwrite);
+80103f63:	50                   	push   %eax
+80103f64:	e8 07 0f 00 00       	call   80104e70 <wakeup>
+80103f69:	83 c4 10             	add    $0x10,%esp
+80103f6c:	eb bd                	jmp    80103f2b <pipeclose+0x3b>
+80103f6e:	66 90                	xchg   %ax,%ax
+    release(&p->lock);
+80103f70:	83 ec 0c             	sub    $0xc,%esp
+80103f73:	53                   	push   %ebx
+80103f74:	e8 17 19 00 00       	call   80105890 <release>
+    kfree((char*)p);
+80103f79:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80103f7c:	83 c4 10             	add    $0x10,%esp
+}
+80103f7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f82:	5b                   	pop    %ebx
+80103f83:	5e                   	pop    %esi
+80103f84:	5d                   	pop    %ebp
+    kfree((char*)p);
+80103f85:	e9 d6 ee ff ff       	jmp    80102e60 <kfree>
+80103f8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103f90 <pipewrite>:
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+80103f90:	f3 0f 1e fb          	endbr32 
+80103f94:	55                   	push   %ebp
+80103f95:	89 e5                	mov    %esp,%ebp
+80103f97:	57                   	push   %edi
+80103f98:	56                   	push   %esi
+80103f99:	53                   	push   %ebx
+80103f9a:	83 ec 28             	sub    $0x28,%esp
+80103f9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  acquire(&p->lock);
+80103fa0:	53                   	push   %ebx
+80103fa1:	e8 2a 18 00 00       	call   801057d0 <acquire>
+  for(i = 0; i < n; i++){
+80103fa6:	8b 45 10             	mov    0x10(%ebp),%eax
+80103fa9:	83 c4 10             	add    $0x10,%esp
+80103fac:	85 c0                	test   %eax,%eax
+80103fae:	0f 8e bc 00 00 00    	jle    80104070 <pipewrite+0xe0>
+80103fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103fb7:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || myproc()->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+80103fbd:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+80103fc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103fc6:	03 45 10             	add    0x10(%ebp),%eax
+80103fc9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103fcc:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103fd2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103fd8:	89 ca                	mov    %ecx,%edx
+80103fda:	05 00 02 00 00       	add    $0x200,%eax
+80103fdf:	39 c1                	cmp    %eax,%ecx
+80103fe1:	74 3b                	je     8010401e <pipewrite+0x8e>
+80103fe3:	eb 63                	jmp    80104048 <pipewrite+0xb8>
+80103fe5:	8d 76 00             	lea    0x0(%esi),%esi
+      if(p->readopen == 0 || myproc()->killed){
+80103fe8:	e8 93 05 00 00       	call   80104580 <myproc>
+80103fed:	8b 48 24             	mov    0x24(%eax),%ecx
+80103ff0:	85 c9                	test   %ecx,%ecx
+80103ff2:	75 34                	jne    80104028 <pipewrite+0x98>
+      wakeup(&p->nread);
+80103ff4:	83 ec 0c             	sub    $0xc,%esp
+80103ff7:	57                   	push   %edi
+80103ff8:	e8 73 0e 00 00       	call   80104e70 <wakeup>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103ffd:	58                   	pop    %eax
+80103ffe:	5a                   	pop    %edx
+80103fff:	53                   	push   %ebx
+80104000:	56                   	push   %esi
+80104001:	e8 3a 0b 00 00       	call   80104b40 <sleep>
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80104006:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010400c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+80104012:	83 c4 10             	add    $0x10,%esp
+80104015:	05 00 02 00 00       	add    $0x200,%eax
+8010401a:	39 c2                	cmp    %eax,%edx
+8010401c:	75 2a                	jne    80104048 <pipewrite+0xb8>
+      if(p->readopen == 0 || myproc()->killed){
+8010401e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80104024:	85 c0                	test   %eax,%eax
+80104026:	75 c0                	jne    80103fe8 <pipewrite+0x58>
+        release(&p->lock);
+80104028:	83 ec 0c             	sub    $0xc,%esp
+8010402b:	53                   	push   %ebx
+8010402c:	e8 5f 18 00 00       	call   80105890 <release>
+        return -1;
+80104031:	83 c4 10             	add    $0x10,%esp
+80104034:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+80104039:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010403c:	5b                   	pop    %ebx
+8010403d:	5e                   	pop    %esi
+8010403e:	5f                   	pop    %edi
+8010403f:	5d                   	pop    %ebp
+80104040:	c3                   	ret    
+80104041:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+80104048:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+8010404b:	8d 4a 01             	lea    0x1(%edx),%ecx
+8010404e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+80104054:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
+8010405a:	0f b6 06             	movzbl (%esi),%eax
+8010405d:	83 c6 01             	add    $0x1,%esi
+80104060:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+80104063:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
+  for(i = 0; i < n; i++){
+80104067:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+8010406a:	0f 85 5c ff ff ff    	jne    80103fcc <pipewrite+0x3c>
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+80104070:	83 ec 0c             	sub    $0xc,%esp
+80104073:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80104079:	50                   	push   %eax
+8010407a:	e8 f1 0d 00 00       	call   80104e70 <wakeup>
+  release(&p->lock);
+8010407f:	89 1c 24             	mov    %ebx,(%esp)
+80104082:	e8 09 18 00 00       	call   80105890 <release>
+  return n;
+80104087:	8b 45 10             	mov    0x10(%ebp),%eax
+8010408a:	83 c4 10             	add    $0x10,%esp
+8010408d:	eb aa                	jmp    80104039 <pipewrite+0xa9>
+8010408f:	90                   	nop
+
+80104090 <piperead>:
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+80104090:	f3 0f 1e fb          	endbr32 
+80104094:	55                   	push   %ebp
+80104095:	89 e5                	mov    %esp,%ebp
+80104097:	57                   	push   %edi
+80104098:	56                   	push   %esi
+80104099:	53                   	push   %ebx
+8010409a:	83 ec 18             	sub    $0x18,%esp
+8010409d:	8b 75 08             	mov    0x8(%ebp),%esi
+801040a0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  int i;
+
+  acquire(&p->lock);
+801040a3:	56                   	push   %esi
+801040a4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+801040aa:	e8 21 17 00 00       	call   801057d0 <acquire>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801040af:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+801040b5:	83 c4 10             	add    $0x10,%esp
+801040b8:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
+801040be:	74 33                	je     801040f3 <piperead+0x63>
+801040c0:	eb 3b                	jmp    801040fd <piperead+0x6d>
+801040c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(myproc()->killed){
+801040c8:	e8 b3 04 00 00       	call   80104580 <myproc>
+801040cd:	8b 48 24             	mov    0x24(%eax),%ecx
+801040d0:	85 c9                	test   %ecx,%ecx
+801040d2:	0f 85 88 00 00 00    	jne    80104160 <piperead+0xd0>
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+801040d8:	83 ec 08             	sub    $0x8,%esp
+801040db:	56                   	push   %esi
+801040dc:	53                   	push   %ebx
+801040dd:	e8 5e 0a 00 00       	call   80104b40 <sleep>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801040e2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
+801040e8:	83 c4 10             	add    $0x10,%esp
+801040eb:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
+801040f1:	75 0a                	jne    801040fd <piperead+0x6d>
+801040f3:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
+801040f9:	85 c0                	test   %eax,%eax
+801040fb:	75 cb                	jne    801040c8 <piperead+0x38>
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+801040fd:	8b 55 10             	mov    0x10(%ebp),%edx
+80104100:	31 db                	xor    %ebx,%ebx
+80104102:	85 d2                	test   %edx,%edx
+80104104:	7f 28                	jg     8010412e <piperead+0x9e>
+80104106:	eb 34                	jmp    8010413c <piperead+0xac>
+80104108:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010410f:	90                   	nop
+    if(p->nread == p->nwrite)
+      break;
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+80104110:	8d 48 01             	lea    0x1(%eax),%ecx
+80104113:	25 ff 01 00 00       	and    $0x1ff,%eax
+80104118:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
+8010411e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
+80104123:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80104126:	83 c3 01             	add    $0x1,%ebx
+80104129:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010412c:	74 0e                	je     8010413c <piperead+0xac>
+    if(p->nread == p->nwrite)
+8010412e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+80104134:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
+8010413a:	75 d4                	jne    80104110 <piperead+0x80>
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+8010413c:	83 ec 0c             	sub    $0xc,%esp
+8010413f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+80104145:	50                   	push   %eax
+80104146:	e8 25 0d 00 00       	call   80104e70 <wakeup>
+  release(&p->lock);
+8010414b:	89 34 24             	mov    %esi,(%esp)
+8010414e:	e8 3d 17 00 00       	call   80105890 <release>
+  return i;
+80104153:	83 c4 10             	add    $0x10,%esp
+}
+80104156:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104159:	89 d8                	mov    %ebx,%eax
+8010415b:	5b                   	pop    %ebx
+8010415c:	5e                   	pop    %esi
+8010415d:	5f                   	pop    %edi
+8010415e:	5d                   	pop    %ebp
+8010415f:	c3                   	ret    
+      release(&p->lock);
+80104160:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80104163:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+      release(&p->lock);
+80104168:	56                   	push   %esi
+80104169:	e8 22 17 00 00       	call   80105890 <release>
+      return -1;
+8010416e:	83 c4 10             	add    $0x10,%esp
+}
+80104171:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104174:	89 d8                	mov    %ebx,%eax
+80104176:	5b                   	pop    %ebx
+80104177:	5e                   	pop    %esi
+80104178:	5f                   	pop    %edi
+80104179:	5d                   	pop    %ebp
+8010417a:	c3                   	ret    
+8010417b:	66 90                	xchg   %ax,%ax
+8010417d:	66 90                	xchg   %ax,%ax
+8010417f:	90                   	nop
+
+80104180 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+80104180:	55                   	push   %ebp
+80104181:	89 e5                	mov    %esp,%ebp
+80104183:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104184:	bb b4 5a 11 80       	mov    $0x80115ab4,%ebx
+{
+80104189:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010418c:	68 80 5a 11 80       	push   $0x80115a80
+80104191:	e8 3a 16 00 00       	call   801057d0 <acquire>
+80104196:	83 c4 10             	add    $0x10,%esp
+80104199:	eb 17                	jmp    801041b2 <allocproc+0x32>
+8010419b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010419f:	90                   	nop
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801041a0:	81 c3 94 00 00 00    	add    $0x94,%ebx
+801041a6:	81 fb b4 7f 11 80    	cmp    $0x80117fb4,%ebx
+801041ac:	0f 84 9e 00 00 00    	je     80104250 <allocproc+0xd0>
+    if(p->state == UNUSED)
+801041b2:	8b 43 0c             	mov    0xc(%ebx),%eax
+801041b5:	85 c0                	test   %eax,%eax
+801041b7:	75 e7                	jne    801041a0 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+801041b9:	a1 04 c0 10 80       	mov    0x8010c004,%eax
+  p->ctime = ticks;
+  p->retime = 0;
+  p->rutime = 0;
+  p->stime = 0;
+  release(&ptable.lock);
+801041be:	83 ec 0c             	sub    $0xc,%esp
+  p->state = EMBRYO;
+801041c1:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->retime = 0;
+801041c8:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
+801041cf:	00 00 00 
+  p->pid = nextpid++;
+801041d2:	8d 50 01             	lea    0x1(%eax),%edx
+801041d5:	89 43 10             	mov    %eax,0x10(%ebx)
+  p->ctime = ticks;
+801041d8:	a1 00 88 11 80       	mov    0x80118800,%eax
+  p->rutime = 0;
+801041dd:	c7 83 88 00 00 00 00 	movl   $0x0,0x88(%ebx)
+801041e4:	00 00 00 
+  p->ctime = ticks;
+801041e7:	89 43 7c             	mov    %eax,0x7c(%ebx)
+  p->stime = 0;
+801041ea:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+801041f1:	00 00 00 
+  release(&ptable.lock);
+801041f4:	68 80 5a 11 80       	push   $0x80115a80
+  p->pid = nextpid++;
+801041f9:	89 15 04 c0 10 80    	mov    %edx,0x8010c004
+  release(&ptable.lock);
+801041ff:	e8 8c 16 00 00       	call   80105890 <release>
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+80104204:	e8 17 ee ff ff       	call   80103020 <kalloc>
+80104209:	83 c4 10             	add    $0x10,%esp
+8010420c:	89 43 08             	mov    %eax,0x8(%ebx)
+8010420f:	85 c0                	test   %eax,%eax
+80104211:	74 56                	je     80104269 <allocproc+0xe9>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+80104213:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+80104219:	83 ec 04             	sub    $0x4,%esp
+  sp -= sizeof *p->context;
+8010421c:	05 9c 0f 00 00       	add    $0xf9c,%eax
+  sp -= sizeof *p->tf;
+80104221:	89 53 18             	mov    %edx,0x18(%ebx)
+  *(uint*)sp = (uint)trapret;
+80104224:	c7 40 14 4f 6c 10 80 	movl   $0x80106c4f,0x14(%eax)
+  p->context = (struct context*)sp;
+8010422b:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+8010422e:	6a 14                	push   $0x14
+80104230:	6a 00                	push   $0x0
+80104232:	50                   	push   %eax
+80104233:	e8 a8 16 00 00       	call   801058e0 <memset>
+  p->context->eip = (uint)forkret;
+80104238:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+8010423b:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+8010423e:	c7 40 10 80 42 10 80 	movl   $0x80104280,0x10(%eax)
+}
+80104245:	89 d8                	mov    %ebx,%eax
+80104247:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010424a:	c9                   	leave  
+8010424b:	c3                   	ret    
+8010424c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  release(&ptable.lock);
+80104250:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80104253:	31 db                	xor    %ebx,%ebx
+  release(&ptable.lock);
+80104255:	68 80 5a 11 80       	push   $0x80115a80
+8010425a:	e8 31 16 00 00       	call   80105890 <release>
+}
+8010425f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80104261:	83 c4 10             	add    $0x10,%esp
+}
+80104264:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104267:	c9                   	leave  
+80104268:	c3                   	ret    
+    p->state = UNUSED;
+80104269:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+80104270:	31 db                	xor    %ebx,%ebx
+}
+80104272:	89 d8                	mov    %ebx,%eax
+80104274:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104277:	c9                   	leave  
+80104278:	c3                   	ret    
+80104279:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104280 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+80104280:	f3 0f 1e fb          	endbr32 
+80104284:	55                   	push   %ebp
+80104285:	89 e5                	mov    %esp,%ebp
+80104287:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+8010428a:	68 80 5a 11 80       	push   $0x80115a80
+8010428f:	e8 fc 15 00 00       	call   80105890 <release>
+
+  if (first) {
+80104294:	a1 00 c0 10 80       	mov    0x8010c000,%eax
+80104299:	83 c4 10             	add    $0x10,%esp
+8010429c:	85 c0                	test   %eax,%eax
+8010429e:	75 08                	jne    801042a8 <forkret+0x28>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+801042a0:	c9                   	leave  
+801042a1:	c3                   	ret    
+801042a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    first = 0;
+801042a8:	c7 05 00 c0 10 80 00 	movl   $0x0,0x8010c000
+801042af:	00 00 00 
+    iinit(ROOTDEV);
+801042b2:	83 ec 0c             	sub    $0xc,%esp
+801042b5:	6a 01                	push   $0x1
+801042b7:	e8 74 dc ff ff       	call   80101f30 <iinit>
+    initlog(ROOTDEV);
+801042bc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801042c3:	e8 b8 f3 ff ff       	call   80103680 <initlog>
+}
+801042c8:	83 c4 10             	add    $0x10,%esp
+801042cb:	c9                   	leave  
+801042cc:	c3                   	ret    
+801042cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801042d0 <pqueue_create>:
+void pqueue_create(pqueue_t* q, int cap){
+801042d0:	f3 0f 1e fb          	endbr32 
+801042d4:	55                   	push   %ebp
+801042d5:	89 e5                	mov    %esp,%ebp
+801042d7:	8b 55 08             	mov    0x8(%ebp),%edx
+801042da:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+    q->size = 0;
+801042dd:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+    q->capacity = cap;
+801042e3:	89 4a 04             	mov    %ecx,0x4(%edx)
+    for(int i=0; i < cap; i++)
+801042e6:	85 c9                	test   %ecx,%ecx
+801042e8:	7e 15                	jle    801042ff <pqueue_create+0x2f>
+801042ea:	31 c0                	xor    %eax,%eax
+801042ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      q->procs[i] = 0;
+801042f0:	c7 44 82 08 00 00 00 	movl   $0x0,0x8(%edx,%eax,4)
+801042f7:	00 
+    for(int i=0; i < cap; i++)
+801042f8:	83 c0 01             	add    $0x1,%eax
+801042fb:	39 c1                	cmp    %eax,%ecx
+801042fd:	75 f1                	jne    801042f0 <pqueue_create+0x20>
+}
+801042ff:	5d                   	pop    %ebp
+80104300:	c3                   	ret    
+80104301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010430f:	90                   	nop
+
+80104310 <pqueue_insert>:
+void pqueue_insert(pqueue_t* q, struct proc* p){
+80104310:	f3 0f 1e fb          	endbr32 
+80104314:	55                   	push   %ebp
+80104315:	89 e5                	mov    %esp,%ebp
+80104317:	57                   	push   %edi
+80104318:	56                   	push   %esi
+80104319:	53                   	push   %ebx
+8010431a:	83 ec 1c             	sub    $0x1c,%esp
+8010431d:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104320:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+    if(q->size == q->capacity){
+80104323:	8b 01                	mov    (%ecx),%eax
+80104325:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80104328:	3b 41 04             	cmp    0x4(%ecx),%eax
+8010432b:	74 47                	je     80104374 <pqueue_insert+0x64>
+        while(pos >= 0 && q->procs[pos]->ctime > p->ctime){
+8010432d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80104330:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+80104333:	83 e8 01             	sub    $0x1,%eax
+80104336:	79 14                	jns    8010434c <pqueue_insert+0x3c>
+80104338:	eb 21                	jmp    8010435b <pqueue_insert+0x4b>
+8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+            q->procs[pos+1] = q->procs[pos];
+80104340:	89 54 81 0c          	mov    %edx,0xc(%ecx,%eax,4)
+            pos --;
+80104344:	83 e8 01             	sub    $0x1,%eax
+        while(pos >= 0 && q->procs[pos]->ctime > p->ctime){
+80104347:	83 f8 ff             	cmp    $0xffffffff,%eax
+8010434a:	74 24                	je     80104370 <pqueue_insert+0x60>
+8010434c:	8b 54 81 08          	mov    0x8(%ecx,%eax,4),%edx
+80104350:	8b 7b 7c             	mov    0x7c(%ebx),%edi
+80104353:	8d 70 01             	lea    0x1(%eax),%esi
+80104356:	39 7a 7c             	cmp    %edi,0x7c(%edx)
+80104359:	77 e5                	ja     80104340 <pqueue_insert+0x30>
+        q->size ++;
+8010435b:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        q->procs[pos+1] = p;
+8010435e:	89 5c b1 08          	mov    %ebx,0x8(%ecx,%esi,4)
+        q->size ++;
+80104362:	83 c7 01             	add    $0x1,%edi
+80104365:	89 39                	mov    %edi,(%ecx)
+}
+80104367:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010436a:	5b                   	pop    %ebx
+8010436b:	5e                   	pop    %esi
+8010436c:	5f                   	pop    %edi
+8010436d:	5d                   	pop    %ebp
+8010436e:	c3                   	ret    
+8010436f:	90                   	nop
+80104370:	31 f6                	xor    %esi,%esi
+80104372:	eb e7                	jmp    8010435b <pqueue_insert+0x4b>
+        panic("error: the priority queue is full");
+80104374:	83 ec 0c             	sub    $0xc,%esp
+80104377:	68 60 8a 10 80       	push   $0x80108a60
+8010437c:	e8 0f c0 ff ff       	call   80100390 <panic>
+80104381:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104388:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010438f:	90                   	nop
+
+80104390 <pqueue_get>:
+struct proc* pqueue_get(pqueue_t* q){
+80104390:	f3 0f 1e fb          	endbr32 
+80104394:	55                   	push   %ebp
+80104395:	89 e5                	mov    %esp,%ebp
+80104397:	53                   	push   %ebx
+80104398:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    for(pos = 0; pos < q->size; pos++){
+8010439b:	8b 19                	mov    (%ecx),%ebx
+8010439d:	85 db                	test   %ebx,%ebx
+8010439f:	7e 1f                	jle    801043c0 <pqueue_get+0x30>
+801043a1:	31 c0                	xor    %eax,%eax
+801043a3:	eb 0a                	jmp    801043af <pqueue_get+0x1f>
+801043a5:	8d 76 00             	lea    0x0(%esi),%esi
+801043a8:	83 c0 01             	add    $0x1,%eax
+801043ab:	39 d8                	cmp    %ebx,%eax
+801043ad:	74 11                	je     801043c0 <pqueue_get+0x30>
+      if(q->procs[pos]->state == RUNNABLE){
+801043af:	8b 54 81 08          	mov    0x8(%ecx,%eax,4),%edx
+801043b3:	83 7a 0c 03          	cmpl   $0x3,0xc(%edx)
+801043b7:	75 ef                	jne    801043a8 <pqueue_get+0x18>
+}
+801043b9:	89 d0                	mov    %edx,%eax
+801043bb:	5b                   	pop    %ebx
+801043bc:	5d                   	pop    %ebp
+801043bd:	c3                   	ret    
+801043be:	66 90                	xchg   %ax,%ax
+    struct proc* np = 0;
+801043c0:	31 d2                	xor    %edx,%edx
+}
+801043c2:	5b                   	pop    %ebx
+801043c3:	5d                   	pop    %ebp
+801043c4:	89 d0                	mov    %edx,%eax
+801043c6:	c3                   	ret    
+801043c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801043ce:	66 90                	xchg   %ax,%ax
+
+801043d0 <pqueue_size>:
+int pqueue_size(pqueue_t* q){
+801043d0:	f3 0f 1e fb          	endbr32 
+801043d4:	55                   	push   %ebp
+801043d5:	89 e5                	mov    %esp,%ebp
+    return q->size;
+801043d7:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+801043da:	5d                   	pop    %ebp
+    return q->size;
+801043db:	8b 00                	mov    (%eax),%eax
+}
+801043dd:	c3                   	ret    
+801043de:	66 90                	xchg   %ax,%ax
+
+801043e0 <pqueue_remove>:
+void pqueue_remove(pqueue_t* q, struct proc* proc){
+801043e0:	f3 0f 1e fb          	endbr32 
+801043e4:	55                   	push   %ebp
+801043e5:	89 e5                	mov    %esp,%ebp
+801043e7:	53                   	push   %ebx
+801043e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801043eb:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+    while(pos < q->size && !found){
+801043ee:	8b 11                	mov    (%ecx),%edx
+801043f0:	85 d2                	test   %edx,%edx
+801043f2:	7e 19                	jle    8010440d <pqueue_remove+0x2d>
+    pos = 0;
+801043f4:	31 c0                	xor    %eax,%eax
+801043f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801043fd:	8d 76 00             	lea    0x0(%esi),%esi
+        if(q->procs[pos] == proc) found = true;
+80104400:	39 5c 81 08          	cmp    %ebx,0x8(%ecx,%eax,4)
+80104404:	74 0a                	je     80104410 <pqueue_remove+0x30>
+        else pos++;
+80104406:	83 c0 01             	add    $0x1,%eax
+    while(pos < q->size && !found){
+80104409:	39 d0                	cmp    %edx,%eax
+8010440b:	75 f3                	jne    80104400 <pqueue_remove+0x20>
+}
+8010440d:	5b                   	pop    %ebx
+8010440e:	5d                   	pop    %ebp
+8010440f:	c3                   	ret    
+        while(pos < q->size-1){
+80104410:	83 ea 01             	sub    $0x1,%edx
+80104413:	39 c2                	cmp    %eax,%edx
+80104415:	7e 0f                	jle    80104426 <pqueue_remove+0x46>
+            q->procs[pos] = q->procs[pos+1];
+80104417:	83 c0 01             	add    $0x1,%eax
+8010441a:	8b 5c 81 08          	mov    0x8(%ecx,%eax,4),%ebx
+8010441e:	89 5c 81 04          	mov    %ebx,0x4(%ecx,%eax,4)
+        while(pos < q->size-1){
+80104422:	39 d0                	cmp    %edx,%eax
+80104424:	75 f1                	jne    80104417 <pqueue_remove+0x37>
+        q->procs[q->size-1] = 0;
+80104426:	c7 44 91 08 00 00 00 	movl   $0x0,0x8(%ecx,%edx,4)
+8010442d:	00 
+        q->size --;
+8010442e:	89 11                	mov    %edx,(%ecx)
+}
+80104430:	5b                   	pop    %ebx
+80104431:	5d                   	pop    %ebp
+80104432:	c3                   	ret    
+80104433:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010443a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104440 <pinit>:
+{
+80104440:	f3 0f 1e fb          	endbr32 
+80104444:	55                   	push   %ebp
+80104445:	89 e5                	mov    %esp,%ebp
+80104447:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+8010444a:	68 aa 8a 10 80       	push   $0x80108aaa
+8010444f:	68 80 5a 11 80       	push   $0x80115a80
+80104454:	e8 f7 11 00 00       	call   80105650 <initlock>
+    q->capacity = cap;
+80104459:	83 c4 10             	add    $0x10,%esp
+    for(int i=0; i < cap; i++)
+8010445c:	31 c0                	xor    %eax,%eax
+    q->size = 0;
+8010445e:	c7 05 60 59 11 80 00 	movl   $0x0,0x80115960
+80104465:	00 00 00 
+    q->capacity = cap;
+80104468:	c7 05 64 59 11 80 40 	movl   $0x40,0x80115964
+8010446f:	00 00 00 
+    for(int i=0; i < cap; i++)
+80104472:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      q->procs[i] = 0;
+80104478:	c7 04 85 68 59 11 80 	movl   $0x0,-0x7feea698(,%eax,4)
+8010447f:	00 00 00 00 
+    for(int i=0; i < cap; i++)
+80104483:	83 c0 01             	add    $0x1,%eax
+80104486:	83 f8 40             	cmp    $0x40,%eax
+80104489:	75 ed                	jne    80104478 <pinit+0x38>
+    q->size = 0;
+8010448b:	c7 05 40 58 11 80 00 	movl   $0x0,0x80115840
+80104492:	00 00 00 
+    for(int i=0; i < cap; i++)
+80104495:	31 c0                	xor    %eax,%eax
+    q->capacity = cap;
+80104497:	c7 05 44 58 11 80 40 	movl   $0x40,0x80115844
+8010449e:	00 00 00 
+    for(int i=0; i < cap; i++)
+801044a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      q->procs[i] = 0;
+801044a8:	c7 04 85 48 58 11 80 	movl   $0x0,-0x7feea7b8(,%eax,4)
+801044af:	00 00 00 00 
+    for(int i=0; i < cap; i++)
+801044b3:	83 c0 01             	add    $0x1,%eax
+801044b6:	83 f8 40             	cmp    $0x40,%eax
+801044b9:	75 ed                	jne    801044a8 <pinit+0x68>
+    q->size = 0;
+801044bb:	c7 05 20 57 11 80 00 	movl   $0x0,0x80115720
+801044c2:	00 00 00 
+    for(int i=0; i < cap; i++)
+801044c5:	31 c0                	xor    %eax,%eax
+    q->capacity = cap;
+801044c7:	c7 05 24 57 11 80 40 	movl   $0x40,0x80115724
+801044ce:	00 00 00 
+    for(int i=0; i < cap; i++)
+801044d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      q->procs[i] = 0;
+801044d8:	c7 04 85 28 57 11 80 	movl   $0x0,-0x7feea8d8(,%eax,4)
+801044df:	00 00 00 00 
+    for(int i=0; i < cap; i++)
+801044e3:	83 c0 01             	add    $0x1,%eax
+801044e6:	83 f8 40             	cmp    $0x40,%eax
+801044e9:	75 ed                	jne    801044d8 <pinit+0x98>
+}
+801044eb:	c9                   	leave  
+801044ec:	c3                   	ret    
+801044ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801044f0 <mycpu>:
+{
+801044f0:	f3 0f 1e fb          	endbr32 
+801044f4:	55                   	push   %ebp
+801044f5:	89 e5                	mov    %esp,%ebp
+801044f7:	56                   	push   %esi
+801044f8:	53                   	push   %ebx
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801044f9:	9c                   	pushf  
+801044fa:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+801044fb:	f6 c4 02             	test   $0x2,%ah
+801044fe:	75 4a                	jne    8010454a <mycpu+0x5a>
+  apicid = lapicid();
+80104500:	e8 8b ed ff ff       	call   80103290 <lapicid>
+  for (i = 0; i < ncpu; ++i) {
+80104505:	8b 35 00 57 11 80    	mov    0x80115700,%esi
+  apicid = lapicid();
+8010450b:	89 c3                	mov    %eax,%ebx
+  for (i = 0; i < ncpu; ++i) {
+8010450d:	85 f6                	test   %esi,%esi
+8010450f:	7e 2c                	jle    8010453d <mycpu+0x4d>
+80104511:	31 d2                	xor    %edx,%edx
+80104513:	eb 0a                	jmp    8010451f <mycpu+0x2f>
+80104515:	8d 76 00             	lea    0x0(%esi),%esi
+80104518:	83 c2 01             	add    $0x1,%edx
+8010451b:	39 f2                	cmp    %esi,%edx
+8010451d:	74 1e                	je     8010453d <mycpu+0x4d>
+    if (cpus[i].apicid == apicid)
+8010451f:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+80104525:	0f b6 81 80 51 11 80 	movzbl -0x7feeae80(%ecx),%eax
+8010452c:	39 d8                	cmp    %ebx,%eax
+8010452e:	75 e8                	jne    80104518 <mycpu+0x28>
+}
+80104530:	8d 65 f8             	lea    -0x8(%ebp),%esp
+      return &cpus[i];
+80104533:	8d 81 80 51 11 80    	lea    -0x7feeae80(%ecx),%eax
+}
+80104539:	5b                   	pop    %ebx
+8010453a:	5e                   	pop    %esi
+8010453b:	5d                   	pop    %ebp
+8010453c:	c3                   	ret    
+  panic("unknown apicid\n");
+8010453d:	83 ec 0c             	sub    $0xc,%esp
+80104540:	68 b1 8a 10 80       	push   $0x80108ab1
+80104545:	e8 46 be ff ff       	call   80100390 <panic>
+    panic("mycpu called with interrupts enabled\n");
+8010454a:	83 ec 0c             	sub    $0xc,%esp
+8010454d:	68 84 8a 10 80       	push   $0x80108a84
+80104552:	e8 39 be ff ff       	call   80100390 <panic>
+80104557:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010455e:	66 90                	xchg   %ax,%ax
+
+80104560 <cpuid>:
+cpuid() {
+80104560:	f3 0f 1e fb          	endbr32 
+80104564:	55                   	push   %ebp
+80104565:	89 e5                	mov    %esp,%ebp
+80104567:	83 ec 08             	sub    $0x8,%esp
+  return mycpu()-cpus;
+8010456a:	e8 81 ff ff ff       	call   801044f0 <mycpu>
+}
+8010456f:	c9                   	leave  
+  return mycpu()-cpus;
+80104570:	2d 80 51 11 80       	sub    $0x80115180,%eax
+80104575:	c1 f8 04             	sar    $0x4,%eax
+80104578:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+8010457e:	c3                   	ret    
+8010457f:	90                   	nop
+
+80104580 <myproc>:
+myproc(void) {
+80104580:	f3 0f 1e fb          	endbr32 
+80104584:	55                   	push   %ebp
+80104585:	89 e5                	mov    %esp,%ebp
+80104587:	53                   	push   %ebx
+80104588:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+8010458b:	e8 40 11 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80104590:	e8 5b ff ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80104595:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010459b:	e8 80 11 00 00       	call   80105720 <popcli>
+}
+801045a0:	83 c4 04             	add    $0x4,%esp
+801045a3:	89 d8                	mov    %ebx,%eax
+801045a5:	5b                   	pop    %ebx
+801045a6:	5d                   	pop    %ebp
+801045a7:	c3                   	ret    
+801045a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045af:	90                   	nop
+
+801045b0 <userinit>:
+{
+801045b0:	f3 0f 1e fb          	endbr32 
+801045b4:	55                   	push   %ebp
+801045b5:	89 e5                	mov    %esp,%ebp
+801045b7:	53                   	push   %ebx
+801045b8:	83 ec 04             	sub    $0x4,%esp
+  p = allocproc();
+801045bb:	e8 c0 fb ff ff       	call   80104180 <allocproc>
+801045c0:	89 c3                	mov    %eax,%ebx
+  initproc = p;
+801045c2:	a3 b8 c5 10 80       	mov    %eax,0x8010c5b8
+  if((p->pgdir = setupkvm()) == 0)
+801045c7:	e8 74 3c 00 00       	call   80108240 <setupkvm>
+801045cc:	89 43 04             	mov    %eax,0x4(%ebx)
+801045cf:	85 c0                	test   %eax,%eax
+801045d1:	0f 84 c5 00 00 00    	je     8010469c <userinit+0xec>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+801045d7:	83 ec 04             	sub    $0x4,%esp
+801045da:	68 2c 00 00 00       	push   $0x2c
+801045df:	68 60 c4 10 80       	push   $0x8010c460
+801045e4:	50                   	push   %eax
+801045e5:	e8 26 39 00 00       	call   80107f10 <inituvm>
+  p->sz = PGSIZE;
+801045ea:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+801045f0:	83 c4 0c             	add    $0xc,%esp
+  p->ctime = ticks;
+801045f3:	a1 00 88 11 80       	mov    0x80118800,%eax
+801045f8:	89 43 7c             	mov    %eax,0x7c(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+801045fb:	6a 4c                	push   $0x4c
+801045fd:	6a 00                	push   $0x0
+801045ff:	ff 73 18             	pushl  0x18(%ebx)
+80104602:	e8 d9 12 00 00       	call   801058e0 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+80104607:	8b 43 18             	mov    0x18(%ebx),%eax
+8010460a:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+8010460f:	83 c4 0c             	add    $0xc,%esp
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+80104612:	b9 23 00 00 00       	mov    $0x23,%ecx
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+80104617:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+8010461b:	8b 43 18             	mov    0x18(%ebx),%eax
+8010461e:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+80104622:	8b 43 18             	mov    0x18(%ebx),%eax
+80104625:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80104629:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+8010462d:	8b 43 18             	mov    0x18(%ebx),%eax
+80104630:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80104634:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+80104638:	8b 43 18             	mov    0x18(%ebx),%eax
+8010463b:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+80104642:	8b 43 18             	mov    0x18(%ebx),%eax
+80104645:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0;  // beginning of initcode.S
+8010464c:	8b 43 18             	mov    0x18(%ebx),%eax
+8010464f:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+80104656:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104659:	6a 10                	push   $0x10
+8010465b:	68 da 8a 10 80       	push   $0x80108ada
+80104660:	50                   	push   %eax
+80104661:	e8 3a 14 00 00       	call   80105aa0 <safestrcpy>
+  p->cwd = namei("/");
+80104666:	c7 04 24 e3 8a 10 80 	movl   $0x80108ae3,(%esp)
+8010466d:	e8 ae e3 ff ff       	call   80102a20 <namei>
+80104672:	89 43 68             	mov    %eax,0x68(%ebx)
+  acquire(&ptable.lock);
+80104675:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+8010467c:	e8 4f 11 00 00       	call   801057d0 <acquire>
+  p->state = RUNNABLE;
+80104681:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+80104688:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+8010468f:	e8 fc 11 00 00       	call   80105890 <release>
+}
+80104694:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104697:	83 c4 10             	add    $0x10,%esp
+8010469a:	c9                   	leave  
+8010469b:	c3                   	ret    
+    panic("userinit: out of memory?");
+8010469c:	83 ec 0c             	sub    $0xc,%esp
+8010469f:	68 c1 8a 10 80       	push   $0x80108ac1
+801046a4:	e8 e7 bc ff ff       	call   80100390 <panic>
+801046a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801046b0 <growproc>:
+{
+801046b0:	f3 0f 1e fb          	endbr32 
+801046b4:	55                   	push   %ebp
+801046b5:	89 e5                	mov    %esp,%ebp
+801046b7:	56                   	push   %esi
+801046b8:	53                   	push   %ebx
+801046b9:	8b 75 08             	mov    0x8(%ebp),%esi
+  pushcli();
+801046bc:	e8 0f 10 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+801046c1:	e8 2a fe ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+801046c6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801046cc:	e8 4f 10 00 00       	call   80105720 <popcli>
+  sz = curproc->sz;
+801046d1:	8b 03                	mov    (%ebx),%eax
+  if(n > 0){
+801046d3:	85 f6                	test   %esi,%esi
+801046d5:	7f 19                	jg     801046f0 <growproc+0x40>
+  } else if(n < 0){
+801046d7:	75 37                	jne    80104710 <growproc+0x60>
+  switchuvm(curproc);
+801046d9:	83 ec 0c             	sub    $0xc,%esp
+  curproc->sz = sz;
+801046dc:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+801046de:	53                   	push   %ebx
+801046df:	e8 1c 37 00 00       	call   80107e00 <switchuvm>
+  return 0;
+801046e4:	83 c4 10             	add    $0x10,%esp
+801046e7:	31 c0                	xor    %eax,%eax
+}
+801046e9:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801046ec:	5b                   	pop    %ebx
+801046ed:	5e                   	pop    %esi
+801046ee:	5d                   	pop    %ebp
+801046ef:	c3                   	ret    
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+801046f0:	83 ec 04             	sub    $0x4,%esp
+801046f3:	01 c6                	add    %eax,%esi
+801046f5:	56                   	push   %esi
+801046f6:	50                   	push   %eax
+801046f7:	ff 73 04             	pushl  0x4(%ebx)
+801046fa:	e8 61 39 00 00       	call   80108060 <allocuvm>
+801046ff:	83 c4 10             	add    $0x10,%esp
+80104702:	85 c0                	test   %eax,%eax
+80104704:	75 d3                	jne    801046d9 <growproc+0x29>
+      return -1;
+80104706:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010470b:	eb dc                	jmp    801046e9 <growproc+0x39>
+8010470d:	8d 76 00             	lea    0x0(%esi),%esi
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+80104710:	83 ec 04             	sub    $0x4,%esp
+80104713:	01 c6                	add    %eax,%esi
+80104715:	56                   	push   %esi
+80104716:	50                   	push   %eax
+80104717:	ff 73 04             	pushl  0x4(%ebx)
+8010471a:	e8 71 3a 00 00       	call   80108190 <deallocuvm>
+8010471f:	83 c4 10             	add    $0x10,%esp
+80104722:	85 c0                	test   %eax,%eax
+80104724:	75 b3                	jne    801046d9 <growproc+0x29>
+80104726:	eb de                	jmp    80104706 <growproc+0x56>
+80104728:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010472f:	90                   	nop
+
+80104730 <fork>:
+{
+80104730:	f3 0f 1e fb          	endbr32 
+80104734:	55                   	push   %ebp
+80104735:	89 e5                	mov    %esp,%ebp
+80104737:	57                   	push   %edi
+80104738:	56                   	push   %esi
+80104739:	53                   	push   %ebx
+8010473a:	83 ec 1c             	sub    $0x1c,%esp
+  pushcli();
+8010473d:	e8 8e 0f 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80104742:	e8 a9 fd ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80104747:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010474d:	e8 ce 0f 00 00       	call   80105720 <popcli>
+  if((np = allocproc()) == 0){
+80104752:	e8 29 fa ff ff       	call   80104180 <allocproc>
+80104757:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010475a:	85 c0                	test   %eax,%eax
+8010475c:	0f 84 bb 00 00 00    	je     8010481d <fork+0xed>
+  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+80104762:	83 ec 08             	sub    $0x8,%esp
+80104765:	ff 33                	pushl  (%ebx)
+80104767:	89 c7                	mov    %eax,%edi
+80104769:	ff 73 04             	pushl  0x4(%ebx)
+8010476c:	e8 9f 3b 00 00       	call   80108310 <copyuvm>
+80104771:	83 c4 10             	add    $0x10,%esp
+80104774:	89 47 04             	mov    %eax,0x4(%edi)
+80104777:	85 c0                	test   %eax,%eax
+80104779:	0f 84 a5 00 00 00    	je     80104824 <fork+0xf4>
+  np->sz = curproc->sz;
+8010477f:	8b 03                	mov    (%ebx),%eax
+80104781:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80104784:	89 01                	mov    %eax,(%ecx)
+  *np->tf = *curproc->tf;
+80104786:	8b 79 18             	mov    0x18(%ecx),%edi
+  np->parent = curproc;
+80104789:	89 c8                	mov    %ecx,%eax
+8010478b:	89 59 14             	mov    %ebx,0x14(%ecx)
+  *np->tf = *curproc->tf;
+8010478e:	b9 13 00 00 00       	mov    $0x13,%ecx
+80104793:	8b 73 18             	mov    0x18(%ebx),%esi
+80104796:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  for(i = 0; i < NOFILE; i++)
+80104798:	31 f6                	xor    %esi,%esi
+  np->tf->eax = 0;
+8010479a:	8b 40 18             	mov    0x18(%eax),%eax
+8010479d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+  for(i = 0; i < NOFILE; i++)
+801047a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[i])
+801047a8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+801047ac:	85 c0                	test   %eax,%eax
+801047ae:	74 13                	je     801047c3 <fork+0x93>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+801047b0:	83 ec 0c             	sub    $0xc,%esp
+801047b3:	50                   	push   %eax
+801047b4:	e8 a7 d0 ff ff       	call   80101860 <filedup>
+801047b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801047bc:	83 c4 10             	add    $0x10,%esp
+801047bf:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+  for(i = 0; i < NOFILE; i++)
+801047c3:	83 c6 01             	add    $0x1,%esi
+801047c6:	83 fe 10             	cmp    $0x10,%esi
+801047c9:	75 dd                	jne    801047a8 <fork+0x78>
+  np->cwd = idup(curproc->cwd);
+801047cb:	83 ec 0c             	sub    $0xc,%esp
+801047ce:	ff 73 68             	pushl  0x68(%ebx)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801047d1:	83 c3 6c             	add    $0x6c,%ebx
+  np->cwd = idup(curproc->cwd);
+801047d4:	e8 47 d9 ff ff       	call   80102120 <idup>
+801047d9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801047dc:	83 c4 0c             	add    $0xc,%esp
+  np->cwd = idup(curproc->cwd);
+801047df:	89 47 68             	mov    %eax,0x68(%edi)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801047e2:	8d 47 6c             	lea    0x6c(%edi),%eax
+801047e5:	6a 10                	push   $0x10
+801047e7:	53                   	push   %ebx
+801047e8:	50                   	push   %eax
+801047e9:	e8 b2 12 00 00       	call   80105aa0 <safestrcpy>
+  pid = np->pid;
+801047ee:	8b 5f 10             	mov    0x10(%edi),%ebx
+  acquire(&ptable.lock);
+801047f1:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+801047f8:	e8 d3 0f 00 00       	call   801057d0 <acquire>
+  np->state = RUNNABLE;
+801047fd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  release(&ptable.lock);
+80104804:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+8010480b:	e8 80 10 00 00       	call   80105890 <release>
+  return pid;
+80104810:	83 c4 10             	add    $0x10,%esp
+}
+80104813:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104816:	89 d8                	mov    %ebx,%eax
+80104818:	5b                   	pop    %ebx
+80104819:	5e                   	pop    %esi
+8010481a:	5f                   	pop    %edi
+8010481b:	5d                   	pop    %ebp
+8010481c:	c3                   	ret    
+    return -1;
+8010481d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104822:	eb ef                	jmp    80104813 <fork+0xe3>
+    kfree(np->kstack);
+80104824:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80104827:	83 ec 0c             	sub    $0xc,%esp
+8010482a:	ff 73 08             	pushl  0x8(%ebx)
+8010482d:	e8 2e e6 ff ff       	call   80102e60 <kfree>
+    np->kstack = 0;
+80104832:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+    return -1;
+80104839:	83 c4 10             	add    $0x10,%esp
+    np->state = UNUSED;
+8010483c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return -1;
+80104843:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104848:	eb c9                	jmp    80104813 <fork+0xe3>
+8010484a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104850 <scheduler>:
+{
+80104850:	f3 0f 1e fb          	endbr32 
+80104854:	55                   	push   %ebp
+80104855:	89 e5                	mov    %esp,%ebp
+80104857:	57                   	push   %edi
+80104858:	56                   	push   %esi
+80104859:	53                   	push   %ebx
+8010485a:	83 ec 0c             	sub    $0xc,%esp
+  struct cpu *c = mycpu();
+8010485d:	e8 8e fc ff ff       	call   801044f0 <mycpu>
+  c->proc = 0;
+80104862:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80104869:	00 00 00 
+  struct cpu *c = mycpu();
+8010486c:	89 c6                	mov    %eax,%esi
+  c->proc = 0;
+8010486e:	8d 78 04             	lea    0x4(%eax),%edi
+80104871:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  asm volatile("sti");
+80104878:	fb                   	sti    
+    acquire(&ptable.lock);
+80104879:	83 ec 0c             	sub    $0xc,%esp
+     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010487c:	bb b4 5a 11 80       	mov    $0x80115ab4,%ebx
+    acquire(&ptable.lock);
+80104881:	68 80 5a 11 80       	push   $0x80115a80
+80104886:	e8 45 0f 00 00       	call   801057d0 <acquire>
+8010488b:	83 c4 10             	add    $0x10,%esp
+8010488e:	66 90                	xchg   %ax,%ax
+      if(p->state != RUNNABLE)
+80104890:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80104894:	75 33                	jne    801048c9 <scheduler+0x79>
+      switchuvm(p);
+80104896:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = p;
+80104899:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+      switchuvm(p);
+8010489f:	53                   	push   %ebx
+801048a0:	e8 5b 35 00 00       	call   80107e00 <switchuvm>
+      swtch(&c->scheduler, p->context);
+801048a5:	58                   	pop    %eax
+801048a6:	5a                   	pop    %edx
+801048a7:	ff 73 1c             	pushl  0x1c(%ebx)
+801048aa:	57                   	push   %edi
+      p->state = RUNNING;
+801048ab:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+      swtch(&c->scheduler, p->context);
+801048b2:	e8 4c 12 00 00       	call   80105b03 <swtch>
+      switchkvm();
+801048b7:	e8 24 35 00 00       	call   80107de0 <switchkvm>
+      c->proc = 0;
+801048bc:	83 c4 10             	add    $0x10,%esp
+801048bf:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+801048c6:	00 00 00 
+     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+801048c9:	81 c3 94 00 00 00    	add    $0x94,%ebx
+801048cf:	81 fb b4 7f 11 80    	cmp    $0x80117fb4,%ebx
+801048d5:	75 b9                	jne    80104890 <scheduler+0x40>
+    release(&ptable.lock);
+801048d7:	83 ec 0c             	sub    $0xc,%esp
+801048da:	68 80 5a 11 80       	push   $0x80115a80
+801048df:	e8 ac 0f 00 00       	call   80105890 <release>
+    sti();
+801048e4:	83 c4 10             	add    $0x10,%esp
+801048e7:	eb 8f                	jmp    80104878 <scheduler+0x28>
+801048e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801048f0 <sched>:
+{
+801048f0:	f3 0f 1e fb          	endbr32 
+801048f4:	55                   	push   %ebp
+801048f5:	89 e5                	mov    %esp,%ebp
+801048f7:	56                   	push   %esi
+801048f8:	53                   	push   %ebx
+  pushcli();
+801048f9:	e8 d2 0d 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+801048fe:	e8 ed fb ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80104903:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104909:	e8 12 0e 00 00       	call   80105720 <popcli>
+  if(!holding(&ptable.lock))
+8010490e:	83 ec 0c             	sub    $0xc,%esp
+80104911:	68 80 5a 11 80       	push   $0x80115a80
+80104916:	e8 65 0e 00 00       	call   80105780 <holding>
+8010491b:	83 c4 10             	add    $0x10,%esp
+8010491e:	85 c0                	test   %eax,%eax
+80104920:	74 4f                	je     80104971 <sched+0x81>
+  if(mycpu()->ncli != 1)
+80104922:	e8 c9 fb ff ff       	call   801044f0 <mycpu>
+80104927:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+8010492e:	75 68                	jne    80104998 <sched+0xa8>
+  if(p->state == RUNNING)
+80104930:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80104934:	74 55                	je     8010498b <sched+0x9b>
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104936:	9c                   	pushf  
+80104937:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80104938:	f6 c4 02             	test   $0x2,%ah
+8010493b:	75 41                	jne    8010497e <sched+0x8e>
+  intena = mycpu()->intena;
+8010493d:	e8 ae fb ff ff       	call   801044f0 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80104942:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+80104945:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+8010494b:	e8 a0 fb ff ff       	call   801044f0 <mycpu>
+80104950:	83 ec 08             	sub    $0x8,%esp
+80104953:	ff 70 04             	pushl  0x4(%eax)
+80104956:	53                   	push   %ebx
+80104957:	e8 a7 11 00 00       	call   80105b03 <swtch>
+  mycpu()->intena = intena;
+8010495c:	e8 8f fb ff ff       	call   801044f0 <mycpu>
+}
+80104961:	83 c4 10             	add    $0x10,%esp
+  mycpu()->intena = intena;
+80104964:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+8010496a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010496d:	5b                   	pop    %ebx
+8010496e:	5e                   	pop    %esi
+8010496f:	5d                   	pop    %ebp
+80104970:	c3                   	ret    
+    panic("sched ptable.lock");
+80104971:	83 ec 0c             	sub    $0xc,%esp
+80104974:	68 e5 8a 10 80       	push   $0x80108ae5
+80104979:	e8 12 ba ff ff       	call   80100390 <panic>
+    panic("sched interruptible");
+8010497e:	83 ec 0c             	sub    $0xc,%esp
+80104981:	68 11 8b 10 80       	push   $0x80108b11
+80104986:	e8 05 ba ff ff       	call   80100390 <panic>
+    panic("sched running");
+8010498b:	83 ec 0c             	sub    $0xc,%esp
+8010498e:	68 03 8b 10 80       	push   $0x80108b03
+80104993:	e8 f8 b9 ff ff       	call   80100390 <panic>
+    panic("sched locks");
+80104998:	83 ec 0c             	sub    $0xc,%esp
+8010499b:	68 f7 8a 10 80       	push   $0x80108af7
+801049a0:	e8 eb b9 ff ff       	call   80100390 <panic>
+801049a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801049b0 <exit>:
+{
+801049b0:	f3 0f 1e fb          	endbr32 
+801049b4:	55                   	push   %ebp
+801049b5:	89 e5                	mov    %esp,%ebp
+801049b7:	57                   	push   %edi
+801049b8:	56                   	push   %esi
+801049b9:	53                   	push   %ebx
+801049ba:	83 ec 0c             	sub    $0xc,%esp
+  pushcli();
+801049bd:	e8 0e 0d 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+801049c2:	e8 29 fb ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+801049c7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+801049cd:	e8 4e 0d 00 00       	call   80105720 <popcli>
+  if(curproc == initproc)
+801049d2:	8d 5e 28             	lea    0x28(%esi),%ebx
+801049d5:	8d 7e 68             	lea    0x68(%esi),%edi
+801049d8:	39 35 b8 c5 10 80    	cmp    %esi,0x8010c5b8
+801049de:	0f 84 fd 00 00 00    	je     80104ae1 <exit+0x131>
+801049e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd]){
+801049e8:	8b 03                	mov    (%ebx),%eax
+801049ea:	85 c0                	test   %eax,%eax
+801049ec:	74 12                	je     80104a00 <exit+0x50>
+      fileclose(curproc->ofile[fd]);
+801049ee:	83 ec 0c             	sub    $0xc,%esp
+801049f1:	50                   	push   %eax
+801049f2:	e8 b9 ce ff ff       	call   801018b0 <fileclose>
+      curproc->ofile[fd] = 0;
+801049f7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801049fd:	83 c4 10             	add    $0x10,%esp
+  for(fd = 0; fd < NOFILE; fd++){
+80104a00:	83 c3 04             	add    $0x4,%ebx
+80104a03:	39 df                	cmp    %ebx,%edi
+80104a05:	75 e1                	jne    801049e8 <exit+0x38>
+  begin_op();
+80104a07:	e8 14 ed ff ff       	call   80103720 <begin_op>
+  iput(curproc->cwd);
+80104a0c:	83 ec 0c             	sub    $0xc,%esp
+80104a0f:	ff 76 68             	pushl  0x68(%esi)
+80104a12:	e8 69 d8 ff ff       	call   80102280 <iput>
+  end_op();
+80104a17:	e8 74 ed ff ff       	call   80103790 <end_op>
+  curproc->cwd = 0;
+80104a1c:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+  acquire(&ptable.lock);
+80104a23:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+80104a2a:	e8 a1 0d 00 00       	call   801057d0 <acquire>
+  wakeup1(curproc->parent);
+80104a2f:	8b 56 14             	mov    0x14(%esi),%edx
+80104a32:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104a35:	b8 b4 5a 11 80       	mov    $0x80115ab4,%eax
+80104a3a:	eb 10                	jmp    80104a4c <exit+0x9c>
+80104a3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104a40:	05 94 00 00 00       	add    $0x94,%eax
+80104a45:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+80104a4a:	74 1e                	je     80104a6a <exit+0xba>
+    if(p->state == SLEEPING && p->chan == chan){
+80104a4c:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104a50:	75 ee                	jne    80104a40 <exit+0x90>
+80104a52:	3b 50 20             	cmp    0x20(%eax),%edx
+80104a55:	75 e9                	jne    80104a40 <exit+0x90>
+        pqueue_insert(&queue3, p);
+      }
+      p->priority = 3;
+      #endif
+
+      p->state = RUNNABLE;
+80104a57:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104a5e:	05 94 00 00 00       	add    $0x94,%eax
+80104a63:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+80104a68:	75 e2                	jne    80104a4c <exit+0x9c>
+      p->parent = initproc;
+80104a6a:	8b 0d b8 c5 10 80    	mov    0x8010c5b8,%ecx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104a70:	ba b4 5a 11 80       	mov    $0x80115ab4,%edx
+80104a75:	eb 17                	jmp    80104a8e <exit+0xde>
+80104a77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a7e:	66 90                	xchg   %ax,%ax
+80104a80:	81 c2 94 00 00 00    	add    $0x94,%edx
+80104a86:	81 fa b4 7f 11 80    	cmp    $0x80117fb4,%edx
+80104a8c:	74 3a                	je     80104ac8 <exit+0x118>
+    if(p->parent == curproc){
+80104a8e:	39 72 14             	cmp    %esi,0x14(%edx)
+80104a91:	75 ed                	jne    80104a80 <exit+0xd0>
+      if(p->state == ZOMBIE)
+80104a93:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+      p->parent = initproc;
+80104a97:	89 4a 14             	mov    %ecx,0x14(%edx)
+      if(p->state == ZOMBIE)
+80104a9a:	75 e4                	jne    80104a80 <exit+0xd0>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104a9c:	b8 b4 5a 11 80       	mov    $0x80115ab4,%eax
+80104aa1:	eb 11                	jmp    80104ab4 <exit+0x104>
+80104aa3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104aa7:	90                   	nop
+80104aa8:	05 94 00 00 00       	add    $0x94,%eax
+80104aad:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+80104ab2:	74 cc                	je     80104a80 <exit+0xd0>
+    if(p->state == SLEEPING && p->chan == chan){
+80104ab4:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104ab8:	75 ee                	jne    80104aa8 <exit+0xf8>
+80104aba:	3b 48 20             	cmp    0x20(%eax),%ecx
+80104abd:	75 e9                	jne    80104aa8 <exit+0xf8>
+      p->state = RUNNABLE;
+80104abf:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104ac6:	eb e0                	jmp    80104aa8 <exit+0xf8>
+  curproc->state = ZOMBIE;
+80104ac8:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+  sched();
+80104acf:	e8 1c fe ff ff       	call   801048f0 <sched>
+  panic("zombie exit");
+80104ad4:	83 ec 0c             	sub    $0xc,%esp
+80104ad7:	68 32 8b 10 80       	push   $0x80108b32
+80104adc:	e8 af b8 ff ff       	call   80100390 <panic>
+    panic("init exiting");
+80104ae1:	83 ec 0c             	sub    $0xc,%esp
+80104ae4:	68 25 8b 10 80       	push   $0x80108b25
+80104ae9:	e8 a2 b8 ff ff       	call   80100390 <panic>
+80104aee:	66 90                	xchg   %ax,%ax
+
+80104af0 <yield>:
+{
+80104af0:	f3 0f 1e fb          	endbr32 
+80104af4:	55                   	push   %ebp
+80104af5:	89 e5                	mov    %esp,%ebp
+80104af7:	53                   	push   %ebx
+80104af8:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);  //DOC: yieldlock
+80104afb:	68 80 5a 11 80       	push   $0x80115a80
+80104b00:	e8 cb 0c 00 00       	call   801057d0 <acquire>
+  pushcli();
+80104b05:	e8 c6 0b 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80104b0a:	e8 e1 f9 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80104b0f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104b15:	e8 06 0c 00 00       	call   80105720 <popcli>
+  myproc()->state = RUNNABLE;
+80104b1a:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  sched();
+80104b21:	e8 ca fd ff ff       	call   801048f0 <sched>
+  release(&ptable.lock);
+80104b26:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+80104b2d:	e8 5e 0d 00 00       	call   80105890 <release>
+}
+80104b32:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104b35:	83 c4 10             	add    $0x10,%esp
+80104b38:	c9                   	leave  
+80104b39:	c3                   	ret    
+80104b3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104b40 <sleep>:
+{
+80104b40:	f3 0f 1e fb          	endbr32 
+80104b44:	55                   	push   %ebp
+80104b45:	89 e5                	mov    %esp,%ebp
+80104b47:	57                   	push   %edi
+80104b48:	56                   	push   %esi
+80104b49:	53                   	push   %ebx
+80104b4a:	83 ec 0c             	sub    $0xc,%esp
+80104b4d:	8b 7d 08             	mov    0x8(%ebp),%edi
+80104b50:	8b 75 0c             	mov    0xc(%ebp),%esi
+  pushcli();
+80104b53:	e8 78 0b 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80104b58:	e8 93 f9 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80104b5d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104b63:	e8 b8 0b 00 00       	call   80105720 <popcli>
+  if(p == 0)
+80104b68:	85 db                	test   %ebx,%ebx
+80104b6a:	0f 84 83 00 00 00    	je     80104bf3 <sleep+0xb3>
+  if(lk == 0)
+80104b70:	85 f6                	test   %esi,%esi
+80104b72:	74 72                	je     80104be6 <sleep+0xa6>
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+80104b74:	81 fe 80 5a 11 80    	cmp    $0x80115a80,%esi
+80104b7a:	74 4c                	je     80104bc8 <sleep+0x88>
+    acquire(&ptable.lock);  //DOC: sleeplock1
+80104b7c:	83 ec 0c             	sub    $0xc,%esp
+80104b7f:	68 80 5a 11 80       	push   $0x80115a80
+80104b84:	e8 47 0c 00 00       	call   801057d0 <acquire>
+    release(lk);
+80104b89:	89 34 24             	mov    %esi,(%esp)
+80104b8c:	e8 ff 0c 00 00       	call   80105890 <release>
+  p->chan = chan;
+80104b91:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80104b94:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80104b9b:	e8 50 fd ff ff       	call   801048f0 <sched>
+  p->chan = 0;
+80104ba0:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+    release(&ptable.lock);
+80104ba7:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+80104bae:	e8 dd 0c 00 00       	call   80105890 <release>
+    acquire(lk);
+80104bb3:	89 75 08             	mov    %esi,0x8(%ebp)
+80104bb6:	83 c4 10             	add    $0x10,%esp
+}
+80104bb9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104bbc:	5b                   	pop    %ebx
+80104bbd:	5e                   	pop    %esi
+80104bbe:	5f                   	pop    %edi
+80104bbf:	5d                   	pop    %ebp
+    acquire(lk);
+80104bc0:	e9 0b 0c 00 00       	jmp    801057d0 <acquire>
+80104bc5:	8d 76 00             	lea    0x0(%esi),%esi
+  p->chan = chan;
+80104bc8:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80104bcb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+80104bd2:	e8 19 fd ff ff       	call   801048f0 <sched>
+  p->chan = 0;
+80104bd7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+80104bde:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104be1:	5b                   	pop    %ebx
+80104be2:	5e                   	pop    %esi
+80104be3:	5f                   	pop    %edi
+80104be4:	5d                   	pop    %ebp
+80104be5:	c3                   	ret    
+    panic("sleep without lk");
+80104be6:	83 ec 0c             	sub    $0xc,%esp
+80104be9:	68 44 8b 10 80       	push   $0x80108b44
+80104bee:	e8 9d b7 ff ff       	call   80100390 <panic>
+    panic("sleep");
+80104bf3:	83 ec 0c             	sub    $0xc,%esp
+80104bf6:	68 3e 8b 10 80       	push   $0x80108b3e
+80104bfb:	e8 90 b7 ff ff       	call   80100390 <panic>
+
+80104c00 <wait>:
+{
+80104c00:	f3 0f 1e fb          	endbr32 
+80104c04:	55                   	push   %ebp
+80104c05:	89 e5                	mov    %esp,%ebp
+80104c07:	56                   	push   %esi
+80104c08:	53                   	push   %ebx
+  pushcli();
+80104c09:	e8 c2 0a 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80104c0e:	e8 dd f8 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80104c13:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80104c19:	e8 02 0b 00 00       	call   80105720 <popcli>
+  acquire(&ptable.lock);
+80104c1e:	83 ec 0c             	sub    $0xc,%esp
+80104c21:	68 80 5a 11 80       	push   $0x80115a80
+80104c26:	e8 a5 0b 00 00       	call   801057d0 <acquire>
+80104c2b:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+80104c2e:	31 c0                	xor    %eax,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104c30:	bb b4 5a 11 80       	mov    $0x80115ab4,%ebx
+80104c35:	eb 17                	jmp    80104c4e <wait+0x4e>
+80104c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c3e:	66 90                	xchg   %ax,%ax
+80104c40:	81 c3 94 00 00 00    	add    $0x94,%ebx
+80104c46:	81 fb b4 7f 11 80    	cmp    $0x80117fb4,%ebx
+80104c4c:	74 1e                	je     80104c6c <wait+0x6c>
+      if(p->parent != curproc)
+80104c4e:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104c51:	75 ed                	jne    80104c40 <wait+0x40>
+      if(p->state == ZOMBIE){
+80104c53:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104c57:	74 37                	je     80104c90 <wait+0x90>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104c59:	81 c3 94 00 00 00    	add    $0x94,%ebx
+      havekids = 1;
+80104c5f:	b8 01 00 00 00       	mov    $0x1,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104c64:	81 fb b4 7f 11 80    	cmp    $0x80117fb4,%ebx
+80104c6a:	75 e2                	jne    80104c4e <wait+0x4e>
+    if(!havekids || curproc->killed){
+80104c6c:	85 c0                	test   %eax,%eax
+80104c6e:	74 7d                	je     80104ced <wait+0xed>
+80104c70:	8b 46 24             	mov    0x24(%esi),%eax
+80104c73:	85 c0                	test   %eax,%eax
+80104c75:	75 76                	jne    80104ced <wait+0xed>
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+80104c77:	83 ec 08             	sub    $0x8,%esp
+80104c7a:	68 80 5a 11 80       	push   $0x80115a80
+80104c7f:	56                   	push   %esi
+80104c80:	e8 bb fe ff ff       	call   80104b40 <sleep>
+    havekids = 0;
+80104c85:	83 c4 10             	add    $0x10,%esp
+80104c88:	eb a4                	jmp    80104c2e <wait+0x2e>
+80104c8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        kfree(p->kstack);
+80104c90:	83 ec 0c             	sub    $0xc,%esp
+80104c93:	ff 73 08             	pushl  0x8(%ebx)
+        pid = p->pid;
+80104c96:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80104c99:	e8 c2 e1 ff ff       	call   80102e60 <kfree>
+        freevm(p->pgdir);
+80104c9e:	5a                   	pop    %edx
+80104c9f:	ff 73 04             	pushl  0x4(%ebx)
+        p->kstack = 0;
+80104ca2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80104ca9:	e8 12 35 00 00       	call   801081c0 <freevm>
+        release(&ptable.lock);
+80104cae:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+        p->state = UNUSED;
+80104cb5:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        p->pid = 0;
+80104cbc:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80104cc3:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+80104cca:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+80104cce:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->ctime = 0;
+80104cd5:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
+        release(&ptable.lock);
+80104cdc:	e8 af 0b 00 00       	call   80105890 <release>
+        return pid;
+80104ce1:	83 c4 10             	add    $0x10,%esp
+}
+80104ce4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ce7:	89 f0                	mov    %esi,%eax
+80104ce9:	5b                   	pop    %ebx
+80104cea:	5e                   	pop    %esi
+80104ceb:	5d                   	pop    %ebp
+80104cec:	c3                   	ret    
+      release(&ptable.lock);
+80104ced:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80104cf0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+80104cf5:	68 80 5a 11 80       	push   $0x80115a80
+80104cfa:	e8 91 0b 00 00       	call   80105890 <release>
+      return -1;
+80104cff:	83 c4 10             	add    $0x10,%esp
+80104d02:	eb e0                	jmp    80104ce4 <wait+0xe4>
+80104d04:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104d0f:	90                   	nop
+
+80104d10 <wait2>:
+int wait2(int *ctime, int *retime, int *rutime, int *stime) {
+80104d10:	f3 0f 1e fb          	endbr32 
+80104d14:	55                   	push   %ebp
+80104d15:	89 e5                	mov    %esp,%ebp
+80104d17:	56                   	push   %esi
+80104d18:	53                   	push   %ebx
+  pushcli();
+80104d19:	e8 b2 09 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80104d1e:	e8 cd f7 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80104d23:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+80104d29:	e8 f2 09 00 00       	call   80105720 <popcli>
+  acquire(&ptable.lock);
+80104d2e:	83 ec 0c             	sub    $0xc,%esp
+80104d31:	68 80 5a 11 80       	push   $0x80115a80
+80104d36:	e8 95 0a 00 00       	call   801057d0 <acquire>
+80104d3b:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+80104d3e:	31 c0                	xor    %eax,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104d40:	bb b4 5a 11 80       	mov    $0x80115ab4,%ebx
+80104d45:	eb 17                	jmp    80104d5e <wait2+0x4e>
+80104d47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d4e:	66 90                	xchg   %ax,%ax
+80104d50:	81 c3 94 00 00 00    	add    $0x94,%ebx
+80104d56:	81 fb b4 7f 11 80    	cmp    $0x80117fb4,%ebx
+80104d5c:	74 1e                	je     80104d7c <wait2+0x6c>
+      if(p->parent != curproc)
+80104d5e:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104d61:	75 ed                	jne    80104d50 <wait2+0x40>
+      if(p->state == ZOMBIE){
+80104d63:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104d67:	74 3f                	je     80104da8 <wait2+0x98>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104d69:	81 c3 94 00 00 00    	add    $0x94,%ebx
+      havekids = 1;
+80104d6f:	b8 01 00 00 00       	mov    $0x1,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104d74:	81 fb b4 7f 11 80    	cmp    $0x80117fb4,%ebx
+80104d7a:	75 e2                	jne    80104d5e <wait2+0x4e>
+    if(!havekids || curproc->killed) {
+80104d7c:	85 c0                	test   %eax,%eax
+80104d7e:	0f 84 c8 00 00 00    	je     80104e4c <wait2+0x13c>
+80104d84:	8b 46 24             	mov    0x24(%esi),%eax
+80104d87:	85 c0                	test   %eax,%eax
+80104d89:	0f 85 bd 00 00 00    	jne    80104e4c <wait2+0x13c>
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+80104d8f:	83 ec 08             	sub    $0x8,%esp
+80104d92:	68 80 5a 11 80       	push   $0x80115a80
+80104d97:	56                   	push   %esi
+80104d98:	e8 a3 fd ff ff       	call   80104b40 <sleep>
+    havekids = 0;
+80104d9d:	83 c4 10             	add    $0x10,%esp
+80104da0:	eb 9c                	jmp    80104d3e <wait2+0x2e>
+80104da2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        *ctime = p->ctime;
+80104da8:	8b 53 7c             	mov    0x7c(%ebx),%edx
+80104dab:	8b 45 08             	mov    0x8(%ebp),%eax
+        kfree(p->kstack);
+80104dae:	83 ec 0c             	sub    $0xc,%esp
+        *ctime = p->ctime;
+80104db1:	89 10                	mov    %edx,(%eax)
+        *retime = p->retime;
+80104db3:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104db6:	8b 93 84 00 00 00    	mov    0x84(%ebx),%edx
+80104dbc:	89 10                	mov    %edx,(%eax)
+        *rutime = p->rutime;
+80104dbe:	8b 45 10             	mov    0x10(%ebp),%eax
+80104dc1:	8b 93 88 00 00 00    	mov    0x88(%ebx),%edx
+80104dc7:	89 10                	mov    %edx,(%eax)
+        *stime = p->stime;
+80104dc9:	8b 45 14             	mov    0x14(%ebp),%eax
+80104dcc:	8b 93 80 00 00 00    	mov    0x80(%ebx),%edx
+80104dd2:	89 10                	mov    %edx,(%eax)
+        pid = p->pid;
+80104dd4:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80104dd7:	ff 73 08             	pushl  0x8(%ebx)
+80104dda:	e8 81 e0 ff ff       	call   80102e60 <kfree>
+        freevm(p->pgdir);
+80104ddf:	5a                   	pop    %edx
+80104de0:	ff 73 04             	pushl  0x4(%ebx)
+        p->kstack = 0;
+80104de3:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80104dea:	e8 d1 33 00 00       	call   801081c0 <freevm>
+        release(&ptable.lock);
+80104def:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+        p->state = UNUSED;
+80104df6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        p->pid = 0;
+80104dfd:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80104e04:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+80104e0b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+80104e0f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->ctime = 0;
+80104e16:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%ebx)
+        p->retime = 0;
+80104e1d:	c7 83 84 00 00 00 00 	movl   $0x0,0x84(%ebx)
+80104e24:	00 00 00 
+        p->rutime = 0;
+80104e27:	c7 83 88 00 00 00 00 	movl   $0x0,0x88(%ebx)
+80104e2e:	00 00 00 
+        p->stime = 0;
+80104e31:	c7 83 80 00 00 00 00 	movl   $0x0,0x80(%ebx)
+80104e38:	00 00 00 
+        release(&ptable.lock);
+80104e3b:	e8 50 0a 00 00       	call   80105890 <release>
+        return pid;
+80104e40:	83 c4 10             	add    $0x10,%esp
+}
+80104e43:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104e46:	89 f0                	mov    %esi,%eax
+80104e48:	5b                   	pop    %ebx
+80104e49:	5e                   	pop    %esi
+80104e4a:	5d                   	pop    %ebp
+80104e4b:	c3                   	ret    
+      release(&ptable.lock);
+80104e4c:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80104e4f:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+80104e54:	68 80 5a 11 80       	push   $0x80115a80
+80104e59:	e8 32 0a 00 00       	call   80105890 <release>
+      return -1;
+80104e5e:	83 c4 10             	add    $0x10,%esp
+80104e61:	eb e0                	jmp    80104e43 <wait2+0x133>
+80104e63:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104e70 <wakeup>:
+}
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+80104e70:	f3 0f 1e fb          	endbr32 
+80104e74:	55                   	push   %ebp
+80104e75:	89 e5                	mov    %esp,%ebp
+80104e77:	53                   	push   %ebx
+80104e78:	83 ec 10             	sub    $0x10,%esp
+80104e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+80104e7e:	68 80 5a 11 80       	push   $0x80115a80
+80104e83:	e8 48 09 00 00       	call   801057d0 <acquire>
+80104e88:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104e8b:	b8 b4 5a 11 80       	mov    $0x80115ab4,%eax
+80104e90:	eb 12                	jmp    80104ea4 <wakeup+0x34>
+80104e92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104e98:	05 94 00 00 00       	add    $0x94,%eax
+80104e9d:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+80104ea2:	74 1e                	je     80104ec2 <wakeup+0x52>
+    if(p->state == SLEEPING && p->chan == chan){
+80104ea4:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104ea8:	75 ee                	jne    80104e98 <wakeup+0x28>
+80104eaa:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104ead:	75 e9                	jne    80104e98 <wakeup+0x28>
+      p->state = RUNNABLE;
+80104eaf:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104eb6:	05 94 00 00 00       	add    $0x94,%eax
+80104ebb:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+80104ec0:	75 e2                	jne    80104ea4 <wakeup+0x34>
+  wakeup1(chan);
+  release(&ptable.lock);
+80104ec2:	c7 45 08 80 5a 11 80 	movl   $0x80115a80,0x8(%ebp)
+}
+80104ec9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104ecc:	c9                   	leave  
+  release(&ptable.lock);
+80104ecd:	e9 be 09 00 00       	jmp    80105890 <release>
+80104ed2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ed9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104ee0 <kill>:
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+80104ee0:	f3 0f 1e fb          	endbr32 
+80104ee4:	55                   	push   %ebp
+80104ee5:	89 e5                	mov    %esp,%ebp
+80104ee7:	53                   	push   %ebx
+80104ee8:	83 ec 10             	sub    $0x10,%esp
+80104eeb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+80104eee:	68 80 5a 11 80       	push   $0x80115a80
+80104ef3:	e8 d8 08 00 00       	call   801057d0 <acquire>
+80104ef8:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104efb:	b8 b4 5a 11 80       	mov    $0x80115ab4,%eax
+80104f00:	eb 12                	jmp    80104f14 <kill+0x34>
+80104f02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f08:	05 94 00 00 00       	add    $0x94,%eax
+80104f0d:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+80104f12:	74 34                	je     80104f48 <kill+0x68>
+    if(p->pid == pid){
+80104f14:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104f17:	75 ef                	jne    80104f08 <kill+0x28>
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING){
+80104f19:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      p->killed = 1;
+80104f1d:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if(p->state == SLEEPING){
+80104f24:	75 07                	jne    80104f2d <kill+0x4d>
+        p->state = RUNNABLE;
+80104f26:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+        //p->retime = ticks;
+      }
+      release(&ptable.lock);
+80104f2d:	83 ec 0c             	sub    $0xc,%esp
+80104f30:	68 80 5a 11 80       	push   $0x80115a80
+80104f35:	e8 56 09 00 00       	call   80105890 <release>
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+80104f3a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+      return 0;
+80104f3d:	83 c4 10             	add    $0x10,%esp
+80104f40:	31 c0                	xor    %eax,%eax
+}
+80104f42:	c9                   	leave  
+80104f43:	c3                   	ret    
+80104f44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  release(&ptable.lock);
+80104f48:	83 ec 0c             	sub    $0xc,%esp
+80104f4b:	68 80 5a 11 80       	push   $0x80115a80
+80104f50:	e8 3b 09 00 00       	call   80105890 <release>
+}
+80104f55:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  return -1;
+80104f58:	83 c4 10             	add    $0x10,%esp
+80104f5b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104f60:	c9                   	leave  
+80104f61:	c3                   	ret    
+80104f62:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104f70 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+80104f70:	f3 0f 1e fb          	endbr32 
+80104f74:	55                   	push   %ebp
+80104f75:	89 e5                	mov    %esp,%ebp
+80104f77:	57                   	push   %edi
+80104f78:	56                   	push   %esi
+80104f79:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104f7c:	53                   	push   %ebx
+80104f7d:	bb 20 5b 11 80       	mov    $0x80115b20,%ebx
+80104f82:	83 ec 3c             	sub    $0x3c,%esp
+80104f85:	eb 2b                	jmp    80104fb2 <procdump+0x42>
+80104f87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f8e:	66 90                	xchg   %ax,%ax
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+80104f90:	83 ec 0c             	sub    $0xc,%esp
+80104f93:	68 d7 94 10 80       	push   $0x801094d7
+80104f98:	e8 53 b7 ff ff       	call   801006f0 <cprintf>
+80104f9d:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104fa0:	81 c3 94 00 00 00    	add    $0x94,%ebx
+80104fa6:	81 fb 20 80 11 80    	cmp    $0x80118020,%ebx
+80104fac:	0f 84 8e 00 00 00    	je     80105040 <procdump+0xd0>
+    if(p->state == UNUSED)
+80104fb2:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104fb5:	85 c0                	test   %eax,%eax
+80104fb7:	74 e7                	je     80104fa0 <procdump+0x30>
+      state = "???";
+80104fb9:	ba 55 8b 10 80       	mov    $0x80108b55,%edx
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80104fbe:	83 f8 05             	cmp    $0x5,%eax
+80104fc1:	77 11                	ja     80104fd4 <procdump+0x64>
+80104fc3:	8b 14 85 8c 8b 10 80 	mov    -0x7fef7474(,%eax,4),%edx
+      state = "???";
+80104fca:	b8 55 8b 10 80       	mov    $0x80108b55,%eax
+80104fcf:	85 d2                	test   %edx,%edx
+80104fd1:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+80104fd4:	53                   	push   %ebx
+80104fd5:	52                   	push   %edx
+80104fd6:	ff 73 a4             	pushl  -0x5c(%ebx)
+80104fd9:	68 59 8b 10 80       	push   $0x80108b59
+80104fde:	e8 0d b7 ff ff       	call   801006f0 <cprintf>
+    if(p->state == SLEEPING){
+80104fe3:	83 c4 10             	add    $0x10,%esp
+80104fe6:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+80104fea:	75 a4                	jne    80104f90 <procdump+0x20>
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+80104fec:	83 ec 08             	sub    $0x8,%esp
+80104fef:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104ff2:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104ff5:	50                   	push   %eax
+80104ff6:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104ff9:	8b 40 0c             	mov    0xc(%eax),%eax
+80104ffc:	83 c0 08             	add    $0x8,%eax
+80104fff:	50                   	push   %eax
+80105000:	e8 6b 06 00 00       	call   80105670 <getcallerpcs>
+      for(i=0; i<10 && pc[i] != 0; i++)
+80105005:	83 c4 10             	add    $0x10,%esp
+80105008:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010500f:	90                   	nop
+80105010:	8b 17                	mov    (%edi),%edx
+80105012:	85 d2                	test   %edx,%edx
+80105014:	0f 84 76 ff ff ff    	je     80104f90 <procdump+0x20>
+        cprintf(" %p", pc[i]);
+8010501a:	83 ec 08             	sub    $0x8,%esp
+8010501d:	83 c7 04             	add    $0x4,%edi
+80105020:	52                   	push   %edx
+80105021:	68 21 85 10 80       	push   $0x80108521
+80105026:	e8 c5 b6 ff ff       	call   801006f0 <cprintf>
+      for(i=0; i<10 && pc[i] != 0; i++)
+8010502b:	83 c4 10             	add    $0x10,%esp
+8010502e:	39 fe                	cmp    %edi,%esi
+80105030:	75 de                	jne    80105010 <procdump+0xa0>
+80105032:	e9 59 ff ff ff       	jmp    80104f90 <procdump+0x20>
+80105037:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010503e:	66 90                	xchg   %ax,%ax
+  }
+}
+80105040:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105043:	5b                   	pop    %ebx
+80105044:	5e                   	pop    %esi
+80105045:	5f                   	pop    %edi
+80105046:	5d                   	pop    %ebp
+80105047:	c3                   	ret    
+80105048:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010504f:	90                   	nop
+
+80105050 <updatestatistics>:
+
+
+// this function runs when a tick occurs and is called in trap.c
+void updatestatistics() {
+80105050:	f3 0f 1e fb          	endbr32 
+80105054:	55                   	push   %ebp
+80105055:	89 e5                	mov    %esp,%ebp
+80105057:	83 ec 14             	sub    $0x14,%esp
+  struct proc *p;
+  acquire(&ptable.lock);
+8010505a:	68 80 5a 11 80       	push   $0x80115a80
+8010505f:	e8 6c 07 00 00       	call   801057d0 <acquire>
+80105064:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80105067:	b8 b4 5a 11 80       	mov    $0x80115ab4,%eax
+8010506c:	eb 13                	jmp    80105081 <updatestatistics+0x31>
+8010506e:	66 90                	xchg   %ax,%ax
+    switch(p->state) {
+80105070:	83 fa 02             	cmp    $0x2,%edx
+80105073:	74 53                	je     801050c8 <updatestatistics+0x78>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80105075:	05 94 00 00 00       	add    $0x94,%eax
+8010507a:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+8010507f:	74 20                	je     801050a1 <updatestatistics+0x51>
+    switch(p->state) {
+80105081:	8b 50 0c             	mov    0xc(%eax),%edx
+80105084:	83 fa 03             	cmp    $0x3,%edx
+80105087:	74 2f                	je     801050b8 <updatestatistics+0x68>
+80105089:	83 fa 04             	cmp    $0x4,%edx
+8010508c:	75 e2                	jne    80105070 <updatestatistics+0x20>
+        break;
+      case RUNNABLE:
+        p->retime++;
+        break;
+      case RUNNING:
+        p->rutime++;
+8010508e:	83 80 88 00 00 00 01 	addl   $0x1,0x88(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80105095:	05 94 00 00 00       	add    $0x94,%eax
+8010509a:	3d b4 7f 11 80       	cmp    $0x80117fb4,%eax
+8010509f:	75 e0                	jne    80105081 <updatestatistics+0x31>
+        break;
+      default:
+        ;
+    }
+  }
+  release(&ptable.lock);
+801050a1:	83 ec 0c             	sub    $0xc,%esp
+801050a4:	68 80 5a 11 80       	push   $0x80115a80
+801050a9:	e8 e2 07 00 00       	call   80105890 <release>
+}
+801050ae:	83 c4 10             	add    $0x10,%esp
+801050b1:	c9                   	leave  
+801050b2:	c3                   	ret    
+801050b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050b7:	90                   	nop
+        p->retime++;
+801050b8:	83 80 84 00 00 00 01 	addl   $0x1,0x84(%eax)
+        break;
+801050bf:	eb b4                	jmp    80105075 <updatestatistics+0x25>
+801050c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        p->stime++;
+801050c8:	83 80 80 00 00 00 01 	addl   $0x1,0x80(%eax)
+        break;
+801050cf:	eb a4                	jmp    80105075 <updatestatistics+0x25>
+801050d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050df:	90                   	nop
+
+801050e0 <sys_set_prio>:
+
+
+// set priority
+int sys_set_prio(void){
+801050e0:	f3 0f 1e fb          	endbr32 
+801050e4:	55                   	push   %ebp
+801050e5:	89 e5                	mov    %esp,%ebp
+801050e7:	83 ec 08             	sub    $0x8,%esp
+  pushcli();
+801050ea:	e8 e1 05 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+801050ef:	e8 fc f3 ff ff       	call   801044f0 <mycpu>
+  popcli();
+801050f4:	e8 27 06 00 00       	call   80105720 <popcli>
+      break;
+  }
+  release(&ptable.lock);
+
+  return 0;
+}
+801050f9:	b8 01 00 00 00       	mov    $0x1,%eax
+801050fe:	c9                   	leave  
+801050ff:	c3                   	ret    
+
+80105100 <sys_yield2>:
+
+int sys_yield2(void){
+80105100:	f3 0f 1e fb          	endbr32 
+80105104:	55                   	push   %ebp
+80105105:	89 e5                	mov    %esp,%ebp
+80105107:	56                   	push   %esi
+80105108:	53                   	push   %ebx
+ 
+  acquire(&ptable.lock);  //DOC: yieldlock
+80105109:	83 ec 0c             	sub    $0xc,%esp
+8010510c:	68 80 5a 11 80       	push   $0x80115a80
+80105111:	e8 ba 06 00 00       	call   801057d0 <acquire>
+  pushcli();
+80105116:	e8 b5 05 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+8010511b:	e8 d0 f3 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80105120:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80105126:	e8 f5 05 00 00       	call   80105720 <popcli>
+  myproc()->state = RUNNABLE;
+8010512b:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  pushcli();
+80105132:	e8 99 05 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80105137:	e8 b4 f3 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+8010513c:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80105142:	e8 d9 05 00 00       	call   80105720 <popcli>
+  //myproc()->retime = ticks;
+  
+  int intena;
+  struct proc *p = myproc();
+
+  if(!holding(&ptable.lock)) {
+80105147:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+8010514e:	e8 2d 06 00 00       	call   80105780 <holding>
+80105153:	83 c4 10             	add    $0x10,%esp
+80105156:	85 c0                	test   %eax,%eax
+80105158:	74 5a                	je     801051b4 <sys_yield2+0xb4>
+    panic("sched ptable.lock");
+    return 1;
+  }
+  if(mycpu()->ncli != 1) {
+8010515a:	e8 91 f3 ff ff       	call   801044f0 <mycpu>
+8010515f:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80105166:	75 73                	jne    801051db <sys_yield2+0xdb>
+    panic("sched locks");
+    return 1;
+  }
+  if(p->state == RUNNING) {
+80105168:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+8010516c:	74 60                	je     801051ce <sys_yield2+0xce>
+8010516e:	9c                   	pushf  
+8010516f:	58                   	pop    %eax
+    panic("sched running");
+    return 1;
+  }
+  if(readeflags()&FL_IF) {
+80105170:	f6 c4 02             	test   $0x2,%ah
+80105173:	75 4c                	jne    801051c1 <sys_yield2+0xc1>
+    panic("sched interruptible");
+    return 1;
+  }
+  
+  intena = mycpu()->intena;
+80105175:	e8 76 f3 ff ff       	call   801044f0 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+8010517a:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+8010517d:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+80105183:	e8 68 f3 ff ff       	call   801044f0 <mycpu>
+80105188:	83 ec 08             	sub    $0x8,%esp
+8010518b:	ff 70 04             	pushl  0x4(%eax)
+8010518e:	53                   	push   %ebx
+8010518f:	e8 6f 09 00 00       	call   80105b03 <swtch>
+  mycpu()->intena = intena;
+80105194:	e8 57 f3 ff ff       	call   801044f0 <mycpu>
+80105199:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+  
+  release(&ptable.lock);
+8010519f:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+801051a6:	e8 e5 06 00 00       	call   80105890 <release>
+  return 0;
+}
+801051ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801051ae:	31 c0                	xor    %eax,%eax
+801051b0:	5b                   	pop    %ebx
+801051b1:	5e                   	pop    %esi
+801051b2:	5d                   	pop    %ebp
+801051b3:	c3                   	ret    
+    panic("sched ptable.lock");
+801051b4:	83 ec 0c             	sub    $0xc,%esp
+801051b7:	68 e5 8a 10 80       	push   $0x80108ae5
+801051bc:	e8 cf b1 ff ff       	call   80100390 <panic>
+    panic("sched interruptible");
+801051c1:	83 ec 0c             	sub    $0xc,%esp
+801051c4:	68 11 8b 10 80       	push   $0x80108b11
+801051c9:	e8 c2 b1 ff ff       	call   80100390 <panic>
+    panic("sched running");
+801051ce:	83 ec 0c             	sub    $0xc,%esp
+801051d1:	68 03 8b 10 80       	push   $0x80108b03
+801051d6:	e8 b5 b1 ff ff       	call   80100390 <panic>
+    panic("sched locks");
+801051db:	83 ec 0c             	sub    $0xc,%esp
+801051de:	68 f7 8a 10 80       	push   $0x80108af7
+801051e3:	e8 a8 b1 ff ff       	call   80100390 <panic>
+801051e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051ef:	90                   	nop
+
+801051f0 <reset_priority>:
+
+// reset current process priority to 2
+void reset_priority(){
+801051f0:	f3 0f 1e fb          	endbr32 
+801051f4:	55                   	push   %ebp
+801051f5:	89 e5                	mov    %esp,%ebp
+801051f7:	53                   	push   %ebx
+801051f8:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+801051fb:	e8 d0 04 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80105200:	e8 eb f2 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80105205:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010520b:	e8 10 05 00 00       	call   80105720 <popcli>
+  struct proc *curproc = myproc();
+  acquire(&ptable.lock);
+80105210:	83 ec 0c             	sub    $0xc,%esp
+80105213:	68 80 5a 11 80       	push   $0x80115a80
+80105218:	e8 b3 05 00 00       	call   801057d0 <acquire>
+  if(curproc->priority == 1){
+8010521d:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+80105223:	83 c4 10             	add    $0x10,%esp
+80105226:	83 f8 01             	cmp    $0x1,%eax
+80105229:	0f 84 a1 00 00 00    	je     801052d0 <reset_priority+0xe0>
+    pqueue_remove(&queue1, curproc);
+    pqueue_insert(&queue2, curproc);
+  }else if(curproc->priority == 3){
+8010522f:	83 f8 03             	cmp    $0x3,%eax
+80105232:	74 24                	je     80105258 <reset_priority+0x68>
+    pqueue_remove(&queue3, curproc);
+    pqueue_insert(&queue2, curproc);
+  }
+  curproc->priority = 2;
+80105234:	c7 83 8c 00 00 00 02 	movl   $0x2,0x8c(%ebx)
+8010523b:	00 00 00 
+  release(&ptable.lock);
+8010523e:	83 ec 0c             	sub    $0xc,%esp
+80105241:	68 80 5a 11 80       	push   $0x80115a80
+80105246:	e8 45 06 00 00       	call   80105890 <release>
+}
+8010524b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010524e:	83 c4 10             	add    $0x10,%esp
+80105251:	c9                   	leave  
+80105252:	c3                   	ret    
+80105253:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105257:	90                   	nop
+    while(pos < q->size && !found){
+80105258:	8b 15 20 57 11 80    	mov    0x80115720,%edx
+8010525e:	85 d2                	test   %edx,%edx
+80105260:	7e 1e                	jle    80105280 <reset_priority+0x90>
+    pos = 0;
+80105262:	31 c0                	xor    %eax,%eax
+80105264:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        if(q->procs[pos] == proc) found = true;
+80105268:	3b 1c 85 28 57 11 80 	cmp    -0x7feea8d8(,%eax,4),%ebx
+8010526f:	74 27                	je     80105298 <reset_priority+0xa8>
+        else pos++;
+80105271:	83 c0 01             	add    $0x1,%eax
+    while(pos < q->size && !found){
+80105274:	39 d0                	cmp    %edx,%eax
+80105276:	75 f0                	jne    80105268 <reset_priority+0x78>
+80105278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010527f:	90                   	nop
+    pqueue_insert(&queue2, curproc);
+80105280:	83 ec 08             	sub    $0x8,%esp
+80105283:	53                   	push   %ebx
+80105284:	68 40 58 11 80       	push   $0x80115840
+80105289:	e8 82 f0 ff ff       	call   80104310 <pqueue_insert>
+8010528e:	83 c4 10             	add    $0x10,%esp
+80105291:	eb a1                	jmp    80105234 <reset_priority+0x44>
+80105293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105297:	90                   	nop
+        while(pos < q->size-1){
+80105298:	83 ea 01             	sub    $0x1,%edx
+8010529b:	39 c2                	cmp    %eax,%edx
+8010529d:	7e 15                	jle    801052b4 <reset_priority+0xc4>
+            q->procs[pos] = q->procs[pos+1];
+8010529f:	83 c0 01             	add    $0x1,%eax
+801052a2:	8b 0c 85 28 57 11 80 	mov    -0x7feea8d8(,%eax,4),%ecx
+801052a9:	89 0c 85 24 57 11 80 	mov    %ecx,-0x7feea8dc(,%eax,4)
+        while(pos < q->size-1){
+801052b0:	39 d0                	cmp    %edx,%eax
+801052b2:	75 eb                	jne    8010529f <reset_priority+0xaf>
+        q->procs[q->size-1] = 0;
+801052b4:	c7 04 95 28 57 11 80 	movl   $0x0,-0x7feea8d8(,%edx,4)
+801052bb:	00 00 00 00 
+        q->size --;
+801052bf:	89 15 20 57 11 80    	mov    %edx,0x80115720
+801052c5:	eb b9                	jmp    80105280 <reset_priority+0x90>
+801052c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052ce:	66 90                	xchg   %ax,%ax
+    while(pos < q->size && !found){
+801052d0:	8b 15 60 59 11 80    	mov    0x80115960,%edx
+801052d6:	85 d2                	test   %edx,%edx
+801052d8:	7e a6                	jle    80105280 <reset_priority+0x90>
+    pos = 0;
+801052da:	31 c0                	xor    %eax,%eax
+        if(q->procs[pos] == proc) found = true;
+801052dc:	3b 1c 85 68 59 11 80 	cmp    -0x7feea698(,%eax,4),%ebx
+801052e3:	74 13                	je     801052f8 <reset_priority+0x108>
+801052e5:	8d 76 00             	lea    0x0(%esi),%esi
+        else pos++;
+801052e8:	83 c0 01             	add    $0x1,%eax
+    while(pos < q->size && !found){
+801052eb:	39 d0                	cmp    %edx,%eax
+801052ed:	74 91                	je     80105280 <reset_priority+0x90>
+        if(q->procs[pos] == proc) found = true;
+801052ef:	3b 1c 85 68 59 11 80 	cmp    -0x7feea698(,%eax,4),%ebx
+801052f6:	75 f0                	jne    801052e8 <reset_priority+0xf8>
+        while(pos < q->size-1){
+801052f8:	83 ea 01             	sub    $0x1,%edx
+801052fb:	39 c2                	cmp    %eax,%edx
+801052fd:	7e 15                	jle    80105314 <reset_priority+0x124>
+            q->procs[pos] = q->procs[pos+1];
+801052ff:	83 c0 01             	add    $0x1,%eax
+80105302:	8b 0c 85 68 59 11 80 	mov    -0x7feea698(,%eax,4),%ecx
+80105309:	89 0c 85 64 59 11 80 	mov    %ecx,-0x7feea69c(,%eax,4)
+        while(pos < q->size-1){
+80105310:	39 c2                	cmp    %eax,%edx
+80105312:	75 eb                	jne    801052ff <reset_priority+0x10f>
+        q->procs[q->size-1] = 0;
+80105314:	c7 04 95 68 59 11 80 	movl   $0x0,-0x7feea698(,%edx,4)
+8010531b:	00 00 00 00 
+        q->size --;
+8010531f:	89 15 60 59 11 80    	mov    %edx,0x80115960
+    pqueue_insert(&queue2, curproc);
+80105325:	e9 56 ff ff ff       	jmp    80105280 <reset_priority+0x90>
+8010532a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105330 <decpriority>:
+
+
+void decpriority(void) {
+80105330:	f3 0f 1e fb          	endbr32 
+80105334:	55                   	push   %ebp
+80105335:	89 e5                	mov    %esp,%ebp
+80105337:	56                   	push   %esi
+80105338:	53                   	push   %ebx
+  pushcli();
+80105339:	e8 92 03 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+8010533e:	e8 ad f1 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+80105343:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80105349:	e8 d2 03 00 00       	call   80105720 <popcli>
+  struct proc *p =myproc();
+  acquire(&ptable.lock);
+8010534e:	83 ec 0c             	sub    $0xc,%esp
+80105351:	68 80 5a 11 80       	push   $0x80115a80
+80105356:	e8 75 04 00 00       	call   801057d0 <acquire>
+  if(p->priority == 2){
+8010535b:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+80105361:	83 c4 10             	add    $0x10,%esp
+80105364:	83 f8 02             	cmp    $0x2,%eax
+80105367:	0f 84 e3 00 00 00    	je     80105450 <decpriority+0x120>
+        pqueue_remove(&queue2, p);
+        pqueue_insert(&queue1, p);
+      }
+  else if(p->priority == 3){
+8010536d:	83 f8 03             	cmp    $0x3,%eax
+80105370:	74 76                	je     801053e8 <decpriority+0xb8>
+  pushcli();
+80105372:	e8 59 03 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80105377:	e8 74 f1 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+8010537c:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80105382:	e8 99 03 00 00       	call   80105720 <popcli>
+    pqueue_remove(&queue3, p);
+    pqueue_insert(&queue2, p);
+  }
+  myproc()->priority = myproc()->priority == 1 ? 1 : myproc()->priority - 1;
+80105387:	8b 9b 8c 00 00 00    	mov    0x8c(%ebx),%ebx
+8010538d:	83 fb 01             	cmp    $0x1,%ebx
+80105390:	74 1e                	je     801053b0 <decpriority+0x80>
+  pushcli();
+80105392:	e8 39 03 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+80105397:	e8 54 f1 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+8010539c:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801053a2:	e8 79 03 00 00       	call   80105720 <popcli>
+  myproc()->priority = myproc()->priority == 1 ? 1 : myproc()->priority - 1;
+801053a7:	8b 9b 8c 00 00 00    	mov    0x8c(%ebx),%ebx
+801053ad:	83 eb 01             	sub    $0x1,%ebx
+  pushcli();
+801053b0:	e8 1b 03 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+801053b5:	e8 36 f1 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+801053ba:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+801053c0:	e8 5b 03 00 00       	call   80105720 <popcli>
+
+  release(&ptable.lock);
+801053c5:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->priority = myproc()->priority == 1 ? 1 : myproc()->priority - 1;
+801053c8:	89 9e 8c 00 00 00    	mov    %ebx,0x8c(%esi)
+  release(&ptable.lock);
+801053ce:	68 80 5a 11 80       	push   $0x80115a80
+801053d3:	e8 b8 04 00 00       	call   80105890 <release>
+}
+801053d8:	83 c4 10             	add    $0x10,%esp
+801053db:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801053de:	5b                   	pop    %ebx
+801053df:	5e                   	pop    %esi
+801053e0:	5d                   	pop    %ebp
+801053e1:	c3                   	ret    
+801053e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    while(pos < q->size && !found){
+801053e8:	8b 15 20 57 11 80    	mov    0x80115720,%edx
+801053ee:	85 d2                	test   %edx,%edx
+801053f0:	7e 16                	jle    80105408 <decpriority+0xd8>
+    pos = 0;
+801053f2:	31 c0                	xor    %eax,%eax
+801053f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        if(q->procs[pos] == proc) found = true;
+801053f8:	3b 1c 85 28 57 11 80 	cmp    -0x7feea8d8(,%eax,4),%ebx
+801053ff:	74 1f                	je     80105420 <decpriority+0xf0>
+        else pos++;
+80105401:	83 c0 01             	add    $0x1,%eax
+    while(pos < q->size && !found){
+80105404:	39 d0                	cmp    %edx,%eax
+80105406:	75 f0                	jne    801053f8 <decpriority+0xc8>
+    pqueue_insert(&queue2, p);
+80105408:	83 ec 08             	sub    $0x8,%esp
+8010540b:	53                   	push   %ebx
+8010540c:	68 40 58 11 80       	push   $0x80115840
+80105411:	e8 fa ee ff ff       	call   80104310 <pqueue_insert>
+80105416:	83 c4 10             	add    $0x10,%esp
+80105419:	e9 54 ff ff ff       	jmp    80105372 <decpriority+0x42>
+8010541e:	66 90                	xchg   %ax,%ax
+        while(pos < q->size-1){
+80105420:	83 ea 01             	sub    $0x1,%edx
+80105423:	39 c2                	cmp    %eax,%edx
+80105425:	7e 15                	jle    8010543c <decpriority+0x10c>
+            q->procs[pos] = q->procs[pos+1];
+80105427:	83 c0 01             	add    $0x1,%eax
+8010542a:	8b 0c 85 28 57 11 80 	mov    -0x7feea8d8(,%eax,4),%ecx
+80105431:	89 0c 85 24 57 11 80 	mov    %ecx,-0x7feea8dc(,%eax,4)
+        while(pos < q->size-1){
+80105438:	39 d0                	cmp    %edx,%eax
+8010543a:	75 eb                	jne    80105427 <decpriority+0xf7>
+        q->procs[q->size-1] = 0;
+8010543c:	c7 04 95 28 57 11 80 	movl   $0x0,-0x7feea8d8(,%edx,4)
+80105443:	00 00 00 00 
+        q->size --;
+80105447:	89 15 20 57 11 80    	mov    %edx,0x80115720
+8010544d:	eb b9                	jmp    80105408 <decpriority+0xd8>
+8010544f:	90                   	nop
+    while(pos < q->size && !found){
+80105450:	8b 15 40 58 11 80    	mov    0x80115840,%edx
+80105456:	85 d2                	test   %edx,%edx
+80105458:	7e 16                	jle    80105470 <decpriority+0x140>
+    pos = 0;
+8010545a:	31 c0                	xor    %eax,%eax
+8010545c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        if(q->procs[pos] == proc) found = true;
+80105460:	3b 1c 85 48 58 11 80 	cmp    -0x7feea7b8(,%eax,4),%ebx
+80105467:	74 27                	je     80105490 <decpriority+0x160>
+        else pos++;
+80105469:	83 c0 01             	add    $0x1,%eax
+    while(pos < q->size && !found){
+8010546c:	39 d0                	cmp    %edx,%eax
+8010546e:	75 f0                	jne    80105460 <decpriority+0x130>
+        pqueue_insert(&queue1, p);
+80105470:	83 ec 08             	sub    $0x8,%esp
+80105473:	53                   	push   %ebx
+80105474:	68 60 59 11 80       	push   $0x80115960
+80105479:	e8 92 ee ff ff       	call   80104310 <pqueue_insert>
+8010547e:	83 c4 10             	add    $0x10,%esp
+80105481:	e9 ec fe ff ff       	jmp    80105372 <decpriority+0x42>
+80105486:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010548d:	8d 76 00             	lea    0x0(%esi),%esi
+        while(pos < q->size-1){
+80105490:	83 ea 01             	sub    $0x1,%edx
+80105493:	39 c2                	cmp    %eax,%edx
+80105495:	7e 15                	jle    801054ac <decpriority+0x17c>
+            q->procs[pos] = q->procs[pos+1];
+80105497:	83 c0 01             	add    $0x1,%eax
+8010549a:	8b 0c 85 48 58 11 80 	mov    -0x7feea7b8(,%eax,4),%ecx
+801054a1:	89 0c 85 44 58 11 80 	mov    %ecx,-0x7feea7bc(,%eax,4)
+        while(pos < q->size-1){
+801054a8:	39 c2                	cmp    %eax,%edx
+801054aa:	75 eb                	jne    80105497 <decpriority+0x167>
+        q->procs[q->size-1] = 0;
+801054ac:	c7 04 95 48 58 11 80 	movl   $0x0,-0x7feea7b8(,%edx,4)
+801054b3:	00 00 00 00 
+        q->size --;
+801054b7:	89 15 40 58 11 80    	mov    %edx,0x80115840
+801054bd:	eb b1                	jmp    80105470 <decpriority+0x140>
+801054bf:	90                   	nop
+
+801054c0 <inc_tickcounter>:
+
+int inc_tickcounter() {
+801054c0:	f3 0f 1e fb          	endbr32 
+801054c4:	55                   	push   %ebp
+801054c5:	89 e5                	mov    %esp,%ebp
+801054c7:	56                   	push   %esi
+801054c8:	53                   	push   %ebx
+  int res;
+  acquire(&ptable.lock);
+801054c9:	83 ec 0c             	sub    $0xc,%esp
+801054cc:	68 80 5a 11 80       	push   $0x80115a80
+801054d1:	e8 fa 02 00 00       	call   801057d0 <acquire>
+  pushcli();
+801054d6:	e8 f5 01 00 00       	call   801056d0 <pushcli>
+  c = mycpu();
+801054db:	e8 10 f0 ff ff       	call   801044f0 <mycpu>
+  p = c->proc;
+801054e0:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+801054e6:	e8 35 02 00 00       	call   80105720 <popcli>
+  res = ++myproc()->tickcounter;
+801054eb:	8b 86 90 00 00 00    	mov    0x90(%esi),%eax
+801054f1:	8d 58 01             	lea    0x1(%eax),%ebx
+801054f4:	89 9e 90 00 00 00    	mov    %ebx,0x90(%esi)
+  release(&ptable.lock);
+801054fa:	c7 04 24 80 5a 11 80 	movl   $0x80115a80,(%esp)
+80105501:	e8 8a 03 00 00       	call   80105890 <release>
+  return res;
+}
+80105506:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105509:	89 d8                	mov    %ebx,%eax
+8010550b:	5b                   	pop    %ebx
+8010550c:	5e                   	pop    %esi
+8010550d:	5d                   	pop    %ebp
+8010550e:	c3                   	ret    
+8010550f:	90                   	nop
+
+80105510 <initsleeplock>:
+#include "spinlock.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+80105510:	f3 0f 1e fb          	endbr32 
+80105514:	55                   	push   %ebp
+80105515:	89 e5                	mov    %esp,%ebp
+80105517:	53                   	push   %ebx
+80105518:	83 ec 0c             	sub    $0xc,%esp
+8010551b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&lk->lk, "sleep lock");
+8010551e:	68 a4 8b 10 80       	push   $0x80108ba4
+80105523:	8d 43 04             	lea    0x4(%ebx),%eax
+80105526:	50                   	push   %eax
+80105527:	e8 24 01 00 00       	call   80105650 <initlock>
+  lk->name = name;
+8010552c:	8b 45 0c             	mov    0xc(%ebp),%eax
+  lk->locked = 0;
+8010552f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+}
+80105535:	83 c4 10             	add    $0x10,%esp
+  lk->pid = 0;
+80105538:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  lk->name = name;
+8010553f:	89 43 38             	mov    %eax,0x38(%ebx)
+}
+80105542:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105545:	c9                   	leave  
+80105546:	c3                   	ret    
+80105547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010554e:	66 90                	xchg   %ax,%ax
+
+80105550 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+80105550:	f3 0f 1e fb          	endbr32 
+80105554:	55                   	push   %ebp
+80105555:	89 e5                	mov    %esp,%ebp
+80105557:	56                   	push   %esi
+80105558:	53                   	push   %ebx
+80105559:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+8010555c:	8d 73 04             	lea    0x4(%ebx),%esi
+8010555f:	83 ec 0c             	sub    $0xc,%esp
+80105562:	56                   	push   %esi
+80105563:	e8 68 02 00 00       	call   801057d0 <acquire>
+  while (lk->locked) {
+80105568:	8b 13                	mov    (%ebx),%edx
+8010556a:	83 c4 10             	add    $0x10,%esp
+8010556d:	85 d2                	test   %edx,%edx
+8010556f:	74 1a                	je     8010558b <acquiresleep+0x3b>
+80105571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    sleep(lk, &lk->lk);
+80105578:	83 ec 08             	sub    $0x8,%esp
+8010557b:	56                   	push   %esi
+8010557c:	53                   	push   %ebx
+8010557d:	e8 be f5 ff ff       	call   80104b40 <sleep>
+  while (lk->locked) {
+80105582:	8b 03                	mov    (%ebx),%eax
+80105584:	83 c4 10             	add    $0x10,%esp
+80105587:	85 c0                	test   %eax,%eax
+80105589:	75 ed                	jne    80105578 <acquiresleep+0x28>
+  }
+  lk->locked = 1;
+8010558b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  lk->pid = myproc()->pid;
+80105591:	e8 ea ef ff ff       	call   80104580 <myproc>
+80105596:	8b 40 10             	mov    0x10(%eax),%eax
+80105599:	89 43 3c             	mov    %eax,0x3c(%ebx)
+  release(&lk->lk);
+8010559c:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+8010559f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801055a2:	5b                   	pop    %ebx
+801055a3:	5e                   	pop    %esi
+801055a4:	5d                   	pop    %ebp
+  release(&lk->lk);
+801055a5:	e9 e6 02 00 00       	jmp    80105890 <release>
+801055aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801055b0 <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+801055b0:	f3 0f 1e fb          	endbr32 
+801055b4:	55                   	push   %ebp
+801055b5:	89 e5                	mov    %esp,%ebp
+801055b7:	56                   	push   %esi
+801055b8:	53                   	push   %ebx
+801055b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+801055bc:	8d 73 04             	lea    0x4(%ebx),%esi
+801055bf:	83 ec 0c             	sub    $0xc,%esp
+801055c2:	56                   	push   %esi
+801055c3:	e8 08 02 00 00       	call   801057d0 <acquire>
+  lk->locked = 0;
+801055c8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+801055ce:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  wakeup(lk);
+801055d5:	89 1c 24             	mov    %ebx,(%esp)
+801055d8:	e8 93 f8 ff ff       	call   80104e70 <wakeup>
+  release(&lk->lk);
+801055dd:	89 75 08             	mov    %esi,0x8(%ebp)
+801055e0:	83 c4 10             	add    $0x10,%esp
+}
+801055e3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801055e6:	5b                   	pop    %ebx
+801055e7:	5e                   	pop    %esi
+801055e8:	5d                   	pop    %ebp
+  release(&lk->lk);
+801055e9:	e9 a2 02 00 00       	jmp    80105890 <release>
+801055ee:	66 90                	xchg   %ax,%ax
+
+801055f0 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+801055f0:	f3 0f 1e fb          	endbr32 
+801055f4:	55                   	push   %ebp
+801055f5:	89 e5                	mov    %esp,%ebp
+801055f7:	57                   	push   %edi
+801055f8:	31 ff                	xor    %edi,%edi
+801055fa:	56                   	push   %esi
+801055fb:	53                   	push   %ebx
+801055fc:	83 ec 18             	sub    $0x18,%esp
+801055ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int r;
+  
+  acquire(&lk->lk);
+80105602:	8d 73 04             	lea    0x4(%ebx),%esi
+80105605:	56                   	push   %esi
+80105606:	e8 c5 01 00 00       	call   801057d0 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+8010560b:	8b 03                	mov    (%ebx),%eax
+8010560d:	83 c4 10             	add    $0x10,%esp
+80105610:	85 c0                	test   %eax,%eax
+80105612:	75 1c                	jne    80105630 <holdingsleep+0x40>
+  release(&lk->lk);
+80105614:	83 ec 0c             	sub    $0xc,%esp
+80105617:	56                   	push   %esi
+80105618:	e8 73 02 00 00       	call   80105890 <release>
+  return r;
+}
+8010561d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105620:	89 f8                	mov    %edi,%eax
+80105622:	5b                   	pop    %ebx
+80105623:	5e                   	pop    %esi
+80105624:	5f                   	pop    %edi
+80105625:	5d                   	pop    %ebp
+80105626:	c3                   	ret    
+80105627:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010562e:	66 90                	xchg   %ax,%ax
+  r = lk->locked && (lk->pid == myproc()->pid);
+80105630:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80105633:	e8 48 ef ff ff       	call   80104580 <myproc>
+80105638:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010563b:	0f 94 c0             	sete   %al
+8010563e:	0f b6 c0             	movzbl %al,%eax
+80105641:	89 c7                	mov    %eax,%edi
+80105643:	eb cf                	jmp    80105614 <holdingsleep+0x24>
+80105645:	66 90                	xchg   %ax,%ax
+80105647:	66 90                	xchg   %ax,%ax
+80105649:	66 90                	xchg   %ax,%ax
+8010564b:	66 90                	xchg   %ax,%ax
+8010564d:	66 90                	xchg   %ax,%ax
+8010564f:	90                   	nop
+
+80105650 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+80105650:	f3 0f 1e fb          	endbr32 
+80105654:	55                   	push   %ebp
+80105655:	89 e5                	mov    %esp,%ebp
+80105657:	8b 45 08             	mov    0x8(%ebp),%eax
+  lk->name = name;
+8010565a:	8b 55 0c             	mov    0xc(%ebp),%edx
+  lk->locked = 0;
+8010565d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  lk->name = name;
+80105663:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->cpu = 0;
+80105666:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+8010566d:	5d                   	pop    %ebp
+8010566e:	c3                   	ret    
+8010566f:	90                   	nop
+
+80105670 <getcallerpcs>:
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+80105670:	f3 0f 1e fb          	endbr32 
+80105674:	55                   	push   %ebp
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+80105675:	31 d2                	xor    %edx,%edx
+{
+80105677:	89 e5                	mov    %esp,%ebp
+80105679:	53                   	push   %ebx
+  ebp = (uint*)v - 2;
+8010567a:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+8010567d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  ebp = (uint*)v - 2;
+80105680:	83 e8 08             	sub    $0x8,%eax
+  for(i = 0; i < 10; i++){
+80105683:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105687:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80105688:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+8010568e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80105694:	77 1a                	ja     801056b0 <getcallerpcs+0x40>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+80105696:	8b 58 04             	mov    0x4(%eax),%ebx
+80105699:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+  for(i = 0; i < 10; i++){
+8010569c:	83 c2 01             	add    $0x1,%edx
+    ebp = (uint*)ebp[0]; // saved %ebp
+8010569f:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+801056a1:	83 fa 0a             	cmp    $0xa,%edx
+801056a4:	75 e2                	jne    80105688 <getcallerpcs+0x18>
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+801056a6:	5b                   	pop    %ebx
+801056a7:	5d                   	pop    %ebp
+801056a8:	c3                   	ret    
+801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(; i < 10; i++)
+801056b0:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+801056b3:	8d 51 28             	lea    0x28(%ecx),%edx
+801056b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056bd:	8d 76 00             	lea    0x0(%esi),%esi
+    pcs[i] = 0;
+801056c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; i < 10; i++)
+801056c6:	83 c0 04             	add    $0x4,%eax
+801056c9:	39 d0                	cmp    %edx,%eax
+801056cb:	75 f3                	jne    801056c0 <getcallerpcs+0x50>
+}
+801056cd:	5b                   	pop    %ebx
+801056ce:	5d                   	pop    %ebp
+801056cf:	c3                   	ret    
+
+801056d0 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+801056d0:	f3 0f 1e fb          	endbr32 
+801056d4:	55                   	push   %ebp
+801056d5:	89 e5                	mov    %esp,%ebp
+801056d7:	53                   	push   %ebx
+801056d8:	83 ec 04             	sub    $0x4,%esp
+801056db:	9c                   	pushf  
+801056dc:	5b                   	pop    %ebx
+  asm volatile("cli");
+801056dd:	fa                   	cli    
+  int eflags;
+
+  eflags = readeflags();
+  cli();
+  if(mycpu()->ncli == 0)
+801056de:	e8 0d ee ff ff       	call   801044f0 <mycpu>
+801056e3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801056e9:	85 c0                	test   %eax,%eax
+801056eb:	74 13                	je     80105700 <pushcli+0x30>
+    mycpu()->intena = eflags & FL_IF;
+  mycpu()->ncli += 1;
+801056ed:	e8 fe ed ff ff       	call   801044f0 <mycpu>
+801056f2:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+}
+801056f9:	83 c4 04             	add    $0x4,%esp
+801056fc:	5b                   	pop    %ebx
+801056fd:	5d                   	pop    %ebp
+801056fe:	c3                   	ret    
+801056ff:	90                   	nop
+    mycpu()->intena = eflags & FL_IF;
+80105700:	e8 eb ed ff ff       	call   801044f0 <mycpu>
+80105705:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010570b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80105711:	eb da                	jmp    801056ed <pushcli+0x1d>
+80105713:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010571a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105720 <popcli>:
+
+void
+popcli(void)
+{
+80105720:	f3 0f 1e fb          	endbr32 
+80105724:	55                   	push   %ebp
+80105725:	89 e5                	mov    %esp,%ebp
+80105727:	83 ec 08             	sub    $0x8,%esp
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+8010572a:	9c                   	pushf  
+8010572b:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+8010572c:	f6 c4 02             	test   $0x2,%ah
+8010572f:	75 31                	jne    80105762 <popcli+0x42>
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+80105731:	e8 ba ed ff ff       	call   801044f0 <mycpu>
+80105736:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+8010573d:	78 30                	js     8010576f <popcli+0x4f>
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+8010573f:	e8 ac ed ff ff       	call   801044f0 <mycpu>
+80105744:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+8010574a:	85 d2                	test   %edx,%edx
+8010574c:	74 02                	je     80105750 <popcli+0x30>
+    sti();
+}
+8010574e:	c9                   	leave  
+8010574f:	c3                   	ret    
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+80105750:	e8 9b ed ff ff       	call   801044f0 <mycpu>
+80105755:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+8010575b:	85 c0                	test   %eax,%eax
+8010575d:	74 ef                	je     8010574e <popcli+0x2e>
+  asm volatile("sti");
+8010575f:	fb                   	sti    
+}
+80105760:	c9                   	leave  
+80105761:	c3                   	ret    
+    panic("popcli - interruptible");
+80105762:	83 ec 0c             	sub    $0xc,%esp
+80105765:	68 af 8b 10 80       	push   $0x80108baf
+8010576a:	e8 21 ac ff ff       	call   80100390 <panic>
+    panic("popcli");
+8010576f:	83 ec 0c             	sub    $0xc,%esp
+80105772:	68 c6 8b 10 80       	push   $0x80108bc6
+80105777:	e8 14 ac ff ff       	call   80100390 <panic>
+8010577c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105780 <holding>:
+{
+80105780:	f3 0f 1e fb          	endbr32 
+80105784:	55                   	push   %ebp
+80105785:	89 e5                	mov    %esp,%ebp
+80105787:	56                   	push   %esi
+80105788:	53                   	push   %ebx
+80105789:	8b 75 08             	mov    0x8(%ebp),%esi
+8010578c:	31 db                	xor    %ebx,%ebx
+  pushcli();
+8010578e:	e8 3d ff ff ff       	call   801056d0 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+80105793:	8b 06                	mov    (%esi),%eax
+80105795:	85 c0                	test   %eax,%eax
+80105797:	75 0f                	jne    801057a8 <holding+0x28>
+  popcli();
+80105799:	e8 82 ff ff ff       	call   80105720 <popcli>
+}
+8010579e:	89 d8                	mov    %ebx,%eax
+801057a0:	5b                   	pop    %ebx
+801057a1:	5e                   	pop    %esi
+801057a2:	5d                   	pop    %ebp
+801057a3:	c3                   	ret    
+801057a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  r = lock->locked && lock->cpu == mycpu();
+801057a8:	8b 5e 08             	mov    0x8(%esi),%ebx
+801057ab:	e8 40 ed ff ff       	call   801044f0 <mycpu>
+801057b0:	39 c3                	cmp    %eax,%ebx
+801057b2:	0f 94 c3             	sete   %bl
+  popcli();
+801057b5:	e8 66 ff ff ff       	call   80105720 <popcli>
+  r = lock->locked && lock->cpu == mycpu();
+801057ba:	0f b6 db             	movzbl %bl,%ebx
+}
+801057bd:	89 d8                	mov    %ebx,%eax
+801057bf:	5b                   	pop    %ebx
+801057c0:	5e                   	pop    %esi
+801057c1:	5d                   	pop    %ebp
+801057c2:	c3                   	ret    
+801057c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801057d0 <acquire>:
+{
+801057d0:	f3 0f 1e fb          	endbr32 
+801057d4:	55                   	push   %ebp
+801057d5:	89 e5                	mov    %esp,%ebp
+801057d7:	56                   	push   %esi
+801057d8:	53                   	push   %ebx
+  pushcli(); // disable interrupts to avoid deadlock.
+801057d9:	e8 f2 fe ff ff       	call   801056d0 <pushcli>
+  if(holding(lk))
+801057de:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801057e1:	83 ec 0c             	sub    $0xc,%esp
+801057e4:	53                   	push   %ebx
+801057e5:	e8 96 ff ff ff       	call   80105780 <holding>
+801057ea:	83 c4 10             	add    $0x10,%esp
+801057ed:	85 c0                	test   %eax,%eax
+801057ef:	0f 85 7f 00 00 00    	jne    80105874 <acquire+0xa4>
+801057f5:	89 c6                	mov    %eax,%esi
+  asm volatile("lock; xchgl %0, %1" :
+801057f7:	ba 01 00 00 00       	mov    $0x1,%edx
+801057fc:	eb 05                	jmp    80105803 <acquire+0x33>
+801057fe:	66 90                	xchg   %ax,%ax
+80105800:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105803:	89 d0                	mov    %edx,%eax
+80105805:	f0 87 03             	lock xchg %eax,(%ebx)
+  while(xchg(&lk->locked, 1) != 0)
+80105808:	85 c0                	test   %eax,%eax
+8010580a:	75 f4                	jne    80105800 <acquire+0x30>
+  __sync_synchronize();
+8010580c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  lk->cpu = mycpu();
+80105811:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105814:	e8 d7 ec ff ff       	call   801044f0 <mycpu>
+80105819:	89 43 08             	mov    %eax,0x8(%ebx)
+  ebp = (uint*)v - 2;
+8010581c:	89 e8                	mov    %ebp,%eax
+8010581e:	66 90                	xchg   %ax,%ax
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80105820:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+80105826:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+8010582c:	77 22                	ja     80105850 <acquire+0x80>
+    pcs[i] = ebp[1];     // saved %eip
+8010582e:	8b 50 04             	mov    0x4(%eax),%edx
+80105831:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+  for(i = 0; i < 10; i++){
+80105835:	83 c6 01             	add    $0x1,%esi
+    ebp = (uint*)ebp[0]; // saved %ebp
+80105838:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+8010583a:	83 fe 0a             	cmp    $0xa,%esi
+8010583d:	75 e1                	jne    80105820 <acquire+0x50>
+}
+8010583f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105842:	5b                   	pop    %ebx
+80105843:	5e                   	pop    %esi
+80105844:	5d                   	pop    %ebp
+80105845:	c3                   	ret    
+80105846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010584d:	8d 76 00             	lea    0x0(%esi),%esi
+  for(; i < 10; i++)
+80105850:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+80105854:	83 c3 34             	add    $0x34,%ebx
+80105857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010585e:	66 90                	xchg   %ax,%ax
+    pcs[i] = 0;
+80105860:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; i < 10; i++)
+80105866:	83 c0 04             	add    $0x4,%eax
+80105869:	39 d8                	cmp    %ebx,%eax
+8010586b:	75 f3                	jne    80105860 <acquire+0x90>
+}
+8010586d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105870:	5b                   	pop    %ebx
+80105871:	5e                   	pop    %esi
+80105872:	5d                   	pop    %ebp
+80105873:	c3                   	ret    
+    panic("acquire");
+80105874:	83 ec 0c             	sub    $0xc,%esp
+80105877:	68 cd 8b 10 80       	push   $0x80108bcd
+8010587c:	e8 0f ab ff ff       	call   80100390 <panic>
+80105881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105888:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010588f:	90                   	nop
+
+80105890 <release>:
+{
+80105890:	f3 0f 1e fb          	endbr32 
+80105894:	55                   	push   %ebp
+80105895:	89 e5                	mov    %esp,%ebp
+80105897:	53                   	push   %ebx
+80105898:	83 ec 10             	sub    $0x10,%esp
+8010589b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holding(lk))
+8010589e:	53                   	push   %ebx
+8010589f:	e8 dc fe ff ff       	call   80105780 <holding>
+801058a4:	83 c4 10             	add    $0x10,%esp
+801058a7:	85 c0                	test   %eax,%eax
+801058a9:	74 22                	je     801058cd <release+0x3d>
+  lk->pcs[0] = 0;
+801058ab:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  lk->cpu = 0;
+801058b2:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+  __sync_synchronize();
+801058b9:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+801058be:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+}
+801058c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801058c7:	c9                   	leave  
+  popcli();
+801058c8:	e9 53 fe ff ff       	jmp    80105720 <popcli>
+    panic("release");
+801058cd:	83 ec 0c             	sub    $0xc,%esp
+801058d0:	68 d5 8b 10 80       	push   $0x80108bd5
+801058d5:	e8 b6 aa ff ff       	call   80100390 <panic>
+801058da:	66 90                	xchg   %ax,%ax
+801058dc:	66 90                	xchg   %ax,%ax
+801058de:	66 90                	xchg   %ax,%ax
+
+801058e0 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+801058e0:	f3 0f 1e fb          	endbr32 
+801058e4:	55                   	push   %ebp
+801058e5:	89 e5                	mov    %esp,%ebp
+801058e7:	57                   	push   %edi
+801058e8:	8b 55 08             	mov    0x8(%ebp),%edx
+801058eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801058ee:	53                   	push   %ebx
+801058ef:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if ((int)dst%4 == 0 && n%4 == 0){
+801058f2:	89 d7                	mov    %edx,%edi
+801058f4:	09 cf                	or     %ecx,%edi
+801058f6:	83 e7 03             	and    $0x3,%edi
+801058f9:	75 25                	jne    80105920 <memset+0x40>
+    c &= 0xFF;
+801058fb:	0f b6 f8             	movzbl %al,%edi
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+801058fe:	c1 e0 18             	shl    $0x18,%eax
+80105901:	89 fb                	mov    %edi,%ebx
+80105903:	c1 e9 02             	shr    $0x2,%ecx
+80105906:	c1 e3 10             	shl    $0x10,%ebx
+80105909:	09 d8                	or     %ebx,%eax
+8010590b:	09 f8                	or     %edi,%eax
+8010590d:	c1 e7 08             	shl    $0x8,%edi
+80105910:	09 f8                	or     %edi,%eax
+  asm volatile("cld; rep stosl" :
+80105912:	89 d7                	mov    %edx,%edi
+80105914:	fc                   	cld    
+80105915:	f3 ab                	rep stos %eax,%es:(%edi)
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+80105917:	5b                   	pop    %ebx
+80105918:	89 d0                	mov    %edx,%eax
+8010591a:	5f                   	pop    %edi
+8010591b:	5d                   	pop    %ebp
+8010591c:	c3                   	ret    
+8010591d:	8d 76 00             	lea    0x0(%esi),%esi
+  asm volatile("cld; rep stosb" :
+80105920:	89 d7                	mov    %edx,%edi
+80105922:	fc                   	cld    
+80105923:	f3 aa                	rep stos %al,%es:(%edi)
+80105925:	5b                   	pop    %ebx
+80105926:	89 d0                	mov    %edx,%eax
+80105928:	5f                   	pop    %edi
+80105929:	5d                   	pop    %ebp
+8010592a:	c3                   	ret    
+8010592b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010592f:	90                   	nop
+
+80105930 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+80105930:	f3 0f 1e fb          	endbr32 
+80105934:	55                   	push   %ebp
+80105935:	89 e5                	mov    %esp,%ebp
+80105937:	56                   	push   %esi
+80105938:	8b 75 10             	mov    0x10(%ebp),%esi
+8010593b:	8b 55 08             	mov    0x8(%ebp),%edx
+8010593e:	53                   	push   %ebx
+8010593f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+80105942:	85 f6                	test   %esi,%esi
+80105944:	74 2a                	je     80105970 <memcmp+0x40>
+80105946:	01 c6                	add    %eax,%esi
+80105948:	eb 10                	jmp    8010595a <memcmp+0x2a>
+8010594a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(*s1 != *s2)
+      return *s1 - *s2;
+    s1++, s2++;
+80105950:	83 c0 01             	add    $0x1,%eax
+80105953:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0){
+80105956:	39 f0                	cmp    %esi,%eax
+80105958:	74 16                	je     80105970 <memcmp+0x40>
+    if(*s1 != *s2)
+8010595a:	0f b6 0a             	movzbl (%edx),%ecx
+8010595d:	0f b6 18             	movzbl (%eax),%ebx
+80105960:	38 d9                	cmp    %bl,%cl
+80105962:	74 ec                	je     80105950 <memcmp+0x20>
+      return *s1 - *s2;
+80105964:	0f b6 c1             	movzbl %cl,%eax
+80105967:	29 d8                	sub    %ebx,%eax
+  }
+
+  return 0;
+}
+80105969:	5b                   	pop    %ebx
+8010596a:	5e                   	pop    %esi
+8010596b:	5d                   	pop    %ebp
+8010596c:	c3                   	ret    
+8010596d:	8d 76 00             	lea    0x0(%esi),%esi
+80105970:	5b                   	pop    %ebx
+  return 0;
+80105971:	31 c0                	xor    %eax,%eax
+}
+80105973:	5e                   	pop    %esi
+80105974:	5d                   	pop    %ebp
+80105975:	c3                   	ret    
+80105976:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010597d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105980 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+80105980:	f3 0f 1e fb          	endbr32 
+80105984:	55                   	push   %ebp
+80105985:	89 e5                	mov    %esp,%ebp
+80105987:	57                   	push   %edi
+80105988:	8b 55 08             	mov    0x8(%ebp),%edx
+8010598b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010598e:	56                   	push   %esi
+8010598f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+80105992:	39 d6                	cmp    %edx,%esi
+80105994:	73 2a                	jae    801059c0 <memmove+0x40>
+80105996:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80105999:	39 fa                	cmp    %edi,%edx
+8010599b:	73 23                	jae    801059c0 <memmove+0x40>
+8010599d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+    s += n;
+    d += n;
+    while(n-- > 0)
+801059a0:	85 c9                	test   %ecx,%ecx
+801059a2:	74 13                	je     801059b7 <memmove+0x37>
+801059a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      *--d = *--s;
+801059a8:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+801059ac:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+    while(n-- > 0)
+801059af:	83 e8 01             	sub    $0x1,%eax
+801059b2:	83 f8 ff             	cmp    $0xffffffff,%eax
+801059b5:	75 f1                	jne    801059a8 <memmove+0x28>
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+801059b7:	5e                   	pop    %esi
+801059b8:	89 d0                	mov    %edx,%eax
+801059ba:	5f                   	pop    %edi
+801059bb:	5d                   	pop    %ebp
+801059bc:	c3                   	ret    
+801059bd:	8d 76 00             	lea    0x0(%esi),%esi
+    while(n-- > 0)
+801059c0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+801059c3:	89 d7                	mov    %edx,%edi
+801059c5:	85 c9                	test   %ecx,%ecx
+801059c7:	74 ee                	je     801059b7 <memmove+0x37>
+801059c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      *d++ = *s++;
+801059d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+    while(n-- > 0)
+801059d1:	39 f0                	cmp    %esi,%eax
+801059d3:	75 fb                	jne    801059d0 <memmove+0x50>
+}
+801059d5:	5e                   	pop    %esi
+801059d6:	89 d0                	mov    %edx,%eax
+801059d8:	5f                   	pop    %edi
+801059d9:	5d                   	pop    %ebp
+801059da:	c3                   	ret    
+801059db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801059df:	90                   	nop
+
+801059e0 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+801059e0:	f3 0f 1e fb          	endbr32 
+  return memmove(dst, src, n);
+801059e4:	eb 9a                	jmp    80105980 <memmove>
+801059e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801059f0 <strncmp>:
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+801059f0:	f3 0f 1e fb          	endbr32 
+801059f4:	55                   	push   %ebp
+801059f5:	89 e5                	mov    %esp,%ebp
+801059f7:	56                   	push   %esi
+801059f8:	8b 75 10             	mov    0x10(%ebp),%esi
+801059fb:	8b 4d 08             	mov    0x8(%ebp),%ecx
+801059fe:	53                   	push   %ebx
+801059ff:	8b 45 0c             	mov    0xc(%ebp),%eax
+  while(n > 0 && *p && *p == *q)
+80105a02:	85 f6                	test   %esi,%esi
+80105a04:	74 32                	je     80105a38 <strncmp+0x48>
+80105a06:	01 c6                	add    %eax,%esi
+80105a08:	eb 14                	jmp    80105a1e <strncmp+0x2e>
+80105a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105a10:	38 da                	cmp    %bl,%dl
+80105a12:	75 14                	jne    80105a28 <strncmp+0x38>
+    n--, p++, q++;
+80105a14:	83 c0 01             	add    $0x1,%eax
+80105a17:	83 c1 01             	add    $0x1,%ecx
+  while(n > 0 && *p && *p == *q)
+80105a1a:	39 f0                	cmp    %esi,%eax
+80105a1c:	74 1a                	je     80105a38 <strncmp+0x48>
+80105a1e:	0f b6 11             	movzbl (%ecx),%edx
+80105a21:	0f b6 18             	movzbl (%eax),%ebx
+80105a24:	84 d2                	test   %dl,%dl
+80105a26:	75 e8                	jne    80105a10 <strncmp+0x20>
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+80105a28:	0f b6 c2             	movzbl %dl,%eax
+80105a2b:	29 d8                	sub    %ebx,%eax
+}
+80105a2d:	5b                   	pop    %ebx
+80105a2e:	5e                   	pop    %esi
+80105a2f:	5d                   	pop    %ebp
+80105a30:	c3                   	ret    
+80105a31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a38:	5b                   	pop    %ebx
+    return 0;
+80105a39:	31 c0                	xor    %eax,%eax
+}
+80105a3b:	5e                   	pop    %esi
+80105a3c:	5d                   	pop    %ebp
+80105a3d:	c3                   	ret    
+80105a3e:	66 90                	xchg   %ax,%ax
+
+80105a40 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+80105a40:	f3 0f 1e fb          	endbr32 
+80105a44:	55                   	push   %ebp
+80105a45:	89 e5                	mov    %esp,%ebp
+80105a47:	57                   	push   %edi
+80105a48:	56                   	push   %esi
+80105a49:	8b 75 08             	mov    0x8(%ebp),%esi
+80105a4c:	53                   	push   %ebx
+80105a4d:	8b 45 10             	mov    0x10(%ebp),%eax
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+80105a50:	89 f2                	mov    %esi,%edx
+80105a52:	eb 1b                	jmp    80105a6f <strncpy+0x2f>
+80105a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a58:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+80105a5c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80105a5f:	83 c2 01             	add    $0x1,%edx
+80105a62:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+80105a66:	89 f9                	mov    %edi,%ecx
+80105a68:	88 4a ff             	mov    %cl,-0x1(%edx)
+80105a6b:	84 c9                	test   %cl,%cl
+80105a6d:	74 09                	je     80105a78 <strncpy+0x38>
+80105a6f:	89 c3                	mov    %eax,%ebx
+80105a71:	83 e8 01             	sub    $0x1,%eax
+80105a74:	85 db                	test   %ebx,%ebx
+80105a76:	7f e0                	jg     80105a58 <strncpy+0x18>
+    ;
+  while(n-- > 0)
+80105a78:	89 d1                	mov    %edx,%ecx
+80105a7a:	85 c0                	test   %eax,%eax
+80105a7c:	7e 15                	jle    80105a93 <strncpy+0x53>
+80105a7e:	66 90                	xchg   %ax,%ax
+    *s++ = 0;
+80105a80:	83 c1 01             	add    $0x1,%ecx
+80105a83:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+  while(n-- > 0)
+80105a87:	89 c8                	mov    %ecx,%eax
+80105a89:	f7 d0                	not    %eax
+80105a8b:	01 d0                	add    %edx,%eax
+80105a8d:	01 d8                	add    %ebx,%eax
+80105a8f:	85 c0                	test   %eax,%eax
+80105a91:	7f ed                	jg     80105a80 <strncpy+0x40>
+  return os;
+}
+80105a93:	5b                   	pop    %ebx
+80105a94:	89 f0                	mov    %esi,%eax
+80105a96:	5e                   	pop    %esi
+80105a97:	5f                   	pop    %edi
+80105a98:	5d                   	pop    %ebp
+80105a99:	c3                   	ret    
+80105a9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105aa0 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+80105aa0:	f3 0f 1e fb          	endbr32 
+80105aa4:	55                   	push   %ebp
+80105aa5:	89 e5                	mov    %esp,%ebp
+80105aa7:	56                   	push   %esi
+80105aa8:	8b 55 10             	mov    0x10(%ebp),%edx
+80105aab:	8b 75 08             	mov    0x8(%ebp),%esi
+80105aae:	53                   	push   %ebx
+80105aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  char *os;
+
+  os = s;
+  if(n <= 0)
+80105ab2:	85 d2                	test   %edx,%edx
+80105ab4:	7e 21                	jle    80105ad7 <safestrcpy+0x37>
+80105ab6:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80105aba:	89 f2                	mov    %esi,%edx
+80105abc:	eb 12                	jmp    80105ad0 <safestrcpy+0x30>
+80105abe:	66 90                	xchg   %ax,%ax
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+80105ac0:	0f b6 08             	movzbl (%eax),%ecx
+80105ac3:	83 c0 01             	add    $0x1,%eax
+80105ac6:	83 c2 01             	add    $0x1,%edx
+80105ac9:	88 4a ff             	mov    %cl,-0x1(%edx)
+80105acc:	84 c9                	test   %cl,%cl
+80105ace:	74 04                	je     80105ad4 <safestrcpy+0x34>
+80105ad0:	39 d8                	cmp    %ebx,%eax
+80105ad2:	75 ec                	jne    80105ac0 <safestrcpy+0x20>
+    ;
+  *s = 0;
+80105ad4:	c6 02 00             	movb   $0x0,(%edx)
+  return os;
+}
+80105ad7:	89 f0                	mov    %esi,%eax
+80105ad9:	5b                   	pop    %ebx
+80105ada:	5e                   	pop    %esi
+80105adb:	5d                   	pop    %ebp
+80105adc:	c3                   	ret    
+80105add:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105ae0 <strlen>:
+
+int
+strlen(const char *s)
+{
+80105ae0:	f3 0f 1e fb          	endbr32 
+80105ae4:	55                   	push   %ebp
+  int n;
+
+  for(n = 0; s[n]; n++)
+80105ae5:	31 c0                	xor    %eax,%eax
+{
+80105ae7:	89 e5                	mov    %esp,%ebp
+80105ae9:	8b 55 08             	mov    0x8(%ebp),%edx
+  for(n = 0; s[n]; n++)
+80105aec:	80 3a 00             	cmpb   $0x0,(%edx)
+80105aef:	74 10                	je     80105b01 <strlen+0x21>
+80105af1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105af8:	83 c0 01             	add    $0x1,%eax
+80105afb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80105aff:	75 f7                	jne    80105af8 <strlen+0x18>
+    ;
+  return n;
+}
+80105b01:	5d                   	pop    %ebp
+80105b02:	c3                   	ret    
+
+80105b03 <swtch>:
+# a struct context, and save its address in *old.
+# Switch stacks to new and pop previously-saved registers.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+80105b03:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+80105b07:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-saved registers
+  pushl %ebp
+80105b0b:	55                   	push   %ebp
+  pushl %ebx
+80105b0c:	53                   	push   %ebx
+  pushl %esi
+80105b0d:	56                   	push   %esi
+  pushl %edi
+80105b0e:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+80105b0f:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+80105b11:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-saved registers
+  popl %edi
+80105b13:	5f                   	pop    %edi
+  popl %esi
+80105b14:	5e                   	pop    %esi
+  popl %ebx
+80105b15:	5b                   	pop    %ebx
+  popl %ebp
+80105b16:	5d                   	pop    %ebp
+  ret
+80105b17:	c3                   	ret    
+80105b18:	66 90                	xchg   %ax,%ax
+80105b1a:	66 90                	xchg   %ax,%ax
+80105b1c:	66 90                	xchg   %ax,%ax
+80105b1e:	66 90                	xchg   %ax,%ax
+
+80105b20 <fetchint>:
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+80105b20:	f3 0f 1e fb          	endbr32 
+80105b24:	55                   	push   %ebp
+80105b25:	89 e5                	mov    %esp,%ebp
+80105b27:	53                   	push   %ebx
+80105b28:	83 ec 04             	sub    $0x4,%esp
+80105b2b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *curproc = myproc();
+80105b2e:	e8 4d ea ff ff       	call   80104580 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80105b33:	8b 00                	mov    (%eax),%eax
+80105b35:	39 d8                	cmp    %ebx,%eax
+80105b37:	76 17                	jbe    80105b50 <fetchint+0x30>
+80105b39:	8d 53 04             	lea    0x4(%ebx),%edx
+80105b3c:	39 d0                	cmp    %edx,%eax
+80105b3e:	72 10                	jb     80105b50 <fetchint+0x30>
+    return -1;
+  *ip = *(int*)(addr);
+80105b40:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105b43:	8b 13                	mov    (%ebx),%edx
+80105b45:	89 10                	mov    %edx,(%eax)
+  return 0;
+80105b47:	31 c0                	xor    %eax,%eax
+}
+80105b49:	83 c4 04             	add    $0x4,%esp
+80105b4c:	5b                   	pop    %ebx
+80105b4d:	5d                   	pop    %ebp
+80105b4e:	c3                   	ret    
+80105b4f:	90                   	nop
+    return -1;
+80105b50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b55:	eb f2                	jmp    80105b49 <fetchint+0x29>
+80105b57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b5e:	66 90                	xchg   %ax,%ax
+
+80105b60 <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+80105b60:	f3 0f 1e fb          	endbr32 
+80105b64:	55                   	push   %ebp
+80105b65:	89 e5                	mov    %esp,%ebp
+80105b67:	53                   	push   %ebx
+80105b68:	83 ec 04             	sub    $0x4,%esp
+80105b6b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  char *s, *ep;
+  struct proc *curproc = myproc();
+80105b6e:	e8 0d ea ff ff       	call   80104580 <myproc>
+
+  if(addr >= curproc->sz)
+80105b73:	39 18                	cmp    %ebx,(%eax)
+80105b75:	76 31                	jbe    80105ba8 <fetchstr+0x48>
+    return -1;
+  *pp = (char*)addr;
+80105b77:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105b7a:	89 1a                	mov    %ebx,(%edx)
+  ep = (char*)curproc->sz;
+80105b7c:	8b 10                	mov    (%eax),%edx
+  for(s = *pp; s < ep; s++){
+80105b7e:	39 d3                	cmp    %edx,%ebx
+80105b80:	73 26                	jae    80105ba8 <fetchstr+0x48>
+80105b82:	89 d8                	mov    %ebx,%eax
+80105b84:	eb 11                	jmp    80105b97 <fetchstr+0x37>
+80105b86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b8d:	8d 76 00             	lea    0x0(%esi),%esi
+80105b90:	83 c0 01             	add    $0x1,%eax
+80105b93:	39 c2                	cmp    %eax,%edx
+80105b95:	76 11                	jbe    80105ba8 <fetchstr+0x48>
+    if(*s == 0)
+80105b97:	80 38 00             	cmpb   $0x0,(%eax)
+80105b9a:	75 f4                	jne    80105b90 <fetchstr+0x30>
+      return s - *pp;
+  }
+  return -1;
+}
+80105b9c:	83 c4 04             	add    $0x4,%esp
+      return s - *pp;
+80105b9f:	29 d8                	sub    %ebx,%eax
+}
+80105ba1:	5b                   	pop    %ebx
+80105ba2:	5d                   	pop    %ebp
+80105ba3:	c3                   	ret    
+80105ba4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105ba8:	83 c4 04             	add    $0x4,%esp
+    return -1;
+80105bab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105bb0:	5b                   	pop    %ebx
+80105bb1:	5d                   	pop    %ebp
+80105bb2:	c3                   	ret    
+80105bb3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105bc0 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+80105bc0:	f3 0f 1e fb          	endbr32 
+80105bc4:	55                   	push   %ebp
+80105bc5:	89 e5                	mov    %esp,%ebp
+80105bc7:	56                   	push   %esi
+80105bc8:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80105bc9:	e8 b2 e9 ff ff       	call   80104580 <myproc>
+80105bce:	8b 55 08             	mov    0x8(%ebp),%edx
+80105bd1:	8b 40 18             	mov    0x18(%eax),%eax
+80105bd4:	8b 40 44             	mov    0x44(%eax),%eax
+80105bd7:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+80105bda:	e8 a1 e9 ff ff       	call   80104580 <myproc>
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80105bdf:	8d 73 04             	lea    0x4(%ebx),%esi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80105be2:	8b 00                	mov    (%eax),%eax
+80105be4:	39 c6                	cmp    %eax,%esi
+80105be6:	73 18                	jae    80105c00 <argint+0x40>
+80105be8:	8d 53 08             	lea    0x8(%ebx),%edx
+80105beb:	39 d0                	cmp    %edx,%eax
+80105bed:	72 11                	jb     80105c00 <argint+0x40>
+  *ip = *(int*)(addr);
+80105bef:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105bf2:	8b 53 04             	mov    0x4(%ebx),%edx
+80105bf5:	89 10                	mov    %edx,(%eax)
+  return 0;
+80105bf7:	31 c0                	xor    %eax,%eax
+}
+80105bf9:	5b                   	pop    %ebx
+80105bfa:	5e                   	pop    %esi
+80105bfb:	5d                   	pop    %ebp
+80105bfc:	c3                   	ret    
+80105bfd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105c00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80105c05:	eb f2                	jmp    80105bf9 <argint+0x39>
+80105c07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c0e:	66 90                	xchg   %ax,%ax
+
+80105c10 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+80105c10:	f3 0f 1e fb          	endbr32 
+80105c14:	55                   	push   %ebp
+80105c15:	89 e5                	mov    %esp,%ebp
+80105c17:	56                   	push   %esi
+80105c18:	53                   	push   %ebx
+80105c19:	83 ec 10             	sub    $0x10,%esp
+80105c1c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int i;
+  struct proc *curproc = myproc();
+80105c1f:	e8 5c e9 ff ff       	call   80104580 <myproc>
+ 
+  if(argint(n, &i) < 0)
+80105c24:	83 ec 08             	sub    $0x8,%esp
+  struct proc *curproc = myproc();
+80105c27:	89 c6                	mov    %eax,%esi
+  if(argint(n, &i) < 0)
+80105c29:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105c2c:	50                   	push   %eax
+80105c2d:	ff 75 08             	pushl  0x8(%ebp)
+80105c30:	e8 8b ff ff ff       	call   80105bc0 <argint>
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+80105c35:	83 c4 10             	add    $0x10,%esp
+80105c38:	85 c0                	test   %eax,%eax
+80105c3a:	78 24                	js     80105c60 <argptr+0x50>
+80105c3c:	85 db                	test   %ebx,%ebx
+80105c3e:	78 20                	js     80105c60 <argptr+0x50>
+80105c40:	8b 16                	mov    (%esi),%edx
+80105c42:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105c45:	39 c2                	cmp    %eax,%edx
+80105c47:	76 17                	jbe    80105c60 <argptr+0x50>
+80105c49:	01 c3                	add    %eax,%ebx
+80105c4b:	39 da                	cmp    %ebx,%edx
+80105c4d:	72 11                	jb     80105c60 <argptr+0x50>
+    return -1;
+  *pp = (char*)i;
+80105c4f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80105c52:	89 02                	mov    %eax,(%edx)
+  return 0;
+80105c54:	31 c0                	xor    %eax,%eax
+}
+80105c56:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105c59:	5b                   	pop    %ebx
+80105c5a:	5e                   	pop    %esi
+80105c5b:	5d                   	pop    %ebp
+80105c5c:	c3                   	ret    
+80105c5d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105c60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105c65:	eb ef                	jmp    80105c56 <argptr+0x46>
+80105c67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c6e:	66 90                	xchg   %ax,%ax
+
+80105c70 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+80105c70:	f3 0f 1e fb          	endbr32 
+80105c74:	55                   	push   %ebp
+80105c75:	89 e5                	mov    %esp,%ebp
+80105c77:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+  if(argint(n, &addr) < 0)
+80105c7a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105c7d:	50                   	push   %eax
+80105c7e:	ff 75 08             	pushl  0x8(%ebp)
+80105c81:	e8 3a ff ff ff       	call   80105bc0 <argint>
+80105c86:	83 c4 10             	add    $0x10,%esp
+80105c89:	85 c0                	test   %eax,%eax
+80105c8b:	78 13                	js     80105ca0 <argstr+0x30>
+    return -1;
+  return fetchstr(addr, pp);
+80105c8d:	83 ec 08             	sub    $0x8,%esp
+80105c90:	ff 75 0c             	pushl  0xc(%ebp)
+80105c93:	ff 75 f4             	pushl  -0xc(%ebp)
+80105c96:	e8 c5 fe ff ff       	call   80105b60 <fetchstr>
+80105c9b:	83 c4 10             	add    $0x10,%esp
+}
+80105c9e:	c9                   	leave  
+80105c9f:	c3                   	ret    
+80105ca0:	c9                   	leave  
+    return -1;
+80105ca1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105ca6:	c3                   	ret    
+80105ca7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cae:	66 90                	xchg   %ax,%ax
+
+80105cb0 <syscall>:
+[SYS_yield2]  sys_yield2,
+};
+
+void
+syscall(void)
+{
+80105cb0:	f3 0f 1e fb          	endbr32 
+80105cb4:	55                   	push   %ebp
+80105cb5:	89 e5                	mov    %esp,%ebp
+80105cb7:	53                   	push   %ebx
+80105cb8:	83 ec 04             	sub    $0x4,%esp
+  int num;
+  struct proc *curproc = myproc();
+80105cbb:	e8 c0 e8 ff ff       	call   80104580 <myproc>
+80105cc0:	89 c3                	mov    %eax,%ebx
+
+  num = curproc->tf->eax;
+80105cc2:	8b 40 18             	mov    0x18(%eax),%eax
+80105cc5:	8b 40 1c             	mov    0x1c(%eax),%eax
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+80105cc8:	8d 50 ff             	lea    -0x1(%eax),%edx
+80105ccb:	83 fa 19             	cmp    $0x19,%edx
+80105cce:	77 20                	ja     80105cf0 <syscall+0x40>
+80105cd0:	8b 14 85 00 8c 10 80 	mov    -0x7fef7400(,%eax,4),%edx
+80105cd7:	85 d2                	test   %edx,%edx
+80105cd9:	74 15                	je     80105cf0 <syscall+0x40>
+    curproc->tf->eax = syscalls[num]();
+80105cdb:	ff d2                	call   *%edx
+80105cdd:	89 c2                	mov    %eax,%edx
+80105cdf:	8b 43 18             	mov    0x18(%ebx),%eax
+80105ce2:	89 50 1c             	mov    %edx,0x1c(%eax)
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+  }
+}
+80105ce5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105ce8:	c9                   	leave  
+80105ce9:	c3                   	ret    
+80105cea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cprintf("%d %s: unknown sys call %d\n",
+80105cf0:	50                   	push   %eax
+            curproc->pid, curproc->name, num);
+80105cf1:	8d 43 6c             	lea    0x6c(%ebx),%eax
+    cprintf("%d %s: unknown sys call %d\n",
+80105cf4:	50                   	push   %eax
+80105cf5:	ff 73 10             	pushl  0x10(%ebx)
+80105cf8:	68 dd 8b 10 80       	push   $0x80108bdd
+80105cfd:	e8 ee a9 ff ff       	call   801006f0 <cprintf>
+    curproc->tf->eax = -1;
+80105d02:	8b 43 18             	mov    0x18(%ebx),%eax
+80105d05:	83 c4 10             	add    $0x10,%esp
+80105d08:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80105d0f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105d12:	c9                   	leave  
+80105d13:	c3                   	ret    
+80105d14:	66 90                	xchg   %ax,%ax
+80105d16:	66 90                	xchg   %ax,%ax
+80105d18:	66 90                	xchg   %ax,%ax
+80105d1a:	66 90                	xchg   %ax,%ax
+80105d1c:	66 90                	xchg   %ax,%ax
+80105d1e:	66 90                	xchg   %ax,%ax
+
+80105d20 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+80105d20:	55                   	push   %ebp
+80105d21:	89 e5                	mov    %esp,%ebp
+80105d23:	57                   	push   %edi
+80105d24:	56                   	push   %esi
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+80105d25:	8d 7d da             	lea    -0x26(%ebp),%edi
+{
+80105d28:	53                   	push   %ebx
+80105d29:	83 ec 34             	sub    $0x34,%esp
+80105d2c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80105d2f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  if((dp = nameiparent(path, name)) == 0)
+80105d32:	57                   	push   %edi
+80105d33:	50                   	push   %eax
+{
+80105d34:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80105d37:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  if((dp = nameiparent(path, name)) == 0)
+80105d3a:	e8 01 cd ff ff       	call   80102a40 <nameiparent>
+80105d3f:	83 c4 10             	add    $0x10,%esp
+80105d42:	85 c0                	test   %eax,%eax
+80105d44:	0f 84 46 01 00 00    	je     80105e90 <create+0x170>
+    return 0;
+  ilock(dp);
+80105d4a:	83 ec 0c             	sub    $0xc,%esp
+80105d4d:	89 c3                	mov    %eax,%ebx
+80105d4f:	50                   	push   %eax
+80105d50:	e8 fb c3 ff ff       	call   80102150 <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80105d55:	83 c4 0c             	add    $0xc,%esp
+80105d58:	6a 00                	push   $0x0
+80105d5a:	57                   	push   %edi
+80105d5b:	53                   	push   %ebx
+80105d5c:	e8 3f c9 ff ff       	call   801026a0 <dirlookup>
+80105d61:	83 c4 10             	add    $0x10,%esp
+80105d64:	89 c6                	mov    %eax,%esi
+80105d66:	85 c0                	test   %eax,%eax
+80105d68:	74 56                	je     80105dc0 <create+0xa0>
+    iunlockput(dp);
+80105d6a:	83 ec 0c             	sub    $0xc,%esp
+80105d6d:	53                   	push   %ebx
+80105d6e:	e8 7d c6 ff ff       	call   801023f0 <iunlockput>
+    ilock(ip);
+80105d73:	89 34 24             	mov    %esi,(%esp)
+80105d76:	e8 d5 c3 ff ff       	call   80102150 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+80105d7b:	83 c4 10             	add    $0x10,%esp
+80105d7e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80105d83:	75 1b                	jne    80105da0 <create+0x80>
+80105d85:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80105d8a:	75 14                	jne    80105da0 <create+0x80>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+80105d8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105d8f:	89 f0                	mov    %esi,%eax
+80105d91:	5b                   	pop    %ebx
+80105d92:	5e                   	pop    %esi
+80105d93:	5f                   	pop    %edi
+80105d94:	5d                   	pop    %ebp
+80105d95:	c3                   	ret    
+80105d96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d9d:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(ip);
+80105da0:	83 ec 0c             	sub    $0xc,%esp
+80105da3:	56                   	push   %esi
+    return 0;
+80105da4:	31 f6                	xor    %esi,%esi
+    iunlockput(ip);
+80105da6:	e8 45 c6 ff ff       	call   801023f0 <iunlockput>
+    return 0;
+80105dab:	83 c4 10             	add    $0x10,%esp
+}
+80105dae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105db1:	89 f0                	mov    %esi,%eax
+80105db3:	5b                   	pop    %ebx
+80105db4:	5e                   	pop    %esi
+80105db5:	5f                   	pop    %edi
+80105db6:	5d                   	pop    %ebp
+80105db7:	c3                   	ret    
+80105db8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105dbf:	90                   	nop
+  if((ip = ialloc(dp->dev, type)) == 0)
+80105dc0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80105dc4:	83 ec 08             	sub    $0x8,%esp
+80105dc7:	50                   	push   %eax
+80105dc8:	ff 33                	pushl  (%ebx)
+80105dca:	e8 01 c2 ff ff       	call   80101fd0 <ialloc>
+80105dcf:	83 c4 10             	add    $0x10,%esp
+80105dd2:	89 c6                	mov    %eax,%esi
+80105dd4:	85 c0                	test   %eax,%eax
+80105dd6:	0f 84 cd 00 00 00    	je     80105ea9 <create+0x189>
+  ilock(ip);
+80105ddc:	83 ec 0c             	sub    $0xc,%esp
+80105ddf:	50                   	push   %eax
+80105de0:	e8 6b c3 ff ff       	call   80102150 <ilock>
+  ip->major = major;
+80105de5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80105de9:	66 89 46 52          	mov    %ax,0x52(%esi)
+  ip->minor = minor;
+80105ded:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80105df1:	66 89 46 54          	mov    %ax,0x54(%esi)
+  ip->nlink = 1;
+80105df5:	b8 01 00 00 00       	mov    $0x1,%eax
+80105dfa:	66 89 46 56          	mov    %ax,0x56(%esi)
+  iupdate(ip);
+80105dfe:	89 34 24             	mov    %esi,(%esp)
+80105e01:	e8 8a c2 ff ff       	call   80102090 <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+80105e06:	83 c4 10             	add    $0x10,%esp
+80105e09:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80105e0e:	74 30                	je     80105e40 <create+0x120>
+  if(dirlink(dp, name, ip->inum) < 0)
+80105e10:	83 ec 04             	sub    $0x4,%esp
+80105e13:	ff 76 04             	pushl  0x4(%esi)
+80105e16:	57                   	push   %edi
+80105e17:	53                   	push   %ebx
+80105e18:	e8 43 cb ff ff       	call   80102960 <dirlink>
+80105e1d:	83 c4 10             	add    $0x10,%esp
+80105e20:	85 c0                	test   %eax,%eax
+80105e22:	78 78                	js     80105e9c <create+0x17c>
+  iunlockput(dp);
+80105e24:	83 ec 0c             	sub    $0xc,%esp
+80105e27:	53                   	push   %ebx
+80105e28:	e8 c3 c5 ff ff       	call   801023f0 <iunlockput>
+  return ip;
+80105e2d:	83 c4 10             	add    $0x10,%esp
+}
+80105e30:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105e33:	89 f0                	mov    %esi,%eax
+80105e35:	5b                   	pop    %ebx
+80105e36:	5e                   	pop    %esi
+80105e37:	5f                   	pop    %edi
+80105e38:	5d                   	pop    %ebp
+80105e39:	c3                   	ret    
+80105e3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iupdate(dp);
+80105e40:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink++;  // for ".."
+80105e43:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+    iupdate(dp);
+80105e48:	53                   	push   %ebx
+80105e49:	e8 42 c2 ff ff       	call   80102090 <iupdate>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+80105e4e:	83 c4 0c             	add    $0xc,%esp
+80105e51:	ff 76 04             	pushl  0x4(%esi)
+80105e54:	68 88 8c 10 80       	push   $0x80108c88
+80105e59:	56                   	push   %esi
+80105e5a:	e8 01 cb ff ff       	call   80102960 <dirlink>
+80105e5f:	83 c4 10             	add    $0x10,%esp
+80105e62:	85 c0                	test   %eax,%eax
+80105e64:	78 18                	js     80105e7e <create+0x15e>
+80105e66:	83 ec 04             	sub    $0x4,%esp
+80105e69:	ff 73 04             	pushl  0x4(%ebx)
+80105e6c:	68 87 8c 10 80       	push   $0x80108c87
+80105e71:	56                   	push   %esi
+80105e72:	e8 e9 ca ff ff       	call   80102960 <dirlink>
+80105e77:	83 c4 10             	add    $0x10,%esp
+80105e7a:	85 c0                	test   %eax,%eax
+80105e7c:	79 92                	jns    80105e10 <create+0xf0>
+      panic("create dots");
+80105e7e:	83 ec 0c             	sub    $0xc,%esp
+80105e81:	68 7b 8c 10 80       	push   $0x80108c7b
+80105e86:	e8 05 a5 ff ff       	call   80100390 <panic>
+80105e8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105e8f:	90                   	nop
+}
+80105e90:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80105e93:	31 f6                	xor    %esi,%esi
+}
+80105e95:	5b                   	pop    %ebx
+80105e96:	89 f0                	mov    %esi,%eax
+80105e98:	5e                   	pop    %esi
+80105e99:	5f                   	pop    %edi
+80105e9a:	5d                   	pop    %ebp
+80105e9b:	c3                   	ret    
+    panic("create: dirlink");
+80105e9c:	83 ec 0c             	sub    $0xc,%esp
+80105e9f:	68 8a 8c 10 80       	push   $0x80108c8a
+80105ea4:	e8 e7 a4 ff ff       	call   80100390 <panic>
+    panic("create: ialloc");
+80105ea9:	83 ec 0c             	sub    $0xc,%esp
+80105eac:	68 6c 8c 10 80       	push   $0x80108c6c
+80105eb1:	e8 da a4 ff ff       	call   80100390 <panic>
+80105eb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105ebd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105ec0 <argfd.constprop.0>:
+argfd(int n, int *pfd, struct file **pf)
+80105ec0:	55                   	push   %ebp
+80105ec1:	89 e5                	mov    %esp,%ebp
+80105ec3:	56                   	push   %esi
+80105ec4:	89 d6                	mov    %edx,%esi
+80105ec6:	53                   	push   %ebx
+80105ec7:	89 c3                	mov    %eax,%ebx
+  if(argint(n, &fd) < 0)
+80105ec9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+argfd(int n, int *pfd, struct file **pf)
+80105ecc:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+80105ecf:	50                   	push   %eax
+80105ed0:	6a 00                	push   $0x0
+80105ed2:	e8 e9 fc ff ff       	call   80105bc0 <argint>
+80105ed7:	83 c4 10             	add    $0x10,%esp
+80105eda:	85 c0                	test   %eax,%eax
+80105edc:	78 2a                	js     80105f08 <argfd.constprop.0+0x48>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+80105ede:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105ee2:	77 24                	ja     80105f08 <argfd.constprop.0+0x48>
+80105ee4:	e8 97 e6 ff ff       	call   80104580 <myproc>
+80105ee9:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105eec:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80105ef0:	85 c0                	test   %eax,%eax
+80105ef2:	74 14                	je     80105f08 <argfd.constprop.0+0x48>
+  if(pfd)
+80105ef4:	85 db                	test   %ebx,%ebx
+80105ef6:	74 02                	je     80105efa <argfd.constprop.0+0x3a>
+    *pfd = fd;
+80105ef8:	89 13                	mov    %edx,(%ebx)
+    *pf = f;
+80105efa:	89 06                	mov    %eax,(%esi)
+  return 0;
+80105efc:	31 c0                	xor    %eax,%eax
+}
+80105efe:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105f01:	5b                   	pop    %ebx
+80105f02:	5e                   	pop    %esi
+80105f03:	5d                   	pop    %ebp
+80105f04:	c3                   	ret    
+80105f05:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105f08:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105f0d:	eb ef                	jmp    80105efe <argfd.constprop.0+0x3e>
+80105f0f:	90                   	nop
+
+80105f10 <sys_dup>:
+{
+80105f10:	f3 0f 1e fb          	endbr32 
+80105f14:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0)
+80105f15:	31 c0                	xor    %eax,%eax
+{
+80105f17:	89 e5                	mov    %esp,%ebp
+80105f19:	56                   	push   %esi
+80105f1a:	53                   	push   %ebx
+  if(argfd(0, 0, &f) < 0)
+80105f1b:	8d 55 f4             	lea    -0xc(%ebp),%edx
+{
+80105f1e:	83 ec 10             	sub    $0x10,%esp
+  if(argfd(0, 0, &f) < 0)
+80105f21:	e8 9a ff ff ff       	call   80105ec0 <argfd.constprop.0>
+80105f26:	85 c0                	test   %eax,%eax
+80105f28:	78 1e                	js     80105f48 <sys_dup+0x38>
+  if((fd=fdalloc(f)) < 0)
+80105f2a:	8b 75 f4             	mov    -0xc(%ebp),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+80105f2d:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+80105f2f:	e8 4c e6 ff ff       	call   80104580 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+80105f34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd] == 0){
+80105f38:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105f3c:	85 d2                	test   %edx,%edx
+80105f3e:	74 20                	je     80105f60 <sys_dup+0x50>
+  for(fd = 0; fd < NOFILE; fd++){
+80105f40:	83 c3 01             	add    $0x1,%ebx
+80105f43:	83 fb 10             	cmp    $0x10,%ebx
+80105f46:	75 f0                	jne    80105f38 <sys_dup+0x28>
+}
+80105f48:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80105f4b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80105f50:	89 d8                	mov    %ebx,%eax
+80105f52:	5b                   	pop    %ebx
+80105f53:	5e                   	pop    %esi
+80105f54:	5d                   	pop    %ebp
+80105f55:	c3                   	ret    
+80105f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f5d:	8d 76 00             	lea    0x0(%esi),%esi
+      curproc->ofile[fd] = f;
+80105f60:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+  filedup(f);
+80105f64:	83 ec 0c             	sub    $0xc,%esp
+80105f67:	ff 75 f4             	pushl  -0xc(%ebp)
+80105f6a:	e8 f1 b8 ff ff       	call   80101860 <filedup>
+  return fd;
+80105f6f:	83 c4 10             	add    $0x10,%esp
+}
+80105f72:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105f75:	89 d8                	mov    %ebx,%eax
+80105f77:	5b                   	pop    %ebx
+80105f78:	5e                   	pop    %esi
+80105f79:	5d                   	pop    %ebp
+80105f7a:	c3                   	ret    
+80105f7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105f7f:	90                   	nop
+
+80105f80 <sys_read>:
+{
+80105f80:	f3 0f 1e fb          	endbr32 
+80105f84:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80105f85:	31 c0                	xor    %eax,%eax
+{
+80105f87:	89 e5                	mov    %esp,%ebp
+80105f89:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80105f8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80105f8f:	e8 2c ff ff ff       	call   80105ec0 <argfd.constprop.0>
+80105f94:	85 c0                	test   %eax,%eax
+80105f96:	78 48                	js     80105fe0 <sys_read+0x60>
+80105f98:	83 ec 08             	sub    $0x8,%esp
+80105f9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105f9e:	50                   	push   %eax
+80105f9f:	6a 02                	push   $0x2
+80105fa1:	e8 1a fc ff ff       	call   80105bc0 <argint>
+80105fa6:	83 c4 10             	add    $0x10,%esp
+80105fa9:	85 c0                	test   %eax,%eax
+80105fab:	78 33                	js     80105fe0 <sys_read+0x60>
+80105fad:	83 ec 04             	sub    $0x4,%esp
+80105fb0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105fb3:	ff 75 f0             	pushl  -0x10(%ebp)
+80105fb6:	50                   	push   %eax
+80105fb7:	6a 01                	push   $0x1
+80105fb9:	e8 52 fc ff ff       	call   80105c10 <argptr>
+80105fbe:	83 c4 10             	add    $0x10,%esp
+80105fc1:	85 c0                	test   %eax,%eax
+80105fc3:	78 1b                	js     80105fe0 <sys_read+0x60>
+  return fileread(f, p, n);
+80105fc5:	83 ec 04             	sub    $0x4,%esp
+80105fc8:	ff 75 f0             	pushl  -0x10(%ebp)
+80105fcb:	ff 75 f4             	pushl  -0xc(%ebp)
+80105fce:	ff 75 ec             	pushl  -0x14(%ebp)
+80105fd1:	e8 0a ba ff ff       	call   801019e0 <fileread>
+80105fd6:	83 c4 10             	add    $0x10,%esp
+}
+80105fd9:	c9                   	leave  
+80105fda:	c3                   	ret    
+80105fdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105fdf:	90                   	nop
+80105fe0:	c9                   	leave  
+    return -1;
+80105fe1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105fe6:	c3                   	ret    
+80105fe7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105fee:	66 90                	xchg   %ax,%ax
+
+80105ff0 <sys_write>:
+{
+80105ff0:	f3 0f 1e fb          	endbr32 
+80105ff4:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80105ff5:	31 c0                	xor    %eax,%eax
+{
+80105ff7:	89 e5                	mov    %esp,%ebp
+80105ff9:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80105ffc:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80105fff:	e8 bc fe ff ff       	call   80105ec0 <argfd.constprop.0>
+80106004:	85 c0                	test   %eax,%eax
+80106006:	78 48                	js     80106050 <sys_write+0x60>
+80106008:	83 ec 08             	sub    $0x8,%esp
+8010600b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010600e:	50                   	push   %eax
+8010600f:	6a 02                	push   $0x2
+80106011:	e8 aa fb ff ff       	call   80105bc0 <argint>
+80106016:	83 c4 10             	add    $0x10,%esp
+80106019:	85 c0                	test   %eax,%eax
+8010601b:	78 33                	js     80106050 <sys_write+0x60>
+8010601d:	83 ec 04             	sub    $0x4,%esp
+80106020:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106023:	ff 75 f0             	pushl  -0x10(%ebp)
+80106026:	50                   	push   %eax
+80106027:	6a 01                	push   $0x1
+80106029:	e8 e2 fb ff ff       	call   80105c10 <argptr>
+8010602e:	83 c4 10             	add    $0x10,%esp
+80106031:	85 c0                	test   %eax,%eax
+80106033:	78 1b                	js     80106050 <sys_write+0x60>
+  return filewrite(f, p, n);
+80106035:	83 ec 04             	sub    $0x4,%esp
+80106038:	ff 75 f0             	pushl  -0x10(%ebp)
+8010603b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010603e:	ff 75 ec             	pushl  -0x14(%ebp)
+80106041:	e8 3a ba ff ff       	call   80101a80 <filewrite>
+80106046:	83 c4 10             	add    $0x10,%esp
+}
+80106049:	c9                   	leave  
+8010604a:	c3                   	ret    
+8010604b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010604f:	90                   	nop
+80106050:	c9                   	leave  
+    return -1;
+80106051:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106056:	c3                   	ret    
+80106057:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010605e:	66 90                	xchg   %ax,%ax
+
+80106060 <sys_close>:
+{
+80106060:	f3 0f 1e fb          	endbr32 
+80106064:	55                   	push   %ebp
+80106065:	89 e5                	mov    %esp,%ebp
+80106067:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, &fd, &f) < 0)
+8010606a:	8d 55 f4             	lea    -0xc(%ebp),%edx
+8010606d:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106070:	e8 4b fe ff ff       	call   80105ec0 <argfd.constprop.0>
+80106075:	85 c0                	test   %eax,%eax
+80106077:	78 27                	js     801060a0 <sys_close+0x40>
+  myproc()->ofile[fd] = 0;
+80106079:	e8 02 e5 ff ff       	call   80104580 <myproc>
+8010607e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  fileclose(f);
+80106081:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80106084:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+8010608b:	00 
+  fileclose(f);
+8010608c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010608f:	e8 1c b8 ff ff       	call   801018b0 <fileclose>
+  return 0;
+80106094:	83 c4 10             	add    $0x10,%esp
+80106097:	31 c0                	xor    %eax,%eax
+}
+80106099:	c9                   	leave  
+8010609a:	c3                   	ret    
+8010609b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010609f:	90                   	nop
+801060a0:	c9                   	leave  
+    return -1;
+801060a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801060a6:	c3                   	ret    
+801060a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060ae:	66 90                	xchg   %ax,%ax
+
+801060b0 <sys_fstat>:
+{
+801060b0:	f3 0f 1e fb          	endbr32 
+801060b4:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+801060b5:	31 c0                	xor    %eax,%eax
+{
+801060b7:	89 e5                	mov    %esp,%ebp
+801060b9:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+801060bc:	8d 55 f0             	lea    -0x10(%ebp),%edx
+801060bf:	e8 fc fd ff ff       	call   80105ec0 <argfd.constprop.0>
+801060c4:	85 c0                	test   %eax,%eax
+801060c6:	78 30                	js     801060f8 <sys_fstat+0x48>
+801060c8:	83 ec 04             	sub    $0x4,%esp
+801060cb:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801060ce:	6a 14                	push   $0x14
+801060d0:	50                   	push   %eax
+801060d1:	6a 01                	push   $0x1
+801060d3:	e8 38 fb ff ff       	call   80105c10 <argptr>
+801060d8:	83 c4 10             	add    $0x10,%esp
+801060db:	85 c0                	test   %eax,%eax
+801060dd:	78 19                	js     801060f8 <sys_fstat+0x48>
+  return filestat(f, st);
+801060df:	83 ec 08             	sub    $0x8,%esp
+801060e2:	ff 75 f4             	pushl  -0xc(%ebp)
+801060e5:	ff 75 f0             	pushl  -0x10(%ebp)
+801060e8:	e8 a3 b8 ff ff       	call   80101990 <filestat>
+801060ed:	83 c4 10             	add    $0x10,%esp
+}
+801060f0:	c9                   	leave  
+801060f1:	c3                   	ret    
+801060f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801060f8:	c9                   	leave  
+    return -1;
+801060f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801060fe:	c3                   	ret    
+801060ff:	90                   	nop
+
+80106100 <sys_link>:
+{
+80106100:	f3 0f 1e fb          	endbr32 
+80106104:	55                   	push   %ebp
+80106105:	89 e5                	mov    %esp,%ebp
+80106107:	57                   	push   %edi
+80106108:	56                   	push   %esi
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80106109:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+{
+8010610c:	53                   	push   %ebx
+8010610d:	83 ec 34             	sub    $0x34,%esp
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80106110:	50                   	push   %eax
+80106111:	6a 00                	push   $0x0
+80106113:	e8 58 fb ff ff       	call   80105c70 <argstr>
+80106118:	83 c4 10             	add    $0x10,%esp
+8010611b:	85 c0                	test   %eax,%eax
+8010611d:	0f 88 ff 00 00 00    	js     80106222 <sys_link+0x122>
+80106123:	83 ec 08             	sub    $0x8,%esp
+80106126:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80106129:	50                   	push   %eax
+8010612a:	6a 01                	push   $0x1
+8010612c:	e8 3f fb ff ff       	call   80105c70 <argstr>
+80106131:	83 c4 10             	add    $0x10,%esp
+80106134:	85 c0                	test   %eax,%eax
+80106136:	0f 88 e6 00 00 00    	js     80106222 <sys_link+0x122>
+  begin_op();
+8010613c:	e8 df d5 ff ff       	call   80103720 <begin_op>
+  if((ip = namei(old)) == 0){
+80106141:	83 ec 0c             	sub    $0xc,%esp
+80106144:	ff 75 d4             	pushl  -0x2c(%ebp)
+80106147:	e8 d4 c8 ff ff       	call   80102a20 <namei>
+8010614c:	83 c4 10             	add    $0x10,%esp
+8010614f:	89 c3                	mov    %eax,%ebx
+80106151:	85 c0                	test   %eax,%eax
+80106153:	0f 84 e8 00 00 00    	je     80106241 <sys_link+0x141>
+  ilock(ip);
+80106159:	83 ec 0c             	sub    $0xc,%esp
+8010615c:	50                   	push   %eax
+8010615d:	e8 ee bf ff ff       	call   80102150 <ilock>
+  if(ip->type == T_DIR){
+80106162:	83 c4 10             	add    $0x10,%esp
+80106165:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+8010616a:	0f 84 b9 00 00 00    	je     80106229 <sys_link+0x129>
+  iupdate(ip);
+80106170:	83 ec 0c             	sub    $0xc,%esp
+  ip->nlink++;
+80106173:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+  if((dp = nameiparent(new, name)) == 0)
+80106178:	8d 7d da             	lea    -0x26(%ebp),%edi
+  iupdate(ip);
+8010617b:	53                   	push   %ebx
+8010617c:	e8 0f bf ff ff       	call   80102090 <iupdate>
+  iunlock(ip);
+80106181:	89 1c 24             	mov    %ebx,(%esp)
+80106184:	e8 a7 c0 ff ff       	call   80102230 <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+80106189:	58                   	pop    %eax
+8010618a:	5a                   	pop    %edx
+8010618b:	57                   	push   %edi
+8010618c:	ff 75 d0             	pushl  -0x30(%ebp)
+8010618f:	e8 ac c8 ff ff       	call   80102a40 <nameiparent>
+80106194:	83 c4 10             	add    $0x10,%esp
+80106197:	89 c6                	mov    %eax,%esi
+80106199:	85 c0                	test   %eax,%eax
+8010619b:	74 5f                	je     801061fc <sys_link+0xfc>
+  ilock(dp);
+8010619d:	83 ec 0c             	sub    $0xc,%esp
+801061a0:	50                   	push   %eax
+801061a1:	e8 aa bf ff ff       	call   80102150 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+801061a6:	8b 03                	mov    (%ebx),%eax
+801061a8:	83 c4 10             	add    $0x10,%esp
+801061ab:	39 06                	cmp    %eax,(%esi)
+801061ad:	75 41                	jne    801061f0 <sys_link+0xf0>
+801061af:	83 ec 04             	sub    $0x4,%esp
+801061b2:	ff 73 04             	pushl  0x4(%ebx)
+801061b5:	57                   	push   %edi
+801061b6:	56                   	push   %esi
+801061b7:	e8 a4 c7 ff ff       	call   80102960 <dirlink>
+801061bc:	83 c4 10             	add    $0x10,%esp
+801061bf:	85 c0                	test   %eax,%eax
+801061c1:	78 2d                	js     801061f0 <sys_link+0xf0>
+  iunlockput(dp);
+801061c3:	83 ec 0c             	sub    $0xc,%esp
+801061c6:	56                   	push   %esi
+801061c7:	e8 24 c2 ff ff       	call   801023f0 <iunlockput>
+  iput(ip);
+801061cc:	89 1c 24             	mov    %ebx,(%esp)
+801061cf:	e8 ac c0 ff ff       	call   80102280 <iput>
+  end_op();
+801061d4:	e8 b7 d5 ff ff       	call   80103790 <end_op>
+  return 0;
+801061d9:	83 c4 10             	add    $0x10,%esp
+801061dc:	31 c0                	xor    %eax,%eax
+}
+801061de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801061e1:	5b                   	pop    %ebx
+801061e2:	5e                   	pop    %esi
+801061e3:	5f                   	pop    %edi
+801061e4:	5d                   	pop    %ebp
+801061e5:	c3                   	ret    
+801061e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801061ed:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(dp);
+801061f0:	83 ec 0c             	sub    $0xc,%esp
+801061f3:	56                   	push   %esi
+801061f4:	e8 f7 c1 ff ff       	call   801023f0 <iunlockput>
+    goto bad;
+801061f9:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+801061fc:	83 ec 0c             	sub    $0xc,%esp
+801061ff:	53                   	push   %ebx
+80106200:	e8 4b bf ff ff       	call   80102150 <ilock>
+  ip->nlink--;
+80106205:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+8010620a:	89 1c 24             	mov    %ebx,(%esp)
+8010620d:	e8 7e be ff ff       	call   80102090 <iupdate>
+  iunlockput(ip);
+80106212:	89 1c 24             	mov    %ebx,(%esp)
+80106215:	e8 d6 c1 ff ff       	call   801023f0 <iunlockput>
+  end_op();
+8010621a:	e8 71 d5 ff ff       	call   80103790 <end_op>
+  return -1;
+8010621f:	83 c4 10             	add    $0x10,%esp
+80106222:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106227:	eb b5                	jmp    801061de <sys_link+0xde>
+    iunlockput(ip);
+80106229:	83 ec 0c             	sub    $0xc,%esp
+8010622c:	53                   	push   %ebx
+8010622d:	e8 be c1 ff ff       	call   801023f0 <iunlockput>
+    end_op();
+80106232:	e8 59 d5 ff ff       	call   80103790 <end_op>
+    return -1;
+80106237:	83 c4 10             	add    $0x10,%esp
+8010623a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010623f:	eb 9d                	jmp    801061de <sys_link+0xde>
+    end_op();
+80106241:	e8 4a d5 ff ff       	call   80103790 <end_op>
+    return -1;
+80106246:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010624b:	eb 91                	jmp    801061de <sys_link+0xde>
+8010624d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106250 <sys_unlink>:
+{
+80106250:	f3 0f 1e fb          	endbr32 
+80106254:	55                   	push   %ebp
+80106255:	89 e5                	mov    %esp,%ebp
+80106257:	57                   	push   %edi
+80106258:	56                   	push   %esi
+  if(argstr(0, &path) < 0)
+80106259:	8d 45 c0             	lea    -0x40(%ebp),%eax
+{
+8010625c:	53                   	push   %ebx
+8010625d:	83 ec 54             	sub    $0x54,%esp
+  if(argstr(0, &path) < 0)
+80106260:	50                   	push   %eax
+80106261:	6a 00                	push   $0x0
+80106263:	e8 08 fa ff ff       	call   80105c70 <argstr>
+80106268:	83 c4 10             	add    $0x10,%esp
+8010626b:	85 c0                	test   %eax,%eax
+8010626d:	0f 88 7d 01 00 00    	js     801063f0 <sys_unlink+0x1a0>
+  begin_op();
+80106273:	e8 a8 d4 ff ff       	call   80103720 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+80106278:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+8010627b:	83 ec 08             	sub    $0x8,%esp
+8010627e:	53                   	push   %ebx
+8010627f:	ff 75 c0             	pushl  -0x40(%ebp)
+80106282:	e8 b9 c7 ff ff       	call   80102a40 <nameiparent>
+80106287:	83 c4 10             	add    $0x10,%esp
+8010628a:	89 c6                	mov    %eax,%esi
+8010628c:	85 c0                	test   %eax,%eax
+8010628e:	0f 84 66 01 00 00    	je     801063fa <sys_unlink+0x1aa>
+  ilock(dp);
+80106294:	83 ec 0c             	sub    $0xc,%esp
+80106297:	50                   	push   %eax
+80106298:	e8 b3 be ff ff       	call   80102150 <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+8010629d:	58                   	pop    %eax
+8010629e:	5a                   	pop    %edx
+8010629f:	68 88 8c 10 80       	push   $0x80108c88
+801062a4:	53                   	push   %ebx
+801062a5:	e8 d6 c3 ff ff       	call   80102680 <namecmp>
+801062aa:	83 c4 10             	add    $0x10,%esp
+801062ad:	85 c0                	test   %eax,%eax
+801062af:	0f 84 03 01 00 00    	je     801063b8 <sys_unlink+0x168>
+801062b5:	83 ec 08             	sub    $0x8,%esp
+801062b8:	68 87 8c 10 80       	push   $0x80108c87
+801062bd:	53                   	push   %ebx
+801062be:	e8 bd c3 ff ff       	call   80102680 <namecmp>
+801062c3:	83 c4 10             	add    $0x10,%esp
+801062c6:	85 c0                	test   %eax,%eax
+801062c8:	0f 84 ea 00 00 00    	je     801063b8 <sys_unlink+0x168>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+801062ce:	83 ec 04             	sub    $0x4,%esp
+801062d1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+801062d4:	50                   	push   %eax
+801062d5:	53                   	push   %ebx
+801062d6:	56                   	push   %esi
+801062d7:	e8 c4 c3 ff ff       	call   801026a0 <dirlookup>
+801062dc:	83 c4 10             	add    $0x10,%esp
+801062df:	89 c3                	mov    %eax,%ebx
+801062e1:	85 c0                	test   %eax,%eax
+801062e3:	0f 84 cf 00 00 00    	je     801063b8 <sys_unlink+0x168>
+  ilock(ip);
+801062e9:	83 ec 0c             	sub    $0xc,%esp
+801062ec:	50                   	push   %eax
+801062ed:	e8 5e be ff ff       	call   80102150 <ilock>
+  if(ip->nlink < 1)
+801062f2:	83 c4 10             	add    $0x10,%esp
+801062f5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801062fa:	0f 8e 23 01 00 00    	jle    80106423 <sys_unlink+0x1d3>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+80106300:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80106305:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80106308:	74 66                	je     80106370 <sys_unlink+0x120>
+  memset(&de, 0, sizeof(de));
+8010630a:	83 ec 04             	sub    $0x4,%esp
+8010630d:	6a 10                	push   $0x10
+8010630f:	6a 00                	push   $0x0
+80106311:	57                   	push   %edi
+80106312:	e8 c9 f5 ff ff       	call   801058e0 <memset>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80106317:	6a 10                	push   $0x10
+80106319:	ff 75 c4             	pushl  -0x3c(%ebp)
+8010631c:	57                   	push   %edi
+8010631d:	56                   	push   %esi
+8010631e:	e8 2d c2 ff ff       	call   80102550 <writei>
+80106323:	83 c4 20             	add    $0x20,%esp
+80106326:	83 f8 10             	cmp    $0x10,%eax
+80106329:	0f 85 e7 00 00 00    	jne    80106416 <sys_unlink+0x1c6>
+  if(ip->type == T_DIR){
+8010632f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80106334:	0f 84 96 00 00 00    	je     801063d0 <sys_unlink+0x180>
+  iunlockput(dp);
+8010633a:	83 ec 0c             	sub    $0xc,%esp
+8010633d:	56                   	push   %esi
+8010633e:	e8 ad c0 ff ff       	call   801023f0 <iunlockput>
+  ip->nlink--;
+80106343:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80106348:	89 1c 24             	mov    %ebx,(%esp)
+8010634b:	e8 40 bd ff ff       	call   80102090 <iupdate>
+  iunlockput(ip);
+80106350:	89 1c 24             	mov    %ebx,(%esp)
+80106353:	e8 98 c0 ff ff       	call   801023f0 <iunlockput>
+  end_op();
+80106358:	e8 33 d4 ff ff       	call   80103790 <end_op>
+  return 0;
+8010635d:	83 c4 10             	add    $0x10,%esp
+80106360:	31 c0                	xor    %eax,%eax
+}
+80106362:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106365:	5b                   	pop    %ebx
+80106366:	5e                   	pop    %esi
+80106367:	5f                   	pop    %edi
+80106368:	5d                   	pop    %ebp
+80106369:	c3                   	ret    
+8010636a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80106370:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80106374:	76 94                	jbe    8010630a <sys_unlink+0xba>
+80106376:	ba 20 00 00 00       	mov    $0x20,%edx
+8010637b:	eb 0b                	jmp    80106388 <sys_unlink+0x138>
+8010637d:	8d 76 00             	lea    0x0(%esi),%esi
+80106380:	83 c2 10             	add    $0x10,%edx
+80106383:	39 53 58             	cmp    %edx,0x58(%ebx)
+80106386:	76 82                	jbe    8010630a <sys_unlink+0xba>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80106388:	6a 10                	push   $0x10
+8010638a:	52                   	push   %edx
+8010638b:	57                   	push   %edi
+8010638c:	53                   	push   %ebx
+8010638d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80106390:	e8 bb c0 ff ff       	call   80102450 <readi>
+80106395:	83 c4 10             	add    $0x10,%esp
+80106398:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+8010639b:	83 f8 10             	cmp    $0x10,%eax
+8010639e:	75 69                	jne    80106409 <sys_unlink+0x1b9>
+    if(de.inum != 0)
+801063a0:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801063a5:	74 d9                	je     80106380 <sys_unlink+0x130>
+    iunlockput(ip);
+801063a7:	83 ec 0c             	sub    $0xc,%esp
+801063aa:	53                   	push   %ebx
+801063ab:	e8 40 c0 ff ff       	call   801023f0 <iunlockput>
+    goto bad;
+801063b0:	83 c4 10             	add    $0x10,%esp
+801063b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801063b7:	90                   	nop
+  iunlockput(dp);
+801063b8:	83 ec 0c             	sub    $0xc,%esp
+801063bb:	56                   	push   %esi
+801063bc:	e8 2f c0 ff ff       	call   801023f0 <iunlockput>
+  end_op();
+801063c1:	e8 ca d3 ff ff       	call   80103790 <end_op>
+  return -1;
+801063c6:	83 c4 10             	add    $0x10,%esp
+801063c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801063ce:	eb 92                	jmp    80106362 <sys_unlink+0x112>
+    iupdate(dp);
+801063d0:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink--;
+801063d3:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+    iupdate(dp);
+801063d8:	56                   	push   %esi
+801063d9:	e8 b2 bc ff ff       	call   80102090 <iupdate>
+801063de:	83 c4 10             	add    $0x10,%esp
+801063e1:	e9 54 ff ff ff       	jmp    8010633a <sys_unlink+0xea>
+801063e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801063ed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801063f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801063f5:	e9 68 ff ff ff       	jmp    80106362 <sys_unlink+0x112>
+    end_op();
+801063fa:	e8 91 d3 ff ff       	call   80103790 <end_op>
+    return -1;
+801063ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106404:	e9 59 ff ff ff       	jmp    80106362 <sys_unlink+0x112>
+      panic("isdirempty: readi");
+80106409:	83 ec 0c             	sub    $0xc,%esp
+8010640c:	68 ac 8c 10 80       	push   $0x80108cac
+80106411:	e8 7a 9f ff ff       	call   80100390 <panic>
+    panic("unlink: writei");
+80106416:	83 ec 0c             	sub    $0xc,%esp
+80106419:	68 be 8c 10 80       	push   $0x80108cbe
+8010641e:	e8 6d 9f ff ff       	call   80100390 <panic>
+    panic("unlink: nlink < 1");
+80106423:	83 ec 0c             	sub    $0xc,%esp
+80106426:	68 9a 8c 10 80       	push   $0x80108c9a
+8010642b:	e8 60 9f ff ff       	call   80100390 <panic>
+
+80106430 <sys_open>:
+
+int
+sys_open(void)
+{
+80106430:	f3 0f 1e fb          	endbr32 
+80106434:	55                   	push   %ebp
+80106435:	89 e5                	mov    %esp,%ebp
+80106437:	57                   	push   %edi
+80106438:	56                   	push   %esi
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+80106439:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+8010643c:	53                   	push   %ebx
+8010643d:	83 ec 24             	sub    $0x24,%esp
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+80106440:	50                   	push   %eax
+80106441:	6a 00                	push   $0x0
+80106443:	e8 28 f8 ff ff       	call   80105c70 <argstr>
+80106448:	83 c4 10             	add    $0x10,%esp
+8010644b:	85 c0                	test   %eax,%eax
+8010644d:	0f 88 8a 00 00 00    	js     801064dd <sys_open+0xad>
+80106453:	83 ec 08             	sub    $0x8,%esp
+80106456:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80106459:	50                   	push   %eax
+8010645a:	6a 01                	push   $0x1
+8010645c:	e8 5f f7 ff ff       	call   80105bc0 <argint>
+80106461:	83 c4 10             	add    $0x10,%esp
+80106464:	85 c0                	test   %eax,%eax
+80106466:	78 75                	js     801064dd <sys_open+0xad>
+    return -1;
+
+  begin_op();
+80106468:	e8 b3 d2 ff ff       	call   80103720 <begin_op>
+
+  if(omode & O_CREATE){
+8010646d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80106471:	75 75                	jne    801064e8 <sys_open+0xb8>
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+80106473:	83 ec 0c             	sub    $0xc,%esp
+80106476:	ff 75 e0             	pushl  -0x20(%ebp)
+80106479:	e8 a2 c5 ff ff       	call   80102a20 <namei>
+8010647e:	83 c4 10             	add    $0x10,%esp
+80106481:	89 c6                	mov    %eax,%esi
+80106483:	85 c0                	test   %eax,%eax
+80106485:	74 7e                	je     80106505 <sys_open+0xd5>
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+80106487:	83 ec 0c             	sub    $0xc,%esp
+8010648a:	50                   	push   %eax
+8010648b:	e8 c0 bc ff ff       	call   80102150 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80106490:	83 c4 10             	add    $0x10,%esp
+80106493:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80106498:	0f 84 c2 00 00 00    	je     80106560 <sys_open+0x130>
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+8010649e:	e8 4d b3 ff ff       	call   801017f0 <filealloc>
+801064a3:	89 c7                	mov    %eax,%edi
+801064a5:	85 c0                	test   %eax,%eax
+801064a7:	74 23                	je     801064cc <sys_open+0x9c>
+  struct proc *curproc = myproc();
+801064a9:	e8 d2 e0 ff ff       	call   80104580 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801064ae:	31 db                	xor    %ebx,%ebx
+    if(curproc->ofile[fd] == 0){
+801064b0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801064b4:	85 d2                	test   %edx,%edx
+801064b6:	74 60                	je     80106518 <sys_open+0xe8>
+  for(fd = 0; fd < NOFILE; fd++){
+801064b8:	83 c3 01             	add    $0x1,%ebx
+801064bb:	83 fb 10             	cmp    $0x10,%ebx
+801064be:	75 f0                	jne    801064b0 <sys_open+0x80>
+    if(f)
+      fileclose(f);
+801064c0:	83 ec 0c             	sub    $0xc,%esp
+801064c3:	57                   	push   %edi
+801064c4:	e8 e7 b3 ff ff       	call   801018b0 <fileclose>
+801064c9:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+801064cc:	83 ec 0c             	sub    $0xc,%esp
+801064cf:	56                   	push   %esi
+801064d0:	e8 1b bf ff ff       	call   801023f0 <iunlockput>
+    end_op();
+801064d5:	e8 b6 d2 ff ff       	call   80103790 <end_op>
+    return -1;
+801064da:	83 c4 10             	add    $0x10,%esp
+801064dd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801064e2:	eb 6d                	jmp    80106551 <sys_open+0x121>
+801064e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ip = create(path, T_FILE, 0, 0);
+801064e8:	83 ec 0c             	sub    $0xc,%esp
+801064eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801064ee:	31 c9                	xor    %ecx,%ecx
+801064f0:	ba 02 00 00 00       	mov    $0x2,%edx
+801064f5:	6a 00                	push   $0x0
+801064f7:	e8 24 f8 ff ff       	call   80105d20 <create>
+    if(ip == 0){
+801064fc:	83 c4 10             	add    $0x10,%esp
+    ip = create(path, T_FILE, 0, 0);
+801064ff:	89 c6                	mov    %eax,%esi
+    if(ip == 0){
+80106501:	85 c0                	test   %eax,%eax
+80106503:	75 99                	jne    8010649e <sys_open+0x6e>
+      end_op();
+80106505:	e8 86 d2 ff ff       	call   80103790 <end_op>
+      return -1;
+8010650a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010650f:	eb 40                	jmp    80106551 <sys_open+0x121>
+80106511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  }
+  iunlock(ip);
+80106518:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+8010651b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+  iunlock(ip);
+8010651f:	56                   	push   %esi
+80106520:	e8 0b bd ff ff       	call   80102230 <iunlock>
+  end_op();
+80106525:	e8 66 d2 ff ff       	call   80103790 <end_op>
+
+  f->type = FD_INODE;
+8010652a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+80106530:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80106533:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+80106536:	89 77 10             	mov    %esi,0x10(%edi)
+  f->readable = !(omode & O_WRONLY);
+80106539:	89 d0                	mov    %edx,%eax
+  f->off = 0;
+8010653b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+  f->readable = !(omode & O_WRONLY);
+80106542:	f7 d0                	not    %eax
+80106544:	83 e0 01             	and    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80106547:	83 e2 03             	and    $0x3,%edx
+  f->readable = !(omode & O_WRONLY);
+8010654a:	88 47 08             	mov    %al,0x8(%edi)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+8010654d:	0f 95 47 09          	setne  0x9(%edi)
+  return fd;
+}
+80106551:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106554:	89 d8                	mov    %ebx,%eax
+80106556:	5b                   	pop    %ebx
+80106557:	5e                   	pop    %esi
+80106558:	5f                   	pop    %edi
+80106559:	5d                   	pop    %ebp
+8010655a:	c3                   	ret    
+8010655b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010655f:	90                   	nop
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80106560:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106563:	85 c9                	test   %ecx,%ecx
+80106565:	0f 84 33 ff ff ff    	je     8010649e <sys_open+0x6e>
+8010656b:	e9 5c ff ff ff       	jmp    801064cc <sys_open+0x9c>
+
+80106570 <sys_mkdir>:
+
+int
+sys_mkdir(void)
+{
+80106570:	f3 0f 1e fb          	endbr32 
+80106574:	55                   	push   %ebp
+80106575:	89 e5                	mov    %esp,%ebp
+80106577:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+8010657a:	e8 a1 d1 ff ff       	call   80103720 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+8010657f:	83 ec 08             	sub    $0x8,%esp
+80106582:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106585:	50                   	push   %eax
+80106586:	6a 00                	push   $0x0
+80106588:	e8 e3 f6 ff ff       	call   80105c70 <argstr>
+8010658d:	83 c4 10             	add    $0x10,%esp
+80106590:	85 c0                	test   %eax,%eax
+80106592:	78 34                	js     801065c8 <sys_mkdir+0x58>
+80106594:	83 ec 0c             	sub    $0xc,%esp
+80106597:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010659a:	31 c9                	xor    %ecx,%ecx
+8010659c:	ba 01 00 00 00       	mov    $0x1,%edx
+801065a1:	6a 00                	push   $0x0
+801065a3:	e8 78 f7 ff ff       	call   80105d20 <create>
+801065a8:	83 c4 10             	add    $0x10,%esp
+801065ab:	85 c0                	test   %eax,%eax
+801065ad:	74 19                	je     801065c8 <sys_mkdir+0x58>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+801065af:	83 ec 0c             	sub    $0xc,%esp
+801065b2:	50                   	push   %eax
+801065b3:	e8 38 be ff ff       	call   801023f0 <iunlockput>
+  end_op();
+801065b8:	e8 d3 d1 ff ff       	call   80103790 <end_op>
+  return 0;
+801065bd:	83 c4 10             	add    $0x10,%esp
+801065c0:	31 c0                	xor    %eax,%eax
+}
+801065c2:	c9                   	leave  
+801065c3:	c3                   	ret    
+801065c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    end_op();
+801065c8:	e8 c3 d1 ff ff       	call   80103790 <end_op>
+    return -1;
+801065cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801065d2:	c9                   	leave  
+801065d3:	c3                   	ret    
+801065d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801065db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801065df:	90                   	nop
+
+801065e0 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+801065e0:	f3 0f 1e fb          	endbr32 
+801065e4:	55                   	push   %ebp
+801065e5:	89 e5                	mov    %esp,%ebp
+801065e7:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+801065ea:	e8 31 d1 ff ff       	call   80103720 <begin_op>
+  if((argstr(0, &path)) < 0 ||
+801065ef:	83 ec 08             	sub    $0x8,%esp
+801065f2:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801065f5:	50                   	push   %eax
+801065f6:	6a 00                	push   $0x0
+801065f8:	e8 73 f6 ff ff       	call   80105c70 <argstr>
+801065fd:	83 c4 10             	add    $0x10,%esp
+80106600:	85 c0                	test   %eax,%eax
+80106602:	78 64                	js     80106668 <sys_mknod+0x88>
+     argint(1, &major) < 0 ||
+80106604:	83 ec 08             	sub    $0x8,%esp
+80106607:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010660a:	50                   	push   %eax
+8010660b:	6a 01                	push   $0x1
+8010660d:	e8 ae f5 ff ff       	call   80105bc0 <argint>
+  if((argstr(0, &path)) < 0 ||
+80106612:	83 c4 10             	add    $0x10,%esp
+80106615:	85 c0                	test   %eax,%eax
+80106617:	78 4f                	js     80106668 <sys_mknod+0x88>
+     argint(2, &minor) < 0 ||
+80106619:	83 ec 08             	sub    $0x8,%esp
+8010661c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010661f:	50                   	push   %eax
+80106620:	6a 02                	push   $0x2
+80106622:	e8 99 f5 ff ff       	call   80105bc0 <argint>
+     argint(1, &major) < 0 ||
+80106627:	83 c4 10             	add    $0x10,%esp
+8010662a:	85 c0                	test   %eax,%eax
+8010662c:	78 3a                	js     80106668 <sys_mknod+0x88>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+8010662e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80106632:	83 ec 0c             	sub    $0xc,%esp
+80106635:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80106639:	ba 03 00 00 00       	mov    $0x3,%edx
+8010663e:	50                   	push   %eax
+8010663f:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80106642:	e8 d9 f6 ff ff       	call   80105d20 <create>
+     argint(2, &minor) < 0 ||
+80106647:	83 c4 10             	add    $0x10,%esp
+8010664a:	85 c0                	test   %eax,%eax
+8010664c:	74 1a                	je     80106668 <sys_mknod+0x88>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+8010664e:	83 ec 0c             	sub    $0xc,%esp
+80106651:	50                   	push   %eax
+80106652:	e8 99 bd ff ff       	call   801023f0 <iunlockput>
+  end_op();
+80106657:	e8 34 d1 ff ff       	call   80103790 <end_op>
+  return 0;
+8010665c:	83 c4 10             	add    $0x10,%esp
+8010665f:	31 c0                	xor    %eax,%eax
+}
+80106661:	c9                   	leave  
+80106662:	c3                   	ret    
+80106663:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106667:	90                   	nop
+    end_op();
+80106668:	e8 23 d1 ff ff       	call   80103790 <end_op>
+    return -1;
+8010666d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106672:	c9                   	leave  
+80106673:	c3                   	ret    
+80106674:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010667b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010667f:	90                   	nop
+
+80106680 <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+80106680:	f3 0f 1e fb          	endbr32 
+80106684:	55                   	push   %ebp
+80106685:	89 e5                	mov    %esp,%ebp
+80106687:	56                   	push   %esi
+80106688:	53                   	push   %ebx
+80106689:	83 ec 10             	sub    $0x10,%esp
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+8010668c:	e8 ef de ff ff       	call   80104580 <myproc>
+80106691:	89 c6                	mov    %eax,%esi
+  
+  begin_op();
+80106693:	e8 88 d0 ff ff       	call   80103720 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+80106698:	83 ec 08             	sub    $0x8,%esp
+8010669b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010669e:	50                   	push   %eax
+8010669f:	6a 00                	push   $0x0
+801066a1:	e8 ca f5 ff ff       	call   80105c70 <argstr>
+801066a6:	83 c4 10             	add    $0x10,%esp
+801066a9:	85 c0                	test   %eax,%eax
+801066ab:	78 73                	js     80106720 <sys_chdir+0xa0>
+801066ad:	83 ec 0c             	sub    $0xc,%esp
+801066b0:	ff 75 f4             	pushl  -0xc(%ebp)
+801066b3:	e8 68 c3 ff ff       	call   80102a20 <namei>
+801066b8:	83 c4 10             	add    $0x10,%esp
+801066bb:	89 c3                	mov    %eax,%ebx
+801066bd:	85 c0                	test   %eax,%eax
+801066bf:	74 5f                	je     80106720 <sys_chdir+0xa0>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+801066c1:	83 ec 0c             	sub    $0xc,%esp
+801066c4:	50                   	push   %eax
+801066c5:	e8 86 ba ff ff       	call   80102150 <ilock>
+  if(ip->type != T_DIR){
+801066ca:	83 c4 10             	add    $0x10,%esp
+801066cd:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801066d2:	75 2c                	jne    80106700 <sys_chdir+0x80>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+801066d4:	83 ec 0c             	sub    $0xc,%esp
+801066d7:	53                   	push   %ebx
+801066d8:	e8 53 bb ff ff       	call   80102230 <iunlock>
+  iput(curproc->cwd);
+801066dd:	58                   	pop    %eax
+801066de:	ff 76 68             	pushl  0x68(%esi)
+801066e1:	e8 9a bb ff ff       	call   80102280 <iput>
+  end_op();
+801066e6:	e8 a5 d0 ff ff       	call   80103790 <end_op>
+  curproc->cwd = ip;
+801066eb:	89 5e 68             	mov    %ebx,0x68(%esi)
+  return 0;
+801066ee:	83 c4 10             	add    $0x10,%esp
+801066f1:	31 c0                	xor    %eax,%eax
+}
+801066f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801066f6:	5b                   	pop    %ebx
+801066f7:	5e                   	pop    %esi
+801066f8:	5d                   	pop    %ebp
+801066f9:	c3                   	ret    
+801066fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iunlockput(ip);
+80106700:	83 ec 0c             	sub    $0xc,%esp
+80106703:	53                   	push   %ebx
+80106704:	e8 e7 bc ff ff       	call   801023f0 <iunlockput>
+    end_op();
+80106709:	e8 82 d0 ff ff       	call   80103790 <end_op>
+    return -1;
+8010670e:	83 c4 10             	add    $0x10,%esp
+80106711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106716:	eb db                	jmp    801066f3 <sys_chdir+0x73>
+80106718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010671f:	90                   	nop
+    end_op();
+80106720:	e8 6b d0 ff ff       	call   80103790 <end_op>
+    return -1;
+80106725:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010672a:	eb c7                	jmp    801066f3 <sys_chdir+0x73>
+8010672c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106730 <sys_exec>:
+
+int
+sys_exec(void)
+{
+80106730:	f3 0f 1e fb          	endbr32 
+80106734:	55                   	push   %ebp
+80106735:	89 e5                	mov    %esp,%ebp
+80106737:	57                   	push   %edi
+80106738:	56                   	push   %esi
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80106739:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+{
+8010673f:	53                   	push   %ebx
+80106740:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80106746:	50                   	push   %eax
+80106747:	6a 00                	push   $0x0
+80106749:	e8 22 f5 ff ff       	call   80105c70 <argstr>
+8010674e:	83 c4 10             	add    $0x10,%esp
+80106751:	85 c0                	test   %eax,%eax
+80106753:	0f 88 8b 00 00 00    	js     801067e4 <sys_exec+0xb4>
+80106759:	83 ec 08             	sub    $0x8,%esp
+8010675c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80106762:	50                   	push   %eax
+80106763:	6a 01                	push   $0x1
+80106765:	e8 56 f4 ff ff       	call   80105bc0 <argint>
+8010676a:	83 c4 10             	add    $0x10,%esp
+8010676d:	85 c0                	test   %eax,%eax
+8010676f:	78 73                	js     801067e4 <sys_exec+0xb4>
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+80106771:	83 ec 04             	sub    $0x4,%esp
+80106774:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+  for(i=0;; i++){
+8010677a:	31 db                	xor    %ebx,%ebx
+  memset(argv, 0, sizeof(argv));
+8010677c:	68 80 00 00 00       	push   $0x80
+80106781:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80106787:	6a 00                	push   $0x0
+80106789:	50                   	push   %eax
+8010678a:	e8 51 f1 ff ff       	call   801058e0 <memset>
+8010678f:	83 c4 10             	add    $0x10,%esp
+80106792:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+80106798:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+8010679e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+801067a5:	83 ec 08             	sub    $0x8,%esp
+801067a8:	57                   	push   %edi
+801067a9:	01 f0                	add    %esi,%eax
+801067ab:	50                   	push   %eax
+801067ac:	e8 6f f3 ff ff       	call   80105b20 <fetchint>
+801067b1:	83 c4 10             	add    $0x10,%esp
+801067b4:	85 c0                	test   %eax,%eax
+801067b6:	78 2c                	js     801067e4 <sys_exec+0xb4>
+      return -1;
+    if(uarg == 0){
+801067b8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+801067be:	85 c0                	test   %eax,%eax
+801067c0:	74 36                	je     801067f8 <sys_exec+0xc8>
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+801067c2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+801067c8:	83 ec 08             	sub    $0x8,%esp
+801067cb:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+801067ce:	52                   	push   %edx
+801067cf:	50                   	push   %eax
+801067d0:	e8 8b f3 ff ff       	call   80105b60 <fetchstr>
+801067d5:	83 c4 10             	add    $0x10,%esp
+801067d8:	85 c0                	test   %eax,%eax
+801067da:	78 08                	js     801067e4 <sys_exec+0xb4>
+  for(i=0;; i++){
+801067dc:	83 c3 01             	add    $0x1,%ebx
+    if(i >= NELEM(argv))
+801067df:	83 fb 20             	cmp    $0x20,%ebx
+801067e2:	75 b4                	jne    80106798 <sys_exec+0x68>
+      return -1;
+  }
+  return exec(path, argv);
+}
+801067e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+801067e7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801067ec:	5b                   	pop    %ebx
+801067ed:	5e                   	pop    %esi
+801067ee:	5f                   	pop    %edi
+801067ef:	5d                   	pop    %ebp
+801067f0:	c3                   	ret    
+801067f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return exec(path, argv);
+801067f8:	83 ec 08             	sub    $0x8,%esp
+801067fb:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+      argv[i] = 0;
+80106801:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80106808:	00 00 00 00 
+  return exec(path, argv);
+8010680c:	50                   	push   %eax
+8010680d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+80106813:	e8 58 ac ff ff       	call   80101470 <exec>
+80106818:	83 c4 10             	add    $0x10,%esp
+}
+8010681b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010681e:	5b                   	pop    %ebx
+8010681f:	5e                   	pop    %esi
+80106820:	5f                   	pop    %edi
+80106821:	5d                   	pop    %ebp
+80106822:	c3                   	ret    
+80106823:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010682a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106830 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+80106830:	f3 0f 1e fb          	endbr32 
+80106834:	55                   	push   %ebp
+80106835:	89 e5                	mov    %esp,%ebp
+80106837:	57                   	push   %edi
+80106838:	56                   	push   %esi
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80106839:	8d 45 dc             	lea    -0x24(%ebp),%eax
+{
+8010683c:	53                   	push   %ebx
+8010683d:	83 ec 20             	sub    $0x20,%esp
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80106840:	6a 08                	push   $0x8
+80106842:	50                   	push   %eax
+80106843:	6a 00                	push   $0x0
+80106845:	e8 c6 f3 ff ff       	call   80105c10 <argptr>
+8010684a:	83 c4 10             	add    $0x10,%esp
+8010684d:	85 c0                	test   %eax,%eax
+8010684f:	78 4e                	js     8010689f <sys_pipe+0x6f>
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+80106851:	83 ec 08             	sub    $0x8,%esp
+80106854:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80106857:	50                   	push   %eax
+80106858:	8d 45 e0             	lea    -0x20(%ebp),%eax
+8010685b:	50                   	push   %eax
+8010685c:	e8 7f d5 ff ff       	call   80103de0 <pipealloc>
+80106861:	83 c4 10             	add    $0x10,%esp
+80106864:	85 c0                	test   %eax,%eax
+80106866:	78 37                	js     8010689f <sys_pipe+0x6f>
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+80106868:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(fd = 0; fd < NOFILE; fd++){
+8010686b:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+8010686d:	e8 0e dd ff ff       	call   80104580 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+80106872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(curproc->ofile[fd] == 0){
+80106878:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+8010687c:	85 f6                	test   %esi,%esi
+8010687e:	74 30                	je     801068b0 <sys_pipe+0x80>
+  for(fd = 0; fd < NOFILE; fd++){
+80106880:	83 c3 01             	add    $0x1,%ebx
+80106883:	83 fb 10             	cmp    $0x10,%ebx
+80106886:	75 f0                	jne    80106878 <sys_pipe+0x48>
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+80106888:	83 ec 0c             	sub    $0xc,%esp
+8010688b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010688e:	e8 1d b0 ff ff       	call   801018b0 <fileclose>
+    fileclose(wf);
+80106893:	58                   	pop    %eax
+80106894:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106897:	e8 14 b0 ff ff       	call   801018b0 <fileclose>
+    return -1;
+8010689c:	83 c4 10             	add    $0x10,%esp
+8010689f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801068a4:	eb 5b                	jmp    80106901 <sys_pipe+0xd1>
+801068a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068ad:	8d 76 00             	lea    0x0(%esi),%esi
+      curproc->ofile[fd] = f;
+801068b0:	8d 73 08             	lea    0x8(%ebx),%esi
+801068b3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+801068b7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  struct proc *curproc = myproc();
+801068ba:	e8 c1 dc ff ff       	call   80104580 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801068bf:	31 d2                	xor    %edx,%edx
+801068c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd] == 0){
+801068c8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+801068cc:	85 c9                	test   %ecx,%ecx
+801068ce:	74 20                	je     801068f0 <sys_pipe+0xc0>
+  for(fd = 0; fd < NOFILE; fd++){
+801068d0:	83 c2 01             	add    $0x1,%edx
+801068d3:	83 fa 10             	cmp    $0x10,%edx
+801068d6:	75 f0                	jne    801068c8 <sys_pipe+0x98>
+      myproc()->ofile[fd0] = 0;
+801068d8:	e8 a3 dc ff ff       	call   80104580 <myproc>
+801068dd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+801068e4:	00 
+801068e5:	eb a1                	jmp    80106888 <sys_pipe+0x58>
+801068e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068ee:	66 90                	xchg   %ax,%ax
+      curproc->ofile[fd] = f;
+801068f0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+  }
+  fd[0] = fd0;
+801068f4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801068f7:	89 18                	mov    %ebx,(%eax)
+  fd[1] = fd1;
+801068f9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801068fc:	89 50 04             	mov    %edx,0x4(%eax)
+  return 0;
+801068ff:	31 c0                	xor    %eax,%eax
+}
+80106901:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106904:	5b                   	pop    %ebx
+80106905:	5e                   	pop    %esi
+80106906:	5f                   	pop    %edi
+80106907:	5d                   	pop    %ebp
+80106908:	c3                   	ret    
+80106909:	66 90                	xchg   %ax,%ax
+8010690b:	66 90                	xchg   %ax,%ax
+8010690d:	66 90                	xchg   %ax,%ax
+8010690f:	90                   	nop
+
+80106910 <sys_fork>:
+#include "mmu.h"
+#include "proc.h"
+#include "ASCII_image.h"
+int
+sys_fork(void)
+{
+80106910:	f3 0f 1e fb          	endbr32 
+  return fork();
+80106914:	e9 17 de ff ff       	jmp    80104730 <fork>
+80106919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106920 <sys_exit>:
+}
+
+int
+sys_exit(void)
+{
+80106920:	f3 0f 1e fb          	endbr32 
+80106924:	55                   	push   %ebp
+80106925:	89 e5                	mov    %esp,%ebp
+80106927:	83 ec 08             	sub    $0x8,%esp
+  exit();
+8010692a:	e8 81 e0 ff ff       	call   801049b0 <exit>
+  return 0;  // not reached
+}
+8010692f:	31 c0                	xor    %eax,%eax
+80106931:	c9                   	leave  
+80106932:	c3                   	ret    
+80106933:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010693a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106940 <sys_wait>:
+
+int
+sys_wait(void)
+{
+80106940:	f3 0f 1e fb          	endbr32 
+  return wait();
+80106944:	e9 b7 e2 ff ff       	jmp    80104c00 <wait>
+80106949:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106950 <sys_kill>:
+}
+
+int
+sys_kill(void)
+{
+80106950:	f3 0f 1e fb          	endbr32 
+80106954:	55                   	push   %ebp
+80106955:	89 e5                	mov    %esp,%ebp
+80106957:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+8010695a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010695d:	50                   	push   %eax
+8010695e:	6a 00                	push   $0x0
+80106960:	e8 5b f2 ff ff       	call   80105bc0 <argint>
+80106965:	83 c4 10             	add    $0x10,%esp
+80106968:	85 c0                	test   %eax,%eax
+8010696a:	78 14                	js     80106980 <sys_kill+0x30>
+    return -1;
+  return kill(pid);
+8010696c:	83 ec 0c             	sub    $0xc,%esp
+8010696f:	ff 75 f4             	pushl  -0xc(%ebp)
+80106972:	e8 69 e5 ff ff       	call   80104ee0 <kill>
+80106977:	83 c4 10             	add    $0x10,%esp
+}
+8010697a:	c9                   	leave  
+8010697b:	c3                   	ret    
+8010697c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106980:	c9                   	leave  
+    return -1;
+80106981:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106986:	c3                   	ret    
+80106987:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010698e:	66 90                	xchg   %ax,%ax
+
+80106990 <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+80106990:	f3 0f 1e fb          	endbr32 
+80106994:	55                   	push   %ebp
+80106995:	89 e5                	mov    %esp,%ebp
+80106997:	83 ec 08             	sub    $0x8,%esp
+  return myproc()->pid;
+8010699a:	e8 e1 db ff ff       	call   80104580 <myproc>
+8010699f:	8b 40 10             	mov    0x10(%eax),%eax
+}
+801069a2:	c9                   	leave  
+801069a3:	c3                   	ret    
+801069a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801069af:	90                   	nop
+
+801069b0 <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+801069b0:	f3 0f 1e fb          	endbr32 
+801069b4:	55                   	push   %ebp
+801069b5:	89 e5                	mov    %esp,%ebp
+801069b7:	53                   	push   %ebx
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+801069b8:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+801069bb:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+801069be:	50                   	push   %eax
+801069bf:	6a 00                	push   $0x0
+801069c1:	e8 fa f1 ff ff       	call   80105bc0 <argint>
+801069c6:	83 c4 10             	add    $0x10,%esp
+801069c9:	85 c0                	test   %eax,%eax
+801069cb:	78 23                	js     801069f0 <sys_sbrk+0x40>
+    return -1;
+  addr = myproc()->sz;
+801069cd:	e8 ae db ff ff       	call   80104580 <myproc>
+  if(growproc(n) < 0)
+801069d2:	83 ec 0c             	sub    $0xc,%esp
+  addr = myproc()->sz;
+801069d5:	8b 18                	mov    (%eax),%ebx
+  if(growproc(n) < 0)
+801069d7:	ff 75 f4             	pushl  -0xc(%ebp)
+801069da:	e8 d1 dc ff ff       	call   801046b0 <growproc>
+801069df:	83 c4 10             	add    $0x10,%esp
+801069e2:	85 c0                	test   %eax,%eax
+801069e4:	78 0a                	js     801069f0 <sys_sbrk+0x40>
+    return -1;
+  return addr;
+}
+801069e6:	89 d8                	mov    %ebx,%eax
+801069e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801069eb:	c9                   	leave  
+801069ec:	c3                   	ret    
+801069ed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801069f0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801069f5:	eb ef                	jmp    801069e6 <sys_sbrk+0x36>
+801069f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069fe:	66 90                	xchg   %ax,%ax
+
+80106a00 <sys_sleep>:
+
+int
+sys_sleep(void)
+{
+80106a00:	f3 0f 1e fb          	endbr32 
+80106a04:	55                   	push   %ebp
+80106a05:	89 e5                	mov    %esp,%ebp
+80106a07:	53                   	push   %ebx
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+80106a08:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80106a0b:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+80106a0e:	50                   	push   %eax
+80106a0f:	6a 00                	push   $0x0
+80106a11:	e8 aa f1 ff ff       	call   80105bc0 <argint>
+80106a16:	83 c4 10             	add    $0x10,%esp
+80106a19:	85 c0                	test   %eax,%eax
+80106a1b:	0f 88 86 00 00 00    	js     80106aa7 <sys_sleep+0xa7>
+    return -1;
+  acquire(&tickslock);
+80106a21:	83 ec 0c             	sub    $0xc,%esp
+80106a24:	68 c0 7f 11 80       	push   $0x80117fc0
+80106a29:	e8 a2 ed ff ff       	call   801057d0 <acquire>
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+80106a2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  ticks0 = ticks;
+80106a31:	8b 1d 00 88 11 80    	mov    0x80118800,%ebx
+  while(ticks - ticks0 < n){
+80106a37:	83 c4 10             	add    $0x10,%esp
+80106a3a:	85 d2                	test   %edx,%edx
+80106a3c:	75 23                	jne    80106a61 <sys_sleep+0x61>
+80106a3e:	eb 50                	jmp    80106a90 <sys_sleep+0x90>
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+80106a40:	83 ec 08             	sub    $0x8,%esp
+80106a43:	68 c0 7f 11 80       	push   $0x80117fc0
+80106a48:	68 00 88 11 80       	push   $0x80118800
+80106a4d:	e8 ee e0 ff ff       	call   80104b40 <sleep>
+  while(ticks - ticks0 < n){
+80106a52:	a1 00 88 11 80       	mov    0x80118800,%eax
+80106a57:	83 c4 10             	add    $0x10,%esp
+80106a5a:	29 d8                	sub    %ebx,%eax
+80106a5c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80106a5f:	73 2f                	jae    80106a90 <sys_sleep+0x90>
+    if(myproc()->killed){
+80106a61:	e8 1a db ff ff       	call   80104580 <myproc>
+80106a66:	8b 40 24             	mov    0x24(%eax),%eax
+80106a69:	85 c0                	test   %eax,%eax
+80106a6b:	74 d3                	je     80106a40 <sys_sleep+0x40>
+      release(&tickslock);
+80106a6d:	83 ec 0c             	sub    $0xc,%esp
+80106a70:	68 c0 7f 11 80       	push   $0x80117fc0
+80106a75:	e8 16 ee ff ff       	call   80105890 <release>
+  }
+  release(&tickslock);
+  return 0;
+}
+80106a7a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+      return -1;
+80106a7d:	83 c4 10             	add    $0x10,%esp
+80106a80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106a85:	c9                   	leave  
+80106a86:	c3                   	ret    
+80106a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a8e:	66 90                	xchg   %ax,%ax
+  release(&tickslock);
+80106a90:	83 ec 0c             	sub    $0xc,%esp
+80106a93:	68 c0 7f 11 80       	push   $0x80117fc0
+80106a98:	e8 f3 ed ff ff       	call   80105890 <release>
+  return 0;
+80106a9d:	83 c4 10             	add    $0x10,%esp
+80106aa0:	31 c0                	xor    %eax,%eax
+}
+80106aa2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106aa5:	c9                   	leave  
+80106aa6:	c3                   	ret    
+    return -1;
+80106aa7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106aac:	eb f4                	jmp    80106aa2 <sys_sleep+0xa2>
+80106aae:	66 90                	xchg   %ax,%ax
+
+80106ab0 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+80106ab0:	f3 0f 1e fb          	endbr32 
+80106ab4:	55                   	push   %ebp
+80106ab5:	89 e5                	mov    %esp,%ebp
+80106ab7:	53                   	push   %ebx
+80106ab8:	83 ec 10             	sub    $0x10,%esp
+  uint xticks;
+
+  acquire(&tickslock);
+80106abb:	68 c0 7f 11 80       	push   $0x80117fc0
+80106ac0:	e8 0b ed ff ff       	call   801057d0 <acquire>
+  xticks = ticks;
+80106ac5:	8b 1d 00 88 11 80    	mov    0x80118800,%ebx
+  release(&tickslock);
+80106acb:	c7 04 24 c0 7f 11 80 	movl   $0x80117fc0,(%esp)
+80106ad2:	e8 b9 ed ff ff       	call   80105890 <release>
+  return xticks;
+}
+80106ad7:	89 d8                	mov    %ebx,%eax
+80106ad9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106adc:	c9                   	leave  
+80106add:	c3                   	ret    
+80106ade:	66 90                	xchg   %ax,%ax
+
+80106ae0 <sys_draw>:
+
+
+// Implementing a sys_draw function
+int sys_draw(void)
+{
+80106ae0:	f3 0f 1e fb          	endbr32 
+80106ae4:	55                   	push   %ebp
+80106ae5:	89 e5                	mov    %esp,%ebp
+80106ae7:	56                   	push   %esi
+80106ae8:	53                   	push   %ebx
+
+  char *buffer;
+  int size;
+
+  // Feches the 1st 32 bit int argument which is the max buffer sizeand assigns it to the size
+  if (argint(1, &size) == -1)
+80106ae9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+80106aec:	83 ec 18             	sub    $0x18,%esp
+  if (argint(1, &size) == -1)
+80106aef:	50                   	push   %eax
+80106af0:	6a 01                	push   $0x1
+80106af2:	e8 c9 f0 ff ff       	call   80105bc0 <argint>
+80106af7:	83 c4 10             	add    $0x10,%esp
+80106afa:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106afd:	74 5e                	je     80106b5d <sys_draw+0x7d>
+    return -1;
+  }
+
+  // Check that the buffer pointer in first argument
+  // lies within the process address space or not till size bytes, if it does not then return -1.
+  if (argptr(0, (char **)&buffer, size) == -1)
+80106aff:	83 ec 04             	sub    $0x4,%esp
+80106b02:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106b05:	ff 75 f4             	pushl  -0xc(%ebp)
+80106b08:	50                   	push   %eax
+80106b09:	6a 00                	push   $0x0
+80106b0b:	e8 00 f1 ff ff       	call   80105c10 <argptr>
+80106b10:	83 c4 10             	add    $0x10,%esp
+80106b13:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106b16:	74 45                	je     80106b5d <sys_draw+0x7d>
+  }
+  
+  // copying macro wolfi from ASCII_image.h
+  char *draw = wolfi;
+  
+  int drawsize = 0;
+80106b18:	31 d2                	xor    %edx,%edx
+80106b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  while (draw[drawsize] != '\0')
+  {
+    drawsize++;
+80106b20:	83 c2 01             	add    $0x1,%edx
+  while (draw[drawsize] != '\0')
+80106b23:	80 ba d0 8c 10 80 00 	cmpb   $0x0,-0x7fef7330(%edx)
+80106b2a:	75 f4                	jne    80106b20 <sys_draw+0x40>
+  }
+
+  if (drawsize > size)
+80106b2c:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+80106b2f:	7c 2c                	jl     80106b5d <sys_draw+0x7d>
+80106b31:	89 d1                	mov    %edx,%ecx
+80106b33:	bb 20 00 00 00       	mov    $0x20,%ebx
+    //buffer size is insufficient to draw the wolf picture.
+    return -1;
+  }
+  
+  //copying the wolf picture into the buffer.
+  for (int i = 0; i < drawsize; i++)
+80106b38:	31 c0                	xor    %eax,%eax
+80106b3a:	eb 0b                	jmp    80106b47 <sys_draw+0x67>
+80106b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106b40:	0f b6 98 d0 8c 10 80 	movzbl -0x7fef7330(%eax),%ebx
+  {
+    buffer[i] = draw[i];
+80106b47:	8b 75 f0             	mov    -0x10(%ebp),%esi
+80106b4a:	88 1c 06             	mov    %bl,(%esi,%eax,1)
+  for (int i = 0; i < drawsize; i++)
+80106b4d:	83 c0 01             	add    $0x1,%eax
+80106b50:	39 c8                	cmp    %ecx,%eax
+80106b52:	75 ec                	jne    80106b40 <sys_draw+0x60>
+  }
+  
+  //return the size of draw pictue
+  return drawsize;
+}
+80106b54:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106b57:	89 d0                	mov    %edx,%eax
+80106b59:	5b                   	pop    %ebx
+80106b5a:	5e                   	pop    %esi
+80106b5b:	5d                   	pop    %ebp
+80106b5c:	c3                   	ret    
+    return -1;
+80106b5d:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+80106b62:	eb f0                	jmp    80106b54 <sys_draw+0x74>
+80106b64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106b6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106b6f:	90                   	nop
+
+80106b70 <sys_history>:
+
+int sys_history(void) {
+80106b70:	f3 0f 1e fb          	endbr32 
+80106b74:	55                   	push   %ebp
+80106b75:	89 e5                	mov    %esp,%ebp
+80106b77:	83 ec 1c             	sub    $0x1c,%esp
+  char *buffer;
+  int historyId;
+  
+  argptr(0, &buffer, 1);
+80106b7a:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106b7d:	6a 01                	push   $0x1
+80106b7f:	50                   	push   %eax
+80106b80:	6a 00                	push   $0x0
+80106b82:	e8 89 f0 ff ff       	call   80105c10 <argptr>
+  
+  argint(1, &historyId);
+80106b87:	58                   	pop    %eax
+80106b88:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106b8b:	5a                   	pop    %edx
+80106b8c:	50                   	push   %eax
+80106b8d:	6a 01                	push   $0x1
+80106b8f:	e8 2c f0 ff ff       	call   80105bc0 <argint>
+
+  return history(buffer, historyId);
+80106b94:	59                   	pop    %ecx
+80106b95:	58                   	pop    %eax
+80106b96:	ff 75 f4             	pushl  -0xc(%ebp)
+80106b99:	ff 75 f0             	pushl  -0x10(%ebp)
+80106b9c:	e8 bf a7 ff ff       	call   80101360 <history>
+}
+80106ba1:	c9                   	leave  
+80106ba2:	c3                   	ret    
+80106ba3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106bb0 <sys_wait2>:
+
+
+int sys_wait2(void) {
+80106bb0:	f3 0f 1e fb          	endbr32 
+80106bb4:	55                   	push   %ebp
+80106bb5:	89 e5                	mov    %esp,%ebp
+80106bb7:	83 ec 1c             	sub    $0x1c,%esp
+  int *ctime, *retime, *rutime, *stime;
+  if (argptr(0, (void*)&ctime, sizeof(ctime)) == -1)
+80106bba:	8d 45 e8             	lea    -0x18(%ebp),%eax
+80106bbd:	6a 04                	push   $0x4
+80106bbf:	50                   	push   %eax
+80106bc0:	6a 00                	push   $0x0
+80106bc2:	e8 49 f0 ff ff       	call   80105c10 <argptr>
+80106bc7:	83 c4 10             	add    $0x10,%esp
+80106bca:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106bcd:	74 61                	je     80106c30 <sys_wait2+0x80>
+    return -1;
+  if (argptr(1, (void*)&retime, sizeof(retime)) == -1)
+80106bcf:	83 ec 04             	sub    $0x4,%esp
+80106bd2:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80106bd5:	6a 04                	push   $0x4
+80106bd7:	50                   	push   %eax
+80106bd8:	6a 01                	push   $0x1
+80106bda:	e8 31 f0 ff ff       	call   80105c10 <argptr>
+80106bdf:	83 c4 10             	add    $0x10,%esp
+80106be2:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106be5:	74 49                	je     80106c30 <sys_wait2+0x80>
+    return -1;
+  if (argptr(2, (void*)&rutime, sizeof(rutime)) == -1)
+80106be7:	83 ec 04             	sub    $0x4,%esp
+80106bea:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106bed:	6a 04                	push   $0x4
+80106bef:	50                   	push   %eax
+80106bf0:	6a 02                	push   $0x2
+80106bf2:	e8 19 f0 ff ff       	call   80105c10 <argptr>
+80106bf7:	83 c4 10             	add    $0x10,%esp
+80106bfa:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106bfd:	74 31                	je     80106c30 <sys_wait2+0x80>
+    return -1;
+  if (argptr(3, (void*)&stime, sizeof(stime)) == -1)
+80106bff:	83 ec 04             	sub    $0x4,%esp
+80106c02:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80106c05:	6a 04                	push   $0x4
+80106c07:	50                   	push   %eax
+80106c08:	6a 03                	push   $0x3
+80106c0a:	e8 01 f0 ff ff       	call   80105c10 <argptr>
+80106c0f:	83 c4 10             	add    $0x10,%esp
+80106c12:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106c15:	74 19                	je     80106c30 <sys_wait2+0x80>
+    return -1;
+  return wait2(ctime, retime, rutime, stime);
+80106c17:	ff 75 f4             	pushl  -0xc(%ebp)
+80106c1a:	ff 75 f0             	pushl  -0x10(%ebp)
+80106c1d:	ff 75 ec             	pushl  -0x14(%ebp)
+80106c20:	ff 75 e8             	pushl  -0x18(%ebp)
+80106c23:	e8 e8 e0 ff ff       	call   80104d10 <wait2>
+80106c28:	83 c4 10             	add    $0x10,%esp
+}
+80106c2b:	c9                   	leave  
+80106c2c:	c3                   	ret    
+80106c2d:	8d 76 00             	lea    0x0(%esi),%esi
+80106c30:	c9                   	leave  
+    return -1;
+80106c31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106c36:	c3                   	ret    
+
+80106c37 <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+80106c37:	1e                   	push   %ds
+  pushl %es
+80106c38:	06                   	push   %es
+  pushl %fs
+80106c39:	0f a0                	push   %fs
+  pushl %gs
+80106c3b:	0f a8                	push   %gs
+  pushal
+80106c3d:	60                   	pusha  
+  
+  # Set up data segments.
+  movw $(SEG_KDATA<<3), %ax
+80106c3e:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+80106c42:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+80106c44:	8e c0                	mov    %eax,%es
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+80106c46:	54                   	push   %esp
+  call trap
+80106c47:	e8 c4 00 00 00       	call   80106d10 <trap>
+  addl $4, %esp
+80106c4c:	83 c4 04             	add    $0x4,%esp
+
+80106c4f <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+80106c4f:	61                   	popa   
+  popl %gs
+80106c50:	0f a9                	pop    %gs
+  popl %fs
+80106c52:	0f a1                	pop    %fs
+  popl %es
+80106c54:	07                   	pop    %es
+  popl %ds
+80106c55:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+80106c56:	83 c4 08             	add    $0x8,%esp
+  iret
+80106c59:	cf                   	iret   
+80106c5a:	66 90                	xchg   %ax,%ax
+80106c5c:	66 90                	xchg   %ax,%ax
+80106c5e:	66 90                	xchg   %ax,%ax
+
+80106c60 <tvinit>:
+extern int inc_tickcounter(void);
+extern void decpriority(void);
+
+void
+tvinit(void)
+{
+80106c60:	f3 0f 1e fb          	endbr32 
+80106c64:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+80106c65:	31 c0                	xor    %eax,%eax
+{
+80106c67:	89 e5                	mov    %esp,%ebp
+80106c69:	83 ec 08             	sub    $0x8,%esp
+80106c6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+80106c70:	8b 14 85 08 c0 10 80 	mov    -0x7fef3ff8(,%eax,4),%edx
+80106c77:	c7 04 c5 02 80 11 80 	movl   $0x8e000008,-0x7fee7ffe(,%eax,8)
+80106c7e:	08 00 00 8e 
+80106c82:	66 89 14 c5 00 80 11 	mov    %dx,-0x7fee8000(,%eax,8)
+80106c89:	80 
+80106c8a:	c1 ea 10             	shr    $0x10,%edx
+80106c8d:	66 89 14 c5 06 80 11 	mov    %dx,-0x7fee7ffa(,%eax,8)
+80106c94:	80 
+  for(i = 0; i < 256; i++)
+80106c95:	83 c0 01             	add    $0x1,%eax
+80106c98:	3d 00 01 00 00       	cmp    $0x100,%eax
+80106c9d:	75 d1                	jne    80106c70 <tvinit+0x10>
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+
+  initlock(&tickslock, "time");
+80106c9f:	83 ec 08             	sub    $0x8,%esp
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80106ca2:	a1 08 c1 10 80       	mov    0x8010c108,%eax
+80106ca7:	c7 05 02 82 11 80 08 	movl   $0xef000008,0x80118202
+80106cae:	00 00 ef 
+  initlock(&tickslock, "time");
+80106cb1:	68 f9 92 10 80       	push   $0x801092f9
+80106cb6:	68 c0 7f 11 80       	push   $0x80117fc0
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80106cbb:	66 a3 00 82 11 80    	mov    %ax,0x80118200
+80106cc1:	c1 e8 10             	shr    $0x10,%eax
+80106cc4:	66 a3 06 82 11 80    	mov    %ax,0x80118206
+  initlock(&tickslock, "time");
+80106cca:	e8 81 e9 ff ff       	call   80105650 <initlock>
+}
+80106ccf:	83 c4 10             	add    $0x10,%esp
+80106cd2:	c9                   	leave  
+80106cd3:	c3                   	ret    
+80106cd4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106cdf:	90                   	nop
+
+80106ce0 <idtinit>:
+
+void
+idtinit(void)
+{
+80106ce0:	f3 0f 1e fb          	endbr32 
+80106ce4:	55                   	push   %ebp
+  pd[0] = size-1;
+80106ce5:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80106cea:	89 e5                	mov    %esp,%ebp
+80106cec:	83 ec 10             	sub    $0x10,%esp
+80106cef:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+80106cf3:	b8 00 80 11 80       	mov    $0x80118000,%eax
+80106cf8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+80106cfc:	c1 e8 10             	shr    $0x10,%eax
+80106cff:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+  asm volatile("lidt (%0)" : : "r" (pd));
+80106d03:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80106d06:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+80106d09:	c9                   	leave  
+80106d0a:	c3                   	ret    
+80106d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106d0f:	90                   	nop
+
+80106d10 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80106d10:	f3 0f 1e fb          	endbr32 
+80106d14:	55                   	push   %ebp
+80106d15:	89 e5                	mov    %esp,%ebp
+80106d17:	57                   	push   %edi
+80106d18:	56                   	push   %esi
+80106d19:	53                   	push   %ebx
+80106d1a:	83 ec 1c             	sub    $0x1c,%esp
+80106d1d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(tf->trapno == T_SYSCALL){
+80106d20:	8b 43 30             	mov    0x30(%ebx),%eax
+80106d23:	83 f8 40             	cmp    $0x40,%eax
+80106d26:	0f 84 e4 01 00 00    	je     80106f10 <trap+0x200>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+80106d2c:	83 e8 20             	sub    $0x20,%eax
+80106d2f:	83 f8 1f             	cmp    $0x1f,%eax
+80106d32:	77 08                	ja     80106d3c <trap+0x2c>
+80106d34:	3e ff 24 85 a0 93 10 	notrack jmp *-0x7fef6c60(,%eax,4)
+80106d3b:	80 
+    lapiceoi();
+    break;
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+80106d3c:	e8 3f d8 ff ff       	call   80104580 <myproc>
+80106d41:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106d44:	85 c0                	test   %eax,%eax
+80106d46:	0f 84 13 02 00 00    	je     80106f5f <trap+0x24f>
+80106d4c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80106d50:	0f 84 09 02 00 00    	je     80106f5f <trap+0x24f>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80106d56:	0f 20 d1             	mov    %cr2,%ecx
+80106d59:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80106d5c:	e8 ff d7 ff ff       	call   80104560 <cpuid>
+80106d61:	8b 73 30             	mov    0x30(%ebx),%esi
+80106d64:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106d67:	8b 43 34             	mov    0x34(%ebx),%eax
+80106d6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+80106d6d:	e8 0e d8 ff ff       	call   80104580 <myproc>
+80106d72:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106d75:	e8 06 d8 ff ff       	call   80104580 <myproc>
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80106d7a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80106d7d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80106d80:	51                   	push   %ecx
+80106d81:	57                   	push   %edi
+80106d82:	52                   	push   %edx
+80106d83:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106d86:	56                   	push   %esi
+            myproc()->pid, myproc()->name, tf->trapno,
+80106d87:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80106d8a:	83 c6 6c             	add    $0x6c,%esi
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+80106d8d:	56                   	push   %esi
+80106d8e:	ff 70 10             	pushl  0x10(%eax)
+80106d91:	68 5c 93 10 80       	push   $0x8010935c
+80106d96:	e8 55 99 ff ff       	call   801006f0 <cprintf>
+            tf->err, cpuid(), tf->eip, rcr2());
+    myproc()->killed = 1;
+80106d9b:	83 c4 20             	add    $0x20,%esp
+80106d9e:	e8 dd d7 ff ff       	call   80104580 <myproc>
+80106da3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106daa:	e8 d1 d7 ff ff       	call   80104580 <myproc>
+80106daf:	85 c0                	test   %eax,%eax
+80106db1:	74 1d                	je     80106dd0 <trap+0xc0>
+80106db3:	e8 c8 d7 ff ff       	call   80104580 <myproc>
+80106db8:	8b 50 24             	mov    0x24(%eax),%edx
+80106dbb:	85 d2                	test   %edx,%edx
+80106dbd:	74 11                	je     80106dd0 <trap+0xc0>
+80106dbf:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106dc3:	83 e0 03             	and    $0x3,%eax
+80106dc6:	66 83 f8 03          	cmp    $0x3,%ax
+80106dca:	0f 84 78 01 00 00    	je     80106f48 <trap+0x238>
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  
+
+#ifdef DEFAULT
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER && inc_tickcounter() % QUANTA == 0) {
+80106dd0:	e8 ab d7 ff ff       	call   80104580 <myproc>
+80106dd5:	85 c0                	test   %eax,%eax
+80106dd7:	74 0f                	je     80106de8 <trap+0xd8>
+80106dd9:	e8 a2 d7 ff ff       	call   80104580 <myproc>
+80106dde:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80106de2:	0f 84 f0 00 00 00    	je     80106ed8 <trap+0x1c8>
+    decpriority();
+    yield();
+  }
+  #endif
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106de8:	e8 93 d7 ff ff       	call   80104580 <myproc>
+80106ded:	85 c0                	test   %eax,%eax
+80106def:	74 1d                	je     80106e0e <trap+0xfe>
+80106df1:	e8 8a d7 ff ff       	call   80104580 <myproc>
+80106df6:	8b 40 24             	mov    0x24(%eax),%eax
+80106df9:	85 c0                	test   %eax,%eax
+80106dfb:	74 11                	je     80106e0e <trap+0xfe>
+80106dfd:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80106e01:	83 e0 03             	and    $0x3,%eax
+80106e04:	66 83 f8 03          	cmp    $0x3,%ax
+80106e08:	0f 84 2b 01 00 00    	je     80106f39 <trap+0x229>
+    exit();
+}
+80106e0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e11:	5b                   	pop    %ebx
+80106e12:	5e                   	pop    %esi
+80106e13:	5f                   	pop    %edi
+80106e14:	5d                   	pop    %ebp
+80106e15:	c3                   	ret    
+    ideintr();
+80106e16:	e8 b5 bd ff ff       	call   80102bd0 <ideintr>
+    lapiceoi();
+80106e1b:	e8 90 c4 ff ff       	call   801032b0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106e20:	e8 5b d7 ff ff       	call   80104580 <myproc>
+80106e25:	85 c0                	test   %eax,%eax
+80106e27:	75 8a                	jne    80106db3 <trap+0xa3>
+80106e29:	eb a5                	jmp    80106dd0 <trap+0xc0>
+    if(cpuid() == 0){
+80106e2b:	e8 30 d7 ff ff       	call   80104560 <cpuid>
+80106e30:	85 c0                	test   %eax,%eax
+80106e32:	75 e7                	jne    80106e1b <trap+0x10b>
+      acquire(&tickslock);
+80106e34:	83 ec 0c             	sub    $0xc,%esp
+80106e37:	68 c0 7f 11 80       	push   $0x80117fc0
+80106e3c:	e8 8f e9 ff ff       	call   801057d0 <acquire>
+      ticks++;
+80106e41:	83 05 00 88 11 80 01 	addl   $0x1,0x80118800
+      updatestatistics(); //will update proc statistic every clock tick
+80106e48:	e8 03 e2 ff ff       	call   80105050 <updatestatistics>
+      wakeup(&ticks);
+80106e4d:	c7 04 24 00 88 11 80 	movl   $0x80118800,(%esp)
+80106e54:	e8 17 e0 ff ff       	call   80104e70 <wakeup>
+      release(&tickslock);
+80106e59:	c7 04 24 c0 7f 11 80 	movl   $0x80117fc0,(%esp)
+80106e60:	e8 2b ea ff ff       	call   80105890 <release>
+80106e65:	83 c4 10             	add    $0x10,%esp
+    lapiceoi();
+80106e68:	eb b1                	jmp    80106e1b <trap+0x10b>
+    kbdintr();
+80106e6a:	e8 01 c3 ff ff       	call   80103170 <kbdintr>
+    lapiceoi();
+80106e6f:	e8 3c c4 ff ff       	call   801032b0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106e74:	e8 07 d7 ff ff       	call   80104580 <myproc>
+80106e79:	85 c0                	test   %eax,%eax
+80106e7b:	0f 85 32 ff ff ff    	jne    80106db3 <trap+0xa3>
+80106e81:	e9 4a ff ff ff       	jmp    80106dd0 <trap+0xc0>
+    uartintr();
+80106e86:	e8 75 02 00 00       	call   80107100 <uartintr>
+    lapiceoi();
+80106e8b:	e8 20 c4 ff ff       	call   801032b0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106e90:	e8 eb d6 ff ff       	call   80104580 <myproc>
+80106e95:	85 c0                	test   %eax,%eax
+80106e97:	0f 85 16 ff ff ff    	jne    80106db3 <trap+0xa3>
+80106e9d:	e9 2e ff ff ff       	jmp    80106dd0 <trap+0xc0>
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+80106ea2:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106ea5:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80106ea9:	e8 b2 d6 ff ff       	call   80104560 <cpuid>
+80106eae:	57                   	push   %edi
+80106eaf:	56                   	push   %esi
+80106eb0:	50                   	push   %eax
+80106eb1:	68 04 93 10 80       	push   $0x80109304
+80106eb6:	e8 35 98 ff ff       	call   801006f0 <cprintf>
+    lapiceoi();
+80106ebb:	e8 f0 c3 ff ff       	call   801032b0 <lapiceoi>
+    break;
+80106ec0:	83 c4 10             	add    $0x10,%esp
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106ec3:	e8 b8 d6 ff ff       	call   80104580 <myproc>
+80106ec8:	85 c0                	test   %eax,%eax
+80106eca:	0f 85 e3 fe ff ff    	jne    80106db3 <trap+0xa3>
+80106ed0:	e9 fb fe ff ff       	jmp    80106dd0 <trap+0xc0>
+80106ed5:	8d 76 00             	lea    0x0(%esi),%esi
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER && inc_tickcounter() % QUANTA == 0) {
+80106ed8:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80106edc:	0f 85 06 ff ff ff    	jne    80106de8 <trap+0xd8>
+80106ee2:	e8 d9 e5 ff ff       	call   801054c0 <inc_tickcounter>
+80106ee7:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
+80106eed:	05 99 99 99 19       	add    $0x19999999,%eax
+80106ef2:	3d 32 33 33 33       	cmp    $0x33333332,%eax
+80106ef7:	0f 87 eb fe ff ff    	ja     80106de8 <trap+0xd8>
+    yield();
+80106efd:	e8 ee db ff ff       	call   80104af0 <yield>
+80106f02:	e9 e1 fe ff ff       	jmp    80106de8 <trap+0xd8>
+80106f07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f0e:	66 90                	xchg   %ax,%ax
+    if(myproc()->killed)
+80106f10:	e8 6b d6 ff ff       	call   80104580 <myproc>
+80106f15:	8b 70 24             	mov    0x24(%eax),%esi
+80106f18:	85 f6                	test   %esi,%esi
+80106f1a:	75 3c                	jne    80106f58 <trap+0x248>
+    myproc()->tf = tf;
+80106f1c:	e8 5f d6 ff ff       	call   80104580 <myproc>
+80106f21:	89 58 18             	mov    %ebx,0x18(%eax)
+    syscall();
+80106f24:	e8 87 ed ff ff       	call   80105cb0 <syscall>
+    if(myproc()->killed)
+80106f29:	e8 52 d6 ff ff       	call   80104580 <myproc>
+80106f2e:	8b 48 24             	mov    0x24(%eax),%ecx
+80106f31:	85 c9                	test   %ecx,%ecx
+80106f33:	0f 84 d5 fe ff ff    	je     80106e0e <trap+0xfe>
+}
+80106f39:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106f3c:	5b                   	pop    %ebx
+80106f3d:	5e                   	pop    %esi
+80106f3e:	5f                   	pop    %edi
+80106f3f:	5d                   	pop    %ebp
+      exit();
+80106f40:	e9 6b da ff ff       	jmp    801049b0 <exit>
+80106f45:	8d 76 00             	lea    0x0(%esi),%esi
+    exit();
+80106f48:	e8 63 da ff ff       	call   801049b0 <exit>
+80106f4d:	e9 7e fe ff ff       	jmp    80106dd0 <trap+0xc0>
+80106f52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      exit();
+80106f58:	e8 53 da ff ff       	call   801049b0 <exit>
+80106f5d:	eb bd                	jmp    80106f1c <trap+0x20c>
+80106f5f:	0f 20 d6             	mov    %cr2,%esi
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+80106f62:	e8 f9 d5 ff ff       	call   80104560 <cpuid>
+80106f67:	83 ec 0c             	sub    $0xc,%esp
+80106f6a:	56                   	push   %esi
+80106f6b:	57                   	push   %edi
+80106f6c:	50                   	push   %eax
+80106f6d:	ff 73 30             	pushl  0x30(%ebx)
+80106f70:	68 28 93 10 80       	push   $0x80109328
+80106f75:	e8 76 97 ff ff       	call   801006f0 <cprintf>
+      panic("trap");
+80106f7a:	83 c4 14             	add    $0x14,%esp
+80106f7d:	68 fe 92 10 80       	push   $0x801092fe
+80106f82:	e8 09 94 ff ff       	call   80100390 <panic>
+80106f87:	66 90                	xchg   %ax,%ax
+80106f89:	66 90                	xchg   %ax,%ax
+80106f8b:	66 90                	xchg   %ax,%ax
+80106f8d:	66 90                	xchg   %ax,%ax
+80106f8f:	90                   	nop
+
+80106f90 <uartgetc>:
+  outb(COM1+0, c);
+}
+
+static int
+uartgetc(void)
+{
+80106f90:	f3 0f 1e fb          	endbr32 
+  if(!uart)
+80106f94:	a1 bc c5 10 80       	mov    0x8010c5bc,%eax
+80106f99:	85 c0                	test   %eax,%eax
+80106f9b:	74 1b                	je     80106fb8 <uartgetc+0x28>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80106f9d:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106fa2:	ec                   	in     (%dx),%al
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+80106fa3:	a8 01                	test   $0x1,%al
+80106fa5:	74 11                	je     80106fb8 <uartgetc+0x28>
+80106fa7:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106fac:	ec                   	in     (%dx),%al
+    return -1;
+  return inb(COM1+0);
+80106fad:	0f b6 c0             	movzbl %al,%eax
+80106fb0:	c3                   	ret    
+80106fb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80106fb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106fbd:	c3                   	ret    
+80106fbe:	66 90                	xchg   %ax,%ax
+
+80106fc0 <uartputc.part.0>:
+uartputc(int c)
+80106fc0:	55                   	push   %ebp
+80106fc1:	89 e5                	mov    %esp,%ebp
+80106fc3:	57                   	push   %edi
+80106fc4:	89 c7                	mov    %eax,%edi
+80106fc6:	56                   	push   %esi
+80106fc7:	be fd 03 00 00       	mov    $0x3fd,%esi
+80106fcc:	53                   	push   %ebx
+80106fcd:	bb 80 00 00 00       	mov    $0x80,%ebx
+80106fd2:	83 ec 0c             	sub    $0xc,%esp
+80106fd5:	eb 1b                	jmp    80106ff2 <uartputc.part.0+0x32>
+80106fd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106fde:	66 90                	xchg   %ax,%ax
+    microdelay(10);
+80106fe0:	83 ec 0c             	sub    $0xc,%esp
+80106fe3:	6a 0a                	push   $0xa
+80106fe5:	e8 e6 c2 ff ff       	call   801032d0 <microdelay>
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+80106fea:	83 c4 10             	add    $0x10,%esp
+80106fed:	83 eb 01             	sub    $0x1,%ebx
+80106ff0:	74 07                	je     80106ff9 <uartputc.part.0+0x39>
+80106ff2:	89 f2                	mov    %esi,%edx
+80106ff4:	ec                   	in     (%dx),%al
+80106ff5:	a8 20                	test   $0x20,%al
+80106ff7:	74 e7                	je     80106fe0 <uartputc.part.0+0x20>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80106ff9:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106ffe:	89 f8                	mov    %edi,%eax
+80107000:	ee                   	out    %al,(%dx)
+}
+80107001:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107004:	5b                   	pop    %ebx
+80107005:	5e                   	pop    %esi
+80107006:	5f                   	pop    %edi
+80107007:	5d                   	pop    %ebp
+80107008:	c3                   	ret    
+80107009:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107010 <uartinit>:
+{
+80107010:	f3 0f 1e fb          	endbr32 
+80107014:	55                   	push   %ebp
+80107015:	31 c9                	xor    %ecx,%ecx
+80107017:	89 c8                	mov    %ecx,%eax
+80107019:	89 e5                	mov    %esp,%ebp
+8010701b:	57                   	push   %edi
+8010701c:	56                   	push   %esi
+8010701d:	53                   	push   %ebx
+8010701e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80107023:	89 da                	mov    %ebx,%edx
+80107025:	83 ec 0c             	sub    $0xc,%esp
+80107028:	ee                   	out    %al,(%dx)
+80107029:	bf fb 03 00 00       	mov    $0x3fb,%edi
+8010702e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80107033:	89 fa                	mov    %edi,%edx
+80107035:	ee                   	out    %al,(%dx)
+80107036:	b8 0c 00 00 00       	mov    $0xc,%eax
+8010703b:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80107040:	ee                   	out    %al,(%dx)
+80107041:	be f9 03 00 00       	mov    $0x3f9,%esi
+80107046:	89 c8                	mov    %ecx,%eax
+80107048:	89 f2                	mov    %esi,%edx
+8010704a:	ee                   	out    %al,(%dx)
+8010704b:	b8 03 00 00 00       	mov    $0x3,%eax
+80107050:	89 fa                	mov    %edi,%edx
+80107052:	ee                   	out    %al,(%dx)
+80107053:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80107058:	89 c8                	mov    %ecx,%eax
+8010705a:	ee                   	out    %al,(%dx)
+8010705b:	b8 01 00 00 00       	mov    $0x1,%eax
+80107060:	89 f2                	mov    %esi,%edx
+80107062:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80107063:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80107068:	ec                   	in     (%dx),%al
+  if(inb(COM1+5) == 0xFF)
+80107069:	3c ff                	cmp    $0xff,%al
+8010706b:	74 52                	je     801070bf <uartinit+0xaf>
+  uart = 1;
+8010706d:	c7 05 bc c5 10 80 01 	movl   $0x1,0x8010c5bc
+80107074:	00 00 00 
+80107077:	89 da                	mov    %ebx,%edx
+80107079:	ec                   	in     (%dx),%al
+8010707a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010707f:	ec                   	in     (%dx),%al
+  ioapicenable(IRQ_COM1, 0);
+80107080:	83 ec 08             	sub    $0x8,%esp
+80107083:	be 76 00 00 00       	mov    $0x76,%esi
+  for(p="xv6...\n"; *p; p++)
+80107088:	bb 20 94 10 80       	mov    $0x80109420,%ebx
+  ioapicenable(IRQ_COM1, 0);
+8010708d:	6a 00                	push   $0x0
+8010708f:	6a 04                	push   $0x4
+80107091:	e8 8a bd ff ff       	call   80102e20 <ioapicenable>
+80107096:	83 c4 10             	add    $0x10,%esp
+  for(p="xv6...\n"; *p; p++)
+80107099:	b8 78 00 00 00       	mov    $0x78,%eax
+8010709e:	eb 04                	jmp    801070a4 <uartinit+0x94>
+801070a0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+  if(!uart)
+801070a4:	8b 15 bc c5 10 80    	mov    0x8010c5bc,%edx
+801070aa:	85 d2                	test   %edx,%edx
+801070ac:	74 08                	je     801070b6 <uartinit+0xa6>
+    uartputc(*p);
+801070ae:	0f be c0             	movsbl %al,%eax
+801070b1:	e8 0a ff ff ff       	call   80106fc0 <uartputc.part.0>
+  for(p="xv6...\n"; *p; p++)
+801070b6:	89 f0                	mov    %esi,%eax
+801070b8:	83 c3 01             	add    $0x1,%ebx
+801070bb:	84 c0                	test   %al,%al
+801070bd:	75 e1                	jne    801070a0 <uartinit+0x90>
+}
+801070bf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070c2:	5b                   	pop    %ebx
+801070c3:	5e                   	pop    %esi
+801070c4:	5f                   	pop    %edi
+801070c5:	5d                   	pop    %ebp
+801070c6:	c3                   	ret    
+801070c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070ce:	66 90                	xchg   %ax,%ax
+
+801070d0 <uartputc>:
+{
+801070d0:	f3 0f 1e fb          	endbr32 
+801070d4:	55                   	push   %ebp
+  if(!uart)
+801070d5:	8b 15 bc c5 10 80    	mov    0x8010c5bc,%edx
+{
+801070db:	89 e5                	mov    %esp,%ebp
+801070dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(!uart)
+801070e0:	85 d2                	test   %edx,%edx
+801070e2:	74 0c                	je     801070f0 <uartputc+0x20>
+}
+801070e4:	5d                   	pop    %ebp
+801070e5:	e9 d6 fe ff ff       	jmp    80106fc0 <uartputc.part.0>
+801070ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801070f0:	5d                   	pop    %ebp
+801070f1:	c3                   	ret    
+801070f2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801070f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107100 <uartintr>:
+
+void
+uartintr(void)
+{
+80107100:	f3 0f 1e fb          	endbr32 
+80107104:	55                   	push   %ebp
+80107105:	89 e5                	mov    %esp,%ebp
+80107107:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(uartgetc);
+8010710a:	68 90 6f 10 80       	push   $0x80106f90
+8010710f:	e8 5c 9b ff ff       	call   80100c70 <consoleintr>
+}
+80107114:	83 c4 10             	add    $0x10,%esp
+80107117:	c9                   	leave  
+80107118:	c3                   	ret    
+
+80107119 <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+80107119:	6a 00                	push   $0x0
+  pushl $0
+8010711b:	6a 00                	push   $0x0
+  jmp alltraps
+8010711d:	e9 15 fb ff ff       	jmp    80106c37 <alltraps>
+
+80107122 <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+80107122:	6a 00                	push   $0x0
+  pushl $1
+80107124:	6a 01                	push   $0x1
+  jmp alltraps
+80107126:	e9 0c fb ff ff       	jmp    80106c37 <alltraps>
+
+8010712b <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+8010712b:	6a 00                	push   $0x0
+  pushl $2
+8010712d:	6a 02                	push   $0x2
+  jmp alltraps
+8010712f:	e9 03 fb ff ff       	jmp    80106c37 <alltraps>
+
+80107134 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+80107134:	6a 00                	push   $0x0
+  pushl $3
+80107136:	6a 03                	push   $0x3
+  jmp alltraps
+80107138:	e9 fa fa ff ff       	jmp    80106c37 <alltraps>
+
+8010713d <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+8010713d:	6a 00                	push   $0x0
+  pushl $4
+8010713f:	6a 04                	push   $0x4
+  jmp alltraps
+80107141:	e9 f1 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107146 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80107146:	6a 00                	push   $0x0
+  pushl $5
+80107148:	6a 05                	push   $0x5
+  jmp alltraps
+8010714a:	e9 e8 fa ff ff       	jmp    80106c37 <alltraps>
+
+8010714f <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+8010714f:	6a 00                	push   $0x0
+  pushl $6
+80107151:	6a 06                	push   $0x6
+  jmp alltraps
+80107153:	e9 df fa ff ff       	jmp    80106c37 <alltraps>
+
+80107158 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80107158:	6a 00                	push   $0x0
+  pushl $7
+8010715a:	6a 07                	push   $0x7
+  jmp alltraps
+8010715c:	e9 d6 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107161 <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+80107161:	6a 08                	push   $0x8
+  jmp alltraps
+80107163:	e9 cf fa ff ff       	jmp    80106c37 <alltraps>
+
+80107168 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80107168:	6a 00                	push   $0x0
+  pushl $9
+8010716a:	6a 09                	push   $0x9
+  jmp alltraps
+8010716c:	e9 c6 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107171 <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+80107171:	6a 0a                	push   $0xa
+  jmp alltraps
+80107173:	e9 bf fa ff ff       	jmp    80106c37 <alltraps>
+
+80107178 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80107178:	6a 0b                	push   $0xb
+  jmp alltraps
+8010717a:	e9 b8 fa ff ff       	jmp    80106c37 <alltraps>
+
+8010717f <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+8010717f:	6a 0c                	push   $0xc
+  jmp alltraps
+80107181:	e9 b1 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107186 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80107186:	6a 0d                	push   $0xd
+  jmp alltraps
+80107188:	e9 aa fa ff ff       	jmp    80106c37 <alltraps>
+
+8010718d <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+8010718d:	6a 0e                	push   $0xe
+  jmp alltraps
+8010718f:	e9 a3 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107194 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80107194:	6a 00                	push   $0x0
+  pushl $15
+80107196:	6a 0f                	push   $0xf
+  jmp alltraps
+80107198:	e9 9a fa ff ff       	jmp    80106c37 <alltraps>
+
+8010719d <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+8010719d:	6a 00                	push   $0x0
+  pushl $16
+8010719f:	6a 10                	push   $0x10
+  jmp alltraps
+801071a1:	e9 91 fa ff ff       	jmp    80106c37 <alltraps>
+
+801071a6 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+801071a6:	6a 11                	push   $0x11
+  jmp alltraps
+801071a8:	e9 8a fa ff ff       	jmp    80106c37 <alltraps>
+
+801071ad <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+801071ad:	6a 00                	push   $0x0
+  pushl $18
+801071af:	6a 12                	push   $0x12
+  jmp alltraps
+801071b1:	e9 81 fa ff ff       	jmp    80106c37 <alltraps>
+
+801071b6 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+801071b6:	6a 00                	push   $0x0
+  pushl $19
+801071b8:	6a 13                	push   $0x13
+  jmp alltraps
+801071ba:	e9 78 fa ff ff       	jmp    80106c37 <alltraps>
+
+801071bf <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+801071bf:	6a 00                	push   $0x0
+  pushl $20
+801071c1:	6a 14                	push   $0x14
+  jmp alltraps
+801071c3:	e9 6f fa ff ff       	jmp    80106c37 <alltraps>
+
+801071c8 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+801071c8:	6a 00                	push   $0x0
+  pushl $21
+801071ca:	6a 15                	push   $0x15
+  jmp alltraps
+801071cc:	e9 66 fa ff ff       	jmp    80106c37 <alltraps>
+
+801071d1 <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+801071d1:	6a 00                	push   $0x0
+  pushl $22
+801071d3:	6a 16                	push   $0x16
+  jmp alltraps
+801071d5:	e9 5d fa ff ff       	jmp    80106c37 <alltraps>
+
+801071da <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+801071da:	6a 00                	push   $0x0
+  pushl $23
+801071dc:	6a 17                	push   $0x17
+  jmp alltraps
+801071de:	e9 54 fa ff ff       	jmp    80106c37 <alltraps>
+
+801071e3 <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+801071e3:	6a 00                	push   $0x0
+  pushl $24
+801071e5:	6a 18                	push   $0x18
+  jmp alltraps
+801071e7:	e9 4b fa ff ff       	jmp    80106c37 <alltraps>
+
+801071ec <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+801071ec:	6a 00                	push   $0x0
+  pushl $25
+801071ee:	6a 19                	push   $0x19
+  jmp alltraps
+801071f0:	e9 42 fa ff ff       	jmp    80106c37 <alltraps>
+
+801071f5 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+801071f5:	6a 00                	push   $0x0
+  pushl $26
+801071f7:	6a 1a                	push   $0x1a
+  jmp alltraps
+801071f9:	e9 39 fa ff ff       	jmp    80106c37 <alltraps>
+
+801071fe <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+801071fe:	6a 00                	push   $0x0
+  pushl $27
+80107200:	6a 1b                	push   $0x1b
+  jmp alltraps
+80107202:	e9 30 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107207 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+80107207:	6a 00                	push   $0x0
+  pushl $28
+80107209:	6a 1c                	push   $0x1c
+  jmp alltraps
+8010720b:	e9 27 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107210 <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+80107210:	6a 00                	push   $0x0
+  pushl $29
+80107212:	6a 1d                	push   $0x1d
+  jmp alltraps
+80107214:	e9 1e fa ff ff       	jmp    80106c37 <alltraps>
+
+80107219 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+80107219:	6a 00                	push   $0x0
+  pushl $30
+8010721b:	6a 1e                	push   $0x1e
+  jmp alltraps
+8010721d:	e9 15 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107222 <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+80107222:	6a 00                	push   $0x0
+  pushl $31
+80107224:	6a 1f                	push   $0x1f
+  jmp alltraps
+80107226:	e9 0c fa ff ff       	jmp    80106c37 <alltraps>
+
+8010722b <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+8010722b:	6a 00                	push   $0x0
+  pushl $32
+8010722d:	6a 20                	push   $0x20
+  jmp alltraps
+8010722f:	e9 03 fa ff ff       	jmp    80106c37 <alltraps>
+
+80107234 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+80107234:	6a 00                	push   $0x0
+  pushl $33
+80107236:	6a 21                	push   $0x21
+  jmp alltraps
+80107238:	e9 fa f9 ff ff       	jmp    80106c37 <alltraps>
+
+8010723d <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+8010723d:	6a 00                	push   $0x0
+  pushl $34
+8010723f:	6a 22                	push   $0x22
+  jmp alltraps
+80107241:	e9 f1 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107246 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80107246:	6a 00                	push   $0x0
+  pushl $35
+80107248:	6a 23                	push   $0x23
+  jmp alltraps
+8010724a:	e9 e8 f9 ff ff       	jmp    80106c37 <alltraps>
+
+8010724f <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+8010724f:	6a 00                	push   $0x0
+  pushl $36
+80107251:	6a 24                	push   $0x24
+  jmp alltraps
+80107253:	e9 df f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107258 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80107258:	6a 00                	push   $0x0
+  pushl $37
+8010725a:	6a 25                	push   $0x25
+  jmp alltraps
+8010725c:	e9 d6 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107261 <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+80107261:	6a 00                	push   $0x0
+  pushl $38
+80107263:	6a 26                	push   $0x26
+  jmp alltraps
+80107265:	e9 cd f9 ff ff       	jmp    80106c37 <alltraps>
+
+8010726a <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+8010726a:	6a 00                	push   $0x0
+  pushl $39
+8010726c:	6a 27                	push   $0x27
+  jmp alltraps
+8010726e:	e9 c4 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107273 <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+80107273:	6a 00                	push   $0x0
+  pushl $40
+80107275:	6a 28                	push   $0x28
+  jmp alltraps
+80107277:	e9 bb f9 ff ff       	jmp    80106c37 <alltraps>
+
+8010727c <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+8010727c:	6a 00                	push   $0x0
+  pushl $41
+8010727e:	6a 29                	push   $0x29
+  jmp alltraps
+80107280:	e9 b2 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107285 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80107285:	6a 00                	push   $0x0
+  pushl $42
+80107287:	6a 2a                	push   $0x2a
+  jmp alltraps
+80107289:	e9 a9 f9 ff ff       	jmp    80106c37 <alltraps>
+
+8010728e <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+8010728e:	6a 00                	push   $0x0
+  pushl $43
+80107290:	6a 2b                	push   $0x2b
+  jmp alltraps
+80107292:	e9 a0 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107297 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80107297:	6a 00                	push   $0x0
+  pushl $44
+80107299:	6a 2c                	push   $0x2c
+  jmp alltraps
+8010729b:	e9 97 f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072a0 <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+801072a0:	6a 00                	push   $0x0
+  pushl $45
+801072a2:	6a 2d                	push   $0x2d
+  jmp alltraps
+801072a4:	e9 8e f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072a9 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+801072a9:	6a 00                	push   $0x0
+  pushl $46
+801072ab:	6a 2e                	push   $0x2e
+  jmp alltraps
+801072ad:	e9 85 f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072b2 <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+801072b2:	6a 00                	push   $0x0
+  pushl $47
+801072b4:	6a 2f                	push   $0x2f
+  jmp alltraps
+801072b6:	e9 7c f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072bb <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+801072bb:	6a 00                	push   $0x0
+  pushl $48
+801072bd:	6a 30                	push   $0x30
+  jmp alltraps
+801072bf:	e9 73 f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072c4 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+801072c4:	6a 00                	push   $0x0
+  pushl $49
+801072c6:	6a 31                	push   $0x31
+  jmp alltraps
+801072c8:	e9 6a f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072cd <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+801072cd:	6a 00                	push   $0x0
+  pushl $50
+801072cf:	6a 32                	push   $0x32
+  jmp alltraps
+801072d1:	e9 61 f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072d6 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+801072d6:	6a 00                	push   $0x0
+  pushl $51
+801072d8:	6a 33                	push   $0x33
+  jmp alltraps
+801072da:	e9 58 f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072df <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+801072df:	6a 00                	push   $0x0
+  pushl $52
+801072e1:	6a 34                	push   $0x34
+  jmp alltraps
+801072e3:	e9 4f f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072e8 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+801072e8:	6a 00                	push   $0x0
+  pushl $53
+801072ea:	6a 35                	push   $0x35
+  jmp alltraps
+801072ec:	e9 46 f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072f1 <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+801072f1:	6a 00                	push   $0x0
+  pushl $54
+801072f3:	6a 36                	push   $0x36
+  jmp alltraps
+801072f5:	e9 3d f9 ff ff       	jmp    80106c37 <alltraps>
+
+801072fa <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+801072fa:	6a 00                	push   $0x0
+  pushl $55
+801072fc:	6a 37                	push   $0x37
+  jmp alltraps
+801072fe:	e9 34 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107303 <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+80107303:	6a 00                	push   $0x0
+  pushl $56
+80107305:	6a 38                	push   $0x38
+  jmp alltraps
+80107307:	e9 2b f9 ff ff       	jmp    80106c37 <alltraps>
+
+8010730c <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+8010730c:	6a 00                	push   $0x0
+  pushl $57
+8010730e:	6a 39                	push   $0x39
+  jmp alltraps
+80107310:	e9 22 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107315 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+80107315:	6a 00                	push   $0x0
+  pushl $58
+80107317:	6a 3a                	push   $0x3a
+  jmp alltraps
+80107319:	e9 19 f9 ff ff       	jmp    80106c37 <alltraps>
+
+8010731e <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+8010731e:	6a 00                	push   $0x0
+  pushl $59
+80107320:	6a 3b                	push   $0x3b
+  jmp alltraps
+80107322:	e9 10 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107327 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+80107327:	6a 00                	push   $0x0
+  pushl $60
+80107329:	6a 3c                	push   $0x3c
+  jmp alltraps
+8010732b:	e9 07 f9 ff ff       	jmp    80106c37 <alltraps>
+
+80107330 <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+80107330:	6a 00                	push   $0x0
+  pushl $61
+80107332:	6a 3d                	push   $0x3d
+  jmp alltraps
+80107334:	e9 fe f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107339 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+80107339:	6a 00                	push   $0x0
+  pushl $62
+8010733b:	6a 3e                	push   $0x3e
+  jmp alltraps
+8010733d:	e9 f5 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107342 <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+80107342:	6a 00                	push   $0x0
+  pushl $63
+80107344:	6a 3f                	push   $0x3f
+  jmp alltraps
+80107346:	e9 ec f8 ff ff       	jmp    80106c37 <alltraps>
+
+8010734b <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+8010734b:	6a 00                	push   $0x0
+  pushl $64
+8010734d:	6a 40                	push   $0x40
+  jmp alltraps
+8010734f:	e9 e3 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107354 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80107354:	6a 00                	push   $0x0
+  pushl $65
+80107356:	6a 41                	push   $0x41
+  jmp alltraps
+80107358:	e9 da f8 ff ff       	jmp    80106c37 <alltraps>
+
+8010735d <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+8010735d:	6a 00                	push   $0x0
+  pushl $66
+8010735f:	6a 42                	push   $0x42
+  jmp alltraps
+80107361:	e9 d1 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107366 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80107366:	6a 00                	push   $0x0
+  pushl $67
+80107368:	6a 43                	push   $0x43
+  jmp alltraps
+8010736a:	e9 c8 f8 ff ff       	jmp    80106c37 <alltraps>
+
+8010736f <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+8010736f:	6a 00                	push   $0x0
+  pushl $68
+80107371:	6a 44                	push   $0x44
+  jmp alltraps
+80107373:	e9 bf f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107378 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80107378:	6a 00                	push   $0x0
+  pushl $69
+8010737a:	6a 45                	push   $0x45
+  jmp alltraps
+8010737c:	e9 b6 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107381 <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+80107381:	6a 00                	push   $0x0
+  pushl $70
+80107383:	6a 46                	push   $0x46
+  jmp alltraps
+80107385:	e9 ad f8 ff ff       	jmp    80106c37 <alltraps>
+
+8010738a <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+8010738a:	6a 00                	push   $0x0
+  pushl $71
+8010738c:	6a 47                	push   $0x47
+  jmp alltraps
+8010738e:	e9 a4 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107393 <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+80107393:	6a 00                	push   $0x0
+  pushl $72
+80107395:	6a 48                	push   $0x48
+  jmp alltraps
+80107397:	e9 9b f8 ff ff       	jmp    80106c37 <alltraps>
+
+8010739c <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+8010739c:	6a 00                	push   $0x0
+  pushl $73
+8010739e:	6a 49                	push   $0x49
+  jmp alltraps
+801073a0:	e9 92 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073a5 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+801073a5:	6a 00                	push   $0x0
+  pushl $74
+801073a7:	6a 4a                	push   $0x4a
+  jmp alltraps
+801073a9:	e9 89 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073ae <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+801073ae:	6a 00                	push   $0x0
+  pushl $75
+801073b0:	6a 4b                	push   $0x4b
+  jmp alltraps
+801073b2:	e9 80 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073b7 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+801073b7:	6a 00                	push   $0x0
+  pushl $76
+801073b9:	6a 4c                	push   $0x4c
+  jmp alltraps
+801073bb:	e9 77 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073c0 <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+801073c0:	6a 00                	push   $0x0
+  pushl $77
+801073c2:	6a 4d                	push   $0x4d
+  jmp alltraps
+801073c4:	e9 6e f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073c9 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+801073c9:	6a 00                	push   $0x0
+  pushl $78
+801073cb:	6a 4e                	push   $0x4e
+  jmp alltraps
+801073cd:	e9 65 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073d2 <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+801073d2:	6a 00                	push   $0x0
+  pushl $79
+801073d4:	6a 4f                	push   $0x4f
+  jmp alltraps
+801073d6:	e9 5c f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073db <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+801073db:	6a 00                	push   $0x0
+  pushl $80
+801073dd:	6a 50                	push   $0x50
+  jmp alltraps
+801073df:	e9 53 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073e4 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+801073e4:	6a 00                	push   $0x0
+  pushl $81
+801073e6:	6a 51                	push   $0x51
+  jmp alltraps
+801073e8:	e9 4a f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073ed <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+801073ed:	6a 00                	push   $0x0
+  pushl $82
+801073ef:	6a 52                	push   $0x52
+  jmp alltraps
+801073f1:	e9 41 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073f6 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+801073f6:	6a 00                	push   $0x0
+  pushl $83
+801073f8:	6a 53                	push   $0x53
+  jmp alltraps
+801073fa:	e9 38 f8 ff ff       	jmp    80106c37 <alltraps>
+
+801073ff <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+801073ff:	6a 00                	push   $0x0
+  pushl $84
+80107401:	6a 54                	push   $0x54
+  jmp alltraps
+80107403:	e9 2f f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107408 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+80107408:	6a 00                	push   $0x0
+  pushl $85
+8010740a:	6a 55                	push   $0x55
+  jmp alltraps
+8010740c:	e9 26 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107411 <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+80107411:	6a 00                	push   $0x0
+  pushl $86
+80107413:	6a 56                	push   $0x56
+  jmp alltraps
+80107415:	e9 1d f8 ff ff       	jmp    80106c37 <alltraps>
+
+8010741a <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+8010741a:	6a 00                	push   $0x0
+  pushl $87
+8010741c:	6a 57                	push   $0x57
+  jmp alltraps
+8010741e:	e9 14 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107423 <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+80107423:	6a 00                	push   $0x0
+  pushl $88
+80107425:	6a 58                	push   $0x58
+  jmp alltraps
+80107427:	e9 0b f8 ff ff       	jmp    80106c37 <alltraps>
+
+8010742c <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+8010742c:	6a 00                	push   $0x0
+  pushl $89
+8010742e:	6a 59                	push   $0x59
+  jmp alltraps
+80107430:	e9 02 f8 ff ff       	jmp    80106c37 <alltraps>
+
+80107435 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+80107435:	6a 00                	push   $0x0
+  pushl $90
+80107437:	6a 5a                	push   $0x5a
+  jmp alltraps
+80107439:	e9 f9 f7 ff ff       	jmp    80106c37 <alltraps>
+
+8010743e <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+8010743e:	6a 00                	push   $0x0
+  pushl $91
+80107440:	6a 5b                	push   $0x5b
+  jmp alltraps
+80107442:	e9 f0 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107447 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+80107447:	6a 00                	push   $0x0
+  pushl $92
+80107449:	6a 5c                	push   $0x5c
+  jmp alltraps
+8010744b:	e9 e7 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107450 <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+80107450:	6a 00                	push   $0x0
+  pushl $93
+80107452:	6a 5d                	push   $0x5d
+  jmp alltraps
+80107454:	e9 de f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107459 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+80107459:	6a 00                	push   $0x0
+  pushl $94
+8010745b:	6a 5e                	push   $0x5e
+  jmp alltraps
+8010745d:	e9 d5 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107462 <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+80107462:	6a 00                	push   $0x0
+  pushl $95
+80107464:	6a 5f                	push   $0x5f
+  jmp alltraps
+80107466:	e9 cc f7 ff ff       	jmp    80106c37 <alltraps>
+
+8010746b <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+8010746b:	6a 00                	push   $0x0
+  pushl $96
+8010746d:	6a 60                	push   $0x60
+  jmp alltraps
+8010746f:	e9 c3 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107474 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80107474:	6a 00                	push   $0x0
+  pushl $97
+80107476:	6a 61                	push   $0x61
+  jmp alltraps
+80107478:	e9 ba f7 ff ff       	jmp    80106c37 <alltraps>
+
+8010747d <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+8010747d:	6a 00                	push   $0x0
+  pushl $98
+8010747f:	6a 62                	push   $0x62
+  jmp alltraps
+80107481:	e9 b1 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107486 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80107486:	6a 00                	push   $0x0
+  pushl $99
+80107488:	6a 63                	push   $0x63
+  jmp alltraps
+8010748a:	e9 a8 f7 ff ff       	jmp    80106c37 <alltraps>
+
+8010748f <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+8010748f:	6a 00                	push   $0x0
+  pushl $100
+80107491:	6a 64                	push   $0x64
+  jmp alltraps
+80107493:	e9 9f f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107498 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80107498:	6a 00                	push   $0x0
+  pushl $101
+8010749a:	6a 65                	push   $0x65
+  jmp alltraps
+8010749c:	e9 96 f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074a1 <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+801074a1:	6a 00                	push   $0x0
+  pushl $102
+801074a3:	6a 66                	push   $0x66
+  jmp alltraps
+801074a5:	e9 8d f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074aa <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+801074aa:	6a 00                	push   $0x0
+  pushl $103
+801074ac:	6a 67                	push   $0x67
+  jmp alltraps
+801074ae:	e9 84 f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074b3 <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+801074b3:	6a 00                	push   $0x0
+  pushl $104
+801074b5:	6a 68                	push   $0x68
+  jmp alltraps
+801074b7:	e9 7b f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074bc <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+801074bc:	6a 00                	push   $0x0
+  pushl $105
+801074be:	6a 69                	push   $0x69
+  jmp alltraps
+801074c0:	e9 72 f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074c5 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+801074c5:	6a 00                	push   $0x0
+  pushl $106
+801074c7:	6a 6a                	push   $0x6a
+  jmp alltraps
+801074c9:	e9 69 f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074ce <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+801074ce:	6a 00                	push   $0x0
+  pushl $107
+801074d0:	6a 6b                	push   $0x6b
+  jmp alltraps
+801074d2:	e9 60 f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074d7 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+801074d7:	6a 00                	push   $0x0
+  pushl $108
+801074d9:	6a 6c                	push   $0x6c
+  jmp alltraps
+801074db:	e9 57 f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074e0 <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+801074e0:	6a 00                	push   $0x0
+  pushl $109
+801074e2:	6a 6d                	push   $0x6d
+  jmp alltraps
+801074e4:	e9 4e f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074e9 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+801074e9:	6a 00                	push   $0x0
+  pushl $110
+801074eb:	6a 6e                	push   $0x6e
+  jmp alltraps
+801074ed:	e9 45 f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074f2 <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+801074f2:	6a 00                	push   $0x0
+  pushl $111
+801074f4:	6a 6f                	push   $0x6f
+  jmp alltraps
+801074f6:	e9 3c f7 ff ff       	jmp    80106c37 <alltraps>
+
+801074fb <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+801074fb:	6a 00                	push   $0x0
+  pushl $112
+801074fd:	6a 70                	push   $0x70
+  jmp alltraps
+801074ff:	e9 33 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107504 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+80107504:	6a 00                	push   $0x0
+  pushl $113
+80107506:	6a 71                	push   $0x71
+  jmp alltraps
+80107508:	e9 2a f7 ff ff       	jmp    80106c37 <alltraps>
+
+8010750d <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+8010750d:	6a 00                	push   $0x0
+  pushl $114
+8010750f:	6a 72                	push   $0x72
+  jmp alltraps
+80107511:	e9 21 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107516 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+80107516:	6a 00                	push   $0x0
+  pushl $115
+80107518:	6a 73                	push   $0x73
+  jmp alltraps
+8010751a:	e9 18 f7 ff ff       	jmp    80106c37 <alltraps>
+
+8010751f <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+8010751f:	6a 00                	push   $0x0
+  pushl $116
+80107521:	6a 74                	push   $0x74
+  jmp alltraps
+80107523:	e9 0f f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107528 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+80107528:	6a 00                	push   $0x0
+  pushl $117
+8010752a:	6a 75                	push   $0x75
+  jmp alltraps
+8010752c:	e9 06 f7 ff ff       	jmp    80106c37 <alltraps>
+
+80107531 <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+80107531:	6a 00                	push   $0x0
+  pushl $118
+80107533:	6a 76                	push   $0x76
+  jmp alltraps
+80107535:	e9 fd f6 ff ff       	jmp    80106c37 <alltraps>
+
+8010753a <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+8010753a:	6a 00                	push   $0x0
+  pushl $119
+8010753c:	6a 77                	push   $0x77
+  jmp alltraps
+8010753e:	e9 f4 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107543 <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+80107543:	6a 00                	push   $0x0
+  pushl $120
+80107545:	6a 78                	push   $0x78
+  jmp alltraps
+80107547:	e9 eb f6 ff ff       	jmp    80106c37 <alltraps>
+
+8010754c <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+8010754c:	6a 00                	push   $0x0
+  pushl $121
+8010754e:	6a 79                	push   $0x79
+  jmp alltraps
+80107550:	e9 e2 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107555 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+80107555:	6a 00                	push   $0x0
+  pushl $122
+80107557:	6a 7a                	push   $0x7a
+  jmp alltraps
+80107559:	e9 d9 f6 ff ff       	jmp    80106c37 <alltraps>
+
+8010755e <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+8010755e:	6a 00                	push   $0x0
+  pushl $123
+80107560:	6a 7b                	push   $0x7b
+  jmp alltraps
+80107562:	e9 d0 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107567 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+80107567:	6a 00                	push   $0x0
+  pushl $124
+80107569:	6a 7c                	push   $0x7c
+  jmp alltraps
+8010756b:	e9 c7 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107570 <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+80107570:	6a 00                	push   $0x0
+  pushl $125
+80107572:	6a 7d                	push   $0x7d
+  jmp alltraps
+80107574:	e9 be f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107579 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+80107579:	6a 00                	push   $0x0
+  pushl $126
+8010757b:	6a 7e                	push   $0x7e
+  jmp alltraps
+8010757d:	e9 b5 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107582 <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+80107582:	6a 00                	push   $0x0
+  pushl $127
+80107584:	6a 7f                	push   $0x7f
+  jmp alltraps
+80107586:	e9 ac f6 ff ff       	jmp    80106c37 <alltraps>
+
+8010758b <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+8010758b:	6a 00                	push   $0x0
+  pushl $128
+8010758d:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+80107592:	e9 a0 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107597 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+80107597:	6a 00                	push   $0x0
+  pushl $129
+80107599:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+8010759e:	e9 94 f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075a3 <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+801075a3:	6a 00                	push   $0x0
+  pushl $130
+801075a5:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+801075aa:	e9 88 f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075af <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+801075af:	6a 00                	push   $0x0
+  pushl $131
+801075b1:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+801075b6:	e9 7c f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075bb <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+801075bb:	6a 00                	push   $0x0
+  pushl $132
+801075bd:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+801075c2:	e9 70 f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075c7 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+801075c7:	6a 00                	push   $0x0
+  pushl $133
+801075c9:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+801075ce:	e9 64 f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075d3 <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+801075d3:	6a 00                	push   $0x0
+  pushl $134
+801075d5:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+801075da:	e9 58 f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075df <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+801075df:	6a 00                	push   $0x0
+  pushl $135
+801075e1:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+801075e6:	e9 4c f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075eb <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+801075eb:	6a 00                	push   $0x0
+  pushl $136
+801075ed:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+801075f2:	e9 40 f6 ff ff       	jmp    80106c37 <alltraps>
+
+801075f7 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+801075f7:	6a 00                	push   $0x0
+  pushl $137
+801075f9:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+801075fe:	e9 34 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107603 <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+80107603:	6a 00                	push   $0x0
+  pushl $138
+80107605:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+8010760a:	e9 28 f6 ff ff       	jmp    80106c37 <alltraps>
+
+8010760f <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+8010760f:	6a 00                	push   $0x0
+  pushl $139
+80107611:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+80107616:	e9 1c f6 ff ff       	jmp    80106c37 <alltraps>
+
+8010761b <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+8010761b:	6a 00                	push   $0x0
+  pushl $140
+8010761d:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+80107622:	e9 10 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107627 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+80107627:	6a 00                	push   $0x0
+  pushl $141
+80107629:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+8010762e:	e9 04 f6 ff ff       	jmp    80106c37 <alltraps>
+
+80107633 <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+80107633:	6a 00                	push   $0x0
+  pushl $142
+80107635:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+8010763a:	e9 f8 f5 ff ff       	jmp    80106c37 <alltraps>
+
+8010763f <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+8010763f:	6a 00                	push   $0x0
+  pushl $143
+80107641:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+80107646:	e9 ec f5 ff ff       	jmp    80106c37 <alltraps>
+
+8010764b <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+8010764b:	6a 00                	push   $0x0
+  pushl $144
+8010764d:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+80107652:	e9 e0 f5 ff ff       	jmp    80106c37 <alltraps>
+
+80107657 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+80107657:	6a 00                	push   $0x0
+  pushl $145
+80107659:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+8010765e:	e9 d4 f5 ff ff       	jmp    80106c37 <alltraps>
+
+80107663 <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+80107663:	6a 00                	push   $0x0
+  pushl $146
+80107665:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+8010766a:	e9 c8 f5 ff ff       	jmp    80106c37 <alltraps>
+
+8010766f <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+8010766f:	6a 00                	push   $0x0
+  pushl $147
+80107671:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80107676:	e9 bc f5 ff ff       	jmp    80106c37 <alltraps>
+
+8010767b <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+8010767b:	6a 00                	push   $0x0
+  pushl $148
+8010767d:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+80107682:	e9 b0 f5 ff ff       	jmp    80106c37 <alltraps>
+
+80107687 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80107687:	6a 00                	push   $0x0
+  pushl $149
+80107689:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+8010768e:	e9 a4 f5 ff ff       	jmp    80106c37 <alltraps>
+
+80107693 <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+80107693:	6a 00                	push   $0x0
+  pushl $150
+80107695:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+8010769a:	e9 98 f5 ff ff       	jmp    80106c37 <alltraps>
+
+8010769f <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+8010769f:	6a 00                	push   $0x0
+  pushl $151
+801076a1:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+801076a6:	e9 8c f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076ab <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+801076ab:	6a 00                	push   $0x0
+  pushl $152
+801076ad:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+801076b2:	e9 80 f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076b7 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+801076b7:	6a 00                	push   $0x0
+  pushl $153
+801076b9:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+801076be:	e9 74 f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076c3 <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+801076c3:	6a 00                	push   $0x0
+  pushl $154
+801076c5:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+801076ca:	e9 68 f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076cf <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+801076cf:	6a 00                	push   $0x0
+  pushl $155
+801076d1:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+801076d6:	e9 5c f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076db <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+801076db:	6a 00                	push   $0x0
+  pushl $156
+801076dd:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+801076e2:	e9 50 f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076e7 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+801076e7:	6a 00                	push   $0x0
+  pushl $157
+801076e9:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+801076ee:	e9 44 f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076f3 <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+801076f3:	6a 00                	push   $0x0
+  pushl $158
+801076f5:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+801076fa:	e9 38 f5 ff ff       	jmp    80106c37 <alltraps>
+
+801076ff <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+801076ff:	6a 00                	push   $0x0
+  pushl $159
+80107701:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+80107706:	e9 2c f5 ff ff       	jmp    80106c37 <alltraps>
+
+8010770b <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+8010770b:	6a 00                	push   $0x0
+  pushl $160
+8010770d:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+80107712:	e9 20 f5 ff ff       	jmp    80106c37 <alltraps>
+
+80107717 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+80107717:	6a 00                	push   $0x0
+  pushl $161
+80107719:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+8010771e:	e9 14 f5 ff ff       	jmp    80106c37 <alltraps>
+
+80107723 <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+80107723:	6a 00                	push   $0x0
+  pushl $162
+80107725:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+8010772a:	e9 08 f5 ff ff       	jmp    80106c37 <alltraps>
+
+8010772f <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+8010772f:	6a 00                	push   $0x0
+  pushl $163
+80107731:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+80107736:	e9 fc f4 ff ff       	jmp    80106c37 <alltraps>
+
+8010773b <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+8010773b:	6a 00                	push   $0x0
+  pushl $164
+8010773d:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+80107742:	e9 f0 f4 ff ff       	jmp    80106c37 <alltraps>
+
+80107747 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+80107747:	6a 00                	push   $0x0
+  pushl $165
+80107749:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+8010774e:	e9 e4 f4 ff ff       	jmp    80106c37 <alltraps>
+
+80107753 <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+80107753:	6a 00                	push   $0x0
+  pushl $166
+80107755:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+8010775a:	e9 d8 f4 ff ff       	jmp    80106c37 <alltraps>
+
+8010775f <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+8010775f:	6a 00                	push   $0x0
+  pushl $167
+80107761:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+80107766:	e9 cc f4 ff ff       	jmp    80106c37 <alltraps>
+
+8010776b <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+8010776b:	6a 00                	push   $0x0
+  pushl $168
+8010776d:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+80107772:	e9 c0 f4 ff ff       	jmp    80106c37 <alltraps>
+
+80107777 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80107777:	6a 00                	push   $0x0
+  pushl $169
+80107779:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+8010777e:	e9 b4 f4 ff ff       	jmp    80106c37 <alltraps>
+
+80107783 <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+80107783:	6a 00                	push   $0x0
+  pushl $170
+80107785:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+8010778a:	e9 a8 f4 ff ff       	jmp    80106c37 <alltraps>
+
+8010778f <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+8010778f:	6a 00                	push   $0x0
+  pushl $171
+80107791:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+80107796:	e9 9c f4 ff ff       	jmp    80106c37 <alltraps>
+
+8010779b <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+8010779b:	6a 00                	push   $0x0
+  pushl $172
+8010779d:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+801077a2:	e9 90 f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077a7 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+801077a7:	6a 00                	push   $0x0
+  pushl $173
+801077a9:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+801077ae:	e9 84 f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077b3 <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+801077b3:	6a 00                	push   $0x0
+  pushl $174
+801077b5:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+801077ba:	e9 78 f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077bf <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+801077bf:	6a 00                	push   $0x0
+  pushl $175
+801077c1:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+801077c6:	e9 6c f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077cb <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+801077cb:	6a 00                	push   $0x0
+  pushl $176
+801077cd:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+801077d2:	e9 60 f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077d7 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+801077d7:	6a 00                	push   $0x0
+  pushl $177
+801077d9:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+801077de:	e9 54 f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077e3 <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+801077e3:	6a 00                	push   $0x0
+  pushl $178
+801077e5:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+801077ea:	e9 48 f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077ef <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+801077ef:	6a 00                	push   $0x0
+  pushl $179
+801077f1:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+801077f6:	e9 3c f4 ff ff       	jmp    80106c37 <alltraps>
+
+801077fb <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+801077fb:	6a 00                	push   $0x0
+  pushl $180
+801077fd:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+80107802:	e9 30 f4 ff ff       	jmp    80106c37 <alltraps>
+
+80107807 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+80107807:	6a 00                	push   $0x0
+  pushl $181
+80107809:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+8010780e:	e9 24 f4 ff ff       	jmp    80106c37 <alltraps>
+
+80107813 <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+80107813:	6a 00                	push   $0x0
+  pushl $182
+80107815:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+8010781a:	e9 18 f4 ff ff       	jmp    80106c37 <alltraps>
+
+8010781f <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+8010781f:	6a 00                	push   $0x0
+  pushl $183
+80107821:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+80107826:	e9 0c f4 ff ff       	jmp    80106c37 <alltraps>
+
+8010782b <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+8010782b:	6a 00                	push   $0x0
+  pushl $184
+8010782d:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+80107832:	e9 00 f4 ff ff       	jmp    80106c37 <alltraps>
+
+80107837 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+80107837:	6a 00                	push   $0x0
+  pushl $185
+80107839:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+8010783e:	e9 f4 f3 ff ff       	jmp    80106c37 <alltraps>
+
+80107843 <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+80107843:	6a 00                	push   $0x0
+  pushl $186
+80107845:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+8010784a:	e9 e8 f3 ff ff       	jmp    80106c37 <alltraps>
+
+8010784f <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+8010784f:	6a 00                	push   $0x0
+  pushl $187
+80107851:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+80107856:	e9 dc f3 ff ff       	jmp    80106c37 <alltraps>
+
+8010785b <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+8010785b:	6a 00                	push   $0x0
+  pushl $188
+8010785d:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+80107862:	e9 d0 f3 ff ff       	jmp    80106c37 <alltraps>
+
+80107867 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+80107867:	6a 00                	push   $0x0
+  pushl $189
+80107869:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+8010786e:	e9 c4 f3 ff ff       	jmp    80106c37 <alltraps>
+
+80107873 <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+80107873:	6a 00                	push   $0x0
+  pushl $190
+80107875:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+8010787a:	e9 b8 f3 ff ff       	jmp    80106c37 <alltraps>
+
+8010787f <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+8010787f:	6a 00                	push   $0x0
+  pushl $191
+80107881:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80107886:	e9 ac f3 ff ff       	jmp    80106c37 <alltraps>
+
+8010788b <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+8010788b:	6a 00                	push   $0x0
+  pushl $192
+8010788d:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+80107892:	e9 a0 f3 ff ff       	jmp    80106c37 <alltraps>
+
+80107897 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+80107897:	6a 00                	push   $0x0
+  pushl $193
+80107899:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+8010789e:	e9 94 f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078a3 <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+801078a3:	6a 00                	push   $0x0
+  pushl $194
+801078a5:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+801078aa:	e9 88 f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078af <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+801078af:	6a 00                	push   $0x0
+  pushl $195
+801078b1:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+801078b6:	e9 7c f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078bb <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+801078bb:	6a 00                	push   $0x0
+  pushl $196
+801078bd:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+801078c2:	e9 70 f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078c7 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+801078c7:	6a 00                	push   $0x0
+  pushl $197
+801078c9:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+801078ce:	e9 64 f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078d3 <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+801078d3:	6a 00                	push   $0x0
+  pushl $198
+801078d5:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+801078da:	e9 58 f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078df <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+801078df:	6a 00                	push   $0x0
+  pushl $199
+801078e1:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+801078e6:	e9 4c f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078eb <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+801078eb:	6a 00                	push   $0x0
+  pushl $200
+801078ed:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+801078f2:	e9 40 f3 ff ff       	jmp    80106c37 <alltraps>
+
+801078f7 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+801078f7:	6a 00                	push   $0x0
+  pushl $201
+801078f9:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+801078fe:	e9 34 f3 ff ff       	jmp    80106c37 <alltraps>
+
+80107903 <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+80107903:	6a 00                	push   $0x0
+  pushl $202
+80107905:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+8010790a:	e9 28 f3 ff ff       	jmp    80106c37 <alltraps>
+
+8010790f <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+8010790f:	6a 00                	push   $0x0
+  pushl $203
+80107911:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+80107916:	e9 1c f3 ff ff       	jmp    80106c37 <alltraps>
+
+8010791b <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+8010791b:	6a 00                	push   $0x0
+  pushl $204
+8010791d:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+80107922:	e9 10 f3 ff ff       	jmp    80106c37 <alltraps>
+
+80107927 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+80107927:	6a 00                	push   $0x0
+  pushl $205
+80107929:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+8010792e:	e9 04 f3 ff ff       	jmp    80106c37 <alltraps>
+
+80107933 <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+80107933:	6a 00                	push   $0x0
+  pushl $206
+80107935:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+8010793a:	e9 f8 f2 ff ff       	jmp    80106c37 <alltraps>
+
+8010793f <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+8010793f:	6a 00                	push   $0x0
+  pushl $207
+80107941:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+80107946:	e9 ec f2 ff ff       	jmp    80106c37 <alltraps>
+
+8010794b <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+8010794b:	6a 00                	push   $0x0
+  pushl $208
+8010794d:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+80107952:	e9 e0 f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107957 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+80107957:	6a 00                	push   $0x0
+  pushl $209
+80107959:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+8010795e:	e9 d4 f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107963 <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+80107963:	6a 00                	push   $0x0
+  pushl $210
+80107965:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+8010796a:	e9 c8 f2 ff ff       	jmp    80106c37 <alltraps>
+
+8010796f <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+8010796f:	6a 00                	push   $0x0
+  pushl $211
+80107971:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80107976:	e9 bc f2 ff ff       	jmp    80106c37 <alltraps>
+
+8010797b <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+8010797b:	6a 00                	push   $0x0
+  pushl $212
+8010797d:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+80107982:	e9 b0 f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107987 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80107987:	6a 00                	push   $0x0
+  pushl $213
+80107989:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+8010798e:	e9 a4 f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107993 <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+80107993:	6a 00                	push   $0x0
+  pushl $214
+80107995:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+8010799a:	e9 98 f2 ff ff       	jmp    80106c37 <alltraps>
+
+8010799f <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+8010799f:	6a 00                	push   $0x0
+  pushl $215
+801079a1:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+801079a6:	e9 8c f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079ab <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+801079ab:	6a 00                	push   $0x0
+  pushl $216
+801079ad:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+801079b2:	e9 80 f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079b7 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+801079b7:	6a 00                	push   $0x0
+  pushl $217
+801079b9:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+801079be:	e9 74 f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079c3 <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+801079c3:	6a 00                	push   $0x0
+  pushl $218
+801079c5:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+801079ca:	e9 68 f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079cf <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+801079cf:	6a 00                	push   $0x0
+  pushl $219
+801079d1:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+801079d6:	e9 5c f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079db <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+801079db:	6a 00                	push   $0x0
+  pushl $220
+801079dd:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+801079e2:	e9 50 f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079e7 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+801079e7:	6a 00                	push   $0x0
+  pushl $221
+801079e9:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+801079ee:	e9 44 f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079f3 <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+801079f3:	6a 00                	push   $0x0
+  pushl $222
+801079f5:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+801079fa:	e9 38 f2 ff ff       	jmp    80106c37 <alltraps>
+
+801079ff <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+801079ff:	6a 00                	push   $0x0
+  pushl $223
+80107a01:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+80107a06:	e9 2c f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107a0b <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+80107a0b:	6a 00                	push   $0x0
+  pushl $224
+80107a0d:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+80107a12:	e9 20 f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107a17 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+80107a17:	6a 00                	push   $0x0
+  pushl $225
+80107a19:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+80107a1e:	e9 14 f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107a23 <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+80107a23:	6a 00                	push   $0x0
+  pushl $226
+80107a25:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+80107a2a:	e9 08 f2 ff ff       	jmp    80106c37 <alltraps>
+
+80107a2f <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+80107a2f:	6a 00                	push   $0x0
+  pushl $227
+80107a31:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+80107a36:	e9 fc f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a3b <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+80107a3b:	6a 00                	push   $0x0
+  pushl $228
+80107a3d:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+80107a42:	e9 f0 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a47 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+80107a47:	6a 00                	push   $0x0
+  pushl $229
+80107a49:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+80107a4e:	e9 e4 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a53 <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+80107a53:	6a 00                	push   $0x0
+  pushl $230
+80107a55:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+80107a5a:	e9 d8 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a5f <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+80107a5f:	6a 00                	push   $0x0
+  pushl $231
+80107a61:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+80107a66:	e9 cc f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a6b <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+80107a6b:	6a 00                	push   $0x0
+  pushl $232
+80107a6d:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+80107a72:	e9 c0 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a77 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80107a77:	6a 00                	push   $0x0
+  pushl $233
+80107a79:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+80107a7e:	e9 b4 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a83 <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+80107a83:	6a 00                	push   $0x0
+  pushl $234
+80107a85:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+80107a8a:	e9 a8 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a8f <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+80107a8f:	6a 00                	push   $0x0
+  pushl $235
+80107a91:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+80107a96:	e9 9c f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107a9b <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+80107a9b:	6a 00                	push   $0x0
+  pushl $236
+80107a9d:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+80107aa2:	e9 90 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107aa7 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+80107aa7:	6a 00                	push   $0x0
+  pushl $237
+80107aa9:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+80107aae:	e9 84 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107ab3 <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+80107ab3:	6a 00                	push   $0x0
+  pushl $238
+80107ab5:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+80107aba:	e9 78 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107abf <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+80107abf:	6a 00                	push   $0x0
+  pushl $239
+80107ac1:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+80107ac6:	e9 6c f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107acb <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+80107acb:	6a 00                	push   $0x0
+  pushl $240
+80107acd:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+80107ad2:	e9 60 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107ad7 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+80107ad7:	6a 00                	push   $0x0
+  pushl $241
+80107ad9:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+80107ade:	e9 54 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107ae3 <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+80107ae3:	6a 00                	push   $0x0
+  pushl $242
+80107ae5:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+80107aea:	e9 48 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107aef <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+80107aef:	6a 00                	push   $0x0
+  pushl $243
+80107af1:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+80107af6:	e9 3c f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107afb <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+80107afb:	6a 00                	push   $0x0
+  pushl $244
+80107afd:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+80107b02:	e9 30 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107b07 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+80107b07:	6a 00                	push   $0x0
+  pushl $245
+80107b09:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+80107b0e:	e9 24 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107b13 <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+80107b13:	6a 00                	push   $0x0
+  pushl $246
+80107b15:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+80107b1a:	e9 18 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107b1f <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+80107b1f:	6a 00                	push   $0x0
+  pushl $247
+80107b21:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+80107b26:	e9 0c f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107b2b <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+80107b2b:	6a 00                	push   $0x0
+  pushl $248
+80107b2d:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+80107b32:	e9 00 f1 ff ff       	jmp    80106c37 <alltraps>
+
+80107b37 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+80107b37:	6a 00                	push   $0x0
+  pushl $249
+80107b39:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+80107b3e:	e9 f4 f0 ff ff       	jmp    80106c37 <alltraps>
+
+80107b43 <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+80107b43:	6a 00                	push   $0x0
+  pushl $250
+80107b45:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+80107b4a:	e9 e8 f0 ff ff       	jmp    80106c37 <alltraps>
+
+80107b4f <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+80107b4f:	6a 00                	push   $0x0
+  pushl $251
+80107b51:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+80107b56:	e9 dc f0 ff ff       	jmp    80106c37 <alltraps>
+
+80107b5b <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+80107b5b:	6a 00                	push   $0x0
+  pushl $252
+80107b5d:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+80107b62:	e9 d0 f0 ff ff       	jmp    80106c37 <alltraps>
+
+80107b67 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+80107b67:	6a 00                	push   $0x0
+  pushl $253
+80107b69:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+80107b6e:	e9 c4 f0 ff ff       	jmp    80106c37 <alltraps>
+
+80107b73 <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+80107b73:	6a 00                	push   $0x0
+  pushl $254
+80107b75:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+80107b7a:	e9 b8 f0 ff ff       	jmp    80106c37 <alltraps>
+
+80107b7f <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+80107b7f:	6a 00                	push   $0x0
+  pushl $255
+80107b81:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80107b86:	e9 ac f0 ff ff       	jmp    80106c37 <alltraps>
+80107b8b:	66 90                	xchg   %ax,%ax
+80107b8d:	66 90                	xchg   %ax,%ax
+80107b8f:	90                   	nop
+
+80107b90 <walkpgdir>:
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+80107b90:	55                   	push   %ebp
+80107b91:	89 e5                	mov    %esp,%ebp
+80107b93:	57                   	push   %edi
+80107b94:	56                   	push   %esi
+80107b95:	89 d6                	mov    %edx,%esi
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+80107b97:	c1 ea 16             	shr    $0x16,%edx
+{
+80107b9a:	53                   	push   %ebx
+  pde = &pgdir[PDX(va)];
+80107b9b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+{
+80107b9e:	83 ec 0c             	sub    $0xc,%esp
+  if(*pde & PTE_P){
+80107ba1:	8b 1f                	mov    (%edi),%ebx
+80107ba3:	f6 c3 01             	test   $0x1,%bl
+80107ba6:	74 28                	je     80107bd0 <walkpgdir+0x40>
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80107ba8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80107bae:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+80107bb4:	89 f0                	mov    %esi,%eax
+}
+80107bb6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return &pgtab[PTX(va)];
+80107bb9:	c1 e8 0a             	shr    $0xa,%eax
+80107bbc:	25 fc 0f 00 00       	and    $0xffc,%eax
+80107bc1:	01 d8                	add    %ebx,%eax
+}
+80107bc3:	5b                   	pop    %ebx
+80107bc4:	5e                   	pop    %esi
+80107bc5:	5f                   	pop    %edi
+80107bc6:	5d                   	pop    %ebp
+80107bc7:	c3                   	ret    
+80107bc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107bcf:	90                   	nop
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+80107bd0:	85 c9                	test   %ecx,%ecx
+80107bd2:	74 2c                	je     80107c00 <walkpgdir+0x70>
+80107bd4:	e8 47 b4 ff ff       	call   80103020 <kalloc>
+80107bd9:	89 c3                	mov    %eax,%ebx
+80107bdb:	85 c0                	test   %eax,%eax
+80107bdd:	74 21                	je     80107c00 <walkpgdir+0x70>
+    memset(pgtab, 0, PGSIZE);
+80107bdf:	83 ec 04             	sub    $0x4,%esp
+80107be2:	68 00 10 00 00       	push   $0x1000
+80107be7:	6a 00                	push   $0x0
+80107be9:	50                   	push   %eax
+80107bea:	e8 f1 dc ff ff       	call   801058e0 <memset>
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+80107bef:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107bf5:	83 c4 10             	add    $0x10,%esp
+80107bf8:	83 c8 07             	or     $0x7,%eax
+80107bfb:	89 07                	mov    %eax,(%edi)
+80107bfd:	eb b5                	jmp    80107bb4 <walkpgdir+0x24>
+80107bff:	90                   	nop
+}
+80107c00:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 0;
+80107c03:	31 c0                	xor    %eax,%eax
+}
+80107c05:	5b                   	pop    %ebx
+80107c06:	5e                   	pop    %esi
+80107c07:	5f                   	pop    %edi
+80107c08:	5d                   	pop    %ebp
+80107c09:	c3                   	ret    
+80107c0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107c10 <mappages>:
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+80107c10:	55                   	push   %ebp
+80107c11:	89 e5                	mov    %esp,%ebp
+80107c13:	57                   	push   %edi
+80107c14:	89 c7                	mov    %eax,%edi
+  char *a, *last;
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107c16:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+{
+80107c1a:	56                   	push   %esi
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107c1b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  a = (char*)PGROUNDDOWN((uint)va);
+80107c20:	89 d6                	mov    %edx,%esi
+{
+80107c22:	53                   	push   %ebx
+  a = (char*)PGROUNDDOWN((uint)va);
+80107c23:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+{
+80107c29:	83 ec 1c             	sub    $0x1c,%esp
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+80107c2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80107c2f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107c32:	29 f0                	sub    %esi,%eax
+80107c34:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107c37:	eb 1f                	jmp    80107c58 <mappages+0x48>
+80107c39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+80107c40:	f6 00 01             	testb  $0x1,(%eax)
+80107c43:	75 45                	jne    80107c8a <mappages+0x7a>
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+80107c45:	0b 5d 0c             	or     0xc(%ebp),%ebx
+80107c48:	83 cb 01             	or     $0x1,%ebx
+80107c4b:	89 18                	mov    %ebx,(%eax)
+    if(a == last)
+80107c4d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80107c50:	74 2e                	je     80107c80 <mappages+0x70>
+      break;
+    a += PGSIZE;
+80107c52:	81 c6 00 10 00 00    	add    $0x1000,%esi
+  for(;;){
+80107c58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+80107c5b:	b9 01 00 00 00       	mov    $0x1,%ecx
+80107c60:	89 f2                	mov    %esi,%edx
+80107c62:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80107c65:	89 f8                	mov    %edi,%eax
+80107c67:	e8 24 ff ff ff       	call   80107b90 <walkpgdir>
+80107c6c:	85 c0                	test   %eax,%eax
+80107c6e:	75 d0                	jne    80107c40 <mappages+0x30>
+    pa += PGSIZE;
+  }
+  return 0;
+}
+80107c70:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80107c73:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80107c78:	5b                   	pop    %ebx
+80107c79:	5e                   	pop    %esi
+80107c7a:	5f                   	pop    %edi
+80107c7b:	5d                   	pop    %ebp
+80107c7c:	c3                   	ret    
+80107c7d:	8d 76 00             	lea    0x0(%esi),%esi
+80107c80:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80107c83:	31 c0                	xor    %eax,%eax
+}
+80107c85:	5b                   	pop    %ebx
+80107c86:	5e                   	pop    %esi
+80107c87:	5f                   	pop    %edi
+80107c88:	5d                   	pop    %ebp
+80107c89:	c3                   	ret    
+      panic("remap");
+80107c8a:	83 ec 0c             	sub    $0xc,%esp
+80107c8d:	68 28 94 10 80       	push   $0x80109428
+80107c92:	e8 f9 86 ff ff       	call   80100390 <panic>
+80107c97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107c9e:	66 90                	xchg   %ax,%ax
+
+80107ca0 <deallocuvm.part.0>:
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80107ca0:	55                   	push   %ebp
+80107ca1:	89 e5                	mov    %esp,%ebp
+80107ca3:	57                   	push   %edi
+80107ca4:	56                   	push   %esi
+80107ca5:	89 c6                	mov    %eax,%esi
+80107ca7:	53                   	push   %ebx
+80107ca8:	89 d3                	mov    %edx,%ebx
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+80107caa:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80107cb0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80107cb6:	83 ec 1c             	sub    $0x1c,%esp
+80107cb9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+80107cbc:	39 da                	cmp    %ebx,%edx
+80107cbe:	73 5b                	jae    80107d1b <deallocuvm.part.0+0x7b>
+80107cc0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80107cc3:	89 d7                	mov    %edx,%edi
+80107cc5:	eb 14                	jmp    80107cdb <deallocuvm.part.0+0x3b>
+80107cc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107cce:	66 90                	xchg   %ax,%ax
+80107cd0:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80107cd6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80107cd9:	76 40                	jbe    80107d1b <deallocuvm.part.0+0x7b>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+80107cdb:	31 c9                	xor    %ecx,%ecx
+80107cdd:	89 fa                	mov    %edi,%edx
+80107cdf:	89 f0                	mov    %esi,%eax
+80107ce1:	e8 aa fe ff ff       	call   80107b90 <walkpgdir>
+80107ce6:	89 c3                	mov    %eax,%ebx
+    if(!pte)
+80107ce8:	85 c0                	test   %eax,%eax
+80107cea:	74 44                	je     80107d30 <deallocuvm.part.0+0x90>
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+    else if((*pte & PTE_P) != 0){
+80107cec:	8b 00                	mov    (%eax),%eax
+80107cee:	a8 01                	test   $0x1,%al
+80107cf0:	74 de                	je     80107cd0 <deallocuvm.part.0+0x30>
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+80107cf2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107cf7:	74 47                	je     80107d40 <deallocuvm.part.0+0xa0>
+        panic("kfree");
+      char *v = P2V(pa);
+      kfree(v);
+80107cf9:	83 ec 0c             	sub    $0xc,%esp
+      char *v = P2V(pa);
+80107cfc:	05 00 00 00 80       	add    $0x80000000,%eax
+80107d01:	81 c7 00 10 00 00    	add    $0x1000,%edi
+      kfree(v);
+80107d07:	50                   	push   %eax
+80107d08:	e8 53 b1 ff ff       	call   80102e60 <kfree>
+      *pte = 0;
+80107d0d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80107d13:	83 c4 10             	add    $0x10,%esp
+  for(; a  < oldsz; a += PGSIZE){
+80107d16:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80107d19:	77 c0                	ja     80107cdb <deallocuvm.part.0+0x3b>
+    }
+  }
+  return newsz;
+}
+80107d1b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107d1e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107d21:	5b                   	pop    %ebx
+80107d22:	5e                   	pop    %esi
+80107d23:	5f                   	pop    %edi
+80107d24:	5d                   	pop    %ebp
+80107d25:	c3                   	ret    
+80107d26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107d2d:	8d 76 00             	lea    0x0(%esi),%esi
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+80107d30:	89 fa                	mov    %edi,%edx
+80107d32:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+80107d38:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+80107d3e:	eb 96                	jmp    80107cd6 <deallocuvm.part.0+0x36>
+        panic("kfree");
+80107d40:	83 ec 0c             	sub    $0xc,%esp
+80107d43:	68 7e 87 10 80       	push   $0x8010877e
+80107d48:	e8 43 86 ff ff       	call   80100390 <panic>
+80107d4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107d50 <seginit>:
+{
+80107d50:	f3 0f 1e fb          	endbr32 
+80107d54:	55                   	push   %ebp
+80107d55:	89 e5                	mov    %esp,%ebp
+80107d57:	83 ec 18             	sub    $0x18,%esp
+  c = &cpus[cpuid()];
+80107d5a:	e8 01 c8 ff ff       	call   80104560 <cpuid>
+  pd[0] = size-1;
+80107d5f:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80107d64:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80107d6a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+80107d6e:	c7 80 f8 51 11 80 ff 	movl   $0xffff,-0x7feeae08(%eax)
+80107d75:	ff 00 00 
+80107d78:	c7 80 fc 51 11 80 00 	movl   $0xcf9a00,-0x7feeae04(%eax)
+80107d7f:	9a cf 00 
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+80107d82:	c7 80 00 52 11 80 ff 	movl   $0xffff,-0x7feeae00(%eax)
+80107d89:	ff 00 00 
+80107d8c:	c7 80 04 52 11 80 00 	movl   $0xcf9200,-0x7feeadfc(%eax)
+80107d93:	92 cf 00 
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80107d96:	c7 80 08 52 11 80 ff 	movl   $0xffff,-0x7feeadf8(%eax)
+80107d9d:	ff 00 00 
+80107da0:	c7 80 0c 52 11 80 00 	movl   $0xcffa00,-0x7feeadf4(%eax)
+80107da7:	fa cf 00 
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+80107daa:	c7 80 10 52 11 80 ff 	movl   $0xffff,-0x7feeadf0(%eax)
+80107db1:	ff 00 00 
+80107db4:	c7 80 14 52 11 80 00 	movl   $0xcff200,-0x7feeadec(%eax)
+80107dbb:	f2 cf 00 
+  lgdt(c->gdt, sizeof(c->gdt));
+80107dbe:	05 f0 51 11 80       	add    $0x801151f0,%eax
+  pd[1] = (uint)p;
+80107dc3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+  pd[2] = (uint)p >> 16;
+80107dc7:	c1 e8 10             	shr    $0x10,%eax
+80107dca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+  asm volatile("lgdt (%0)" : : "r" (pd));
+80107dce:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80107dd1:	0f 01 10             	lgdtl  (%eax)
+}
+80107dd4:	c9                   	leave  
+80107dd5:	c3                   	ret    
+80107dd6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107ddd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107de0 <switchkvm>:
+{
+80107de0:	f3 0f 1e fb          	endbr32 
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80107de4:	a1 04 88 11 80       	mov    0x80118804,%eax
+80107de9:	05 00 00 00 80       	add    $0x80000000,%eax
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80107dee:	0f 22 d8             	mov    %eax,%cr3
+}
+80107df1:	c3                   	ret    
+80107df2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107df9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107e00 <switchuvm>:
+{
+80107e00:	f3 0f 1e fb          	endbr32 
+80107e04:	55                   	push   %ebp
+80107e05:	89 e5                	mov    %esp,%ebp
+80107e07:	57                   	push   %edi
+80107e08:	56                   	push   %esi
+80107e09:	53                   	push   %ebx
+80107e0a:	83 ec 1c             	sub    $0x1c,%esp
+80107e0d:	8b 75 08             	mov    0x8(%ebp),%esi
+  if(p == 0)
+80107e10:	85 f6                	test   %esi,%esi
+80107e12:	0f 84 cb 00 00 00    	je     80107ee3 <switchuvm+0xe3>
+  if(p->kstack == 0)
+80107e18:	8b 46 08             	mov    0x8(%esi),%eax
+80107e1b:	85 c0                	test   %eax,%eax
+80107e1d:	0f 84 da 00 00 00    	je     80107efd <switchuvm+0xfd>
+  if(p->pgdir == 0)
+80107e23:	8b 46 04             	mov    0x4(%esi),%eax
+80107e26:	85 c0                	test   %eax,%eax
+80107e28:	0f 84 c2 00 00 00    	je     80107ef0 <switchuvm+0xf0>
+  pushcli();
+80107e2e:	e8 9d d8 ff ff       	call   801056d0 <pushcli>
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80107e33:	e8 b8 c6 ff ff       	call   801044f0 <mycpu>
+80107e38:	89 c3                	mov    %eax,%ebx
+80107e3a:	e8 b1 c6 ff ff       	call   801044f0 <mycpu>
+80107e3f:	89 c7                	mov    %eax,%edi
+80107e41:	e8 aa c6 ff ff       	call   801044f0 <mycpu>
+80107e46:	83 c7 08             	add    $0x8,%edi
+80107e49:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107e4c:	e8 9f c6 ff ff       	call   801044f0 <mycpu>
+80107e51:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107e54:	ba 67 00 00 00       	mov    $0x67,%edx
+80107e59:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80107e60:	83 c0 08             	add    $0x8,%eax
+80107e63:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80107e6a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+80107e6f:	83 c1 08             	add    $0x8,%ecx
+80107e72:	c1 e8 18             	shr    $0x18,%eax
+80107e75:	c1 e9 10             	shr    $0x10,%ecx
+80107e78:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80107e7e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80107e84:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80107e89:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80107e90:	bb 10 00 00 00       	mov    $0x10,%ebx
+  mycpu()->gdt[SEG_TSS].s = 0;
+80107e95:	e8 56 c6 ff ff       	call   801044f0 <mycpu>
+80107e9a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80107ea1:	e8 4a c6 ff ff       	call   801044f0 <mycpu>
+80107ea6:	66 89 58 10          	mov    %bx,0x10(%eax)
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+80107eaa:	8b 5e 08             	mov    0x8(%esi),%ebx
+80107ead:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107eb3:	e8 38 c6 ff ff       	call   801044f0 <mycpu>
+80107eb8:	89 58 0c             	mov    %ebx,0xc(%eax)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+80107ebb:	e8 30 c6 ff ff       	call   801044f0 <mycpu>
+80107ec0:	66 89 78 6e          	mov    %di,0x6e(%eax)
+  asm volatile("ltr %0" : : "r" (sel));
+80107ec4:	b8 28 00 00 00       	mov    $0x28,%eax
+80107ec9:	0f 00 d8             	ltr    %ax
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+80107ecc:	8b 46 04             	mov    0x4(%esi),%eax
+80107ecf:	05 00 00 00 80       	add    $0x80000000,%eax
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80107ed4:	0f 22 d8             	mov    %eax,%cr3
+}
+80107ed7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107eda:	5b                   	pop    %ebx
+80107edb:	5e                   	pop    %esi
+80107edc:	5f                   	pop    %edi
+80107edd:	5d                   	pop    %ebp
+  popcli();
+80107ede:	e9 3d d8 ff ff       	jmp    80105720 <popcli>
+    panic("switchuvm: no process");
+80107ee3:	83 ec 0c             	sub    $0xc,%esp
+80107ee6:	68 2e 94 10 80       	push   $0x8010942e
+80107eeb:	e8 a0 84 ff ff       	call   80100390 <panic>
+    panic("switchuvm: no pgdir");
+80107ef0:	83 ec 0c             	sub    $0xc,%esp
+80107ef3:	68 59 94 10 80       	push   $0x80109459
+80107ef8:	e8 93 84 ff ff       	call   80100390 <panic>
+    panic("switchuvm: no kstack");
+80107efd:	83 ec 0c             	sub    $0xc,%esp
+80107f00:	68 44 94 10 80       	push   $0x80109444
+80107f05:	e8 86 84 ff ff       	call   80100390 <panic>
+80107f0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107f10 <inituvm>:
+{
+80107f10:	f3 0f 1e fb          	endbr32 
+80107f14:	55                   	push   %ebp
+80107f15:	89 e5                	mov    %esp,%ebp
+80107f17:	57                   	push   %edi
+80107f18:	56                   	push   %esi
+80107f19:	53                   	push   %ebx
+80107f1a:	83 ec 1c             	sub    $0x1c,%esp
+80107f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107f20:	8b 75 10             	mov    0x10(%ebp),%esi
+80107f23:	8b 7d 08             	mov    0x8(%ebp),%edi
+80107f26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(sz >= PGSIZE)
+80107f29:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80107f2f:	77 4b                	ja     80107f7c <inituvm+0x6c>
+  mem = kalloc();
+80107f31:	e8 ea b0 ff ff       	call   80103020 <kalloc>
+  memset(mem, 0, PGSIZE);
+80107f36:	83 ec 04             	sub    $0x4,%esp
+80107f39:	68 00 10 00 00       	push   $0x1000
+  mem = kalloc();
+80107f3e:	89 c3                	mov    %eax,%ebx
+  memset(mem, 0, PGSIZE);
+80107f40:	6a 00                	push   $0x0
+80107f42:	50                   	push   %eax
+80107f43:	e8 98 d9 ff ff       	call   801058e0 <memset>
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+80107f48:	58                   	pop    %eax
+80107f49:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107f4f:	5a                   	pop    %edx
+80107f50:	6a 06                	push   $0x6
+80107f52:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107f57:	31 d2                	xor    %edx,%edx
+80107f59:	50                   	push   %eax
+80107f5a:	89 f8                	mov    %edi,%eax
+80107f5c:	e8 af fc ff ff       	call   80107c10 <mappages>
+  memmove(mem, init, sz);
+80107f61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107f64:	89 75 10             	mov    %esi,0x10(%ebp)
+80107f67:	83 c4 10             	add    $0x10,%esp
+80107f6a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80107f6d:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80107f70:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107f73:	5b                   	pop    %ebx
+80107f74:	5e                   	pop    %esi
+80107f75:	5f                   	pop    %edi
+80107f76:	5d                   	pop    %ebp
+  memmove(mem, init, sz);
+80107f77:	e9 04 da ff ff       	jmp    80105980 <memmove>
+    panic("inituvm: more than a page");
+80107f7c:	83 ec 0c             	sub    $0xc,%esp
+80107f7f:	68 6d 94 10 80       	push   $0x8010946d
+80107f84:	e8 07 84 ff ff       	call   80100390 <panic>
+80107f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107f90 <loaduvm>:
+{
+80107f90:	f3 0f 1e fb          	endbr32 
+80107f94:	55                   	push   %ebp
+80107f95:	89 e5                	mov    %esp,%ebp
+80107f97:	57                   	push   %edi
+80107f98:	56                   	push   %esi
+80107f99:	53                   	push   %ebx
+80107f9a:	83 ec 1c             	sub    $0x1c,%esp
+80107f9d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107fa0:	8b 75 18             	mov    0x18(%ebp),%esi
+  if((uint) addr % PGSIZE != 0)
+80107fa3:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80107fa8:	0f 85 99 00 00 00    	jne    80108047 <loaduvm+0xb7>
+  for(i = 0; i < sz; i += PGSIZE){
+80107fae:	01 f0                	add    %esi,%eax
+80107fb0:	89 f3                	mov    %esi,%ebx
+80107fb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80107fb5:	8b 45 14             	mov    0x14(%ebp),%eax
+80107fb8:	01 f0                	add    %esi,%eax
+80107fba:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(i = 0; i < sz; i += PGSIZE){
+80107fbd:	85 f6                	test   %esi,%esi
+80107fbf:	75 15                	jne    80107fd6 <loaduvm+0x46>
+80107fc1:	eb 6d                	jmp    80108030 <loaduvm+0xa0>
+80107fc3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107fc7:	90                   	nop
+80107fc8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80107fce:	89 f0                	mov    %esi,%eax
+80107fd0:	29 d8                	sub    %ebx,%eax
+80107fd2:	39 c6                	cmp    %eax,%esi
+80107fd4:	76 5a                	jbe    80108030 <loaduvm+0xa0>
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80107fd6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107fd9:	8b 45 08             	mov    0x8(%ebp),%eax
+80107fdc:	31 c9                	xor    %ecx,%ecx
+80107fde:	29 da                	sub    %ebx,%edx
+80107fe0:	e8 ab fb ff ff       	call   80107b90 <walkpgdir>
+80107fe5:	85 c0                	test   %eax,%eax
+80107fe7:	74 51                	je     8010803a <loaduvm+0xaa>
+    pa = PTE_ADDR(*pte);
+80107fe9:	8b 00                	mov    (%eax),%eax
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80107feb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+    if(sz - i < PGSIZE)
+80107fee:	bf 00 10 00 00       	mov    $0x1000,%edi
+    pa = PTE_ADDR(*pte);
+80107ff3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    if(sz - i < PGSIZE)
+80107ff8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80107ffe:	0f 46 fb             	cmovbe %ebx,%edi
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80108001:	29 d9                	sub    %ebx,%ecx
+80108003:	05 00 00 00 80       	add    $0x80000000,%eax
+80108008:	57                   	push   %edi
+80108009:	51                   	push   %ecx
+8010800a:	50                   	push   %eax
+8010800b:	ff 75 10             	pushl  0x10(%ebp)
+8010800e:	e8 3d a4 ff ff       	call   80102450 <readi>
+80108013:	83 c4 10             	add    $0x10,%esp
+80108016:	39 f8                	cmp    %edi,%eax
+80108018:	74 ae                	je     80107fc8 <loaduvm+0x38>
+}
+8010801a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+8010801d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80108022:	5b                   	pop    %ebx
+80108023:	5e                   	pop    %esi
+80108024:	5f                   	pop    %edi
+80108025:	5d                   	pop    %ebp
+80108026:	c3                   	ret    
+80108027:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010802e:	66 90                	xchg   %ax,%ax
+80108030:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80108033:	31 c0                	xor    %eax,%eax
+}
+80108035:	5b                   	pop    %ebx
+80108036:	5e                   	pop    %esi
+80108037:	5f                   	pop    %edi
+80108038:	5d                   	pop    %ebp
+80108039:	c3                   	ret    
+      panic("loaduvm: address should exist");
+8010803a:	83 ec 0c             	sub    $0xc,%esp
+8010803d:	68 87 94 10 80       	push   $0x80109487
+80108042:	e8 49 83 ff ff       	call   80100390 <panic>
+    panic("loaduvm: addr must be page aligned");
+80108047:	83 ec 0c             	sub    $0xc,%esp
+8010804a:	68 28 95 10 80       	push   $0x80109528
+8010804f:	e8 3c 83 ff ff       	call   80100390 <panic>
+80108054:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010805b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010805f:	90                   	nop
+
+80108060 <allocuvm>:
+{
+80108060:	f3 0f 1e fb          	endbr32 
+80108064:	55                   	push   %ebp
+80108065:	89 e5                	mov    %esp,%ebp
+80108067:	57                   	push   %edi
+80108068:	56                   	push   %esi
+80108069:	53                   	push   %ebx
+8010806a:	83 ec 1c             	sub    $0x1c,%esp
+  if(newsz >= KERNBASE)
+8010806d:	8b 45 10             	mov    0x10(%ebp),%eax
+{
+80108070:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if(newsz >= KERNBASE)
+80108073:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80108076:	85 c0                	test   %eax,%eax
+80108078:	0f 88 b2 00 00 00    	js     80108130 <allocuvm+0xd0>
+  if(newsz < oldsz)
+8010807e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+    return oldsz;
+80108081:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(newsz < oldsz)
+80108084:	0f 82 96 00 00 00    	jb     80108120 <allocuvm+0xc0>
+  a = PGROUNDUP(oldsz);
+8010808a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80108090:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+  for(; a < newsz; a += PGSIZE){
+80108096:	39 75 10             	cmp    %esi,0x10(%ebp)
+80108099:	77 40                	ja     801080db <allocuvm+0x7b>
+8010809b:	e9 83 00 00 00       	jmp    80108123 <allocuvm+0xc3>
+    memset(mem, 0, PGSIZE);
+801080a0:	83 ec 04             	sub    $0x4,%esp
+801080a3:	68 00 10 00 00       	push   $0x1000
+801080a8:	6a 00                	push   $0x0
+801080aa:	50                   	push   %eax
+801080ab:	e8 30 d8 ff ff       	call   801058e0 <memset>
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+801080b0:	58                   	pop    %eax
+801080b1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801080b7:	5a                   	pop    %edx
+801080b8:	6a 06                	push   $0x6
+801080ba:	b9 00 10 00 00       	mov    $0x1000,%ecx
+801080bf:	89 f2                	mov    %esi,%edx
+801080c1:	50                   	push   %eax
+801080c2:	89 f8                	mov    %edi,%eax
+801080c4:	e8 47 fb ff ff       	call   80107c10 <mappages>
+801080c9:	83 c4 10             	add    $0x10,%esp
+801080cc:	85 c0                	test   %eax,%eax
+801080ce:	78 78                	js     80108148 <allocuvm+0xe8>
+  for(; a < newsz; a += PGSIZE){
+801080d0:	81 c6 00 10 00 00    	add    $0x1000,%esi
+801080d6:	39 75 10             	cmp    %esi,0x10(%ebp)
+801080d9:	76 48                	jbe    80108123 <allocuvm+0xc3>
+    mem = kalloc();
+801080db:	e8 40 af ff ff       	call   80103020 <kalloc>
+801080e0:	89 c3                	mov    %eax,%ebx
+    if(mem == 0){
+801080e2:	85 c0                	test   %eax,%eax
+801080e4:	75 ba                	jne    801080a0 <allocuvm+0x40>
+      cprintf("allocuvm out of memory\n");
+801080e6:	83 ec 0c             	sub    $0xc,%esp
+801080e9:	68 a5 94 10 80       	push   $0x801094a5
+801080ee:	e8 fd 85 ff ff       	call   801006f0 <cprintf>
+  if(newsz >= oldsz)
+801080f3:	8b 45 0c             	mov    0xc(%ebp),%eax
+801080f6:	83 c4 10             	add    $0x10,%esp
+801080f9:	39 45 10             	cmp    %eax,0x10(%ebp)
+801080fc:	74 32                	je     80108130 <allocuvm+0xd0>
+801080fe:	8b 55 10             	mov    0x10(%ebp),%edx
+80108101:	89 c1                	mov    %eax,%ecx
+80108103:	89 f8                	mov    %edi,%eax
+80108105:	e8 96 fb ff ff       	call   80107ca0 <deallocuvm.part.0>
+      return 0;
+8010810a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+}
+80108111:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80108114:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80108117:	5b                   	pop    %ebx
+80108118:	5e                   	pop    %esi
+80108119:	5f                   	pop    %edi
+8010811a:	5d                   	pop    %ebp
+8010811b:	c3                   	ret    
+8010811c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return oldsz;
+80108120:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+}
+80108123:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80108126:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80108129:	5b                   	pop    %ebx
+8010812a:	5e                   	pop    %esi
+8010812b:	5f                   	pop    %edi
+8010812c:	5d                   	pop    %ebp
+8010812d:	c3                   	ret    
+8010812e:	66 90                	xchg   %ax,%ax
+    return 0;
+80108130:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+}
+80108137:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010813a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010813d:	5b                   	pop    %ebx
+8010813e:	5e                   	pop    %esi
+8010813f:	5f                   	pop    %edi
+80108140:	5d                   	pop    %ebp
+80108141:	c3                   	ret    
+80108142:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      cprintf("allocuvm out of memory (2)\n");
+80108148:	83 ec 0c             	sub    $0xc,%esp
+8010814b:	68 bd 94 10 80       	push   $0x801094bd
+80108150:	e8 9b 85 ff ff       	call   801006f0 <cprintf>
+  if(newsz >= oldsz)
+80108155:	8b 45 0c             	mov    0xc(%ebp),%eax
+80108158:	83 c4 10             	add    $0x10,%esp
+8010815b:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010815e:	74 0c                	je     8010816c <allocuvm+0x10c>
+80108160:	8b 55 10             	mov    0x10(%ebp),%edx
+80108163:	89 c1                	mov    %eax,%ecx
+80108165:	89 f8                	mov    %edi,%eax
+80108167:	e8 34 fb ff ff       	call   80107ca0 <deallocuvm.part.0>
+      kfree(mem);
+8010816c:	83 ec 0c             	sub    $0xc,%esp
+8010816f:	53                   	push   %ebx
+80108170:	e8 eb ac ff ff       	call   80102e60 <kfree>
+      return 0;
+80108175:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010817c:	83 c4 10             	add    $0x10,%esp
+}
+8010817f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80108182:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80108185:	5b                   	pop    %ebx
+80108186:	5e                   	pop    %esi
+80108187:	5f                   	pop    %edi
+80108188:	5d                   	pop    %ebp
+80108189:	c3                   	ret    
+8010818a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80108190 <deallocuvm>:
+{
+80108190:	f3 0f 1e fb          	endbr32 
+80108194:	55                   	push   %ebp
+80108195:	89 e5                	mov    %esp,%ebp
+80108197:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010819a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010819d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(newsz >= oldsz)
+801081a0:	39 d1                	cmp    %edx,%ecx
+801081a2:	73 0c                	jae    801081b0 <deallocuvm+0x20>
+}
+801081a4:	5d                   	pop    %ebp
+801081a5:	e9 f6 fa ff ff       	jmp    80107ca0 <deallocuvm.part.0>
+801081aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801081b0:	89 d0                	mov    %edx,%eax
+801081b2:	5d                   	pop    %ebp
+801081b3:	c3                   	ret    
+801081b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801081bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801081bf:	90                   	nop
+
+801081c0 <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+801081c0:	f3 0f 1e fb          	endbr32 
+801081c4:	55                   	push   %ebp
+801081c5:	89 e5                	mov    %esp,%ebp
+801081c7:	57                   	push   %edi
+801081c8:	56                   	push   %esi
+801081c9:	53                   	push   %ebx
+801081ca:	83 ec 0c             	sub    $0xc,%esp
+801081cd:	8b 75 08             	mov    0x8(%ebp),%esi
+  uint i;
+
+  if(pgdir == 0)
+801081d0:	85 f6                	test   %esi,%esi
+801081d2:	74 55                	je     80108229 <freevm+0x69>
+  if(newsz >= oldsz)
+801081d4:	31 c9                	xor    %ecx,%ecx
+801081d6:	ba 00 00 00 80       	mov    $0x80000000,%edx
+801081db:	89 f0                	mov    %esi,%eax
+801081dd:	89 f3                	mov    %esi,%ebx
+801081df:	e8 bc fa ff ff       	call   80107ca0 <deallocuvm.part.0>
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+801081e4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+801081ea:	eb 0b                	jmp    801081f7 <freevm+0x37>
+801081ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801081f0:	83 c3 04             	add    $0x4,%ebx
+801081f3:	39 df                	cmp    %ebx,%edi
+801081f5:	74 23                	je     8010821a <freevm+0x5a>
+    if(pgdir[i] & PTE_P){
+801081f7:	8b 03                	mov    (%ebx),%eax
+801081f9:	a8 01                	test   $0x1,%al
+801081fb:	74 f3                	je     801081f0 <freevm+0x30>
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+801081fd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+      kfree(v);
+80108202:	83 ec 0c             	sub    $0xc,%esp
+80108205:	83 c3 04             	add    $0x4,%ebx
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+80108208:	05 00 00 00 80       	add    $0x80000000,%eax
+      kfree(v);
+8010820d:	50                   	push   %eax
+8010820e:	e8 4d ac ff ff       	call   80102e60 <kfree>
+80108213:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+80108216:	39 df                	cmp    %ebx,%edi
+80108218:	75 dd                	jne    801081f7 <freevm+0x37>
+    }
+  }
+  kfree((char*)pgdir);
+8010821a:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+8010821d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80108220:	5b                   	pop    %ebx
+80108221:	5e                   	pop    %esi
+80108222:	5f                   	pop    %edi
+80108223:	5d                   	pop    %ebp
+  kfree((char*)pgdir);
+80108224:	e9 37 ac ff ff       	jmp    80102e60 <kfree>
+    panic("freevm: no pgdir");
+80108229:	83 ec 0c             	sub    $0xc,%esp
+8010822c:	68 d9 94 10 80       	push   $0x801094d9
+80108231:	e8 5a 81 ff ff       	call   80100390 <panic>
+80108236:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010823d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80108240 <setupkvm>:
+{
+80108240:	f3 0f 1e fb          	endbr32 
+80108244:	55                   	push   %ebp
+80108245:	89 e5                	mov    %esp,%ebp
+80108247:	56                   	push   %esi
+80108248:	53                   	push   %ebx
+  if((pgdir = (pde_t*)kalloc()) == 0)
+80108249:	e8 d2 ad ff ff       	call   80103020 <kalloc>
+8010824e:	89 c6                	mov    %eax,%esi
+80108250:	85 c0                	test   %eax,%eax
+80108252:	74 42                	je     80108296 <setupkvm+0x56>
+  memset(pgdir, 0, PGSIZE);
+80108254:	83 ec 04             	sub    $0x4,%esp
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80108257:	bb 20 c4 10 80       	mov    $0x8010c420,%ebx
+  memset(pgdir, 0, PGSIZE);
+8010825c:	68 00 10 00 00       	push   $0x1000
+80108261:	6a 00                	push   $0x0
+80108263:	50                   	push   %eax
+80108264:	e8 77 d6 ff ff       	call   801058e0 <memset>
+80108269:	83 c4 10             	add    $0x10,%esp
+                (uint)k->phys_start, k->perm) < 0) {
+8010826c:	8b 43 04             	mov    0x4(%ebx),%eax
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+8010826f:	83 ec 08             	sub    $0x8,%esp
+80108272:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80108275:	ff 73 0c             	pushl  0xc(%ebx)
+80108278:	8b 13                	mov    (%ebx),%edx
+8010827a:	50                   	push   %eax
+8010827b:	29 c1                	sub    %eax,%ecx
+8010827d:	89 f0                	mov    %esi,%eax
+8010827f:	e8 8c f9 ff ff       	call   80107c10 <mappages>
+80108284:	83 c4 10             	add    $0x10,%esp
+80108287:	85 c0                	test   %eax,%eax
+80108289:	78 15                	js     801082a0 <setupkvm+0x60>
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+8010828b:	83 c3 10             	add    $0x10,%ebx
+8010828e:	81 fb 60 c4 10 80    	cmp    $0x8010c460,%ebx
+80108294:	75 d6                	jne    8010826c <setupkvm+0x2c>
+}
+80108296:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80108299:	89 f0                	mov    %esi,%eax
+8010829b:	5b                   	pop    %ebx
+8010829c:	5e                   	pop    %esi
+8010829d:	5d                   	pop    %ebp
+8010829e:	c3                   	ret    
+8010829f:	90                   	nop
+      freevm(pgdir);
+801082a0:	83 ec 0c             	sub    $0xc,%esp
+801082a3:	56                   	push   %esi
+      return 0;
+801082a4:	31 f6                	xor    %esi,%esi
+      freevm(pgdir);
+801082a6:	e8 15 ff ff ff       	call   801081c0 <freevm>
+      return 0;
+801082ab:	83 c4 10             	add    $0x10,%esp
+}
+801082ae:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801082b1:	89 f0                	mov    %esi,%eax
+801082b3:	5b                   	pop    %ebx
+801082b4:	5e                   	pop    %esi
+801082b5:	5d                   	pop    %ebp
+801082b6:	c3                   	ret    
+801082b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801082be:	66 90                	xchg   %ax,%ax
+
+801082c0 <kvmalloc>:
+{
+801082c0:	f3 0f 1e fb          	endbr32 
+801082c4:	55                   	push   %ebp
+801082c5:	89 e5                	mov    %esp,%ebp
+801082c7:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+801082ca:	e8 71 ff ff ff       	call   80108240 <setupkvm>
+801082cf:	a3 04 88 11 80       	mov    %eax,0x80118804
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+801082d4:	05 00 00 00 80       	add    $0x80000000,%eax
+801082d9:	0f 22 d8             	mov    %eax,%cr3
+}
+801082dc:	c9                   	leave  
+801082dd:	c3                   	ret    
+801082de:	66 90                	xchg   %ax,%ax
+
+801082e0 <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+801082e0:	f3 0f 1e fb          	endbr32 
+801082e4:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+801082e5:	31 c9                	xor    %ecx,%ecx
+{
+801082e7:	89 e5                	mov    %esp,%ebp
+801082e9:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+801082ec:	8b 55 0c             	mov    0xc(%ebp),%edx
+801082ef:	8b 45 08             	mov    0x8(%ebp),%eax
+801082f2:	e8 99 f8 ff ff       	call   80107b90 <walkpgdir>
+  if(pte == 0)
+801082f7:	85 c0                	test   %eax,%eax
+801082f9:	74 05                	je     80108300 <clearpteu+0x20>
+    panic("clearpteu");
+  *pte &= ~PTE_U;
+801082fb:	83 20 fb             	andl   $0xfffffffb,(%eax)
+}
+801082fe:	c9                   	leave  
+801082ff:	c3                   	ret    
+    panic("clearpteu");
+80108300:	83 ec 0c             	sub    $0xc,%esp
+80108303:	68 ea 94 10 80       	push   $0x801094ea
+80108308:	e8 83 80 ff ff       	call   80100390 <panic>
+8010830d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80108310 <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+80108310:	f3 0f 1e fb          	endbr32 
+80108314:	55                   	push   %ebp
+80108315:	89 e5                	mov    %esp,%ebp
+80108317:	57                   	push   %edi
+80108318:	56                   	push   %esi
+80108319:	53                   	push   %ebx
+8010831a:	83 ec 1c             	sub    $0x1c,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+8010831d:	e8 1e ff ff ff       	call   80108240 <setupkvm>
+80108322:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80108325:	85 c0                	test   %eax,%eax
+80108327:	0f 84 9b 00 00 00    	je     801083c8 <copyuvm+0xb8>
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+8010832d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80108330:	85 c9                	test   %ecx,%ecx
+80108332:	0f 84 90 00 00 00    	je     801083c8 <copyuvm+0xb8>
+80108338:	31 f6                	xor    %esi,%esi
+8010833a:	eb 46                	jmp    80108382 <copyuvm+0x72>
+8010833c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+80108340:	83 ec 04             	sub    $0x4,%esp
+80108343:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80108349:	68 00 10 00 00       	push   $0x1000
+8010834e:	57                   	push   %edi
+8010834f:	50                   	push   %eax
+80108350:	e8 2b d6 ff ff       	call   80105980 <memmove>
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+80108355:	58                   	pop    %eax
+80108356:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010835c:	5a                   	pop    %edx
+8010835d:	ff 75 e4             	pushl  -0x1c(%ebp)
+80108360:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80108365:	89 f2                	mov    %esi,%edx
+80108367:	50                   	push   %eax
+80108368:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010836b:	e8 a0 f8 ff ff       	call   80107c10 <mappages>
+80108370:	83 c4 10             	add    $0x10,%esp
+80108373:	85 c0                	test   %eax,%eax
+80108375:	78 61                	js     801083d8 <copyuvm+0xc8>
+  for(i = 0; i < sz; i += PGSIZE){
+80108377:	81 c6 00 10 00 00    	add    $0x1000,%esi
+8010837d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80108380:	76 46                	jbe    801083c8 <copyuvm+0xb8>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+80108382:	8b 45 08             	mov    0x8(%ebp),%eax
+80108385:	31 c9                	xor    %ecx,%ecx
+80108387:	89 f2                	mov    %esi,%edx
+80108389:	e8 02 f8 ff ff       	call   80107b90 <walkpgdir>
+8010838e:	85 c0                	test   %eax,%eax
+80108390:	74 61                	je     801083f3 <copyuvm+0xe3>
+    if(!(*pte & PTE_P))
+80108392:	8b 00                	mov    (%eax),%eax
+80108394:	a8 01                	test   $0x1,%al
+80108396:	74 4e                	je     801083e6 <copyuvm+0xd6>
+    pa = PTE_ADDR(*pte);
+80108398:	89 c7                	mov    %eax,%edi
+    flags = PTE_FLAGS(*pte);
+8010839a:	25 ff 0f 00 00       	and    $0xfff,%eax
+8010839f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    pa = PTE_ADDR(*pte);
+801083a2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+    if((mem = kalloc()) == 0)
+801083a8:	e8 73 ac ff ff       	call   80103020 <kalloc>
+801083ad:	89 c3                	mov    %eax,%ebx
+801083af:	85 c0                	test   %eax,%eax
+801083b1:	75 8d                	jne    80108340 <copyuvm+0x30>
+    }
+  }
+  return d;
+
+bad:
+  freevm(d);
+801083b3:	83 ec 0c             	sub    $0xc,%esp
+801083b6:	ff 75 e0             	pushl  -0x20(%ebp)
+801083b9:	e8 02 fe ff ff       	call   801081c0 <freevm>
+  return 0;
+801083be:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+801083c5:	83 c4 10             	add    $0x10,%esp
+}
+801083c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801083cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801083ce:	5b                   	pop    %ebx
+801083cf:	5e                   	pop    %esi
+801083d0:	5f                   	pop    %edi
+801083d1:	5d                   	pop    %ebp
+801083d2:	c3                   	ret    
+801083d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801083d7:	90                   	nop
+      kfree(mem);
+801083d8:	83 ec 0c             	sub    $0xc,%esp
+801083db:	53                   	push   %ebx
+801083dc:	e8 7f aa ff ff       	call   80102e60 <kfree>
+      goto bad;
+801083e1:	83 c4 10             	add    $0x10,%esp
+801083e4:	eb cd                	jmp    801083b3 <copyuvm+0xa3>
+      panic("copyuvm: page not present");
+801083e6:	83 ec 0c             	sub    $0xc,%esp
+801083e9:	68 0e 95 10 80       	push   $0x8010950e
+801083ee:	e8 9d 7f ff ff       	call   80100390 <panic>
+      panic("copyuvm: pte should exist");
+801083f3:	83 ec 0c             	sub    $0xc,%esp
+801083f6:	68 f4 94 10 80       	push   $0x801094f4
+801083fb:	e8 90 7f ff ff       	call   80100390 <panic>
+
+80108400 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+80108400:	f3 0f 1e fb          	endbr32 
+80108404:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80108405:	31 c9                	xor    %ecx,%ecx
+{
+80108407:	89 e5                	mov    %esp,%ebp
+80108409:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+8010840c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010840f:	8b 45 08             	mov    0x8(%ebp),%eax
+80108412:	e8 79 f7 ff ff       	call   80107b90 <walkpgdir>
+  if((*pte & PTE_P) == 0)
+80108417:	8b 00                	mov    (%eax),%eax
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+}
+80108419:	c9                   	leave  
+  if((*pte & PTE_U) == 0)
+8010841a:	89 c2                	mov    %eax,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+8010841c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((*pte & PTE_U) == 0)
+80108421:	83 e2 05             	and    $0x5,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+80108424:	05 00 00 00 80       	add    $0x80000000,%eax
+80108429:	83 fa 05             	cmp    $0x5,%edx
+8010842c:	ba 00 00 00 00       	mov    $0x0,%edx
+80108431:	0f 45 c2             	cmovne %edx,%eax
+}
+80108434:	c3                   	ret    
+80108435:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010843c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80108440 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+80108440:	f3 0f 1e fb          	endbr32 
+80108444:	55                   	push   %ebp
+80108445:	89 e5                	mov    %esp,%ebp
+80108447:	57                   	push   %edi
+80108448:	56                   	push   %esi
+80108449:	53                   	push   %ebx
+8010844a:	83 ec 0c             	sub    $0xc,%esp
+8010844d:	8b 75 14             	mov    0x14(%ebp),%esi
+80108450:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80108453:	85 f6                	test   %esi,%esi
+80108455:	75 3c                	jne    80108493 <copyout+0x53>
+80108457:	eb 67                	jmp    801084c0 <copyout+0x80>
+80108459:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (va - va0);
+80108460:	8b 55 0c             	mov    0xc(%ebp),%edx
+80108463:	89 fb                	mov    %edi,%ebx
+80108465:	29 d3                	sub    %edx,%ebx
+80108467:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    if(n > len)
+8010846d:	39 f3                	cmp    %esi,%ebx
+8010846f:	0f 47 de             	cmova  %esi,%ebx
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+80108472:	29 fa                	sub    %edi,%edx
+80108474:	83 ec 04             	sub    $0x4,%esp
+80108477:	01 c2                	add    %eax,%edx
+80108479:	53                   	push   %ebx
+8010847a:	ff 75 10             	pushl  0x10(%ebp)
+8010847d:	52                   	push   %edx
+8010847e:	e8 fd d4 ff ff       	call   80105980 <memmove>
+    len -= n;
+    buf += n;
+80108483:	01 5d 10             	add    %ebx,0x10(%ebp)
+    va = va0 + PGSIZE;
+80108486:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+  while(len > 0){
+8010848c:	83 c4 10             	add    $0x10,%esp
+8010848f:	29 de                	sub    %ebx,%esi
+80108491:	74 2d                	je     801084c0 <copyout+0x80>
+    va0 = (uint)PGROUNDDOWN(va);
+80108493:	89 d7                	mov    %edx,%edi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80108495:	83 ec 08             	sub    $0x8,%esp
+    va0 = (uint)PGROUNDDOWN(va);
+80108498:	89 55 0c             	mov    %edx,0xc(%ebp)
+8010849b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+    pa0 = uva2ka(pgdir, (char*)va0);
+801084a1:	57                   	push   %edi
+801084a2:	ff 75 08             	pushl  0x8(%ebp)
+801084a5:	e8 56 ff ff ff       	call   80108400 <uva2ka>
+    if(pa0 == 0)
+801084aa:	83 c4 10             	add    $0x10,%esp
+801084ad:	85 c0                	test   %eax,%eax
+801084af:	75 af                	jne    80108460 <copyout+0x20>
+  }
+  return 0;
+}
+801084b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+801084b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801084b9:	5b                   	pop    %ebx
+801084ba:	5e                   	pop    %esi
+801084bb:	5f                   	pop    %edi
+801084bc:	5d                   	pop    %ebp
+801084bd:	c3                   	ret    
+801084be:	66 90                	xchg   %ax,%ax
+801084c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801084c3:	31 c0                	xor    %eax,%eax
+}
+801084c5:	5b                   	pop    %ebx
+801084c6:	5e                   	pop    %esi
+801084c7:	5f                   	pop    %edi
+801084c8:	5d                   	pop    %ebp
+801084c9:	c3                   	ret    
diff -ruN xv6-public/kernel.sym xv6-public_mine/kernel.sym
--- xv6-public/kernel.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/kernel.sym	2021-09-30 23:42:02.580889570 +0530
@@ -0,0 +1,549 @@
+80100000 .text
+801084e0 .rodata
+8010a000 .data
+8010c520 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 .comment
+00000000 bio.c
+00000000 console.c
+8010c520 cons
+8010c558 panicked
+80100410 consputc.part.0
+801005e0 printint
+80108588 digits.1616
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+80101ba0 bfree
+80101c20 balloc
+80101d30 iget
+80101e20 bmap
+80102760 namex
+00000000 ide.c
+80102a60 idestart
+8010c580 idelock
+8010c560 havedisk1
+8010c564 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kbd.c
+8010c5b4 shift.1427
+801088c0 shiftcode
+801087c0 togglecode
+801087a0 charcode.1428
+8010a200 normalmap
+8010a100 shiftmap
+8010a000 ctlmap
+00000000 lapic.c
+00000000 log.c
+80103580 install_trans
+80103620 write_head
+00000000 main.c
+801039d0 mpmain
+80103a10 mpenter
+00000000 mp.c
+80103b60 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+80104180 allocproc
+8010c000 first.1698
+8010c5b8 initproc
+80108b8c states.1724
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+80108c00 syscalls
+00000000 sysfile.c
+80105d20 create
+80105ec0 argfd.constprop.0
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80106f90 uartgetc
+8010c5bc uart
+80106fc0 uartputc.part.0
+00000000 vm.c
+80107b90 walkpgdir
+80107c10 mappages
+80107ca0 deallocuvm.part.0
+8010c420 kmap
+80100290 consoleread
+80107ae3 vector242
+8010753a vector119
+8010000c entry
+8010741a vector87
+80107411 vector86
+80105aa0 safestrcpy
+80106060 sys_close
+80107b4f vector251
+8010743e vector91
+80107234 vector33
+80106b70 sys_history
+80107723 vector162
+80104af0 yield
+80115080 log
+80115040 kmem
+80107987 vector213
+801074d7 vector108
+80107010 uartinit
+8010728e vector43
+80111f20 oldBuf
+801032b0 lapiceoi
+80107747 vector165
+80105100 sys_yield2
+80107837 vector185
+80102d70 ioapicinit
+80107516 vector115
+801019e0 fileread
+80107555 vector122
+801069b0 sys_sbrk
+80115160 ioapicid
+801076db vector156
+80107b07 vector245
+80115034 ioapic
+80107867 vector189
+80107158 vector7
+80107330 vector61
+801071e3 vector24
+801074f2 vector111
+801078eb vector200
+80107366 vector67
+80107603 vector138
+801073a5 vector74
+801048f0 sched
+80105980 memmove
+8010730c vector57
+80105cb0 syscall
+80107993 vector214
+80107486 vector99
+80104560 cpuid
+80102550 writei
+80107627 vector141
+80106910 sys_fork
+8010d5c0 bcache
+8010779b vector172
+80107ad7 vector241
+80105670 getcallerpcs
+80106570 sys_mkdir
+80107b67 vector253
+80107134 vector3
+8010712b vector2
+80102680 namecmp
+80107a2f vector227
+80107963 vector210
+80105c70 argstr
+80105050 updatestatistics
+801042d0 pqueue_create
+80107a0b vector224
+8010727c vector41
+801006f0 cprintf
+80101860 filedup
+80102a20 namei
+801071c8 vector21
+80100040 binit
+801077d7 vector177
+80107531 vector118
+80107381 vector70
+80107378 vector69
+80107aa7 vector237
+8010734b vector64
+801071fe vector27
+801075bb vector132
+80104310 pqueue_insert
+80107843 vector186
+80105f80 sys_read
+801079b7 vector217
+80105b20 fetchint
+80108240 setupkvm
+801059e0 memcpy
+801081c0 freevm
+80107122 vector1
+801077e3 vector178
+80107261 vector38
+80102e60 kfree
+80107ab3 vector238
+801044f0 mycpu
+80102280 iput
+801075c7 vector133
+8010739c vector73
+8010764b vector144
+80107b73 vector254
+80115720 queue3
+80101ef0 readsb
+8010c004 nextpid
+80107498 vector101
+8010796f vector211
+80103be0 mpinit
+801077b3 vector174
+80107aef vector243
+801017d0 fileinit
+80105650 initlock
+801008e0 shiftbufright
+8010758b vector128
+80115840 queue2
+80108440 copyout
+801073e4 vector81
+80104b40 sleep
+801032d0 microdelay
+80107186 vector13
+801072d6 vector51
+8010719d vector16
+80111fa0 input
+80107acb vector240
+801072f1 vector54
+801071b6 vector19
+80107447 vector92
+80107afb vector244
+80102420 stati
+8010761b vector140
+80106950 sys_kill
+801072a0 vector45
+801073d2 vector79
+80103ef0 pipeclose
+80107a47 vector229
+801076f3 vector158
+801060b0 sys_fstat
+80100680 consolewrite
+8010726a vector39
+8010776b vector168
+80103790 end_op
+80107246 vector35
+80104d10 wait2
+80107504 vector113
+80102f00 freerange
+80107570 vector125
+80100b60 copyBufferToScreen
+80108060 allocuvm
+80106c4f trapret
+801051f0 reset_priority
+801079ab vector216
+80107342 vector63
+801071f5 vector26
+80107897 vector193
+80103190 lapicinit
+801078bb vector196
+80107957 vector209
+8010713d vector4
+80107783 vector170
+8010c5c0 stack
+801075eb vector136
+80107171 vector10
+80107933 vector206
+80102230 iunlock
+80106a00 sys_sleep
+80107b7f vector255
+80107807 vector181
+8010731e vector59
+80107408 vector85
+801073ff vector84
+8010781f vector183
+801076ff vector159
+8010797b vector212
+80106100 sys_link
+801072b2 vector47
+80107a3b vector228
+80107285 vector42
+8010750d vector114
+80108400 uva2ka
+801077bf vector175
+8010763f vector143
+801017f0 filealloc
+80104e70 wakeup
+801075a3 vector130
+80107b13 vector246
+80107168 vector9
+80107633 vector142
+8010748f vector100
+801078f7 vector201
+801082e0 clearpteu
+80104580 myproc
+80106c60 tvinit
+80107327 vector60
+801071da vector23
+80102120 idup
+80107a9b vector236
+80103170 kbdintr
+801050e0 sys_set_prio
+80106430 sys_open
+80107a5f vector231
+80101360 history
+8010735d vector66
+80107210 vector29
+80102450 readi
+801075df vector135
+80100c70 consoleintr
+80104ee0 kill
+801073c0 vector77
+80101fd0 ialloc
+801077fb vector180
+80118804 kpgdir
+8010794b vector208
+80103380 cmostime
+80107100 uartintr
+80105330 decpriority
+8010747d vector98
+80107474 vector97
+80100b40 earaseContentOnInputBuf
+801077cb vector176
+801078a3 vector194
+8010722b vector32
+80118808 end
+801078df vector199
+801075af vector131
+80107b5b vector252
+80101a80 filewrite
+80107119 vector0
+80105bc0 argint
+80101470 exec
+80107657 vector145
+80105ff0 sys_write
+80105890 release
+80105b60 fetchstr
+801074ce vector107
+80107273 vector40
+80104c00 wait
+801008a0 copybuffToBeShifted
+801074a1 vector102
+80112040 buf2
+8010b000 entrypgdir
+0010000c _start
+80107303 vector56
+8010736f vector68
+8010714f vector6
+8010c48c _binary_initcode_end
+80100000 multiboot_header
+80107597 vector129
+80104850 scheduler
+801026a0 dirlookup
+801078c7 vector197
+801018b0 fileclose
+80103720 begin_op
+801076ab vector152
+801120c0 lengthOfOldBuf
+801082c0 kvmalloc
+80107a53 vector230
+801059f0 strncmp
+80107258 vector37
+80107927 vector205
+80107717 vector161
+80117fc0 tickslock
+80103f90 pipewrite
+80105a40 strncpy
+8010738a vector71
+80108310 copyuvm
+801129c0 ftable
+8010770b vector160
+80105c10 argptr
+8010799f vector215
+801076e7 vector157
+80105f10 sys_dup
+801074fb vector112
+80100390 panic
+80104280 forkret
+80107813 vector182
+8010717f vector12
+80105930 memcmp
+80103090 kbdgetc
+801074e0 vector109
+801071bf vector20
+80104730 fork
+801072e8 vector53
+801071ad vector18
+0000008a _binary_entryother_size
+80115180 cpus
+801055b0 releasesleep
+80107462 vector95
+80105780 holding
+801133c0 sb
+801057d0 acquire
+80107a23 vector226
+80102a40 nameiparent
+801072c4 vector49
+80107297 vector44
+8011507c lapic
+801073c9 vector78
+80106c37 alltraps
+801077a7 vector173
+801120e0 HistoryMem
+80107528 vector117
+80112940 buffToBeShifted
+80115960 queue1
+801073ed vector82
+801079f3 vector222
+80107161 vector8
+80107687 vector149
+80102090 iupdate
+8010a000 data
+801058e0 memset
+80107a6b vector232
+80103a30 main
+80107de0 switchkvm
+801074c5 vector106
+801079db vector220
+80106bb0 sys_wait2
+80107435 vector90
+8010772f vector163
+80107a83 vector234
+80103900 log_write
+80105550 acquiresleep
+80106250 sys_unlink
+80107339 vector62
+801071ec vector25
+801078d3 vector198
+80107543 vector120
+8010c48c _binary_entryother_start
+80102f50 kinit1
+801072cd vector50
+80107194 vector15
+8010769f vector151
+801073f6 vector83
+8010742c vector89
+80107423 vector88
+80106d10 trap
+80106ab0 sys_uptime
+801077ef vector179
+8010723d vector34
+801072a9 vector46
+801009a0 shiftbufleft
+801075d3 vector134
+801043d0 pqueue_size
+801079ff vector223
+80118000 idt
+801079c3 vector218
+80104440 pinit
+80108190 deallocuvm
+80107a17 vector225
+80103290 lapicid
+8010784f vector187
+801046b0 growproc
+801055f0 holdingsleep
+80115700 ncpu
+80107219 vector30
+801045b0 userinit
+801000d0 bread
+80107582 vector127
+80104090 piperead
+80118800 ticks
+8010788b vector192
+80107753 vector166
+80101400 consoleinit
+80100a70 earaseCurrentLineOnScreen
+801073b7 vector76
+801073ae vector75
+80102bd0 ideintr
+801078af vector195
+80107693 vector150
+80107315 vector58
+80107b2b vector248
+8010755e vector123
+8010746b vector96
+80107222 vector31
+8010790f vector203
+80100c00 saveCMDinHistoryMem
+8010760f vector139
+801076b7 vector153
+8010773b vector164
+80104f70 procdump
+8010754c vector121
+801070d0 uartputc
+80107146 vector5
+8010775f vector167
+801076cf vector155
+80107b37 vector249
+801001f0 brelse
+80107b43 vector250
+80107567 vector124
+801074e9 vector110
+8010791b vector204
+80102150 ilock
+80106730 sys_exec
+801075f7 vector137
+801054c0 inc_tickcounter
+8010c460 _binary_initcode_start
+80100b00 copybuffToBeShiftedToOldBuf
+80105b03 swtch
+80107b1f vector247
+801071d1 vector22
+80104390 pqueue_get
+80107903 vector202
+80107d50 seginit
+801023f0 iunlockput
+80107393 vector72
+801072fa vector55
+80107579 vector126
+80107354 vector65
+80107207 vector28
+8010c516 _binary_entryother_end
+80107777 vector169
+801001b0 bwrite
+80107a77 vector233
+80100ba0 copyBufferToInputBuf
+80106ce0 idtinit
+801049b0 exit
+80106940 sys_wait
+80106920 sys_exit
+80102960 dirlink
+0000002c _binary_initcode_size
+8010766f vector147
+80105510 initsleeplock
+80102b40 ideinit
+80107f90 loaduvm
+801074b3 vector104
+8010751f vector116
+801043e0 pqueue_remove
+80115a80 ptable
+80102e20 ioapicenable
+80105720 popcli
+8010c008 vectors
+801072df vector52
+801071a6 vector17
+8010782b vector184
+80105ae0 strlen
+80106830 sys_pipe
+80101f30 iinit
+80103dc0 picinit
+8010793f vector207
+80107f10 inituvm
+80107873 vector190
+80107abf vector239
+80107459 vector94
+80107450 vector93
+80103680 initlog
+8010785b vector188
+801072bb vector48
+80102c70 iderw
+801079cf vector219
+8010767b vector148
+801079e7 vector221
+80103020 kalloc
+80113360 devsw
+80106990 sys_getpid
+80106ae0 sys_draw
+801073db vector80
+8010778f vector171
+801076c3 vector154
+8010724f vector36
+80103de0 pipealloc
+80107a8f vector235
+801074bc vector105
+80106680 sys_chdir
+801133e0 icache
+80107663 vector146
+8010787f vector191
+801074aa vector103
+801065e0 sys_mknod
+801032e0 lapicstartap
+80107e00 switchuvm
+801056d0 pushcli
+80102fc0 kinit2
+80107178 vector11
+8010718d vector14
+80101990 filestat
Binary files xv6-public/_kill and xv6-public_mine/_kill differ
diff -ruN xv6-public/kill.asm xv6-public_mine/kill.asm
--- xv6-public/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/kill.asm	2021-09-30 23:42:23.024398473 +0530
@@ -0,0 +1,1224 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 30                	jle    51 <main+0x51>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 23 02 00 00       	call   260 <atoi>
+  3d:	89 04 24             	mov    %eax,(%esp)
+  40:	e8 be 02 00 00       	call   303 <kill>
+  for(i=1; i<argc; i++)
+  45:	83 c4 10             	add    $0x10,%esp
+  48:	39 f3                	cmp    %esi,%ebx
+  4a:	75 e4                	jne    30 <main+0x30>
+  exit();
+  4c:	e8 82 02 00 00       	call   2d3 <exit>
+    printf(2, "usage: kill pid...\n");
+  51:	50                   	push   %eax
+  52:	50                   	push   %eax
+  53:	68 b8 07 00 00       	push   $0x7b8
+  58:	6a 02                	push   $0x2
+  5a:	e8 f1 03 00 00       	call   450 <printf>
+    exit();
+  5f:	e8 6f 02 00 00       	call   2d3 <exit>
+  64:	66 90                	xchg   %ax,%ax
+  66:	66 90                	xchg   %ax,%ax
+  68:	66 90                	xchg   %ax,%ax
+  6a:	66 90                	xchg   %ax,%ax
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	f3 0f 1e fb          	endbr32 
+  74:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  75:	31 c0                	xor    %eax,%eax
+{
+  77:	89 e5                	mov    %esp,%ebp
+  79:	53                   	push   %ebx
+  7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  87:	83 c0 01             	add    $0x1,%eax
+  8a:	84 d2                	test   %dl,%dl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	89 c8                	mov    %ecx,%eax
+  90:	5b                   	pop    %ebx
+  91:	5d                   	pop    %ebp
+  92:	c3                   	ret    
+  93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	53                   	push   %ebx
+  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  ae:	0f b6 01             	movzbl (%ecx),%eax
+  b1:	0f b6 1a             	movzbl (%edx),%ebx
+  b4:	84 c0                	test   %al,%al
+  b6:	75 19                	jne    d1 <strcmp+0x31>
+  b8:	eb 26                	jmp    e0 <strcmp+0x40>
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  c4:	83 c1 01             	add    $0x1,%ecx
+  c7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ca:	0f b6 1a             	movzbl (%edx),%ebx
+  cd:	84 c0                	test   %al,%al
+  cf:	74 0f                	je     e0 <strcmp+0x40>
+  d1:	38 d8                	cmp    %bl,%al
+  d3:	74 eb                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d5:	29 d8                	sub    %ebx,%eax
+}
+  d7:	5b                   	pop    %ebx
+  d8:	5d                   	pop    %ebp
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ee:	66 90                	xchg   %ax,%ax
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fa:	80 3a 00             	cmpb   $0x0,(%edx)
+  fd:	74 21                	je     120 <strlen+0x30>
+  ff:	31 c0                	xor    %eax,%eax
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 108:	83 c0 01             	add    $0x1,%eax
+ 10b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 10f:	89 c1                	mov    %eax,%ecx
+ 111:	75 f5                	jne    108 <strlen+0x18>
+    ;
+  return n;
+}
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 120:	31 c9                	xor    %ecx,%ecx
+}
+ 122:	5d                   	pop    %ebp
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	c3                   	ret    
+ 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	57                   	push   %edi
+ 138:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 13b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 141:	89 d7                	mov    %edx,%edi
+ 143:	fc                   	cld    
+ 144:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 146:	89 d0                	mov    %edx,%eax
+ 148:	5f                   	pop    %edi
+ 149:	5d                   	pop    %ebp
+ 14a:	c3                   	ret    
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	8b 45 08             	mov    0x8(%ebp),%eax
+ 15a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 15e:	0f b6 10             	movzbl (%eax),%edx
+ 161:	84 d2                	test   %dl,%dl
+ 163:	75 16                	jne    17b <strchr+0x2b>
+ 165:	eb 21                	jmp    188 <strchr+0x38>
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+ 170:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	84 d2                	test   %dl,%dl
+ 179:	74 0d                	je     188 <strchr+0x38>
+    if(*s == c)
+ 17b:	38 d1                	cmp    %dl,%cl
+ 17d:	75 f1                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 17f:	5d                   	pop    %ebp
+ 180:	c3                   	ret    
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 188:	31 c0                	xor    %eax,%eax
+}
+ 18a:	5d                   	pop    %ebp
+ 18b:	c3                   	ret    
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	57                   	push   %edi
+ 198:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 199:	31 f6                	xor    %esi,%esi
+{
+ 19b:	53                   	push   %ebx
+ 19c:	89 f3                	mov    %esi,%ebx
+ 19e:	83 ec 1c             	sub    $0x1c,%esp
+ 1a1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a4:	eb 33                	jmp    1d9 <gets+0x49>
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1b6:	6a 01                	push   $0x1
+ 1b8:	50                   	push   %eax
+ 1b9:	6a 00                	push   $0x0
+ 1bb:	e8 2b 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1c0:	83 c4 10             	add    $0x10,%esp
+ 1c3:	85 c0                	test   %eax,%eax
+ 1c5:	7e 1c                	jle    1e3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1cb:	83 c7 01             	add    $0x1,%edi
+ 1ce:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1d1:	3c 0a                	cmp    $0xa,%al
+ 1d3:	74 23                	je     1f8 <gets+0x68>
+ 1d5:	3c 0d                	cmp    $0xd,%al
+ 1d7:	74 1f                	je     1f8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	89 fe                	mov    %edi,%esi
+ 1de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1e1:	7c cd                	jl     1b0 <gets+0x20>
+ 1e3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ee:	5b                   	pop    %ebx
+ 1ef:	5e                   	pop    %esi
+ 1f0:	5f                   	pop    %edi
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f7:	90                   	nop
+ 1f8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fe:	01 de                	add    %ebx,%esi
+ 200:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 202:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 205:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 208:	5b                   	pop    %ebx
+ 209:	5e                   	pop    %esi
+ 20a:	5f                   	pop    %edi
+ 20b:	5d                   	pop    %ebp
+ 20c:	c3                   	ret    
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	56                   	push   %esi
+ 218:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	6a 00                	push   $0x0
+ 21e:	ff 75 08             	pushl  0x8(%ebp)
+ 221:	e8 ed 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 226:	83 c4 10             	add    $0x10,%esp
+ 229:	85 c0                	test   %eax,%eax
+ 22b:	78 2b                	js     258 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 22d:	83 ec 08             	sub    $0x8,%esp
+ 230:	ff 75 0c             	pushl  0xc(%ebp)
+ 233:	89 c3                	mov    %eax,%ebx
+ 235:	50                   	push   %eax
+ 236:	e8 f0 00 00 00       	call   32b <fstat>
+  close(fd);
+ 23b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 240:	e8 b6 00 00 00       	call   2fb <close>
+  return r;
+ 245:	83 c4 10             	add    $0x10,%esp
+}
+ 248:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 24b:	89 f0                	mov    %esi,%eax
+ 24d:	5b                   	pop    %ebx
+ 24e:	5e                   	pop    %esi
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 258:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 25d:	eb e9                	jmp    248 <stat+0x38>
+ 25f:	90                   	nop
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	53                   	push   %ebx
+ 268:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26b:	0f be 02             	movsbl (%edx),%eax
+ 26e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 271:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 274:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 279:	77 1a                	ja     295 <atoi+0x35>
+ 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	89 c8                	mov    %ecx,%eax
+ 297:	5b                   	pop    %ebx
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	f3 0f 1e fb          	endbr32 
+ 2a4:	55                   	push   %ebp
+ 2a5:	89 e5                	mov    %esp,%ebp
+ 2a7:	57                   	push   %edi
+ 2a8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2ab:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ae:	56                   	push   %esi
+ 2af:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	85 c0                	test   %eax,%eax
+ 2b4:	7e 0f                	jle    2c5 <memmove+0x25>
+ 2b6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b8:	89 d7                	mov    %edx,%edi
+ 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <draw>:
+SYSCALL(draw)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <history>:
+SYSCALL(history)
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <wait2>:
+SYSCALL(wait2)
+ 383:	b8 18 00 00 00       	mov    $0x18,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <set_prio>:
+SYSCALL(set_prio)
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <yield2>:
+SYSCALL(yield2)
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 d4 07 00 00 	movzbl 0x7d4(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 ce fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 474:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 55 fe ff ff       	call   2f3 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
+      if(c == 'd'){
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
+  write(fd, &c, 1);
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 f5 fd ff ff       	call   2f3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 e1 fd ff ff       	call   2f3 <write>
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 516:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 519:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
+    }
+  }
+}
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+        ap++;
+ 57a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 584:	e8 6a fd ff ff       	call   2f3 <write>
+        ap++;
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        s = (char*)*ap;
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
+        while(*s != 0){
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
+          s = "(null)";
+ 5d6:	bb cc 07 00 00       	mov    $0x7cc,%ebx
+        while(*s != 0){
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 f1 fc ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 625:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
+{
+ 648:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 671:	5b                   	pop    %ebx
+  freep = p;
+ 672:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 84 0a 00 00       	mov    %eax,0xa84
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6c0:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 700:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 70f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 3b fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
+  hp->s.size = nu;
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
+  return freep;
+ 737:	a1 84 0a 00 00       	mov    0xa84,%eax
+      if((p = morecore(nunits)) == 0)
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
+        return 0;
+  }
+}
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 746:	31 c0                	xor    %eax,%eax
+}
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
+        p->s.size -= nunits;
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 767:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 787:	0a 00 00 
+    base.s.size = 0;
+ 78a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+    base.s.ptr = freep = prevp = &base;
+ 78f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 796:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 799:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 79b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 7a2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/kill.d xv6-public_mine/kill.d
--- xv6-public/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/kill.d	2021-09-30 23:42:22.804328671 +0530
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/kill.o and xv6-public_mine/kill.o differ
diff -ruN xv6-public/kill.sym xv6-public_mine/kill.sym
--- xv6-public/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/kill.sym	2021-09-30 23:42:23.140434622 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007b8 .rodata
+000007e8 .eh_frame
+00000a84 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007d4 digits.1101
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000070 strcpy
+0000038b set_prio
+00000450 printf
+000002a0 memmove
+0000031b mknod
+00000190 gets
+00000353 getpid
+000006b0 malloc
+00000363 sleep
+00000383 wait2
+000002e3 pipe
+000002f3 write
+0000037b history
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000a84 __bss_start
+00000130 memset
+00000000 main
+000000a0 strcmp
+0000034b dup
+00000210 stat
+00000a84 _edata
+00000a90 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+00000393 yield2
+00000373 draw
+000000f0 strlen
+00000313 open
+00000150 strchr
+0000033b mkdir
+000002fb close
+00000620 free
diff -ruN xv6-public/lapic.d xv6-public_mine/lapic.d
--- xv6-public/lapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/lapic.d	2021-09-30 23:41:50.018398091 +0530
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files xv6-public/lapic.o and xv6-public_mine/lapic.o differ
Binary files xv6-public/_ln and xv6-public_mine/_ln differ
diff -ruN xv6-public/ln.asm xv6-public_mine/ln.asm
--- xv6-public/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ln.asm	2021-09-30 23:42:23.528555548 +0530
@@ -0,0 +1,1216 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+  if(argc != 3){
+   e:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+  11:	55                   	push   %ebp
+  12:	89 e5                	mov    %esp,%ebp
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  19:	74 13                	je     2e <main+0x2e>
+    printf(2, "Usage: ln old new\n");
+  1b:	52                   	push   %edx
+  1c:	52                   	push   %edx
+  1d:	68 a8 07 00 00       	push   $0x7a8
+  22:	6a 02                	push   $0x2
+  24:	e8 17 04 00 00       	call   440 <printf>
+    exit();
+  29:	e8 95 02 00 00       	call   2c3 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2e:	50                   	push   %eax
+  2f:	50                   	push   %eax
+  30:	ff 73 08             	pushl  0x8(%ebx)
+  33:	ff 73 04             	pushl  0x4(%ebx)
+  36:	e8 e8 02 00 00       	call   323 <link>
+  3b:	83 c4 10             	add    $0x10,%esp
+  3e:	85 c0                	test   %eax,%eax
+  40:	78 05                	js     47 <main+0x47>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  42:	e8 7c 02 00 00       	call   2c3 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  47:	ff 73 08             	pushl  0x8(%ebx)
+  4a:	ff 73 04             	pushl  0x4(%ebx)
+  4d:	68 bb 07 00 00       	push   $0x7bb
+  52:	6a 02                	push   $0x2
+  54:	e8 e7 03 00 00       	call   440 <printf>
+  59:	83 c4 10             	add    $0x10,%esp
+  5c:	eb e4                	jmp    42 <main+0x42>
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  65:	31 c0                	xor    %eax,%eax
+{
+  67:	89 e5                	mov    %esp,%ebp
+  69:	53                   	push   %ebx
+  6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	89 c8                	mov    %ecx,%eax
+  80:	5b                   	pop    %ebx
+  81:	5d                   	pop    %ebp
+  82:	c3                   	ret    
+  83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	53                   	push   %ebx
+  98:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  9b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  9e:	0f b6 01             	movzbl (%ecx),%eax
+  a1:	0f b6 1a             	movzbl (%edx),%ebx
+  a4:	84 c0                	test   %al,%al
+  a6:	75 19                	jne    c1 <strcmp+0x31>
+  a8:	eb 26                	jmp    d0 <strcmp+0x40>
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  b0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  b4:	83 c1 01             	add    $0x1,%ecx
+  b7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ba:	0f b6 1a             	movzbl (%edx),%ebx
+  bd:	84 c0                	test   %al,%al
+  bf:	74 0f                	je     d0 <strcmp+0x40>
+  c1:	38 d8                	cmp    %bl,%al
+  c3:	74 eb                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c5:	29 d8                	sub    %ebx,%eax
+}
+  c7:	5b                   	pop    %ebx
+  c8:	5d                   	pop    %ebp
+  c9:	c3                   	ret    
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	f3 0f 1e fb          	endbr32 
+  e4:	55                   	push   %ebp
+  e5:	89 e5                	mov    %esp,%ebp
+  e7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ea:	80 3a 00             	cmpb   $0x0,(%edx)
+  ed:	74 21                	je     110 <strlen+0x30>
+  ef:	31 c0                	xor    %eax,%eax
+  f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f8:	83 c0 01             	add    $0x1,%eax
+  fb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  ff:	89 c1                	mov    %eax,%ecx
+ 101:	75 f5                	jne    f8 <strlen+0x18>
+    ;
+  return n;
+}
+ 103:	89 c8                	mov    %ecx,%eax
+ 105:	5d                   	pop    %ebp
+ 106:	c3                   	ret    
+ 107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 12b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 131:	89 d7                	mov    %edx,%edi
+ 133:	fc                   	cld    
+ 134:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 136:	89 d0                	mov    %edx,%eax
+ 138:	5f                   	pop    %edi
+ 139:	5d                   	pop    %ebp
+ 13a:	c3                   	ret    
+ 13b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 13f:	90                   	nop
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	8b 45 08             	mov    0x8(%ebp),%eax
+ 14a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14e:	0f b6 10             	movzbl (%eax),%edx
+ 151:	84 d2                	test   %dl,%dl
+ 153:	75 16                	jne    16b <strchr+0x2b>
+ 155:	eb 21                	jmp    178 <strchr+0x38>
+ 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15e:	66 90                	xchg   %ax,%ax
+ 160:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	84 d2                	test   %dl,%dl
+ 169:	74 0d                	je     178 <strchr+0x38>
+    if(*s == c)
+ 16b:	38 d1                	cmp    %dl,%cl
+ 16d:	75 f1                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 16f:	5d                   	pop    %ebp
+ 170:	c3                   	ret    
+ 171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 178:	31 c0                	xor    %eax,%eax
+}
+ 17a:	5d                   	pop    %ebp
+ 17b:	c3                   	ret    
+ 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	57                   	push   %edi
+ 188:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 189:	31 f6                	xor    %esi,%esi
+{
+ 18b:	53                   	push   %ebx
+ 18c:	89 f3                	mov    %esi,%ebx
+ 18e:	83 ec 1c             	sub    $0x1c,%esp
+ 191:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 194:	eb 33                	jmp    1c9 <gets+0x49>
+ 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1a6:	6a 01                	push   $0x1
+ 1a8:	50                   	push   %eax
+ 1a9:	6a 00                	push   $0x0
+ 1ab:	e8 2b 01 00 00       	call   2db <read>
+    if(cc < 1)
+ 1b0:	83 c4 10             	add    $0x10,%esp
+ 1b3:	85 c0                	test   %eax,%eax
+ 1b5:	7e 1c                	jle    1d3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1b7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1bb:	83 c7 01             	add    $0x1,%edi
+ 1be:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c1:	3c 0a                	cmp    $0xa,%al
+ 1c3:	74 23                	je     1e8 <gets+0x68>
+ 1c5:	3c 0d                	cmp    $0xd,%al
+ 1c7:	74 1f                	je     1e8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1c9:	83 c3 01             	add    $0x1,%ebx
+ 1cc:	89 fe                	mov    %edi,%esi
+ 1ce:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d1:	7c cd                	jl     1a0 <gets+0x20>
+ 1d3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1de:	5b                   	pop    %ebx
+ 1df:	5e                   	pop    %esi
+ 1e0:	5f                   	pop    %edi
+ 1e1:	5d                   	pop    %ebp
+ 1e2:	c3                   	ret    
+ 1e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e7:	90                   	nop
+ 1e8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1eb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1ee:	01 de                	add    %ebx,%esi
+ 1f0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1f2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f8:	5b                   	pop    %ebx
+ 1f9:	5e                   	pop    %esi
+ 1fa:	5f                   	pop    %edi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	56                   	push   %esi
+ 208:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	6a 00                	push   $0x0
+ 20e:	ff 75 08             	pushl  0x8(%ebp)
+ 211:	e8 ed 00 00 00       	call   303 <open>
+  if(fd < 0)
+ 216:	83 c4 10             	add    $0x10,%esp
+ 219:	85 c0                	test   %eax,%eax
+ 21b:	78 2b                	js     248 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 21d:	83 ec 08             	sub    $0x8,%esp
+ 220:	ff 75 0c             	pushl  0xc(%ebp)
+ 223:	89 c3                	mov    %eax,%ebx
+ 225:	50                   	push   %eax
+ 226:	e8 f0 00 00 00       	call   31b <fstat>
+  close(fd);
+ 22b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 230:	e8 b6 00 00 00       	call   2eb <close>
+  return r;
+ 235:	83 c4 10             	add    $0x10,%esp
+}
+ 238:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 23b:	89 f0                	mov    %esi,%eax
+ 23d:	5b                   	pop    %ebx
+ 23e:	5e                   	pop    %esi
+ 23f:	5d                   	pop    %ebp
+ 240:	c3                   	ret    
+ 241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 248:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 24d:	eb e9                	jmp    238 <stat+0x38>
+ 24f:	90                   	nop
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	53                   	push   %ebx
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25b:	0f be 02             	movsbl (%edx),%eax
+ 25e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 261:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 264:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 269:	77 1a                	ja     285 <atoi+0x35>
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 270:	83 c2 01             	add    $0x1,%edx
+ 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 02             	movsbl (%edx),%eax
+ 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	89 c8                	mov    %ecx,%eax
+ 287:	5b                   	pop    %ebx
+ 288:	5d                   	pop    %ebp
+ 289:	c3                   	ret    
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	57                   	push   %edi
+ 298:	8b 45 10             	mov    0x10(%ebp),%eax
+ 29b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 29e:	56                   	push   %esi
+ 29f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2a2:	85 c0                	test   %eax,%eax
+ 2a4:	7e 0f                	jle    2b5 <memmove+0x25>
+ 2a6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2a8:	89 d7                	mov    %edx,%edi
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 f8                	cmp    %edi,%eax
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	89 d0                	mov    %edx,%eax
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+
+000002bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <exit>:
+SYSCALL(exit)
+ 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <wait>:
+SYSCALL(wait)
+ 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <pipe>:
+SYSCALL(pipe)
+ 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <read>:
+SYSCALL(read)
+ 2db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <write>:
+SYSCALL(write)
+ 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <close>:
+SYSCALL(close)
+ 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <kill>:
+SYSCALL(kill)
+ 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <exec>:
+SYSCALL(exec)
+ 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <open>:
+SYSCALL(open)
+ 303:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <mknod>:
+SYSCALL(mknod)
+ 30b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <unlink>:
+SYSCALL(unlink)
+ 313:	b8 12 00 00 00       	mov    $0x12,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <fstat>:
+SYSCALL(fstat)
+ 31b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <link>:
+SYSCALL(link)
+ 323:	b8 13 00 00 00       	mov    $0x13,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mkdir>:
+SYSCALL(mkdir)
+ 32b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <chdir>:
+SYSCALL(chdir)
+ 333:	b8 09 00 00 00       	mov    $0x9,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <dup>:
+SYSCALL(dup)
+ 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getpid>:
+SYSCALL(getpid)
+ 343:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <sbrk>:
+SYSCALL(sbrk)
+ 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <sleep>:
+SYSCALL(sleep)
+ 353:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <uptime>:
+SYSCALL(uptime)
+ 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <draw>:
+SYSCALL(draw)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <history>:
+SYSCALL(history)
+ 36b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <wait2>:
+SYSCALL(wait2)
+ 373:	b8 18 00 00 00       	mov    $0x18,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <set_prio>:
+SYSCALL(set_prio)
+ 37b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <yield2>:
+SYSCALL(yield2)
+ 383:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+ 38b:	66 90                	xchg   %ax,%ax
+ 38d:	66 90                	xchg   %ax,%ax
+ 38f:	90                   	nop
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+ 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 39c:	89 d1                	mov    %edx,%ecx
+{
+ 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3a1:	85 d2                	test   %edx,%edx
+ 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
+ 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ad:	74 79                	je     428 <printint+0x98>
+    neg = 1;
+ 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3b6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b8:	31 db                	xor    %ebx,%ebx
+ 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 c8                	mov    %ecx,%eax
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	89 cf                	mov    %ecx,%edi
+ 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3c9:	0f b6 92 d8 07 00 00 	movzbl 0x7d8(%edx),%edx
+ 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3d3:	89 d8                	mov    %ebx,%eax
+ 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+  if(neg)
+ 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3e6:	85 c9                	test   %ecx,%ecx
+ 3e8:	74 0c                	je     3f6 <printint+0x66>
+    buf[i++] = '-';
+ 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ef:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3fd:	eb 07                	jmp    406 <printint+0x76>
+ 3ff:	90                   	nop
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 ce fe ff ff       	call   2e3 <write>
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 42f:	eb 87                	jmp    3b8 <printint+0x28>
+ 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	f3 0f 1e fb          	endbr32 
+ 444:	55                   	push   %ebp
+ 445:	89 e5                	mov    %esp,%ebp
+ 447:	57                   	push   %edi
+ 448:	56                   	push   %esi
+ 449:	53                   	push   %ebx
+ 44a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 450:	0f b6 1e             	movzbl (%esi),%ebx
+ 453:	84 db                	test   %bl,%bl
+ 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 45b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 464:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 469:	eb 33                	jmp    49e <printf+0x5e>
+ 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+ 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 473:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 17                	je     494 <printf+0x54>
+  write(fd, &c, 1);
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 55 fe ff ff       	call   2e3 <write>
+ 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 491:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 494:	0f b6 1e             	movzbl (%esi),%ebx
+ 497:	83 c6 01             	add    $0x1,%esi
+ 49a:	84 db                	test   %bl,%bl
+ 49c:	74 71                	je     50f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 49e:	0f be cb             	movsbl %bl,%ecx
+ 4a1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4a4:	85 d2                	test   %edx,%edx
+ 4a6:	74 c8                	je     470 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4a8:	83 fa 25             	cmp    $0x25,%edx
+ 4ab:	75 e7                	jne    494 <printf+0x54>
+      if(c == 'd'){
+ 4ad:	83 f8 64             	cmp    $0x64,%eax
+ 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4bc:	83 f9 70             	cmp    $0x70,%ecx
+ 4bf:	74 5f                	je     520 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4c1:	83 f8 73             	cmp    $0x73,%eax
+ 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ca:	83 f8 63             	cmp    $0x63,%eax
+ 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4d3:	83 f8 25             	cmp    $0x25,%eax
+ 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+  write(fd, &c, 1);
+ 4dc:	83 ec 04             	sub    $0x4,%esp
+ 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	ff 75 08             	pushl  0x8(%ebp)
+ 4e9:	e8 f5 fd ff ff       	call   2e3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4f1:	83 c4 0c             	add    $0xc,%esp
+ 4f4:	6a 01                	push   $0x1
+ 4f6:	83 c6 01             	add    $0x1,%esi
+ 4f9:	57                   	push   %edi
+ 4fa:	ff 75 08             	pushl  0x8(%ebp)
+ 4fd:	e8 e1 fd ff ff       	call   2e3 <write>
+  for(i = 0; fmt[i]; i++){
+ 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 506:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 509:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 50b:	84 db                	test   %bl,%bl
+ 50d:	75 8f                	jne    49e <printf+0x5e>
+    }
+  }
+}
+ 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 512:	5b                   	pop    %ebx
+ 513:	5e                   	pop    %esi
+ 514:	5f                   	pop    %edi
+ 515:	5d                   	pop    %ebp
+ 516:	c3                   	ret    
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 52d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 530:	8b 13                	mov    (%ebx),%edx
+ 532:	e8 59 fe ff ff       	call   390 <printint>
+        ap++;
+ 537:	89 d8                	mov    %ebx,%eax
+ 539:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 53c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 53e:	83 c0 04             	add    $0x4,%eax
+ 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	eb ce                	jmp    52a <printf+0xea>
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+        ap++;
+ 56a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 56d:	57                   	push   %edi
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 574:	e8 6a fd ff ff       	call   2e3 <write>
+        ap++;
+ 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 57c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57f:	31 d2                	xor    %edx,%edx
+ 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+        s = (char*)*ap;
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5ab:	85 db                	test   %ebx,%ebx
+ 5ad:	74 17                	je     5c6 <printf+0x186>
+        while(*s != 0){
+ 5af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5b4:	84 c0                	test   %al,%al
+ 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
+ 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5bf:	89 de                	mov    %ebx,%esi
+ 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+          s = "(null)";
+ 5c6:	bb cf 07 00 00       	mov    $0x7cf,%ebx
+        while(*s != 0){
+ 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	89 de                	mov    %ebx,%esi
+ 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5e3:	83 c6 01             	add    $0x1,%esi
+ 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	57                   	push   %edi
+ 5ec:	53                   	push   %ebx
+ 5ed:	e8 f1 fc ff ff       	call   2e3 <write>
+        while(*s != 0){
+ 5f2:	0f b6 06             	movzbl (%esi),%eax
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	84 c0                	test   %al,%al
+ 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
+ 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
+ 606:	66 90                	xchg   %ax,%ax
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	f3 0f 1e fb          	endbr32 
+ 614:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 615:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 61a:	89 e5                	mov    %esp,%ebp
+ 61c:	57                   	push   %edi
+ 61d:	56                   	push   %esi
+ 61e:	53                   	push   %ebx
+ 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 622:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 627:	39 c8                	cmp    %ecx,%eax
+ 629:	73 15                	jae    640 <free+0x30>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+ 630:	39 d1                	cmp    %edx,%ecx
+ 632:	72 14                	jb     648 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 634:	39 d0                	cmp    %edx,%eax
+ 636:	73 10                	jae    648 <free+0x38>
+{
+ 638:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 63a:	8b 10                	mov    (%eax),%edx
+ 63c:	39 c8                	cmp    %ecx,%eax
+ 63e:	72 f0                	jb     630 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 f4                	jb     638 <free+0x28>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	73 f0                	jae    638 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 fa                	cmp    %edi,%edx
+ 650:	74 1e                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 655:	8b 50 04             	mov    0x4(%eax),%edx
+ 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 28                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 65f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 661:	5b                   	pop    %ebx
+  freep = p;
+ 662:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 667:	5e                   	pop    %esi
+ 668:	5f                   	pop    %edi
+ 669:	5d                   	pop    %ebp
+ 66a:	c3                   	ret    
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 d8                	jne    65f <free+0x4f>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 84 0a 00 00       	mov    %eax,0xa84
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	f3 0f 1e fb          	endbr32 
+ 6a4:	55                   	push   %ebp
+ 6a5:	89 e5                	mov    %esp,%ebp
+ 6a7:	57                   	push   %edi
+ 6a8:	56                   	push   %esi
+ 6a9:	53                   	push   %ebx
+ 6aa:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6b0:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b9:	c1 ee 03             	shr    $0x3,%esi
+ 6bc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6bf:	85 ff                	test   %edi,%edi
+ 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cc:	39 f1                	cmp    %esi,%ecx
+ 6ce:	73 6d                	jae    73d <malloc+0x9d>
+ 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6db:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6e8:	eb 17                	jmp    701 <malloc+0x61>
+ 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	73 4f                	jae    748 <malloc+0xa8>
+ 6f9:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 6ff:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	39 c7                	cmp    %eax,%edi
+ 703:	75 eb                	jne    6f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 705:	83 ec 0c             	sub    $0xc,%esp
+ 708:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 70b:	e8 3b fc ff ff       	call   34b <sbrk>
+  if(p == (char*)-1)
+ 710:	83 c4 10             	add    $0x10,%esp
+ 713:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 716:	74 1b                	je     733 <malloc+0x93>
+  hp->s.size = nu;
+ 718:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	83 c0 08             	add    $0x8,%eax
+ 721:	50                   	push   %eax
+ 722:	e8 e9 fe ff ff       	call   610 <free>
+  return freep;
+ 727:	a1 84 0a 00 00       	mov    0xa84,%eax
+      if((p = morecore(nunits)) == 0)
+ 72c:	83 c4 10             	add    $0x10,%esp
+ 72f:	85 c0                	test   %eax,%eax
+ 731:	75 bd                	jne    6f0 <malloc+0x50>
+        return 0;
+  }
+}
+ 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 736:	31 c0                	xor    %eax,%eax
+}
+ 738:	5b                   	pop    %ebx
+ 739:	5e                   	pop    %esi
+ 73a:	5f                   	pop    %edi
+ 73b:	5d                   	pop    %ebp
+ 73c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 73d:	89 c2                	mov    %eax,%edx
+ 73f:	89 f8                	mov    %edi,%eax
+ 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 748:	39 ce                	cmp    %ecx,%esi
+ 74a:	74 54                	je     7a0 <malloc+0x100>
+        p->s.size -= nunits;
+ 74c:	29 f1                	sub    %esi,%ecx
+ 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 754:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 757:	a3 84 0a 00 00       	mov    %eax,0xa84
+}
+ 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 75f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 762:	5b                   	pop    %ebx
+ 763:	5e                   	pop    %esi
+ 764:	5f                   	pop    %edi
+ 765:	5d                   	pop    %ebp
+ 766:	c3                   	ret    
+ 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 777:	0a 00 00 
+    base.s.size = 0;
+ 77a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+    base.s.ptr = freep = prevp = &base;
+ 77f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 786:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 789:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 78b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 792:	00 00 00 
+    if(p->s.size >= nunits){
+ 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 0a                	mov    (%edx),%ecx
+ 7a2:	89 08                	mov    %ecx,(%eax)
+ 7a4:	eb b1                	jmp    757 <malloc+0xb7>
diff -ruN xv6-public/ln.d xv6-public_mine/ln.d
--- xv6-public/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ln.d	2021-09-30 23:42:23.288480748 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/ln.o and xv6-public_mine/ln.o differ
diff -ruN xv6-public/ln.sym xv6-public_mine/ln.sym
--- xv6-public/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ln.sym	2021-09-30 23:42:23.588574247 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007a8 .rodata
+000007ec .eh_frame
+00000a84 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+000007d8 digits.1101
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000060 strcpy
+0000037b set_prio
+00000440 printf
+00000290 memmove
+0000030b mknod
+00000180 gets
+00000343 getpid
+000006a0 malloc
+00000353 sleep
+00000373 wait2
+000002d3 pipe
+000002e3 write
+0000036b history
+0000031b fstat
+000002f3 kill
+00000333 chdir
+000002fb exec
+000002cb wait
+000002db read
+00000313 unlink
+000002bb fork
+0000034b sbrk
+0000035b uptime
+00000a84 __bss_start
+00000120 memset
+00000000 main
+00000090 strcmp
+0000033b dup
+00000200 stat
+00000a84 _edata
+00000a90 _end
+00000323 link
+000002c3 exit
+00000250 atoi
+00000383 yield2
+00000363 draw
+000000e0 strlen
+00000303 open
+00000140 strchr
+0000032b mkdir
+000002eb close
+00000610 free
diff -ruN xv6-public/log.d xv6-public_mine/log.d
--- xv6-public/log.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/log.d	2021-09-30 23:41:50.962281482 +0530
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/log.o and xv6-public_mine/log.o differ
Binary files xv6-public/_ls and xv6-public_mine/_ls differ
diff -ruN xv6-public/ls.asm xv6-public_mine/ls.asm
--- xv6-public/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ls.asm	2021-09-30 23:42:24.432834933 +0530
@@ -0,0 +1,1497 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 28                	jle    49 <main+0x49>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 c3 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	39 f3                	cmp    %esi,%ebx
+  42:	75 ec                	jne    30 <main+0x30>
+  exit();
+  44:	e8 5a 05 00 00       	call   5a3 <exit>
+    ls(".");
+  49:	83 ec 0c             	sub    $0xc,%esp
+  4c:	68 d0 0a 00 00       	push   $0xad0
+  51:	e8 aa 00 00 00       	call   100 <ls>
+    exit();
+  56:	e8 48 05 00 00       	call   5a3 <exit>
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <fmtname>:
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	56                   	push   %esi
+  68:	53                   	push   %ebx
+  69:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  6c:	83 ec 0c             	sub    $0xc,%esp
+  6f:	56                   	push   %esi
+  70:	e8 4b 03 00 00       	call   3c0 <strlen>
+  75:	83 c4 10             	add    $0x10,%esp
+  78:	01 f0                	add    %esi,%eax
+  7a:	89 c3                	mov    %eax,%ebx
+  7c:	73 0b                	jae    89 <fmtname+0x29>
+  7e:	eb 0e                	jmp    8e <fmtname+0x2e>
+  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
+  83:	39 c6                	cmp    %eax,%esi
+  85:	77 0a                	ja     91 <fmtname+0x31>
+  87:	89 c3                	mov    %eax,%ebx
+  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+  8c:	75 f2                	jne    80 <fmtname+0x20>
+  8e:	83 c3 01             	add    $0x1,%ebx
+  if(strlen(p) >= DIRSIZ)
+  91:	83 ec 0c             	sub    $0xc,%esp
+  94:	53                   	push   %ebx
+  95:	e8 26 03 00 00       	call   3c0 <strlen>
+  9a:	83 c4 10             	add    $0x10,%esp
+  9d:	83 f8 0d             	cmp    $0xd,%eax
+  a0:	77 4a                	ja     ec <fmtname+0x8c>
+  memmove(buf, p, strlen(p));
+  a2:	83 ec 0c             	sub    $0xc,%esp
+  a5:	53                   	push   %ebx
+  a6:	e8 15 03 00 00       	call   3c0 <strlen>
+  ab:	83 c4 0c             	add    $0xc,%esp
+  ae:	50                   	push   %eax
+  af:	53                   	push   %ebx
+  b0:	68 04 0e 00 00       	push   $0xe04
+  b5:	e8 b6 04 00 00       	call   570 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ba:	89 1c 24             	mov    %ebx,(%esp)
+  bd:	e8 fe 02 00 00       	call   3c0 <strlen>
+  c2:	89 1c 24             	mov    %ebx,(%esp)
+  return buf;
+  c5:	bb 04 0e 00 00       	mov    $0xe04,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	89 c6                	mov    %eax,%esi
+  cc:	e8 ef 02 00 00       	call   3c0 <strlen>
+  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d6:	83 c4 0c             	add    $0xc,%esp
+  d9:	29 f2                	sub    %esi,%edx
+  db:	05 04 0e 00 00       	add    $0xe04,%eax
+  e0:	52                   	push   %edx
+  e1:	6a 20                	push   $0x20
+  e3:	50                   	push   %eax
+  e4:	e8 17 03 00 00       	call   400 <memset>
+  return buf;
+  e9:	83 c4 10             	add    $0x10,%esp
+}
+  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ef:	89 d8                	mov    %ebx,%eax
+  f1:	5b                   	pop    %ebx
+  f2:	5e                   	pop    %esi
+  f3:	5d                   	pop    %ebp
+  f4:	c3                   	ret    
+  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <ls>:
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	57                   	push   %edi
+ 108:	56                   	push   %esi
+ 109:	53                   	push   %ebx
+ 10a:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 110:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 113:	6a 00                	push   $0x0
+ 115:	57                   	push   %edi
+ 116:	e8 c8 04 00 00       	call   5e3 <open>
+ 11b:	83 c4 10             	add    $0x10,%esp
+ 11e:	85 c0                	test   %eax,%eax
+ 120:	0f 88 9a 01 00 00    	js     2c0 <ls+0x1c0>
+  if(fstat(fd, &st) < 0){
+ 126:	83 ec 08             	sub    $0x8,%esp
+ 129:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 12f:	89 c3                	mov    %eax,%ebx
+ 131:	56                   	push   %esi
+ 132:	50                   	push   %eax
+ 133:	e8 c3 04 00 00       	call   5fb <fstat>
+ 138:	83 c4 10             	add    $0x10,%esp
+ 13b:	85 c0                	test   %eax,%eax
+ 13d:	0f 88 bd 01 00 00    	js     300 <ls+0x200>
+  switch(st.type){
+ 143:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 14a:	66 83 f8 01          	cmp    $0x1,%ax
+ 14e:	74 60                	je     1b0 <ls+0xb0>
+ 150:	66 83 f8 02          	cmp    $0x2,%ax
+ 154:	74 1a                	je     170 <ls+0x70>
+  close(fd);
+ 156:	83 ec 0c             	sub    $0xc,%esp
+ 159:	53                   	push   %ebx
+ 15a:	e8 6c 04 00 00       	call   5cb <close>
+ 15f:	83 c4 10             	add    $0x10,%esp
+}
+ 162:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 165:	5b                   	pop    %ebx
+ 166:	5e                   	pop    %esi
+ 167:	5f                   	pop    %edi
+ 168:	5d                   	pop    %ebp
+ 169:	c3                   	ret    
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 170:	83 ec 0c             	sub    $0xc,%esp
+ 173:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 179:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 17f:	57                   	push   %edi
+ 180:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 186:	e8 d5 fe ff ff       	call   60 <fmtname>
+ 18b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 191:	59                   	pop    %ecx
+ 192:	5f                   	pop    %edi
+ 193:	52                   	push   %edx
+ 194:	56                   	push   %esi
+ 195:	6a 02                	push   $0x2
+ 197:	50                   	push   %eax
+ 198:	68 b0 0a 00 00       	push   $0xab0
+ 19d:	6a 01                	push   $0x1
+ 19f:	e8 7c 05 00 00       	call   720 <printf>
+    break;
+ 1a4:	83 c4 20             	add    $0x20,%esp
+ 1a7:	eb ad                	jmp    156 <ls+0x56>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1b0:	83 ec 0c             	sub    $0xc,%esp
+ 1b3:	57                   	push   %edi
+ 1b4:	e8 07 02 00 00       	call   3c0 <strlen>
+ 1b9:	83 c4 10             	add    $0x10,%esp
+ 1bc:	83 c0 10             	add    $0x10,%eax
+ 1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1c4:	0f 87 16 01 00 00    	ja     2e0 <ls+0x1e0>
+    strcpy(buf, path);
+ 1ca:	83 ec 08             	sub    $0x8,%esp
+ 1cd:	57                   	push   %edi
+ 1ce:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 1d4:	57                   	push   %edi
+ 1d5:	e8 66 01 00 00       	call   340 <strcpy>
+    p = buf+strlen(buf);
+ 1da:	89 3c 24             	mov    %edi,(%esp)
+ 1dd:	e8 de 01 00 00       	call   3c0 <strlen>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1e2:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1e5:	01 f8                	add    %edi,%eax
+    *p++ = '/';
+ 1e7:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 1ea:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 1f0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 1f6:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 209:	6a 10                	push   $0x10
+ 20b:	50                   	push   %eax
+ 20c:	53                   	push   %ebx
+ 20d:	e8 a9 03 00 00       	call   5bb <read>
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	83 f8 10             	cmp    $0x10,%eax
+ 218:	0f 85 38 ff ff ff    	jne    156 <ls+0x56>
+      if(de.inum == 0)
+ 21e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 225:	00 
+ 226:	74 d8                	je     200 <ls+0x100>
+      memmove(p, de.name, DIRSIZ);
+ 228:	83 ec 04             	sub    $0x4,%esp
+ 22b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 231:	6a 0e                	push   $0xe
+ 233:	50                   	push   %eax
+ 234:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 23a:	e8 31 03 00 00       	call   570 <memmove>
+      p[DIRSIZ] = 0;
+ 23f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 245:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 249:	58                   	pop    %eax
+ 24a:	5a                   	pop    %edx
+ 24b:	56                   	push   %esi
+ 24c:	57                   	push   %edi
+ 24d:	e8 8e 02 00 00       	call   4e0 <stat>
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	0f 88 cb 00 00 00    	js     328 <ls+0x228>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 25d:	83 ec 0c             	sub    $0xc,%esp
+ 260:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 266:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 26c:	57                   	push   %edi
+ 26d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 274:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 27a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 280:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 286:	e8 d5 fd ff ff       	call   60 <fmtname>
+ 28b:	5a                   	pop    %edx
+ 28c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 292:	59                   	pop    %ecx
+ 293:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 299:	51                   	push   %ecx
+ 29a:	52                   	push   %edx
+ 29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2a1:	50                   	push   %eax
+ 2a2:	68 b0 0a 00 00       	push   $0xab0
+ 2a7:	6a 01                	push   $0x1
+ 2a9:	e8 72 04 00 00       	call   720 <printf>
+ 2ae:	83 c4 20             	add    $0x20,%esp
+ 2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot open %s\n", path);
+ 2c0:	83 ec 04             	sub    $0x4,%esp
+ 2c3:	57                   	push   %edi
+ 2c4:	68 88 0a 00 00       	push   $0xa88
+ 2c9:	6a 02                	push   $0x2
+ 2cb:	e8 50 04 00 00       	call   720 <printf>
+    return;
+ 2d0:	83 c4 10             	add    $0x10,%esp
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+      printf(1, "ls: path too long\n");
+ 2e0:	83 ec 08             	sub    $0x8,%esp
+ 2e3:	68 bd 0a 00 00       	push   $0xabd
+ 2e8:	6a 01                	push   $0x1
+ 2ea:	e8 31 04 00 00       	call   720 <printf>
+      break;
+ 2ef:	83 c4 10             	add    $0x10,%esp
+ 2f2:	e9 5f fe ff ff       	jmp    156 <ls+0x56>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+    printf(2, "ls: cannot stat %s\n", path);
+ 300:	83 ec 04             	sub    $0x4,%esp
+ 303:	57                   	push   %edi
+ 304:	68 9c 0a 00 00       	push   $0xa9c
+ 309:	6a 02                	push   $0x2
+ 30b:	e8 10 04 00 00       	call   720 <printf>
+    close(fd);
+ 310:	89 1c 24             	mov    %ebx,(%esp)
+ 313:	e8 b3 02 00 00       	call   5cb <close>
+    return;
+ 318:	83 c4 10             	add    $0x10,%esp
+}
+ 31b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 31e:	5b                   	pop    %ebx
+ 31f:	5e                   	pop    %esi
+ 320:	5f                   	pop    %edi
+ 321:	5d                   	pop    %ebp
+ 322:	c3                   	ret    
+ 323:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 327:	90                   	nop
+        printf(1, "ls: cannot stat %s\n", buf);
+ 328:	83 ec 04             	sub    $0x4,%esp
+ 32b:	57                   	push   %edi
+ 32c:	68 9c 0a 00 00       	push   $0xa9c
+ 331:	6a 01                	push   $0x1
+ 333:	e8 e8 03 00 00       	call   720 <printf>
+        continue;
+ 338:	83 c4 10             	add    $0x10,%esp
+ 33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <draw>:
+SYSCALL(draw)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <history>:
+SYSCALL(history)
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <wait2>:
+SYSCALL(wait2)
+ 653:	b8 18 00 00 00       	mov    $0x18,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <set_prio>:
+SYSCALL(set_prio)
+ 65b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <yield2>:
+SYSCALL(yield2)
+ 663:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+ 66b:	66 90                	xchg   %ax,%ax
+ 66d:	66 90                	xchg   %ax,%ax
+ 66f:	90                   	nop
+
+00000670 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 3c             	sub    $0x3c,%esp
+ 679:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 67c:	89 d1                	mov    %edx,%ecx
+{
+ 67e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 681:	85 d2                	test   %edx,%edx
+ 683:	0f 89 7f 00 00 00    	jns    708 <printint+0x98>
+ 689:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 68d:	74 79                	je     708 <printint+0x98>
+    neg = 1;
+ 68f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 696:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 698:	31 db                	xor    %ebx,%ebx
+ 69a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 69d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6a0:	89 c8                	mov    %ecx,%eax
+ 6a2:	31 d2                	xor    %edx,%edx
+ 6a4:	89 cf                	mov    %ecx,%edi
+ 6a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6a9:	0f b6 92 dc 0a 00 00 	movzbl 0xadc(%edx),%edx
+ 6b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6b3:	89 d8                	mov    %ebx,%eax
+ 6b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6c1:	76 dd                	jbe    6a0 <printint+0x30>
+  if(neg)
+ 6c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6c6:	85 c9                	test   %ecx,%ecx
+ 6c8:	74 0c                	je     6d6 <printint+0x66>
+    buf[i++] = '-';
+ 6ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6dd:	eb 07                	jmp    6e6 <printint+0x76>
+ 6df:	90                   	nop
+ 6e0:	0f b6 13             	movzbl (%ebx),%edx
+ 6e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6e6:	83 ec 04             	sub    $0x4,%esp
+ 6e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6ec:	6a 01                	push   $0x1
+ 6ee:	56                   	push   %esi
+ 6ef:	57                   	push   %edi
+ 6f0:	e8 ce fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	39 de                	cmp    %ebx,%esi
+ 6fa:	75 e4                	jne    6e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ff:	5b                   	pop    %ebx
+ 700:	5e                   	pop    %esi
+ 701:	5f                   	pop    %edi
+ 702:	5d                   	pop    %ebp
+ 703:	c3                   	ret    
+ 704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 708:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 70f:	eb 87                	jmp    698 <printint+0x28>
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 71f:	90                   	nop
+
+00000720 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 720:	f3 0f 1e fb          	endbr32 
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	57                   	push   %edi
+ 728:	56                   	push   %esi
+ 729:	53                   	push   %ebx
+ 72a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 72d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 730:	0f b6 1e             	movzbl (%esi),%ebx
+ 733:	84 db                	test   %bl,%bl
+ 735:	0f 84 b4 00 00 00    	je     7ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 73b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 73e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 741:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 744:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 746:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 749:	eb 33                	jmp    77e <printf+0x5e>
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+ 750:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 753:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 758:	83 f8 25             	cmp    $0x25,%eax
+ 75b:	74 17                	je     774 <printf+0x54>
+  write(fd, &c, 1);
+ 75d:	83 ec 04             	sub    $0x4,%esp
+ 760:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 763:	6a 01                	push   $0x1
+ 765:	57                   	push   %edi
+ 766:	ff 75 08             	pushl  0x8(%ebp)
+ 769:	e8 55 fe ff ff       	call   5c3 <write>
+ 76e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 771:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 774:	0f b6 1e             	movzbl (%esi),%ebx
+ 777:	83 c6 01             	add    $0x1,%esi
+ 77a:	84 db                	test   %bl,%bl
+ 77c:	74 71                	je     7ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 77e:	0f be cb             	movsbl %bl,%ecx
+ 781:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 784:	85 d2                	test   %edx,%edx
+ 786:	74 c8                	je     750 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 788:	83 fa 25             	cmp    $0x25,%edx
+ 78b:	75 e7                	jne    774 <printf+0x54>
+      if(c == 'd'){
+ 78d:	83 f8 64             	cmp    $0x64,%eax
+ 790:	0f 84 9a 00 00 00    	je     830 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 796:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 79c:	83 f9 70             	cmp    $0x70,%ecx
+ 79f:	74 5f                	je     800 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 7a1:	83 f8 73             	cmp    $0x73,%eax
+ 7a4:	0f 84 d6 00 00 00    	je     880 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 7aa:	83 f8 63             	cmp    $0x63,%eax
+ 7ad:	0f 84 8d 00 00 00    	je     840 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7b3:	83 f8 25             	cmp    $0x25,%eax
+ 7b6:	0f 84 b4 00 00 00    	je     870 <printf+0x150>
+  write(fd, &c, 1);
+ 7bc:	83 ec 04             	sub    $0x4,%esp
+ 7bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7c3:	6a 01                	push   $0x1
+ 7c5:	57                   	push   %edi
+ 7c6:	ff 75 08             	pushl  0x8(%ebp)
+ 7c9:	e8 f5 fd ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7d1:	83 c4 0c             	add    $0xc,%esp
+ 7d4:	6a 01                	push   $0x1
+ 7d6:	83 c6 01             	add    $0x1,%esi
+ 7d9:	57                   	push   %edi
+ 7da:	ff 75 08             	pushl  0x8(%ebp)
+ 7dd:	e8 e1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7eb:	84 db                	test   %bl,%bl
+ 7ed:	75 8f                	jne    77e <printf+0x5e>
+    }
+  }
+}
+ 7ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7f2:	5b                   	pop    %ebx
+ 7f3:	5e                   	pop    %esi
+ 7f4:	5f                   	pop    %edi
+ 7f5:	5d                   	pop    %ebp
+ 7f6:	c3                   	ret    
+ 7f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 808:	6a 00                	push   $0x0
+ 80a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 80d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 810:	8b 13                	mov    (%ebx),%edx
+ 812:	e8 59 fe ff ff       	call   670 <printint>
+        ap++;
+ 817:	89 d8                	mov    %ebx,%eax
+ 819:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 81c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 81e:	83 c0 04             	add    $0x4,%eax
+ 821:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 824:	e9 4b ff ff ff       	jmp    774 <printf+0x54>
+ 829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 830:	83 ec 0c             	sub    $0xc,%esp
+ 833:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 838:	6a 01                	push   $0x1
+ 83a:	eb ce                	jmp    80a <printf+0xea>
+ 83c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 840:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 843:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 846:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 848:	6a 01                	push   $0x1
+        ap++;
+ 84a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 84d:	57                   	push   %edi
+ 84e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 851:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 854:	e8 6a fd ff ff       	call   5c3 <write>
+        ap++;
+ 859:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 85c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 85f:	31 d2                	xor    %edx,%edx
+ 861:	e9 0e ff ff ff       	jmp    774 <printf+0x54>
+ 866:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 86d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 870:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 873:	83 ec 04             	sub    $0x4,%esp
+ 876:	e9 59 ff ff ff       	jmp    7d4 <printf+0xb4>
+ 87b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 87f:	90                   	nop
+        s = (char*)*ap;
+ 880:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 883:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 885:	83 c0 04             	add    $0x4,%eax
+ 888:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 88b:	85 db                	test   %ebx,%ebx
+ 88d:	74 17                	je     8a6 <printf+0x186>
+        while(*s != 0){
+ 88f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 892:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 894:	84 c0                	test   %al,%al
+ 896:	0f 84 d8 fe ff ff    	je     774 <printf+0x54>
+ 89c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89f:	89 de                	mov    %ebx,%esi
+ 8a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a4:	eb 1a                	jmp    8c0 <printf+0x1a0>
+          s = "(null)";
+ 8a6:	bb d2 0a 00 00       	mov    $0xad2,%ebx
+        while(*s != 0){
+ 8ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 8ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8b3:	89 de                	mov    %ebx,%esi
+ 8b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8bf:	90                   	nop
+  write(fd, &c, 1);
+ 8c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8c3:	83 c6 01             	add    $0x1,%esi
+ 8c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8c9:	6a 01                	push   $0x1
+ 8cb:	57                   	push   %edi
+ 8cc:	53                   	push   %ebx
+ 8cd:	e8 f1 fc ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8d2:	0f b6 06             	movzbl (%esi),%eax
+ 8d5:	83 c4 10             	add    $0x10,%esp
+ 8d8:	84 c0                	test   %al,%al
+ 8da:	75 e4                	jne    8c0 <printf+0x1a0>
+ 8dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8df:	31 d2                	xor    %edx,%edx
+ 8e1:	e9 8e fe ff ff       	jmp    774 <printf+0x54>
+ 8e6:	66 90                	xchg   %ax,%ax
+ 8e8:	66 90                	xchg   %ax,%ax
+ 8ea:	66 90                	xchg   %ax,%ax
+ 8ec:	66 90                	xchg   %ax,%ax
+ 8ee:	66 90                	xchg   %ax,%ax
+
+000008f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8f0:	f3 0f 1e fb          	endbr32 
+ 8f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f5:	a1 14 0e 00 00       	mov    0xe14,%eax
+{
+ 8fa:	89 e5                	mov    %esp,%ebp
+ 8fc:	57                   	push   %edi
+ 8fd:	56                   	push   %esi
+ 8fe:	53                   	push   %ebx
+ 8ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 902:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 904:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 907:	39 c8                	cmp    %ecx,%eax
+ 909:	73 15                	jae    920 <free+0x30>
+ 90b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 90f:	90                   	nop
+ 910:	39 d1                	cmp    %edx,%ecx
+ 912:	72 14                	jb     928 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 914:	39 d0                	cmp    %edx,%eax
+ 916:	73 10                	jae    928 <free+0x38>
+{
+ 918:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 91a:	8b 10                	mov    (%eax),%edx
+ 91c:	39 c8                	cmp    %ecx,%eax
+ 91e:	72 f0                	jb     910 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 920:	39 d0                	cmp    %edx,%eax
+ 922:	72 f4                	jb     918 <free+0x28>
+ 924:	39 d1                	cmp    %edx,%ecx
+ 926:	73 f0                	jae    918 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 928:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 92b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 92e:	39 fa                	cmp    %edi,%edx
+ 930:	74 1e                	je     950 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 932:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 935:	8b 50 04             	mov    0x4(%eax),%edx
+ 938:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 93b:	39 f1                	cmp    %esi,%ecx
+ 93d:	74 28                	je     967 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 93f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 941:	5b                   	pop    %ebx
+  freep = p;
+ 942:	a3 14 0e 00 00       	mov    %eax,0xe14
+}
+ 947:	5e                   	pop    %esi
+ 948:	5f                   	pop    %edi
+ 949:	5d                   	pop    %ebp
+ 94a:	c3                   	ret    
+ 94b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 94f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 950:	03 72 04             	add    0x4(%edx),%esi
+ 953:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 956:	8b 10                	mov    (%eax),%edx
+ 958:	8b 12                	mov    (%edx),%edx
+ 95a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 95d:	8b 50 04             	mov    0x4(%eax),%edx
+ 960:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 963:	39 f1                	cmp    %esi,%ecx
+ 965:	75 d8                	jne    93f <free+0x4f>
+    p->s.size += bp->s.size;
+ 967:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 96a:	a3 14 0e 00 00       	mov    %eax,0xe14
+    p->s.size += bp->s.size;
+ 96f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 972:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 975:	89 10                	mov    %edx,(%eax)
+}
+ 977:	5b                   	pop    %ebx
+ 978:	5e                   	pop    %esi
+ 979:	5f                   	pop    %edi
+ 97a:	5d                   	pop    %ebp
+ 97b:	c3                   	ret    
+ 97c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000980 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 980:	f3 0f 1e fb          	endbr32 
+ 984:	55                   	push   %ebp
+ 985:	89 e5                	mov    %esp,%ebp
+ 987:	57                   	push   %edi
+ 988:	56                   	push   %esi
+ 989:	53                   	push   %ebx
+ 98a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 98d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 990:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 996:	8d 70 07             	lea    0x7(%eax),%esi
+ 999:	c1 ee 03             	shr    $0x3,%esi
+ 99c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 99f:	85 ff                	test   %edi,%edi
+ 9a1:	0f 84 a9 00 00 00    	je     a50 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 9a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9ac:	39 f1                	cmp    %esi,%ecx
+ 9ae:	73 6d                	jae    a1d <malloc+0x9d>
+ 9b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9c8:	eb 17                	jmp    9e1 <malloc+0x61>
+ 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9d5:	39 f1                	cmp    %esi,%ecx
+ 9d7:	73 4f                	jae    a28 <malloc+0xa8>
+ 9d9:	8b 3d 14 0e 00 00    	mov    0xe14,%edi
+ 9df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9e1:	39 c7                	cmp    %eax,%edi
+ 9e3:	75 eb                	jne    9d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9e5:	83 ec 0c             	sub    $0xc,%esp
+ 9e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9eb:	e8 3b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ 9f0:	83 c4 10             	add    $0x10,%esp
+ 9f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9f6:	74 1b                	je     a13 <malloc+0x93>
+  hp->s.size = nu;
+ 9f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9fb:	83 ec 0c             	sub    $0xc,%esp
+ 9fe:	83 c0 08             	add    $0x8,%eax
+ a01:	50                   	push   %eax
+ a02:	e8 e9 fe ff ff       	call   8f0 <free>
+  return freep;
+ a07:	a1 14 0e 00 00       	mov    0xe14,%eax
+      if((p = morecore(nunits)) == 0)
+ a0c:	83 c4 10             	add    $0x10,%esp
+ a0f:	85 c0                	test   %eax,%eax
+ a11:	75 bd                	jne    9d0 <malloc+0x50>
+        return 0;
+  }
+}
+ a13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a16:	31 c0                	xor    %eax,%eax
+}
+ a18:	5b                   	pop    %ebx
+ a19:	5e                   	pop    %esi
+ a1a:	5f                   	pop    %edi
+ a1b:	5d                   	pop    %ebp
+ a1c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a1d:	89 c2                	mov    %eax,%edx
+ a1f:	89 f8                	mov    %edi,%eax
+ a21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a28:	39 ce                	cmp    %ecx,%esi
+ a2a:	74 54                	je     a80 <malloc+0x100>
+        p->s.size -= nunits;
+ a2c:	29 f1                	sub    %esi,%ecx
+ a2e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a31:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a34:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a37:	a3 14 0e 00 00       	mov    %eax,0xe14
+}
+ a3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a3f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a42:	5b                   	pop    %ebx
+ a43:	5e                   	pop    %esi
+ a44:	5f                   	pop    %edi
+ a45:	5d                   	pop    %ebp
+ a46:	c3                   	ret    
+ a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a4e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a50:	c7 05 14 0e 00 00 18 	movl   $0xe18,0xe14
+ a57:	0e 00 00 
+    base.s.size = 0;
+ a5a:	bf 18 0e 00 00       	mov    $0xe18,%edi
+    base.s.ptr = freep = prevp = &base;
+ a5f:	c7 05 18 0e 00 00 18 	movl   $0xe18,0xe18
+ a66:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a69:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a6b:	c7 05 1c 0e 00 00 00 	movl   $0x0,0xe1c
+ a72:	00 00 00 
+    if(p->s.size >= nunits){
+ a75:	e9 36 ff ff ff       	jmp    9b0 <malloc+0x30>
+ a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a80:	8b 0a                	mov    (%edx),%ecx
+ a82:	89 08                	mov    %ecx,(%eax)
+ a84:	eb b1                	jmp    a37 <malloc+0xb7>
diff -ruN xv6-public/ls.d xv6-public_mine/ls.d
--- xv6-public/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ls.d	2021-09-30 23:42:23.936682703 +0530
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files xv6-public/ls.o and xv6-public_mine/ls.o differ
diff -ruN xv6-public/ls.sym xv6-public_mine/ls.sym
--- xv6-public/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ls.sym	2021-09-30 23:42:24.532865549 +0530
@@ -0,0 +1,65 @@
+00000000 .text
+00000a88 .rodata
+00000af0 .eh_frame
+00000e04 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+00000e04 buf.1112
+00000000 ulib.c
+00000000 printf.c
+00000670 printint
+00000adc digits.1101
+00000000 umalloc.c
+00000e14 freep
+00000e18 base
+00000340 strcpy
+00000060 fmtname
+0000065b set_prio
+00000720 printf
+00000570 memmove
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000980 malloc
+00000633 sleep
+00000653 wait2
+000005b3 pipe
+000005c3 write
+0000064b history
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+00000e04 __bss_start
+00000400 memset
+00000000 main
+00000370 strcmp
+0000061b dup
+000004e0 stat
+00000e04 _edata
+00000e20 _end
+00000603 link
+00000100 ls
+000005a3 exit
+00000530 atoi
+00000663 yield2
+00000643 draw
+000003c0 strlen
+000005e3 open
+00000420 strchr
+0000060b mkdir
+000005cb close
+000008f0 free
diff -ruN xv6-public/main.d xv6-public_mine/main.d
--- xv6-public/main.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/main.d	2021-09-30 23:41:51.926163026 +0530
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files xv6-public/main.o and xv6-public_mine/main.o differ
diff -ruN xv6-public/Makefile xv6-public_mine/Makefile
--- xv6-public/Makefile	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/Makefile	2021-09-30 11:02:43.000000000 +0530
@@ -51,7 +51,7 @@
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+ QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -71,6 +71,10 @@
 	echo "***" 1>&2; exit 1)
 endif
 
+ifndef SCHEDFLAG
+SCHEDFLAG := DEFAULT
+endif
+
 CC = $(TOOLPREFIX)gcc
 AS = $(TOOLPREFIX)gas
 LD = $(TOOLPREFIX)ld
@@ -90,6 +94,17 @@
 CFLAGS += -fno-pie -nopie
 endif
 
+ifeq ($(SCHEDFLAG), FCFS)
+	CFLAGS += -D FCFS
+else ifeq ($(SCHEDFLAG), SML)
+	CFLAGS += -D SML
+else ifeq ($(SCHEDFLAG), DML)
+	CFLAGS += -D DML
+else
+	CFLAGS += -D DEFAULT
+endif
+
+
 xv6.img: bootblock kernel
 	dd if=/dev/zero of=xv6.img count=10000
 	dd if=bootblock of=xv6.img conv=notrunc
@@ -181,6 +196,11 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_Drawtest\
+	_statistics\
+	_sanity\
+	_SMLsanity\
+# Drawtest.c is available for xv6 source code for compilation.
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -249,7 +269,7 @@
 
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c Drawtest.c statistics.c sanity.c SMLsanity.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
Binary files xv6-public/_mkdir and xv6-public_mine/_mkdir differ
diff -ruN xv6-public/mkdir.asm xv6-public_mine/mkdir.asm
--- xv6-public/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/mkdir.asm	2021-09-30 23:42:25.081032897 +0530
@@ -0,0 +1,1239 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 11 03 00 00       	call   34b <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 df 07 00 00       	push   $0x7df
+  58:	6a 02                	push   $0x2
+  5a:	e8 01 04 00 00       	call   460 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 c8 07 00 00       	push   $0x7c8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ee 03 00 00       	call   460 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <draw>:
+SYSCALL(draw)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <history>:
+SYSCALL(history)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <wait2>:
+SYSCALL(wait2)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_prio>:
+SYSCALL(set_prio)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <yield2>:
+SYSCALL(yield2)
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 04 08 00 00 	movzbl 0x804(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 ce fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 55 fe ff ff       	call   303 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 f5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 e1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 6a fd ff ff       	call   303 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb fb 07 00 00       	mov    $0x7fb,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 f1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 bc 0a 00 00       	mov    0xabc,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 bc 0a 00 00       	mov    %eax,0xabc
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 bc 0a 00 00       	mov    %eax,0xabc
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 3b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 bc 0a 00 00       	mov    0xabc,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 bc 0a 00 00       	mov    %eax,0xabc
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	bf c0 0a 00 00       	mov    $0xac0,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
+ 7a6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/mkdir.d xv6-public_mine/mkdir.d
--- xv6-public/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/mkdir.d	2021-09-30 23:42:24.884973307 +0530
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/mkdir.o and xv6-public_mine/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-public_mine/mkdir.sym
--- xv6-public/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/mkdir.sym	2021-09-30 23:42:25.149053345 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007c8 .rodata
+00000818 .eh_frame
+00000abc .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+00000804 digits.1101
+00000000 umalloc.c
+00000abc freep
+00000ac0 base
+00000080 strcpy
+0000039b set_prio
+00000460 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006c0 malloc
+00000373 sleep
+00000393 wait2
+000002f3 pipe
+00000303 write
+0000038b history
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000abc __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000035b dup
+00000220 stat
+00000abc _edata
+00000ac8 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+000003a3 yield2
+00000383 draw
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000630 free
Binary files xv6-public/mkfs and xv6-public_mine/mkfs differ
diff -ruN xv6-public/mp.d xv6-public_mine/mp.d
--- xv6-public/mp.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/mp.d	2021-09-30 23:41:52.610079379 +0530
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files xv6-public/mp.o and xv6-public_mine/mp.o differ
diff -ruN xv6-public/param.h xv6-public_mine/param.h
--- xv6-public/param.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/param.h	2021-09-30 10:41:20.000000000 +0530
@@ -11,4 +11,5 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
+#define QUANTA       5
 
diff -ruN xv6-public/picirq.d xv6-public_mine/picirq.d
--- xv6-public/picirq.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/picirq.d	2021-09-30 23:41:52.926040759 +0530
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files xv6-public/picirq.o and xv6-public_mine/picirq.o differ
diff -ruN xv6-public/pipe.d xv6-public_mine/pipe.d
--- xv6-public/pipe.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/pipe.d	2021-09-30 23:41:53.437978462 +0530
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6-public/pipe.o and xv6-public_mine/pipe.o differ
diff -ruN xv6-public/printf.d xv6-public_mine/printf.d
--- xv6-public/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/printf.d	2021-09-30 23:42:18.907055086 +0530
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/printf.o and xv6-public_mine/printf.o differ
diff -ruN xv6-public/proc.c xv6-public_mine/proc.c
--- xv6-public/proc.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/proc.c	2021-09-30 22:43:03.565980029 +0530
@@ -12,6 +12,12 @@
   struct proc proc[NPROC];
 } ptable;
 
+typedef struct _pqueue_t {
+    int size;                           /*the number of element inside*/
+    int capacity;                       /*the total size of the priority queue*/
+    struct proc* procs[NPROC];          /*memory to store void**/
+} pqueue_t;
+
 static struct proc *initproc;
 
 int nextpid = 1;
@@ -20,10 +26,91 @@
 
 static void wakeup1(void *chan);
 
+pqueue_t queue1;  // priority queue for priority 1
+pqueue_t queue2;  // priority queue for priority 2
+pqueue_t queue3;  // priority queue for priority 3
+
+/****************************************************/
+// create a priority queuepqueue_t
+void pqueue_create(pqueue_t* q, int cap){
+    q->size = 0;
+    q->capacity = cap;
+    for(int i=0; i < cap; i++)
+      q->procs[i] = 0;
+}
+
+// insert an element into the queue
+void pqueue_insert(pqueue_t* q, struct proc* p){
+    int pos;
+    if(q->size == q->capacity){
+        panic("error: the priority queue is full");
+    }else{
+        //find a position from last element of the array
+        pos = q->size - 1;
+        while(pos >= 0 && q->procs[pos]->ctime > p->ctime){
+            q->procs[pos+1] = q->procs[pos];
+            pos --;
+        }
+
+        //insert into the arry
+        q->procs[pos+1] = p;
+        q->size ++;
+    }
+}
+
+// remove an element into the queue
+//struct proc* pqueue_deque(pqueue_t* q);
+
+// check the first an element into the queue
+struct proc* pqueue_get(pqueue_t* q){
+    struct proc* np = 0;
+    int pos = 0;
+
+    for(pos = 0; pos < q->size; pos++){
+      if(q->procs[pos]->state == RUNNABLE){
+        np = q->procs[pos];
+        break;
+      }
+    }
+
+    return np;
+}
+
+int pqueue_size(pqueue_t* q){
+    return q->size;
+}
+
+void pqueue_remove(pqueue_t* q, struct proc* proc){
+    int pos;
+    bool found = false;
+    
+    // find the pos of the element
+    pos = 0;
+    while(pos < q->size && !found){
+        if(q->procs[pos] == proc) found = true;
+        else pos++;
+    }
+    if(found){
+        while(pos < q->size-1){
+            q->procs[pos] = q->procs[pos+1];
+            pos++;
+        }
+        q->procs[q->size-1] = 0;
+        q->size --;
+    }
+
+}
+/****************************************************/
+
 void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+
+  // create three queue
+  pqueue_create(&queue1, NPROC);
+  pqueue_create(&queue2, NPROC);
+  pqueue_create(&queue3, NPROC);
 }
 
 // Must be called with interrupts disabled
@@ -88,7 +175,10 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-
+  p->ctime = ticks;
+  p->retime = 0;
+  p->rutime = 0;
+  p->stime = 0;
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -130,6 +220,7 @@
     panic("userinit: out of memory?");
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
   p->sz = PGSIZE;
+  p->ctime = ticks;
   memset(p->tf, 0, sizeof(*p->tf));
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
@@ -139,6 +230,16 @@
   p->tf->esp = PGSIZE;
   p->tf->eip = 0;  // beginning of initcode.S
 
+  #ifdef SML
+  p->priority = 2; // sets the initial priority of a process to 2 
+  pqueue_insert(&queue2, p);
+  #endif
+
+  #ifdef DML
+  p->priority = 2; // the initial priority of the process is set to 2 
+  pqueue_insert(&queue2, p);
+  #endif
+
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
@@ -189,6 +290,34 @@
     return -1;
   }
 
+  #ifdef SML
+  // same as the parent priority
+  np->priority = curproc->priority; 
+  if(np->priority == 1){
+    pqueue_insert(&queue1, np);
+  }else if(np->priority == 2){
+    pqueue_insert(&queue2, np);
+  }else if(np->priority == 3){
+    pqueue_insert(&queue3, np);
+  }else{
+    panic("priority can be 1, 2 and 3 only");
+  }
+  #endif
+
+  #ifdef DML
+  np->priority = curproc->priority; 
+  // same as the parent priority
+  if(np->priority == 1){
+    pqueue_insert(&queue1, np);
+  }else if(np->priority == 2){
+    pqueue_insert(&queue2, np);
+  }else if(np->priority == 3){
+    pqueue_insert(&queue3, np);
+  }else{
+    panic("priority can be 1, 2 and 3 only");
+  }
+  #endif
+
   // Copy process state from proc.
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
     kfree(np->kstack);
@@ -216,6 +345,8 @@
 
   np->state = RUNNABLE;
 
+  //np->retime = ticks;
+
   release(&ptable.lock);
 
   return pid;
@@ -286,15 +417,37 @@
       havekids = 1;
       if(p->state == ZOMBIE){
         // Found one.
+        
+        #ifdef SML // remove process from the queue
+        if(p->priority == 1){
+          pqueue_remove(&queue1, p);
+        }else if(p->priority == 2){
+          pqueue_remove(&queue2, p);
+        }else if(p->priority == 3){
+          pqueue_remove(&queue3, p);
+        }
+        #endif 
+
+        #ifdef DML // remove process from the queue
+        if(p->priority == 1){
+          pqueue_remove(&queue1, p);
+        }else if(p->priority == 2){
+          pqueue_remove(&queue2, p);
+        }else if(p->priority == 3){
+          pqueue_remove(&queue3, p);
+        }
+        #endif 
+        
         pid = p->pid;
         kfree(p->kstack);
         p->kstack = 0;
         freevm(p->pgdir);
+        p->state = UNUSED;
         p->pid = 0;
         p->parent = 0;
         p->name[0] = 0;
         p->killed = 0;
-        p->state = UNUSED;
+        p->ctime = 0;
         release(&ptable.lock);
         return pid;
       }
@@ -311,6 +464,75 @@
   }
 }
 
+int wait2(int *ctime, int *retime, int *rutime, int *stime) {
+  struct proc *p;
+  struct proc *curproc=myproc();
+  
+  int havekids, pid;
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for zombie children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != curproc)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        // Found one.
+        // retrieving ready, run, sleep time
+        
+        #ifdef SML // remove process from the queue
+        if(p->priority == 1){
+          pqueue_remove(&queue1, p);
+        }else if(p->priority == 2){
+          pqueue_remove(&queue2, p);
+        }else if(p->priority == 3){
+          pqueue_remove(&queue3, p);
+        }
+        #endif 
+
+        #ifdef DML // remove process from the queue
+        if(p->priority == 1){
+          pqueue_remove(&queue1, p);
+        }else if(p->priority == 2){
+          pqueue_remove(&queue2, p);
+        }else if(p->priority == 3){
+          pqueue_remove(&queue3, p);
+        }
+        #endif 
+        
+        *ctime = p->ctime;
+        *retime = p->retime;
+        *rutime = p->rutime;
+        *stime = p->stime;
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->state = UNUSED;
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->ctime = 0;
+        p->retime = 0;
+        p->rutime = 0;
+        p->stime = 0;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+      
+    if(!havekids || curproc->killed) {
+      release(&ptable.lock);
+      return -1;
+    }
+    
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -332,7 +554,9 @@
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    #ifdef DEFAULT
+
+     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
@@ -342,14 +566,78 @@
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
+      swtch(&c->scheduler, p->context);
       switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
     }
+    #endif
+ 
+    #ifdef FCFS
+    struct proc* oldest_proc = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->state != RUNNABLE)
+        continue;
+      // oldest proc to be present
+      if(oldest_proc == 0){
+        oldest_proc = p;
+      }
+      else if(p->ctime < oldest_proc->ctime){
+        oldest_proc = p;
+      }
+    }
+
+    if(oldest_proc != 0){
+      // we will run the oldest_proc or context switch to iot
+      c->proc = oldest_proc;
+      switchuvm(oldest_proc);
+      oldest_proc->state = RUNNING;
+      swtch(&(c->scheduler), oldest_proc->context);
+      switchkvm();
+    }
+
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
+    #endif
+
+    #ifdef SML
+    p = pqueue_get(&queue3); // choosing from queue3
+    if(p == 0) p = pqueue_get(&queue2); // choose from queue 2
+    if(p == 0) p = pqueue_get(&queue1); // choose from queue 1
+    if(p != 0){
+      // Switch to chosen process. 
+      c->proc = p;
+      switchuvm(p);
+      p->state = RUNNING;
+      //p->rutime = ticks;
+      swtch(&(c->scheduler), p->context);
+      switchkvm();
+    }
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
+    #endif
+
+    #ifdef DML
+    p = pqueue_get(&queue3); // choosing from queue3
+    if(p == 0) p = pqueue_get(&queue2); // choose from queue 2
+    if(p == 0) p = pqueue_get(&queue1); // choose from queue 1
+    if(p != 0){
+      // Switch to chosen process. 
+      c->proc = p;
+      switchuvm(p);
+      p->state = RUNNING;
+      swtch(&(c->scheduler), p->context);
+      switchkvm();
+    }
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
+    #endif
+
     release(&ptable.lock);
 
   }
@@ -387,6 +675,7 @@
 {
   acquire(&ptable.lock);  //DOC: yieldlock
   myproc()->state = RUNNABLE;
+  //myproc()->retime = ticks;
   sched();
   release(&ptable.lock);
 }
@@ -438,6 +727,7 @@
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
+  //p->stime = ticks;
 
   sched();
 
@@ -460,8 +750,23 @@
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
+      #ifdef DML
+      //put it to hightest queue
+      if(p->priority == 1){
+        pqueue_remove(&queue1, p);
+        pqueue_insert(&queue3, p);
+      }
+      else if(p->priority == 2){
+        pqueue_remove(&queue2, p);
+        pqueue_insert(&queue3, p);
+      }
+      p->priority = 3;
+      #endif
+
       p->state = RUNNABLE;
+      //p->retime = ticks;
+    }
 }
 
 // Wake up all processes sleeping on chan.
@@ -486,8 +791,10 @@
     if(p->pid == pid){
       p->killed = 1;
       // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
+      if(p->state == SLEEPING){
         p->state = RUNNABLE;
+        //p->retime = ticks;
+      }
       release(&ptable.lock);
       return 0;
     }
@@ -532,3 +839,156 @@
     cprintf("\n");
   }
 }
+
+
+// this function runs when a tick occurs and is called in trap.c
+void updatestatistics() {
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    switch(p->state) {
+      case SLEEPING:
+        p->stime++;
+        break;
+      case RUNNABLE:
+        p->retime++;
+        break;
+      case RUNNING:
+        p->rutime++;
+        break;
+      default:
+        ;
+    }
+  }
+  release(&ptable.lock);
+}
+
+
+// set priority
+int sys_set_prio(void){
+  struct proc *curproc = myproc();
+  int priority;
+
+  // go forward only in SML mode
+  #ifndef SML
+  return 1;
+  #endif
+
+  // fetch priority from arguments
+  if(argint(0, &priority) < 0)
+    return 1;
+  
+  acquire(&ptable.lock);
+  switch(priority){
+    case 1:
+      if(curproc->priority == 2){
+        pqueue_remove(&queue2, curproc);
+        pqueue_insert(&queue1, curproc);
+      }else if(curproc->priority == 3){
+        pqueue_remove(&queue3, curproc);
+        pqueue_insert(&queue1, curproc);
+      }
+      curproc->priority = 1;
+      break;
+    case 2:
+      if(curproc->priority == 1){
+        pqueue_remove(&queue1, curproc);
+        pqueue_insert(&queue2, curproc);
+      }else if(curproc->priority == 3){
+        pqueue_remove(&queue3, curproc);
+        pqueue_insert(&queue2, curproc);
+      }
+      curproc->priority = 2;
+      break;
+    case 3:
+      if(curproc->priority == 1){
+        pqueue_remove(&queue1, curproc);
+        pqueue_insert(&queue3, curproc);
+      }else if(curproc->priority == 2){
+        pqueue_remove(&queue2, curproc);
+        pqueue_insert(&queue3, curproc);
+      }
+      curproc->priority = 3;
+      break;
+    default:
+      return 1;
+      break;
+  }
+  release(&ptable.lock);
+
+  return 0;
+}
+
+int sys_yield2(void){
+ 
+  acquire(&ptable.lock);  //DOC: yieldlock
+  myproc()->state = RUNNABLE;
+  //myproc()->retime = ticks;
+  
+  int intena;
+  struct proc *p = myproc();
+
+  if(!holding(&ptable.lock)) {
+    panic("sched ptable.lock");
+    return 1;
+  }
+  if(mycpu()->ncli != 1) {
+    panic("sched locks");
+    return 1;
+  }
+  if(p->state == RUNNING) {
+    panic("sched running");
+    return 1;
+  }
+  if(readeflags()&FL_IF) {
+    panic("sched interruptible");
+    return 1;
+  }
+  
+  intena = mycpu()->intena;
+  swtch(&p->context, mycpu()->scheduler);
+  mycpu()->intena = intena;
+  
+  release(&ptable.lock);
+  return 0;
+}
+
+// reset current process priority to 2
+void reset_priority(){
+  struct proc *curproc = myproc();
+  acquire(&ptable.lock);
+  if(curproc->priority == 1){
+    pqueue_remove(&queue1, curproc);
+    pqueue_insert(&queue2, curproc);
+  }else if(curproc->priority == 3){
+    pqueue_remove(&queue3, curproc);
+    pqueue_insert(&queue2, curproc);
+  }
+  curproc->priority = 2;
+  release(&ptable.lock);
+}
+
+
+void decpriority(void) {
+  struct proc *p =myproc();
+  acquire(&ptable.lock);
+  if(p->priority == 2){
+        pqueue_remove(&queue2, p);
+        pqueue_insert(&queue1, p);
+      }
+  else if(p->priority == 3){
+    pqueue_remove(&queue3, p);
+    pqueue_insert(&queue2, p);
+  }
+  myproc()->priority = myproc()->priority == 1 ? 1 : myproc()->priority - 1;
+
+  release(&ptable.lock);
+}
+
+int inc_tickcounter() {
+  int res;
+  acquire(&ptable.lock);
+  res = ++myproc()->tickcounter;
+  release(&ptable.lock);
+  return res;
+}
diff -ruN xv6-public/proc.d xv6-public_mine/proc.d
--- xv6-public/proc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/proc.d	2021-09-30 23:41:55.593717590 +0530
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h
diff -ruN xv6-public/proc.h xv6-public_mine/proc.h
--- xv6-public/proc.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/proc.h	2021-09-30 22:30:18.765132254 +0530
@@ -49,6 +49,12 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint ctime;                  // Process creation time
+  uint stime;                  // process sleeping time
+  uint retime;                 // process ready time
+  uint rutime;                 // process running time
+  int priority;
+  int tickcounter;
 };
 
 // Process memory is laid out contiguously, low addresses first:
@@ -56,3 +62,7 @@
 //   original data and bss
 //   fixed-size stack
 //   expandable heap
+
+void updatestatistics();
+
+void reset_priority();
Binary files xv6-public/proc.o and xv6-public_mine/proc.o differ
Binary files xv6-public/_rm and xv6-public_mine/_rm differ
diff -ruN xv6-public/rm.asm xv6-public_mine/rm.asm
--- xv6-public/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/rm.asm	2021-09-30 23:42:25.565178437 +0530
@@ -0,0 +1,1239 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 f9 02 00 00       	call   333 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 dc 07 00 00       	push   $0x7dc
+  58:	6a 02                	push   $0x2
+  5a:	e8 01 04 00 00       	call   460 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 c8 07 00 00       	push   $0x7c8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 ee 03 00 00       	call   460 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <draw>:
+SYSCALL(draw)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <history>:
+SYSCALL(history)
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <wait2>:
+SYSCALL(wait2)
+ 393:	b8 18 00 00 00       	mov    $0x18,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <set_prio>:
+SYSCALL(set_prio)
+ 39b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <yield2>:
+SYSCALL(yield2)
+ 3a3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+ 3ab:	66 90                	xchg   %ax,%ax
+ 3ad:	66 90                	xchg   %ax,%ax
+ 3af:	90                   	nop
+
+000003b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3b0:	55                   	push   %ebp
+ 3b1:	89 e5                	mov    %esp,%ebp
+ 3b3:	57                   	push   %edi
+ 3b4:	56                   	push   %esi
+ 3b5:	53                   	push   %ebx
+ 3b6:	83 ec 3c             	sub    $0x3c,%esp
+ 3b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3bc:	89 d1                	mov    %edx,%ecx
+{
+ 3be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3c1:	85 d2                	test   %edx,%edx
+ 3c3:	0f 89 7f 00 00 00    	jns    448 <printint+0x98>
+ 3c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3cd:	74 79                	je     448 <printint+0x98>
+    neg = 1;
+ 3cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3d8:	31 db                	xor    %ebx,%ebx
+ 3da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3e0:	89 c8                	mov    %ecx,%eax
+ 3e2:	31 d2                	xor    %edx,%edx
+ 3e4:	89 cf                	mov    %ecx,%edi
+ 3e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3e9:	0f b6 92 fc 07 00 00 	movzbl 0x7fc(%edx),%edx
+ 3f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3f3:	89 d8                	mov    %ebx,%eax
+ 3f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 401:	76 dd                	jbe    3e0 <printint+0x30>
+  if(neg)
+ 403:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 406:	85 c9                	test   %ecx,%ecx
+ 408:	74 0c                	je     416 <printint+0x66>
+    buf[i++] = '-';
+ 40a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 40f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 411:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 416:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 419:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 41d:	eb 07                	jmp    426 <printint+0x76>
+ 41f:	90                   	nop
+ 420:	0f b6 13             	movzbl (%ebx),%edx
+ 423:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 426:	83 ec 04             	sub    $0x4,%esp
+ 429:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 42c:	6a 01                	push   $0x1
+ 42e:	56                   	push   %esi
+ 42f:	57                   	push   %edi
+ 430:	e8 ce fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 435:	83 c4 10             	add    $0x10,%esp
+ 438:	39 de                	cmp    %ebx,%esi
+ 43a:	75 e4                	jne    420 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 43c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 43f:	5b                   	pop    %ebx
+ 440:	5e                   	pop    %esi
+ 441:	5f                   	pop    %edi
+ 442:	5d                   	pop    %ebp
+ 443:	c3                   	ret    
+ 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 448:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 44f:	eb 87                	jmp    3d8 <printint+0x28>
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 458:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+ 469:	53                   	push   %ebx
+ 46a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 46d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 470:	0f b6 1e             	movzbl (%esi),%ebx
+ 473:	84 db                	test   %bl,%bl
+ 475:	0f 84 b4 00 00 00    	je     52f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 47b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 47e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 481:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 484:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 489:	eb 33                	jmp    4be <printf+0x5e>
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+ 490:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 493:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	74 17                	je     4b4 <printf+0x54>
+  write(fd, &c, 1);
+ 49d:	83 ec 04             	sub    $0x4,%esp
+ 4a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 55 fe ff ff       	call   303 <write>
+ 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4b7:	83 c6 01             	add    $0x1,%esi
+ 4ba:	84 db                	test   %bl,%bl
+ 4bc:	74 71                	je     52f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4be:	0f be cb             	movsbl %bl,%ecx
+ 4c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4c4:	85 d2                	test   %edx,%edx
+ 4c6:	74 c8                	je     490 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4c8:	83 fa 25             	cmp    $0x25,%edx
+ 4cb:	75 e7                	jne    4b4 <printf+0x54>
+      if(c == 'd'){
+ 4cd:	83 f8 64             	cmp    $0x64,%eax
+ 4d0:	0f 84 9a 00 00 00    	je     570 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4dc:	83 f9 70             	cmp    $0x70,%ecx
+ 4df:	74 5f                	je     540 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4e1:	83 f8 73             	cmp    $0x73,%eax
+ 4e4:	0f 84 d6 00 00 00    	je     5c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ea:	83 f8 63             	cmp    $0x63,%eax
+ 4ed:	0f 84 8d 00 00 00    	je     580 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4f3:	83 f8 25             	cmp    $0x25,%eax
+ 4f6:	0f 84 b4 00 00 00    	je     5b0 <printf+0x150>
+  write(fd, &c, 1);
+ 4fc:	83 ec 04             	sub    $0x4,%esp
+ 4ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 f5 fd ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 50e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 511:	83 c4 0c             	add    $0xc,%esp
+ 514:	6a 01                	push   $0x1
+ 516:	83 c6 01             	add    $0x1,%esi
+ 519:	57                   	push   %edi
+ 51a:	ff 75 08             	pushl  0x8(%ebp)
+ 51d:	e8 e1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 522:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 529:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 52b:	84 db                	test   %bl,%bl
+ 52d:	75 8f                	jne    4be <printf+0x5e>
+    }
+  }
+}
+ 52f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 532:	5b                   	pop    %ebx
+ 533:	5e                   	pop    %esi
+ 534:	5f                   	pop    %edi
+ 535:	5d                   	pop    %ebp
+ 536:	c3                   	ret    
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 54d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 550:	8b 13                	mov    (%ebx),%edx
+ 552:	e8 59 fe ff ff       	call   3b0 <printint>
+        ap++;
+ 557:	89 d8                	mov    %ebx,%eax
+ 559:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 55e:	83 c0 04             	add    $0x4,%eax
+ 561:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 564:	e9 4b ff ff ff       	jmp    4b4 <printf+0x54>
+ 569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	eb ce                	jmp    54a <printf+0xea>
+ 57c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 580:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+        ap++;
+ 58a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 58d:	57                   	push   %edi
+ 58e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 591:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 594:	e8 6a fd ff ff       	call   303 <write>
+        ap++;
+ 599:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 59c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59f:	31 d2                	xor    %edx,%edx
+ 5a1:	e9 0e ff ff ff       	jmp    4b4 <printf+0x54>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b3:	83 ec 04             	sub    $0x4,%esp
+ 5b6:	e9 59 ff ff ff       	jmp    514 <printf+0xb4>
+ 5bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5bf:	90                   	nop
+        s = (char*)*ap;
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5c5:	83 c0 04             	add    $0x4,%eax
+ 5c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5cb:	85 db                	test   %ebx,%ebx
+ 5cd:	74 17                	je     5e6 <printf+0x186>
+        while(*s != 0){
+ 5cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5d4:	84 c0                	test   %al,%al
+ 5d6:	0f 84 d8 fe ff ff    	je     4b4 <printf+0x54>
+ 5dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5df:	89 de                	mov    %ebx,%esi
+ 5e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e4:	eb 1a                	jmp    600 <printf+0x1a0>
+          s = "(null)";
+ 5e6:	bb f5 07 00 00       	mov    $0x7f5,%ebx
+        while(*s != 0){
+ 5eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5f3:	89 de                	mov    %ebx,%esi
+ 5f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+  write(fd, &c, 1);
+ 600:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 603:	83 c6 01             	add    $0x1,%esi
+ 606:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 609:	6a 01                	push   $0x1
+ 60b:	57                   	push   %edi
+ 60c:	53                   	push   %ebx
+ 60d:	e8 f1 fc ff ff       	call   303 <write>
+        while(*s != 0){
+ 612:	0f b6 06             	movzbl (%esi),%eax
+ 615:	83 c4 10             	add    $0x10,%esp
+ 618:	84 c0                	test   %al,%al
+ 61a:	75 e4                	jne    600 <printf+0x1a0>
+ 61c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 8e fe ff ff       	jmp    4b4 <printf+0x54>
+ 626:	66 90                	xchg   %ax,%ax
+ 628:	66 90                	xchg   %ax,%ax
+ 62a:	66 90                	xchg   %ax,%ax
+ 62c:	66 90                	xchg   %ax,%ax
+ 62e:	66 90                	xchg   %ax,%ax
+
+00000630 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 630:	f3 0f 1e fb          	endbr32 
+ 634:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 635:	a1 b4 0a 00 00       	mov    0xab4,%eax
+{
+ 63a:	89 e5                	mov    %esp,%ebp
+ 63c:	57                   	push   %edi
+ 63d:	56                   	push   %esi
+ 63e:	53                   	push   %ebx
+ 63f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 642:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 644:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 647:	39 c8                	cmp    %ecx,%eax
+ 649:	73 15                	jae    660 <free+0x30>
+ 64b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+ 650:	39 d1                	cmp    %edx,%ecx
+ 652:	72 14                	jb     668 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 654:	39 d0                	cmp    %edx,%eax
+ 656:	73 10                	jae    668 <free+0x38>
+{
+ 658:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 65a:	8b 10                	mov    (%eax),%edx
+ 65c:	39 c8                	cmp    %ecx,%eax
+ 65e:	72 f0                	jb     650 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 d0                	cmp    %edx,%eax
+ 662:	72 f4                	jb     658 <free+0x28>
+ 664:	39 d1                	cmp    %edx,%ecx
+ 666:	73 f0                	jae    658 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 fa                	cmp    %edi,%edx
+ 670:	74 1e                	je     690 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 672:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 675:	8b 50 04             	mov    0x4(%eax),%edx
+ 678:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 67b:	39 f1                	cmp    %esi,%ecx
+ 67d:	74 28                	je     6a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 67f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 681:	5b                   	pop    %ebx
+  freep = p;
+ 682:	a3 b4 0a 00 00       	mov    %eax,0xab4
+}
+ 687:	5e                   	pop    %esi
+ 688:	5f                   	pop    %edi
+ 689:	5d                   	pop    %ebp
+ 68a:	c3                   	ret    
+ 68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 68f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 690:	03 72 04             	add    0x4(%edx),%esi
+ 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 696:	8b 10                	mov    (%eax),%edx
+ 698:	8b 12                	mov    (%edx),%edx
+ 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 69d:	8b 50 04             	mov    0x4(%eax),%edx
+ 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6a3:	39 f1                	cmp    %esi,%ecx
+ 6a5:	75 d8                	jne    67f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6aa:	a3 b4 0a 00 00       	mov    %eax,0xab4
+    p->s.size += bp->s.size;
+ 6af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6b5:	89 10                	mov    %edx,(%eax)
+}
+ 6b7:	5b                   	pop    %ebx
+ 6b8:	5e                   	pop    %esi
+ 6b9:	5f                   	pop    %edi
+ 6ba:	5d                   	pop    %ebp
+ 6bb:	c3                   	ret    
+ 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6c0:	f3 0f 1e fb          	endbr32 
+ 6c4:	55                   	push   %ebp
+ 6c5:	89 e5                	mov    %esp,%ebp
+ 6c7:	57                   	push   %edi
+ 6c8:	56                   	push   %esi
+ 6c9:	53                   	push   %ebx
+ 6ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6d0:	8b 3d b4 0a 00 00    	mov    0xab4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6d9:	c1 ee 03             	shr    $0x3,%esi
+ 6dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6df:	85 ff                	test   %edi,%edi
+ 6e1:	0f 84 a9 00 00 00    	je     790 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ec:	39 f1                	cmp    %esi,%ecx
+ 6ee:	73 6d                	jae    75d <malloc+0x9d>
+ 6f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 705:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 708:	eb 17                	jmp    721 <malloc+0x61>
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 710:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 712:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	73 4f                	jae    768 <malloc+0xa8>
+ 719:	8b 3d b4 0a 00 00    	mov    0xab4,%edi
+ 71f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 721:	39 c7                	cmp    %eax,%edi
+ 723:	75 eb                	jne    710 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 725:	83 ec 0c             	sub    $0xc,%esp
+ 728:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 72b:	e8 3b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 730:	83 c4 10             	add    $0x10,%esp
+ 733:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 736:	74 1b                	je     753 <malloc+0x93>
+  hp->s.size = nu;
+ 738:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 73b:	83 ec 0c             	sub    $0xc,%esp
+ 73e:	83 c0 08             	add    $0x8,%eax
+ 741:	50                   	push   %eax
+ 742:	e8 e9 fe ff ff       	call   630 <free>
+  return freep;
+ 747:	a1 b4 0a 00 00       	mov    0xab4,%eax
+      if((p = morecore(nunits)) == 0)
+ 74c:	83 c4 10             	add    $0x10,%esp
+ 74f:	85 c0                	test   %eax,%eax
+ 751:	75 bd                	jne    710 <malloc+0x50>
+        return 0;
+  }
+}
+ 753:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 756:	31 c0                	xor    %eax,%eax
+}
+ 758:	5b                   	pop    %ebx
+ 759:	5e                   	pop    %esi
+ 75a:	5f                   	pop    %edi
+ 75b:	5d                   	pop    %ebp
+ 75c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 75d:	89 c2                	mov    %eax,%edx
+ 75f:	89 f8                	mov    %edi,%eax
+ 761:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 768:	39 ce                	cmp    %ecx,%esi
+ 76a:	74 54                	je     7c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 76c:	29 f1                	sub    %esi,%ecx
+ 76e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 771:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 774:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 777:	a3 b4 0a 00 00       	mov    %eax,0xab4
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 77f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 782:	5b                   	pop    %ebx
+ 783:	5e                   	pop    %esi
+ 784:	5f                   	pop    %edi
+ 785:	5d                   	pop    %ebp
+ 786:	c3                   	ret    
+ 787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 78e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 790:	c7 05 b4 0a 00 00 b8 	movl   $0xab8,0xab4
+ 797:	0a 00 00 
+    base.s.size = 0;
+ 79a:	bf b8 0a 00 00       	mov    $0xab8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 79f:	c7 05 b8 0a 00 00 b8 	movl   $0xab8,0xab8
+ 7a6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7ab:	c7 05 bc 0a 00 00 00 	movl   $0x0,0xabc
+ 7b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7b5:	e9 36 ff ff ff       	jmp    6f0 <malloc+0x30>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7c0:	8b 0a                	mov    (%edx),%ecx
+ 7c2:	89 08                	mov    %ecx,(%eax)
+ 7c4:	eb b1                	jmp    777 <malloc+0xb7>
diff -ruN xv6-public/rm.d xv6-public_mine/rm.d
--- xv6-public/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/rm.d	2021-09-30 23:42:25.377121905 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/rm.o and xv6-public_mine/rm.o differ
diff -ruN xv6-public/rm.sym xv6-public_mine/rm.sym
--- xv6-public/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/rm.sym	2021-09-30 23:42:25.589185654 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007c8 .rodata
+00000810 .eh_frame
+00000ab4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+000003b0 printint
+000007fc digits.1101
+00000000 umalloc.c
+00000ab4 freep
+00000ab8 base
+00000080 strcpy
+0000039b set_prio
+00000460 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006c0 malloc
+00000373 sleep
+00000393 wait2
+000002f3 pipe
+00000303 write
+0000038b history
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000ab4 __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000035b dup
+00000220 stat
+00000ab4 _edata
+00000ac0 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+000003a3 yield2
+00000383 draw
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000630 free
Binary files xv6-public/_sanity and xv6-public_mine/_sanity differ
diff -ruN xv6-public/sanity.asm xv6-public_mine/sanity.asm
--- xv6-public/sanity.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sanity.asm	2021-09-30 23:42:33.995527414 +0530
@@ -0,0 +1,1480 @@
+
+_sanity:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]) {
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 58             	sub    $0x58,%esp
+  
+  if (argc != 2){
+  18:	83 39 02             	cmpl   $0x2,(%ecx)
+int main(int argc, char *argv[]) {
+  1b:	8b 41 04             	mov    0x4(%ecx),%eax
+  if (argc != 2){
+  1e:	74 13                	je     33 <main+0x33>
+    printf(1, "Use this format: sanity <no.of.processes>\n");
+  20:	52                   	push   %edx
+  21:	52                   	push   %edx
+  22:	68 d8 09 00 00       	push   $0x9d8
+  27:	6a 01                	push   $0x1
+  29:	e8 42 06 00 00       	call   670 <printf>
+    exit();
+  2e:	e8 c0 04 00 00       	call   4f3 <exit>
+  }
+  int n = 3*atoi(argv[1]);
+  33:	83 ec 0c             	sub    $0xc,%esp
+  36:	ff 70 04             	pushl  0x4(%eax)
+  for (i = 0; i < 3; i++)
+    for (j = 0; j < 3; j++)
+      total[i][j] = 0;
+      
+  int pid;
+  for (int ind=0; ind<n; ind++) {
+  39:	31 db                	xor    %ebx,%ebx
+  int n = 3*atoi(argv[1]);
+  3b:	e8 40 04 00 00       	call   480 <atoi>
+      total[i][j] = 0;
+  40:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
+  47:	83 c4 10             	add    $0x10,%esp
+  4a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
+  int n = 3*atoi(argv[1]);
+  51:	89 c7                	mov    %eax,%edi
+  53:	8d 34 40             	lea    (%eax,%eax,2),%esi
+      total[i][j] = 0;
+  56:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
+  5d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
+  64:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+  6b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
+  72:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  79:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  80:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  for (int ind=0; ind<n; ind++) {
+  87:	39 f3                	cmp    %esi,%ebx
+  89:	7d 61                	jge    ec <main+0xec>
+    pid = fork();
+  8b:	e8 5b 04 00 00       	call   4eb <fork>
+    if (pid == 0) {//child
+  90:	85 c0                	test   %eax,%eax
+  92:	75 3b                	jne    cf <main+0xcf>
+      id = (getpid() - 4) % 3; // ensures independence from the first son's pid when gathering the results in the second part of the program
+  94:	e8 da 04 00 00       	call   573 <getpid>
+  99:	b9 03 00 00 00       	mov    $0x3,%ecx
+  9e:	83 e8 04             	sub    $0x4,%eax
+  a1:	99                   	cltd   
+  a2:	f7 f9                	idiv   %ecx
+      switch(id) {
+  a4:	83 fa 01             	cmp    $0x1,%edx
+  a7:	74 2b                	je     d4 <main+0xd4>
+  a9:	83 fa 02             	cmp    $0x2,%edx
+  ac:	75 1c                	jne    ca <main+0xca>
+  ae:	bb 64 00 00 00       	mov    $0x64,%ebx
+  b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  b7:	90                   	nop
+	  break;
+	case 2: // I/O 
+        j=0;
+        while (j<100) {
+            j++;
+            sleep(1);
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	6a 01                	push   $0x1
+  bd:	e8 c1 04 00 00       	call   583 <sleep>
+        while (j<100) {
+  c2:	83 c4 10             	add    $0x10,%esp
+  c5:	83 eb 01             	sub    $0x1,%ebx
+  c8:	75 ee                	jne    b8 <main+0xb8>
+      total[i][j] /= n/3;
+
+  printf(1, "\nCPU\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[0][0], total[0][1], total[0][2], total[0][0]+total[0][1]+total[0][2]);
+  printf(1, "S-CPU\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[1][0], total[1][1], total[1][2], total[1][0]+total[1][1]+total[1][2]);
+  printf(1, "I/O\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[2][0], total[2][1], total[2][2], total[2][0]+total[2][1]+total[2][2]);
+  exit();
+  ca:	e8 24 04 00 00       	call   4f3 <exit>
+  for (int ind=0; ind<n; ind++) {
+  cf:	83 c3 01             	add    $0x1,%ebx
+  d2:	eb b3                	jmp    87 <main+0x87>
+      switch(id) {
+  d4:	bb 64 00 00 00       	mov    $0x64,%ebx
+  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+            yield2();
+  e0:	e8 ce 04 00 00       	call   5b3 <yield2>
+	  for (i=0; i<100; i++) {
+  e5:	83 eb 01             	sub    $0x1,%ebx
+  e8:	75 f6                	jne    e0 <main+0xe0>
+  ea:	eb de                	jmp    ca <main+0xca>
+  ec:	89 7d a0             	mov    %edi,-0x60(%ebp)
+  for (int ind=0; ind<n; ind++) {
+  ef:	31 db                	xor    %ebx,%ebx
+  f1:	89 75 a4             	mov    %esi,-0x5c(%ebp)
+  f4:	eb 0b                	jmp    101 <main+0x101>
+    switch(id) {
+  f6:	85 d2                	test   %edx,%edx
+  f8:	0f 84 b3 00 00 00    	je     1b1 <main+0x1b1>
+  for (int ind=0; ind<n; ind++) {
+  fe:	83 c3 01             	add    $0x1,%ebx
+ 101:	8b 75 c4             	mov    -0x3c(%ebp),%esi
+ 104:	3b 5d a4             	cmp    -0x5c(%ebp),%ebx
+ 107:	0f 8d e0 00 00 00    	jge    1ed <main+0x1ed>
+    pid = wait2(&c_time, &wait_time, &run_time, &io_time);
+ 10d:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    id = (pid - 4) % 3; // correlates to j in the dispatching loop
+ 110:	bf 03 00 00 00       	mov    $0x3,%edi
+    pid = wait2(&c_time, &wait_time, &run_time, &io_time);
+ 115:	50                   	push   %eax
+ 116:	8d 45 bc             	lea    -0x44(%ebp),%eax
+ 119:	50                   	push   %eax
+ 11a:	8d 45 b8             	lea    -0x48(%ebp),%eax
+ 11d:	50                   	push   %eax
+ 11e:	8d 45 b4             	lea    -0x4c(%ebp),%eax
+ 121:	50                   	push   %eax
+ 122:	e8 7c 04 00 00       	call   5a3 <wait2>
+    switch(id) {
+ 127:	83 c4 10             	add    $0x10,%esp
+    pid = wait2(&c_time, &wait_time, &run_time, &io_time);
+ 12a:	89 c1                	mov    %eax,%ecx
+    id = (pid - 4) % 3; // correlates to j in the dispatching loop
+ 12c:	8d 40 fc             	lea    -0x4(%eax),%eax
+ 12f:	99                   	cltd   
+ 130:	f7 ff                	idiv   %edi
+    switch(id) {
+ 132:	83 fa 01             	cmp    $0x1,%edx
+ 135:	74 3e                	je     175 <main+0x175>
+ 137:	83 fa 02             	cmp    $0x2,%edx
+ 13a:	75 ba                	jne    f6 <main+0xf6>
+	printf(1, "I/O, pid: %d, creation time:%d, wait time: %d, run time: %d, io time: %d, turnaround time: %d\n", pid,c_time, wait_time, run_time, io_time, wait_time + run_time + io_time);
+ 13c:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 13f:	8b 55 bc             	mov    -0x44(%ebp),%edx
+ 142:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 145:	8d 04 17             	lea    (%edi,%edx,1),%eax
+ 148:	01 f0                	add    %esi,%eax
+ 14a:	50                   	push   %eax
+ 14b:	56                   	push   %esi
+ 14c:	52                   	push   %edx
+ 14d:	57                   	push   %edi
+ 14e:	ff 75 b4             	pushl  -0x4c(%ebp)
+ 151:	51                   	push   %ecx
+ 152:	68 c8 0a 00 00       	push   $0xac8
+ 157:	6a 01                	push   $0x1
+ 159:	e8 12 05 00 00       	call   670 <printf>
+	total[2][0] += wait_time;
+ 15e:	8b 45 b8             	mov    -0x48(%ebp),%eax
+	break;
+ 161:	83 c4 20             	add    $0x20,%esp
+	total[2][0] += wait_time;
+ 164:	01 45 dc             	add    %eax,-0x24(%ebp)
+	total[2][1] += run_time;
+ 167:	8b 45 bc             	mov    -0x44(%ebp),%eax
+ 16a:	01 45 e0             	add    %eax,-0x20(%ebp)
+	total[2][2] += io_time;
+ 16d:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 170:	01 45 e4             	add    %eax,-0x1c(%ebp)
+	break;
+ 173:	eb 89                	jmp    fe <main+0xfe>
+        printf(1, "S-CPU, pid: %d, creation time:%d, wait time: %d, run time: %d, io time: %d, turnaround time: %d\n", pid,c_time, wait_time, run_time, io_time, wait_time + run_time + io_time);
+ 175:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 178:	8b 55 bc             	mov    -0x44(%ebp),%edx
+ 17b:	8b 75 c0             	mov    -0x40(%ebp),%esi
+ 17e:	8d 04 17             	lea    (%edi,%edx,1),%eax
+ 181:	01 f0                	add    %esi,%eax
+ 183:	50                   	push   %eax
+ 184:	56                   	push   %esi
+ 185:	52                   	push   %edx
+ 186:	57                   	push   %edi
+ 187:	ff 75 b4             	pushl  -0x4c(%ebp)
+ 18a:	51                   	push   %ecx
+ 18b:	68 64 0a 00 00       	push   $0xa64
+ 190:	6a 01                	push   $0x1
+ 192:	e8 d9 04 00 00       	call   670 <printf>
+	total[1][0] += wait_time;
+ 197:	8b 45 b8             	mov    -0x48(%ebp),%eax
+	break;
+ 19a:	83 c4 20             	add    $0x20,%esp
+	total[1][0] += wait_time;
+ 19d:	01 45 d0             	add    %eax,-0x30(%ebp)
+	total[1][1] += run_time;
+ 1a0:	8b 45 bc             	mov    -0x44(%ebp),%eax
+ 1a3:	01 45 d4             	add    %eax,-0x2c(%ebp)
+	total[1][2] += io_time;
+ 1a6:	8b 45 c0             	mov    -0x40(%ebp),%eax
+ 1a9:	01 45 d8             	add    %eax,-0x28(%ebp)
+	break;
+ 1ac:	e9 4d ff ff ff       	jmp    fe <main+0xfe>
+        printf(1, "CPU, pid: %d, creation time:%d, wait time: %d, run time: %d, io time: %d, turnaround time: %d\n", pid,c_time, wait_time, run_time, io_time, wait_time + run_time + io_time);
+ 1b1:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 1b4:	8b 55 bc             	mov    -0x44(%ebp),%edx
+ 1b7:	8d 04 17             	lea    (%edi,%edx,1),%eax
+ 1ba:	03 45 c0             	add    -0x40(%ebp),%eax
+ 1bd:	50                   	push   %eax
+ 1be:	ff 75 c0             	pushl  -0x40(%ebp)
+ 1c1:	52                   	push   %edx
+ 1c2:	57                   	push   %edi
+ 1c3:	ff 75 b4             	pushl  -0x4c(%ebp)
+ 1c6:	51                   	push   %ecx
+ 1c7:	68 04 0a 00 00       	push   $0xa04
+ 1cc:	6a 01                	push   $0x1
+ 1ce:	e8 9d 04 00 00       	call   670 <printf>
+	total[0][0] += wait_time;
+ 1d3:	03 75 b8             	add    -0x48(%ebp),%esi
+	total[0][1] += run_time;
+ 1d6:	8b 45 bc             	mov    -0x44(%ebp),%eax
+        break;
+ 1d9:	83 c4 20             	add    $0x20,%esp
+	total[0][1] += run_time;
+ 1dc:	01 45 c8             	add    %eax,-0x38(%ebp)
+	total[0][2] += io_time;
+ 1df:	8b 45 c0             	mov    -0x40(%ebp),%eax
+	total[0][0] += wait_time;
+ 1e2:	89 75 c4             	mov    %esi,-0x3c(%ebp)
+	total[0][2] += io_time;
+ 1e5:	01 45 cc             	add    %eax,-0x34(%ebp)
+        break;
+ 1e8:	e9 11 ff ff ff       	jmp    fe <main+0xfe>
+ 1ed:	8b 7d a0             	mov    -0x60(%ebp),%edi
+ 1f0:	8d 4d c4             	lea    -0x3c(%ebp),%ecx
+ 1f3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
+      total[i][j] /= n/3;
+ 1f6:	8b 01                	mov    (%ecx),%eax
+ 1f8:	83 c1 0c             	add    $0xc,%ecx
+ 1fb:	99                   	cltd   
+ 1fc:	f7 ff                	idiv   %edi
+ 1fe:	89 41 f4             	mov    %eax,-0xc(%ecx)
+ 201:	8b 41 f8             	mov    -0x8(%ecx),%eax
+ 204:	99                   	cltd   
+ 205:	f7 ff                	idiv   %edi
+ 207:	89 41 f8             	mov    %eax,-0x8(%ecx)
+ 20a:	8b 41 fc             	mov    -0x4(%ecx),%eax
+ 20d:	99                   	cltd   
+ 20e:	f7 ff                	idiv   %edi
+ 210:	89 41 fc             	mov    %eax,-0x4(%ecx)
+  for (i = 0; i < 3; i++)
+ 213:	39 d9                	cmp    %ebx,%ecx
+ 215:	75 df                	jne    1f6 <main+0x1f6>
+  printf(1, "\nCPU\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[0][0], total[0][1], total[0][2], total[0][0]+total[0][1]+total[0][2]);
+ 217:	8b 55 c4             	mov    -0x3c(%ebp),%edx
+ 21a:	8b 4d c8             	mov    -0x38(%ebp),%ecx
+ 21d:	50                   	push   %eax
+ 21e:	8b 5d cc             	mov    -0x34(%ebp),%ebx
+ 221:	50                   	push   %eax
+ 222:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
+ 225:	01 d8                	add    %ebx,%eax
+ 227:	50                   	push   %eax
+ 228:	53                   	push   %ebx
+ 229:	51                   	push   %ecx
+ 22a:	52                   	push   %edx
+ 22b:	68 28 0b 00 00       	push   $0xb28
+ 230:	6a 01                	push   $0x1
+ 232:	e8 39 04 00 00       	call   670 <printf>
+  printf(1, "S-CPU\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[1][0], total[1][1], total[1][2], total[1][0]+total[1][1]+total[1][2]);
+ 237:	8b 55 d0             	mov    -0x30(%ebp),%edx
+ 23a:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+ 23d:	83 c4 18             	add    $0x18,%esp
+ 240:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+ 243:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
+ 246:	01 d8                	add    %ebx,%eax
+ 248:	50                   	push   %eax
+ 249:	53                   	push   %ebx
+ 24a:	51                   	push   %ecx
+ 24b:	52                   	push   %edx
+ 24c:	68 8c 0b 00 00       	push   $0xb8c
+ 251:	6a 01                	push   $0x1
+ 253:	e8 18 04 00 00       	call   670 <printf>
+  printf(1, "I/O\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[2][0], total[2][1], total[2][2], total[2][0]+total[2][1]+total[2][2]);
+ 258:	8b 55 dc             	mov    -0x24(%ebp),%edx
+ 25b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+ 25e:	83 c4 18             	add    $0x18,%esp
+ 261:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+ 264:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
+ 267:	01 d8                	add    %ebx,%eax
+ 269:	50                   	push   %eax
+ 26a:	53                   	push   %ebx
+ 26b:	51                   	push   %ecx
+ 26c:	52                   	push   %edx
+ 26d:	68 f0 0b 00 00       	push   $0xbf0
+ 272:	6a 01                	push   $0x1
+ 274:	e8 f7 03 00 00       	call   670 <printf>
+  exit();
+ 279:	83 c4 20             	add    $0x20,%esp
+ 27c:	e9 49 fe ff ff       	jmp    ca <main+0xca>
+ 281:	66 90                	xchg   %ax,%ax
+ 283:	66 90                	xchg   %ax,%ax
+ 285:	66 90                	xchg   %ax,%ax
+ 287:	66 90                	xchg   %ax,%ax
+ 289:	66 90                	xchg   %ax,%ax
+ 28b:	66 90                	xchg   %ax,%ax
+ 28d:	66 90                	xchg   %ax,%ax
+ 28f:	90                   	nop
+
+00000290 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 295:	31 c0                	xor    %eax,%eax
+{
+ 297:	89 e5                	mov    %esp,%ebp
+ 299:	53                   	push   %ebx
+ 29a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 29d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 2a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 2a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 2a7:	83 c0 01             	add    $0x1,%eax
+ 2aa:	84 d2                	test   %dl,%dl
+ 2ac:	75 f2                	jne    2a0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 2ae:	89 c8                	mov    %ecx,%eax
+ 2b0:	5b                   	pop    %ebx
+ 2b1:	5d                   	pop    %ebp
+ 2b2:	c3                   	ret    
+ 2b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002c0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 2c0:	f3 0f 1e fb          	endbr32 
+ 2c4:	55                   	push   %ebp
+ 2c5:	89 e5                	mov    %esp,%ebp
+ 2c7:	53                   	push   %ebx
+ 2c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 2cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 2ce:	0f b6 01             	movzbl (%ecx),%eax
+ 2d1:	0f b6 1a             	movzbl (%edx),%ebx
+ 2d4:	84 c0                	test   %al,%al
+ 2d6:	75 19                	jne    2f1 <strcmp+0x31>
+ 2d8:	eb 26                	jmp    300 <strcmp+0x40>
+ 2da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 2e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 2e4:	83 c1 01             	add    $0x1,%ecx
+ 2e7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 2ea:	0f b6 1a             	movzbl (%edx),%ebx
+ 2ed:	84 c0                	test   %al,%al
+ 2ef:	74 0f                	je     300 <strcmp+0x40>
+ 2f1:	38 d8                	cmp    %bl,%al
+ 2f3:	74 eb                	je     2e0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 2f5:	29 d8                	sub    %ebx,%eax
+}
+ 2f7:	5b                   	pop    %ebx
+ 2f8:	5d                   	pop    %ebp
+ 2f9:	c3                   	ret    
+ 2fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 300:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 302:	29 d8                	sub    %ebx,%eax
+}
+ 304:	5b                   	pop    %ebx
+ 305:	5d                   	pop    %ebp
+ 306:	c3                   	ret    
+ 307:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30e:	66 90                	xchg   %ax,%ax
+
+00000310 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 310:	f3 0f 1e fb          	endbr32 
+ 314:	55                   	push   %ebp
+ 315:	89 e5                	mov    %esp,%ebp
+ 317:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 31a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 31d:	74 21                	je     340 <strlen+0x30>
+ 31f:	31 c0                	xor    %eax,%eax
+ 321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 328:	83 c0 01             	add    $0x1,%eax
+ 32b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 32f:	89 c1                	mov    %eax,%ecx
+ 331:	75 f5                	jne    328 <strlen+0x18>
+    ;
+  return n;
+}
+ 333:	89 c8                	mov    %ecx,%eax
+ 335:	5d                   	pop    %ebp
+ 336:	c3                   	ret    
+ 337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 33e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 340:	31 c9                	xor    %ecx,%ecx
+}
+ 342:	5d                   	pop    %ebp
+ 343:	89 c8                	mov    %ecx,%eax
+ 345:	c3                   	ret    
+ 346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000350 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 350:	f3 0f 1e fb          	endbr32 
+ 354:	55                   	push   %ebp
+ 355:	89 e5                	mov    %esp,%ebp
+ 357:	57                   	push   %edi
+ 358:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 35b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 35e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 361:	89 d7                	mov    %edx,%edi
+ 363:	fc                   	cld    
+ 364:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 366:	89 d0                	mov    %edx,%eax
+ 368:	5f                   	pop    %edi
+ 369:	5d                   	pop    %ebp
+ 36a:	c3                   	ret    
+ 36b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 36f:	90                   	nop
+
+00000370 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	8b 45 08             	mov    0x8(%ebp),%eax
+ 37a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 37e:	0f b6 10             	movzbl (%eax),%edx
+ 381:	84 d2                	test   %dl,%dl
+ 383:	75 16                	jne    39b <strchr+0x2b>
+ 385:	eb 21                	jmp    3a8 <strchr+0x38>
+ 387:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 38e:	66 90                	xchg   %ax,%ax
+ 390:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 394:	83 c0 01             	add    $0x1,%eax
+ 397:	84 d2                	test   %dl,%dl
+ 399:	74 0d                	je     3a8 <strchr+0x38>
+    if(*s == c)
+ 39b:	38 d1                	cmp    %dl,%cl
+ 39d:	75 f1                	jne    390 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 39f:	5d                   	pop    %ebp
+ 3a0:	c3                   	ret    
+ 3a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 3a8:	31 c0                	xor    %eax,%eax
+}
+ 3aa:	5d                   	pop    %ebp
+ 3ab:	c3                   	ret    
+ 3ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003b0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 3b0:	f3 0f 1e fb          	endbr32 
+ 3b4:	55                   	push   %ebp
+ 3b5:	89 e5                	mov    %esp,%ebp
+ 3b7:	57                   	push   %edi
+ 3b8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 3b9:	31 f6                	xor    %esi,%esi
+{
+ 3bb:	53                   	push   %ebx
+ 3bc:	89 f3                	mov    %esi,%ebx
+ 3be:	83 ec 1c             	sub    $0x1c,%esp
+ 3c1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 3c4:	eb 33                	jmp    3f9 <gets+0x49>
+ 3c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 3d0:	83 ec 04             	sub    $0x4,%esp
+ 3d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 3d6:	6a 01                	push   $0x1
+ 3d8:	50                   	push   %eax
+ 3d9:	6a 00                	push   $0x0
+ 3db:	e8 2b 01 00 00       	call   50b <read>
+    if(cc < 1)
+ 3e0:	83 c4 10             	add    $0x10,%esp
+ 3e3:	85 c0                	test   %eax,%eax
+ 3e5:	7e 1c                	jle    403 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 3e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 3eb:	83 c7 01             	add    $0x1,%edi
+ 3ee:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 3f1:	3c 0a                	cmp    $0xa,%al
+ 3f3:	74 23                	je     418 <gets+0x68>
+ 3f5:	3c 0d                	cmp    $0xd,%al
+ 3f7:	74 1f                	je     418 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 3f9:	83 c3 01             	add    $0x1,%ebx
+ 3fc:	89 fe                	mov    %edi,%esi
+ 3fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 401:	7c cd                	jl     3d0 <gets+0x20>
+ 403:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 405:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 408:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 40b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40e:	5b                   	pop    %ebx
+ 40f:	5e                   	pop    %esi
+ 410:	5f                   	pop    %edi
+ 411:	5d                   	pop    %ebp
+ 412:	c3                   	ret    
+ 413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 417:	90                   	nop
+ 418:	8b 75 08             	mov    0x8(%ebp),%esi
+ 41b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 41e:	01 de                	add    %ebx,%esi
+ 420:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 422:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 425:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 428:	5b                   	pop    %ebx
+ 429:	5e                   	pop    %esi
+ 42a:	5f                   	pop    %edi
+ 42b:	5d                   	pop    %ebp
+ 42c:	c3                   	ret    
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000430 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 430:	f3 0f 1e fb          	endbr32 
+ 434:	55                   	push   %ebp
+ 435:	89 e5                	mov    %esp,%ebp
+ 437:	56                   	push   %esi
+ 438:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 439:	83 ec 08             	sub    $0x8,%esp
+ 43c:	6a 00                	push   $0x0
+ 43e:	ff 75 08             	pushl  0x8(%ebp)
+ 441:	e8 ed 00 00 00       	call   533 <open>
+  if(fd < 0)
+ 446:	83 c4 10             	add    $0x10,%esp
+ 449:	85 c0                	test   %eax,%eax
+ 44b:	78 2b                	js     478 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 44d:	83 ec 08             	sub    $0x8,%esp
+ 450:	ff 75 0c             	pushl  0xc(%ebp)
+ 453:	89 c3                	mov    %eax,%ebx
+ 455:	50                   	push   %eax
+ 456:	e8 f0 00 00 00       	call   54b <fstat>
+  close(fd);
+ 45b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 45e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 460:	e8 b6 00 00 00       	call   51b <close>
+  return r;
+ 465:	83 c4 10             	add    $0x10,%esp
+}
+ 468:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 46b:	89 f0                	mov    %esi,%eax
+ 46d:	5b                   	pop    %ebx
+ 46e:	5e                   	pop    %esi
+ 46f:	5d                   	pop    %ebp
+ 470:	c3                   	ret    
+ 471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 478:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 47d:	eb e9                	jmp    468 <stat+0x38>
+ 47f:	90                   	nop
+
+00000480 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 480:	f3 0f 1e fb          	endbr32 
+ 484:	55                   	push   %ebp
+ 485:	89 e5                	mov    %esp,%ebp
+ 487:	53                   	push   %ebx
+ 488:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 48b:	0f be 02             	movsbl (%edx),%eax
+ 48e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 491:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 494:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 499:	77 1a                	ja     4b5 <atoi+0x35>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 4a0:	83 c2 01             	add    $0x1,%edx
+ 4a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 4a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 4aa:	0f be 02             	movsbl (%edx),%eax
+ 4ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 4b0:	80 fb 09             	cmp    $0x9,%bl
+ 4b3:	76 eb                	jbe    4a0 <atoi+0x20>
+  return n;
+}
+ 4b5:	89 c8                	mov    %ecx,%eax
+ 4b7:	5b                   	pop    %ebx
+ 4b8:	5d                   	pop    %ebp
+ 4b9:	c3                   	ret    
+ 4ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000004c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 4c0:	f3 0f 1e fb          	endbr32 
+ 4c4:	55                   	push   %ebp
+ 4c5:	89 e5                	mov    %esp,%ebp
+ 4c7:	57                   	push   %edi
+ 4c8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 4cb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 4ce:	56                   	push   %esi
+ 4cf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 4d2:	85 c0                	test   %eax,%eax
+ 4d4:	7e 0f                	jle    4e5 <memmove+0x25>
+ 4d6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 4d8:	89 d7                	mov    %edx,%edi
+ 4da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 4e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 4e1:	39 f8                	cmp    %edi,%eax
+ 4e3:	75 fb                	jne    4e0 <memmove+0x20>
+  return vdst;
+}
+ 4e5:	5e                   	pop    %esi
+ 4e6:	89 d0                	mov    %edx,%eax
+ 4e8:	5f                   	pop    %edi
+ 4e9:	5d                   	pop    %ebp
+ 4ea:	c3                   	ret    
+
+000004eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 4eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 4f0:	cd 40                	int    $0x40
+ 4f2:	c3                   	ret    
+
+000004f3 <exit>:
+SYSCALL(exit)
+ 4f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 4f8:	cd 40                	int    $0x40
+ 4fa:	c3                   	ret    
+
+000004fb <wait>:
+SYSCALL(wait)
+ 4fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 500:	cd 40                	int    $0x40
+ 502:	c3                   	ret    
+
+00000503 <pipe>:
+SYSCALL(pipe)
+ 503:	b8 04 00 00 00       	mov    $0x4,%eax
+ 508:	cd 40                	int    $0x40
+ 50a:	c3                   	ret    
+
+0000050b <read>:
+SYSCALL(read)
+ 50b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 510:	cd 40                	int    $0x40
+ 512:	c3                   	ret    
+
+00000513 <write>:
+SYSCALL(write)
+ 513:	b8 10 00 00 00       	mov    $0x10,%eax
+ 518:	cd 40                	int    $0x40
+ 51a:	c3                   	ret    
+
+0000051b <close>:
+SYSCALL(close)
+ 51b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 520:	cd 40                	int    $0x40
+ 522:	c3                   	ret    
+
+00000523 <kill>:
+SYSCALL(kill)
+ 523:	b8 06 00 00 00       	mov    $0x6,%eax
+ 528:	cd 40                	int    $0x40
+ 52a:	c3                   	ret    
+
+0000052b <exec>:
+SYSCALL(exec)
+ 52b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 530:	cd 40                	int    $0x40
+ 532:	c3                   	ret    
+
+00000533 <open>:
+SYSCALL(open)
+ 533:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 538:	cd 40                	int    $0x40
+ 53a:	c3                   	ret    
+
+0000053b <mknod>:
+SYSCALL(mknod)
+ 53b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 540:	cd 40                	int    $0x40
+ 542:	c3                   	ret    
+
+00000543 <unlink>:
+SYSCALL(unlink)
+ 543:	b8 12 00 00 00       	mov    $0x12,%eax
+ 548:	cd 40                	int    $0x40
+ 54a:	c3                   	ret    
+
+0000054b <fstat>:
+SYSCALL(fstat)
+ 54b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 550:	cd 40                	int    $0x40
+ 552:	c3                   	ret    
+
+00000553 <link>:
+SYSCALL(link)
+ 553:	b8 13 00 00 00       	mov    $0x13,%eax
+ 558:	cd 40                	int    $0x40
+ 55a:	c3                   	ret    
+
+0000055b <mkdir>:
+SYSCALL(mkdir)
+ 55b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 560:	cd 40                	int    $0x40
+ 562:	c3                   	ret    
+
+00000563 <chdir>:
+SYSCALL(chdir)
+ 563:	b8 09 00 00 00       	mov    $0x9,%eax
+ 568:	cd 40                	int    $0x40
+ 56a:	c3                   	ret    
+
+0000056b <dup>:
+SYSCALL(dup)
+ 56b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 570:	cd 40                	int    $0x40
+ 572:	c3                   	ret    
+
+00000573 <getpid>:
+SYSCALL(getpid)
+ 573:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 578:	cd 40                	int    $0x40
+ 57a:	c3                   	ret    
+
+0000057b <sbrk>:
+SYSCALL(sbrk)
+ 57b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 580:	cd 40                	int    $0x40
+ 582:	c3                   	ret    
+
+00000583 <sleep>:
+SYSCALL(sleep)
+ 583:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 588:	cd 40                	int    $0x40
+ 58a:	c3                   	ret    
+
+0000058b <uptime>:
+SYSCALL(uptime)
+ 58b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 590:	cd 40                	int    $0x40
+ 592:	c3                   	ret    
+
+00000593 <draw>:
+SYSCALL(draw)
+ 593:	b8 16 00 00 00       	mov    $0x16,%eax
+ 598:	cd 40                	int    $0x40
+ 59a:	c3                   	ret    
+
+0000059b <history>:
+SYSCALL(history)
+ 59b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <wait2>:
+SYSCALL(wait2)
+ 5a3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <set_prio>:
+SYSCALL(set_prio)
+ 5ab:	b8 19 00 00 00       	mov    $0x19,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <yield2>:
+SYSCALL(yield2)
+ 5b3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+ 5bb:	66 90                	xchg   %ax,%ax
+ 5bd:	66 90                	xchg   %ax,%ax
+ 5bf:	90                   	nop
+
+000005c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 5c0:	55                   	push   %ebp
+ 5c1:	89 e5                	mov    %esp,%ebp
+ 5c3:	57                   	push   %edi
+ 5c4:	56                   	push   %esi
+ 5c5:	53                   	push   %ebx
+ 5c6:	83 ec 3c             	sub    $0x3c,%esp
+ 5c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 5cc:	89 d1                	mov    %edx,%ecx
+{
+ 5ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 5d1:	85 d2                	test   %edx,%edx
+ 5d3:	0f 89 7f 00 00 00    	jns    658 <printint+0x98>
+ 5d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 5dd:	74 79                	je     658 <printint+0x98>
+    neg = 1;
+ 5df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 5e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 5e8:	31 db                	xor    %ebx,%ebx
+ 5ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 5ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 5f0:	89 c8                	mov    %ecx,%eax
+ 5f2:	31 d2                	xor    %edx,%edx
+ 5f4:	89 cf                	mov    %ecx,%edi
+ 5f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 5f9:	0f b6 92 58 0c 00 00 	movzbl 0xc58(%edx),%edx
+ 600:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 603:	89 d8                	mov    %ebx,%eax
+ 605:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 608:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 60b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 60e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 611:	76 dd                	jbe    5f0 <printint+0x30>
+  if(neg)
+ 613:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 616:	85 c9                	test   %ecx,%ecx
+ 618:	74 0c                	je     626 <printint+0x66>
+    buf[i++] = '-';
+ 61a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 61f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 621:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 626:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 629:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 62d:	eb 07                	jmp    636 <printint+0x76>
+ 62f:	90                   	nop
+ 630:	0f b6 13             	movzbl (%ebx),%edx
+ 633:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 636:	83 ec 04             	sub    $0x4,%esp
+ 639:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 63c:	6a 01                	push   $0x1
+ 63e:	56                   	push   %esi
+ 63f:	57                   	push   %edi
+ 640:	e8 ce fe ff ff       	call   513 <write>
+  while(--i >= 0)
+ 645:	83 c4 10             	add    $0x10,%esp
+ 648:	39 de                	cmp    %ebx,%esi
+ 64a:	75 e4                	jne    630 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 64c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 64f:	5b                   	pop    %ebx
+ 650:	5e                   	pop    %esi
+ 651:	5f                   	pop    %edi
+ 652:	5d                   	pop    %ebp
+ 653:	c3                   	ret    
+ 654:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 658:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 65f:	eb 87                	jmp    5e8 <printint+0x28>
+ 661:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 668:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+
+00000670 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 670:	f3 0f 1e fb          	endbr32 
+ 674:	55                   	push   %ebp
+ 675:	89 e5                	mov    %esp,%ebp
+ 677:	57                   	push   %edi
+ 678:	56                   	push   %esi
+ 679:	53                   	push   %ebx
+ 67a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 67d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 680:	0f b6 1e             	movzbl (%esi),%ebx
+ 683:	84 db                	test   %bl,%bl
+ 685:	0f 84 b4 00 00 00    	je     73f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 68b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 68e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 691:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 694:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 696:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 699:	eb 33                	jmp    6ce <printf+0x5e>
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+ 6a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 6a3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 6a8:	83 f8 25             	cmp    $0x25,%eax
+ 6ab:	74 17                	je     6c4 <printf+0x54>
+  write(fd, &c, 1);
+ 6ad:	83 ec 04             	sub    $0x4,%esp
+ 6b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 6b3:	6a 01                	push   $0x1
+ 6b5:	57                   	push   %edi
+ 6b6:	ff 75 08             	pushl  0x8(%ebp)
+ 6b9:	e8 55 fe ff ff       	call   513 <write>
+ 6be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 6c1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 6c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 6c7:	83 c6 01             	add    $0x1,%esi
+ 6ca:	84 db                	test   %bl,%bl
+ 6cc:	74 71                	je     73f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 6ce:	0f be cb             	movsbl %bl,%ecx
+ 6d1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 6d4:	85 d2                	test   %edx,%edx
+ 6d6:	74 c8                	je     6a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 6d8:	83 fa 25             	cmp    $0x25,%edx
+ 6db:	75 e7                	jne    6c4 <printf+0x54>
+      if(c == 'd'){
+ 6dd:	83 f8 64             	cmp    $0x64,%eax
+ 6e0:	0f 84 9a 00 00 00    	je     780 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 6e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 6ec:	83 f9 70             	cmp    $0x70,%ecx
+ 6ef:	74 5f                	je     750 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 6f1:	83 f8 73             	cmp    $0x73,%eax
+ 6f4:	0f 84 d6 00 00 00    	je     7d0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 6fa:	83 f8 63             	cmp    $0x63,%eax
+ 6fd:	0f 84 8d 00 00 00    	je     790 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 703:	83 f8 25             	cmp    $0x25,%eax
+ 706:	0f 84 b4 00 00 00    	je     7c0 <printf+0x150>
+  write(fd, &c, 1);
+ 70c:	83 ec 04             	sub    $0x4,%esp
+ 70f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 713:	6a 01                	push   $0x1
+ 715:	57                   	push   %edi
+ 716:	ff 75 08             	pushl  0x8(%ebp)
+ 719:	e8 f5 fd ff ff       	call   513 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 71e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 721:	83 c4 0c             	add    $0xc,%esp
+ 724:	6a 01                	push   $0x1
+ 726:	83 c6 01             	add    $0x1,%esi
+ 729:	57                   	push   %edi
+ 72a:	ff 75 08             	pushl  0x8(%ebp)
+ 72d:	e8 e1 fd ff ff       	call   513 <write>
+  for(i = 0; fmt[i]; i++){
+ 732:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 736:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 739:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 73b:	84 db                	test   %bl,%bl
+ 73d:	75 8f                	jne    6ce <printf+0x5e>
+    }
+  }
+}
+ 73f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 742:	5b                   	pop    %ebx
+ 743:	5e                   	pop    %esi
+ 744:	5f                   	pop    %edi
+ 745:	5d                   	pop    %ebp
+ 746:	c3                   	ret    
+ 747:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 74e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 750:	83 ec 0c             	sub    $0xc,%esp
+ 753:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 758:	6a 00                	push   $0x0
+ 75a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 75d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 760:	8b 13                	mov    (%ebx),%edx
+ 762:	e8 59 fe ff ff       	call   5c0 <printint>
+        ap++;
+ 767:	89 d8                	mov    %ebx,%eax
+ 769:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 76c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 76e:	83 c0 04             	add    $0x4,%eax
+ 771:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 774:	e9 4b ff ff ff       	jmp    6c4 <printf+0x54>
+ 779:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 780:	83 ec 0c             	sub    $0xc,%esp
+ 783:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 788:	6a 01                	push   $0x1
+ 78a:	eb ce                	jmp    75a <printf+0xea>
+ 78c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 790:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 793:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 796:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 798:	6a 01                	push   $0x1
+        ap++;
+ 79a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 79d:	57                   	push   %edi
+ 79e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 7a1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7a4:	e8 6a fd ff ff       	call   513 <write>
+        ap++;
+ 7a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 7ac:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7af:	31 d2                	xor    %edx,%edx
+ 7b1:	e9 0e ff ff ff       	jmp    6c4 <printf+0x54>
+ 7b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7bd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 7c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7c3:	83 ec 04             	sub    $0x4,%esp
+ 7c6:	e9 59 ff ff ff       	jmp    724 <printf+0xb4>
+ 7cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 7cf:	90                   	nop
+        s = (char*)*ap;
+ 7d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 7d5:	83 c0 04             	add    $0x4,%eax
+ 7d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 7db:	85 db                	test   %ebx,%ebx
+ 7dd:	74 17                	je     7f6 <printf+0x186>
+        while(*s != 0){
+ 7df:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 7e2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 7e4:	84 c0                	test   %al,%al
+ 7e6:	0f 84 d8 fe ff ff    	je     6c4 <printf+0x54>
+ 7ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 7ef:	89 de                	mov    %ebx,%esi
+ 7f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 7f4:	eb 1a                	jmp    810 <printf+0x1a0>
+          s = "(null)";
+ 7f6:	bb 51 0c 00 00       	mov    $0xc51,%ebx
+        while(*s != 0){
+ 7fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 7fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 803:	89 de                	mov    %ebx,%esi
+ 805:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 808:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80f:	90                   	nop
+  write(fd, &c, 1);
+ 810:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 813:	83 c6 01             	add    $0x1,%esi
+ 816:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 819:	6a 01                	push   $0x1
+ 81b:	57                   	push   %edi
+ 81c:	53                   	push   %ebx
+ 81d:	e8 f1 fc ff ff       	call   513 <write>
+        while(*s != 0){
+ 822:	0f b6 06             	movzbl (%esi),%eax
+ 825:	83 c4 10             	add    $0x10,%esp
+ 828:	84 c0                	test   %al,%al
+ 82a:	75 e4                	jne    810 <printf+0x1a0>
+ 82c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 82f:	31 d2                	xor    %edx,%edx
+ 831:	e9 8e fe ff ff       	jmp    6c4 <printf+0x54>
+ 836:	66 90                	xchg   %ax,%ax
+ 838:	66 90                	xchg   %ax,%ax
+ 83a:	66 90                	xchg   %ax,%ax
+ 83c:	66 90                	xchg   %ax,%ax
+ 83e:	66 90                	xchg   %ax,%ax
+
+00000840 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 840:	f3 0f 1e fb          	endbr32 
+ 844:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 845:	a1 0c 0f 00 00       	mov    0xf0c,%eax
+{
+ 84a:	89 e5                	mov    %esp,%ebp
+ 84c:	57                   	push   %edi
+ 84d:	56                   	push   %esi
+ 84e:	53                   	push   %ebx
+ 84f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 852:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 854:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 857:	39 c8                	cmp    %ecx,%eax
+ 859:	73 15                	jae    870 <free+0x30>
+ 85b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 85f:	90                   	nop
+ 860:	39 d1                	cmp    %edx,%ecx
+ 862:	72 14                	jb     878 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 864:	39 d0                	cmp    %edx,%eax
+ 866:	73 10                	jae    878 <free+0x38>
+{
+ 868:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 86a:	8b 10                	mov    (%eax),%edx
+ 86c:	39 c8                	cmp    %ecx,%eax
+ 86e:	72 f0                	jb     860 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 870:	39 d0                	cmp    %edx,%eax
+ 872:	72 f4                	jb     868 <free+0x28>
+ 874:	39 d1                	cmp    %edx,%ecx
+ 876:	73 f0                	jae    868 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 878:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 87b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 87e:	39 fa                	cmp    %edi,%edx
+ 880:	74 1e                	je     8a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 882:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 885:	8b 50 04             	mov    0x4(%eax),%edx
+ 888:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 88b:	39 f1                	cmp    %esi,%ecx
+ 88d:	74 28                	je     8b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 88f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 891:	5b                   	pop    %ebx
+  freep = p;
+ 892:	a3 0c 0f 00 00       	mov    %eax,0xf0c
+}
+ 897:	5e                   	pop    %esi
+ 898:	5f                   	pop    %edi
+ 899:	5d                   	pop    %ebp
+ 89a:	c3                   	ret    
+ 89b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 89f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 8a0:	03 72 04             	add    0x4(%edx),%esi
+ 8a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8a6:	8b 10                	mov    (%eax),%edx
+ 8a8:	8b 12                	mov    (%edx),%edx
+ 8aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 8ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 8b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 8b3:	39 f1                	cmp    %esi,%ecx
+ 8b5:	75 d8                	jne    88f <free+0x4f>
+    p->s.size += bp->s.size;
+ 8b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 8ba:	a3 0c 0f 00 00       	mov    %eax,0xf0c
+    p->s.size += bp->s.size;
+ 8bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 8c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 8c5:	89 10                	mov    %edx,(%eax)
+}
+ 8c7:	5b                   	pop    %ebx
+ 8c8:	5e                   	pop    %esi
+ 8c9:	5f                   	pop    %edi
+ 8ca:	5d                   	pop    %ebp
+ 8cb:	c3                   	ret    
+ 8cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000008d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 8d0:	f3 0f 1e fb          	endbr32 
+ 8d4:	55                   	push   %ebp
+ 8d5:	89 e5                	mov    %esp,%ebp
+ 8d7:	57                   	push   %edi
+ 8d8:	56                   	push   %esi
+ 8d9:	53                   	push   %ebx
+ 8da:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 8e0:	8b 3d 0c 0f 00 00    	mov    0xf0c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 8e9:	c1 ee 03             	shr    $0x3,%esi
+ 8ec:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 8ef:	85 ff                	test   %edi,%edi
+ 8f1:	0f 84 a9 00 00 00    	je     9a0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8f7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 8f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 8fc:	39 f1                	cmp    %esi,%ecx
+ 8fe:	73 6d                	jae    96d <malloc+0x9d>
+ 900:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 906:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 90b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 90e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 915:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 918:	eb 17                	jmp    931 <malloc+0x61>
+ 91a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 920:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 922:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 925:	39 f1                	cmp    %esi,%ecx
+ 927:	73 4f                	jae    978 <malloc+0xa8>
+ 929:	8b 3d 0c 0f 00 00    	mov    0xf0c,%edi
+ 92f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 931:	39 c7                	cmp    %eax,%edi
+ 933:	75 eb                	jne    920 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 935:	83 ec 0c             	sub    $0xc,%esp
+ 938:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 93b:	e8 3b fc ff ff       	call   57b <sbrk>
+  if(p == (char*)-1)
+ 940:	83 c4 10             	add    $0x10,%esp
+ 943:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 946:	74 1b                	je     963 <malloc+0x93>
+  hp->s.size = nu;
+ 948:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 94b:	83 ec 0c             	sub    $0xc,%esp
+ 94e:	83 c0 08             	add    $0x8,%eax
+ 951:	50                   	push   %eax
+ 952:	e8 e9 fe ff ff       	call   840 <free>
+  return freep;
+ 957:	a1 0c 0f 00 00       	mov    0xf0c,%eax
+      if((p = morecore(nunits)) == 0)
+ 95c:	83 c4 10             	add    $0x10,%esp
+ 95f:	85 c0                	test   %eax,%eax
+ 961:	75 bd                	jne    920 <malloc+0x50>
+        return 0;
+  }
+}
+ 963:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 966:	31 c0                	xor    %eax,%eax
+}
+ 968:	5b                   	pop    %ebx
+ 969:	5e                   	pop    %esi
+ 96a:	5f                   	pop    %edi
+ 96b:	5d                   	pop    %ebp
+ 96c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 96d:	89 c2                	mov    %eax,%edx
+ 96f:	89 f8                	mov    %edi,%eax
+ 971:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 978:	39 ce                	cmp    %ecx,%esi
+ 97a:	74 54                	je     9d0 <malloc+0x100>
+        p->s.size -= nunits;
+ 97c:	29 f1                	sub    %esi,%ecx
+ 97e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 981:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 984:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 987:	a3 0c 0f 00 00       	mov    %eax,0xf0c
+}
+ 98c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 98f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 992:	5b                   	pop    %ebx
+ 993:	5e                   	pop    %esi
+ 994:	5f                   	pop    %edi
+ 995:	5d                   	pop    %ebp
+ 996:	c3                   	ret    
+ 997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 99e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 9a0:	c7 05 0c 0f 00 00 10 	movl   $0xf10,0xf0c
+ 9a7:	0f 00 00 
+    base.s.size = 0;
+ 9aa:	bf 10 0f 00 00       	mov    $0xf10,%edi
+    base.s.ptr = freep = prevp = &base;
+ 9af:	c7 05 10 0f 00 00 10 	movl   $0xf10,0xf10
+ 9b6:	0f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 9bb:	c7 05 14 0f 00 00 00 	movl   $0x0,0xf14
+ 9c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 9c5:	e9 36 ff ff ff       	jmp    900 <malloc+0x30>
+ 9ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 9d0:	8b 0a                	mov    (%edx),%ecx
+ 9d2:	89 08                	mov    %ecx,(%eax)
+ 9d4:	eb b1                	jmp    987 <malloc+0xb7>
diff -ruN xv6-public/sanity.c xv6-public_mine/sanity.c
--- xv6-public/sanity.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sanity.c	2021-09-30 21:19:59.000000000 +0530
@@ -0,0 +1,85 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]) {
+  
+  if (argc != 2){
+    printf(1, "Use this format: sanity <no.of.processes>\n");
+    exit();
+  }
+  int n = 3*atoi(argv[1]);
+  int id, i, j;
+  int c_time, wait_time, run_time, io_time;
+  int total[3][3];
+  for (i = 0; i < 3; i++)
+    for (j = 0; j < 3; j++)
+      total[i][j] = 0;
+      
+  int pid;
+  for (int ind=0; ind<n; ind++) {
+    pid = fork();
+    if (pid == 0) {//child
+      id = (getpid() - 4) % 3; // ensures independence from the first son's pid when gathering the results in the second part of the program
+      switch(id) {
+        case 0: // CPU
+	  for (i=0; i<100; i++) {
+	    j = 0;
+            while (j<100000) j++;  
+          }
+	  break;
+	case 1: // S-CPU
+	  for (i=0; i<100; i++) {
+            j = 0;
+            while (j<100000) j++;
+            yield2();
+          }
+	  break;
+	case 2: // I/O 
+        j=0;
+        while (j<100) {
+            j++;
+            sleep(1);
+          }
+	  break;
+      }
+
+      exit(); // child exit here
+    }
+    continue; // parent continues to fork the next child
+  }
+
+  for (int ind=0; ind<n; ind++) {
+    pid = wait2(&c_time, &wait_time, &run_time, &io_time);
+    id = (pid - 4) % 3; // correlates to j in the dispatching loop
+    switch(id) {
+      case 0: // CPU 
+        printf(1, "CPU, pid: %d, creation time:%d, wait time: %d, run time: %d, io time: %d, turnaround time: %d\n", pid,c_time, wait_time, run_time, io_time, wait_time + run_time + io_time);
+	total[0][0] += wait_time;
+	total[0][1] += run_time;
+	total[0][2] += io_time;
+        break;
+      case 1: // S-CPU  
+        printf(1, "S-CPU, pid: %d, creation time:%d, wait time: %d, run time: %d, io time: %d, turnaround time: %d\n", pid,c_time, wait_time, run_time, io_time, wait_time + run_time + io_time);
+	total[1][0] += wait_time;
+	total[1][1] += run_time;
+	total[1][2] += io_time;
+	break;
+      case 2: // I/O 
+	printf(1, "I/O, pid: %d, creation time:%d, wait time: %d, run time: %d, io time: %d, turnaround time: %d\n", pid,c_time, wait_time, run_time, io_time, wait_time + run_time + io_time);
+	total[2][0] += wait_time;
+	total[2][1] += run_time;
+	total[2][2] += io_time;
+	break;
+    }
+  } 
+  
+  for (i = 0; i < 3; i++)
+    for (j = 0; j < 3; j++)
+      total[i][j] /= n/3;
+
+  printf(1, "\nCPU\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[0][0], total[0][1], total[0][2], total[0][0]+total[0][1]+total[0][2]);
+  printf(1, "S-CPU\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[1][0], total[1][1], total[1][2], total[1][0]+total[1][1]+total[1][2]);
+  printf(1, "I/O\nAverage wait time: %d\nAverage run time: %d\nAverage io time: %d\nAverage turnaround time: %d\n\n", total[2][0], total[2][1], total[2][2], total[2][0]+total[2][1]+total[2][2]);
+  exit();
+}
\ No newline at end of file
diff -ruN xv6-public/sanity.d xv6-public_mine/sanity.d
--- xv6-public/sanity.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sanity.d	2021-09-30 23:42:33.647436878 +0530
@@ -0,0 +1 @@
+sanity.o: sanity.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/sanity.o and xv6-public_mine/sanity.o differ
diff -ruN xv6-public/sanity.sym xv6-public_mine/sanity.sym
--- xv6-public/sanity.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sanity.sym	2021-09-30 23:42:34.047540738 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000009d8 .rodata
+00000c6c .eh_frame
+00000f0c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sanity.c
+00000000 ulib.c
+00000000 printf.c
+000005c0 printint
+00000c58 digits.1101
+00000000 umalloc.c
+00000f0c freep
+00000f10 base
+00000290 strcpy
+000005ab set_prio
+00000670 printf
+000004c0 memmove
+0000053b mknod
+000003b0 gets
+00000573 getpid
+000008d0 malloc
+00000583 sleep
+000005a3 wait2
+00000503 pipe
+00000513 write
+0000059b history
+0000054b fstat
+00000523 kill
+00000563 chdir
+0000052b exec
+000004fb wait
+0000050b read
+00000543 unlink
+000004eb fork
+0000057b sbrk
+0000058b uptime
+00000f0c __bss_start
+00000350 memset
+00000000 main
+000002c0 strcmp
+0000056b dup
+00000430 stat
+00000f0c _edata
+00000f18 _end
+00000553 link
+000004f3 exit
+00000480 atoi
+000005b3 yield2
+00000593 draw
+00000310 strlen
+00000533 open
+00000370 strchr
+0000055b mkdir
+0000051b close
+00000840 free
Binary files xv6-public/_sh and xv6-public_mine/_sh differ
diff -ruN xv6-public/sh.asm xv6-public_mine/sh.asm
--- xv6-public/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sh.asm	2021-09-30 23:42:26.633496213 +0530
@@ -0,0 +1,2714 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return;
+}
+
+int
+main(void)
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      15:	eb 12                	jmp    29 <main+0x29>
+      17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      1e:	66 90                	xchg   %ax,%ax
+    if(fd >= 3){
+      20:	83 f8 02             	cmp    $0x2,%eax
+      23:	0f 8f 24 01 00 00    	jg     14d <main+0x14d>
+  while((fd = open("console", O_RDWR)) >= 0){
+      29:	83 ec 08             	sub    $0x8,%esp
+      2c:	6a 02                	push   $0x2
+      2e:	68 f1 13 00 00       	push   $0x13f1
+      33:	e8 6b 0e 00 00       	call   ea3 <open>
+      38:	83 c4 10             	add    $0x10,%esp
+      3b:	85 c0                	test   %eax,%eax
+      3d:	79 e1                	jns    20 <main+0x20>
+      3f:	eb 33                	jmp    74 <main+0x74>
+      41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      buf[strlen(buf)-1] = 0;  // chop \n
+      if(chdir(buf+3) < 0)
+        printf(2, "cannot cd %s\n", buf+3);
+      continue;
+    }
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's'  && buf[3] == 't' && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y' && buf[7] == '\n'){
+      48:	3c 68                	cmp    $0x68,%al
+      4a:	75 0d                	jne    59 <main+0x59>
+      4c:	80 3d 61 1a 00 00 69 	cmpb   $0x69,0x1a61
+      53:	0f 84 97 00 00 00    	je     f0 <main+0xf0>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      59:	e8 fd 0d 00 00       	call   e5b <fork>
+  if(pid == -1)
+      5e:	83 f8 ff             	cmp    $0xffffffff,%eax
+      61:	0f 84 0c 01 00 00    	je     173 <main+0x173>
+    if(fork1() == 0)
+      67:	85 c0                	test   %eax,%eax
+      69:	0f 84 ef 00 00 00    	je     15e <main+0x15e>
+    wait();
+      6f:	e8 f7 0d 00 00       	call   e6b <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      74:	83 ec 08             	sub    $0x8,%esp
+      77:	6a 64                	push   $0x64
+      79:	68 60 1a 00 00       	push   $0x1a60
+      7e:	e8 fd 00 00 00       	call   180 <getcmd>
+      83:	83 c4 10             	add    $0x10,%esp
+      86:	85 c0                	test   %eax,%eax
+      88:	0f 88 ba 00 00 00    	js     148 <main+0x148>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      8e:	0f b6 05 60 1a 00 00 	movzbl 0x1a60,%eax
+      95:	3c 63                	cmp    $0x63,%al
+      97:	75 af                	jne    48 <main+0x48>
+      99:	80 3d 61 1a 00 00 64 	cmpb   $0x64,0x1a61
+      a0:	75 b7                	jne    59 <main+0x59>
+      a2:	80 3d 62 1a 00 00 20 	cmpb   $0x20,0x1a62
+      a9:	75 ae                	jne    59 <main+0x59>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      ab:	83 ec 0c             	sub    $0xc,%esp
+      ae:	68 60 1a 00 00       	push   $0x1a60
+      b3:	e8 c8 0b 00 00       	call   c80 <strlen>
+      if(chdir(buf+3) < 0)
+      b8:	c7 04 24 63 1a 00 00 	movl   $0x1a63,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      bf:	c6 80 5f 1a 00 00 00 	movb   $0x0,0x1a5f(%eax)
+      if(chdir(buf+3) < 0)
+      c6:	e8 08 0e 00 00       	call   ed3 <chdir>
+      cb:	83 c4 10             	add    $0x10,%esp
+      ce:	85 c0                	test   %eax,%eax
+      d0:	79 a2                	jns    74 <main+0x74>
+        printf(2, "cannot cd %s\n", buf+3);
+      d2:	50                   	push   %eax
+      d3:	68 63 1a 00 00       	push   $0x1a63
+      d8:	68 f9 13 00 00       	push   $0x13f9
+      dd:	6a 02                	push   $0x2
+      df:	e8 fc 0e 00 00       	call   fe0 <printf>
+      e4:	83 c4 10             	add    $0x10,%esp
+      e7:	eb 8b                	jmp    74 <main+0x74>
+      e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's'  && buf[3] == 't' && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y' && buf[7] == '\n'){
+      f0:	80 3d 62 1a 00 00 73 	cmpb   $0x73,0x1a62
+      f7:	0f 85 5c ff ff ff    	jne    59 <main+0x59>
+      fd:	80 3d 63 1a 00 00 74 	cmpb   $0x74,0x1a63
+     104:	0f 85 4f ff ff ff    	jne    59 <main+0x59>
+     10a:	80 3d 64 1a 00 00 6f 	cmpb   $0x6f,0x1a64
+     111:	0f 85 42 ff ff ff    	jne    59 <main+0x59>
+     117:	80 3d 65 1a 00 00 72 	cmpb   $0x72,0x1a65
+     11e:	0f 85 35 ff ff ff    	jne    59 <main+0x59>
+     124:	80 3d 66 1a 00 00 79 	cmpb   $0x79,0x1a66
+     12b:	0f 85 28 ff ff ff    	jne    59 <main+0x59>
+     131:	80 3d 67 1a 00 00 0a 	cmpb   $0xa,0x1a67
+     138:	0f 85 1b ff ff ff    	jne    59 <main+0x59>
+      printHistory();
+     13e:	e8 8d 00 00 00       	call   1d0 <printHistory>
+      continue;
+     143:	e9 2c ff ff ff       	jmp    74 <main+0x74>
+  exit();
+     148:	e8 16 0d 00 00       	call   e63 <exit>
+      close(fd);
+     14d:	83 ec 0c             	sub    $0xc,%esp
+     150:	50                   	push   %eax
+     151:	e8 35 0d 00 00       	call   e8b <close>
+      break;
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	e9 16 ff ff ff       	jmp    74 <main+0x74>
+      runcmd(parsecmd(buf));
+     15e:	83 ec 0c             	sub    $0xc,%esp
+     161:	68 60 1a 00 00       	push   $0x1a60
+     166:	e8 25 0a 00 00       	call   b90 <parsecmd>
+     16b:	89 04 24             	mov    %eax,(%esp)
+     16e:	e8 dd 00 00 00       	call   250 <runcmd>
+    panic("fork");
+     173:	83 ec 0c             	sub    $0xc,%esp
+     176:	68 7a 13 00 00       	push   $0x137a
+     17b:	e8 b0 00 00 00       	call   230 <panic>
+
+00000180 <getcmd>:
+{
+     180:	f3 0f 1e fb          	endbr32 
+     184:	55                   	push   %ebp
+     185:	89 e5                	mov    %esp,%ebp
+     187:	56                   	push   %esi
+     188:	53                   	push   %ebx
+     189:	8b 75 0c             	mov    0xc(%ebp),%esi
+     18c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     18f:	83 ec 08             	sub    $0x8,%esp
+     192:	68 48 13 00 00       	push   $0x1348
+     197:	6a 02                	push   $0x2
+     199:	e8 42 0e 00 00       	call   fe0 <printf>
+  memset(buf, 0, nbuf);
+     19e:	83 c4 0c             	add    $0xc,%esp
+     1a1:	56                   	push   %esi
+     1a2:	6a 00                	push   $0x0
+     1a4:	53                   	push   %ebx
+     1a5:	e8 16 0b 00 00       	call   cc0 <memset>
+  gets(buf, nbuf);
+     1aa:	58                   	pop    %eax
+     1ab:	5a                   	pop    %edx
+     1ac:	56                   	push   %esi
+     1ad:	53                   	push   %ebx
+     1ae:	e8 6d 0b 00 00       	call   d20 <gets>
+  if(buf[0] == 0) // EOF
+     1b3:	83 c4 10             	add    $0x10,%esp
+     1b6:	31 c0                	xor    %eax,%eax
+     1b8:	80 3b 00             	cmpb   $0x0,(%ebx)
+     1bb:	0f 94 c0             	sete   %al
+}
+     1be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     1c1:	5b                   	pop    %ebx
+  if(buf[0] == 0) // EOF
+     1c2:	f7 d8                	neg    %eax
+}
+     1c4:	5e                   	pop    %esi
+     1c5:	5d                   	pop    %ebp
+     1c6:	c3                   	ret    
+     1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     1ce:	66 90                	xchg   %ax,%ax
+
+000001d0 <printHistory>:
+void printHistory(){
+     1d0:	f3 0f 1e fb          	endbr32 
+     1d4:	55                   	push   %ebp
+     1d5:	89 e5                	mov    %esp,%ebp
+     1d7:	56                   	push   %esi
+  uint count = 0;
+     1d8:	31 f6                	xor    %esi,%esi
+void printHistory(){
+     1da:	53                   	push   %ebx
+  for(i= 0; i <MAX_HISTORY; i++){
+     1db:	31 db                	xor    %ebx,%ebx
+     1dd:	eb 09                	jmp    1e8 <printHistory+0x18>
+     1df:	90                   	nop
+     1e0:	83 c3 01             	add    $0x1,%ebx
+     1e3:	83 fb 10             	cmp    $0x10,%ebx
+     1e6:	74 35                	je     21d <printHistory+0x4d>
+    if(history(getHistoryCommand, i) == 0){
+     1e8:	83 ec 08             	sub    $0x8,%esp
+     1eb:	53                   	push   %ebx
+     1ec:	68 e0 1a 00 00       	push   $0x1ae0
+     1f1:	e8 15 0d 00 00       	call   f0b <history>
+     1f6:	83 c4 10             	add    $0x10,%esp
+     1f9:	85 c0                	test   %eax,%eax
+     1fb:	75 e3                	jne    1e0 <printHistory+0x10>
+      count++;
+     1fd:	83 c6 01             	add    $0x1,%esi
+      printf(1, "%d: %s\n", count, getHistoryCommand);
+     200:	68 e0 1a 00 00       	push   $0x1ae0
+  for(i= 0; i <MAX_HISTORY; i++){
+     205:	83 c3 01             	add    $0x1,%ebx
+      printf(1, "%d: %s\n", count, getHistoryCommand);
+     208:	56                   	push   %esi
+     209:	68 4b 13 00 00       	push   $0x134b
+     20e:	6a 01                	push   $0x1
+     210:	e8 cb 0d 00 00       	call   fe0 <printf>
+     215:	83 c4 10             	add    $0x10,%esp
+  for(i= 0; i <MAX_HISTORY; i++){
+     218:	83 fb 10             	cmp    $0x10,%ebx
+     21b:	75 cb                	jne    1e8 <printHistory+0x18>
+}
+     21d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     220:	5b                   	pop    %ebx
+     221:	5e                   	pop    %esi
+     222:	5d                   	pop    %ebp
+     223:	c3                   	ret    
+     224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     22f:	90                   	nop
+
+00000230 <panic>:
+{
+     230:	f3 0f 1e fb          	endbr32 
+     234:	55                   	push   %ebp
+     235:	89 e5                	mov    %esp,%ebp
+     237:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     23a:	ff 75 08             	pushl  0x8(%ebp)
+     23d:	68 4f 13 00 00       	push   $0x134f
+     242:	6a 02                	push   $0x2
+     244:	e8 97 0d 00 00       	call   fe0 <printf>
+  exit();
+     249:	e8 15 0c 00 00       	call   e63 <exit>
+     24e:	66 90                	xchg   %ax,%ax
+
+00000250 <runcmd>:
+{
+     250:	f3 0f 1e fb          	endbr32 
+     254:	55                   	push   %ebp
+     255:	89 e5                	mov    %esp,%ebp
+     257:	53                   	push   %ebx
+     258:	83 ec 14             	sub    $0x14,%esp
+     25b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     25e:	85 db                	test   %ebx,%ebx
+     260:	74 7e                	je     2e0 <runcmd+0x90>
+  switch(cmd->type){
+     262:	83 3b 05             	cmpl   $0x5,(%ebx)
+     265:	0f 87 04 01 00 00    	ja     36f <runcmd+0x11f>
+     26b:	8b 03                	mov    (%ebx),%eax
+     26d:	3e ff 24 85 08 14 00 	notrack jmp *0x1408(,%eax,4)
+     274:	00 
+    if(pipe(p) < 0)
+     275:	83 ec 0c             	sub    $0xc,%esp
+     278:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     27b:	50                   	push   %eax
+     27c:	e8 f2 0b 00 00       	call   e73 <pipe>
+     281:	83 c4 10             	add    $0x10,%esp
+     284:	85 c0                	test   %eax,%eax
+     286:	0f 88 05 01 00 00    	js     391 <runcmd+0x141>
+  pid = fork();
+     28c:	e8 ca 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     291:	83 f8 ff             	cmp    $0xffffffff,%eax
+     294:	0f 84 60 01 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0){
+     29a:	85 c0                	test   %eax,%eax
+     29c:	0f 84 fc 00 00 00    	je     39e <runcmd+0x14e>
+  pid = fork();
+     2a2:	e8 b4 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     2a7:	83 f8 ff             	cmp    $0xffffffff,%eax
+     2aa:	0f 84 4a 01 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0){
+     2b0:	85 c0                	test   %eax,%eax
+     2b2:	0f 84 14 01 00 00    	je     3cc <runcmd+0x17c>
+    close(p[0]);
+     2b8:	83 ec 0c             	sub    $0xc,%esp
+     2bb:	ff 75 f0             	pushl  -0x10(%ebp)
+     2be:	e8 c8 0b 00 00       	call   e8b <close>
+    close(p[1]);
+     2c3:	58                   	pop    %eax
+     2c4:	ff 75 f4             	pushl  -0xc(%ebp)
+     2c7:	e8 bf 0b 00 00       	call   e8b <close>
+    wait();
+     2cc:	e8 9a 0b 00 00       	call   e6b <wait>
+    wait();
+     2d1:	e8 95 0b 00 00       	call   e6b <wait>
+    break;
+     2d6:	83 c4 10             	add    $0x10,%esp
+     2d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    exit();
+     2e0:	e8 7e 0b 00 00       	call   e63 <exit>
+  pid = fork();
+     2e5:	e8 71 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     2ea:	83 f8 ff             	cmp    $0xffffffff,%eax
+     2ed:	0f 84 07 01 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0)
+     2f3:	85 c0                	test   %eax,%eax
+     2f5:	75 e9                	jne    2e0 <runcmd+0x90>
+     2f7:	eb 6b                	jmp    364 <runcmd+0x114>
+    if(ecmd->argv[0] == 0)
+     2f9:	8b 43 04             	mov    0x4(%ebx),%eax
+     2fc:	85 c0                	test   %eax,%eax
+     2fe:	74 e0                	je     2e0 <runcmd+0x90>
+    exec(ecmd->argv[0], ecmd->argv);
+     300:	8d 53 04             	lea    0x4(%ebx),%edx
+     303:	51                   	push   %ecx
+     304:	51                   	push   %ecx
+     305:	52                   	push   %edx
+     306:	50                   	push   %eax
+     307:	e8 8f 0b 00 00       	call   e9b <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     30c:	83 c4 0c             	add    $0xc,%esp
+     30f:	ff 73 04             	pushl  0x4(%ebx)
+     312:	68 5a 13 00 00       	push   $0x135a
+     317:	6a 02                	push   $0x2
+     319:	e8 c2 0c 00 00       	call   fe0 <printf>
+    break;
+     31e:	83 c4 10             	add    $0x10,%esp
+     321:	eb bd                	jmp    2e0 <runcmd+0x90>
+  pid = fork();
+     323:	e8 33 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     328:	83 f8 ff             	cmp    $0xffffffff,%eax
+     32b:	0f 84 c9 00 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0)
+     331:	85 c0                	test   %eax,%eax
+     333:	74 2f                	je     364 <runcmd+0x114>
+    wait();
+     335:	e8 31 0b 00 00       	call   e6b <wait>
+    runcmd(lcmd->right);
+     33a:	83 ec 0c             	sub    $0xc,%esp
+     33d:	ff 73 08             	pushl  0x8(%ebx)
+     340:	e8 0b ff ff ff       	call   250 <runcmd>
+    close(rcmd->fd);
+     345:	83 ec 0c             	sub    $0xc,%esp
+     348:	ff 73 14             	pushl  0x14(%ebx)
+     34b:	e8 3b 0b 00 00       	call   e8b <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     350:	58                   	pop    %eax
+     351:	5a                   	pop    %edx
+     352:	ff 73 10             	pushl  0x10(%ebx)
+     355:	ff 73 08             	pushl  0x8(%ebx)
+     358:	e8 46 0b 00 00       	call   ea3 <open>
+     35d:	83 c4 10             	add    $0x10,%esp
+     360:	85 c0                	test   %eax,%eax
+     362:	78 18                	js     37c <runcmd+0x12c>
+      runcmd(bcmd->cmd);
+     364:	83 ec 0c             	sub    $0xc,%esp
+     367:	ff 73 04             	pushl  0x4(%ebx)
+     36a:	e8 e1 fe ff ff       	call   250 <runcmd>
+    panic("runcmd");
+     36f:	83 ec 0c             	sub    $0xc,%esp
+     372:	68 53 13 00 00       	push   $0x1353
+     377:	e8 b4 fe ff ff       	call   230 <panic>
+      printf(2, "open %s failed\n", rcmd->file);
+     37c:	51                   	push   %ecx
+     37d:	ff 73 08             	pushl  0x8(%ebx)
+     380:	68 6a 13 00 00       	push   $0x136a
+     385:	6a 02                	push   $0x2
+     387:	e8 54 0c 00 00       	call   fe0 <printf>
+      exit();
+     38c:	e8 d2 0a 00 00       	call   e63 <exit>
+      panic("pipe");
+     391:	83 ec 0c             	sub    $0xc,%esp
+     394:	68 7f 13 00 00       	push   $0x137f
+     399:	e8 92 fe ff ff       	call   230 <panic>
+      close(1);
+     39e:	83 ec 0c             	sub    $0xc,%esp
+     3a1:	6a 01                	push   $0x1
+     3a3:	e8 e3 0a 00 00       	call   e8b <close>
+      dup(p[1]);
+     3a8:	58                   	pop    %eax
+     3a9:	ff 75 f4             	pushl  -0xc(%ebp)
+     3ac:	e8 2a 0b 00 00       	call   edb <dup>
+      close(p[0]);
+     3b1:	58                   	pop    %eax
+     3b2:	ff 75 f0             	pushl  -0x10(%ebp)
+     3b5:	e8 d1 0a 00 00       	call   e8b <close>
+      close(p[1]);
+     3ba:	58                   	pop    %eax
+     3bb:	ff 75 f4             	pushl  -0xc(%ebp)
+     3be:	e8 c8 0a 00 00       	call   e8b <close>
+      runcmd(pcmd->left);
+     3c3:	5a                   	pop    %edx
+     3c4:	ff 73 04             	pushl  0x4(%ebx)
+     3c7:	e8 84 fe ff ff       	call   250 <runcmd>
+      close(0);
+     3cc:	83 ec 0c             	sub    $0xc,%esp
+     3cf:	6a 00                	push   $0x0
+     3d1:	e8 b5 0a 00 00       	call   e8b <close>
+      dup(p[0]);
+     3d6:	5a                   	pop    %edx
+     3d7:	ff 75 f0             	pushl  -0x10(%ebp)
+     3da:	e8 fc 0a 00 00       	call   edb <dup>
+      close(p[0]);
+     3df:	59                   	pop    %ecx
+     3e0:	ff 75 f0             	pushl  -0x10(%ebp)
+     3e3:	e8 a3 0a 00 00       	call   e8b <close>
+      close(p[1]);
+     3e8:	58                   	pop    %eax
+     3e9:	ff 75 f4             	pushl  -0xc(%ebp)
+     3ec:	e8 9a 0a 00 00       	call   e8b <close>
+      runcmd(pcmd->right);
+     3f1:	58                   	pop    %eax
+     3f2:	ff 73 08             	pushl  0x8(%ebx)
+     3f5:	e8 56 fe ff ff       	call   250 <runcmd>
+    panic("fork");
+     3fa:	83 ec 0c             	sub    $0xc,%esp
+     3fd:	68 7a 13 00 00       	push   $0x137a
+     402:	e8 29 fe ff ff       	call   230 <panic>
+     407:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     40e:	66 90                	xchg   %ax,%ax
+
+00000410 <fork1>:
+{
+     410:	f3 0f 1e fb          	endbr32 
+     414:	55                   	push   %ebp
+     415:	89 e5                	mov    %esp,%ebp
+     417:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     41a:	e8 3c 0a 00 00       	call   e5b <fork>
+  if(pid == -1)
+     41f:	83 f8 ff             	cmp    $0xffffffff,%eax
+     422:	74 02                	je     426 <fork1+0x16>
+  return pid;
+}
+     424:	c9                   	leave  
+     425:	c3                   	ret    
+    panic("fork");
+     426:	83 ec 0c             	sub    $0xc,%esp
+     429:	68 7a 13 00 00       	push   $0x137a
+     42e:	e8 fd fd ff ff       	call   230 <panic>
+     433:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     43a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000440 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     440:	f3 0f 1e fb          	endbr32 
+     444:	55                   	push   %ebp
+     445:	89 e5                	mov    %esp,%ebp
+     447:	53                   	push   %ebx
+     448:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     44b:	6a 54                	push   $0x54
+     44d:	e8 ee 0d 00 00       	call   1240 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     452:	83 c4 0c             	add    $0xc,%esp
+     455:	6a 54                	push   $0x54
+  cmd = malloc(sizeof(*cmd));
+     457:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     459:	6a 00                	push   $0x0
+     45b:	50                   	push   %eax
+     45c:	e8 5f 08 00 00       	call   cc0 <memset>
+  cmd->type = EXEC;
+     461:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     467:	89 d8                	mov    %ebx,%eax
+     469:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     46c:	c9                   	leave  
+     46d:	c3                   	ret    
+     46e:	66 90                	xchg   %ax,%ax
+
+00000470 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     470:	f3 0f 1e fb          	endbr32 
+     474:	55                   	push   %ebp
+     475:	89 e5                	mov    %esp,%ebp
+     477:	53                   	push   %ebx
+     478:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     47b:	6a 18                	push   $0x18
+     47d:	e8 be 0d 00 00       	call   1240 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     482:	83 c4 0c             	add    $0xc,%esp
+     485:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     487:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     489:	6a 00                	push   $0x0
+     48b:	50                   	push   %eax
+     48c:	e8 2f 08 00 00       	call   cc0 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     491:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     494:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     49a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     49d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     4a0:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     4a3:	8b 45 10             	mov    0x10(%ebp),%eax
+     4a6:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     4a9:	8b 45 14             	mov    0x14(%ebp),%eax
+     4ac:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     4af:	8b 45 18             	mov    0x18(%ebp),%eax
+     4b2:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     4b5:	89 d8                	mov    %ebx,%eax
+     4b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     4ba:	c9                   	leave  
+     4bb:	c3                   	ret    
+     4bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000004c0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     4c0:	f3 0f 1e fb          	endbr32 
+     4c4:	55                   	push   %ebp
+     4c5:	89 e5                	mov    %esp,%ebp
+     4c7:	53                   	push   %ebx
+     4c8:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     4cb:	6a 0c                	push   $0xc
+     4cd:	e8 6e 0d 00 00       	call   1240 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     4d2:	83 c4 0c             	add    $0xc,%esp
+     4d5:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     4d7:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     4d9:	6a 00                	push   $0x0
+     4db:	50                   	push   %eax
+     4dc:	e8 df 07 00 00       	call   cc0 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     4e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     4e4:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     4ea:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     4ed:	8b 45 0c             	mov    0xc(%ebp),%eax
+     4f0:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     4f3:	89 d8                	mov    %ebx,%eax
+     4f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     4f8:	c9                   	leave  
+     4f9:	c3                   	ret    
+     4fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000500 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     500:	f3 0f 1e fb          	endbr32 
+     504:	55                   	push   %ebp
+     505:	89 e5                	mov    %esp,%ebp
+     507:	53                   	push   %ebx
+     508:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     50b:	6a 0c                	push   $0xc
+     50d:	e8 2e 0d 00 00       	call   1240 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     512:	83 c4 0c             	add    $0xc,%esp
+     515:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     517:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     519:	6a 00                	push   $0x0
+     51b:	50                   	push   %eax
+     51c:	e8 9f 07 00 00       	call   cc0 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     521:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     524:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     52a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     52d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     530:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     533:	89 d8                	mov    %ebx,%eax
+     535:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     538:	c9                   	leave  
+     539:	c3                   	ret    
+     53a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000540 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     540:	f3 0f 1e fb          	endbr32 
+     544:	55                   	push   %ebp
+     545:	89 e5                	mov    %esp,%ebp
+     547:	53                   	push   %ebx
+     548:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     54b:	6a 08                	push   $0x8
+     54d:	e8 ee 0c 00 00       	call   1240 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     552:	83 c4 0c             	add    $0xc,%esp
+     555:	6a 08                	push   $0x8
+  cmd = malloc(sizeof(*cmd));
+     557:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     559:	6a 00                	push   $0x0
+     55b:	50                   	push   %eax
+     55c:	e8 5f 07 00 00       	call   cc0 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     561:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     564:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     56a:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     56d:	89 d8                	mov    %ebx,%eax
+     56f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     572:	c9                   	leave  
+     573:	c3                   	ret    
+     574:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     57f:	90                   	nop
+
+00000580 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     580:	f3 0f 1e fb          	endbr32 
+     584:	55                   	push   %ebp
+     585:	89 e5                	mov    %esp,%ebp
+     587:	57                   	push   %edi
+     588:	56                   	push   %esi
+     589:	53                   	push   %ebx
+     58a:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     58d:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     590:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     593:	8b 75 10             	mov    0x10(%ebp),%esi
+  s = *ps;
+     596:	8b 38                	mov    (%eax),%edi
+  while(s < es && strchr(whitespace, *s))
+     598:	39 df                	cmp    %ebx,%edi
+     59a:	72 0b                	jb     5a7 <gettoken+0x27>
+     59c:	eb 21                	jmp    5bf <gettoken+0x3f>
+     59e:	66 90                	xchg   %ax,%ax
+    s++;
+     5a0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     5a3:	39 fb                	cmp    %edi,%ebx
+     5a5:	74 18                	je     5bf <gettoken+0x3f>
+     5a7:	0f be 07             	movsbl (%edi),%eax
+     5aa:	83 ec 08             	sub    $0x8,%esp
+     5ad:	50                   	push   %eax
+     5ae:	68 44 1a 00 00       	push   $0x1a44
+     5b3:	e8 28 07 00 00       	call   ce0 <strchr>
+     5b8:	83 c4 10             	add    $0x10,%esp
+     5bb:	85 c0                	test   %eax,%eax
+     5bd:	75 e1                	jne    5a0 <gettoken+0x20>
+  if(q)
+     5bf:	85 f6                	test   %esi,%esi
+     5c1:	74 02                	je     5c5 <gettoken+0x45>
+    *q = s;
+     5c3:	89 3e                	mov    %edi,(%esi)
+  ret = *s;
+     5c5:	0f b6 07             	movzbl (%edi),%eax
+  switch(*s){
+     5c8:	3c 3c                	cmp    $0x3c,%al
+     5ca:	0f 8f d0 00 00 00    	jg     6a0 <gettoken+0x120>
+     5d0:	3c 3a                	cmp    $0x3a,%al
+     5d2:	0f 8f b4 00 00 00    	jg     68c <gettoken+0x10c>
+     5d8:	84 c0                	test   %al,%al
+     5da:	75 44                	jne    620 <gettoken+0xa0>
+     5dc:	31 f6                	xor    %esi,%esi
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     5de:	8b 55 14             	mov    0x14(%ebp),%edx
+     5e1:	85 d2                	test   %edx,%edx
+     5e3:	74 05                	je     5ea <gettoken+0x6a>
+    *eq = s;
+     5e5:	8b 45 14             	mov    0x14(%ebp),%eax
+     5e8:	89 38                	mov    %edi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     5ea:	39 df                	cmp    %ebx,%edi
+     5ec:	72 09                	jb     5f7 <gettoken+0x77>
+     5ee:	eb 1f                	jmp    60f <gettoken+0x8f>
+    s++;
+     5f0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     5f3:	39 fb                	cmp    %edi,%ebx
+     5f5:	74 18                	je     60f <gettoken+0x8f>
+     5f7:	0f be 07             	movsbl (%edi),%eax
+     5fa:	83 ec 08             	sub    $0x8,%esp
+     5fd:	50                   	push   %eax
+     5fe:	68 44 1a 00 00       	push   $0x1a44
+     603:	e8 d8 06 00 00       	call   ce0 <strchr>
+     608:	83 c4 10             	add    $0x10,%esp
+     60b:	85 c0                	test   %eax,%eax
+     60d:	75 e1                	jne    5f0 <gettoken+0x70>
+  *ps = s;
+     60f:	8b 45 08             	mov    0x8(%ebp),%eax
+     612:	89 38                	mov    %edi,(%eax)
+  return ret;
+}
+     614:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     617:	89 f0                	mov    %esi,%eax
+     619:	5b                   	pop    %ebx
+     61a:	5e                   	pop    %esi
+     61b:	5f                   	pop    %edi
+     61c:	5d                   	pop    %ebp
+     61d:	c3                   	ret    
+     61e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     620:	79 5e                	jns    680 <gettoken+0x100>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     622:	39 fb                	cmp    %edi,%ebx
+     624:	77 34                	ja     65a <gettoken+0xda>
+  if(eq)
+     626:	8b 45 14             	mov    0x14(%ebp),%eax
+     629:	be 61 00 00 00       	mov    $0x61,%esi
+     62e:	85 c0                	test   %eax,%eax
+     630:	75 b3                	jne    5e5 <gettoken+0x65>
+     632:	eb db                	jmp    60f <gettoken+0x8f>
+     634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     638:	0f be 07             	movsbl (%edi),%eax
+     63b:	83 ec 08             	sub    $0x8,%esp
+     63e:	50                   	push   %eax
+     63f:	68 3c 1a 00 00       	push   $0x1a3c
+     644:	e8 97 06 00 00       	call   ce0 <strchr>
+     649:	83 c4 10             	add    $0x10,%esp
+     64c:	85 c0                	test   %eax,%eax
+     64e:	75 22                	jne    672 <gettoken+0xf2>
+      s++;
+     650:	83 c7 01             	add    $0x1,%edi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     653:	39 fb                	cmp    %edi,%ebx
+     655:	74 cf                	je     626 <gettoken+0xa6>
+     657:	0f b6 07             	movzbl (%edi),%eax
+     65a:	83 ec 08             	sub    $0x8,%esp
+     65d:	0f be f0             	movsbl %al,%esi
+     660:	56                   	push   %esi
+     661:	68 44 1a 00 00       	push   $0x1a44
+     666:	e8 75 06 00 00       	call   ce0 <strchr>
+     66b:	83 c4 10             	add    $0x10,%esp
+     66e:	85 c0                	test   %eax,%eax
+     670:	74 c6                	je     638 <gettoken+0xb8>
+    ret = 'a';
+     672:	be 61 00 00 00       	mov    $0x61,%esi
+     677:	e9 62 ff ff ff       	jmp    5de <gettoken+0x5e>
+     67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     680:	3c 26                	cmp    $0x26,%al
+     682:	74 08                	je     68c <gettoken+0x10c>
+     684:	8d 48 d8             	lea    -0x28(%eax),%ecx
+     687:	80 f9 01             	cmp    $0x1,%cl
+     68a:	77 96                	ja     622 <gettoken+0xa2>
+  ret = *s;
+     68c:	0f be f0             	movsbl %al,%esi
+    s++;
+     68f:	83 c7 01             	add    $0x1,%edi
+    break;
+     692:	e9 47 ff ff ff       	jmp    5de <gettoken+0x5e>
+     697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     69e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     6a0:	3c 3e                	cmp    $0x3e,%al
+     6a2:	75 1c                	jne    6c0 <gettoken+0x140>
+    if(*s == '>'){
+     6a4:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+    s++;
+     6a8:	8d 47 01             	lea    0x1(%edi),%eax
+    if(*s == '>'){
+     6ab:	74 1c                	je     6c9 <gettoken+0x149>
+    s++;
+     6ad:	89 c7                	mov    %eax,%edi
+     6af:	be 3e 00 00 00       	mov    $0x3e,%esi
+     6b4:	e9 25 ff ff ff       	jmp    5de <gettoken+0x5e>
+     6b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     6c0:	3c 7c                	cmp    $0x7c,%al
+     6c2:	74 c8                	je     68c <gettoken+0x10c>
+     6c4:	e9 59 ff ff ff       	jmp    622 <gettoken+0xa2>
+      s++;
+     6c9:	83 c7 02             	add    $0x2,%edi
+      ret = '+';
+     6cc:	be 2b 00 00 00       	mov    $0x2b,%esi
+     6d1:	e9 08 ff ff ff       	jmp    5de <gettoken+0x5e>
+     6d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     6dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000006e0 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     6e0:	f3 0f 1e fb          	endbr32 
+     6e4:	55                   	push   %ebp
+     6e5:	89 e5                	mov    %esp,%ebp
+     6e7:	57                   	push   %edi
+     6e8:	56                   	push   %esi
+     6e9:	53                   	push   %ebx
+     6ea:	83 ec 0c             	sub    $0xc,%esp
+     6ed:	8b 7d 08             	mov    0x8(%ebp),%edi
+     6f0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     6f3:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     6f5:	39 f3                	cmp    %esi,%ebx
+     6f7:	72 0e                	jb     707 <peek+0x27>
+     6f9:	eb 24                	jmp    71f <peek+0x3f>
+     6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     6ff:	90                   	nop
+    s++;
+     700:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     703:	39 de                	cmp    %ebx,%esi
+     705:	74 18                	je     71f <peek+0x3f>
+     707:	0f be 03             	movsbl (%ebx),%eax
+     70a:	83 ec 08             	sub    $0x8,%esp
+     70d:	50                   	push   %eax
+     70e:	68 44 1a 00 00       	push   $0x1a44
+     713:	e8 c8 05 00 00       	call   ce0 <strchr>
+     718:	83 c4 10             	add    $0x10,%esp
+     71b:	85 c0                	test   %eax,%eax
+     71d:	75 e1                	jne    700 <peek+0x20>
+  *ps = s;
+     71f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     721:	0f be 03             	movsbl (%ebx),%eax
+     724:	31 d2                	xor    %edx,%edx
+     726:	84 c0                	test   %al,%al
+     728:	75 0e                	jne    738 <peek+0x58>
+}
+     72a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     72d:	89 d0                	mov    %edx,%eax
+     72f:	5b                   	pop    %ebx
+     730:	5e                   	pop    %esi
+     731:	5f                   	pop    %edi
+     732:	5d                   	pop    %ebp
+     733:	c3                   	ret    
+     734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return *s && strchr(toks, *s);
+     738:	83 ec 08             	sub    $0x8,%esp
+     73b:	50                   	push   %eax
+     73c:	ff 75 10             	pushl  0x10(%ebp)
+     73f:	e8 9c 05 00 00       	call   ce0 <strchr>
+     744:	83 c4 10             	add    $0x10,%esp
+     747:	31 d2                	xor    %edx,%edx
+     749:	85 c0                	test   %eax,%eax
+     74b:	0f 95 c2             	setne  %dl
+}
+     74e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     751:	5b                   	pop    %ebx
+     752:	89 d0                	mov    %edx,%eax
+     754:	5e                   	pop    %esi
+     755:	5f                   	pop    %edi
+     756:	5d                   	pop    %ebp
+     757:	c3                   	ret    
+     758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     75f:	90                   	nop
+
+00000760 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     760:	f3 0f 1e fb          	endbr32 
+     764:	55                   	push   %ebp
+     765:	89 e5                	mov    %esp,%ebp
+     767:	57                   	push   %edi
+     768:	56                   	push   %esi
+     769:	53                   	push   %ebx
+     76a:	83 ec 1c             	sub    $0x1c,%esp
+     76d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     770:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     777:	90                   	nop
+     778:	83 ec 04             	sub    $0x4,%esp
+     77b:	68 a1 13 00 00       	push   $0x13a1
+     780:	53                   	push   %ebx
+     781:	56                   	push   %esi
+     782:	e8 59 ff ff ff       	call   6e0 <peek>
+     787:	83 c4 10             	add    $0x10,%esp
+     78a:	85 c0                	test   %eax,%eax
+     78c:	74 6a                	je     7f8 <parseredirs+0x98>
+    tok = gettoken(ps, es, 0, 0);
+     78e:	6a 00                	push   $0x0
+     790:	6a 00                	push   $0x0
+     792:	53                   	push   %ebx
+     793:	56                   	push   %esi
+     794:	e8 e7 fd ff ff       	call   580 <gettoken>
+     799:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     79b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     79e:	50                   	push   %eax
+     79f:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     7a2:	50                   	push   %eax
+     7a3:	53                   	push   %ebx
+     7a4:	56                   	push   %esi
+     7a5:	e8 d6 fd ff ff       	call   580 <gettoken>
+     7aa:	83 c4 20             	add    $0x20,%esp
+     7ad:	83 f8 61             	cmp    $0x61,%eax
+     7b0:	75 51                	jne    803 <parseredirs+0xa3>
+      panic("missing file for redirection");
+    switch(tok){
+     7b2:	83 ff 3c             	cmp    $0x3c,%edi
+     7b5:	74 31                	je     7e8 <parseredirs+0x88>
+     7b7:	83 ff 3e             	cmp    $0x3e,%edi
+     7ba:	74 05                	je     7c1 <parseredirs+0x61>
+     7bc:	83 ff 2b             	cmp    $0x2b,%edi
+     7bf:	75 b7                	jne    778 <parseredirs+0x18>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     7c1:	83 ec 0c             	sub    $0xc,%esp
+     7c4:	6a 01                	push   $0x1
+     7c6:	68 01 02 00 00       	push   $0x201
+     7cb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     7ce:	ff 75 e0             	pushl  -0x20(%ebp)
+     7d1:	ff 75 08             	pushl  0x8(%ebp)
+     7d4:	e8 97 fc ff ff       	call   470 <redircmd>
+      break;
+     7d9:	83 c4 20             	add    $0x20,%esp
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     7dc:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     7df:	eb 97                	jmp    778 <parseredirs+0x18>
+     7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     7e8:	83 ec 0c             	sub    $0xc,%esp
+     7eb:	6a 00                	push   $0x0
+     7ed:	6a 00                	push   $0x0
+     7ef:	eb da                	jmp    7cb <parseredirs+0x6b>
+     7f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  return cmd;
+}
+     7f8:	8b 45 08             	mov    0x8(%ebp),%eax
+     7fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7fe:	5b                   	pop    %ebx
+     7ff:	5e                   	pop    %esi
+     800:	5f                   	pop    %edi
+     801:	5d                   	pop    %ebp
+     802:	c3                   	ret    
+      panic("missing file for redirection");
+     803:	83 ec 0c             	sub    $0xc,%esp
+     806:	68 84 13 00 00       	push   $0x1384
+     80b:	e8 20 fa ff ff       	call   230 <panic>
+
+00000810 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     810:	f3 0f 1e fb          	endbr32 
+     814:	55                   	push   %ebp
+     815:	89 e5                	mov    %esp,%ebp
+     817:	57                   	push   %edi
+     818:	56                   	push   %esi
+     819:	53                   	push   %ebx
+     81a:	83 ec 30             	sub    $0x30,%esp
+     81d:	8b 75 08             	mov    0x8(%ebp),%esi
+     820:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     823:	68 a4 13 00 00       	push   $0x13a4
+     828:	57                   	push   %edi
+     829:	56                   	push   %esi
+     82a:	e8 b1 fe ff ff       	call   6e0 <peek>
+     82f:	83 c4 10             	add    $0x10,%esp
+     832:	85 c0                	test   %eax,%eax
+     834:	0f 85 96 00 00 00    	jne    8d0 <parseexec+0xc0>
+     83a:	89 c3                	mov    %eax,%ebx
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     83c:	e8 ff fb ff ff       	call   440 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     841:	83 ec 04             	sub    $0x4,%esp
+     844:	57                   	push   %edi
+     845:	56                   	push   %esi
+     846:	50                   	push   %eax
+  ret = execcmd();
+     847:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = parseredirs(ret, ps, es);
+     84a:	e8 11 ff ff ff       	call   760 <parseredirs>
+  while(!peek(ps, es, "|)&;")){
+     84f:	83 c4 10             	add    $0x10,%esp
+  ret = parseredirs(ret, ps, es);
+     852:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     855:	eb 1c                	jmp    873 <parseexec+0x63>
+     857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     85e:	66 90                	xchg   %ax,%ax
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     860:	83 ec 04             	sub    $0x4,%esp
+     863:	57                   	push   %edi
+     864:	56                   	push   %esi
+     865:	ff 75 d4             	pushl  -0x2c(%ebp)
+     868:	e8 f3 fe ff ff       	call   760 <parseredirs>
+     86d:	83 c4 10             	add    $0x10,%esp
+     870:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     873:	83 ec 04             	sub    $0x4,%esp
+     876:	68 bb 13 00 00       	push   $0x13bb
+     87b:	57                   	push   %edi
+     87c:	56                   	push   %esi
+     87d:	e8 5e fe ff ff       	call   6e0 <peek>
+     882:	83 c4 10             	add    $0x10,%esp
+     885:	85 c0                	test   %eax,%eax
+     887:	75 67                	jne    8f0 <parseexec+0xe0>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     889:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     88c:	50                   	push   %eax
+     88d:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     890:	50                   	push   %eax
+     891:	57                   	push   %edi
+     892:	56                   	push   %esi
+     893:	e8 e8 fc ff ff       	call   580 <gettoken>
+     898:	83 c4 10             	add    $0x10,%esp
+     89b:	85 c0                	test   %eax,%eax
+     89d:	74 51                	je     8f0 <parseexec+0xe0>
+    if(tok != 'a')
+     89f:	83 f8 61             	cmp    $0x61,%eax
+     8a2:	75 6b                	jne    90f <parseexec+0xff>
+    cmd->argv[argc] = q;
+     8a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     8a7:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     8aa:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     8ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     8b1:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     8b5:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     8b8:	83 fb 0a             	cmp    $0xa,%ebx
+     8bb:	75 a3                	jne    860 <parseexec+0x50>
+      panic("too many args");
+     8bd:	83 ec 0c             	sub    $0xc,%esp
+     8c0:	68 ad 13 00 00       	push   $0x13ad
+     8c5:	e8 66 f9 ff ff       	call   230 <panic>
+     8ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     8d0:	83 ec 08             	sub    $0x8,%esp
+     8d3:	57                   	push   %edi
+     8d4:	56                   	push   %esi
+     8d5:	e8 66 01 00 00       	call   a40 <parseblock>
+     8da:	83 c4 10             	add    $0x10,%esp
+     8dd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     8e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     8e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8e6:	5b                   	pop    %ebx
+     8e7:	5e                   	pop    %esi
+     8e8:	5f                   	pop    %edi
+     8e9:	5d                   	pop    %ebp
+     8ea:	c3                   	ret    
+     8eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     8ef:	90                   	nop
+  cmd->argv[argc] = 0;
+     8f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     8f3:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+     8f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     8fd:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+}
+     904:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     907:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     90a:	5b                   	pop    %ebx
+     90b:	5e                   	pop    %esi
+     90c:	5f                   	pop    %edi
+     90d:	5d                   	pop    %ebp
+     90e:	c3                   	ret    
+      panic("syntax");
+     90f:	83 ec 0c             	sub    $0xc,%esp
+     912:	68 a6 13 00 00       	push   $0x13a6
+     917:	e8 14 f9 ff ff       	call   230 <panic>
+     91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <parsepipe>:
+{
+     920:	f3 0f 1e fb          	endbr32 
+     924:	55                   	push   %ebp
+     925:	89 e5                	mov    %esp,%ebp
+     927:	57                   	push   %edi
+     928:	56                   	push   %esi
+     929:	53                   	push   %ebx
+     92a:	83 ec 14             	sub    $0x14,%esp
+     92d:	8b 75 08             	mov    0x8(%ebp),%esi
+     930:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parseexec(ps, es);
+     933:	57                   	push   %edi
+     934:	56                   	push   %esi
+     935:	e8 d6 fe ff ff       	call   810 <parseexec>
+  if(peek(ps, es, "|")){
+     93a:	83 c4 0c             	add    $0xc,%esp
+     93d:	68 c0 13 00 00       	push   $0x13c0
+  cmd = parseexec(ps, es);
+     942:	89 c3                	mov    %eax,%ebx
+  if(peek(ps, es, "|")){
+     944:	57                   	push   %edi
+     945:	56                   	push   %esi
+     946:	e8 95 fd ff ff       	call   6e0 <peek>
+     94b:	83 c4 10             	add    $0x10,%esp
+     94e:	85 c0                	test   %eax,%eax
+     950:	75 0e                	jne    960 <parsepipe+0x40>
+}
+     952:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     955:	89 d8                	mov    %ebx,%eax
+     957:	5b                   	pop    %ebx
+     958:	5e                   	pop    %esi
+     959:	5f                   	pop    %edi
+     95a:	5d                   	pop    %ebp
+     95b:	c3                   	ret    
+     95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     960:	6a 00                	push   $0x0
+     962:	6a 00                	push   $0x0
+     964:	57                   	push   %edi
+     965:	56                   	push   %esi
+     966:	e8 15 fc ff ff       	call   580 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     96b:	58                   	pop    %eax
+     96c:	5a                   	pop    %edx
+     96d:	57                   	push   %edi
+     96e:	56                   	push   %esi
+     96f:	e8 ac ff ff ff       	call   920 <parsepipe>
+     974:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     977:	83 c4 10             	add    $0x10,%esp
+     97a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     97d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     980:	5b                   	pop    %ebx
+     981:	5e                   	pop    %esi
+     982:	5f                   	pop    %edi
+     983:	5d                   	pop    %ebp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     984:	e9 37 fb ff ff       	jmp    4c0 <pipecmd>
+     989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000990 <parseline>:
+{
+     990:	f3 0f 1e fb          	endbr32 
+     994:	55                   	push   %ebp
+     995:	89 e5                	mov    %esp,%ebp
+     997:	57                   	push   %edi
+     998:	56                   	push   %esi
+     999:	53                   	push   %ebx
+     99a:	83 ec 14             	sub    $0x14,%esp
+     99d:	8b 75 08             	mov    0x8(%ebp),%esi
+     9a0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parsepipe(ps, es);
+     9a3:	57                   	push   %edi
+     9a4:	56                   	push   %esi
+     9a5:	e8 76 ff ff ff       	call   920 <parsepipe>
+  while(peek(ps, es, "&")){
+     9aa:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     9ad:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     9af:	eb 1f                	jmp    9d0 <parseline+0x40>
+     9b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     9b8:	6a 00                	push   $0x0
+     9ba:	6a 00                	push   $0x0
+     9bc:	57                   	push   %edi
+     9bd:	56                   	push   %esi
+     9be:	e8 bd fb ff ff       	call   580 <gettoken>
+    cmd = backcmd(cmd);
+     9c3:	89 1c 24             	mov    %ebx,(%esp)
+     9c6:	e8 75 fb ff ff       	call   540 <backcmd>
+     9cb:	83 c4 10             	add    $0x10,%esp
+     9ce:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     9d0:	83 ec 04             	sub    $0x4,%esp
+     9d3:	68 c2 13 00 00       	push   $0x13c2
+     9d8:	57                   	push   %edi
+     9d9:	56                   	push   %esi
+     9da:	e8 01 fd ff ff       	call   6e0 <peek>
+     9df:	83 c4 10             	add    $0x10,%esp
+     9e2:	85 c0                	test   %eax,%eax
+     9e4:	75 d2                	jne    9b8 <parseline+0x28>
+  if(peek(ps, es, ";")){
+     9e6:	83 ec 04             	sub    $0x4,%esp
+     9e9:	68 be 13 00 00       	push   $0x13be
+     9ee:	57                   	push   %edi
+     9ef:	56                   	push   %esi
+     9f0:	e8 eb fc ff ff       	call   6e0 <peek>
+     9f5:	83 c4 10             	add    $0x10,%esp
+     9f8:	85 c0                	test   %eax,%eax
+     9fa:	75 14                	jne    a10 <parseline+0x80>
+}
+     9fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     9ff:	89 d8                	mov    %ebx,%eax
+     a01:	5b                   	pop    %ebx
+     a02:	5e                   	pop    %esi
+     a03:	5f                   	pop    %edi
+     a04:	5d                   	pop    %ebp
+     a05:	c3                   	ret    
+     a06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a0d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     a10:	6a 00                	push   $0x0
+     a12:	6a 00                	push   $0x0
+     a14:	57                   	push   %edi
+     a15:	56                   	push   %esi
+     a16:	e8 65 fb ff ff       	call   580 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     a1b:	58                   	pop    %eax
+     a1c:	5a                   	pop    %edx
+     a1d:	57                   	push   %edi
+     a1e:	56                   	push   %esi
+     a1f:	e8 6c ff ff ff       	call   990 <parseline>
+     a24:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     a27:	83 c4 10             	add    $0x10,%esp
+     a2a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     a2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     a30:	5b                   	pop    %ebx
+     a31:	5e                   	pop    %esi
+     a32:	5f                   	pop    %edi
+     a33:	5d                   	pop    %ebp
+    cmd = listcmd(cmd, parseline(ps, es));
+     a34:	e9 c7 fa ff ff       	jmp    500 <listcmd>
+     a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000a40 <parseblock>:
+{
+     a40:	f3 0f 1e fb          	endbr32 
+     a44:	55                   	push   %ebp
+     a45:	89 e5                	mov    %esp,%ebp
+     a47:	57                   	push   %edi
+     a48:	56                   	push   %esi
+     a49:	53                   	push   %ebx
+     a4a:	83 ec 10             	sub    $0x10,%esp
+     a4d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a50:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     a53:	68 a4 13 00 00       	push   $0x13a4
+     a58:	56                   	push   %esi
+     a59:	53                   	push   %ebx
+     a5a:	e8 81 fc ff ff       	call   6e0 <peek>
+     a5f:	83 c4 10             	add    $0x10,%esp
+     a62:	85 c0                	test   %eax,%eax
+     a64:	74 4a                	je     ab0 <parseblock+0x70>
+  gettoken(ps, es, 0, 0);
+     a66:	6a 00                	push   $0x0
+     a68:	6a 00                	push   $0x0
+     a6a:	56                   	push   %esi
+     a6b:	53                   	push   %ebx
+     a6c:	e8 0f fb ff ff       	call   580 <gettoken>
+  cmd = parseline(ps, es);
+     a71:	58                   	pop    %eax
+     a72:	5a                   	pop    %edx
+     a73:	56                   	push   %esi
+     a74:	53                   	push   %ebx
+     a75:	e8 16 ff ff ff       	call   990 <parseline>
+  if(!peek(ps, es, ")"))
+     a7a:	83 c4 0c             	add    $0xc,%esp
+     a7d:	68 e0 13 00 00       	push   $0x13e0
+  cmd = parseline(ps, es);
+     a82:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     a84:	56                   	push   %esi
+     a85:	53                   	push   %ebx
+     a86:	e8 55 fc ff ff       	call   6e0 <peek>
+     a8b:	83 c4 10             	add    $0x10,%esp
+     a8e:	85 c0                	test   %eax,%eax
+     a90:	74 2b                	je     abd <parseblock+0x7d>
+  gettoken(ps, es, 0, 0);
+     a92:	6a 00                	push   $0x0
+     a94:	6a 00                	push   $0x0
+     a96:	56                   	push   %esi
+     a97:	53                   	push   %ebx
+     a98:	e8 e3 fa ff ff       	call   580 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     a9d:	83 c4 0c             	add    $0xc,%esp
+     aa0:	56                   	push   %esi
+     aa1:	53                   	push   %ebx
+     aa2:	57                   	push   %edi
+     aa3:	e8 b8 fc ff ff       	call   760 <parseredirs>
+}
+     aa8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     aab:	5b                   	pop    %ebx
+     aac:	5e                   	pop    %esi
+     aad:	5f                   	pop    %edi
+     aae:	5d                   	pop    %ebp
+     aaf:	c3                   	ret    
+    panic("parseblock");
+     ab0:	83 ec 0c             	sub    $0xc,%esp
+     ab3:	68 c4 13 00 00       	push   $0x13c4
+     ab8:	e8 73 f7 ff ff       	call   230 <panic>
+    panic("syntax - missing )");
+     abd:	83 ec 0c             	sub    $0xc,%esp
+     ac0:	68 cf 13 00 00       	push   $0x13cf
+     ac5:	e8 66 f7 ff ff       	call   230 <panic>
+     aca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000ad0 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     ad0:	f3 0f 1e fb          	endbr32 
+     ad4:	55                   	push   %ebp
+     ad5:	89 e5                	mov    %esp,%ebp
+     ad7:	53                   	push   %ebx
+     ad8:	83 ec 04             	sub    $0x4,%esp
+     adb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     ade:	85 db                	test   %ebx,%ebx
+     ae0:	0f 84 9a 00 00 00    	je     b80 <nulterminate+0xb0>
+    return 0;
+
+  switch(cmd->type){
+     ae6:	83 3b 05             	cmpl   $0x5,(%ebx)
+     ae9:	77 6d                	ja     b58 <nulterminate+0x88>
+     aeb:	8b 03                	mov    (%ebx),%eax
+     aed:	3e ff 24 85 20 14 00 	notrack jmp *0x1420(,%eax,4)
+     af4:	00 
+     af5:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+     af8:	83 ec 0c             	sub    $0xc,%esp
+     afb:	ff 73 04             	pushl  0x4(%ebx)
+     afe:	e8 cd ff ff ff       	call   ad0 <nulterminate>
+    nulterminate(lcmd->right);
+     b03:	58                   	pop    %eax
+     b04:	ff 73 08             	pushl  0x8(%ebx)
+     b07:	e8 c4 ff ff ff       	call   ad0 <nulterminate>
+    break;
+     b0c:	83 c4 10             	add    $0x10,%esp
+     b0f:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     b11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b14:	c9                   	leave  
+     b15:	c3                   	ret    
+     b16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b1d:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(bcmd->cmd);
+     b20:	83 ec 0c             	sub    $0xc,%esp
+     b23:	ff 73 04             	pushl  0x4(%ebx)
+     b26:	e8 a5 ff ff ff       	call   ad0 <nulterminate>
+    break;
+     b2b:	89 d8                	mov    %ebx,%eax
+     b2d:	83 c4 10             	add    $0x10,%esp
+}
+     b30:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b33:	c9                   	leave  
+     b34:	c3                   	ret    
+     b35:	8d 76 00             	lea    0x0(%esi),%esi
+    for(i=0; ecmd->argv[i]; i++)
+     b38:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     b3b:	8d 43 08             	lea    0x8(%ebx),%eax
+     b3e:	85 c9                	test   %ecx,%ecx
+     b40:	74 16                	je     b58 <nulterminate+0x88>
+     b42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     b48:	8b 50 24             	mov    0x24(%eax),%edx
+     b4b:	83 c0 04             	add    $0x4,%eax
+     b4e:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     b51:	8b 50 fc             	mov    -0x4(%eax),%edx
+     b54:	85 d2                	test   %edx,%edx
+     b56:	75 f0                	jne    b48 <nulterminate+0x78>
+  switch(cmd->type){
+     b58:	89 d8                	mov    %ebx,%eax
+}
+     b5a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b5d:	c9                   	leave  
+     b5e:	c3                   	ret    
+     b5f:	90                   	nop
+    nulterminate(rcmd->cmd);
+     b60:	83 ec 0c             	sub    $0xc,%esp
+     b63:	ff 73 04             	pushl  0x4(%ebx)
+     b66:	e8 65 ff ff ff       	call   ad0 <nulterminate>
+    *rcmd->efile = 0;
+     b6b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     b6e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     b71:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     b74:	89 d8                	mov    %ebx,%eax
+}
+     b76:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b79:	c9                   	leave  
+     b7a:	c3                   	ret    
+     b7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b7f:	90                   	nop
+    return 0;
+     b80:	31 c0                	xor    %eax,%eax
+     b82:	eb 8d                	jmp    b11 <nulterminate+0x41>
+     b84:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b8f:	90                   	nop
+
+00000b90 <parsecmd>:
+{
+     b90:	f3 0f 1e fb          	endbr32 
+     b94:	55                   	push   %ebp
+     b95:	89 e5                	mov    %esp,%ebp
+     b97:	56                   	push   %esi
+     b98:	53                   	push   %ebx
+  es = s + strlen(s);
+     b99:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     b9c:	83 ec 0c             	sub    $0xc,%esp
+     b9f:	53                   	push   %ebx
+     ba0:	e8 db 00 00 00       	call   c80 <strlen>
+  cmd = parseline(&s, es);
+     ba5:	59                   	pop    %ecx
+     ba6:	5e                   	pop    %esi
+  es = s + strlen(s);
+     ba7:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     ba9:	8d 45 08             	lea    0x8(%ebp),%eax
+     bac:	53                   	push   %ebx
+     bad:	50                   	push   %eax
+     bae:	e8 dd fd ff ff       	call   990 <parseline>
+  peek(&s, es, "");
+     bb3:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseline(&s, es);
+     bb6:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     bb8:	8d 45 08             	lea    0x8(%ebp),%eax
+     bbb:	68 69 13 00 00       	push   $0x1369
+     bc0:	53                   	push   %ebx
+     bc1:	50                   	push   %eax
+     bc2:	e8 19 fb ff ff       	call   6e0 <peek>
+  if(s != es){
+     bc7:	8b 45 08             	mov    0x8(%ebp),%eax
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	39 d8                	cmp    %ebx,%eax
+     bcf:	75 12                	jne    be3 <parsecmd+0x53>
+  nulterminate(cmd);
+     bd1:	83 ec 0c             	sub    $0xc,%esp
+     bd4:	56                   	push   %esi
+     bd5:	e8 f6 fe ff ff       	call   ad0 <nulterminate>
+}
+     bda:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     bdd:	89 f0                	mov    %esi,%eax
+     bdf:	5b                   	pop    %ebx
+     be0:	5e                   	pop    %esi
+     be1:	5d                   	pop    %ebp
+     be2:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     be3:	52                   	push   %edx
+     be4:	50                   	push   %eax
+     be5:	68 e2 13 00 00       	push   $0x13e2
+     bea:	6a 02                	push   $0x2
+     bec:	e8 ef 03 00 00       	call   fe0 <printf>
+    panic("syntax");
+     bf1:	c7 04 24 a6 13 00 00 	movl   $0x13a6,(%esp)
+     bf8:	e8 33 f6 ff ff       	call   230 <panic>
+     bfd:	66 90                	xchg   %ax,%ax
+     bff:	90                   	nop
+
+00000c00 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     c00:	f3 0f 1e fb          	endbr32 
+     c04:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     c05:	31 c0                	xor    %eax,%eax
+{
+     c07:	89 e5                	mov    %esp,%ebp
+     c09:	53                   	push   %ebx
+     c0a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     c0d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+     c10:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     c14:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+     c17:	83 c0 01             	add    $0x1,%eax
+     c1a:	84 d2                	test   %dl,%dl
+     c1c:	75 f2                	jne    c10 <strcpy+0x10>
+    ;
+  return os;
+}
+     c1e:	89 c8                	mov    %ecx,%eax
+     c20:	5b                   	pop    %ebx
+     c21:	5d                   	pop    %ebp
+     c22:	c3                   	ret    
+     c23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000c30 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     c30:	f3 0f 1e fb          	endbr32 
+     c34:	55                   	push   %ebp
+     c35:	89 e5                	mov    %esp,%ebp
+     c37:	53                   	push   %ebx
+     c38:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     c3b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+     c3e:	0f b6 01             	movzbl (%ecx),%eax
+     c41:	0f b6 1a             	movzbl (%edx),%ebx
+     c44:	84 c0                	test   %al,%al
+     c46:	75 19                	jne    c61 <strcmp+0x31>
+     c48:	eb 26                	jmp    c70 <strcmp+0x40>
+     c4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     c50:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+     c54:	83 c1 01             	add    $0x1,%ecx
+     c57:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+     c5a:	0f b6 1a             	movzbl (%edx),%ebx
+     c5d:	84 c0                	test   %al,%al
+     c5f:	74 0f                	je     c70 <strcmp+0x40>
+     c61:	38 d8                	cmp    %bl,%al
+     c63:	74 eb                	je     c50 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+     c65:	29 d8                	sub    %ebx,%eax
+}
+     c67:	5b                   	pop    %ebx
+     c68:	5d                   	pop    %ebp
+     c69:	c3                   	ret    
+     c6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     c70:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+     c72:	29 d8                	sub    %ebx,%eax
+}
+     c74:	5b                   	pop    %ebx
+     c75:	5d                   	pop    %ebp
+     c76:	c3                   	ret    
+     c77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c7e:	66 90                	xchg   %ax,%ax
+
+00000c80 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     c80:	f3 0f 1e fb          	endbr32 
+     c84:	55                   	push   %ebp
+     c85:	89 e5                	mov    %esp,%ebp
+     c87:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     c8a:	80 3a 00             	cmpb   $0x0,(%edx)
+     c8d:	74 21                	je     cb0 <strlen+0x30>
+     c8f:	31 c0                	xor    %eax,%eax
+     c91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c98:	83 c0 01             	add    $0x1,%eax
+     c9b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+     c9f:	89 c1                	mov    %eax,%ecx
+     ca1:	75 f5                	jne    c98 <strlen+0x18>
+    ;
+  return n;
+}
+     ca3:	89 c8                	mov    %ecx,%eax
+     ca5:	5d                   	pop    %ebp
+     ca6:	c3                   	ret    
+     ca7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cae:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+     cb0:	31 c9                	xor    %ecx,%ecx
+}
+     cb2:	5d                   	pop    %ebp
+     cb3:	89 c8                	mov    %ecx,%eax
+     cb5:	c3                   	ret    
+     cb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cbd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000cc0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     cc0:	f3 0f 1e fb          	endbr32 
+     cc4:	55                   	push   %ebp
+     cc5:	89 e5                	mov    %esp,%ebp
+     cc7:	57                   	push   %edi
+     cc8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     ccb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     cce:	8b 45 0c             	mov    0xc(%ebp),%eax
+     cd1:	89 d7                	mov    %edx,%edi
+     cd3:	fc                   	cld    
+     cd4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     cd6:	89 d0                	mov    %edx,%eax
+     cd8:	5f                   	pop    %edi
+     cd9:	5d                   	pop    %ebp
+     cda:	c3                   	ret    
+     cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cdf:	90                   	nop
+
+00000ce0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     ce0:	f3 0f 1e fb          	endbr32 
+     ce4:	55                   	push   %ebp
+     ce5:	89 e5                	mov    %esp,%ebp
+     ce7:	8b 45 08             	mov    0x8(%ebp),%eax
+     cea:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+     cee:	0f b6 10             	movzbl (%eax),%edx
+     cf1:	84 d2                	test   %dl,%dl
+     cf3:	75 16                	jne    d0b <strchr+0x2b>
+     cf5:	eb 21                	jmp    d18 <strchr+0x38>
+     cf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cfe:	66 90                	xchg   %ax,%ax
+     d00:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+     d04:	83 c0 01             	add    $0x1,%eax
+     d07:	84 d2                	test   %dl,%dl
+     d09:	74 0d                	je     d18 <strchr+0x38>
+    if(*s == c)
+     d0b:	38 d1                	cmp    %dl,%cl
+     d0d:	75 f1                	jne    d00 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+     d0f:	5d                   	pop    %ebp
+     d10:	c3                   	ret    
+     d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+     d18:	31 c0                	xor    %eax,%eax
+}
+     d1a:	5d                   	pop    %ebp
+     d1b:	c3                   	ret    
+     d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000d20 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     d20:	f3 0f 1e fb          	endbr32 
+     d24:	55                   	push   %ebp
+     d25:	89 e5                	mov    %esp,%ebp
+     d27:	57                   	push   %edi
+     d28:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     d29:	31 f6                	xor    %esi,%esi
+{
+     d2b:	53                   	push   %ebx
+     d2c:	89 f3                	mov    %esi,%ebx
+     d2e:	83 ec 1c             	sub    $0x1c,%esp
+     d31:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+     d34:	eb 33                	jmp    d69 <gets+0x49>
+     d36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d3d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+     d40:	83 ec 04             	sub    $0x4,%esp
+     d43:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     d46:	6a 01                	push   $0x1
+     d48:	50                   	push   %eax
+     d49:	6a 00                	push   $0x0
+     d4b:	e8 2b 01 00 00       	call   e7b <read>
+    if(cc < 1)
+     d50:	83 c4 10             	add    $0x10,%esp
+     d53:	85 c0                	test   %eax,%eax
+     d55:	7e 1c                	jle    d73 <gets+0x53>
+      break;
+    buf[i++] = c;
+     d57:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     d5b:	83 c7 01             	add    $0x1,%edi
+     d5e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+     d61:	3c 0a                	cmp    $0xa,%al
+     d63:	74 23                	je     d88 <gets+0x68>
+     d65:	3c 0d                	cmp    $0xd,%al
+     d67:	74 1f                	je     d88 <gets+0x68>
+  for(i=0; i+1 < max; ){
+     d69:	83 c3 01             	add    $0x1,%ebx
+     d6c:	89 fe                	mov    %edi,%esi
+     d6e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     d71:	7c cd                	jl     d40 <gets+0x20>
+     d73:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+     d75:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+     d78:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     d7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d7e:	5b                   	pop    %ebx
+     d7f:	5e                   	pop    %esi
+     d80:	5f                   	pop    %edi
+     d81:	5d                   	pop    %ebp
+     d82:	c3                   	ret    
+     d83:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     d87:	90                   	nop
+     d88:	8b 75 08             	mov    0x8(%ebp),%esi
+     d8b:	8b 45 08             	mov    0x8(%ebp),%eax
+     d8e:	01 de                	add    %ebx,%esi
+     d90:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+     d92:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     d95:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d98:	5b                   	pop    %ebx
+     d99:	5e                   	pop    %esi
+     d9a:	5f                   	pop    %edi
+     d9b:	5d                   	pop    %ebp
+     d9c:	c3                   	ret    
+     d9d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000da0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     da0:	f3 0f 1e fb          	endbr32 
+     da4:	55                   	push   %ebp
+     da5:	89 e5                	mov    %esp,%ebp
+     da7:	56                   	push   %esi
+     da8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     da9:	83 ec 08             	sub    $0x8,%esp
+     dac:	6a 00                	push   $0x0
+     dae:	ff 75 08             	pushl  0x8(%ebp)
+     db1:	e8 ed 00 00 00       	call   ea3 <open>
+  if(fd < 0)
+     db6:	83 c4 10             	add    $0x10,%esp
+     db9:	85 c0                	test   %eax,%eax
+     dbb:	78 2b                	js     de8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+     dbd:	83 ec 08             	sub    $0x8,%esp
+     dc0:	ff 75 0c             	pushl  0xc(%ebp)
+     dc3:	89 c3                	mov    %eax,%ebx
+     dc5:	50                   	push   %eax
+     dc6:	e8 f0 00 00 00       	call   ebb <fstat>
+  close(fd);
+     dcb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     dce:	89 c6                	mov    %eax,%esi
+  close(fd);
+     dd0:	e8 b6 00 00 00       	call   e8b <close>
+  return r;
+     dd5:	83 c4 10             	add    $0x10,%esp
+}
+     dd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ddb:	89 f0                	mov    %esi,%eax
+     ddd:	5b                   	pop    %ebx
+     dde:	5e                   	pop    %esi
+     ddf:	5d                   	pop    %ebp
+     de0:	c3                   	ret    
+     de1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+     de8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     ded:	eb e9                	jmp    dd8 <stat+0x38>
+     def:	90                   	nop
+
+00000df0 <atoi>:
+
+int
+atoi(const char *s)
+{
+     df0:	f3 0f 1e fb          	endbr32 
+     df4:	55                   	push   %ebp
+     df5:	89 e5                	mov    %esp,%ebp
+     df7:	53                   	push   %ebx
+     df8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     dfb:	0f be 02             	movsbl (%edx),%eax
+     dfe:	8d 48 d0             	lea    -0x30(%eax),%ecx
+     e01:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+     e04:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+     e09:	77 1a                	ja     e25 <atoi+0x35>
+     e0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     e0f:	90                   	nop
+    n = n*10 + *s++ - '0';
+     e10:	83 c2 01             	add    $0x1,%edx
+     e13:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+     e16:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+     e1a:	0f be 02             	movsbl (%edx),%eax
+     e1d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+     e20:	80 fb 09             	cmp    $0x9,%bl
+     e23:	76 eb                	jbe    e10 <atoi+0x20>
+  return n;
+}
+     e25:	89 c8                	mov    %ecx,%eax
+     e27:	5b                   	pop    %ebx
+     e28:	5d                   	pop    %ebp
+     e29:	c3                   	ret    
+     e2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000e30 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     e30:	f3 0f 1e fb          	endbr32 
+     e34:	55                   	push   %ebp
+     e35:	89 e5                	mov    %esp,%ebp
+     e37:	57                   	push   %edi
+     e38:	8b 45 10             	mov    0x10(%ebp),%eax
+     e3b:	8b 55 08             	mov    0x8(%ebp),%edx
+     e3e:	56                   	push   %esi
+     e3f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     e42:	85 c0                	test   %eax,%eax
+     e44:	7e 0f                	jle    e55 <memmove+0x25>
+     e46:	01 d0                	add    %edx,%eax
+  dst = vdst;
+     e48:	89 d7                	mov    %edx,%edi
+     e4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+     e50:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+     e51:	39 f8                	cmp    %edi,%eax
+     e53:	75 fb                	jne    e50 <memmove+0x20>
+  return vdst;
+}
+     e55:	5e                   	pop    %esi
+     e56:	89 d0                	mov    %edx,%eax
+     e58:	5f                   	pop    %edi
+     e59:	5d                   	pop    %ebp
+     e5a:	c3                   	ret    
+
+00000e5b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     e5b:	b8 01 00 00 00       	mov    $0x1,%eax
+     e60:	cd 40                	int    $0x40
+     e62:	c3                   	ret    
+
+00000e63 <exit>:
+SYSCALL(exit)
+     e63:	b8 02 00 00 00       	mov    $0x2,%eax
+     e68:	cd 40                	int    $0x40
+     e6a:	c3                   	ret    
+
+00000e6b <wait>:
+SYSCALL(wait)
+     e6b:	b8 03 00 00 00       	mov    $0x3,%eax
+     e70:	cd 40                	int    $0x40
+     e72:	c3                   	ret    
+
+00000e73 <pipe>:
+SYSCALL(pipe)
+     e73:	b8 04 00 00 00       	mov    $0x4,%eax
+     e78:	cd 40                	int    $0x40
+     e7a:	c3                   	ret    
+
+00000e7b <read>:
+SYSCALL(read)
+     e7b:	b8 05 00 00 00       	mov    $0x5,%eax
+     e80:	cd 40                	int    $0x40
+     e82:	c3                   	ret    
+
+00000e83 <write>:
+SYSCALL(write)
+     e83:	b8 10 00 00 00       	mov    $0x10,%eax
+     e88:	cd 40                	int    $0x40
+     e8a:	c3                   	ret    
+
+00000e8b <close>:
+SYSCALL(close)
+     e8b:	b8 15 00 00 00       	mov    $0x15,%eax
+     e90:	cd 40                	int    $0x40
+     e92:	c3                   	ret    
+
+00000e93 <kill>:
+SYSCALL(kill)
+     e93:	b8 06 00 00 00       	mov    $0x6,%eax
+     e98:	cd 40                	int    $0x40
+     e9a:	c3                   	ret    
+
+00000e9b <exec>:
+SYSCALL(exec)
+     e9b:	b8 07 00 00 00       	mov    $0x7,%eax
+     ea0:	cd 40                	int    $0x40
+     ea2:	c3                   	ret    
+
+00000ea3 <open>:
+SYSCALL(open)
+     ea3:	b8 0f 00 00 00       	mov    $0xf,%eax
+     ea8:	cd 40                	int    $0x40
+     eaa:	c3                   	ret    
+
+00000eab <mknod>:
+SYSCALL(mknod)
+     eab:	b8 11 00 00 00       	mov    $0x11,%eax
+     eb0:	cd 40                	int    $0x40
+     eb2:	c3                   	ret    
+
+00000eb3 <unlink>:
+SYSCALL(unlink)
+     eb3:	b8 12 00 00 00       	mov    $0x12,%eax
+     eb8:	cd 40                	int    $0x40
+     eba:	c3                   	ret    
+
+00000ebb <fstat>:
+SYSCALL(fstat)
+     ebb:	b8 08 00 00 00       	mov    $0x8,%eax
+     ec0:	cd 40                	int    $0x40
+     ec2:	c3                   	ret    
+
+00000ec3 <link>:
+SYSCALL(link)
+     ec3:	b8 13 00 00 00       	mov    $0x13,%eax
+     ec8:	cd 40                	int    $0x40
+     eca:	c3                   	ret    
+
+00000ecb <mkdir>:
+SYSCALL(mkdir)
+     ecb:	b8 14 00 00 00       	mov    $0x14,%eax
+     ed0:	cd 40                	int    $0x40
+     ed2:	c3                   	ret    
+
+00000ed3 <chdir>:
+SYSCALL(chdir)
+     ed3:	b8 09 00 00 00       	mov    $0x9,%eax
+     ed8:	cd 40                	int    $0x40
+     eda:	c3                   	ret    
+
+00000edb <dup>:
+SYSCALL(dup)
+     edb:	b8 0a 00 00 00       	mov    $0xa,%eax
+     ee0:	cd 40                	int    $0x40
+     ee2:	c3                   	ret    
+
+00000ee3 <getpid>:
+SYSCALL(getpid)
+     ee3:	b8 0b 00 00 00       	mov    $0xb,%eax
+     ee8:	cd 40                	int    $0x40
+     eea:	c3                   	ret    
+
+00000eeb <sbrk>:
+SYSCALL(sbrk)
+     eeb:	b8 0c 00 00 00       	mov    $0xc,%eax
+     ef0:	cd 40                	int    $0x40
+     ef2:	c3                   	ret    
+
+00000ef3 <sleep>:
+SYSCALL(sleep)
+     ef3:	b8 0d 00 00 00       	mov    $0xd,%eax
+     ef8:	cd 40                	int    $0x40
+     efa:	c3                   	ret    
+
+00000efb <uptime>:
+SYSCALL(uptime)
+     efb:	b8 0e 00 00 00       	mov    $0xe,%eax
+     f00:	cd 40                	int    $0x40
+     f02:	c3                   	ret    
+
+00000f03 <draw>:
+SYSCALL(draw)
+     f03:	b8 16 00 00 00       	mov    $0x16,%eax
+     f08:	cd 40                	int    $0x40
+     f0a:	c3                   	ret    
+
+00000f0b <history>:
+SYSCALL(history)
+     f0b:	b8 17 00 00 00       	mov    $0x17,%eax
+     f10:	cd 40                	int    $0x40
+     f12:	c3                   	ret    
+
+00000f13 <wait2>:
+SYSCALL(wait2)
+     f13:	b8 18 00 00 00       	mov    $0x18,%eax
+     f18:	cd 40                	int    $0x40
+     f1a:	c3                   	ret    
+
+00000f1b <set_prio>:
+SYSCALL(set_prio)
+     f1b:	b8 19 00 00 00       	mov    $0x19,%eax
+     f20:	cd 40                	int    $0x40
+     f22:	c3                   	ret    
+
+00000f23 <yield2>:
+SYSCALL(yield2)
+     f23:	b8 1a 00 00 00       	mov    $0x1a,%eax
+     f28:	cd 40                	int    $0x40
+     f2a:	c3                   	ret    
+     f2b:	66 90                	xchg   %ax,%ax
+     f2d:	66 90                	xchg   %ax,%ax
+     f2f:	90                   	nop
+
+00000f30 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     f30:	55                   	push   %ebp
+     f31:	89 e5                	mov    %esp,%ebp
+     f33:	57                   	push   %edi
+     f34:	56                   	push   %esi
+     f35:	53                   	push   %ebx
+     f36:	83 ec 3c             	sub    $0x3c,%esp
+     f39:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+     f3c:	89 d1                	mov    %edx,%ecx
+{
+     f3e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+     f41:	85 d2                	test   %edx,%edx
+     f43:	0f 89 7f 00 00 00    	jns    fc8 <printint+0x98>
+     f49:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     f4d:	74 79                	je     fc8 <printint+0x98>
+    neg = 1;
+     f4f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+     f56:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     f58:	31 db                	xor    %ebx,%ebx
+     f5a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     f5d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     f60:	89 c8                	mov    %ecx,%eax
+     f62:	31 d2                	xor    %edx,%edx
+     f64:	89 cf                	mov    %ecx,%edi
+     f66:	f7 75 c4             	divl   -0x3c(%ebp)
+     f69:	0f b6 92 40 14 00 00 	movzbl 0x1440(%edx),%edx
+     f70:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     f73:	89 d8                	mov    %ebx,%eax
+     f75:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+     f78:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+     f7b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+     f7e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     f81:	76 dd                	jbe    f60 <printint+0x30>
+  if(neg)
+     f83:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     f86:	85 c9                	test   %ecx,%ecx
+     f88:	74 0c                	je     f96 <printint+0x66>
+    buf[i++] = '-';
+     f8a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+     f8f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+     f91:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+     f96:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     f99:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     f9d:	eb 07                	jmp    fa6 <printint+0x76>
+     f9f:	90                   	nop
+     fa0:	0f b6 13             	movzbl (%ebx),%edx
+     fa3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+     fa6:	83 ec 04             	sub    $0x4,%esp
+     fa9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     fac:	6a 01                	push   $0x1
+     fae:	56                   	push   %esi
+     faf:	57                   	push   %edi
+     fb0:	e8 ce fe ff ff       	call   e83 <write>
+  while(--i >= 0)
+     fb5:	83 c4 10             	add    $0x10,%esp
+     fb8:	39 de                	cmp    %ebx,%esi
+     fba:	75 e4                	jne    fa0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+     fbc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fbf:	5b                   	pop    %ebx
+     fc0:	5e                   	pop    %esi
+     fc1:	5f                   	pop    %edi
+     fc2:	5d                   	pop    %ebp
+     fc3:	c3                   	ret    
+     fc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     fc8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     fcf:	eb 87                	jmp    f58 <printint+0x28>
+     fd1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fd8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fdf:	90                   	nop
+
+00000fe0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     fe0:	f3 0f 1e fb          	endbr32 
+     fe4:	55                   	push   %ebp
+     fe5:	89 e5                	mov    %esp,%ebp
+     fe7:	57                   	push   %edi
+     fe8:	56                   	push   %esi
+     fe9:	53                   	push   %ebx
+     fea:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     fed:	8b 75 0c             	mov    0xc(%ebp),%esi
+     ff0:	0f b6 1e             	movzbl (%esi),%ebx
+     ff3:	84 db                	test   %bl,%bl
+     ff5:	0f 84 b4 00 00 00    	je     10af <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+     ffb:	8d 45 10             	lea    0x10(%ebp),%eax
+     ffe:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+    1001:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    1004:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+    1006:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1009:	eb 33                	jmp    103e <printf+0x5e>
+    100b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    100f:	90                   	nop
+    1010:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    1013:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+    1018:	83 f8 25             	cmp    $0x25,%eax
+    101b:	74 17                	je     1034 <printf+0x54>
+  write(fd, &c, 1);
+    101d:	83 ec 04             	sub    $0x4,%esp
+    1020:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    1023:	6a 01                	push   $0x1
+    1025:	57                   	push   %edi
+    1026:	ff 75 08             	pushl  0x8(%ebp)
+    1029:	e8 55 fe ff ff       	call   e83 <write>
+    102e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+    1031:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    1034:	0f b6 1e             	movzbl (%esi),%ebx
+    1037:	83 c6 01             	add    $0x1,%esi
+    103a:	84 db                	test   %bl,%bl
+    103c:	74 71                	je     10af <printf+0xcf>
+    c = fmt[i] & 0xff;
+    103e:	0f be cb             	movsbl %bl,%ecx
+    1041:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    1044:	85 d2                	test   %edx,%edx
+    1046:	74 c8                	je     1010 <printf+0x30>
+      }
+    } else if(state == '%'){
+    1048:	83 fa 25             	cmp    $0x25,%edx
+    104b:	75 e7                	jne    1034 <printf+0x54>
+      if(c == 'd'){
+    104d:	83 f8 64             	cmp    $0x64,%eax
+    1050:	0f 84 9a 00 00 00    	je     10f0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    1056:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    105c:	83 f9 70             	cmp    $0x70,%ecx
+    105f:	74 5f                	je     10c0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    1061:	83 f8 73             	cmp    $0x73,%eax
+    1064:	0f 84 d6 00 00 00    	je     1140 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    106a:	83 f8 63             	cmp    $0x63,%eax
+    106d:	0f 84 8d 00 00 00    	je     1100 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    1073:	83 f8 25             	cmp    $0x25,%eax
+    1076:	0f 84 b4 00 00 00    	je     1130 <printf+0x150>
+  write(fd, &c, 1);
+    107c:	83 ec 04             	sub    $0x4,%esp
+    107f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    1083:	6a 01                	push   $0x1
+    1085:	57                   	push   %edi
+    1086:	ff 75 08             	pushl  0x8(%ebp)
+    1089:	e8 f5 fd ff ff       	call   e83 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+    108e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    1091:	83 c4 0c             	add    $0xc,%esp
+    1094:	6a 01                	push   $0x1
+    1096:	83 c6 01             	add    $0x1,%esi
+    1099:	57                   	push   %edi
+    109a:	ff 75 08             	pushl  0x8(%ebp)
+    109d:	e8 e1 fd ff ff       	call   e83 <write>
+  for(i = 0; fmt[i]; i++){
+    10a2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+    10a6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    10a9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+    10ab:	84 db                	test   %bl,%bl
+    10ad:	75 8f                	jne    103e <printf+0x5e>
+    }
+  }
+}
+    10af:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    10b2:	5b                   	pop    %ebx
+    10b3:	5e                   	pop    %esi
+    10b4:	5f                   	pop    %edi
+    10b5:	5d                   	pop    %ebp
+    10b6:	c3                   	ret    
+    10b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10be:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+    10c0:	83 ec 0c             	sub    $0xc,%esp
+    10c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    10c8:	6a 00                	push   $0x0
+    10ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    10cd:	8b 45 08             	mov    0x8(%ebp),%eax
+    10d0:	8b 13                	mov    (%ebx),%edx
+    10d2:	e8 59 fe ff ff       	call   f30 <printint>
+        ap++;
+    10d7:	89 d8                	mov    %ebx,%eax
+    10d9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    10dc:	31 d2                	xor    %edx,%edx
+        ap++;
+    10de:	83 c0 04             	add    $0x4,%eax
+    10e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    10e4:	e9 4b ff ff ff       	jmp    1034 <printf+0x54>
+    10e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    10f0:	83 ec 0c             	sub    $0xc,%esp
+    10f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    10f8:	6a 01                	push   $0x1
+    10fa:	eb ce                	jmp    10ca <printf+0xea>
+    10fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    1100:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    1103:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    1106:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    1108:	6a 01                	push   $0x1
+        ap++;
+    110a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    110d:	57                   	push   %edi
+    110e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    1111:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1114:	e8 6a fd ff ff       	call   e83 <write>
+        ap++;
+    1119:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    111c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    111f:	31 d2                	xor    %edx,%edx
+    1121:	e9 0e ff ff ff       	jmp    1034 <printf+0x54>
+    1126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    112d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    1130:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    1133:	83 ec 04             	sub    $0x4,%esp
+    1136:	e9 59 ff ff ff       	jmp    1094 <printf+0xb4>
+    113b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    113f:	90                   	nop
+        s = (char*)*ap;
+    1140:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1143:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    1145:	83 c0 04             	add    $0x4,%eax
+    1148:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    114b:	85 db                	test   %ebx,%ebx
+    114d:	74 17                	je     1166 <printf+0x186>
+        while(*s != 0){
+    114f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    1152:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    1154:	84 c0                	test   %al,%al
+    1156:	0f 84 d8 fe ff ff    	je     1034 <printf+0x54>
+    115c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    115f:	89 de                	mov    %ebx,%esi
+    1161:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1164:	eb 1a                	jmp    1180 <printf+0x1a0>
+          s = "(null)";
+    1166:	bb 38 14 00 00       	mov    $0x1438,%ebx
+        while(*s != 0){
+    116b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    116e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1173:	89 de                	mov    %ebx,%esi
+    1175:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1178:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    117f:	90                   	nop
+  write(fd, &c, 1);
+    1180:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    1183:	83 c6 01             	add    $0x1,%esi
+    1186:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1189:	6a 01                	push   $0x1
+    118b:	57                   	push   %edi
+    118c:	53                   	push   %ebx
+    118d:	e8 f1 fc ff ff       	call   e83 <write>
+        while(*s != 0){
+    1192:	0f b6 06             	movzbl (%esi),%eax
+    1195:	83 c4 10             	add    $0x10,%esp
+    1198:	84 c0                	test   %al,%al
+    119a:	75 e4                	jne    1180 <printf+0x1a0>
+    119c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    119f:	31 d2                	xor    %edx,%edx
+    11a1:	e9 8e fe ff ff       	jmp    1034 <printf+0x54>
+    11a6:	66 90                	xchg   %ax,%ax
+    11a8:	66 90                	xchg   %ax,%ax
+    11aa:	66 90                	xchg   %ax,%ax
+    11ac:	66 90                	xchg   %ax,%ax
+    11ae:	66 90                	xchg   %ax,%ax
+
+000011b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    11b0:	f3 0f 1e fb          	endbr32 
+    11b4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11b5:	a1 c4 1a 00 00       	mov    0x1ac4,%eax
+{
+    11ba:	89 e5                	mov    %esp,%ebp
+    11bc:	57                   	push   %edi
+    11bd:	56                   	push   %esi
+    11be:	53                   	push   %ebx
+    11bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    11c2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    11c4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11c7:	39 c8                	cmp    %ecx,%eax
+    11c9:	73 15                	jae    11e0 <free+0x30>
+    11cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    11cf:	90                   	nop
+    11d0:	39 d1                	cmp    %edx,%ecx
+    11d2:	72 14                	jb     11e8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    11d4:	39 d0                	cmp    %edx,%eax
+    11d6:	73 10                	jae    11e8 <free+0x38>
+{
+    11d8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11da:	8b 10                	mov    (%eax),%edx
+    11dc:	39 c8                	cmp    %ecx,%eax
+    11de:	72 f0                	jb     11d0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    11e0:	39 d0                	cmp    %edx,%eax
+    11e2:	72 f4                	jb     11d8 <free+0x28>
+    11e4:	39 d1                	cmp    %edx,%ecx
+    11e6:	73 f0                	jae    11d8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    11e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    11eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    11ee:	39 fa                	cmp    %edi,%edx
+    11f0:	74 1e                	je     1210 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    11f2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    11f5:	8b 50 04             	mov    0x4(%eax),%edx
+    11f8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    11fb:	39 f1                	cmp    %esi,%ecx
+    11fd:	74 28                	je     1227 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    11ff:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    1201:	5b                   	pop    %ebx
+  freep = p;
+    1202:	a3 c4 1a 00 00       	mov    %eax,0x1ac4
+}
+    1207:	5e                   	pop    %esi
+    1208:	5f                   	pop    %edi
+    1209:	5d                   	pop    %ebp
+    120a:	c3                   	ret    
+    120b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    120f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    1210:	03 72 04             	add    0x4(%edx),%esi
+    1213:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1216:	8b 10                	mov    (%eax),%edx
+    1218:	8b 12                	mov    (%edx),%edx
+    121a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    121d:	8b 50 04             	mov    0x4(%eax),%edx
+    1220:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1223:	39 f1                	cmp    %esi,%ecx
+    1225:	75 d8                	jne    11ff <free+0x4f>
+    p->s.size += bp->s.size;
+    1227:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    122a:	a3 c4 1a 00 00       	mov    %eax,0x1ac4
+    p->s.size += bp->s.size;
+    122f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    1232:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    1235:	89 10                	mov    %edx,(%eax)
+}
+    1237:	5b                   	pop    %ebx
+    1238:	5e                   	pop    %esi
+    1239:	5f                   	pop    %edi
+    123a:	5d                   	pop    %ebp
+    123b:	c3                   	ret    
+    123c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001240 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    1240:	f3 0f 1e fb          	endbr32 
+    1244:	55                   	push   %ebp
+    1245:	89 e5                	mov    %esp,%ebp
+    1247:	57                   	push   %edi
+    1248:	56                   	push   %esi
+    1249:	53                   	push   %ebx
+    124a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    124d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    1250:	8b 3d c4 1a 00 00    	mov    0x1ac4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1256:	8d 70 07             	lea    0x7(%eax),%esi
+    1259:	c1 ee 03             	shr    $0x3,%esi
+    125c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    125f:	85 ff                	test   %edi,%edi
+    1261:	0f 84 a9 00 00 00    	je     1310 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1267:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    1269:	8b 48 04             	mov    0x4(%eax),%ecx
+    126c:	39 f1                	cmp    %esi,%ecx
+    126e:	73 6d                	jae    12dd <malloc+0x9d>
+    1270:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    1276:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    127b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    127e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    1285:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    1288:	eb 17                	jmp    12a1 <malloc+0x61>
+    128a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1290:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    1292:	8b 4a 04             	mov    0x4(%edx),%ecx
+    1295:	39 f1                	cmp    %esi,%ecx
+    1297:	73 4f                	jae    12e8 <malloc+0xa8>
+    1299:	8b 3d c4 1a 00 00    	mov    0x1ac4,%edi
+    129f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    12a1:	39 c7                	cmp    %eax,%edi
+    12a3:	75 eb                	jne    1290 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    12a5:	83 ec 0c             	sub    $0xc,%esp
+    12a8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    12ab:	e8 3b fc ff ff       	call   eeb <sbrk>
+  if(p == (char*)-1)
+    12b0:	83 c4 10             	add    $0x10,%esp
+    12b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    12b6:	74 1b                	je     12d3 <malloc+0x93>
+  hp->s.size = nu;
+    12b8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    12bb:	83 ec 0c             	sub    $0xc,%esp
+    12be:	83 c0 08             	add    $0x8,%eax
+    12c1:	50                   	push   %eax
+    12c2:	e8 e9 fe ff ff       	call   11b0 <free>
+  return freep;
+    12c7:	a1 c4 1a 00 00       	mov    0x1ac4,%eax
+      if((p = morecore(nunits)) == 0)
+    12cc:	83 c4 10             	add    $0x10,%esp
+    12cf:	85 c0                	test   %eax,%eax
+    12d1:	75 bd                	jne    1290 <malloc+0x50>
+        return 0;
+  }
+}
+    12d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    12d6:	31 c0                	xor    %eax,%eax
+}
+    12d8:	5b                   	pop    %ebx
+    12d9:	5e                   	pop    %esi
+    12da:	5f                   	pop    %edi
+    12db:	5d                   	pop    %ebp
+    12dc:	c3                   	ret    
+    if(p->s.size >= nunits){
+    12dd:	89 c2                	mov    %eax,%edx
+    12df:	89 f8                	mov    %edi,%eax
+    12e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    12e8:	39 ce                	cmp    %ecx,%esi
+    12ea:	74 54                	je     1340 <malloc+0x100>
+        p->s.size -= nunits;
+    12ec:	29 f1                	sub    %esi,%ecx
+    12ee:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    12f1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    12f4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    12f7:	a3 c4 1a 00 00       	mov    %eax,0x1ac4
+}
+    12fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    12ff:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    1302:	5b                   	pop    %ebx
+    1303:	5e                   	pop    %esi
+    1304:	5f                   	pop    %edi
+    1305:	5d                   	pop    %ebp
+    1306:	c3                   	ret    
+    1307:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    130e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    1310:	c7 05 c4 1a 00 00 c8 	movl   $0x1ac8,0x1ac4
+    1317:	1a 00 00 
+    base.s.size = 0;
+    131a:	bf c8 1a 00 00       	mov    $0x1ac8,%edi
+    base.s.ptr = freep = prevp = &base;
+    131f:	c7 05 c8 1a 00 00 c8 	movl   $0x1ac8,0x1ac8
+    1326:	1a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1329:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    132b:	c7 05 cc 1a 00 00 00 	movl   $0x0,0x1acc
+    1332:	00 00 00 
+    if(p->s.size >= nunits){
+    1335:	e9 36 ff ff ff       	jmp    1270 <malloc+0x30>
+    133a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    1340:	8b 0a                	mov    (%edx),%ecx
+    1342:	89 08                	mov    %ecx,(%eax)
+    1344:	eb b1                	jmp    12f7 <malloc+0xb7>
diff -ruN xv6-public/sh.c xv6-public_mine/sh.c
--- xv6-public/sh.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/sh.c	2021-09-14 22:19:36.000000000 +0530
@@ -140,6 +140,19 @@
     return -1;
   return 0;
 }
+char getHistoryCommand[INPUT_BUF];
+
+void printHistory(){
+  uint i ;
+  uint count = 0;
+  for(i= 0; i <MAX_HISTORY; i++){
+    if(history(getHistoryCommand, i) == 0){
+      count++;
+      printf(1, "%d: %s\n", count, getHistoryCommand);
+    }
+  }
+  return;
+}
 
 int
 main(void)
@@ -164,6 +177,10 @@
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's'  && buf[3] == 't' && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y' && buf[7] == '\n'){
+      printHistory();
+      continue;
+    }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
     wait();
diff -ruN xv6-public/sh.d xv6-public_mine/sh.d
--- xv6-public/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sh.d	2021-09-30 23:42:26.469447775 +0530
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files xv6-public/sh.o and xv6-public_mine/sh.o differ
diff -ruN xv6-public/sh.sym xv6-public_mine/sh.sym
--- xv6-public/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sh.sym	2021-09-30 23:42:26.665505664 +0530
@@ -0,0 +1,86 @@
+00000000 .text
+00001348 .rodata
+00001454 .eh_frame
+00001a3c .data
+00001a60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+00001a60 buf.1147
+00000000 ulib.c
+00000000 printf.c
+00000f30 printint
+00001440 digits.1101
+00000000 umalloc.c
+00001ac4 freep
+00001ac8 base
+00000c00 strcpy
+00000f1b set_prio
+00000fe0 printf
+00000e30 memmove
+00000eab mknod
+00000440 execcmd
+00000d20 gets
+00000ee3 getpid
+00000920 parsepipe
+00000b90 parsecmd
+00000540 backcmd
+000006e0 peek
+00000760 parseredirs
+00000580 gettoken
+00001240 malloc
+00000ef3 sleep
+00001a44 whitespace
+00000f13 wait2
+00000410 fork1
+000001d0 printHistory
+00000ad0 nulterminate
+00000e73 pipe
+00001ae0 getHistoryCommand
+00000180 getcmd
+00000e83 write
+00000f0b history
+00000ebb fstat
+00000e93 kill
+00000ed3 chdir
+00000990 parseline
+00000250 runcmd
+00000a40 parseblock
+00000e9b exec
+00000e6b wait
+00001a3c symbols
+00000e7b read
+00000810 parseexec
+00000eb3 unlink
+00000230 panic
+00000e5b fork
+00000eeb sbrk
+00000efb uptime
+00001a4a __bss_start
+00000cc0 memset
+00000000 main
+00000c30 strcmp
+00000edb dup
+000004c0 pipecmd
+00000470 redircmd
+00000da0 stat
+00001a4a _edata
+00001b60 _end
+00000ec3 link
+00000e63 exit
+00000df0 atoi
+00000f23 yield2
+00000f03 draw
+00000c80 strlen
+00000ea3 open
+00000ce0 strchr
+00000ecb mkdir
+00000e8b close
+00000500 listcmd
+000011b0 free
diff -ruN xv6-public/sleeplock.d xv6-public_mine/sleeplock.d
--- xv6-public/sleeplock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sleeplock.d	2021-09-30 23:41:56.061661275 +0530
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files xv6-public/sleeplock.o and xv6-public_mine/sleeplock.o differ
Binary files xv6-public/_SMLsanity and xv6-public_mine/_SMLsanity differ
diff -ruN xv6-public/SMLsanity.asm xv6-public_mine/SMLsanity.asm
--- xv6-public/SMLsanity.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/SMLsanity.asm	2021-09-30 23:42:34.387627591 +0530
@@ -0,0 +1,1196 @@
+
+_SMLsanity:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]) {
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 0c             	sub    $0xc,%esp
+	break;
+    }
+  } 
+  
+  #else
+  printf(1, "Works only for SML\n");
+  15:	68 78 07 00 00       	push   $0x778
+  1a:	6a 01                	push   $0x1
+  1c:	e8 ef 03 00 00       	call   410 <printf>
+  #endif
+  exit();
+  21:	e8 6d 02 00 00       	call   293 <exit>
+  26:	66 90                	xchg   %ax,%ax
+  28:	66 90                	xchg   %ax,%ax
+  2a:	66 90                	xchg   %ax,%ax
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	f3 0f 1e fb          	endbr32 
+  34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  35:	31 c0                	xor    %eax,%eax
+{
+  37:	89 e5                	mov    %esp,%ebp
+  39:	53                   	push   %ebx
+  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	89 c8                	mov    %ecx,%eax
+  50:	5b                   	pop    %ebx
+  51:	5d                   	pop    %ebp
+  52:	c3                   	ret    
+  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	53                   	push   %ebx
+  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  6e:	0f b6 01             	movzbl (%ecx),%eax
+  71:	0f b6 1a             	movzbl (%edx),%ebx
+  74:	84 c0                	test   %al,%al
+  76:	75 19                	jne    91 <strcmp+0x31>
+  78:	eb 26                	jmp    a0 <strcmp+0x40>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  84:	83 c1 01             	add    $0x1,%ecx
+  87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  8a:	0f b6 1a             	movzbl (%edx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	38 d8                	cmp    %bl,%al
+  93:	74 eb                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  95:	29 d8                	sub    %ebx,%eax
+}
+  97:	5b                   	pop    %ebx
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ba:	80 3a 00             	cmpb   $0x0,(%edx)
+  bd:	74 21                	je     e0 <strlen+0x30>
+  bf:	31 c0                	xor    %eax,%eax
+  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c8:	83 c0 01             	add    $0x1,%eax
+  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  cf:	89 c1                	mov    %eax,%ecx
+  d1:	75 f5                	jne    c8 <strlen+0x18>
+    ;
+  return n;
+}
+  d3:	89 c8                	mov    %ecx,%eax
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	57                   	push   %edi
+  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 101:	89 d7                	mov    %edx,%edi
+ 103:	fc                   	cld    
+ 104:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 106:	89 d0                	mov    %edx,%eax
+ 108:	5f                   	pop    %edi
+ 109:	5d                   	pop    %ebp
+ 10a:	c3                   	ret    
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11e:	0f b6 10             	movzbl (%eax),%edx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	75 16                	jne    13b <strchr+0x2b>
+ 125:	eb 21                	jmp    148 <strchr+0x38>
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+ 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 134:	83 c0 01             	add    $0x1,%eax
+ 137:	84 d2                	test   %dl,%dl
+ 139:	74 0d                	je     148 <strchr+0x38>
+    if(*s == c)
+ 13b:	38 d1                	cmp    %dl,%cl
+ 13d:	75 f1                	jne    130 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 13f:	5d                   	pop    %ebp
+ 140:	c3                   	ret    
+ 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 148:	31 c0                	xor    %eax,%eax
+}
+ 14a:	5d                   	pop    %ebp
+ 14b:	c3                   	ret    
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 159:	31 f6                	xor    %esi,%esi
+{
+ 15b:	53                   	push   %ebx
+ 15c:	89 f3                	mov    %esi,%ebx
+ 15e:	83 ec 1c             	sub    $0x1c,%esp
+ 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 164:	eb 33                	jmp    199 <gets+0x49>
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 176:	6a 01                	push   $0x1
+ 178:	50                   	push   %eax
+ 179:	6a 00                	push   $0x0
+ 17b:	e8 2b 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 180:	83 c4 10             	add    $0x10,%esp
+ 183:	85 c0                	test   %eax,%eax
+ 185:	7e 1c                	jle    1a3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 18b:	83 c7 01             	add    $0x1,%edi
+ 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 191:	3c 0a                	cmp    $0xa,%al
+ 193:	74 23                	je     1b8 <gets+0x68>
+ 195:	3c 0d                	cmp    $0xd,%al
+ 197:	74 1f                	je     1b8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	89 fe                	mov    %edi,%esi
+ 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a1:	7c cd                	jl     170 <gets+0x20>
+ 1a3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1a8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ae:	5b                   	pop    %ebx
+ 1af:	5e                   	pop    %esi
+ 1b0:	5f                   	pop    %edi
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+ 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1be:	01 de                	add    %ebx,%esi
+ 1c0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1c2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c8:	5b                   	pop    %ebx
+ 1c9:	5e                   	pop    %esi
+ 1ca:	5f                   	pop    %edi
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	56                   	push   %esi
+ 1d8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	6a 00                	push   $0x0
+ 1de:	ff 75 08             	pushl  0x8(%ebp)
+ 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e6:	83 c4 10             	add    $0x10,%esp
+ 1e9:	85 c0                	test   %eax,%eax
+ 1eb:	78 2b                	js     218 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 1ed:	83 ec 08             	sub    $0x8,%esp
+ 1f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 1f3:	89 c3                	mov    %eax,%ebx
+ 1f5:	50                   	push   %eax
+ 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1fb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fe:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 200:	e8 b6 00 00 00       	call   2bb <close>
+  return r;
+ 205:	83 c4 10             	add    $0x10,%esp
+}
+ 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20b:	89 f0                	mov    %esi,%eax
+ 20d:	5b                   	pop    %ebx
+ 20e:	5e                   	pop    %esi
+ 20f:	5d                   	pop    %ebp
+ 210:	c3                   	ret    
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 21d:	eb e9                	jmp    208 <stat+0x38>
+ 21f:	90                   	nop
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	53                   	push   %ebx
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22b:	0f be 02             	movsbl (%edx),%eax
+ 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 231:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 239:	77 1a                	ja     255 <atoi+0x35>
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	89 c8                	mov    %ecx,%eax
+ 257:	5b                   	pop    %ebx
+ 258:	5d                   	pop    %ebp
+ 259:	c3                   	ret    
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26e:	56                   	push   %esi
+ 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7e 0f                	jle    285 <memmove+0x25>
+ 276:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 278:	89 d7                	mov    %edx,%edi
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <draw>:
+SYSCALL(draw)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <history>:
+SYSCALL(history)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <wait2>:
+SYSCALL(wait2)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <set_prio>:
+SYSCALL(set_prio)
+ 34b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <yield2>:
+SYSCALL(yield2)
+ 353:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
+ 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 36c:	89 d1                	mov    %edx,%ecx
+{
+ 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 371:	85 d2                	test   %edx,%edx
+ 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
+ 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37d:	74 79                	je     3f8 <printint+0x98>
+    neg = 1;
+ 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 386:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 388:	31 db                	xor    %ebx,%ebx
+ 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 390:	89 c8                	mov    %ecx,%eax
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	89 cf                	mov    %ecx,%edi
+ 396:	f7 75 c4             	divl   -0x3c(%ebp)
+ 399:	0f b6 92 94 07 00 00 	movzbl 0x794(%edx),%edx
+ 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3a3:	89 d8                	mov    %ebx,%eax
+ 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3b1:	76 dd                	jbe    390 <printint+0x30>
+  if(neg)
+ 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3b6:	85 c9                	test   %ecx,%ecx
+ 3b8:	74 0c                	je     3c6 <printint+0x66>
+    buf[i++] = '-';
+ 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3cd:	eb 07                	jmp    3d6 <printint+0x76>
+ 3cf:	90                   	nop
+ 3d0:	0f b6 13             	movzbl (%ebx),%edx
+ 3d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3d6:	83 ec 04             	sub    $0x4,%esp
+ 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3dc:	6a 01                	push   $0x1
+ 3de:	56                   	push   %esi
+ 3df:	57                   	push   %edi
+ 3e0:	e8 ce fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ff:	eb 87                	jmp    388 <printint+0x28>
+ 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	f3 0f 1e fb          	endbr32 
+ 414:	55                   	push   %ebp
+ 415:	89 e5                	mov    %esp,%ebp
+ 417:	57                   	push   %edi
+ 418:	56                   	push   %esi
+ 419:	53                   	push   %ebx
+ 41a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 41d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 420:	0f b6 1e             	movzbl (%esi),%ebx
+ 423:	84 db                	test   %bl,%bl
+ 425:	0f 84 b4 00 00 00    	je     4df <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 42b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 42e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 431:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 434:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 436:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 439:	eb 33                	jmp    46e <printf+0x5e>
+ 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+ 440:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 443:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	74 17                	je     464 <printf+0x54>
+  write(fd, &c, 1);
+ 44d:	83 ec 04             	sub    $0x4,%esp
+ 450:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 453:	6a 01                	push   $0x1
+ 455:	57                   	push   %edi
+ 456:	ff 75 08             	pushl  0x8(%ebp)
+ 459:	e8 55 fe ff ff       	call   2b3 <write>
+ 45e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 461:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 464:	0f b6 1e             	movzbl (%esi),%ebx
+ 467:	83 c6 01             	add    $0x1,%esi
+ 46a:	84 db                	test   %bl,%bl
+ 46c:	74 71                	je     4df <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 46e:	0f be cb             	movsbl %bl,%ecx
+ 471:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 474:	85 d2                	test   %edx,%edx
+ 476:	74 c8                	je     440 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 478:	83 fa 25             	cmp    $0x25,%edx
+ 47b:	75 e7                	jne    464 <printf+0x54>
+      if(c == 'd'){
+ 47d:	83 f8 64             	cmp    $0x64,%eax
+ 480:	0f 84 9a 00 00 00    	je     520 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 486:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 48c:	83 f9 70             	cmp    $0x70,%ecx
+ 48f:	74 5f                	je     4f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 491:	83 f8 73             	cmp    $0x73,%eax
+ 494:	0f 84 d6 00 00 00    	je     570 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 49a:	83 f8 63             	cmp    $0x63,%eax
+ 49d:	0f 84 8d 00 00 00    	je     530 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4a3:	83 f8 25             	cmp    $0x25,%eax
+ 4a6:	0f 84 b4 00 00 00    	je     560 <printf+0x150>
+  write(fd, &c, 1);
+ 4ac:	83 ec 04             	sub    $0x4,%esp
+ 4af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 f5 fd ff ff       	call   2b3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4be:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4c1:	83 c4 0c             	add    $0xc,%esp
+ 4c4:	6a 01                	push   $0x1
+ 4c6:	83 c6 01             	add    $0x1,%esi
+ 4c9:	57                   	push   %edi
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 e1 fd ff ff       	call   2b3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4d6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4d9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4db:	84 db                	test   %bl,%bl
+ 4dd:	75 8f                	jne    46e <printf+0x5e>
+    }
+  }
+}
+ 4df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4e2:	5b                   	pop    %ebx
+ 4e3:	5e                   	pop    %esi
+ 4e4:	5f                   	pop    %edi
+ 4e5:	5d                   	pop    %ebp
+ 4e6:	c3                   	ret    
+ 4e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 500:	8b 13                	mov    (%ebx),%edx
+ 502:	e8 59 fe ff ff       	call   360 <printint>
+        ap++;
+ 507:	89 d8                	mov    %ebx,%eax
+ 509:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 50e:	83 c0 04             	add    $0x4,%eax
+ 511:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 514:	e9 4b ff ff ff       	jmp    464 <printf+0x54>
+ 519:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 528:	6a 01                	push   $0x1
+ 52a:	eb ce                	jmp    4fa <printf+0xea>
+ 52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 530:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 533:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 536:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 538:	6a 01                	push   $0x1
+        ap++;
+ 53a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 53d:	57                   	push   %edi
+ 53e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 541:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 544:	e8 6a fd ff ff       	call   2b3 <write>
+        ap++;
+ 549:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 54c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54f:	31 d2                	xor    %edx,%edx
+ 551:	e9 0e ff ff ff       	jmp    464 <printf+0x54>
+ 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 560:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+ 566:	e9 59 ff ff ff       	jmp    4c4 <printf+0xb4>
+ 56b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+        s = (char*)*ap;
+ 570:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 573:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 575:	83 c0 04             	add    $0x4,%eax
+ 578:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 57b:	85 db                	test   %ebx,%ebx
+ 57d:	74 17                	je     596 <printf+0x186>
+        while(*s != 0){
+ 57f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 582:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 584:	84 c0                	test   %al,%al
+ 586:	0f 84 d8 fe ff ff    	je     464 <printf+0x54>
+ 58c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 58f:	89 de                	mov    %ebx,%esi
+ 591:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 594:	eb 1a                	jmp    5b0 <printf+0x1a0>
+          s = "(null)";
+ 596:	bb 8c 07 00 00       	mov    $0x78c,%ebx
+        while(*s != 0){
+ 59b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5a3:	89 de                	mov    %ebx,%esi
+ 5a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5b3:	83 c6 01             	add    $0x1,%esi
+ 5b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	57                   	push   %edi
+ 5bc:	53                   	push   %ebx
+ 5bd:	e8 f1 fc ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 5c2:	0f b6 06             	movzbl (%esi),%eax
+ 5c5:	83 c4 10             	add    $0x10,%esp
+ 5c8:	84 c0                	test   %al,%al
+ 5ca:	75 e4                	jne    5b0 <printf+0x1a0>
+ 5cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5cf:	31 d2                	xor    %edx,%edx
+ 5d1:	e9 8e fe ff ff       	jmp    464 <printf+0x54>
+ 5d6:	66 90                	xchg   %ax,%ax
+ 5d8:	66 90                	xchg   %ax,%ax
+ 5da:	66 90                	xchg   %ax,%ax
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e0:	f3 0f 1e fb          	endbr32 
+ 5e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e5:	a1 3c 0a 00 00       	mov    0xa3c,%eax
+{
+ 5ea:	89 e5                	mov    %esp,%ebp
+ 5ec:	57                   	push   %edi
+ 5ed:	56                   	push   %esi
+ 5ee:	53                   	push   %ebx
+ 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 5f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f7:	39 c8                	cmp    %ecx,%eax
+ 5f9:	73 15                	jae    610 <free+0x30>
+ 5fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+ 600:	39 d1                	cmp    %edx,%ecx
+ 602:	72 14                	jb     618 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 604:	39 d0                	cmp    %edx,%eax
+ 606:	73 10                	jae    618 <free+0x38>
+{
+ 608:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 60a:	8b 10                	mov    (%eax),%edx
+ 60c:	39 c8                	cmp    %ecx,%eax
+ 60e:	72 f0                	jb     600 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	39 d0                	cmp    %edx,%eax
+ 612:	72 f4                	jb     608 <free+0x28>
+ 614:	39 d1                	cmp    %edx,%ecx
+ 616:	73 f0                	jae    608 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 fa                	cmp    %edi,%edx
+ 620:	74 1e                	je     640 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 622:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 625:	8b 50 04             	mov    0x4(%eax),%edx
+ 628:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 28                	je     657 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 62f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 631:	5b                   	pop    %ebx
+  freep = p;
+ 632:	a3 3c 0a 00 00       	mov    %eax,0xa3c
+}
+ 637:	5e                   	pop    %esi
+ 638:	5f                   	pop    %edi
+ 639:	5d                   	pop    %ebp
+ 63a:	c3                   	ret    
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 640:	03 72 04             	add    0x4(%edx),%esi
+ 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 646:	8b 10                	mov    (%eax),%edx
+ 648:	8b 12                	mov    (%edx),%edx
+ 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 64d:	8b 50 04             	mov    0x4(%eax),%edx
+ 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 653:	39 f1                	cmp    %esi,%ecx
+ 655:	75 d8                	jne    62f <free+0x4f>
+    p->s.size += bp->s.size;
+ 657:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 65a:	a3 3c 0a 00 00       	mov    %eax,0xa3c
+    p->s.size += bp->s.size;
+ 65f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 665:	89 10                	mov    %edx,(%eax)
+}
+ 667:	5b                   	pop    %ebx
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000670 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 670:	f3 0f 1e fb          	endbr32 
+ 674:	55                   	push   %ebp
+ 675:	89 e5                	mov    %esp,%ebp
+ 677:	57                   	push   %edi
+ 678:	56                   	push   %esi
+ 679:	53                   	push   %ebx
+ 67a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 67d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 680:	8b 3d 3c 0a 00 00    	mov    0xa3c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 686:	8d 70 07             	lea    0x7(%eax),%esi
+ 689:	c1 ee 03             	shr    $0x3,%esi
+ 68c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 68f:	85 ff                	test   %edi,%edi
+ 691:	0f 84 a9 00 00 00    	je     740 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 697:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 699:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69c:	39 f1                	cmp    %esi,%ecx
+ 69e:	73 6d                	jae    70d <malloc+0x9d>
+ 6a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6b8:	eb 17                	jmp    6d1 <malloc+0x61>
+ 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6c5:	39 f1                	cmp    %esi,%ecx
+ 6c7:	73 4f                	jae    718 <malloc+0xa8>
+ 6c9:	8b 3d 3c 0a 00 00    	mov    0xa3c,%edi
+ 6cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	39 c7                	cmp    %eax,%edi
+ 6d3:	75 eb                	jne    6c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6d5:	83 ec 0c             	sub    $0xc,%esp
+ 6d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6db:	e8 3b fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6e0:	83 c4 10             	add    $0x10,%esp
+ 6e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6e6:	74 1b                	je     703 <malloc+0x93>
+  hp->s.size = nu;
+ 6e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6eb:	83 ec 0c             	sub    $0xc,%esp
+ 6ee:	83 c0 08             	add    $0x8,%eax
+ 6f1:	50                   	push   %eax
+ 6f2:	e8 e9 fe ff ff       	call   5e0 <free>
+  return freep;
+ 6f7:	a1 3c 0a 00 00       	mov    0xa3c,%eax
+      if((p = morecore(nunits)) == 0)
+ 6fc:	83 c4 10             	add    $0x10,%esp
+ 6ff:	85 c0                	test   %eax,%eax
+ 701:	75 bd                	jne    6c0 <malloc+0x50>
+        return 0;
+  }
+}
+ 703:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 706:	31 c0                	xor    %eax,%eax
+}
+ 708:	5b                   	pop    %ebx
+ 709:	5e                   	pop    %esi
+ 70a:	5f                   	pop    %edi
+ 70b:	5d                   	pop    %ebp
+ 70c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 70d:	89 c2                	mov    %eax,%edx
+ 70f:	89 f8                	mov    %edi,%eax
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 718:	39 ce                	cmp    %ecx,%esi
+ 71a:	74 54                	je     770 <malloc+0x100>
+        p->s.size -= nunits;
+ 71c:	29 f1                	sub    %esi,%ecx
+ 71e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 721:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 724:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 727:	a3 3c 0a 00 00       	mov    %eax,0xa3c
+}
+ 72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 72f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 732:	5b                   	pop    %ebx
+ 733:	5e                   	pop    %esi
+ 734:	5f                   	pop    %edi
+ 735:	5d                   	pop    %ebp
+ 736:	c3                   	ret    
+ 737:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 3c 0a 00 00 40 	movl   $0xa40,0xa3c
+ 747:	0a 00 00 
+    base.s.size = 0;
+ 74a:	bf 40 0a 00 00       	mov    $0xa40,%edi
+    base.s.ptr = freep = prevp = &base;
+ 74f:	c7 05 40 0a 00 00 40 	movl   $0xa40,0xa40
+ 756:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 759:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 75b:	c7 05 44 0a 00 00 00 	movl   $0x0,0xa44
+ 762:	00 00 00 
+    if(p->s.size >= nunits){
+ 765:	e9 36 ff ff ff       	jmp    6a0 <malloc+0x30>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 0a                	mov    (%edx),%ecx
+ 772:	89 08                	mov    %ecx,(%eax)
+ 774:	eb b1                	jmp    727 <malloc+0xb7>
diff -ruN xv6-public/SMLsanity.c xv6-public_mine/SMLsanity.c
--- xv6-public/SMLsanity.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/SMLsanity.c	2021-09-30 21:23:52.000000000 +0530
@@ -0,0 +1,62 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char *argv[]) {
+  
+  #ifdef SML
+  if (argc != 2){
+    printf(1, "Use this format: SMLsanity <no.of.processes>\n");
+    exit();
+  }
+
+  int n = 3*atoi(argv[1]); 
+  int id, i, j;
+  int c_time, wait_time, run_time, io_time;
+	
+  int pid;
+  for (int ind=0; ind<n; ind++) { 
+    pid = fork();
+    if (pid == 0) {//child
+      id = (getpid() - 4) % 3; // ensures independence from the first son's pid when gathering the results in the second part of the program
+      switch(id) {
+        case 0:
+          set_prio(1);
+          break;
+	case 1:
+          set_prio(2);
+          break;
+	case 2:
+          set_prio(3);
+          break;
+      }
+      for (i=0; i<100; i++) {
+        j = 0;
+        while (j<100000) j++;  
+      }
+      exit(); // child exit here
+    }
+    continue; // parent continues to fork the next child
+  }
+  
+  for (int ind=0; ind<n; ind++) {
+    pid = wait2(&c_time, &wait_time, &run_time, &io_time);
+    id = (pid - 4) % 3; // correlates to j in the dispatching loop
+    switch(id) {
+      case 0: 
+        printf(1, "Priority 1, pid: %d, termination time = %d\n", pid, c_time + wait_time + run_time + io_time);
+        break;
+      case 1:
+        printf(1, "Priority 2, pid: %d, termination time = %d\n", pid, c_time + wait_time + run_time + io_time);
+	break;
+      case 2: 
+	printf(1, "Priority 3, pid: %d,termination time = %d\n", pid, c_time + wait_time + run_time + io_time);
+	break;
+    }
+  } 
+  
+  #else
+  printf(1, "Works only for SML\n");
+  #endif
+  exit();
+}
\ No newline at end of file
diff -ruN xv6-public/SMLsanity.d xv6-public_mine/SMLsanity.d
--- xv6-public/SMLsanity.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/SMLsanity.d	2021-09-30 23:42:34.175573436 +0530
@@ -0,0 +1 @@
+SMLsanity.o: SMLsanity.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/SMLsanity.o and xv6-public_mine/SMLsanity.o differ
diff -ruN xv6-public/SMLsanity.sym xv6-public_mine/SMLsanity.sym
--- xv6-public/SMLsanity.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/SMLsanity.sym	2021-09-30 23:42:34.411633720 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000778 .rodata
+000007a8 .eh_frame
+00000a3c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 SMLsanity.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+00000794 digits.1101
+00000000 umalloc.c
+00000a3c freep
+00000a40 base
+00000030 strcpy
+0000034b set_prio
+00000410 printf
+00000260 memmove
+000002db mknod
+00000150 gets
+00000313 getpid
+00000670 malloc
+00000323 sleep
+00000343 wait2
+000002a3 pipe
+000002b3 write
+0000033b history
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000a3c __bss_start
+000000f0 memset
+00000000 main
+00000060 strcmp
+0000030b dup
+000001d0 stat
+00000a3c _edata
+00000a48 _end
+000002f3 link
+00000293 exit
+00000220 atoi
+00000353 yield2
+00000333 draw
+000000b0 strlen
+000002d3 open
+00000110 strchr
+000002fb mkdir
+000002bb close
+000005e0 free
diff -ruN xv6-public/spinlock.d xv6-public_mine/spinlock.d
--- xv6-public/spinlock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/spinlock.d	2021-09-30 23:41:56.445615255 +0530
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files xv6-public/spinlock.o and xv6-public_mine/spinlock.o differ
Binary files xv6-public/_statistics and xv6-public_mine/_statistics differ
diff -ruN xv6-public/statistics.asm xv6-public_mine/statistics.asm
--- xv6-public/statistics.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/statistics.asm	2021-09-30 23:42:33.135303675 +0530
@@ -0,0 +1,1236 @@
+
+_statistics:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include  "stat.h"
+#include "user.h"
+
+int main() {
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+
+    int retime=0, rutime=0, stime=0, pid=0;
+  12:	be 03 00 00 00       	mov    $0x3,%esi
+int main() {
+  17:	53                   	push   %ebx
+  18:	51                   	push   %ecx
+  19:	83 ec 1c             	sub    $0x1c,%esp
+    int retime=0, rutime=0, stime=0, pid=0;
+  1c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  23:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    uint i;
+    for(i=0; i<3; i++) {
+         pid = fork();
+  31:	e8 b5 02 00 00       	call   2eb <fork>
+  36:	89 c3                	mov    %eax,%ebx
+         if(pid && wait2(&retime,&retime, &rutime, &stime) == pid) { // this to avoid error we added another argument.
+  38:	85 c0                	test   %eax,%eax
+  3a:	75 14                	jne    50 <main+0x50>
+    for(i=0; i<3; i++) {
+  3c:	83 ee 01             	sub    $0x1,%esi
+  3f:	75 f0                	jne    31 <main+0x31>
+             printf(1,"pid: %d, retime: %d, rutime: %d, stime: %d\n", pid, retime, rutime, stime);
+         }
+    }
+    exit();
+  41:	e8 ad 02 00 00       	call   2f3 <exit>
+  46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  4d:	8d 76 00             	lea    0x0(%esi),%esi
+         if(pid && wait2(&retime,&retime, &rutime, &stime) == pid) { // this to avoid error we added another argument.
+  50:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+  53:	50                   	push   %eax
+  54:	8d 45 e0             	lea    -0x20(%ebp),%eax
+  57:	50                   	push   %eax
+  58:	8d 45 dc             	lea    -0x24(%ebp),%eax
+  5b:	50                   	push   %eax
+  5c:	50                   	push   %eax
+  5d:	e8 41 03 00 00       	call   3a3 <wait2>
+  62:	83 c4 10             	add    $0x10,%esp
+  65:	39 d8                	cmp    %ebx,%eax
+  67:	75 d3                	jne    3c <main+0x3c>
+             printf(1,"pid: %d, retime: %d, rutime: %d, stime: %d\n", pid, retime, rutime, stime);
+  69:	52                   	push   %edx
+  6a:	52                   	push   %edx
+  6b:	ff 75 e4             	pushl  -0x1c(%ebp)
+  6e:	ff 75 e0             	pushl  -0x20(%ebp)
+  71:	ff 75 dc             	pushl  -0x24(%ebp)
+  74:	50                   	push   %eax
+  75:	68 d8 07 00 00       	push   $0x7d8
+  7a:	6a 01                	push   $0x1
+  7c:	e8 ef 03 00 00       	call   470 <printf>
+  81:	83 c4 20             	add    $0x20,%esp
+  84:	eb b6                	jmp    3c <main+0x3c>
+  86:	66 90                	xchg   %ax,%ax
+  88:	66 90                	xchg   %ax,%ax
+  8a:	66 90                	xchg   %ax,%ax
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  95:	31 c0                	xor    %eax,%eax
+{
+  97:	89 e5                	mov    %esp,%ebp
+  99:	53                   	push   %ebx
+  9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  9d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  a7:	83 c0 01             	add    $0x1,%eax
+  aa:	84 d2                	test   %dl,%dl
+  ac:	75 f2                	jne    a0 <strcpy+0x10>
+    ;
+  return os;
+}
+  ae:	89 c8                	mov    %ecx,%eax
+  b0:	5b                   	pop    %ebx
+  b1:	5d                   	pop    %ebp
+  b2:	c3                   	ret    
+  b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000c0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  c0:	f3 0f 1e fb          	endbr32 
+  c4:	55                   	push   %ebp
+  c5:	89 e5                	mov    %esp,%ebp
+  c7:	53                   	push   %ebx
+  c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  ce:	0f b6 01             	movzbl (%ecx),%eax
+  d1:	0f b6 1a             	movzbl (%edx),%ebx
+  d4:	84 c0                	test   %al,%al
+  d6:	75 19                	jne    f1 <strcmp+0x31>
+  d8:	eb 26                	jmp    100 <strcmp+0x40>
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  e4:	83 c1 01             	add    $0x1,%ecx
+  e7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ea:	0f b6 1a             	movzbl (%edx),%ebx
+  ed:	84 c0                	test   %al,%al
+  ef:	74 0f                	je     100 <strcmp+0x40>
+  f1:	38 d8                	cmp    %bl,%al
+  f3:	74 eb                	je     e0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  f5:	29 d8                	sub    %ebx,%eax
+}
+  f7:	5b                   	pop    %ebx
+  f8:	5d                   	pop    %ebp
+  f9:	c3                   	ret    
+  fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 100:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 102:	29 d8                	sub    %ebx,%eax
+}
+ 104:	5b                   	pop    %ebx
+ 105:	5d                   	pop    %ebp
+ 106:	c3                   	ret    
+ 107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10e:	66 90                	xchg   %ax,%ax
+
+00000110 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 11a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 11d:	74 21                	je     140 <strlen+0x30>
+ 11f:	31 c0                	xor    %eax,%eax
+ 121:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 128:	83 c0 01             	add    $0x1,%eax
+ 12b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 12f:	89 c1                	mov    %eax,%ecx
+ 131:	75 f5                	jne    128 <strlen+0x18>
+    ;
+  return n;
+}
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	5d                   	pop    %ebp
+ 136:	c3                   	ret    
+ 137:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 140:	31 c9                	xor    %ecx,%ecx
+}
+ 142:	5d                   	pop    %ebp
+ 143:	89 c8                	mov    %ecx,%eax
+ 145:	c3                   	ret    
+ 146:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000150 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 15b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 15e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 161:	89 d7                	mov    %edx,%edi
+ 163:	fc                   	cld    
+ 164:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 166:	89 d0                	mov    %edx,%eax
+ 168:	5f                   	pop    %edi
+ 169:	5d                   	pop    %ebp
+ 16a:	c3                   	ret    
+ 16b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 16f:	90                   	nop
+
+00000170 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	8b 45 08             	mov    0x8(%ebp),%eax
+ 17a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 17e:	0f b6 10             	movzbl (%eax),%edx
+ 181:	84 d2                	test   %dl,%dl
+ 183:	75 16                	jne    19b <strchr+0x2b>
+ 185:	eb 21                	jmp    1a8 <strchr+0x38>
+ 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18e:	66 90                	xchg   %ax,%ax
+ 190:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 194:	83 c0 01             	add    $0x1,%eax
+ 197:	84 d2                	test   %dl,%dl
+ 199:	74 0d                	je     1a8 <strchr+0x38>
+    if(*s == c)
+ 19b:	38 d1                	cmp    %dl,%cl
+ 19d:	75 f1                	jne    190 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 19f:	5d                   	pop    %ebp
+ 1a0:	c3                   	ret    
+ 1a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 1a8:	31 c0                	xor    %eax,%eax
+}
+ 1aa:	5d                   	pop    %ebp
+ 1ab:	c3                   	ret    
+ 1ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001b0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1b0:	f3 0f 1e fb          	endbr32 
+ 1b4:	55                   	push   %ebp
+ 1b5:	89 e5                	mov    %esp,%ebp
+ 1b7:	57                   	push   %edi
+ 1b8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1b9:	31 f6                	xor    %esi,%esi
+{
+ 1bb:	53                   	push   %ebx
+ 1bc:	89 f3                	mov    %esi,%ebx
+ 1be:	83 ec 1c             	sub    $0x1c,%esp
+ 1c1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1c4:	eb 33                	jmp    1f9 <gets+0x49>
+ 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1d0:	83 ec 04             	sub    $0x4,%esp
+ 1d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1d6:	6a 01                	push   $0x1
+ 1d8:	50                   	push   %eax
+ 1d9:	6a 00                	push   $0x0
+ 1db:	e8 2b 01 00 00       	call   30b <read>
+    if(cc < 1)
+ 1e0:	83 c4 10             	add    $0x10,%esp
+ 1e3:	85 c0                	test   %eax,%eax
+ 1e5:	7e 1c                	jle    203 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1eb:	83 c7 01             	add    $0x1,%edi
+ 1ee:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1f1:	3c 0a                	cmp    $0xa,%al
+ 1f3:	74 23                	je     218 <gets+0x68>
+ 1f5:	3c 0d                	cmp    $0xd,%al
+ 1f7:	74 1f                	je     218 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1f9:	83 c3 01             	add    $0x1,%ebx
+ 1fc:	89 fe                	mov    %edi,%esi
+ 1fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 201:	7c cd                	jl     1d0 <gets+0x20>
+ 203:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 205:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 208:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 20b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 20e:	5b                   	pop    %ebx
+ 20f:	5e                   	pop    %esi
+ 210:	5f                   	pop    %edi
+ 211:	5d                   	pop    %ebp
+ 212:	c3                   	ret    
+ 213:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 217:	90                   	nop
+ 218:	8b 75 08             	mov    0x8(%ebp),%esi
+ 21b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 21e:	01 de                	add    %ebx,%esi
+ 220:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 222:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 225:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 228:	5b                   	pop    %ebx
+ 229:	5e                   	pop    %esi
+ 22a:	5f                   	pop    %edi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000230 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	56                   	push   %esi
+ 238:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 239:	83 ec 08             	sub    $0x8,%esp
+ 23c:	6a 00                	push   $0x0
+ 23e:	ff 75 08             	pushl  0x8(%ebp)
+ 241:	e8 ed 00 00 00       	call   333 <open>
+  if(fd < 0)
+ 246:	83 c4 10             	add    $0x10,%esp
+ 249:	85 c0                	test   %eax,%eax
+ 24b:	78 2b                	js     278 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 24d:	83 ec 08             	sub    $0x8,%esp
+ 250:	ff 75 0c             	pushl  0xc(%ebp)
+ 253:	89 c3                	mov    %eax,%ebx
+ 255:	50                   	push   %eax
+ 256:	e8 f0 00 00 00       	call   34b <fstat>
+  close(fd);
+ 25b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 25e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 260:	e8 b6 00 00 00       	call   31b <close>
+  return r;
+ 265:	83 c4 10             	add    $0x10,%esp
+}
+ 268:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 26b:	89 f0                	mov    %esi,%eax
+ 26d:	5b                   	pop    %ebx
+ 26e:	5e                   	pop    %esi
+ 26f:	5d                   	pop    %ebp
+ 270:	c3                   	ret    
+ 271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 278:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 27d:	eb e9                	jmp    268 <stat+0x38>
+ 27f:	90                   	nop
+
+00000280 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 280:	f3 0f 1e fb          	endbr32 
+ 284:	55                   	push   %ebp
+ 285:	89 e5                	mov    %esp,%ebp
+ 287:	53                   	push   %ebx
+ 288:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 28b:	0f be 02             	movsbl (%edx),%eax
+ 28e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 291:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 294:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 299:	77 1a                	ja     2b5 <atoi+0x35>
+ 29b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 2a0:	83 c2 01             	add    $0x1,%edx
+ 2a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2aa:	0f be 02             	movsbl (%edx),%eax
+ 2ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2b0:	80 fb 09             	cmp    $0x9,%bl
+ 2b3:	76 eb                	jbe    2a0 <atoi+0x20>
+  return n;
+}
+ 2b5:	89 c8                	mov    %ecx,%eax
+ 2b7:	5b                   	pop    %ebx
+ 2b8:	5d                   	pop    %ebp
+ 2b9:	c3                   	ret    
+ 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2c0:	f3 0f 1e fb          	endbr32 
+ 2c4:	55                   	push   %ebp
+ 2c5:	89 e5                	mov    %esp,%ebp
+ 2c7:	57                   	push   %edi
+ 2c8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2cb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ce:	56                   	push   %esi
+ 2cf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2d2:	85 c0                	test   %eax,%eax
+ 2d4:	7e 0f                	jle    2e5 <memmove+0x25>
+ 2d6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2d8:	89 d7                	mov    %edx,%edi
+ 2da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2e1:	39 f8                	cmp    %edi,%eax
+ 2e3:	75 fb                	jne    2e0 <memmove+0x20>
+  return vdst;
+}
+ 2e5:	5e                   	pop    %esi
+ 2e6:	89 d0                	mov    %edx,%eax
+ 2e8:	5f                   	pop    %edi
+ 2e9:	5d                   	pop    %ebp
+ 2ea:	c3                   	ret    
+
+000002eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <exit>:
+SYSCALL(exit)
+ 2f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <wait>:
+SYSCALL(wait)
+ 2fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <pipe>:
+SYSCALL(pipe)
+ 303:	b8 04 00 00 00       	mov    $0x4,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <read>:
+SYSCALL(read)
+ 30b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <write>:
+SYSCALL(write)
+ 313:	b8 10 00 00 00       	mov    $0x10,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <close>:
+SYSCALL(close)
+ 31b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <kill>:
+SYSCALL(kill)
+ 323:	b8 06 00 00 00       	mov    $0x6,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <exec>:
+SYSCALL(exec)
+ 32b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <open>:
+SYSCALL(open)
+ 333:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mknod>:
+SYSCALL(mknod)
+ 33b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <unlink>:
+SYSCALL(unlink)
+ 343:	b8 12 00 00 00       	mov    $0x12,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <fstat>:
+SYSCALL(fstat)
+ 34b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <link>:
+SYSCALL(link)
+ 353:	b8 13 00 00 00       	mov    $0x13,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <mkdir>:
+SYSCALL(mkdir)
+ 35b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <chdir>:
+SYSCALL(chdir)
+ 363:	b8 09 00 00 00       	mov    $0x9,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <dup>:
+SYSCALL(dup)
+ 36b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getpid>:
+SYSCALL(getpid)
+ 373:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <sbrk>:
+SYSCALL(sbrk)
+ 37b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <sleep>:
+SYSCALL(sleep)
+ 383:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <uptime>:
+SYSCALL(uptime)
+ 38b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <draw>:
+SYSCALL(draw)
+ 393:	b8 16 00 00 00       	mov    $0x16,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <history>:
+SYSCALL(history)
+ 39b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <wait2>:
+SYSCALL(wait2)
+ 3a3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <set_prio>:
+SYSCALL(set_prio)
+ 3ab:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <yield2>:
+SYSCALL(yield2)
+ 3b3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3cc:	89 d1                	mov    %edx,%ecx
+{
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
+    neg = 1;
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 0c 08 00 00 	movzbl 0x80c(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
+  if(neg)
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
+    buf[i++] = '-';
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 41f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 ce fe ff ff       	call   313 <write>
+  while(--i >= 0)
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+
+00000470 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 470:	f3 0f 1e fb          	endbr32 
+ 474:	55                   	push   %ebp
+ 475:	89 e5                	mov    %esp,%ebp
+ 477:	57                   	push   %edi
+ 478:	56                   	push   %esi
+ 479:	53                   	push   %ebx
+ 47a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 480:	0f b6 1e             	movzbl (%esi),%ebx
+ 483:	84 db                	test   %bl,%bl
+ 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 48b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 48e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 494:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 499:	eb 33                	jmp    4ce <printf+0x5e>
+ 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+ 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 17                	je     4c4 <printf+0x54>
+  write(fd, &c, 1);
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 55 fe ff ff       	call   313 <write>
+ 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4c1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c7:	83 c6 01             	add    $0x1,%esi
+ 4ca:	84 db                	test   %bl,%bl
+ 4cc:	74 71                	je     53f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ce:	0f be cb             	movsbl %bl,%ecx
+ 4d1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4d4:	85 d2                	test   %edx,%edx
+ 4d6:	74 c8                	je     4a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4d8:	83 fa 25             	cmp    $0x25,%edx
+ 4db:	75 e7                	jne    4c4 <printf+0x54>
+      if(c == 'd'){
+ 4dd:	83 f8 64             	cmp    $0x64,%eax
+ 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ec:	83 f9 70             	cmp    $0x70,%ecx
+ 4ef:	74 5f                	je     550 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4f1:	83 f8 73             	cmp    $0x73,%eax
+ 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4fa:	83 f8 63             	cmp    $0x63,%eax
+ 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 503:	83 f8 25             	cmp    $0x25,%eax
+ 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
+  write(fd, &c, 1);
+ 50c:	83 ec 04             	sub    $0x4,%esp
+ 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 513:	6a 01                	push   $0x1
+ 515:	57                   	push   %edi
+ 516:	ff 75 08             	pushl  0x8(%ebp)
+ 519:	e8 f5 fd ff ff       	call   313 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 521:	83 c4 0c             	add    $0xc,%esp
+ 524:	6a 01                	push   $0x1
+ 526:	83 c6 01             	add    $0x1,%esi
+ 529:	57                   	push   %edi
+ 52a:	ff 75 08             	pushl  0x8(%ebp)
+ 52d:	e8 e1 fd ff ff       	call   313 <write>
+  for(i = 0; fmt[i]; i++){
+ 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 536:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 539:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 53b:	84 db                	test   %bl,%bl
+ 53d:	75 8f                	jne    4ce <printf+0x5e>
+    }
+  }
+}
+ 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 542:	5b                   	pop    %ebx
+ 543:	5e                   	pop    %esi
+ 544:	5f                   	pop    %edi
+ 545:	5d                   	pop    %ebp
+ 546:	c3                   	ret    
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 558:	6a 00                	push   $0x0
+ 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 55d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 560:	8b 13                	mov    (%ebx),%edx
+ 562:	e8 59 fe ff ff       	call   3c0 <printint>
+        ap++;
+ 567:	89 d8                	mov    %ebx,%eax
+ 569:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 56e:	83 c0 04             	add    $0x4,%eax
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
+ 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	eb ce                	jmp    55a <printf+0xea>
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 596:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 598:	6a 01                	push   $0x1
+        ap++;
+ 59a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 59d:	57                   	push   %edi
+ 59e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a4:	e8 6a fd ff ff       	call   313 <write>
+        ap++;
+ 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ac:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5af:	31 d2                	xor    %edx,%edx
+ 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+ 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
+ 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+        s = (char*)*ap;
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5d5:	83 c0 04             	add    $0x4,%eax
+ 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5db:	85 db                	test   %ebx,%ebx
+ 5dd:	74 17                	je     5f6 <printf+0x186>
+        while(*s != 0){
+ 5df:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5e2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5e4:	84 c0                	test   %al,%al
+ 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
+ 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ef:	89 de                	mov    %ebx,%esi
+ 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
+          s = "(null)";
+ 5f6:	bb 04 08 00 00       	mov    $0x804,%ebx
+        while(*s != 0){
+ 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 603:	89 de                	mov    %ebx,%esi
+ 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+  write(fd, &c, 1);
+ 610:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 613:	83 c6 01             	add    $0x1,%esi
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	53                   	push   %ebx
+ 61d:	e8 f1 fc ff ff       	call   313 <write>
+        while(*s != 0){
+ 622:	0f b6 06             	movzbl (%esi),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x1a0>
+ 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 62f:	31 d2                	xor    %edx,%edx
+ 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
+ 636:	66 90                	xchg   %ax,%ax
+ 638:	66 90                	xchg   %ax,%ax
+ 63a:	66 90                	xchg   %ax,%ax
+ 63c:	66 90                	xchg   %ax,%ax
+ 63e:	66 90                	xchg   %ax,%ax
+
+00000640 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 640:	f3 0f 1e fb          	endbr32 
+ 644:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 645:	a1 bc 0a 00 00       	mov    0xabc,%eax
+{
+ 64a:	89 e5                	mov    %esp,%ebp
+ 64c:	57                   	push   %edi
+ 64d:	56                   	push   %esi
+ 64e:	53                   	push   %ebx
+ 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 652:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 657:	39 c8                	cmp    %ecx,%eax
+ 659:	73 15                	jae    670 <free+0x30>
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+ 660:	39 d1                	cmp    %edx,%ecx
+ 662:	72 14                	jb     678 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 664:	39 d0                	cmp    %edx,%eax
+ 666:	73 10                	jae    678 <free+0x38>
+{
+ 668:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 66a:	8b 10                	mov    (%eax),%edx
+ 66c:	39 c8                	cmp    %ecx,%eax
+ 66e:	72 f0                	jb     660 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 670:	39 d0                	cmp    %edx,%eax
+ 672:	72 f4                	jb     668 <free+0x28>
+ 674:	39 d1                	cmp    %edx,%ecx
+ 676:	73 f0                	jae    668 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 fa                	cmp    %edi,%edx
+ 680:	74 1e                	je     6a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 685:	8b 50 04             	mov    0x4(%eax),%edx
+ 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 68b:	39 f1                	cmp    %esi,%ecx
+ 68d:	74 28                	je     6b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 68f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 691:	5b                   	pop    %ebx
+  freep = p;
+ 692:	a3 bc 0a 00 00       	mov    %eax,0xabc
+}
+ 697:	5e                   	pop    %esi
+ 698:	5f                   	pop    %edi
+ 699:	5d                   	pop    %ebp
+ 69a:	c3                   	ret    
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6a0:	03 72 04             	add    0x4(%edx),%esi
+ 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6a6:	8b 10                	mov    (%eax),%edx
+ 6a8:	8b 12                	mov    (%edx),%edx
+ 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6b3:	39 f1                	cmp    %esi,%ecx
+ 6b5:	75 d8                	jne    68f <free+0x4f>
+    p->s.size += bp->s.size;
+ 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6ba:	a3 bc 0a 00 00       	mov    %eax,0xabc
+    p->s.size += bp->s.size;
+ 6bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6c5:	89 10                	mov    %edx,(%eax)
+}
+ 6c7:	5b                   	pop    %ebx
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6d0:	f3 0f 1e fb          	endbr32 
+ 6d4:	55                   	push   %ebp
+ 6d5:	89 e5                	mov    %esp,%ebp
+ 6d7:	57                   	push   %edi
+ 6d8:	56                   	push   %esi
+ 6d9:	53                   	push   %ebx
+ 6da:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6e0:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6e9:	c1 ee 03             	shr    $0x3,%esi
+ 6ec:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6ef:	85 ff                	test   %edi,%edi
+ 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fc:	39 f1                	cmp    %esi,%ecx
+ 6fe:	73 6d                	jae    76d <malloc+0x9d>
+ 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 70b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 718:	eb 17                	jmp    731 <malloc+0x61>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 720:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 722:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	73 4f                	jae    778 <malloc+0xa8>
+ 729:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+ 72f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 731:	39 c7                	cmp    %eax,%edi
+ 733:	75 eb                	jne    720 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 735:	83 ec 0c             	sub    $0xc,%esp
+ 738:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 73b:	e8 3b fc ff ff       	call   37b <sbrk>
+  if(p == (char*)-1)
+ 740:	83 c4 10             	add    $0x10,%esp
+ 743:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 746:	74 1b                	je     763 <malloc+0x93>
+  hp->s.size = nu;
+ 748:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 74b:	83 ec 0c             	sub    $0xc,%esp
+ 74e:	83 c0 08             	add    $0x8,%eax
+ 751:	50                   	push   %eax
+ 752:	e8 e9 fe ff ff       	call   640 <free>
+  return freep;
+ 757:	a1 bc 0a 00 00       	mov    0xabc,%eax
+      if((p = morecore(nunits)) == 0)
+ 75c:	83 c4 10             	add    $0x10,%esp
+ 75f:	85 c0                	test   %eax,%eax
+ 761:	75 bd                	jne    720 <malloc+0x50>
+        return 0;
+  }
+}
+ 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 766:	31 c0                	xor    %eax,%eax
+}
+ 768:	5b                   	pop    %ebx
+ 769:	5e                   	pop    %esi
+ 76a:	5f                   	pop    %edi
+ 76b:	5d                   	pop    %ebp
+ 76c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 76d:	89 c2                	mov    %eax,%edx
+ 76f:	89 f8                	mov    %edi,%eax
+ 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 778:	39 ce                	cmp    %ecx,%esi
+ 77a:	74 54                	je     7d0 <malloc+0x100>
+        p->s.size -= nunits;
+ 77c:	29 f1                	sub    %esi,%ecx
+ 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 784:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 787:	a3 bc 0a 00 00       	mov    %eax,0xabc
+}
+ 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 78f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 792:	5b                   	pop    %ebx
+ 793:	5e                   	pop    %esi
+ 794:	5f                   	pop    %edi
+ 795:	5d                   	pop    %ebp
+ 796:	c3                   	ret    
+ 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7a0:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
+ 7a7:	0a 00 00 
+    base.s.size = 0;
+ 7aa:	bf c0 0a 00 00       	mov    $0xac0,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7af:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
+ 7b6:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7b9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7bb:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
+ 7c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7d0:	8b 0a                	mov    (%edx),%ecx
+ 7d2:	89 08                	mov    %ecx,(%eax)
+ 7d4:	eb b1                	jmp    787 <malloc+0xb7>
diff -ruN xv6-public/statistics.c xv6-public_mine/statistics.c
--- xv6-public/statistics.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/statistics.c	2021-09-30 21:17:22.000000000 +0530
@@ -0,0 +1,16 @@
+#include "types.h"
+#include  "stat.h"
+#include "user.h"
+
+int main() {
+
+    int retime=0, rutime=0, stime=0, pid=0;
+    uint i;
+    for(i=0; i<3; i++) {
+         pid = fork();
+         if(pid && wait2(&retime,&retime, &rutime, &stime) == pid) { // this to avoid error we added another argument.
+             printf(1,"pid: %d, retime: %d, rutime: %d, stime: %d\n", pid, retime, rutime, stime);
+         }
+    }
+    exit();
+}
\ No newline at end of file
diff -ruN xv6-public/statistics.d xv6-public_mine/statistics.d
--- xv6-public/statistics.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/statistics.d	2021-09-30 23:42:32.923248134 +0530
@@ -0,0 +1,2 @@
+statistics.o: statistics.c /usr/include/stdc-predef.h types.h stat.h \
+ user.h
Binary files xv6-public/statistics.o and xv6-public_mine/statistics.o differ
diff -ruN xv6-public/statistics.sym xv6-public_mine/statistics.sym
--- xv6-public/statistics.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/statistics.sym	2021-09-30 23:42:33.203321366 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+000007d8 .rodata
+00000820 .eh_frame
+00000abc .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 statistics.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+0000080c digits.1101
+00000000 umalloc.c
+00000abc freep
+00000ac0 base
+00000090 strcpy
+000003ab set_prio
+00000470 printf
+000002c0 memmove
+0000033b mknod
+000001b0 gets
+00000373 getpid
+000006d0 malloc
+00000383 sleep
+000003a3 wait2
+00000303 pipe
+00000313 write
+0000039b history
+0000034b fstat
+00000323 kill
+00000363 chdir
+0000032b exec
+000002fb wait
+0000030b read
+00000343 unlink
+000002eb fork
+0000037b sbrk
+0000038b uptime
+00000abc __bss_start
+00000150 memset
+00000000 main
+000000c0 strcmp
+0000036b dup
+00000230 stat
+00000abc _edata
+00000ac8 _end
+00000353 link
+000002f3 exit
+00000280 atoi
+000003b3 yield2
+00000393 draw
+00000110 strlen
+00000333 open
+00000170 strchr
+0000035b mkdir
+0000031b close
+00000640 free
Binary files xv6-public/_stressfs and xv6-public_mine/_stressfs differ
diff -ruN xv6-public/stressfs.asm xv6-public_mine/stressfs.asm
--- xv6-public/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/stressfs.asm	2021-09-30 23:42:27.033614194 +0530
@@ -0,0 +1,1318 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   b:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+  10:	ff 71 fc             	pushl  -0x4(%ecx)
+  13:	55                   	push   %ebp
+  14:	89 e5                	mov    %esp,%ebp
+  16:	57                   	push   %edi
+  17:	56                   	push   %esi
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  18:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+{
+  1e:	53                   	push   %ebx
+
+  for(i = 0; i < 4; i++)
+  1f:	31 db                	xor    %ebx,%ebx
+{
+  21:	51                   	push   %ecx
+  22:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  printf(1, "stressfs starting\n");
+  2f:	68 88 08 00 00       	push   $0x888
+  34:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  3d:	74 72 65 
+  40:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  47:	73 66 73 
+  printf(1, "stressfs starting\n");
+  4a:	e8 d1 04 00 00       	call   520 <printf>
+  memset(data, 'a', sizeof(data));
+  4f:	83 c4 0c             	add    $0xc,%esp
+  52:	68 00 02 00 00       	push   $0x200
+  57:	6a 61                	push   $0x61
+  59:	56                   	push   %esi
+  5a:	e8 a1 01 00 00       	call   200 <memset>
+  5f:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  62:	e8 34 03 00 00       	call   39b <fork>
+  67:	85 c0                	test   %eax,%eax
+  69:	0f 8f bb 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6f:	83 c3 01             	add    $0x1,%ebx
+  72:	83 fb 04             	cmp    $0x4,%ebx
+  75:	75 eb                	jne    62 <main+0x62>
+  77:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  7c:	83 ec 04             	sub    $0x4,%esp
+  7f:	53                   	push   %ebx
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  80:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  85:	68 9b 08 00 00       	push   $0x89b
+  8a:	6a 01                	push   $0x1
+  8c:	e8 8f 04 00 00       	call   520 <printf>
+  path[8] += i;
+  91:	89 f8                	mov    %edi,%eax
+  fd = open(path, O_CREATE | O_RDWR);
+  93:	5f                   	pop    %edi
+  path[8] += i;
+  94:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  9a:	58                   	pop    %eax
+  9b:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  a1:	68 02 02 00 00       	push   $0x202
+  a6:	50                   	push   %eax
+  a7:	e8 37 03 00 00       	call   3e3 <open>
+  ac:	83 c4 10             	add    $0x10,%esp
+  af:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < 20; i++)
+  b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b8:	83 ec 04             	sub    $0x4,%esp
+  bb:	68 00 02 00 00       	push   $0x200
+  c0:	56                   	push   %esi
+  c1:	57                   	push   %edi
+  c2:	e8 fc 02 00 00       	call   3c3 <write>
+  for(i = 0; i < 20; i++)
+  c7:	83 c4 10             	add    $0x10,%esp
+  ca:	83 eb 01             	sub    $0x1,%ebx
+  cd:	75 e9                	jne    b8 <main+0xb8>
+  close(fd);
+  cf:	83 ec 0c             	sub    $0xc,%esp
+  d2:	57                   	push   %edi
+  d3:	e8 f3 02 00 00       	call   3cb <close>
+
+  printf(1, "read\n");
+  d8:	58                   	pop    %eax
+  d9:	5a                   	pop    %edx
+  da:	68 a5 08 00 00       	push   $0x8a5
+  df:	6a 01                	push   $0x1
+  e1:	e8 3a 04 00 00       	call   520 <printf>
+
+  fd = open(path, O_RDONLY);
+  e6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  ec:	59                   	pop    %ecx
+  ed:	5b                   	pop    %ebx
+  ee:	6a 00                	push   $0x0
+  f0:	bb 14 00 00 00       	mov    $0x14,%ebx
+  f5:	50                   	push   %eax
+  f6:	e8 e8 02 00 00       	call   3e3 <open>
+  fb:	83 c4 10             	add    $0x10,%esp
+  fe:	89 c7                	mov    %eax,%edi
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 ac 02 00 00       	call   3bb <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 ab 02 00 00       	call   3cb <close>
+
+  wait();
+ 120:	e8 86 02 00 00       	call   3ab <wait>
+
+  exit();
+ 125:	e8 79 02 00 00       	call   3a3 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 4b ff ff ff       	jmp    7c <main+0x7c>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 145:	31 c0                	xor    %eax,%eax
+{
+ 147:	89 e5                	mov    %esp,%ebp
+ 149:	53                   	push   %ebx
+ 14a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 154:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 157:	83 c0 01             	add    $0x1,%eax
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	89 c8                	mov    %ecx,%eax
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	53                   	push   %ebx
+ 178:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 17b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 17e:	0f b6 01             	movzbl (%ecx),%eax
+ 181:	0f b6 1a             	movzbl (%edx),%ebx
+ 184:	84 c0                	test   %al,%al
+ 186:	75 19                	jne    1a1 <strcmp+0x31>
+ 188:	eb 26                	jmp    1b0 <strcmp+0x40>
+ 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 190:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 194:	83 c1 01             	add    $0x1,%ecx
+ 197:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 19a:	0f b6 1a             	movzbl (%edx),%ebx
+ 19d:	84 c0                	test   %al,%al
+ 19f:	74 0f                	je     1b0 <strcmp+0x40>
+ 1a1:	38 d8                	cmp    %bl,%al
+ 1a3:	74 eb                	je     190 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1a5:	29 d8                	sub    %ebx,%eax
+}
+ 1a7:	5b                   	pop    %ebx
+ 1a8:	5d                   	pop    %ebp
+ 1a9:	c3                   	ret    
+ 1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1b2:	29 d8                	sub    %ebx,%eax
+}
+ 1b4:	5b                   	pop    %ebx
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1cd:	74 21                	je     1f0 <strlen+0x30>
+ 1cf:	31 c0                	xor    %eax,%eax
+ 1d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1d8:	83 c0 01             	add    $0x1,%eax
+ 1db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1df:	89 c1                	mov    %eax,%ecx
+ 1e1:	75 f5                	jne    1d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1e3:	89 c8                	mov    %ecx,%eax
+ 1e5:	5d                   	pop    %ebp
+ 1e6:	c3                   	ret    
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c9                	xor    %ecx,%ecx
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	c3                   	ret    
+ 1f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	57                   	push   %edi
+ 208:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 20b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 211:	89 d7                	mov    %edx,%edi
+ 213:	fc                   	cld    
+ 214:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 216:	89 d0                	mov    %edx,%eax
+ 218:	5f                   	pop    %edi
+ 219:	5d                   	pop    %ebp
+ 21a:	c3                   	ret    
+ 21b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 21f:	90                   	nop
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	8b 45 08             	mov    0x8(%ebp),%eax
+ 22a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 22e:	0f b6 10             	movzbl (%eax),%edx
+ 231:	84 d2                	test   %dl,%dl
+ 233:	75 16                	jne    24b <strchr+0x2b>
+ 235:	eb 21                	jmp    258 <strchr+0x38>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+ 240:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	84 d2                	test   %dl,%dl
+ 249:	74 0d                	je     258 <strchr+0x38>
+    if(*s == c)
+ 24b:	38 d1                	cmp    %dl,%cl
+ 24d:	75 f1                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 258:	31 c0                	xor    %eax,%eax
+}
+ 25a:	5d                   	pop    %ebp
+ 25b:	c3                   	ret    
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 269:	31 f6                	xor    %esi,%esi
+{
+ 26b:	53                   	push   %ebx
+ 26c:	89 f3                	mov    %esi,%ebx
+ 26e:	83 ec 1c             	sub    $0x1c,%esp
+ 271:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 274:	eb 33                	jmp    2a9 <gets+0x49>
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 280:	83 ec 04             	sub    $0x4,%esp
+ 283:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 286:	6a 01                	push   $0x1
+ 288:	50                   	push   %eax
+ 289:	6a 00                	push   $0x0
+ 28b:	e8 2b 01 00 00       	call   3bb <read>
+    if(cc < 1)
+ 290:	83 c4 10             	add    $0x10,%esp
+ 293:	85 c0                	test   %eax,%eax
+ 295:	7e 1c                	jle    2b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 297:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 29b:	83 c7 01             	add    $0x1,%edi
+ 29e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2a1:	3c 0a                	cmp    $0xa,%al
+ 2a3:	74 23                	je     2c8 <gets+0x68>
+ 2a5:	3c 0d                	cmp    $0xd,%al
+ 2a7:	74 1f                	je     2c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2a9:	83 c3 01             	add    $0x1,%ebx
+ 2ac:	89 fe                	mov    %edi,%esi
+ 2ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2b1:	7c cd                	jl     280 <gets+0x20>
+ 2b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2be:	5b                   	pop    %ebx
+ 2bf:	5e                   	pop    %esi
+ 2c0:	5f                   	pop    %edi
+ 2c1:	5d                   	pop    %ebp
+ 2c2:	c3                   	ret    
+ 2c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c7:	90                   	nop
+ 2c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ce:	01 de                	add    %ebx,%esi
+ 2d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d8:	5b                   	pop    %ebx
+ 2d9:	5e                   	pop    %esi
+ 2da:	5f                   	pop    %edi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	56                   	push   %esi
+ 2e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	6a 00                	push   $0x0
+ 2ee:	ff 75 08             	pushl  0x8(%ebp)
+ 2f1:	e8 ed 00 00 00       	call   3e3 <open>
+  if(fd < 0)
+ 2f6:	83 c4 10             	add    $0x10,%esp
+ 2f9:	85 c0                	test   %eax,%eax
+ 2fb:	78 2b                	js     328 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2fd:	83 ec 08             	sub    $0x8,%esp
+ 300:	ff 75 0c             	pushl  0xc(%ebp)
+ 303:	89 c3                	mov    %eax,%ebx
+ 305:	50                   	push   %eax
+ 306:	e8 f0 00 00 00       	call   3fb <fstat>
+  close(fd);
+ 30b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 310:	e8 b6 00 00 00       	call   3cb <close>
+  return r;
+ 315:	83 c4 10             	add    $0x10,%esp
+}
+ 318:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 31b:	89 f0                	mov    %esi,%eax
+ 31d:	5b                   	pop    %ebx
+ 31e:	5e                   	pop    %esi
+ 31f:	5d                   	pop    %ebp
+ 320:	c3                   	ret    
+ 321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 328:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 32d:	eb e9                	jmp    318 <stat+0x38>
+ 32f:	90                   	nop
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	53                   	push   %ebx
+ 338:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 33b:	0f be 02             	movsbl (%edx),%eax
+ 33e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 341:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 344:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 349:	77 1a                	ja     365 <atoi+0x35>
+ 34b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 34f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 350:	83 c2 01             	add    $0x1,%edx
+ 353:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 356:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 02             	movsbl (%edx),%eax
+ 35d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	89 c8                	mov    %ecx,%eax
+ 367:	5b                   	pop    %ebx
+ 368:	5d                   	pop    %ebp
+ 369:	c3                   	ret    
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	57                   	push   %edi
+ 378:	8b 45 10             	mov    0x10(%ebp),%eax
+ 37b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 37e:	56                   	push   %esi
+ 37f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 382:	85 c0                	test   %eax,%eax
+ 384:	7e 0f                	jle    395 <memmove+0x25>
+ 386:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 388:	89 d7                	mov    %edx,%edi
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 390:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 391:	39 f8                	cmp    %edi,%eax
+ 393:	75 fb                	jne    390 <memmove+0x20>
+  return vdst;
+}
+ 395:	5e                   	pop    %esi
+ 396:	89 d0                	mov    %edx,%eax
+ 398:	5f                   	pop    %edi
+ 399:	5d                   	pop    %ebp
+ 39a:	c3                   	ret    
+
+0000039b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <exit>:
+SYSCALL(exit)
+ 3a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <wait>:
+SYSCALL(wait)
+ 3ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <pipe>:
+SYSCALL(pipe)
+ 3b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <read>:
+SYSCALL(read)
+ 3bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <write>:
+SYSCALL(write)
+ 3c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <close>:
+SYSCALL(close)
+ 3cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <kill>:
+SYSCALL(kill)
+ 3d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <exec>:
+SYSCALL(exec)
+ 3db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <open>:
+SYSCALL(open)
+ 3e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <mknod>:
+SYSCALL(mknod)
+ 3eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <unlink>:
+SYSCALL(unlink)
+ 3f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <fstat>:
+SYSCALL(fstat)
+ 3fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <link>:
+SYSCALL(link)
+ 403:	b8 13 00 00 00       	mov    $0x13,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <mkdir>:
+SYSCALL(mkdir)
+ 40b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <chdir>:
+SYSCALL(chdir)
+ 413:	b8 09 00 00 00       	mov    $0x9,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <dup>:
+SYSCALL(dup)
+ 41b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getpid>:
+SYSCALL(getpid)
+ 423:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <sbrk>:
+SYSCALL(sbrk)
+ 42b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <sleep>:
+SYSCALL(sleep)
+ 433:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <uptime>:
+SYSCALL(uptime)
+ 43b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <draw>:
+SYSCALL(draw)
+ 443:	b8 16 00 00 00       	mov    $0x16,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <history>:
+SYSCALL(history)
+ 44b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <wait2>:
+SYSCALL(wait2)
+ 453:	b8 18 00 00 00       	mov    $0x18,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <set_prio>:
+SYSCALL(set_prio)
+ 45b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <yield2>:
+SYSCALL(yield2)
+ 463:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+ 46b:	66 90                	xchg   %ax,%ax
+ 46d:	66 90                	xchg   %ax,%ax
+ 46f:	90                   	nop
+
+00000470 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	56                   	push   %esi
+ 475:	53                   	push   %ebx
+ 476:	83 ec 3c             	sub    $0x3c,%esp
+ 479:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 47c:	89 d1                	mov    %edx,%ecx
+{
+ 47e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 481:	85 d2                	test   %edx,%edx
+ 483:	0f 89 7f 00 00 00    	jns    508 <printint+0x98>
+ 489:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 48d:	74 79                	je     508 <printint+0x98>
+    neg = 1;
+ 48f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 496:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 498:	31 db                	xor    %ebx,%ebx
+ 49a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4a0:	89 c8                	mov    %ecx,%eax
+ 4a2:	31 d2                	xor    %edx,%edx
+ 4a4:	89 cf                	mov    %ecx,%edi
+ 4a6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4a9:	0f b6 92 b4 08 00 00 	movzbl 0x8b4(%edx),%edx
+ 4b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4b3:	89 d8                	mov    %ebx,%eax
+ 4b5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4b8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4bb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4be:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4c1:	76 dd                	jbe    4a0 <printint+0x30>
+  if(neg)
+ 4c3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4c6:	85 c9                	test   %ecx,%ecx
+ 4c8:	74 0c                	je     4d6 <printint+0x66>
+    buf[i++] = '-';
+ 4ca:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4cf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4d1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4d6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4d9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4dd:	eb 07                	jmp    4e6 <printint+0x76>
+ 4df:	90                   	nop
+ 4e0:	0f b6 13             	movzbl (%ebx),%edx
+ 4e3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4e6:	83 ec 04             	sub    $0x4,%esp
+ 4e9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ec:	6a 01                	push   $0x1
+ 4ee:	56                   	push   %esi
+ 4ef:	57                   	push   %edi
+ 4f0:	e8 ce fe ff ff       	call   3c3 <write>
+  while(--i >= 0)
+ 4f5:	83 c4 10             	add    $0x10,%esp
+ 4f8:	39 de                	cmp    %ebx,%esi
+ 4fa:	75 e4                	jne    4e0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ff:	5b                   	pop    %ebx
+ 500:	5e                   	pop    %esi
+ 501:	5f                   	pop    %edi
+ 502:	5d                   	pop    %ebp
+ 503:	c3                   	ret    
+ 504:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 508:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 50f:	eb 87                	jmp    498 <printint+0x28>
+ 511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 518:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51f:	90                   	nop
+
+00000520 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 520:	f3 0f 1e fb          	endbr32 
+ 524:	55                   	push   %ebp
+ 525:	89 e5                	mov    %esp,%ebp
+ 527:	57                   	push   %edi
+ 528:	56                   	push   %esi
+ 529:	53                   	push   %ebx
+ 52a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 52d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 530:	0f b6 1e             	movzbl (%esi),%ebx
+ 533:	84 db                	test   %bl,%bl
+ 535:	0f 84 b4 00 00 00    	je     5ef <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 53b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 53e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 541:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 544:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 546:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 549:	eb 33                	jmp    57e <printf+0x5e>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+ 550:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 553:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 558:	83 f8 25             	cmp    $0x25,%eax
+ 55b:	74 17                	je     574 <printf+0x54>
+  write(fd, &c, 1);
+ 55d:	83 ec 04             	sub    $0x4,%esp
+ 560:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 563:	6a 01                	push   $0x1
+ 565:	57                   	push   %edi
+ 566:	ff 75 08             	pushl  0x8(%ebp)
+ 569:	e8 55 fe ff ff       	call   3c3 <write>
+ 56e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 571:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 574:	0f b6 1e             	movzbl (%esi),%ebx
+ 577:	83 c6 01             	add    $0x1,%esi
+ 57a:	84 db                	test   %bl,%bl
+ 57c:	74 71                	je     5ef <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 57e:	0f be cb             	movsbl %bl,%ecx
+ 581:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 584:	85 d2                	test   %edx,%edx
+ 586:	74 c8                	je     550 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 588:	83 fa 25             	cmp    $0x25,%edx
+ 58b:	75 e7                	jne    574 <printf+0x54>
+      if(c == 'd'){
+ 58d:	83 f8 64             	cmp    $0x64,%eax
+ 590:	0f 84 9a 00 00 00    	je     630 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 596:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 59c:	83 f9 70             	cmp    $0x70,%ecx
+ 59f:	74 5f                	je     600 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5a1:	83 f8 73             	cmp    $0x73,%eax
+ 5a4:	0f 84 d6 00 00 00    	je     680 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5aa:	83 f8 63             	cmp    $0x63,%eax
+ 5ad:	0f 84 8d 00 00 00    	je     640 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5b3:	83 f8 25             	cmp    $0x25,%eax
+ 5b6:	0f 84 b4 00 00 00    	je     670 <printf+0x150>
+  write(fd, &c, 1);
+ 5bc:	83 ec 04             	sub    $0x4,%esp
+ 5bf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5c3:	6a 01                	push   $0x1
+ 5c5:	57                   	push   %edi
+ 5c6:	ff 75 08             	pushl  0x8(%ebp)
+ 5c9:	e8 f5 fd ff ff       	call   3c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5ce:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d1:	83 c4 0c             	add    $0xc,%esp
+ 5d4:	6a 01                	push   $0x1
+ 5d6:	83 c6 01             	add    $0x1,%esi
+ 5d9:	57                   	push   %edi
+ 5da:	ff 75 08             	pushl  0x8(%ebp)
+ 5dd:	e8 e1 fd ff ff       	call   3c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 5e2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5e6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5e9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5eb:	84 db                	test   %bl,%bl
+ 5ed:	75 8f                	jne    57e <printf+0x5e>
+    }
+  }
+}
+ 5ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5f2:	5b                   	pop    %ebx
+ 5f3:	5e                   	pop    %esi
+ 5f4:	5f                   	pop    %edi
+ 5f5:	5d                   	pop    %ebp
+ 5f6:	c3                   	ret    
+ 5f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fe:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 608:	6a 00                	push   $0x0
+ 60a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 60d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 610:	8b 13                	mov    (%ebx),%edx
+ 612:	e8 59 fe ff ff       	call   470 <printint>
+        ap++;
+ 617:	89 d8                	mov    %ebx,%eax
+ 619:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 61c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 61e:	83 c0 04             	add    $0x4,%eax
+ 621:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 624:	e9 4b ff ff ff       	jmp    574 <printf+0x54>
+ 629:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 630:	83 ec 0c             	sub    $0xc,%esp
+ 633:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 638:	6a 01                	push   $0x1
+ 63a:	eb ce                	jmp    60a <printf+0xea>
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 640:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 643:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 646:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 648:	6a 01                	push   $0x1
+        ap++;
+ 64a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 64d:	57                   	push   %edi
+ 64e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 651:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 654:	e8 6a fd ff ff       	call   3c3 <write>
+        ap++;
+ 659:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 65c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 65f:	31 d2                	xor    %edx,%edx
+ 661:	e9 0e ff ff ff       	jmp    574 <printf+0x54>
+ 666:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 66d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 670:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 673:	83 ec 04             	sub    $0x4,%esp
+ 676:	e9 59 ff ff ff       	jmp    5d4 <printf+0xb4>
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+        s = (char*)*ap;
+ 680:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 683:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 685:	83 c0 04             	add    $0x4,%eax
+ 688:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 68b:	85 db                	test   %ebx,%ebx
+ 68d:	74 17                	je     6a6 <printf+0x186>
+        while(*s != 0){
+ 68f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 692:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 694:	84 c0                	test   %al,%al
+ 696:	0f 84 d8 fe ff ff    	je     574 <printf+0x54>
+ 69c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 69f:	89 de                	mov    %ebx,%esi
+ 6a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a4:	eb 1a                	jmp    6c0 <printf+0x1a0>
+          s = "(null)";
+ 6a6:	bb ab 08 00 00       	mov    $0x8ab,%ebx
+        while(*s != 0){
+ 6ab:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ae:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6b3:	89 de                	mov    %ebx,%esi
+ 6b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6bf:	90                   	nop
+  write(fd, &c, 1);
+ 6c0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6c3:	83 c6 01             	add    $0x1,%esi
+ 6c6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6c9:	6a 01                	push   $0x1
+ 6cb:	57                   	push   %edi
+ 6cc:	53                   	push   %ebx
+ 6cd:	e8 f1 fc ff ff       	call   3c3 <write>
+        while(*s != 0){
+ 6d2:	0f b6 06             	movzbl (%esi),%eax
+ 6d5:	83 c4 10             	add    $0x10,%esp
+ 6d8:	84 c0                	test   %al,%al
+ 6da:	75 e4                	jne    6c0 <printf+0x1a0>
+ 6dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6df:	31 d2                	xor    %edx,%edx
+ 6e1:	e9 8e fe ff ff       	jmp    574 <printf+0x54>
+ 6e6:	66 90                	xchg   %ax,%ax
+ 6e8:	66 90                	xchg   %ax,%ax
+ 6ea:	66 90                	xchg   %ax,%ax
+ 6ec:	66 90                	xchg   %ax,%ax
+ 6ee:	66 90                	xchg   %ax,%ax
+
+000006f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6f0:	f3 0f 1e fb          	endbr32 
+ 6f4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f5:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+{
+ 6fa:	89 e5                	mov    %esp,%ebp
+ 6fc:	57                   	push   %edi
+ 6fd:	56                   	push   %esi
+ 6fe:	53                   	push   %ebx
+ 6ff:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 702:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 704:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 707:	39 c8                	cmp    %ecx,%eax
+ 709:	73 15                	jae    720 <free+0x30>
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+ 710:	39 d1                	cmp    %edx,%ecx
+ 712:	72 14                	jb     728 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 714:	39 d0                	cmp    %edx,%eax
+ 716:	73 10                	jae    728 <free+0x38>
+{
+ 718:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 71a:	8b 10                	mov    (%eax),%edx
+ 71c:	39 c8                	cmp    %ecx,%eax
+ 71e:	72 f0                	jb     710 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 720:	39 d0                	cmp    %edx,%eax
+ 722:	72 f4                	jb     718 <free+0x28>
+ 724:	39 d1                	cmp    %edx,%ecx
+ 726:	73 f0                	jae    718 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 728:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 72b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 72e:	39 fa                	cmp    %edi,%edx
+ 730:	74 1e                	je     750 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 732:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 735:	8b 50 04             	mov    0x4(%eax),%edx
+ 738:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 73b:	39 f1                	cmp    %esi,%ecx
+ 73d:	74 28                	je     767 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 73f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 741:	5b                   	pop    %ebx
+  freep = p;
+ 742:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+}
+ 747:	5e                   	pop    %esi
+ 748:	5f                   	pop    %edi
+ 749:	5d                   	pop    %ebp
+ 74a:	c3                   	ret    
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 750:	03 72 04             	add    0x4(%edx),%esi
+ 753:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 756:	8b 10                	mov    (%eax),%edx
+ 758:	8b 12                	mov    (%edx),%edx
+ 75a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 75d:	8b 50 04             	mov    0x4(%eax),%edx
+ 760:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 763:	39 f1                	cmp    %esi,%ecx
+ 765:	75 d8                	jne    73f <free+0x4f>
+    p->s.size += bp->s.size;
+ 767:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 76a:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+    p->s.size += bp->s.size;
+ 76f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 772:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 775:	89 10                	mov    %edx,(%eax)
+}
+ 777:	5b                   	pop    %ebx
+ 778:	5e                   	pop    %esi
+ 779:	5f                   	pop    %edi
+ 77a:	5d                   	pop    %ebp
+ 77b:	c3                   	ret    
+ 77c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000780 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 780:	f3 0f 1e fb          	endbr32 
+ 784:	55                   	push   %ebp
+ 785:	89 e5                	mov    %esp,%ebp
+ 787:	57                   	push   %edi
+ 788:	56                   	push   %esi
+ 789:	53                   	push   %ebx
+ 78a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 78d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 790:	8b 3d 6c 0b 00 00    	mov    0xb6c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 796:	8d 70 07             	lea    0x7(%eax),%esi
+ 799:	c1 ee 03             	shr    $0x3,%esi
+ 79c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 79f:	85 ff                	test   %edi,%edi
+ 7a1:	0f 84 a9 00 00 00    	je     850 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 7a9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ac:	39 f1                	cmp    %esi,%ecx
+ 7ae:	73 6d                	jae    81d <malloc+0x9d>
+ 7b0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7b6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7bb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7be:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7c5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7c8:	eb 17                	jmp    7e1 <malloc+0x61>
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7d0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7d2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7d5:	39 f1                	cmp    %esi,%ecx
+ 7d7:	73 4f                	jae    828 <malloc+0xa8>
+ 7d9:	8b 3d 6c 0b 00 00    	mov    0xb6c,%edi
+ 7df:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7e1:	39 c7                	cmp    %eax,%edi
+ 7e3:	75 eb                	jne    7d0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7e5:	83 ec 0c             	sub    $0xc,%esp
+ 7e8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7eb:	e8 3b fc ff ff       	call   42b <sbrk>
+  if(p == (char*)-1)
+ 7f0:	83 c4 10             	add    $0x10,%esp
+ 7f3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7f6:	74 1b                	je     813 <malloc+0x93>
+  hp->s.size = nu;
+ 7f8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7fb:	83 ec 0c             	sub    $0xc,%esp
+ 7fe:	83 c0 08             	add    $0x8,%eax
+ 801:	50                   	push   %eax
+ 802:	e8 e9 fe ff ff       	call   6f0 <free>
+  return freep;
+ 807:	a1 6c 0b 00 00       	mov    0xb6c,%eax
+      if((p = morecore(nunits)) == 0)
+ 80c:	83 c4 10             	add    $0x10,%esp
+ 80f:	85 c0                	test   %eax,%eax
+ 811:	75 bd                	jne    7d0 <malloc+0x50>
+        return 0;
+  }
+}
+ 813:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 816:	31 c0                	xor    %eax,%eax
+}
+ 818:	5b                   	pop    %ebx
+ 819:	5e                   	pop    %esi
+ 81a:	5f                   	pop    %edi
+ 81b:	5d                   	pop    %ebp
+ 81c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 81d:	89 c2                	mov    %eax,%edx
+ 81f:	89 f8                	mov    %edi,%eax
+ 821:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 828:	39 ce                	cmp    %ecx,%esi
+ 82a:	74 54                	je     880 <malloc+0x100>
+        p->s.size -= nunits;
+ 82c:	29 f1                	sub    %esi,%ecx
+ 82e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 831:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 834:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 837:	a3 6c 0b 00 00       	mov    %eax,0xb6c
+}
+ 83c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 83f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 842:	5b                   	pop    %ebx
+ 843:	5e                   	pop    %esi
+ 844:	5f                   	pop    %edi
+ 845:	5d                   	pop    %ebp
+ 846:	c3                   	ret    
+ 847:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 84e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 850:	c7 05 6c 0b 00 00 70 	movl   $0xb70,0xb6c
+ 857:	0b 00 00 
+    base.s.size = 0;
+ 85a:	bf 70 0b 00 00       	mov    $0xb70,%edi
+    base.s.ptr = freep = prevp = &base;
+ 85f:	c7 05 70 0b 00 00 70 	movl   $0xb70,0xb70
+ 866:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 869:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 86b:	c7 05 74 0b 00 00 00 	movl   $0x0,0xb74
+ 872:	00 00 00 
+    if(p->s.size >= nunits){
+ 875:	e9 36 ff ff ff       	jmp    7b0 <malloc+0x30>
+ 87a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 880:	8b 0a                	mov    (%edx),%ecx
+ 882:	89 08                	mov    %ecx,(%eax)
+ 884:	eb b1                	jmp    837 <malloc+0xb7>
diff -ruN xv6-public/stressfs.d xv6-public_mine/stressfs.d
--- xv6-public/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/stressfs.d	2021-09-30 23:42:26.913578910 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-public_mine/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-public_mine/stressfs.sym
--- xv6-public/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/stressfs.sym	2021-09-30 23:42:27.033614194 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000888 .rodata
+000008c8 .eh_frame
+00000b6c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000470 printint
+000008b4 digits.1101
+00000000 umalloc.c
+00000b6c freep
+00000b70 base
+00000140 strcpy
+0000045b set_prio
+00000520 printf
+00000370 memmove
+000003eb mknod
+00000260 gets
+00000423 getpid
+00000780 malloc
+00000433 sleep
+00000453 wait2
+000003b3 pipe
+000003c3 write
+0000044b history
+000003fb fstat
+000003d3 kill
+00000413 chdir
+000003db exec
+000003ab wait
+000003bb read
+000003f3 unlink
+0000039b fork
+0000042b sbrk
+0000043b uptime
+00000b6c __bss_start
+00000200 memset
+00000000 main
+00000170 strcmp
+0000041b dup
+000002e0 stat
+00000b6c _edata
+00000b78 _end
+00000403 link
+000003a3 exit
+00000330 atoi
+00000463 yield2
+00000443 draw
+000001c0 strlen
+000003e3 open
+00000220 strchr
+0000040b mkdir
+000003cb close
+000006f0 free
diff -ruN xv6-public/string.d xv6-public_mine/string.d
--- xv6-public/string.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/string.d	2021-09-30 23:41:56.989550071 +0530
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files xv6-public/string.o and xv6-public_mine/string.o differ
Binary files xv6-public/swtch.o and xv6-public_mine/swtch.o differ
diff -ruN xv6-public/syscall.c xv6-public_mine/syscall.c
--- xv6-public/syscall.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/syscall.c	2021-09-30 10:38:40.000000000 +0530
@@ -103,6 +103,11 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_draw(void);
+extern int sys_history(void);
+extern int sys_wait2(void);    
+extern int sys_set_prio(void);
+extern int sys_yield2(void);   
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +131,13 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+// adding system call vector
+[SYS_draw] sys_draw,
+// adding system call history
+[SYS_history] sys_history,
+[SYS_wait2]   sys_wait2,
+[SYS_set_prio] sys_set_prio,
+[SYS_yield2]  sys_yield2,
 };
 
 void
diff -ruN xv6-public/syscall.d xv6-public_mine/syscall.d
--- xv6-public/syscall.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/syscall.d	2021-09-30 23:41:57.629473724 +0530
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
diff -ruN xv6-public/syscall.h xv6-public_mine/syscall.h
--- xv6-public/syscall.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/syscall.h	2021-09-30 10:38:13.000000000 +0530
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+// A macro for SYS_draw as 22 which is its system call number.
+#define SYS_draw 22
+#define SYS_history 23
+#define SYS_wait2  24
+#define SYS_set_prio 25
+#define SYS_yield2 26
Binary files xv6-public/syscall.o and xv6-public_mine/syscall.o differ
diff -ruN xv6-public/sysfile.d xv6-public_mine/sysfile.d
--- xv6-public/sysfile.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sysfile.d	2021-09-30 23:41:58.765338622 +0530
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files xv6-public/sysfile.o and xv6-public_mine/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-public_mine/sysproc.c
--- xv6-public/sysproc.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/sysproc.c	2021-09-30 21:28:14.000000000 +0530
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-
+#include "ASCII_image.h"
 int
 sys_fork(void)
 {
@@ -89,3 +89,77 @@
   release(&tickslock);
   return xticks;
 }
+
+
+// Implementing a sys_draw function
+int sys_draw(void)
+{
+
+  char *buffer;
+  int size;
+
+  // Feches the 1st 32 bit int argument which is the max buffer sizeand assigns it to the size
+  if (argint(1, &size) == -1)
+  {
+    // Invalid address is accessed
+    return -1;
+  }
+
+  // Check that the buffer pointer in first argument
+  // lies within the process address space or not till size bytes, if it does not then return -1.
+  if (argptr(0, (char **)&buffer, size) == -1)
+  {
+    // does not lie in the process address space.
+    return -1;
+  }
+  
+  // copying macro wolfi from ASCII_image.h
+  char *draw = wolfi;
+  
+  int drawsize = 0;
+  while (draw[drawsize] != '\0')
+  {
+    drawsize++;
+  }
+
+  if (drawsize > size)
+  {
+    //buffer size is insufficient to draw the wolf picture.
+    return -1;
+  }
+  
+  //copying the wolf picture into the buffer.
+  for (int i = 0; i < drawsize; i++)
+  {
+    buffer[i] = draw[i];
+  }
+  
+  //return the size of draw pictue
+  return drawsize;
+}
+
+int sys_history(void) {
+  char *buffer;
+  int historyId;
+  
+  argptr(0, &buffer, 1);
+  
+  argint(1, &historyId);
+
+  return history(buffer, historyId);
+}
+
+
+int sys_wait2(void) {
+  int *ctime, *retime, *rutime, *stime;
+  if (argptr(0, (void*)&ctime, sizeof(ctime)) == -1)
+    return -1;
+  if (argptr(1, (void*)&retime, sizeof(retime)) == -1)
+    return -1;
+  if (argptr(2, (void*)&rutime, sizeof(rutime)) == -1)
+    return -1;
+  if (argptr(3, (void*)&stime, sizeof(stime)) == -1)
+    return -1;
+  return wait2(ctime, retime, rutime, stime);
+}
+
diff -ruN xv6-public/sysproc.d xv6-public_mine/sysproc.d
--- xv6-public/sysproc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/sysproc.d	2021-09-30 23:41:59.449257624 +0530
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h ASCII_image.h
Binary files xv6-public/sysproc.o and xv6-public_mine/sysproc.o differ
Binary files xv6-public/trapasm.o and xv6-public_mine/trapasm.o differ
diff -ruN xv6-public/trap.c xv6-public_mine/trap.c
--- xv6-public/trap.c	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/trap.c	2021-09-30 22:50:51.977975089 +0530
@@ -14,6 +14,9 @@
 struct spinlock tickslock;
 uint ticks;
 
+extern int inc_tickcounter(void);
+extern void decpriority(void);
+
 void
 tvinit(void)
 {
@@ -51,6 +54,7 @@
     if(cpuid() == 0){
       acquire(&tickslock);
       ticks++;
+      updatestatistics(); //will update proc statistic every clock tick
       wakeup(&ticks);
       release(&tickslock);
     }
@@ -102,10 +106,31 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+  
 
+#ifdef DEFAULT
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER && inc_tickcounter() % QUANTA == 0) {
+    yield();
+  }
+  #endif
+  #ifdef FCFS
+  // do not yield
+  #endif
+  #ifdef SML
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER) {
+    yield();
+  }
+  #endif
+  #ifdef DML
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER && inc_tickcounter() % QUANTA == 0) {
+    decpriority();
+    yield();
+  }
+  #endif
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
     exit();
diff -ruN xv6-public/trap.d xv6-public_mine/trap.d
--- xv6-public/trap.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/trap.d	2021-09-30 23:41:59.881206548 +0530
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files xv6-public/trap.o and xv6-public_mine/trap.o differ
diff -ruN xv6-public/types.h xv6-public_mine/types.h
--- xv6-public/types.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/types.h	2021-09-30 10:36:02.000000000 +0530
@@ -2,3 +2,10 @@
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
 typedef uint pde_t;
+
+#define INPUT_BUF 128
+#define MAX_HISTORY 16
+
+typedef int bool;
+#define true (1)
+#define false (0)
diff -ruN xv6-public/uart.d xv6-public_mine/uart.d
--- xv6-public/uart.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/uart.d	2021-09-30 23:42:00.189170219 +0530
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files xv6-public/uart.o and xv6-public_mine/uart.o differ
diff -ruN xv6-public/ulib.d xv6-public_mine/ulib.d
--- xv6-public/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/ulib.d	2021-09-30 23:42:18.310852082 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files xv6-public/ulib.o and xv6-public_mine/ulib.o differ
diff -ruN xv6-public/umalloc.d xv6-public_mine/umalloc.d
--- xv6-public/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/umalloc.d	2021-09-30 23:42:19.263174797 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files xv6-public/umalloc.o and xv6-public_mine/umalloc.o differ
diff -ruN xv6-public/user.h xv6-public_mine/user.h
--- xv6-public/user.h	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/user.h	2021-09-30 21:13:53.000000000 +0530
@@ -23,6 +23,14 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+// system call created which copies the ASCII image of wolf picture
+int draw(void *buf, uint size);
+// system call which print last 16 commands executed.
+int history(char *buf, uint historyId);
+int wait2(int*, int*, int*, int*);
+int set_prio(int);
+int yield2(void);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
Binary files xv6-public/_usertests and xv6-public_mine/_usertests differ
diff -ruN xv6-public/usertests.asm xv6-public_mine/usertests.asm
--- xv6-public/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/usertests.asm	2021-09-30 23:42:30.546609202 +0530
@@ -0,0 +1,6714 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      15:	68 56 4e 00 00       	push   $0x4e56
+      1a:	6a 01                	push   $0x1
+      1c:	e8 df 3a 00 00       	call   3b00 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      21:	59                   	pop    %ecx
+      22:	58                   	pop    %eax
+      23:	6a 00                	push   $0x0
+      25:	68 6a 4e 00 00       	push   $0x4e6a
+      2a:	e8 94 39 00 00       	call   39c3 <open>
+      2f:	83 c4 10             	add    $0x10,%esp
+      32:	85 c0                	test   %eax,%eax
+      34:	78 13                	js     49 <main+0x49>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      36:	52                   	push   %edx
+      37:	52                   	push   %edx
+      38:	68 d4 55 00 00       	push   $0x55d4
+      3d:	6a 01                	push   $0x1
+      3f:	e8 bc 3a 00 00       	call   3b00 <printf>
+    exit();
+      44:	e8 3a 39 00 00       	call   3983 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      49:	50                   	push   %eax
+      4a:	50                   	push   %eax
+      4b:	68 00 02 00 00       	push   $0x200
+      50:	68 6a 4e 00 00       	push   $0x4e6a
+      55:	e8 69 39 00 00       	call   39c3 <open>
+      5a:	89 04 24             	mov    %eax,(%esp)
+      5d:	e8 49 39 00 00       	call   39ab <close>
+
+  argptest();
+      62:	e8 29 36 00 00       	call   3690 <argptest>
+  createdelete();
+      67:	e8 04 12 00 00       	call   1270 <createdelete>
+  linkunlink();
+      6c:	e8 df 1a 00 00       	call   1b50 <linkunlink>
+  concreate();
+      71:	e8 da 17 00 00       	call   1850 <concreate>
+  fourfiles();
+      76:	e8 f5 0f 00 00       	call   1070 <fourfiles>
+  sharedfd();
+      7b:	e8 30 0e 00 00       	call   eb0 <sharedfd>
+
+  bigargtest();
+      80:	e8 ab 32 00 00       	call   3330 <bigargtest>
+  bigwrite();
+      85:	e8 06 24 00 00       	call   2490 <bigwrite>
+  bigargtest();
+      8a:	e8 a1 32 00 00       	call   3330 <bigargtest>
+  bsstest();
+      8f:	e8 2c 32 00 00       	call   32c0 <bsstest>
+  sbrktest();
+      94:	e8 37 2d 00 00       	call   2dd0 <sbrktest>
+  validatetest();
+      99:	e8 62 31 00 00       	call   3200 <validatetest>
+
+  opentest();
+      9e:	e8 6d 03 00 00       	call   410 <opentest>
+  writetest();
+      a3:	e8 08 04 00 00       	call   4b0 <writetest>
+  writetest1();
+      a8:	e8 e3 05 00 00       	call   690 <writetest1>
+  createtest();
+      ad:	e8 ae 07 00 00       	call   860 <createtest>
+
+  openiputtest();
+      b2:	e8 59 02 00 00       	call   310 <openiputtest>
+  exitiputtest();
+      b7:	e8 54 01 00 00       	call   210 <exitiputtest>
+  iputtest();
+      bc:	e8 5f 00 00 00       	call   120 <iputtest>
+
+  mem();
+      c1:	e8 1a 0d 00 00       	call   de0 <mem>
+  pipe1();
+      c6:	e8 95 09 00 00       	call   a60 <pipe1>
+  preempt();
+      cb:	e8 30 0b 00 00       	call   c00 <preempt>
+  exitwait();
+      d0:	e8 8b 0c 00 00       	call   d60 <exitwait>
+
+  rmdot();
+      d5:	e8 a6 27 00 00       	call   2880 <rmdot>
+  fourteen();
+      da:	e8 61 26 00 00       	call   2740 <fourteen>
+  bigfile();
+      df:	e8 8c 24 00 00       	call   2570 <bigfile>
+  subdir();
+      e4:	e8 b7 1c 00 00       	call   1da0 <subdir>
+  linktest();
+      e9:	e8 42 15 00 00       	call   1630 <linktest>
+  unlinkread();
+      ee:	e8 ad 13 00 00       	call   14a0 <unlinkread>
+  dirfile();
+      f3:	e8 08 29 00 00       	call   2a00 <dirfile>
+  iref();
+      f8:	e8 03 2b 00 00       	call   2c00 <iref>
+  forktest();
+      fd:	e8 1e 2c 00 00       	call   2d20 <forktest>
+  bigdir(); // slow
+     102:	e8 59 1b 00 00       	call   1c60 <bigdir>
+
+  uio();
+     107:	e8 04 35 00 00       	call   3610 <uio>
+
+  exectest();
+     10c:	e8 ff 08 00 00       	call   a10 <exectest>
+
+  exit();
+     111:	e8 6d 38 00 00       	call   3983 <exit>
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	f3 0f 1e fb          	endbr32 
+     124:	55                   	push   %ebp
+     125:	89 e5                	mov    %esp,%ebp
+     127:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     12a:	68 fc 3e 00 00       	push   $0x3efc
+     12f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     135:	e8 c6 39 00 00       	call   3b00 <printf>
+  if(mkdir("iputdir") < 0){
+     13a:	c7 04 24 8f 3e 00 00 	movl   $0x3e8f,(%esp)
+     141:	e8 a5 38 00 00       	call   39eb <mkdir>
+     146:	83 c4 10             	add    $0x10,%esp
+     149:	85 c0                	test   %eax,%eax
+     14b:	78 58                	js     1a5 <iputtest+0x85>
+  if(chdir("iputdir") < 0){
+     14d:	83 ec 0c             	sub    $0xc,%esp
+     150:	68 8f 3e 00 00       	push   $0x3e8f
+     155:	e8 99 38 00 00       	call   39f3 <chdir>
+     15a:	83 c4 10             	add    $0x10,%esp
+     15d:	85 c0                	test   %eax,%eax
+     15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
+  if(unlink("../iputdir") < 0){
+     165:	83 ec 0c             	sub    $0xc,%esp
+     168:	68 8c 3e 00 00       	push   $0x3e8c
+     16d:	e8 61 38 00 00       	call   39d3 <unlink>
+     172:	83 c4 10             	add    $0x10,%esp
+     175:	85 c0                	test   %eax,%eax
+     177:	78 5a                	js     1d3 <iputtest+0xb3>
+  if(chdir("/") < 0){
+     179:	83 ec 0c             	sub    $0xc,%esp
+     17c:	68 b1 3e 00 00       	push   $0x3eb1
+     181:	e8 6d 38 00 00       	call   39f3 <chdir>
+     186:	83 c4 10             	add    $0x10,%esp
+     189:	85 c0                	test   %eax,%eax
+     18b:	78 2f                	js     1bc <iputtest+0x9c>
+  printf(stdout, "iput test ok\n");
+     18d:	83 ec 08             	sub    $0x8,%esp
+     190:	68 34 3f 00 00       	push   $0x3f34
+     195:	ff 35 00 5f 00 00    	pushl  0x5f00
+     19b:	e8 60 39 00 00       	call   3b00 <printf>
+}
+     1a0:	83 c4 10             	add    $0x10,%esp
+     1a3:	c9                   	leave  
+     1a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a5:	50                   	push   %eax
+     1a6:	50                   	push   %eax
+     1a7:	68 68 3e 00 00       	push   $0x3e68
+     1ac:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1b2:	e8 49 39 00 00       	call   3b00 <printf>
+    exit();
+     1b7:	e8 c7 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir / failed\n");
+     1bc:	50                   	push   %eax
+     1bd:	50                   	push   %eax
+     1be:	68 b3 3e 00 00       	push   $0x3eb3
+     1c3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1c9:	e8 32 39 00 00       	call   3b00 <printf>
+    exit();
+     1ce:	e8 b0 37 00 00       	call   3983 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1d3:	52                   	push   %edx
+     1d4:	52                   	push   %edx
+     1d5:	68 97 3e 00 00       	push   $0x3e97
+     1da:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1e0:	e8 1b 39 00 00       	call   3b00 <printf>
+    exit();
+     1e5:	e8 99 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1ea:	51                   	push   %ecx
+     1eb:	51                   	push   %ecx
+     1ec:	68 76 3e 00 00       	push   $0x3e76
+     1f1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     1f7:	e8 04 39 00 00       	call   3b00 <printf>
+    exit();
+     1fc:	e8 82 37 00 00       	call   3983 <exit>
+     201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     20f:	90                   	nop
+
+00000210 <exitiputtest>:
+{
+     210:	f3 0f 1e fb          	endbr32 
+     214:	55                   	push   %ebp
+     215:	89 e5                	mov    %esp,%ebp
+     217:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     21a:	68 c3 3e 00 00       	push   $0x3ec3
+     21f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     225:	e8 d6 38 00 00       	call   3b00 <printf>
+  pid = fork();
+     22a:	e8 4c 37 00 00       	call   397b <fork>
+  if(pid < 0){
+     22f:	83 c4 10             	add    $0x10,%esp
+     232:	85 c0                	test   %eax,%eax
+     234:	0f 88 86 00 00 00    	js     2c0 <exitiputtest+0xb0>
+  if(pid == 0){
+     23a:	75 4c                	jne    288 <exitiputtest+0x78>
+    if(mkdir("iputdir") < 0){
+     23c:	83 ec 0c             	sub    $0xc,%esp
+     23f:	68 8f 3e 00 00       	push   $0x3e8f
+     244:	e8 a2 37 00 00       	call   39eb <mkdir>
+     249:	83 c4 10             	add    $0x10,%esp
+     24c:	85 c0                	test   %eax,%eax
+     24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
+    if(chdir("iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 8f 3e 00 00       	push   $0x3e8f
+     25c:	e8 92 37 00 00       	call   39f3 <chdir>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
+    if(unlink("../iputdir") < 0){
+     26c:	83 ec 0c             	sub    $0xc,%esp
+     26f:	68 8c 3e 00 00       	push   $0x3e8c
+     274:	e8 5a 37 00 00       	call   39d3 <unlink>
+     279:	83 c4 10             	add    $0x10,%esp
+     27c:	85 c0                	test   %eax,%eax
+     27e:	78 28                	js     2a8 <exitiputtest+0x98>
+    exit();
+     280:	e8 fe 36 00 00       	call   3983 <exit>
+     285:	8d 76 00             	lea    0x0(%esi),%esi
+  wait();
+     288:	e8 fe 36 00 00       	call   398b <wait>
+  printf(stdout, "exitiput test ok\n");
+     28d:	83 ec 08             	sub    $0x8,%esp
+     290:	68 e6 3e 00 00       	push   $0x3ee6
+     295:	ff 35 00 5f 00 00    	pushl  0x5f00
+     29b:	e8 60 38 00 00       	call   3b00 <printf>
+}
+     2a0:	83 c4 10             	add    $0x10,%esp
+     2a3:	c9                   	leave  
+     2a4:	c3                   	ret    
+     2a5:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     2a8:	83 ec 08             	sub    $0x8,%esp
+     2ab:	68 97 3e 00 00       	push   $0x3e97
+     2b0:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2b6:	e8 45 38 00 00       	call   3b00 <printf>
+      exit();
+     2bb:	e8 c3 36 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     2c0:	51                   	push   %ecx
+     2c1:	51                   	push   %ecx
+     2c2:	68 a9 4d 00 00       	push   $0x4da9
+     2c7:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2cd:	e8 2e 38 00 00       	call   3b00 <printf>
+    exit();
+     2d2:	e8 ac 36 00 00       	call   3983 <exit>
+      printf(stdout, "mkdir failed\n");
+     2d7:	52                   	push   %edx
+     2d8:	52                   	push   %edx
+     2d9:	68 68 3e 00 00       	push   $0x3e68
+     2de:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2e4:	e8 17 38 00 00       	call   3b00 <printf>
+      exit();
+     2e9:	e8 95 36 00 00       	call   3983 <exit>
+      printf(stdout, "child chdir failed\n");
+     2ee:	50                   	push   %eax
+     2ef:	50                   	push   %eax
+     2f0:	68 d2 3e 00 00       	push   $0x3ed2
+     2f5:	ff 35 00 5f 00 00    	pushl  0x5f00
+     2fb:	e8 00 38 00 00       	call   3b00 <printf>
+      exit();
+     300:	e8 7e 36 00 00       	call   3983 <exit>
+     305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <openiputtest>:
+{
+     310:	f3 0f 1e fb          	endbr32 
+     314:	55                   	push   %ebp
+     315:	89 e5                	mov    %esp,%ebp
+     317:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     31a:	68 f8 3e 00 00       	push   $0x3ef8
+     31f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     325:	e8 d6 37 00 00       	call   3b00 <printf>
+  if(mkdir("oidir") < 0){
+     32a:	c7 04 24 07 3f 00 00 	movl   $0x3f07,(%esp)
+     331:	e8 b5 36 00 00       	call   39eb <mkdir>
+     336:	83 c4 10             	add    $0x10,%esp
+     339:	85 c0                	test   %eax,%eax
+     33b:	0f 88 9b 00 00 00    	js     3dc <openiputtest+0xcc>
+  pid = fork();
+     341:	e8 35 36 00 00       	call   397b <fork>
+  if(pid < 0){
+     346:	85 c0                	test   %eax,%eax
+     348:	78 7b                	js     3c5 <openiputtest+0xb5>
+  if(pid == 0){
+     34a:	75 34                	jne    380 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     34c:	83 ec 08             	sub    $0x8,%esp
+     34f:	6a 02                	push   $0x2
+     351:	68 07 3f 00 00       	push   $0x3f07
+     356:	e8 68 36 00 00       	call   39c3 <open>
+    if(fd >= 0){
+     35b:	83 c4 10             	add    $0x10,%esp
+     35e:	85 c0                	test   %eax,%eax
+     360:	78 5e                	js     3c0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     362:	83 ec 08             	sub    $0x8,%esp
+     365:	68 8c 4e 00 00       	push   $0x4e8c
+     36a:	ff 35 00 5f 00 00    	pushl  0x5f00
+     370:	e8 8b 37 00 00       	call   3b00 <printf>
+      exit();
+     375:	e8 09 36 00 00       	call   3983 <exit>
+     37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  sleep(1);
+     380:	83 ec 0c             	sub    $0xc,%esp
+     383:	6a 01                	push   $0x1
+     385:	e8 89 36 00 00       	call   3a13 <sleep>
+  if(unlink("oidir") != 0){
+     38a:	c7 04 24 07 3f 00 00 	movl   $0x3f07,(%esp)
+     391:	e8 3d 36 00 00       	call   39d3 <unlink>
+     396:	83 c4 10             	add    $0x10,%esp
+     399:	85 c0                	test   %eax,%eax
+     39b:	75 56                	jne    3f3 <openiputtest+0xe3>
+  wait();
+     39d:	e8 e9 35 00 00       	call   398b <wait>
+  printf(stdout, "openiput test ok\n");
+     3a2:	83 ec 08             	sub    $0x8,%esp
+     3a5:	68 30 3f 00 00       	push   $0x3f30
+     3aa:	ff 35 00 5f 00 00    	pushl  0x5f00
+     3b0:	e8 4b 37 00 00       	call   3b00 <printf>
+     3b5:	83 c4 10             	add    $0x10,%esp
+}
+     3b8:	c9                   	leave  
+     3b9:	c3                   	ret    
+     3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3c0:	e8 be 35 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     3c5:	52                   	push   %edx
+     3c6:	52                   	push   %edx
+     3c7:	68 a9 4d 00 00       	push   $0x4da9
+     3cc:	ff 35 00 5f 00 00    	pushl  0x5f00
+     3d2:	e8 29 37 00 00       	call   3b00 <printf>
+    exit();
+     3d7:	e8 a7 35 00 00       	call   3983 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3dc:	51                   	push   %ecx
+     3dd:	51                   	push   %ecx
+     3de:	68 0d 3f 00 00       	push   $0x3f0d
+     3e3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     3e9:	e8 12 37 00 00       	call   3b00 <printf>
+    exit();
+     3ee:	e8 90 35 00 00       	call   3983 <exit>
+    printf(stdout, "unlink failed\n");
+     3f3:	50                   	push   %eax
+     3f4:	50                   	push   %eax
+     3f5:	68 21 3f 00 00       	push   $0x3f21
+     3fa:	ff 35 00 5f 00 00    	pushl  0x5f00
+     400:	e8 fb 36 00 00       	call   3b00 <printf>
+    exit();
+     405:	e8 79 35 00 00       	call   3983 <exit>
+     40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000410 <opentest>:
+{
+     410:	f3 0f 1e fb          	endbr32 
+     414:	55                   	push   %ebp
+     415:	89 e5                	mov    %esp,%ebp
+     417:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     41a:	68 42 3f 00 00       	push   $0x3f42
+     41f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     425:	e8 d6 36 00 00       	call   3b00 <printf>
+  fd = open("echo", 0);
+     42a:	58                   	pop    %eax
+     42b:	5a                   	pop    %edx
+     42c:	6a 00                	push   $0x0
+     42e:	68 4d 3f 00 00       	push   $0x3f4d
+     433:	e8 8b 35 00 00       	call   39c3 <open>
+  if(fd < 0){
+     438:	83 c4 10             	add    $0x10,%esp
+     43b:	85 c0                	test   %eax,%eax
+     43d:	78 36                	js     475 <opentest+0x65>
+  close(fd);
+     43f:	83 ec 0c             	sub    $0xc,%esp
+     442:	50                   	push   %eax
+     443:	e8 63 35 00 00       	call   39ab <close>
+  fd = open("doesnotexist", 0);
+     448:	5a                   	pop    %edx
+     449:	59                   	pop    %ecx
+     44a:	6a 00                	push   $0x0
+     44c:	68 65 3f 00 00       	push   $0x3f65
+     451:	e8 6d 35 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     456:	83 c4 10             	add    $0x10,%esp
+     459:	85 c0                	test   %eax,%eax
+     45b:	79 2f                	jns    48c <opentest+0x7c>
+  printf(stdout, "open test ok\n");
+     45d:	83 ec 08             	sub    $0x8,%esp
+     460:	68 90 3f 00 00       	push   $0x3f90
+     465:	ff 35 00 5f 00 00    	pushl  0x5f00
+     46b:	e8 90 36 00 00       	call   3b00 <printf>
+}
+     470:	83 c4 10             	add    $0x10,%esp
+     473:	c9                   	leave  
+     474:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     475:	50                   	push   %eax
+     476:	50                   	push   %eax
+     477:	68 52 3f 00 00       	push   $0x3f52
+     47c:	ff 35 00 5f 00 00    	pushl  0x5f00
+     482:	e8 79 36 00 00       	call   3b00 <printf>
+    exit();
+     487:	e8 f7 34 00 00       	call   3983 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     48c:	50                   	push   %eax
+     48d:	50                   	push   %eax
+     48e:	68 72 3f 00 00       	push   $0x3f72
+     493:	ff 35 00 5f 00 00    	pushl  0x5f00
+     499:	e8 62 36 00 00       	call   3b00 <printf>
+    exit();
+     49e:	e8 e0 34 00 00       	call   3983 <exit>
+     4a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000004b0 <writetest>:
+{
+     4b0:	f3 0f 1e fb          	endbr32 
+     4b4:	55                   	push   %ebp
+     4b5:	89 e5                	mov    %esp,%ebp
+     4b7:	56                   	push   %esi
+     4b8:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     4b9:	83 ec 08             	sub    $0x8,%esp
+     4bc:	68 9e 3f 00 00       	push   $0x3f9e
+     4c1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     4c7:	e8 34 36 00 00       	call   3b00 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     4cc:	58                   	pop    %eax
+     4cd:	5a                   	pop    %edx
+     4ce:	68 02 02 00 00       	push   $0x202
+     4d3:	68 af 3f 00 00       	push   $0x3faf
+     4d8:	e8 e6 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     4dd:	83 c4 10             	add    $0x10,%esp
+     4e0:	85 c0                	test   %eax,%eax
+     4e2:	0f 88 8c 01 00 00    	js     674 <writetest+0x1c4>
+    printf(stdout, "creat small succeeded; ok\n");
+     4e8:	83 ec 08             	sub    $0x8,%esp
+     4eb:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4ed:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4ef:	68 b5 3f 00 00       	push   $0x3fb5
+     4f4:	ff 35 00 5f 00 00    	pushl  0x5f00
+     4fa:	e8 01 36 00 00       	call   3b00 <printf>
+     4ff:	83 c4 10             	add    $0x10,%esp
+     502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     508:	83 ec 04             	sub    $0x4,%esp
+     50b:	6a 0a                	push   $0xa
+     50d:	68 ec 3f 00 00       	push   $0x3fec
+     512:	56                   	push   %esi
+     513:	e8 8b 34 00 00       	call   39a3 <write>
+     518:	83 c4 10             	add    $0x10,%esp
+     51b:	83 f8 0a             	cmp    $0xa,%eax
+     51e:	0f 85 d9 00 00 00    	jne    5fd <writetest+0x14d>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     524:	83 ec 04             	sub    $0x4,%esp
+     527:	6a 0a                	push   $0xa
+     529:	68 f7 3f 00 00       	push   $0x3ff7
+     52e:	56                   	push   %esi
+     52f:	e8 6f 34 00 00       	call   39a3 <write>
+     534:	83 c4 10             	add    $0x10,%esp
+     537:	83 f8 0a             	cmp    $0xa,%eax
+     53a:	0f 85 d6 00 00 00    	jne    616 <writetest+0x166>
+  for(i = 0; i < 100; i++){
+     540:	83 c3 01             	add    $0x1,%ebx
+     543:	83 fb 64             	cmp    $0x64,%ebx
+     546:	75 c0                	jne    508 <writetest+0x58>
+  printf(stdout, "writes ok\n");
+     548:	83 ec 08             	sub    $0x8,%esp
+     54b:	68 02 40 00 00       	push   $0x4002
+     550:	ff 35 00 5f 00 00    	pushl  0x5f00
+     556:	e8 a5 35 00 00       	call   3b00 <printf>
+  close(fd);
+     55b:	89 34 24             	mov    %esi,(%esp)
+     55e:	e8 48 34 00 00       	call   39ab <close>
+  fd = open("small", O_RDONLY);
+     563:	5b                   	pop    %ebx
+     564:	5e                   	pop    %esi
+     565:	6a 00                	push   $0x0
+     567:	68 af 3f 00 00       	push   $0x3faf
+     56c:	e8 52 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     571:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     574:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     576:	85 c0                	test   %eax,%eax
+     578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
+    printf(stdout, "open small succeeded ok\n");
+     57e:	83 ec 08             	sub    $0x8,%esp
+     581:	68 0d 40 00 00       	push   $0x400d
+     586:	ff 35 00 5f 00 00    	pushl  0x5f00
+     58c:	e8 6f 35 00 00       	call   3b00 <printf>
+  i = read(fd, buf, 2000);
+     591:	83 c4 0c             	add    $0xc,%esp
+     594:	68 d0 07 00 00       	push   $0x7d0
+     599:	68 e0 86 00 00       	push   $0x86e0
+     59e:	53                   	push   %ebx
+     59f:	e8 f7 33 00 00       	call   399b <read>
+  if(i == 2000){
+     5a4:	83 c4 10             	add    $0x10,%esp
+     5a7:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
+    printf(stdout, "read succeeded ok\n");
+     5b2:	83 ec 08             	sub    $0x8,%esp
+     5b5:	68 41 40 00 00       	push   $0x4041
+     5ba:	ff 35 00 5f 00 00    	pushl  0x5f00
+     5c0:	e8 3b 35 00 00       	call   3b00 <printf>
+  close(fd);
+     5c5:	89 1c 24             	mov    %ebx,(%esp)
+     5c8:	e8 de 33 00 00       	call   39ab <close>
+  if(unlink("small") < 0){
+     5cd:	c7 04 24 af 3f 00 00 	movl   $0x3faf,(%esp)
+     5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
+     5d9:	83 c4 10             	add    $0x10,%esp
+     5dc:	85 c0                	test   %eax,%eax
+     5de:	78 7d                	js     65d <writetest+0x1ad>
+  printf(stdout, "small file test ok\n");
+     5e0:	83 ec 08             	sub    $0x8,%esp
+     5e3:	68 69 40 00 00       	push   $0x4069
+     5e8:	ff 35 00 5f 00 00    	pushl  0x5f00
+     5ee:	e8 0d 35 00 00       	call   3b00 <printf>
+}
+     5f3:	83 c4 10             	add    $0x10,%esp
+     5f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5f9:	5b                   	pop    %ebx
+     5fa:	5e                   	pop    %esi
+     5fb:	5d                   	pop    %ebp
+     5fc:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5fd:	83 ec 04             	sub    $0x4,%esp
+     600:	53                   	push   %ebx
+     601:	68 b0 4e 00 00       	push   $0x4eb0
+     606:	ff 35 00 5f 00 00    	pushl  0x5f00
+     60c:	e8 ef 34 00 00       	call   3b00 <printf>
+      exit();
+     611:	e8 6d 33 00 00       	call   3983 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     616:	83 ec 04             	sub    $0x4,%esp
+     619:	53                   	push   %ebx
+     61a:	68 d4 4e 00 00       	push   $0x4ed4
+     61f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     625:	e8 d6 34 00 00       	call   3b00 <printf>
+      exit();
+     62a:	e8 54 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: open small failed!\n");
+     62f:	51                   	push   %ecx
+     630:	51                   	push   %ecx
+     631:	68 26 40 00 00       	push   $0x4026
+     636:	ff 35 00 5f 00 00    	pushl  0x5f00
+     63c:	e8 bf 34 00 00       	call   3b00 <printf>
+    exit();
+     641:	e8 3d 33 00 00       	call   3983 <exit>
+    printf(stdout, "read failed\n");
+     646:	52                   	push   %edx
+     647:	52                   	push   %edx
+     648:	68 6d 43 00 00       	push   $0x436d
+     64d:	ff 35 00 5f 00 00    	pushl  0x5f00
+     653:	e8 a8 34 00 00       	call   3b00 <printf>
+    exit();
+     658:	e8 26 33 00 00       	call   3983 <exit>
+    printf(stdout, "unlink small failed\n");
+     65d:	50                   	push   %eax
+     65e:	50                   	push   %eax
+     65f:	68 54 40 00 00       	push   $0x4054
+     664:	ff 35 00 5f 00 00    	pushl  0x5f00
+     66a:	e8 91 34 00 00       	call   3b00 <printf>
+    exit();
+     66f:	e8 0f 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     674:	50                   	push   %eax
+     675:	50                   	push   %eax
+     676:	68 d0 3f 00 00       	push   $0x3fd0
+     67b:	ff 35 00 5f 00 00    	pushl  0x5f00
+     681:	e8 7a 34 00 00       	call   3b00 <printf>
+    exit();
+     686:	e8 f8 32 00 00       	call   3983 <exit>
+     68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     68f:	90                   	nop
+
+00000690 <writetest1>:
+{
+     690:	f3 0f 1e fb          	endbr32 
+     694:	55                   	push   %ebp
+     695:	89 e5                	mov    %esp,%ebp
+     697:	56                   	push   %esi
+     698:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     699:	83 ec 08             	sub    $0x8,%esp
+     69c:	68 7d 40 00 00       	push   $0x407d
+     6a1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     6a7:	e8 54 34 00 00       	call   3b00 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     6ac:	58                   	pop    %eax
+     6ad:	5a                   	pop    %edx
+     6ae:	68 02 02 00 00       	push   $0x202
+     6b3:	68 f7 40 00 00       	push   $0x40f7
+     6b8:	e8 06 33 00 00       	call   39c3 <open>
+  if(fd < 0){
+     6bd:	83 c4 10             	add    $0x10,%esp
+     6c0:	85 c0                	test   %eax,%eax
+     6c2:	0f 88 5d 01 00 00    	js     825 <writetest1+0x195>
+     6c8:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     6ca:	31 db                	xor    %ebx,%ebx
+     6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(write(fd, buf, 512) != 512){
+     6d0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6d3:	89 1d e0 86 00 00    	mov    %ebx,0x86e0
+    if(write(fd, buf, 512) != 512){
+     6d9:	68 00 02 00 00       	push   $0x200
+     6de:	68 e0 86 00 00       	push   $0x86e0
+     6e3:	56                   	push   %esi
+     6e4:	e8 ba 32 00 00       	call   39a3 <write>
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6f1:	0f 85 b3 00 00 00    	jne    7aa <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6f7:	83 c3 01             	add    $0x1,%ebx
+     6fa:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     700:	75 ce                	jne    6d0 <writetest1+0x40>
+  close(fd);
+     702:	83 ec 0c             	sub    $0xc,%esp
+     705:	56                   	push   %esi
+     706:	e8 a0 32 00 00       	call   39ab <close>
+  fd = open("big", O_RDONLY);
+     70b:	5b                   	pop    %ebx
+     70c:	5e                   	pop    %esi
+     70d:	6a 00                	push   $0x0
+     70f:	68 f7 40 00 00       	push   $0x40f7
+     714:	e8 aa 32 00 00       	call   39c3 <open>
+  if(fd < 0){
+     719:	83 c4 10             	add    $0x10,%esp
+  fd = open("big", O_RDONLY);
+     71c:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+     71e:	85 c0                	test   %eax,%eax
+     720:	0f 88 e8 00 00 00    	js     80e <writetest1+0x17e>
+  n = 0;
+     726:	31 f6                	xor    %esi,%esi
+     728:	eb 1d                	jmp    747 <writetest1+0xb7>
+     72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     730:	3d 00 02 00 00       	cmp    $0x200,%eax
+     735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     73b:	a1 e0 86 00 00       	mov    0x86e0,%eax
+     740:	39 f0                	cmp    %esi,%eax
+     742:	75 7f                	jne    7c3 <writetest1+0x133>
+    n++;
+     744:	83 c6 01             	add    $0x1,%esi
+    i = read(fd, buf, 512);
+     747:	83 ec 04             	sub    $0x4,%esp
+     74a:	68 00 02 00 00       	push   $0x200
+     74f:	68 e0 86 00 00       	push   $0x86e0
+     754:	53                   	push   %ebx
+     755:	e8 41 32 00 00       	call   399b <read>
+    if(i == 0){
+     75a:	83 c4 10             	add    $0x10,%esp
+     75d:	85 c0                	test   %eax,%eax
+     75f:	75 cf                	jne    730 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     761:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
+     767:	0f 84 86 00 00 00    	je     7f3 <writetest1+0x163>
+  close(fd);
+     76d:	83 ec 0c             	sub    $0xc,%esp
+     770:	53                   	push   %ebx
+     771:	e8 35 32 00 00       	call   39ab <close>
+  if(unlink("big") < 0){
+     776:	c7 04 24 f7 40 00 00 	movl   $0x40f7,(%esp)
+     77d:	e8 51 32 00 00       	call   39d3 <unlink>
+     782:	83 c4 10             	add    $0x10,%esp
+     785:	85 c0                	test   %eax,%eax
+     787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     78d:	83 ec 08             	sub    $0x8,%esp
+     790:	68 1e 41 00 00       	push   $0x411e
+     795:	ff 35 00 5f 00 00    	pushl  0x5f00
+     79b:	e8 60 33 00 00       	call   3b00 <printf>
+}
+     7a0:	83 c4 10             	add    $0x10,%esp
+     7a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     7a6:	5b                   	pop    %ebx
+     7a7:	5e                   	pop    %esi
+     7a8:	5d                   	pop    %ebp
+     7a9:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	53                   	push   %ebx
+     7ae:	68 a7 40 00 00       	push   $0x40a7
+     7b3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     7b9:	e8 42 33 00 00       	call   3b00 <printf>
+      exit();
+     7be:	e8 c0 31 00 00       	call   3983 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     7c3:	50                   	push   %eax
+     7c4:	56                   	push   %esi
+     7c5:	68 f8 4e 00 00       	push   $0x4ef8
+     7ca:	ff 35 00 5f 00 00    	pushl  0x5f00
+     7d0:	e8 2b 33 00 00       	call   3b00 <printf>
+      exit();
+     7d5:	e8 a9 31 00 00       	call   3983 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7da:	83 ec 04             	sub    $0x4,%esp
+     7dd:	50                   	push   %eax
+     7de:	68 fb 40 00 00       	push   $0x40fb
+     7e3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     7e9:	e8 12 33 00 00       	call   3b00 <printf>
+      exit();
+     7ee:	e8 90 31 00 00       	call   3983 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7f3:	52                   	push   %edx
+     7f4:	68 8b 00 00 00       	push   $0x8b
+     7f9:	68 de 40 00 00       	push   $0x40de
+     7fe:	ff 35 00 5f 00 00    	pushl  0x5f00
+     804:	e8 f7 32 00 00       	call   3b00 <printf>
+        exit();
+     809:	e8 75 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: open big failed!\n");
+     80e:	51                   	push   %ecx
+     80f:	51                   	push   %ecx
+     810:	68 c5 40 00 00       	push   $0x40c5
+     815:	ff 35 00 5f 00 00    	pushl  0x5f00
+     81b:	e8 e0 32 00 00       	call   3b00 <printf>
+    exit();
+     820:	e8 5e 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     825:	50                   	push   %eax
+     826:	50                   	push   %eax
+     827:	68 8d 40 00 00       	push   $0x408d
+     82c:	ff 35 00 5f 00 00    	pushl  0x5f00
+     832:	e8 c9 32 00 00       	call   3b00 <printf>
+    exit();
+     837:	e8 47 31 00 00       	call   3983 <exit>
+    printf(stdout, "unlink big failed\n");
+     83c:	50                   	push   %eax
+     83d:	50                   	push   %eax
+     83e:	68 0b 41 00 00       	push   $0x410b
+     843:	ff 35 00 5f 00 00    	pushl  0x5f00
+     849:	e8 b2 32 00 00       	call   3b00 <printf>
+    exit();
+     84e:	e8 30 31 00 00       	call   3983 <exit>
+     853:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000860 <createtest>:
+{
+     860:	f3 0f 1e fb          	endbr32 
+     864:	55                   	push   %ebp
+     865:	89 e5                	mov    %esp,%ebp
+     867:	53                   	push   %ebx
+  name[2] = '\0';
+     868:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     86d:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     870:	68 18 4f 00 00       	push   $0x4f18
+     875:	ff 35 00 5f 00 00    	pushl  0x5f00
+     87b:	e8 80 32 00 00       	call   3b00 <printf>
+  name[0] = 'a';
+     880:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
+  name[2] = '\0';
+     887:	83 c4 10             	add    $0x10,%esp
+     88a:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
+  for(i = 0; i < 52; i++){
+     891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     898:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     89b:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
+    fd = open(name, O_CREATE|O_RDWR);
+     8a1:	83 c3 01             	add    $0x1,%ebx
+     8a4:	68 02 02 00 00       	push   $0x202
+     8a9:	68 e0 a6 00 00       	push   $0xa6e0
+     8ae:	e8 10 31 00 00       	call   39c3 <open>
+    close(fd);
+     8b3:	89 04 24             	mov    %eax,(%esp)
+     8b6:	e8 f0 30 00 00       	call   39ab <close>
+  for(i = 0; i < 52; i++){
+     8bb:	83 c4 10             	add    $0x10,%esp
+     8be:	80 fb 64             	cmp    $0x64,%bl
+     8c1:	75 d5                	jne    898 <createtest+0x38>
+  name[0] = 'a';
+     8c3:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
+  name[2] = '\0';
+     8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
+     8cf:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
+  for(i = 0; i < 52; i++){
+     8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8dd:	8d 76 00             	lea    0x0(%esi),%esi
+    unlink(name);
+     8e0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8e3:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
+    unlink(name);
+     8e9:	83 c3 01             	add    $0x1,%ebx
+     8ec:	68 e0 a6 00 00       	push   $0xa6e0
+     8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 52; i++){
+     8f6:	83 c4 10             	add    $0x10,%esp
+     8f9:	80 fb 64             	cmp    $0x64,%bl
+     8fc:	75 e2                	jne    8e0 <createtest+0x80>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8fe:	83 ec 08             	sub    $0x8,%esp
+     901:	68 40 4f 00 00       	push   $0x4f40
+     906:	ff 35 00 5f 00 00    	pushl  0x5f00
+     90c:	e8 ef 31 00 00       	call   3b00 <printf>
+}
+     911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     914:	83 c4 10             	add    $0x10,%esp
+     917:	c9                   	leave  
+     918:	c3                   	ret    
+     919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <dirtest>:
+{
+     920:	f3 0f 1e fb          	endbr32 
+     924:	55                   	push   %ebp
+     925:	89 e5                	mov    %esp,%ebp
+     927:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     92a:	68 2c 41 00 00       	push   $0x412c
+     92f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     935:	e8 c6 31 00 00       	call   3b00 <printf>
+  if(mkdir("dir0") < 0){
+     93a:	c7 04 24 38 41 00 00 	movl   $0x4138,(%esp)
+     941:	e8 a5 30 00 00       	call   39eb <mkdir>
+     946:	83 c4 10             	add    $0x10,%esp
+     949:	85 c0                	test   %eax,%eax
+     94b:	78 58                	js     9a5 <dirtest+0x85>
+  if(chdir("dir0") < 0){
+     94d:	83 ec 0c             	sub    $0xc,%esp
+     950:	68 38 41 00 00       	push   $0x4138
+     955:	e8 99 30 00 00       	call   39f3 <chdir>
+     95a:	83 c4 10             	add    $0x10,%esp
+     95d:	85 c0                	test   %eax,%eax
+     95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
+  if(chdir("..") < 0){
+     965:	83 ec 0c             	sub    $0xc,%esp
+     968:	68 dd 46 00 00       	push   $0x46dd
+     96d:	e8 81 30 00 00       	call   39f3 <chdir>
+     972:	83 c4 10             	add    $0x10,%esp
+     975:	85 c0                	test   %eax,%eax
+     977:	78 5a                	js     9d3 <dirtest+0xb3>
+  if(unlink("dir0") < 0){
+     979:	83 ec 0c             	sub    $0xc,%esp
+     97c:	68 38 41 00 00       	push   $0x4138
+     981:	e8 4d 30 00 00       	call   39d3 <unlink>
+     986:	83 c4 10             	add    $0x10,%esp
+     989:	85 c0                	test   %eax,%eax
+     98b:	78 2f                	js     9bc <dirtest+0x9c>
+  printf(stdout, "mkdir test ok\n");
+     98d:	83 ec 08             	sub    $0x8,%esp
+     990:	68 75 41 00 00       	push   $0x4175
+     995:	ff 35 00 5f 00 00    	pushl  0x5f00
+     99b:	e8 60 31 00 00       	call   3b00 <printf>
+}
+     9a0:	83 c4 10             	add    $0x10,%esp
+     9a3:	c9                   	leave  
+     9a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     9a5:	50                   	push   %eax
+     9a6:	50                   	push   %eax
+     9a7:	68 68 3e 00 00       	push   $0x3e68
+     9ac:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9b2:	e8 49 31 00 00       	call   3b00 <printf>
+    exit();
+     9b7:	e8 c7 2f 00 00       	call   3983 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     9bc:	50                   	push   %eax
+     9bd:	50                   	push   %eax
+     9be:	68 61 41 00 00       	push   $0x4161
+     9c3:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9c9:	e8 32 31 00 00       	call   3b00 <printf>
+    exit();
+     9ce:	e8 b0 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir .. failed\n");
+     9d3:	52                   	push   %edx
+     9d4:	52                   	push   %edx
+     9d5:	68 50 41 00 00       	push   $0x4150
+     9da:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9e0:	e8 1b 31 00 00       	call   3b00 <printf>
+    exit();
+     9e5:	e8 99 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9ea:	51                   	push   %ecx
+     9eb:	51                   	push   %ecx
+     9ec:	68 3d 41 00 00       	push   $0x413d
+     9f1:	ff 35 00 5f 00 00    	pushl  0x5f00
+     9f7:	e8 04 31 00 00       	call   3b00 <printf>
+    exit();
+     9fc:	e8 82 2f 00 00       	call   3983 <exit>
+     a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a0f:	90                   	nop
+
+00000a10 <exectest>:
+{
+     a10:	f3 0f 1e fb          	endbr32 
+     a14:	55                   	push   %ebp
+     a15:	89 e5                	mov    %esp,%ebp
+     a17:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     a1a:	68 84 41 00 00       	push   $0x4184
+     a1f:	ff 35 00 5f 00 00    	pushl  0x5f00
+     a25:	e8 d6 30 00 00       	call   3b00 <printf>
+  if(exec("echo", echoargv) < 0){
+     a2a:	5a                   	pop    %edx
+     a2b:	59                   	pop    %ecx
+     a2c:	68 04 5f 00 00       	push   $0x5f04
+     a31:	68 4d 3f 00 00       	push   $0x3f4d
+     a36:	e8 80 2f 00 00       	call   39bb <exec>
+     a3b:	83 c4 10             	add    $0x10,%esp
+     a3e:	85 c0                	test   %eax,%eax
+     a40:	78 02                	js     a44 <exectest+0x34>
+}
+     a42:	c9                   	leave  
+     a43:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     a44:	50                   	push   %eax
+     a45:	50                   	push   %eax
+     a46:	68 8f 41 00 00       	push   $0x418f
+     a4b:	ff 35 00 5f 00 00    	pushl  0x5f00
+     a51:	e8 aa 30 00 00       	call   3b00 <printf>
+    exit();
+     a56:	e8 28 2f 00 00       	call   3983 <exit>
+     a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     a5f:	90                   	nop
+
+00000a60 <pipe1>:
+{
+     a60:	f3 0f 1e fb          	endbr32 
+     a64:	55                   	push   %ebp
+     a65:	89 e5                	mov    %esp,%ebp
+     a67:	57                   	push   %edi
+     a68:	56                   	push   %esi
+  if(pipe(fds) != 0){
+     a69:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a6c:	53                   	push   %ebx
+     a6d:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a70:	50                   	push   %eax
+     a71:	e8 1d 2f 00 00       	call   3993 <pipe>
+     a76:	83 c4 10             	add    $0x10,%esp
+     a79:	85 c0                	test   %eax,%eax
+     a7b:	0f 85 38 01 00 00    	jne    bb9 <pipe1+0x159>
+  pid = fork();
+     a81:	e8 f5 2e 00 00       	call   397b <fork>
+  if(pid == 0){
+     a86:	85 c0                	test   %eax,%eax
+     a88:	0f 84 8d 00 00 00    	je     b1b <pipe1+0xbb>
+  } else if(pid > 0){
+     a8e:	0f 8e 38 01 00 00    	jle    bcc <pipe1+0x16c>
+    close(fds[1]);
+     a94:	83 ec 0c             	sub    $0xc,%esp
+     a97:	ff 75 e4             	pushl  -0x1c(%ebp)
+  seq = 0;
+     a9a:	31 db                	xor    %ebx,%ebx
+    cc = 1;
+     a9c:	be 01 00 00 00       	mov    $0x1,%esi
+    close(fds[1]);
+     aa1:	e8 05 2f 00 00       	call   39ab <close>
+    total = 0;
+     aa6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     aad:	83 c4 10             	add    $0x10,%esp
+     ab0:	83 ec 04             	sub    $0x4,%esp
+     ab3:	56                   	push   %esi
+     ab4:	68 e0 86 00 00       	push   $0x86e0
+     ab9:	ff 75 e0             	pushl  -0x20(%ebp)
+     abc:	e8 da 2e 00 00       	call   399b <read>
+     ac1:	83 c4 10             	add    $0x10,%esp
+     ac4:	89 c7                	mov    %eax,%edi
+     ac6:	85 c0                	test   %eax,%eax
+     ac8:	0f 8e a7 00 00 00    	jle    b75 <pipe1+0x115>
+     ace:	8d 0c 3b             	lea    (%ebx,%edi,1),%ecx
+      for(i = 0; i < n; i++){
+     ad1:	31 c0                	xor    %eax,%eax
+     ad3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ad7:	90                   	nop
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     ad8:	89 da                	mov    %ebx,%edx
+     ada:	83 c3 01             	add    $0x1,%ebx
+     add:	38 90 e0 86 00 00    	cmp    %dl,0x86e0(%eax)
+     ae3:	75 1c                	jne    b01 <pipe1+0xa1>
+      for(i = 0; i < n; i++){
+     ae5:	83 c0 01             	add    $0x1,%eax
+     ae8:	39 d9                	cmp    %ebx,%ecx
+     aea:	75 ec                	jne    ad8 <pipe1+0x78>
+      cc = cc * 2;
+     aec:	01 f6                	add    %esi,%esi
+      total += n;
+     aee:	01 7d d4             	add    %edi,-0x2c(%ebp)
+     af1:	b8 00 20 00 00       	mov    $0x2000,%eax
+     af6:	81 fe 00 20 00 00    	cmp    $0x2000,%esi
+     afc:	0f 4f f0             	cmovg  %eax,%esi
+     aff:	eb af                	jmp    ab0 <pipe1+0x50>
+          printf(1, "pipe1 oops 2\n");
+     b01:	83 ec 08             	sub    $0x8,%esp
+     b04:	68 be 41 00 00       	push   $0x41be
+     b09:	6a 01                	push   $0x1
+     b0b:	e8 f0 2f 00 00       	call   3b00 <printf>
+          return;
+     b10:	83 c4 10             	add    $0x10,%esp
+}
+     b13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     b16:	5b                   	pop    %ebx
+     b17:	5e                   	pop    %esi
+     b18:	5f                   	pop    %edi
+     b19:	5d                   	pop    %ebp
+     b1a:	c3                   	ret    
+    close(fds[0]);
+     b1b:	83 ec 0c             	sub    $0xc,%esp
+     b1e:	ff 75 e0             	pushl  -0x20(%ebp)
+  seq = 0;
+     b21:	31 db                	xor    %ebx,%ebx
+    close(fds[0]);
+     b23:	e8 83 2e 00 00       	call   39ab <close>
+     b28:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 1033; i++)
+     b2b:	31 c0                	xor    %eax,%eax
+     b2d:	8d 76 00             	lea    0x0(%esi),%esi
+        buf[i] = seq++;
+     b30:	8d 14 18             	lea    (%eax,%ebx,1),%edx
+      for(i = 0; i < 1033; i++)
+     b33:	83 c0 01             	add    $0x1,%eax
+        buf[i] = seq++;
+     b36:	88 90 df 86 00 00    	mov    %dl,0x86df(%eax)
+      for(i = 0; i < 1033; i++)
+     b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b41:	75 ed                	jne    b30 <pipe1+0xd0>
+      if(write(fds[1], buf, 1033) != 1033){
+     b43:	83 ec 04             	sub    $0x4,%esp
+     b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
+     b4c:	68 09 04 00 00       	push   $0x409
+     b51:	68 e0 86 00 00       	push   $0x86e0
+     b56:	ff 75 e4             	pushl  -0x1c(%ebp)
+     b59:	e8 45 2e 00 00       	call   39a3 <write>
+     b5e:	83 c4 10             	add    $0x10,%esp
+     b61:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b66:	75 77                	jne    bdf <pipe1+0x17f>
+    for(n = 0; n < 5; n++){
+     b68:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b6e:	75 bb                	jne    b2b <pipe1+0xcb>
+    exit();
+     b70:	e8 0e 2e 00 00       	call   3983 <exit>
+    if(total != 5 * 1033){
+     b75:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b7c:	75 26                	jne    ba4 <pipe1+0x144>
+    close(fds[0]);
+     b7e:	83 ec 0c             	sub    $0xc,%esp
+     b81:	ff 75 e0             	pushl  -0x20(%ebp)
+     b84:	e8 22 2e 00 00       	call   39ab <close>
+    wait();
+     b89:	e8 fd 2d 00 00       	call   398b <wait>
+  printf(1, "pipe1 ok\n");
+     b8e:	5a                   	pop    %edx
+     b8f:	59                   	pop    %ecx
+     b90:	68 e3 41 00 00       	push   $0x41e3
+     b95:	6a 01                	push   $0x1
+     b97:	e8 64 2f 00 00       	call   3b00 <printf>
+     b9c:	83 c4 10             	add    $0x10,%esp
+     b9f:	e9 6f ff ff ff       	jmp    b13 <pipe1+0xb3>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     ba4:	53                   	push   %ebx
+     ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
+     ba8:	68 cc 41 00 00       	push   $0x41cc
+     bad:	6a 01                	push   $0x1
+     baf:	e8 4c 2f 00 00       	call   3b00 <printf>
+      exit();
+     bb4:	e8 ca 2d 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+     bb9:	57                   	push   %edi
+     bba:	57                   	push   %edi
+     bbb:	68 a1 41 00 00       	push   $0x41a1
+     bc0:	6a 01                	push   $0x1
+     bc2:	e8 39 2f 00 00       	call   3b00 <printf>
+    exit();
+     bc7:	e8 b7 2d 00 00       	call   3983 <exit>
+    printf(1, "fork() failed\n");
+     bcc:	50                   	push   %eax
+     bcd:	50                   	push   %eax
+     bce:	68 ed 41 00 00       	push   $0x41ed
+     bd3:	6a 01                	push   $0x1
+     bd5:	e8 26 2f 00 00       	call   3b00 <printf>
+    exit();
+     bda:	e8 a4 2d 00 00       	call   3983 <exit>
+        printf(1, "pipe1 oops 1\n");
+     bdf:	56                   	push   %esi
+     be0:	56                   	push   %esi
+     be1:	68 b0 41 00 00       	push   $0x41b0
+     be6:	6a 01                	push   $0x1
+     be8:	e8 13 2f 00 00       	call   3b00 <printf>
+        exit();
+     bed:	e8 91 2d 00 00       	call   3983 <exit>
+     bf2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000c00 <preempt>:
+{
+     c00:	f3 0f 1e fb          	endbr32 
+     c04:	55                   	push   %ebp
+     c05:	89 e5                	mov    %esp,%ebp
+     c07:	57                   	push   %edi
+     c08:	56                   	push   %esi
+     c09:	53                   	push   %ebx
+     c0a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     c0d:	68 fc 41 00 00       	push   $0x41fc
+     c12:	6a 01                	push   $0x1
+     c14:	e8 e7 2e 00 00       	call   3b00 <printf>
+  pid1 = fork();
+     c19:	e8 5d 2d 00 00       	call   397b <fork>
+  if(pid1 == 0)
+     c1e:	83 c4 10             	add    $0x10,%esp
+     c21:	85 c0                	test   %eax,%eax
+     c23:	75 0b                	jne    c30 <preempt+0x30>
+    for(;;)
+     c25:	eb fe                	jmp    c25 <preempt+0x25>
+     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2e:	66 90                	xchg   %ax,%ax
+     c30:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     c32:	e8 44 2d 00 00       	call   397b <fork>
+     c37:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     c39:	85 c0                	test   %eax,%eax
+     c3b:	75 03                	jne    c40 <preempt+0x40>
+    for(;;)
+     c3d:	eb fe                	jmp    c3d <preempt+0x3d>
+     c3f:	90                   	nop
+  pipe(pfds);
+     c40:	83 ec 0c             	sub    $0xc,%esp
+     c43:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     c46:	50                   	push   %eax
+     c47:	e8 47 2d 00 00       	call   3993 <pipe>
+  pid3 = fork();
+     c4c:	e8 2a 2d 00 00       	call   397b <fork>
+  if(pid3 == 0){
+     c51:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     c54:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     c56:	85 c0                	test   %eax,%eax
+     c58:	75 3e                	jne    c98 <preempt+0x98>
+    close(pfds[0]);
+     c5a:	83 ec 0c             	sub    $0xc,%esp
+     c5d:	ff 75 e0             	pushl  -0x20(%ebp)
+     c60:	e8 46 2d 00 00       	call   39ab <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c65:	83 c4 0c             	add    $0xc,%esp
+     c68:	6a 01                	push   $0x1
+     c6a:	68 c1 47 00 00       	push   $0x47c1
+     c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c72:	e8 2c 2d 00 00       	call   39a3 <write>
+     c77:	83 c4 10             	add    $0x10,%esp
+     c7a:	83 f8 01             	cmp    $0x1,%eax
+     c7d:	0f 85 a4 00 00 00    	jne    d27 <preempt+0x127>
+    close(pfds[1]);
+     c83:	83 ec 0c             	sub    $0xc,%esp
+     c86:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c89:	e8 1d 2d 00 00       	call   39ab <close>
+     c8e:	83 c4 10             	add    $0x10,%esp
+    for(;;)
+     c91:	eb fe                	jmp    c91 <preempt+0x91>
+     c93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c97:	90                   	nop
+  close(pfds[1]);
+     c98:	83 ec 0c             	sub    $0xc,%esp
+     c9b:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c9e:	e8 08 2d 00 00       	call   39ab <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     ca3:	83 c4 0c             	add    $0xc,%esp
+     ca6:	68 00 20 00 00       	push   $0x2000
+     cab:	68 e0 86 00 00       	push   $0x86e0
+     cb0:	ff 75 e0             	pushl  -0x20(%ebp)
+     cb3:	e8 e3 2c 00 00       	call   399b <read>
+     cb8:	83 c4 10             	add    $0x10,%esp
+     cbb:	83 f8 01             	cmp    $0x1,%eax
+     cbe:	75 7e                	jne    d3e <preempt+0x13e>
+  close(pfds[0]);
+     cc0:	83 ec 0c             	sub    $0xc,%esp
+     cc3:	ff 75 e0             	pushl  -0x20(%ebp)
+     cc6:	e8 e0 2c 00 00       	call   39ab <close>
+  printf(1, "kill... ");
+     ccb:	58                   	pop    %eax
+     ccc:	5a                   	pop    %edx
+     ccd:	68 2d 42 00 00       	push   $0x422d
+     cd2:	6a 01                	push   $0x1
+     cd4:	e8 27 2e 00 00       	call   3b00 <printf>
+  kill(pid1);
+     cd9:	89 3c 24             	mov    %edi,(%esp)
+     cdc:	e8 d2 2c 00 00       	call   39b3 <kill>
+  kill(pid2);
+     ce1:	89 34 24             	mov    %esi,(%esp)
+     ce4:	e8 ca 2c 00 00       	call   39b3 <kill>
+  kill(pid3);
+     ce9:	89 1c 24             	mov    %ebx,(%esp)
+     cec:	e8 c2 2c 00 00       	call   39b3 <kill>
+  printf(1, "wait... ");
+     cf1:	59                   	pop    %ecx
+     cf2:	5b                   	pop    %ebx
+     cf3:	68 36 42 00 00       	push   $0x4236
+     cf8:	6a 01                	push   $0x1
+     cfa:	e8 01 2e 00 00       	call   3b00 <printf>
+  wait();
+     cff:	e8 87 2c 00 00       	call   398b <wait>
+  wait();
+     d04:	e8 82 2c 00 00       	call   398b <wait>
+  wait();
+     d09:	e8 7d 2c 00 00       	call   398b <wait>
+  printf(1, "preempt ok\n");
+     d0e:	5e                   	pop    %esi
+     d0f:	5f                   	pop    %edi
+     d10:	68 3f 42 00 00       	push   $0x423f
+     d15:	6a 01                	push   $0x1
+     d17:	e8 e4 2d 00 00       	call   3b00 <printf>
+     d1c:	83 c4 10             	add    $0x10,%esp
+}
+     d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d22:	5b                   	pop    %ebx
+     d23:	5e                   	pop    %esi
+     d24:	5f                   	pop    %edi
+     d25:	5d                   	pop    %ebp
+     d26:	c3                   	ret    
+      printf(1, "preempt write error");
+     d27:	83 ec 08             	sub    $0x8,%esp
+     d2a:	68 06 42 00 00       	push   $0x4206
+     d2f:	6a 01                	push   $0x1
+     d31:	e8 ca 2d 00 00       	call   3b00 <printf>
+     d36:	83 c4 10             	add    $0x10,%esp
+     d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
+    printf(1, "preempt read error");
+     d3e:	83 ec 08             	sub    $0x8,%esp
+     d41:	68 1a 42 00 00       	push   $0x421a
+     d46:	6a 01                	push   $0x1
+     d48:	e8 b3 2d 00 00       	call   3b00 <printf>
+    return;
+     d4d:	83 c4 10             	add    $0x10,%esp
+     d50:	eb cd                	jmp    d1f <preempt+0x11f>
+     d52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000d60 <exitwait>:
+{
+     d60:	f3 0f 1e fb          	endbr32 
+     d64:	55                   	push   %ebp
+     d65:	89 e5                	mov    %esp,%ebp
+     d67:	56                   	push   %esi
+     d68:	be 64 00 00 00       	mov    $0x64,%esi
+     d6d:	53                   	push   %ebx
+     d6e:	eb 10                	jmp    d80 <exitwait+0x20>
+    if(pid){
+     d70:	74 68                	je     dda <exitwait+0x7a>
+      if(wait() != pid){
+     d72:	e8 14 2c 00 00       	call   398b <wait>
+     d77:	39 d8                	cmp    %ebx,%eax
+     d79:	75 2d                	jne    da8 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d7b:	83 ee 01             	sub    $0x1,%esi
+     d7e:	74 41                	je     dc1 <exitwait+0x61>
+    pid = fork();
+     d80:	e8 f6 2b 00 00       	call   397b <fork>
+     d85:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d87:	85 c0                	test   %eax,%eax
+     d89:	79 e5                	jns    d70 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d8b:	83 ec 08             	sub    $0x8,%esp
+     d8e:	68 a9 4d 00 00       	push   $0x4da9
+     d93:	6a 01                	push   $0x1
+     d95:	e8 66 2d 00 00       	call   3b00 <printf>
+      return;
+     d9a:	83 c4 10             	add    $0x10,%esp
+}
+     d9d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     da0:	5b                   	pop    %ebx
+     da1:	5e                   	pop    %esi
+     da2:	5d                   	pop    %ebp
+     da3:	c3                   	ret    
+     da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     da8:	83 ec 08             	sub    $0x8,%esp
+     dab:	68 4b 42 00 00       	push   $0x424b
+     db0:	6a 01                	push   $0x1
+     db2:	e8 49 2d 00 00       	call   3b00 <printf>
+        return;
+     db7:	83 c4 10             	add    $0x10,%esp
+}
+     dba:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dbd:	5b                   	pop    %ebx
+     dbe:	5e                   	pop    %esi
+     dbf:	5d                   	pop    %ebp
+     dc0:	c3                   	ret    
+  printf(1, "exitwait ok\n");
+     dc1:	83 ec 08             	sub    $0x8,%esp
+     dc4:	68 5b 42 00 00       	push   $0x425b
+     dc9:	6a 01                	push   $0x1
+     dcb:	e8 30 2d 00 00       	call   3b00 <printf>
+     dd0:	83 c4 10             	add    $0x10,%esp
+}
+     dd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dd6:	5b                   	pop    %ebx
+     dd7:	5e                   	pop    %esi
+     dd8:	5d                   	pop    %ebp
+     dd9:	c3                   	ret    
+      exit();
+     dda:	e8 a4 2b 00 00       	call   3983 <exit>
+     ddf:	90                   	nop
+
+00000de0 <mem>:
+{
+     de0:	f3 0f 1e fb          	endbr32 
+     de4:	55                   	push   %ebp
+     de5:	89 e5                	mov    %esp,%ebp
+     de7:	56                   	push   %esi
+     de8:	31 f6                	xor    %esi,%esi
+     dea:	53                   	push   %ebx
+  printf(1, "mem test\n");
+     deb:	83 ec 08             	sub    $0x8,%esp
+     dee:	68 68 42 00 00       	push   $0x4268
+     df3:	6a 01                	push   $0x1
+     df5:	e8 06 2d 00 00       	call   3b00 <printf>
+  ppid = getpid();
+     dfa:	e8 04 2c 00 00       	call   3a03 <getpid>
+     dff:	89 c3                	mov    %eax,%ebx
+  if((pid = fork()) == 0){
+     e01:	e8 75 2b 00 00       	call   397b <fork>
+     e06:	83 c4 10             	add    $0x10,%esp
+     e09:	85 c0                	test   %eax,%eax
+     e0b:	74 0f                	je     e1c <mem+0x3c>
+     e0d:	e9 8e 00 00 00       	jmp    ea0 <mem+0xc0>
+     e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *(char**)m2 = m1;
+     e18:	89 30                	mov    %esi,(%eax)
+     e1a:	89 c6                	mov    %eax,%esi
+    while((m2 = malloc(10001)) != 0){
+     e1c:	83 ec 0c             	sub    $0xc,%esp
+     e1f:	68 11 27 00 00       	push   $0x2711
+     e24:	e8 37 2f 00 00       	call   3d60 <malloc>
+     e29:	83 c4 10             	add    $0x10,%esp
+     e2c:	85 c0                	test   %eax,%eax
+     e2e:	75 e8                	jne    e18 <mem+0x38>
+    while(m1){
+     e30:	85 f6                	test   %esi,%esi
+     e32:	74 18                	je     e4c <mem+0x6c>
+     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     e38:	89 f0                	mov    %esi,%eax
+      free(m1);
+     e3a:	83 ec 0c             	sub    $0xc,%esp
+      m2 = *(char**)m1;
+     e3d:	8b 36                	mov    (%esi),%esi
+      free(m1);
+     e3f:	50                   	push   %eax
+     e40:	e8 8b 2e 00 00       	call   3cd0 <free>
+    while(m1){
+     e45:	83 c4 10             	add    $0x10,%esp
+     e48:	85 f6                	test   %esi,%esi
+     e4a:	75 ec                	jne    e38 <mem+0x58>
+    m1 = malloc(1024*20);
+     e4c:	83 ec 0c             	sub    $0xc,%esp
+     e4f:	68 00 50 00 00       	push   $0x5000
+     e54:	e8 07 2f 00 00       	call   3d60 <malloc>
+    if(m1 == 0){
+     e59:	83 c4 10             	add    $0x10,%esp
+     e5c:	85 c0                	test   %eax,%eax
+     e5e:	74 20                	je     e80 <mem+0xa0>
+    free(m1);
+     e60:	83 ec 0c             	sub    $0xc,%esp
+     e63:	50                   	push   %eax
+     e64:	e8 67 2e 00 00       	call   3cd0 <free>
+    printf(1, "mem ok\n");
+     e69:	58                   	pop    %eax
+     e6a:	5a                   	pop    %edx
+     e6b:	68 8c 42 00 00       	push   $0x428c
+     e70:	6a 01                	push   $0x1
+     e72:	e8 89 2c 00 00       	call   3b00 <printf>
+    exit();
+     e77:	e8 07 2b 00 00       	call   3983 <exit>
+     e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e80:	83 ec 08             	sub    $0x8,%esp
+     e83:	68 72 42 00 00       	push   $0x4272
+     e88:	6a 01                	push   $0x1
+     e8a:	e8 71 2c 00 00       	call   3b00 <printf>
+      kill(ppid);
+     e8f:	89 1c 24             	mov    %ebx,(%esp)
+     e92:	e8 1c 2b 00 00       	call   39b3 <kill>
+      exit();
+     e97:	e8 e7 2a 00 00       	call   3983 <exit>
+     e9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     ea0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ea3:	5b                   	pop    %ebx
+     ea4:	5e                   	pop    %esi
+     ea5:	5d                   	pop    %ebp
+    wait();
+     ea6:	e9 e0 2a 00 00       	jmp    398b <wait>
+     eab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     eaf:	90                   	nop
+
+00000eb0 <sharedfd>:
+{
+     eb0:	f3 0f 1e fb          	endbr32 
+     eb4:	55                   	push   %ebp
+     eb5:	89 e5                	mov    %esp,%ebp
+     eb7:	57                   	push   %edi
+     eb8:	56                   	push   %esi
+     eb9:	53                   	push   %ebx
+     eba:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     ebd:	68 94 42 00 00       	push   $0x4294
+     ec2:	6a 01                	push   $0x1
+     ec4:	e8 37 2c 00 00       	call   3b00 <printf>
+  unlink("sharedfd");
+     ec9:	c7 04 24 a3 42 00 00 	movl   $0x42a3,(%esp)
+     ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     ed5:	5b                   	pop    %ebx
+     ed6:	5e                   	pop    %esi
+     ed7:	68 02 02 00 00       	push   $0x202
+     edc:	68 a3 42 00 00       	push   $0x42a3
+     ee1:	e8 dd 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     ee6:	83 c4 10             	add    $0x10,%esp
+     ee9:	85 c0                	test   %eax,%eax
+     eeb:	0f 88 26 01 00 00    	js     1017 <sharedfd+0x167>
+     ef1:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     ef3:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ef6:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     efb:	e8 7b 2a 00 00       	call   397b <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f00:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     f03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f06:	19 c0                	sbb    %eax,%eax
+     f08:	83 ec 04             	sub    $0x4,%esp
+     f0b:	83 e0 f3             	and    $0xfffffff3,%eax
+     f0e:	6a 0a                	push   $0xa
+     f10:	83 c0 70             	add    $0x70,%eax
+     f13:	50                   	push   %eax
+     f14:	56                   	push   %esi
+     f15:	e8 c6 28 00 00       	call   37e0 <memset>
+     f1a:	83 c4 10             	add    $0x10,%esp
+     f1d:	eb 06                	jmp    f25 <sharedfd+0x75>
+     f1f:	90                   	nop
+  for(i = 0; i < 1000; i++){
+     f20:	83 eb 01             	sub    $0x1,%ebx
+     f23:	74 26                	je     f4b <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     f25:	83 ec 04             	sub    $0x4,%esp
+     f28:	6a 0a                	push   $0xa
+     f2a:	56                   	push   %esi
+     f2b:	57                   	push   %edi
+     f2c:	e8 72 2a 00 00       	call   39a3 <write>
+     f31:	83 c4 10             	add    $0x10,%esp
+     f34:	83 f8 0a             	cmp    $0xa,%eax
+     f37:	74 e7                	je     f20 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     f39:	83 ec 08             	sub    $0x8,%esp
+     f3c:	68 94 4f 00 00       	push   $0x4f94
+     f41:	6a 01                	push   $0x1
+     f43:	e8 b8 2b 00 00       	call   3b00 <printf>
+      break;
+     f48:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     f4b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     f4e:	85 c9                	test   %ecx,%ecx
+     f50:	0f 84 f5 00 00 00    	je     104b <sharedfd+0x19b>
+    wait();
+     f56:	e8 30 2a 00 00       	call   398b <wait>
+  close(fd);
+     f5b:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     f5e:	31 db                	xor    %ebx,%ebx
+  close(fd);
+     f60:	57                   	push   %edi
+     f61:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f64:	e8 42 2a 00 00       	call   39ab <close>
+  fd = open("sharedfd", 0);
+     f69:	58                   	pop    %eax
+     f6a:	5a                   	pop    %edx
+     f6b:	6a 00                	push   $0x0
+     f6d:	68 a3 42 00 00       	push   $0x42a3
+     f72:	e8 4c 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     f77:	83 c4 10             	add    $0x10,%esp
+  nc = np = 0;
+     f7a:	31 d2                	xor    %edx,%edx
+  fd = open("sharedfd", 0);
+     f7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f7f:	85 c0                	test   %eax,%eax
+     f81:	0f 88 aa 00 00 00    	js     1031 <sharedfd+0x181>
+     f87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f8e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f90:	83 ec 04             	sub    $0x4,%esp
+     f93:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f96:	6a 0a                	push   $0xa
+     f98:	56                   	push   %esi
+     f99:	ff 75 d0             	pushl  -0x30(%ebp)
+     f9c:	e8 fa 29 00 00       	call   399b <read>
+     fa1:	83 c4 10             	add    $0x10,%esp
+     fa4:	85 c0                	test   %eax,%eax
+     fa6:	7e 28                	jle    fd0 <sharedfd+0x120>
+    for(i = 0; i < sizeof(buf); i++){
+     fa8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fab:	89 f0                	mov    %esi,%eax
+     fad:	eb 13                	jmp    fc2 <sharedfd+0x112>
+     faf:	90                   	nop
+        np++;
+     fb0:	80 f9 70             	cmp    $0x70,%cl
+     fb3:	0f 94 c1             	sete   %cl
+     fb6:	0f b6 c9             	movzbl %cl,%ecx
+     fb9:	01 cb                	add    %ecx,%ebx
+    for(i = 0; i < sizeof(buf); i++){
+     fbb:	83 c0 01             	add    $0x1,%eax
+     fbe:	39 c7                	cmp    %eax,%edi
+     fc0:	74 ce                	je     f90 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     fc2:	0f b6 08             	movzbl (%eax),%ecx
+     fc5:	80 f9 63             	cmp    $0x63,%cl
+     fc8:	75 e6                	jne    fb0 <sharedfd+0x100>
+        nc++;
+     fca:	83 c2 01             	add    $0x1,%edx
+      if(buf[i] == 'p')
+     fcd:	eb ec                	jmp    fbb <sharedfd+0x10b>
+     fcf:	90                   	nop
+  close(fd);
+     fd0:	83 ec 0c             	sub    $0xc,%esp
+     fd3:	ff 75 d0             	pushl  -0x30(%ebp)
+     fd6:	e8 d0 29 00 00       	call   39ab <close>
+  unlink("sharedfd");
+     fdb:	c7 04 24 a3 42 00 00 	movl   $0x42a3,(%esp)
+     fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
+  if(nc == 10000 && np == 10000){
+     fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fea:	83 c4 10             	add    $0x10,%esp
+     fed:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     ff3:	75 5b                	jne    1050 <sharedfd+0x1a0>
+     ff5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
+    printf(1, "sharedfd ok\n");
+     ffd:	83 ec 08             	sub    $0x8,%esp
+    1000:	68 ac 42 00 00       	push   $0x42ac
+    1005:	6a 01                	push   $0x1
+    1007:	e8 f4 2a 00 00       	call   3b00 <printf>
+    100c:	83 c4 10             	add    $0x10,%esp
+}
+    100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1012:	5b                   	pop    %ebx
+    1013:	5e                   	pop    %esi
+    1014:	5f                   	pop    %edi
+    1015:	5d                   	pop    %ebp
+    1016:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+    1017:	83 ec 08             	sub    $0x8,%esp
+    101a:	68 68 4f 00 00       	push   $0x4f68
+    101f:	6a 01                	push   $0x1
+    1021:	e8 da 2a 00 00       	call   3b00 <printf>
+    return;
+    1026:	83 c4 10             	add    $0x10,%esp
+}
+    1029:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    102c:	5b                   	pop    %ebx
+    102d:	5e                   	pop    %esi
+    102e:	5f                   	pop    %edi
+    102f:	5d                   	pop    %ebp
+    1030:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    1031:	83 ec 08             	sub    $0x8,%esp
+    1034:	68 b4 4f 00 00       	push   $0x4fb4
+    1039:	6a 01                	push   $0x1
+    103b:	e8 c0 2a 00 00       	call   3b00 <printf>
+    return;
+    1040:	83 c4 10             	add    $0x10,%esp
+}
+    1043:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1046:	5b                   	pop    %ebx
+    1047:	5e                   	pop    %esi
+    1048:	5f                   	pop    %edi
+    1049:	5d                   	pop    %ebp
+    104a:	c3                   	ret    
+    exit();
+    104b:	e8 33 29 00 00       	call   3983 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    1050:	53                   	push   %ebx
+    1051:	52                   	push   %edx
+    1052:	68 b9 42 00 00       	push   $0x42b9
+    1057:	6a 01                	push   $0x1
+    1059:	e8 a2 2a 00 00       	call   3b00 <printf>
+    exit();
+    105e:	e8 20 29 00 00       	call   3983 <exit>
+    1063:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001070 <fourfiles>:
+{
+    1070:	f3 0f 1e fb          	endbr32 
+    1074:	55                   	push   %ebp
+    1075:	89 e5                	mov    %esp,%ebp
+    1077:	57                   	push   %edi
+    1078:	56                   	push   %esi
+  printf(1, "fourfiles test\n");
+    1079:	be ce 42 00 00       	mov    $0x42ce,%esi
+{
+    107e:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    107f:	31 db                	xor    %ebx,%ebx
+{
+    1081:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1084:	c7 45 d8 ce 42 00 00 	movl   $0x42ce,-0x28(%ebp)
+  printf(1, "fourfiles test\n");
+    108b:	68 d4 42 00 00       	push   $0x42d4
+    1090:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1092:	c7 45 dc 17 44 00 00 	movl   $0x4417,-0x24(%ebp)
+    1099:	c7 45 e0 1b 44 00 00 	movl   $0x441b,-0x20(%ebp)
+    10a0:	c7 45 e4 d1 42 00 00 	movl   $0x42d1,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    10a7:	e8 54 2a 00 00       	call   3b00 <printf>
+    10ac:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    10af:	83 ec 0c             	sub    $0xc,%esp
+    10b2:	56                   	push   %esi
+    10b3:	e8 1b 29 00 00       	call   39d3 <unlink>
+    pid = fork();
+    10b8:	e8 be 28 00 00       	call   397b <fork>
+    if(pid < 0){
+    10bd:	83 c4 10             	add    $0x10,%esp
+    10c0:	85 c0                	test   %eax,%eax
+    10c2:	0f 88 60 01 00 00    	js     1228 <fourfiles+0x1b8>
+    if(pid == 0){
+    10c8:	0f 84 e5 00 00 00    	je     11b3 <fourfiles+0x143>
+  for(pi = 0; pi < 4; pi++){
+    10ce:	83 c3 01             	add    $0x1,%ebx
+    10d1:	83 fb 04             	cmp    $0x4,%ebx
+    10d4:	74 06                	je     10dc <fourfiles+0x6c>
+    10d6:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    10da:	eb d3                	jmp    10af <fourfiles+0x3f>
+    wait();
+    10dc:	e8 aa 28 00 00       	call   398b <wait>
+  for(i = 0; i < 2; i++){
+    10e1:	31 f6                	xor    %esi,%esi
+    wait();
+    10e3:	e8 a3 28 00 00       	call   398b <wait>
+    10e8:	e8 9e 28 00 00       	call   398b <wait>
+    10ed:	e8 99 28 00 00       	call   398b <wait>
+    fname = names[i];
+    10f2:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
+    fd = open(fname, 0);
+    10f6:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    10f9:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    10fb:	6a 00                	push   $0x0
+    10fd:	50                   	push   %eax
+    fname = names[i];
+    10fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    fd = open(fname, 0);
+    1101:	e8 bd 28 00 00       	call   39c3 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    1106:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    1109:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1110:	83 ec 04             	sub    $0x4,%esp
+    1113:	68 00 20 00 00       	push   $0x2000
+    1118:	68 e0 86 00 00       	push   $0x86e0
+    111d:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1120:	e8 76 28 00 00       	call   399b <read>
+    1125:	83 c4 10             	add    $0x10,%esp
+    1128:	85 c0                	test   %eax,%eax
+    112a:	7e 22                	jle    114e <fourfiles+0xde>
+      for(j = 0; j < n; j++){
+    112c:	31 d2                	xor    %edx,%edx
+    112e:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    1130:	83 fe 01             	cmp    $0x1,%esi
+    1133:	0f be ba e0 86 00 00 	movsbl 0x86e0(%edx),%edi
+    113a:	19 c9                	sbb    %ecx,%ecx
+    113c:	83 c1 31             	add    $0x31,%ecx
+    113f:	39 cf                	cmp    %ecx,%edi
+    1141:	75 5c                	jne    119f <fourfiles+0x12f>
+      for(j = 0; j < n; j++){
+    1143:	83 c2 01             	add    $0x1,%edx
+    1146:	39 d0                	cmp    %edx,%eax
+    1148:	75 e6                	jne    1130 <fourfiles+0xc0>
+      total += n;
+    114a:	01 c3                	add    %eax,%ebx
+    114c:	eb c2                	jmp    1110 <fourfiles+0xa0>
+    close(fd);
+    114e:	83 ec 0c             	sub    $0xc,%esp
+    1151:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1154:	e8 52 28 00 00       	call   39ab <close>
+    if(total != 12*500){
+    1159:	83 c4 10             	add    $0x10,%esp
+    115c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1162:	0f 85 d4 00 00 00    	jne    123c <fourfiles+0x1cc>
+    unlink(fname);
+    1168:	83 ec 0c             	sub    $0xc,%esp
+    116b:	ff 75 d0             	pushl  -0x30(%ebp)
+    116e:	e8 60 28 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 2; i++){
+    1173:	83 c4 10             	add    $0x10,%esp
+    1176:	83 fe 01             	cmp    $0x1,%esi
+    1179:	75 1a                	jne    1195 <fourfiles+0x125>
+  printf(1, "fourfiles ok\n");
+    117b:	83 ec 08             	sub    $0x8,%esp
+    117e:	68 12 43 00 00       	push   $0x4312
+    1183:	6a 01                	push   $0x1
+    1185:	e8 76 29 00 00       	call   3b00 <printf>
+}
+    118a:	83 c4 10             	add    $0x10,%esp
+    118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1190:	5b                   	pop    %ebx
+    1191:	5e                   	pop    %esi
+    1192:	5f                   	pop    %edi
+    1193:	5d                   	pop    %ebp
+    1194:	c3                   	ret    
+    1195:	be 01 00 00 00       	mov    $0x1,%esi
+    119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
+          printf(1, "wrong char\n");
+    119f:	83 ec 08             	sub    $0x8,%esp
+    11a2:	68 f5 42 00 00       	push   $0x42f5
+    11a7:	6a 01                	push   $0x1
+    11a9:	e8 52 29 00 00       	call   3b00 <printf>
+          exit();
+    11ae:	e8 d0 27 00 00       	call   3983 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    11b3:	83 ec 08             	sub    $0x8,%esp
+    11b6:	68 02 02 00 00       	push   $0x202
+    11bb:	56                   	push   %esi
+    11bc:	e8 02 28 00 00       	call   39c3 <open>
+      if(fd < 0){
+    11c1:	83 c4 10             	add    $0x10,%esp
+      fd = open(fname, O_CREATE | O_RDWR);
+    11c4:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    11c6:	85 c0                	test   %eax,%eax
+    11c8:	78 45                	js     120f <fourfiles+0x19f>
+      memset(buf, '0'+pi, 512);
+    11ca:	83 ec 04             	sub    $0x4,%esp
+    11cd:	83 c3 30             	add    $0x30,%ebx
+    11d0:	68 00 02 00 00       	push   $0x200
+    11d5:	53                   	push   %ebx
+    11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    11db:	68 e0 86 00 00       	push   $0x86e0
+    11e0:	e8 fb 25 00 00       	call   37e0 <memset>
+    11e5:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    11e8:	83 ec 04             	sub    $0x4,%esp
+    11eb:	68 f4 01 00 00       	push   $0x1f4
+    11f0:	68 e0 86 00 00       	push   $0x86e0
+    11f5:	56                   	push   %esi
+    11f6:	e8 a8 27 00 00       	call   39a3 <write>
+    11fb:	83 c4 10             	add    $0x10,%esp
+    11fe:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    1203:	75 4a                	jne    124f <fourfiles+0x1df>
+      for(i = 0; i < 12; i++){
+    1205:	83 eb 01             	sub    $0x1,%ebx
+    1208:	75 de                	jne    11e8 <fourfiles+0x178>
+      exit();
+    120a:	e8 74 27 00 00       	call   3983 <exit>
+        printf(1, "create failed\n");
+    120f:	51                   	push   %ecx
+    1210:	51                   	push   %ecx
+    1211:	68 6f 45 00 00       	push   $0x456f
+    1216:	6a 01                	push   $0x1
+    1218:	e8 e3 28 00 00       	call   3b00 <printf>
+        exit();
+    121d:	e8 61 27 00 00       	call   3983 <exit>
+    1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      printf(1, "fork failed\n");
+    1228:	83 ec 08             	sub    $0x8,%esp
+    122b:	68 a9 4d 00 00       	push   $0x4da9
+    1230:	6a 01                	push   $0x1
+    1232:	e8 c9 28 00 00       	call   3b00 <printf>
+      exit();
+    1237:	e8 47 27 00 00       	call   3983 <exit>
+      printf(1, "wrong length %d\n", total);
+    123c:	50                   	push   %eax
+    123d:	53                   	push   %ebx
+    123e:	68 01 43 00 00       	push   $0x4301
+    1243:	6a 01                	push   $0x1
+    1245:	e8 b6 28 00 00       	call   3b00 <printf>
+      exit();
+    124a:	e8 34 27 00 00       	call   3983 <exit>
+          printf(1, "write failed %d\n", n);
+    124f:	52                   	push   %edx
+    1250:	50                   	push   %eax
+    1251:	68 e4 42 00 00       	push   $0x42e4
+    1256:	6a 01                	push   $0x1
+    1258:	e8 a3 28 00 00       	call   3b00 <printf>
+          exit();
+    125d:	e8 21 27 00 00       	call   3983 <exit>
+    1262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001270 <createdelete>:
+{
+    1270:	f3 0f 1e fb          	endbr32 
+    1274:	55                   	push   %ebp
+    1275:	89 e5                	mov    %esp,%ebp
+    1277:	57                   	push   %edi
+    1278:	56                   	push   %esi
+    1279:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    127a:	31 db                	xor    %ebx,%ebx
+{
+    127c:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    127f:	68 20 43 00 00       	push   $0x4320
+    1284:	6a 01                	push   $0x1
+    1286:	e8 75 28 00 00       	call   3b00 <printf>
+    128b:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    128e:	e8 e8 26 00 00       	call   397b <fork>
+    if(pid < 0){
+    1293:	85 c0                	test   %eax,%eax
+    1295:	0f 88 ce 01 00 00    	js     1469 <createdelete+0x1f9>
+    if(pid == 0){
+    129b:	0f 84 17 01 00 00    	je     13b8 <createdelete+0x148>
+  for(pi = 0; pi < 4; pi++){
+    12a1:	83 c3 01             	add    $0x1,%ebx
+    12a4:	83 fb 04             	cmp    $0x4,%ebx
+    12a7:	75 e5                	jne    128e <createdelete+0x1e>
+    wait();
+    12a9:	e8 dd 26 00 00       	call   398b <wait>
+    12ae:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  name[0] = name[1] = name[2] = 0;
+    12b1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    wait();
+    12b6:	e8 d0 26 00 00       	call   398b <wait>
+    12bb:	e8 cb 26 00 00       	call   398b <wait>
+    12c0:	e8 c6 26 00 00       	call   398b <wait>
+  name[0] = name[1] = name[2] = 0;
+    12c5:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+  for(i = 0; i < N; i++){
+    12c9:	89 7d c0             	mov    %edi,-0x40(%ebp)
+    12cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    for(pi = 0; pi < 4; pi++){
+    12d0:	8d 46 31             	lea    0x31(%esi),%eax
+    12d3:	89 f7                	mov    %esi,%edi
+    12d5:	83 c6 01             	add    $0x1,%esi
+    12d8:	83 fe 09             	cmp    $0x9,%esi
+    12db:	88 45 c7             	mov    %al,-0x39(%ebp)
+    12de:	0f 9f c3             	setg   %bl
+    12e1:	85 f6                	test   %esi,%esi
+    12e3:	0f 94 c0             	sete   %al
+    12e6:	09 c3                	or     %eax,%ebx
+    12e8:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    12eb:	bb 70 00 00 00       	mov    $0x70,%ebx
+      fd = open(name, 0);
+    12f0:	83 ec 08             	sub    $0x8,%esp
+      name[1] = '0' + i;
+    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      name[0] = 'p' + pi;
+    12f7:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    12fa:	6a 00                	push   $0x0
+    12fc:	ff 75 c0             	pushl  -0x40(%ebp)
+      name[1] = '0' + i;
+    12ff:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1302:	e8 bc 26 00 00       	call   39c3 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    1307:	83 c4 10             	add    $0x10,%esp
+    130a:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    130e:	0f 84 8c 00 00 00    	je     13a0 <createdelete+0x130>
+    1314:	85 c0                	test   %eax,%eax
+    1316:	0f 88 21 01 00 00    	js     143d <createdelete+0x1cd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    131c:	83 ff 08             	cmp    $0x8,%edi
+    131f:	0f 86 60 01 00 00    	jbe    1485 <createdelete+0x215>
+        close(fd);
+    1325:	83 ec 0c             	sub    $0xc,%esp
+    1328:	50                   	push   %eax
+    1329:	e8 7d 26 00 00       	call   39ab <close>
+    132e:	83 c4 10             	add    $0x10,%esp
+    for(pi = 0; pi < 4; pi++){
+    1331:	83 c3 01             	add    $0x1,%ebx
+    1334:	80 fb 74             	cmp    $0x74,%bl
+    1337:	75 b7                	jne    12f0 <createdelete+0x80>
+  for(i = 0; i < N; i++){
+    1339:	83 fe 13             	cmp    $0x13,%esi
+    133c:	75 92                	jne    12d0 <createdelete+0x60>
+    133e:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    1341:	be 70 00 00 00       	mov    $0x70,%esi
+    1346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    134d:	8d 76 00             	lea    0x0(%esi),%esi
+    for(pi = 0; pi < 4; pi++){
+    1350:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    1353:	bb 04 00 00 00       	mov    $0x4,%ebx
+    1358:	88 45 c7             	mov    %al,-0x39(%ebp)
+      unlink(name);
+    135b:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    135e:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    1360:	57                   	push   %edi
+      name[0] = 'p' + i;
+    1361:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1364:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    1368:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    136b:	e8 63 26 00 00       	call   39d3 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1370:	83 c4 10             	add    $0x10,%esp
+    1373:	83 eb 01             	sub    $0x1,%ebx
+    1376:	75 e3                	jne    135b <createdelete+0xeb>
+  for(i = 0; i < N; i++){
+    1378:	83 c6 01             	add    $0x1,%esi
+    137b:	89 f0                	mov    %esi,%eax
+    137d:	3c 84                	cmp    $0x84,%al
+    137f:	75 cf                	jne    1350 <createdelete+0xe0>
+  printf(1, "createdelete ok\n");
+    1381:	83 ec 08             	sub    $0x8,%esp
+    1384:	68 33 43 00 00       	push   $0x4333
+    1389:	6a 01                	push   $0x1
+    138b:	e8 70 27 00 00       	call   3b00 <printf>
+}
+    1390:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1393:	5b                   	pop    %ebx
+    1394:	5e                   	pop    %esi
+    1395:	5f                   	pop    %edi
+    1396:	5d                   	pop    %ebp
+    1397:	c3                   	ret    
+    1398:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    139f:	90                   	nop
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    13a0:	83 ff 08             	cmp    $0x8,%edi
+    13a3:	0f 86 d4 00 00 00    	jbe    147d <createdelete+0x20d>
+      if(fd >= 0)
+    13a9:	85 c0                	test   %eax,%eax
+    13ab:	78 84                	js     1331 <createdelete+0xc1>
+    13ad:	e9 73 ff ff ff       	jmp    1325 <createdelete+0xb5>
+    13b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    13b8:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    13bb:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    13bf:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    13c2:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    13c5:	31 db                	xor    %ebx,%ebx
+    13c7:	eb 0f                	jmp    13d8 <createdelete+0x168>
+    13c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    13d0:	83 fb 13             	cmp    $0x13,%ebx
+    13d3:	74 63                	je     1438 <createdelete+0x1c8>
+    13d5:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    13d8:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    13db:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    13de:	68 02 02 00 00       	push   $0x202
+    13e3:	57                   	push   %edi
+        name[1] = '0' + i;
+    13e4:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    13e7:	e8 d7 25 00 00       	call   39c3 <open>
+        if(fd < 0){
+    13ec:	83 c4 10             	add    $0x10,%esp
+    13ef:	85 c0                	test   %eax,%eax
+    13f1:	78 62                	js     1455 <createdelete+0x1e5>
+        close(fd);
+    13f3:	83 ec 0c             	sub    $0xc,%esp
+    13f6:	50                   	push   %eax
+    13f7:	e8 af 25 00 00       	call   39ab <close>
+        if(i > 0 && (i % 2 ) == 0){
+    13fc:	83 c4 10             	add    $0x10,%esp
+    13ff:	85 db                	test   %ebx,%ebx
+    1401:	74 d2                	je     13d5 <createdelete+0x165>
+    1403:	f6 c3 01             	test   $0x1,%bl
+    1406:	75 c8                	jne    13d0 <createdelete+0x160>
+          if(unlink(name) < 0){
+    1408:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    140b:	89 d8                	mov    %ebx,%eax
+          if(unlink(name) < 0){
+    140d:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    140e:	d1 f8                	sar    %eax
+    1410:	83 c0 30             	add    $0x30,%eax
+    1413:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    1416:	e8 b8 25 00 00       	call   39d3 <unlink>
+    141b:	83 c4 10             	add    $0x10,%esp
+    141e:	85 c0                	test   %eax,%eax
+    1420:	79 ae                	jns    13d0 <createdelete+0x160>
+            printf(1, "unlink failed\n");
+    1422:	52                   	push   %edx
+    1423:	52                   	push   %edx
+    1424:	68 21 3f 00 00       	push   $0x3f21
+    1429:	6a 01                	push   $0x1
+    142b:	e8 d0 26 00 00       	call   3b00 <printf>
+            exit();
+    1430:	e8 4e 25 00 00       	call   3983 <exit>
+    1435:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    1438:	e8 46 25 00 00       	call   3983 <exit>
+    143d:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    1440:	83 ec 04             	sub    $0x4,%esp
+    1443:	57                   	push   %edi
+    1444:	68 e0 4f 00 00       	push   $0x4fe0
+    1449:	6a 01                	push   $0x1
+    144b:	e8 b0 26 00 00       	call   3b00 <printf>
+        exit();
+    1450:	e8 2e 25 00 00       	call   3983 <exit>
+          printf(1, "create failed\n");
+    1455:	83 ec 08             	sub    $0x8,%esp
+    1458:	68 6f 45 00 00       	push   $0x456f
+    145d:	6a 01                	push   $0x1
+    145f:	e8 9c 26 00 00       	call   3b00 <printf>
+          exit();
+    1464:	e8 1a 25 00 00       	call   3983 <exit>
+      printf(1, "fork failed\n");
+    1469:	83 ec 08             	sub    $0x8,%esp
+    146c:	68 a9 4d 00 00       	push   $0x4da9
+    1471:	6a 01                	push   $0x1
+    1473:	e8 88 26 00 00       	call   3b00 <printf>
+      exit();
+    1478:	e8 06 25 00 00       	call   3983 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    147d:	85 c0                	test   %eax,%eax
+    147f:	0f 88 ac fe ff ff    	js     1331 <createdelete+0xc1>
+    1485:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s did exist\n", name);
+    1488:	50                   	push   %eax
+    1489:	57                   	push   %edi
+    148a:	68 04 50 00 00       	push   $0x5004
+    148f:	6a 01                	push   $0x1
+    1491:	e8 6a 26 00 00       	call   3b00 <printf>
+        exit();
+    1496:	e8 e8 24 00 00       	call   3983 <exit>
+    149b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    149f:	90                   	nop
+
+000014a0 <unlinkread>:
+{
+    14a0:	f3 0f 1e fb          	endbr32 
+    14a4:	55                   	push   %ebp
+    14a5:	89 e5                	mov    %esp,%ebp
+    14a7:	56                   	push   %esi
+    14a8:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    14a9:	83 ec 08             	sub    $0x8,%esp
+    14ac:	68 44 43 00 00       	push   $0x4344
+    14b1:	6a 01                	push   $0x1
+    14b3:	e8 48 26 00 00       	call   3b00 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    14b8:	5b                   	pop    %ebx
+    14b9:	5e                   	pop    %esi
+    14ba:	68 02 02 00 00       	push   $0x202
+    14bf:	68 55 43 00 00       	push   $0x4355
+    14c4:	e8 fa 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14c9:	83 c4 10             	add    $0x10,%esp
+    14cc:	85 c0                	test   %eax,%eax
+    14ce:	0f 88 e6 00 00 00    	js     15ba <unlinkread+0x11a>
+  write(fd, "hello", 5);
+    14d4:	83 ec 04             	sub    $0x4,%esp
+    14d7:	89 c3                	mov    %eax,%ebx
+    14d9:	6a 05                	push   $0x5
+    14db:	68 7a 43 00 00       	push   $0x437a
+    14e0:	50                   	push   %eax
+    14e1:	e8 bd 24 00 00       	call   39a3 <write>
+  close(fd);
+    14e6:	89 1c 24             	mov    %ebx,(%esp)
+    14e9:	e8 bd 24 00 00       	call   39ab <close>
+  fd = open("unlinkread", O_RDWR);
+    14ee:	58                   	pop    %eax
+    14ef:	5a                   	pop    %edx
+    14f0:	6a 02                	push   $0x2
+    14f2:	68 55 43 00 00       	push   $0x4355
+    14f7:	e8 c7 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14fc:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_RDWR);
+    14ff:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1501:	85 c0                	test   %eax,%eax
+    1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
+  if(unlink("unlinkread") != 0){
+    1509:	83 ec 0c             	sub    $0xc,%esp
+    150c:	68 55 43 00 00       	push   $0x4355
+    1511:	e8 bd 24 00 00       	call   39d3 <unlink>
+    1516:	83 c4 10             	add    $0x10,%esp
+    1519:	85 c0                	test   %eax,%eax
+    151b:	0f 85 e5 00 00 00    	jne    1606 <unlinkread+0x166>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1521:	83 ec 08             	sub    $0x8,%esp
+    1524:	68 02 02 00 00       	push   $0x202
+    1529:	68 55 43 00 00       	push   $0x4355
+    152e:	e8 90 24 00 00       	call   39c3 <open>
+  write(fd1, "yyy", 3);
+    1533:	83 c4 0c             	add    $0xc,%esp
+    1536:	6a 03                	push   $0x3
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1538:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    153a:	68 b2 43 00 00       	push   $0x43b2
+    153f:	50                   	push   %eax
+    1540:	e8 5e 24 00 00       	call   39a3 <write>
+  close(fd1);
+    1545:	89 34 24             	mov    %esi,(%esp)
+    1548:	e8 5e 24 00 00       	call   39ab <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    154d:	83 c4 0c             	add    $0xc,%esp
+    1550:	68 00 20 00 00       	push   $0x2000
+    1555:	68 e0 86 00 00       	push   $0x86e0
+    155a:	53                   	push   %ebx
+    155b:	e8 3b 24 00 00       	call   399b <read>
+    1560:	83 c4 10             	add    $0x10,%esp
+    1563:	83 f8 05             	cmp    $0x5,%eax
+    1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
+  if(buf[0] != 'h'){
+    156c:	80 3d e0 86 00 00 68 	cmpb   $0x68,0x86e0
+    1573:	75 6b                	jne    15e0 <unlinkread+0x140>
+  if(write(fd, buf, 10) != 10){
+    1575:	83 ec 04             	sub    $0x4,%esp
+    1578:	6a 0a                	push   $0xa
+    157a:	68 e0 86 00 00       	push   $0x86e0
+    157f:	53                   	push   %ebx
+    1580:	e8 1e 24 00 00       	call   39a3 <write>
+    1585:	83 c4 10             	add    $0x10,%esp
+    1588:	83 f8 0a             	cmp    $0xa,%eax
+    158b:	75 40                	jne    15cd <unlinkread+0x12d>
+  close(fd);
+    158d:	83 ec 0c             	sub    $0xc,%esp
+    1590:	53                   	push   %ebx
+    1591:	e8 15 24 00 00       	call   39ab <close>
+  unlink("unlinkread");
+    1596:	c7 04 24 55 43 00 00 	movl   $0x4355,(%esp)
+    159d:	e8 31 24 00 00       	call   39d3 <unlink>
+  printf(1, "unlinkread ok\n");
+    15a2:	58                   	pop    %eax
+    15a3:	5a                   	pop    %edx
+    15a4:	68 fd 43 00 00       	push   $0x43fd
+    15a9:	6a 01                	push   $0x1
+    15ab:	e8 50 25 00 00       	call   3b00 <printf>
+}
+    15b0:	83 c4 10             	add    $0x10,%esp
+    15b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    15b6:	5b                   	pop    %ebx
+    15b7:	5e                   	pop    %esi
+    15b8:	5d                   	pop    %ebp
+    15b9:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    15ba:	51                   	push   %ecx
+    15bb:	51                   	push   %ecx
+    15bc:	68 60 43 00 00       	push   $0x4360
+    15c1:	6a 01                	push   $0x1
+    15c3:	e8 38 25 00 00       	call   3b00 <printf>
+    exit();
+    15c8:	e8 b6 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread write failed\n");
+    15cd:	51                   	push   %ecx
+    15ce:	51                   	push   %ecx
+    15cf:	68 e4 43 00 00       	push   $0x43e4
+    15d4:	6a 01                	push   $0x1
+    15d6:	e8 25 25 00 00       	call   3b00 <printf>
+    exit();
+    15db:	e8 a3 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread wrong data\n");
+    15e0:	53                   	push   %ebx
+    15e1:	53                   	push   %ebx
+    15e2:	68 cd 43 00 00       	push   $0x43cd
+    15e7:	6a 01                	push   $0x1
+    15e9:	e8 12 25 00 00       	call   3b00 <printf>
+    exit();
+    15ee:	e8 90 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread read failed");
+    15f3:	56                   	push   %esi
+    15f4:	56                   	push   %esi
+    15f5:	68 b6 43 00 00       	push   $0x43b6
+    15fa:	6a 01                	push   $0x1
+    15fc:	e8 ff 24 00 00       	call   3b00 <printf>
+    exit();
+    1601:	e8 7d 23 00 00       	call   3983 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    1606:	50                   	push   %eax
+    1607:	50                   	push   %eax
+    1608:	68 98 43 00 00       	push   $0x4398
+    160d:	6a 01                	push   $0x1
+    160f:	e8 ec 24 00 00       	call   3b00 <printf>
+    exit();
+    1614:	e8 6a 23 00 00       	call   3983 <exit>
+    printf(1, "open unlinkread failed\n");
+    1619:	50                   	push   %eax
+    161a:	50                   	push   %eax
+    161b:	68 80 43 00 00       	push   $0x4380
+    1620:	6a 01                	push   $0x1
+    1622:	e8 d9 24 00 00       	call   3b00 <printf>
+    exit();
+    1627:	e8 57 23 00 00       	call   3983 <exit>
+    162c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001630 <linktest>:
+{
+    1630:	f3 0f 1e fb          	endbr32 
+    1634:	55                   	push   %ebp
+    1635:	89 e5                	mov    %esp,%ebp
+    1637:	53                   	push   %ebx
+    1638:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    163b:	68 0c 44 00 00       	push   $0x440c
+    1640:	6a 01                	push   $0x1
+    1642:	e8 b9 24 00 00       	call   3b00 <printf>
+  unlink("lf1");
+    1647:	c7 04 24 16 44 00 00 	movl   $0x4416,(%esp)
+    164e:	e8 80 23 00 00       	call   39d3 <unlink>
+  unlink("lf2");
+    1653:	c7 04 24 1a 44 00 00 	movl   $0x441a,(%esp)
+    165a:	e8 74 23 00 00       	call   39d3 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    165f:	58                   	pop    %eax
+    1660:	5a                   	pop    %edx
+    1661:	68 02 02 00 00       	push   $0x202
+    1666:	68 16 44 00 00       	push   $0x4416
+    166b:	e8 53 23 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1670:	83 c4 10             	add    $0x10,%esp
+    1673:	85 c0                	test   %eax,%eax
+    1675:	0f 88 1e 01 00 00    	js     1799 <linktest+0x169>
+  if(write(fd, "hello", 5) != 5){
+    167b:	83 ec 04             	sub    $0x4,%esp
+    167e:	89 c3                	mov    %eax,%ebx
+    1680:	6a 05                	push   $0x5
+    1682:	68 7a 43 00 00       	push   $0x437a
+    1687:	50                   	push   %eax
+    1688:	e8 16 23 00 00       	call   39a3 <write>
+    168d:	83 c4 10             	add    $0x10,%esp
+    1690:	83 f8 05             	cmp    $0x5,%eax
+    1693:	0f 85 98 01 00 00    	jne    1831 <linktest+0x201>
+  close(fd);
+    1699:	83 ec 0c             	sub    $0xc,%esp
+    169c:	53                   	push   %ebx
+    169d:	e8 09 23 00 00       	call   39ab <close>
+  if(link("lf1", "lf2") < 0){
+    16a2:	5b                   	pop    %ebx
+    16a3:	58                   	pop    %eax
+    16a4:	68 1a 44 00 00       	push   $0x441a
+    16a9:	68 16 44 00 00       	push   $0x4416
+    16ae:	e8 30 23 00 00       	call   39e3 <link>
+    16b3:	83 c4 10             	add    $0x10,%esp
+    16b6:	85 c0                	test   %eax,%eax
+    16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
+  unlink("lf1");
+    16be:	83 ec 0c             	sub    $0xc,%esp
+    16c1:	68 16 44 00 00       	push   $0x4416
+    16c6:	e8 08 23 00 00       	call   39d3 <unlink>
+  if(open("lf1", 0) >= 0){
+    16cb:	58                   	pop    %eax
+    16cc:	5a                   	pop    %edx
+    16cd:	6a 00                	push   $0x0
+    16cf:	68 16 44 00 00       	push   $0x4416
+    16d4:	e8 ea 22 00 00       	call   39c3 <open>
+    16d9:	83 c4 10             	add    $0x10,%esp
+    16dc:	85 c0                	test   %eax,%eax
+    16de:	0f 89 27 01 00 00    	jns    180b <linktest+0x1db>
+  fd = open("lf2", 0);
+    16e4:	83 ec 08             	sub    $0x8,%esp
+    16e7:	6a 00                	push   $0x0
+    16e9:	68 1a 44 00 00       	push   $0x441a
+    16ee:	e8 d0 22 00 00       	call   39c3 <open>
+  if(fd < 0){
+    16f3:	83 c4 10             	add    $0x10,%esp
+  fd = open("lf2", 0);
+    16f6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    16f8:	85 c0                	test   %eax,%eax
+    16fa:	0f 88 f8 00 00 00    	js     17f8 <linktest+0x1c8>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    1700:	83 ec 04             	sub    $0x4,%esp
+    1703:	68 00 20 00 00       	push   $0x2000
+    1708:	68 e0 86 00 00       	push   $0x86e0
+    170d:	50                   	push   %eax
+    170e:	e8 88 22 00 00       	call   399b <read>
+    1713:	83 c4 10             	add    $0x10,%esp
+    1716:	83 f8 05             	cmp    $0x5,%eax
+    1719:	0f 85 c6 00 00 00    	jne    17e5 <linktest+0x1b5>
+  close(fd);
+    171f:	83 ec 0c             	sub    $0xc,%esp
+    1722:	53                   	push   %ebx
+    1723:	e8 83 22 00 00       	call   39ab <close>
+  if(link("lf2", "lf2") >= 0){
+    1728:	58                   	pop    %eax
+    1729:	5a                   	pop    %edx
+    172a:	68 1a 44 00 00       	push   $0x441a
+    172f:	68 1a 44 00 00       	push   $0x441a
+    1734:	e8 aa 22 00 00       	call   39e3 <link>
+    1739:	83 c4 10             	add    $0x10,%esp
+    173c:	85 c0                	test   %eax,%eax
+    173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
+  unlink("lf2");
+    1744:	83 ec 0c             	sub    $0xc,%esp
+    1747:	68 1a 44 00 00       	push   $0x441a
+    174c:	e8 82 22 00 00       	call   39d3 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    1751:	59                   	pop    %ecx
+    1752:	5b                   	pop    %ebx
+    1753:	68 16 44 00 00       	push   $0x4416
+    1758:	68 1a 44 00 00       	push   $0x441a
+    175d:	e8 81 22 00 00       	call   39e3 <link>
+    1762:	83 c4 10             	add    $0x10,%esp
+    1765:	85 c0                	test   %eax,%eax
+    1767:	79 56                	jns    17bf <linktest+0x18f>
+  if(link(".", "lf1") >= 0){
+    1769:	83 ec 08             	sub    $0x8,%esp
+    176c:	68 16 44 00 00       	push   $0x4416
+    1771:	68 de 46 00 00       	push   $0x46de
+    1776:	e8 68 22 00 00       	call   39e3 <link>
+    177b:	83 c4 10             	add    $0x10,%esp
+    177e:	85 c0                	test   %eax,%eax
+    1780:	79 2a                	jns    17ac <linktest+0x17c>
+  printf(1, "linktest ok\n");
+    1782:	83 ec 08             	sub    $0x8,%esp
+    1785:	68 b4 44 00 00       	push   $0x44b4
+    178a:	6a 01                	push   $0x1
+    178c:	e8 6f 23 00 00       	call   3b00 <printf>
+}
+    1791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1794:	83 c4 10             	add    $0x10,%esp
+    1797:	c9                   	leave  
+    1798:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1799:	50                   	push   %eax
+    179a:	50                   	push   %eax
+    179b:	68 1e 44 00 00       	push   $0x441e
+    17a0:	6a 01                	push   $0x1
+    17a2:	e8 59 23 00 00       	call   3b00 <printf>
+    exit();
+    17a7:	e8 d7 21 00 00       	call   3983 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    17ac:	50                   	push   %eax
+    17ad:	50                   	push   %eax
+    17ae:	68 98 44 00 00       	push   $0x4498
+    17b3:	6a 01                	push   $0x1
+    17b5:	e8 46 23 00 00       	call   3b00 <printf>
+    exit();
+    17ba:	e8 c4 21 00 00       	call   3983 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    17bf:	52                   	push   %edx
+    17c0:	52                   	push   %edx
+    17c1:	68 4c 50 00 00       	push   $0x504c
+    17c6:	6a 01                	push   $0x1
+    17c8:	e8 33 23 00 00       	call   3b00 <printf>
+    exit();
+    17cd:	e8 b1 21 00 00       	call   3983 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    17d2:	50                   	push   %eax
+    17d3:	50                   	push   %eax
+    17d4:	68 7a 44 00 00       	push   $0x447a
+    17d9:	6a 01                	push   $0x1
+    17db:	e8 20 23 00 00       	call   3b00 <printf>
+    exit();
+    17e0:	e8 9e 21 00 00       	call   3983 <exit>
+    printf(1, "read lf2 failed\n");
+    17e5:	51                   	push   %ecx
+    17e6:	51                   	push   %ecx
+    17e7:	68 69 44 00 00       	push   $0x4469
+    17ec:	6a 01                	push   $0x1
+    17ee:	e8 0d 23 00 00       	call   3b00 <printf>
+    exit();
+    17f3:	e8 8b 21 00 00       	call   3983 <exit>
+    printf(1, "open lf2 failed\n");
+    17f8:	53                   	push   %ebx
+    17f9:	53                   	push   %ebx
+    17fa:	68 58 44 00 00       	push   $0x4458
+    17ff:	6a 01                	push   $0x1
+    1801:	e8 fa 22 00 00       	call   3b00 <printf>
+    exit();
+    1806:	e8 78 21 00 00       	call   3983 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    180b:	50                   	push   %eax
+    180c:	50                   	push   %eax
+    180d:	68 24 50 00 00       	push   $0x5024
+    1812:	6a 01                	push   $0x1
+    1814:	e8 e7 22 00 00       	call   3b00 <printf>
+    exit();
+    1819:	e8 65 21 00 00       	call   3983 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    181e:	51                   	push   %ecx
+    181f:	51                   	push   %ecx
+    1820:	68 43 44 00 00       	push   $0x4443
+    1825:	6a 01                	push   $0x1
+    1827:	e8 d4 22 00 00       	call   3b00 <printf>
+    exit();
+    182c:	e8 52 21 00 00       	call   3983 <exit>
+    printf(1, "write lf1 failed\n");
+    1831:	50                   	push   %eax
+    1832:	50                   	push   %eax
+    1833:	68 31 44 00 00       	push   $0x4431
+    1838:	6a 01                	push   $0x1
+    183a:	e8 c1 22 00 00       	call   3b00 <printf>
+    exit();
+    183f:	e8 3f 21 00 00       	call   3983 <exit>
+    1844:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    184b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    184f:	90                   	nop
+
+00001850 <concreate>:
+{
+    1850:	f3 0f 1e fb          	endbr32 
+    1854:	55                   	push   %ebp
+    1855:	89 e5                	mov    %esp,%ebp
+    1857:	57                   	push   %edi
+    1858:	56                   	push   %esi
+  for(i = 0; i < 40; i++){
+    1859:	31 f6                	xor    %esi,%esi
+{
+    185b:	53                   	push   %ebx
+    185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    185f:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    1862:	68 c1 44 00 00       	push   $0x44c1
+    1867:	6a 01                	push   $0x1
+    1869:	e8 92 22 00 00       	call   3b00 <printf>
+  file[0] = 'C';
+    186e:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    1872:	83 c4 10             	add    $0x10,%esp
+    1875:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+  for(i = 0; i < 40; i++){
+    1879:	eb 48                	jmp    18c3 <concreate+0x73>
+    187b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    187f:	90                   	nop
+    1880:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
+    if(pid && (i % 3) == 1){
+    1886:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
+    188b:	0f 83 af 00 00 00    	jae    1940 <concreate+0xf0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1891:	83 ec 08             	sub    $0x8,%esp
+    1894:	68 02 02 00 00       	push   $0x202
+    1899:	53                   	push   %ebx
+    189a:	e8 24 21 00 00       	call   39c3 <open>
+      if(fd < 0){
+    189f:	83 c4 10             	add    $0x10,%esp
+    18a2:	85 c0                	test   %eax,%eax
+    18a4:	78 5f                	js     1905 <concreate+0xb5>
+      close(fd);
+    18a6:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    18a9:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    18ac:	50                   	push   %eax
+    18ad:	e8 f9 20 00 00       	call   39ab <close>
+    18b2:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18b5:	e8 d1 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    18ba:	83 fe 28             	cmp    $0x28,%esi
+    18bd:	0f 84 9f 00 00 00    	je     1962 <concreate+0x112>
+    unlink(file);
+    18c3:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    18c6:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    18c9:	53                   	push   %ebx
+    file[1] = '0' + i;
+    18ca:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    18cd:	e8 01 21 00 00       	call   39d3 <unlink>
+    pid = fork();
+    18d2:	e8 a4 20 00 00       	call   397b <fork>
+    if(pid && (i % 3) == 1){
+    18d7:	83 c4 10             	add    $0x10,%esp
+    18da:	85 c0                	test   %eax,%eax
+    18dc:	75 a2                	jne    1880 <concreate+0x30>
+      link("C0", file);
+    18de:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
+    } else if(pid == 0 && (i % 5) == 1){
+    18e4:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
+    18ea:	73 34                	jae    1920 <concreate+0xd0>
+      fd = open(file, O_CREATE | O_RDWR);
+    18ec:	83 ec 08             	sub    $0x8,%esp
+    18ef:	68 02 02 00 00       	push   $0x202
+    18f4:	53                   	push   %ebx
+    18f5:	e8 c9 20 00 00       	call   39c3 <open>
+      if(fd < 0){
+    18fa:	83 c4 10             	add    $0x10,%esp
+    18fd:	85 c0                	test   %eax,%eax
+    18ff:	0f 89 39 02 00 00    	jns    1b3e <concreate+0x2ee>
+        printf(1, "concreate create %s failed\n", file);
+    1905:	83 ec 04             	sub    $0x4,%esp
+    1908:	53                   	push   %ebx
+    1909:	68 d4 44 00 00       	push   $0x44d4
+    190e:	6a 01                	push   $0x1
+    1910:	e8 eb 21 00 00       	call   3b00 <printf>
+        exit();
+    1915:	e8 69 20 00 00       	call   3983 <exit>
+    191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("C0", file);
+    1920:	83 ec 08             	sub    $0x8,%esp
+    1923:	53                   	push   %ebx
+    1924:	68 d1 44 00 00       	push   $0x44d1
+    1929:	e8 b5 20 00 00       	call   39e3 <link>
+    192e:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1931:	e8 4d 20 00 00       	call   3983 <exit>
+    1936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    193d:	8d 76 00             	lea    0x0(%esi),%esi
+      link("C0", file);
+    1940:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    1943:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    1946:	53                   	push   %ebx
+    1947:	68 d1 44 00 00       	push   $0x44d1
+    194c:	e8 92 20 00 00       	call   39e3 <link>
+    1951:	83 c4 10             	add    $0x10,%esp
+      wait();
+    1954:	e8 32 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1959:	83 fe 28             	cmp    $0x28,%esi
+    195c:	0f 85 61 ff ff ff    	jne    18c3 <concreate+0x73>
+  memset(fa, 0, sizeof(fa));
+    1962:	83 ec 04             	sub    $0x4,%esp
+    1965:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    1968:	6a 28                	push   $0x28
+    196a:	6a 00                	push   $0x0
+    196c:	50                   	push   %eax
+    196d:	e8 6e 1e 00 00       	call   37e0 <memset>
+  fd = open(".", 0);
+    1972:	5e                   	pop    %esi
+    1973:	5f                   	pop    %edi
+    1974:	6a 00                	push   $0x0
+    1976:	68 de 46 00 00       	push   $0x46de
+    197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    197e:	e8 40 20 00 00       	call   39c3 <open>
+  n = 0;
+    1983:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    198a:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    198d:	89 c6                	mov    %eax,%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    198f:	90                   	nop
+    1990:	83 ec 04             	sub    $0x4,%esp
+    1993:	6a 10                	push   $0x10
+    1995:	57                   	push   %edi
+    1996:	56                   	push   %esi
+    1997:	e8 ff 1f 00 00       	call   399b <read>
+    199c:	83 c4 10             	add    $0x10,%esp
+    199f:	85 c0                	test   %eax,%eax
+    19a1:	7e 3d                	jle    19e0 <concreate+0x190>
+    if(de.inum == 0)
+    19a3:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    19a8:	74 e6                	je     1990 <concreate+0x140>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    19aa:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    19ae:	75 e0                	jne    1990 <concreate+0x140>
+    19b0:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    19b4:	75 da                	jne    1990 <concreate+0x140>
+      i = de.name[1] - '0';
+    19b6:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    19ba:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    19bd:	83 f8 27             	cmp    $0x27,%eax
+    19c0:	0f 87 60 01 00 00    	ja     1b26 <concreate+0x2d6>
+      if(fa[i]){
+    19c6:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    19cb:	0f 85 3d 01 00 00    	jne    1b0e <concreate+0x2be>
+      n++;
+    19d1:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+      fa[i] = 1;
+    19d5:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    19da:	eb b4                	jmp    1990 <concreate+0x140>
+    19dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    19e0:	83 ec 0c             	sub    $0xc,%esp
+    19e3:	56                   	push   %esi
+    19e4:	e8 c2 1f 00 00       	call   39ab <close>
+  if(n != 40){
+    19e9:	83 c4 10             	add    $0x10,%esp
+    19ec:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    19f0:	0f 85 05 01 00 00    	jne    1afb <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    19f6:	31 f6                	xor    %esi,%esi
+    19f8:	eb 4c                	jmp    1a46 <concreate+0x1f6>
+    19fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1a00:	85 ff                	test   %edi,%edi
+    1a02:	74 05                	je     1a09 <concreate+0x1b9>
+    1a04:	83 f8 01             	cmp    $0x1,%eax
+    1a07:	74 6c                	je     1a75 <concreate+0x225>
+      unlink(file);
+    1a09:	83 ec 0c             	sub    $0xc,%esp
+    1a0c:	53                   	push   %ebx
+    1a0d:	e8 c1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a12:	89 1c 24             	mov    %ebx,(%esp)
+    1a15:	e8 b9 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a1a:	89 1c 24             	mov    %ebx,(%esp)
+    1a1d:	e8 b1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a22:	89 1c 24             	mov    %ebx,(%esp)
+    1a25:	e8 a9 1f 00 00       	call   39d3 <unlink>
+    1a2a:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    1a2d:	85 ff                	test   %edi,%edi
+    1a2f:	0f 84 fc fe ff ff    	je     1931 <concreate+0xe1>
+      wait();
+    1a35:	e8 51 1f 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1a3a:	83 c6 01             	add    $0x1,%esi
+    1a3d:	83 fe 28             	cmp    $0x28,%esi
+    1a40:	0f 84 8a 00 00 00    	je     1ad0 <concreate+0x280>
+    file[1] = '0' + i;
+    1a46:	8d 46 30             	lea    0x30(%esi),%eax
+    1a49:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    1a4c:	e8 2a 1f 00 00       	call   397b <fork>
+    1a51:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    1a53:	85 c0                	test   %eax,%eax
+    1a55:	0f 88 8c 00 00 00    	js     1ae7 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    1a5b:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    1a60:	f7 e6                	mul    %esi
+    1a62:	89 d0                	mov    %edx,%eax
+    1a64:	83 e2 fe             	and    $0xfffffffe,%edx
+    1a67:	d1 e8                	shr    %eax
+    1a69:	01 c2                	add    %eax,%edx
+    1a6b:	89 f0                	mov    %esi,%eax
+    1a6d:	29 d0                	sub    %edx,%eax
+    1a6f:	89 c1                	mov    %eax,%ecx
+    1a71:	09 f9                	or     %edi,%ecx
+    1a73:	75 8b                	jne    1a00 <concreate+0x1b0>
+      close(open(file, 0));
+    1a75:	83 ec 08             	sub    $0x8,%esp
+    1a78:	6a 00                	push   $0x0
+    1a7a:	53                   	push   %ebx
+    1a7b:	e8 43 1f 00 00       	call   39c3 <open>
+    1a80:	89 04 24             	mov    %eax,(%esp)
+    1a83:	e8 23 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a88:	58                   	pop    %eax
+    1a89:	5a                   	pop    %edx
+    1a8a:	6a 00                	push   $0x0
+    1a8c:	53                   	push   %ebx
+    1a8d:	e8 31 1f 00 00       	call   39c3 <open>
+    1a92:	89 04 24             	mov    %eax,(%esp)
+    1a95:	e8 11 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a9a:	59                   	pop    %ecx
+    1a9b:	58                   	pop    %eax
+    1a9c:	6a 00                	push   $0x0
+    1a9e:	53                   	push   %ebx
+    1a9f:	e8 1f 1f 00 00       	call   39c3 <open>
+    1aa4:	89 04 24             	mov    %eax,(%esp)
+    1aa7:	e8 ff 1e 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1aac:	58                   	pop    %eax
+    1aad:	5a                   	pop    %edx
+    1aae:	6a 00                	push   $0x0
+    1ab0:	53                   	push   %ebx
+    1ab1:	e8 0d 1f 00 00       	call   39c3 <open>
+    1ab6:	89 04 24             	mov    %eax,(%esp)
+    1ab9:	e8 ed 1e 00 00       	call   39ab <close>
+    1abe:	83 c4 10             	add    $0x10,%esp
+    1ac1:	e9 67 ff ff ff       	jmp    1a2d <concreate+0x1dd>
+    1ac6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1acd:	8d 76 00             	lea    0x0(%esi),%esi
+  printf(1, "concreate ok\n");
+    1ad0:	83 ec 08             	sub    $0x8,%esp
+    1ad3:	68 26 45 00 00       	push   $0x4526
+    1ad8:	6a 01                	push   $0x1
+    1ada:	e8 21 20 00 00       	call   3b00 <printf>
+}
+    1adf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1ae2:	5b                   	pop    %ebx
+    1ae3:	5e                   	pop    %esi
+    1ae4:	5f                   	pop    %edi
+    1ae5:	5d                   	pop    %ebp
+    1ae6:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1ae7:	83 ec 08             	sub    $0x8,%esp
+    1aea:	68 a9 4d 00 00       	push   $0x4da9
+    1aef:	6a 01                	push   $0x1
+    1af1:	e8 0a 20 00 00       	call   3b00 <printf>
+      exit();
+    1af6:	e8 88 1e 00 00       	call   3983 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1afb:	51                   	push   %ecx
+    1afc:	51                   	push   %ecx
+    1afd:	68 70 50 00 00       	push   $0x5070
+    1b02:	6a 01                	push   $0x1
+    1b04:	e8 f7 1f 00 00       	call   3b00 <printf>
+    exit();
+    1b09:	e8 75 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1b0e:	83 ec 04             	sub    $0x4,%esp
+    1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b14:	50                   	push   %eax
+    1b15:	68 09 45 00 00       	push   $0x4509
+    1b1a:	6a 01                	push   $0x1
+    1b1c:	e8 df 1f 00 00       	call   3b00 <printf>
+        exit();
+    1b21:	e8 5d 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1b26:	83 ec 04             	sub    $0x4,%esp
+    1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b2c:	50                   	push   %eax
+    1b2d:	68 f0 44 00 00       	push   $0x44f0
+    1b32:	6a 01                	push   $0x1
+    1b34:	e8 c7 1f 00 00       	call   3b00 <printf>
+        exit();
+    1b39:	e8 45 1e 00 00       	call   3983 <exit>
+      close(fd);
+    1b3e:	83 ec 0c             	sub    $0xc,%esp
+    1b41:	50                   	push   %eax
+    1b42:	e8 64 1e 00 00       	call   39ab <close>
+    1b47:	83 c4 10             	add    $0x10,%esp
+    1b4a:	e9 e2 fd ff ff       	jmp    1931 <concreate+0xe1>
+    1b4f:	90                   	nop
+
+00001b50 <linkunlink>:
+{
+    1b50:	f3 0f 1e fb          	endbr32 
+    1b54:	55                   	push   %ebp
+    1b55:	89 e5                	mov    %esp,%ebp
+    1b57:	57                   	push   %edi
+    1b58:	56                   	push   %esi
+    1b59:	53                   	push   %ebx
+    1b5a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1b5d:	68 34 45 00 00       	push   $0x4534
+    1b62:	6a 01                	push   $0x1
+    1b64:	e8 97 1f 00 00       	call   3b00 <printf>
+  unlink("x");
+    1b69:	c7 04 24 c1 47 00 00 	movl   $0x47c1,(%esp)
+    1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
+  pid = fork();
+    1b75:	e8 01 1e 00 00       	call   397b <fork>
+  if(pid < 0){
+    1b7a:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1b7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1b80:	85 c0                	test   %eax,%eax
+    1b82:	0f 88 b2 00 00 00    	js     1c3a <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b88:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b8c:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b91:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b96:	19 ff                	sbb    %edi,%edi
+    1b98:	83 e7 60             	and    $0x60,%edi
+    1b9b:	83 c7 01             	add    $0x1,%edi
+    1b9e:	eb 1a                	jmp    1bba <linkunlink+0x6a>
+    } else if((x % 3) == 1){
+    1ba0:	83 f8 01             	cmp    $0x1,%eax
+    1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
+      unlink("x");
+    1ba5:	83 ec 0c             	sub    $0xc,%esp
+    1ba8:	68 c1 47 00 00       	push   $0x47c1
+    1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
+    1bb2:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bb5:	83 eb 01             	sub    $0x1,%ebx
+    1bb8:	74 41                	je     1bfb <linkunlink+0xab>
+    x = x * 1103515245 + 12345;
+    1bba:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1bc0:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1bc6:	89 f8                	mov    %edi,%eax
+    1bc8:	f7 e6                	mul    %esi
+    1bca:	89 d0                	mov    %edx,%eax
+    1bcc:	83 e2 fe             	and    $0xfffffffe,%edx
+    1bcf:	d1 e8                	shr    %eax
+    1bd1:	01 c2                	add    %eax,%edx
+    1bd3:	89 f8                	mov    %edi,%eax
+    1bd5:	29 d0                	sub    %edx,%eax
+    1bd7:	75 c7                	jne    1ba0 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1bd9:	83 ec 08             	sub    $0x8,%esp
+    1bdc:	68 02 02 00 00       	push   $0x202
+    1be1:	68 c1 47 00 00       	push   $0x47c1
+    1be6:	e8 d8 1d 00 00       	call   39c3 <open>
+    1beb:	89 04 24             	mov    %eax,(%esp)
+    1bee:	e8 b8 1d 00 00       	call   39ab <close>
+    1bf3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bf6:	83 eb 01             	sub    $0x1,%ebx
+    1bf9:	75 bf                	jne    1bba <linkunlink+0x6a>
+  if(pid)
+    1bfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1bfe:	85 c0                	test   %eax,%eax
+    1c00:	74 4b                	je     1c4d <linkunlink+0xfd>
+    wait();
+    1c02:	e8 84 1d 00 00       	call   398b <wait>
+  printf(1, "linkunlink ok\n");
+    1c07:	83 ec 08             	sub    $0x8,%esp
+    1c0a:	68 49 45 00 00       	push   $0x4549
+    1c0f:	6a 01                	push   $0x1
+    1c11:	e8 ea 1e 00 00       	call   3b00 <printf>
+}
+    1c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1c19:	5b                   	pop    %ebx
+    1c1a:	5e                   	pop    %esi
+    1c1b:	5f                   	pop    %edi
+    1c1c:	5d                   	pop    %ebp
+    1c1d:	c3                   	ret    
+    1c1e:	66 90                	xchg   %ax,%ax
+      link("cat", "x");
+    1c20:	83 ec 08             	sub    $0x8,%esp
+    1c23:	68 c1 47 00 00       	push   $0x47c1
+    1c28:	68 45 45 00 00       	push   $0x4545
+    1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
+    1c32:	83 c4 10             	add    $0x10,%esp
+    1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1c3a:	52                   	push   %edx
+    1c3b:	52                   	push   %edx
+    1c3c:	68 a9 4d 00 00       	push   $0x4da9
+    1c41:	6a 01                	push   $0x1
+    1c43:	e8 b8 1e 00 00       	call   3b00 <printf>
+    exit();
+    1c48:	e8 36 1d 00 00       	call   3983 <exit>
+    exit();
+    1c4d:	e8 31 1d 00 00       	call   3983 <exit>
+    1c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001c60 <bigdir>:
+{
+    1c60:	f3 0f 1e fb          	endbr32 
+    1c64:	55                   	push   %ebp
+    1c65:	89 e5                	mov    %esp,%ebp
+    1c67:	57                   	push   %edi
+    1c68:	56                   	push   %esi
+    1c69:	53                   	push   %ebx
+    1c6a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1c6d:	68 58 45 00 00       	push   $0x4558
+    1c72:	6a 01                	push   $0x1
+    1c74:	e8 87 1e 00 00       	call   3b00 <printf>
+  unlink("bd");
+    1c79:	c7 04 24 65 45 00 00 	movl   $0x4565,(%esp)
+    1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
+  fd = open("bd", O_CREATE);
+    1c85:	5a                   	pop    %edx
+    1c86:	59                   	pop    %ecx
+    1c87:	68 00 02 00 00       	push   $0x200
+    1c8c:	68 65 45 00 00       	push   $0x4565
+    1c91:	e8 2d 1d 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1c96:	83 c4 10             	add    $0x10,%esp
+    1c99:	85 c0                	test   %eax,%eax
+    1c9b:	0f 88 ea 00 00 00    	js     1d8b <bigdir+0x12b>
+  close(fd);
+    1ca1:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1ca4:	31 f6                	xor    %esi,%esi
+    1ca6:	8d 7d de             	lea    -0x22(%ebp),%edi
+  close(fd);
+    1ca9:	50                   	push   %eax
+    1caa:	e8 fc 1c 00 00       	call   39ab <close>
+    1caf:	83 c4 10             	add    $0x10,%esp
+    1cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + (i / 64);
+    1cb8:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1cba:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1cbd:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1cc1:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1cc4:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1cc5:	83 c0 30             	add    $0x30,%eax
+    if(link("bd", name) != 0){
+    1cc8:	68 65 45 00 00       	push   $0x4565
+    name[1] = '0' + (i / 64);
+    1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd0:	89 f0                	mov    %esi,%eax
+    1cd2:	83 e0 3f             	and    $0x3f,%eax
+    name[3] = '\0';
+    1cd5:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd9:	83 c0 30             	add    $0x30,%eax
+    1cdc:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1cdf:	e8 ff 1c 00 00       	call   39e3 <link>
+    1ce4:	83 c4 10             	add    $0x10,%esp
+    1ce7:	89 c3                	mov    %eax,%ebx
+    1ce9:	85 c0                	test   %eax,%eax
+    1ceb:	75 76                	jne    1d63 <bigdir+0x103>
+  for(i = 0; i < 500; i++){
+    1ced:	83 c6 01             	add    $0x1,%esi
+    1cf0:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
+  unlink("bd");
+    1cf8:	83 ec 0c             	sub    $0xc,%esp
+    1cfb:	68 65 45 00 00       	push   $0x4565
+    1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
+    1d05:	83 c4 10             	add    $0x10,%esp
+    1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1d0f:	90                   	nop
+    name[1] = '0' + (i / 64);
+    1d10:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1d12:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1d15:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1d19:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1d1c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1d1d:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1d20:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1d24:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1d27:	89 d8                	mov    %ebx,%eax
+    1d29:	83 e0 3f             	and    $0x3f,%eax
+    1d2c:	83 c0 30             	add    $0x30,%eax
+    1d2f:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1d32:	e8 9c 1c 00 00       	call   39d3 <unlink>
+    1d37:	83 c4 10             	add    $0x10,%esp
+    1d3a:	85 c0                	test   %eax,%eax
+    1d3c:	75 39                	jne    1d77 <bigdir+0x117>
+  for(i = 0; i < 500; i++){
+    1d3e:	83 c3 01             	add    $0x1,%ebx
+    1d41:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
+  printf(1, "bigdir ok\n");
+    1d49:	83 ec 08             	sub    $0x8,%esp
+    1d4c:	68 a7 45 00 00       	push   $0x45a7
+    1d51:	6a 01                	push   $0x1
+    1d53:	e8 a8 1d 00 00       	call   3b00 <printf>
+    1d58:	83 c4 10             	add    $0x10,%esp
+}
+    1d5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1d5e:	5b                   	pop    %ebx
+    1d5f:	5e                   	pop    %esi
+    1d60:	5f                   	pop    %edi
+    1d61:	5d                   	pop    %ebp
+    1d62:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1d63:	83 ec 08             	sub    $0x8,%esp
+    1d66:	68 7e 45 00 00       	push   $0x457e
+    1d6b:	6a 01                	push   $0x1
+    1d6d:	e8 8e 1d 00 00       	call   3b00 <printf>
+      exit();
+    1d72:	e8 0c 1c 00 00       	call   3983 <exit>
+      printf(1, "bigdir unlink failed");
+    1d77:	83 ec 08             	sub    $0x8,%esp
+    1d7a:	68 92 45 00 00       	push   $0x4592
+    1d7f:	6a 01                	push   $0x1
+    1d81:	e8 7a 1d 00 00       	call   3b00 <printf>
+      exit();
+    1d86:	e8 f8 1b 00 00       	call   3983 <exit>
+    printf(1, "bigdir create failed\n");
+    1d8b:	50                   	push   %eax
+    1d8c:	50                   	push   %eax
+    1d8d:	68 68 45 00 00       	push   $0x4568
+    1d92:	6a 01                	push   $0x1
+    1d94:	e8 67 1d 00 00       	call   3b00 <printf>
+    exit();
+    1d99:	e8 e5 1b 00 00       	call   3983 <exit>
+    1d9e:	66 90                	xchg   %ax,%ax
+
+00001da0 <subdir>:
+{
+    1da0:	f3 0f 1e fb          	endbr32 
+    1da4:	55                   	push   %ebp
+    1da5:	89 e5                	mov    %esp,%ebp
+    1da7:	53                   	push   %ebx
+    1da8:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1dab:	68 b2 45 00 00       	push   $0x45b2
+    1db0:	6a 01                	push   $0x1
+    1db2:	e8 49 1d 00 00       	call   3b00 <printf>
+  unlink("ff");
+    1db7:	c7 04 24 3b 46 00 00 	movl   $0x463b,(%esp)
+    1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
+  if(mkdir("dd") != 0){
+    1dc3:	c7 04 24 d8 46 00 00 	movl   $0x46d8,(%esp)
+    1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
+    1dcf:	83 c4 10             	add    $0x10,%esp
+    1dd2:	85 c0                	test   %eax,%eax
+    1dd4:	0f 85 b3 05 00 00    	jne    238d <subdir+0x5ed>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1dda:	83 ec 08             	sub    $0x8,%esp
+    1ddd:	68 02 02 00 00       	push   $0x202
+    1de2:	68 11 46 00 00       	push   $0x4611
+    1de7:	e8 d7 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1dec:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1def:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1df1:	85 c0                	test   %eax,%eax
+    1df3:	0f 88 81 05 00 00    	js     237a <subdir+0x5da>
+  write(fd, "ff", 2);
+    1df9:	83 ec 04             	sub    $0x4,%esp
+    1dfc:	6a 02                	push   $0x2
+    1dfe:	68 3b 46 00 00       	push   $0x463b
+    1e03:	50                   	push   %eax
+    1e04:	e8 9a 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e09:	89 1c 24             	mov    %ebx,(%esp)
+    1e0c:	e8 9a 1b 00 00       	call   39ab <close>
+  if(unlink("dd") >= 0){
+    1e11:	c7 04 24 d8 46 00 00 	movl   $0x46d8,(%esp)
+    1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
+    1e1d:	83 c4 10             	add    $0x10,%esp
+    1e20:	85 c0                	test   %eax,%eax
+    1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
+  if(mkdir("/dd/dd") != 0){
+    1e28:	83 ec 0c             	sub    $0xc,%esp
+    1e2b:	68 ec 45 00 00       	push   $0x45ec
+    1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
+    1e35:	83 c4 10             	add    $0x10,%esp
+    1e38:	85 c0                	test   %eax,%eax
+    1e3a:	0f 85 14 05 00 00    	jne    2354 <subdir+0x5b4>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e40:	83 ec 08             	sub    $0x8,%esp
+    1e43:	68 02 02 00 00       	push   $0x202
+    1e48:	68 0e 46 00 00       	push   $0x460e
+    1e4d:	e8 71 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e52:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e55:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e57:	85 c0                	test   %eax,%eax
+    1e59:	0f 88 24 04 00 00    	js     2283 <subdir+0x4e3>
+  write(fd, "FF", 2);
+    1e5f:	83 ec 04             	sub    $0x4,%esp
+    1e62:	6a 02                	push   $0x2
+    1e64:	68 2f 46 00 00       	push   $0x462f
+    1e69:	50                   	push   %eax
+    1e6a:	e8 34 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e6f:	89 1c 24             	mov    %ebx,(%esp)
+    1e72:	e8 34 1b 00 00       	call   39ab <close>
+  fd = open("dd/dd/../ff", 0);
+    1e77:	58                   	pop    %eax
+    1e78:	5a                   	pop    %edx
+    1e79:	6a 00                	push   $0x0
+    1e7b:	68 32 46 00 00       	push   $0x4632
+    1e80:	e8 3e 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e85:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/../ff", 0);
+    1e88:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e8a:	85 c0                	test   %eax,%eax
+    1e8c:	0f 88 de 03 00 00    	js     2270 <subdir+0x4d0>
+  cc = read(fd, buf, sizeof(buf));
+    1e92:	83 ec 04             	sub    $0x4,%esp
+    1e95:	68 00 20 00 00       	push   $0x2000
+    1e9a:	68 e0 86 00 00       	push   $0x86e0
+    1e9f:	50                   	push   %eax
+    1ea0:	e8 f6 1a 00 00       	call   399b <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1ea5:	83 c4 10             	add    $0x10,%esp
+    1ea8:	83 f8 02             	cmp    $0x2,%eax
+    1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
+    1eb1:	80 3d e0 86 00 00 66 	cmpb   $0x66,0x86e0
+    1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
+  close(fd);
+    1ebe:	83 ec 0c             	sub    $0xc,%esp
+    1ec1:	53                   	push   %ebx
+    1ec2:	e8 e4 1a 00 00       	call   39ab <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1ec7:	59                   	pop    %ecx
+    1ec8:	5b                   	pop    %ebx
+    1ec9:	68 72 46 00 00       	push   $0x4672
+    1ece:	68 0e 46 00 00       	push   $0x460e
+    1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
+    1ed8:	83 c4 10             	add    $0x10,%esp
+    1edb:	85 c0                	test   %eax,%eax
+    1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
+  if(unlink("dd/dd/ff") != 0){
+    1ee3:	83 ec 0c             	sub    $0xc,%esp
+    1ee6:	68 0e 46 00 00       	push   $0x460e
+    1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	85 c0                	test   %eax,%eax
+    1ef5:	0f 85 16 03 00 00    	jne    2211 <subdir+0x471>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1efb:	83 ec 08             	sub    $0x8,%esp
+    1efe:	6a 00                	push   $0x0
+    1f00:	68 0e 46 00 00       	push   $0x460e
+    1f05:	e8 b9 1a 00 00       	call   39c3 <open>
+    1f0a:	83 c4 10             	add    $0x10,%esp
+    1f0d:	85 c0                	test   %eax,%eax
+    1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
+  if(chdir("dd") != 0){
+    1f15:	83 ec 0c             	sub    $0xc,%esp
+    1f18:	68 d8 46 00 00       	push   $0x46d8
+    1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
+    1f22:	83 c4 10             	add    $0x10,%esp
+    1f25:	85 c0                	test   %eax,%eax
+    1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
+  if(chdir("dd/../../dd") != 0){
+    1f2d:	83 ec 0c             	sub    $0xc,%esp
+    1f30:	68 a6 46 00 00       	push   $0x46a6
+    1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
+    1f3a:	83 c4 10             	add    $0x10,%esp
+    1f3d:	85 c0                	test   %eax,%eax
+    1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("dd/../../../dd") != 0){
+    1f45:	83 ec 0c             	sub    $0xc,%esp
+    1f48:	68 cc 46 00 00       	push   $0x46cc
+    1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
+    1f52:	83 c4 10             	add    $0x10,%esp
+    1f55:	85 c0                	test   %eax,%eax
+    1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("./..") != 0){
+    1f5d:	83 ec 0c             	sub    $0xc,%esp
+    1f60:	68 db 46 00 00       	push   $0x46db
+    1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
+    1f6a:	83 c4 10             	add    $0x10,%esp
+    1f6d:	85 c0                	test   %eax,%eax
+    1f6f:	0f 85 21 03 00 00    	jne    2296 <subdir+0x4f6>
+  fd = open("dd/dd/ffff", 0);
+    1f75:	83 ec 08             	sub    $0x8,%esp
+    1f78:	6a 00                	push   $0x0
+    1f7a:	68 72 46 00 00       	push   $0x4672
+    1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1f84:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ffff", 0);
+    1f87:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1f89:	85 c0                	test   %eax,%eax
+    1f8b:	0f 88 e0 04 00 00    	js     2471 <subdir+0x6d1>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1f91:	83 ec 04             	sub    $0x4,%esp
+    1f94:	68 00 20 00 00       	push   $0x2000
+    1f99:	68 e0 86 00 00       	push   $0x86e0
+    1f9e:	50                   	push   %eax
+    1f9f:	e8 f7 19 00 00       	call   399b <read>
+    1fa4:	83 c4 10             	add    $0x10,%esp
+    1fa7:	83 f8 02             	cmp    $0x2,%eax
+    1faa:	0f 85 ae 04 00 00    	jne    245e <subdir+0x6be>
+  close(fd);
+    1fb0:	83 ec 0c             	sub    $0xc,%esp
+    1fb3:	53                   	push   %ebx
+    1fb4:	e8 f2 19 00 00       	call   39ab <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1fb9:	58                   	pop    %eax
+    1fba:	5a                   	pop    %edx
+    1fbb:	6a 00                	push   $0x0
+    1fbd:	68 0e 46 00 00       	push   $0x460e
+    1fc2:	e8 fc 19 00 00       	call   39c3 <open>
+    1fc7:	83 c4 10             	add    $0x10,%esp
+    1fca:	85 c0                	test   %eax,%eax
+    1fcc:	0f 89 65 02 00 00    	jns    2237 <subdir+0x497>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1fd2:	83 ec 08             	sub    $0x8,%esp
+    1fd5:	68 02 02 00 00       	push   $0x202
+    1fda:	68 26 47 00 00       	push   $0x4726
+    1fdf:	e8 df 19 00 00       	call   39c3 <open>
+    1fe4:	83 c4 10             	add    $0x10,%esp
+    1fe7:	85 c0                	test   %eax,%eax
+    1fe9:	0f 89 35 02 00 00    	jns    2224 <subdir+0x484>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1fef:	83 ec 08             	sub    $0x8,%esp
+    1ff2:	68 02 02 00 00       	push   $0x202
+    1ff7:	68 4b 47 00 00       	push   $0x474b
+    1ffc:	e8 c2 19 00 00       	call   39c3 <open>
+    2001:	83 c4 10             	add    $0x10,%esp
+    2004:	85 c0                	test   %eax,%eax
+    2006:	0f 89 0f 03 00 00    	jns    231b <subdir+0x57b>
+  if(open("dd", O_CREATE) >= 0){
+    200c:	83 ec 08             	sub    $0x8,%esp
+    200f:	68 00 02 00 00       	push   $0x200
+    2014:	68 d8 46 00 00       	push   $0x46d8
+    2019:	e8 a5 19 00 00       	call   39c3 <open>
+    201e:	83 c4 10             	add    $0x10,%esp
+    2021:	85 c0                	test   %eax,%eax
+    2023:	0f 89 df 02 00 00    	jns    2308 <subdir+0x568>
+  if(open("dd", O_RDWR) >= 0){
+    2029:	83 ec 08             	sub    $0x8,%esp
+    202c:	6a 02                	push   $0x2
+    202e:	68 d8 46 00 00       	push   $0x46d8
+    2033:	e8 8b 19 00 00       	call   39c3 <open>
+    2038:	83 c4 10             	add    $0x10,%esp
+    203b:	85 c0                	test   %eax,%eax
+    203d:	0f 89 b2 02 00 00    	jns    22f5 <subdir+0x555>
+  if(open("dd", O_WRONLY) >= 0){
+    2043:	83 ec 08             	sub    $0x8,%esp
+    2046:	6a 01                	push   $0x1
+    2048:	68 d8 46 00 00       	push   $0x46d8
+    204d:	e8 71 19 00 00       	call   39c3 <open>
+    2052:	83 c4 10             	add    $0x10,%esp
+    2055:	85 c0                	test   %eax,%eax
+    2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    205d:	83 ec 08             	sub    $0x8,%esp
+    2060:	68 ba 47 00 00       	push   $0x47ba
+    2065:	68 26 47 00 00       	push   $0x4726
+    206a:	e8 74 19 00 00       	call   39e3 <link>
+    206f:	83 c4 10             	add    $0x10,%esp
+    2072:	85 c0                	test   %eax,%eax
+    2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    207a:	83 ec 08             	sub    $0x8,%esp
+    207d:	68 ba 47 00 00       	push   $0x47ba
+    2082:	68 4b 47 00 00       	push   $0x474b
+    2087:	e8 57 19 00 00       	call   39e3 <link>
+    208c:	83 c4 10             	add    $0x10,%esp
+    208f:	85 c0                	test   %eax,%eax
+    2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2097:	83 ec 08             	sub    $0x8,%esp
+    209a:	68 72 46 00 00       	push   $0x4672
+    209f:	68 11 46 00 00       	push   $0x4611
+    20a4:	e8 3a 19 00 00       	call   39e3 <link>
+    20a9:	83 c4 10             	add    $0x10,%esp
+    20ac:	85 c0                	test   %eax,%eax
+    20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
+  if(mkdir("dd/ff/ff") == 0){
+    20b4:	83 ec 0c             	sub    $0xc,%esp
+    20b7:	68 26 47 00 00       	push   $0x4726
+    20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
+    20c1:	83 c4 10             	add    $0x10,%esp
+    20c4:	85 c0                	test   %eax,%eax
+    20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
+  if(mkdir("dd/xx/ff") == 0){
+    20cc:	83 ec 0c             	sub    $0xc,%esp
+    20cf:	68 4b 47 00 00       	push   $0x474b
+    20d4:	e8 12 19 00 00       	call   39eb <mkdir>
+    20d9:	83 c4 10             	add    $0x10,%esp
+    20dc:	85 c0                	test   %eax,%eax
+    20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
+  if(mkdir("dd/dd/ffff") == 0){
+    20e4:	83 ec 0c             	sub    $0xc,%esp
+    20e7:	68 72 46 00 00       	push   $0x4672
+    20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
+    20f1:	83 c4 10             	add    $0x10,%esp
+    20f4:	85 c0                	test   %eax,%eax
+    20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
+  if(unlink("dd/xx/ff") == 0){
+    20fc:	83 ec 0c             	sub    $0xc,%esp
+    20ff:	68 4b 47 00 00       	push   $0x474b
+    2104:	e8 ca 18 00 00       	call   39d3 <unlink>
+    2109:	83 c4 10             	add    $0x10,%esp
+    210c:	85 c0                	test   %eax,%eax
+    210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
+  if(unlink("dd/ff/ff") == 0){
+    2114:	83 ec 0c             	sub    $0xc,%esp
+    2117:	68 26 47 00 00       	push   $0x4726
+    211c:	e8 b2 18 00 00       	call   39d3 <unlink>
+    2121:	83 c4 10             	add    $0x10,%esp
+    2124:	85 c0                	test   %eax,%eax
+    2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
+  if(chdir("dd/ff") == 0){
+    212c:	83 ec 0c             	sub    $0xc,%esp
+    212f:	68 11 46 00 00       	push   $0x4611
+    2134:	e8 ba 18 00 00       	call   39f3 <chdir>
+    2139:	83 c4 10             	add    $0x10,%esp
+    213c:	85 c0                	test   %eax,%eax
+    213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
+  if(chdir("dd/xx") == 0){
+    2144:	83 ec 0c             	sub    $0xc,%esp
+    2147:	68 bd 47 00 00       	push   $0x47bd
+    214c:	e8 a2 18 00 00       	call   39f3 <chdir>
+    2151:	83 c4 10             	add    $0x10,%esp
+    2154:	85 c0                	test   %eax,%eax
+    2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
+  if(unlink("dd/dd/ffff") != 0){
+    215c:	83 ec 0c             	sub    $0xc,%esp
+    215f:	68 72 46 00 00       	push   $0x4672
+    2164:	e8 6a 18 00 00       	call   39d3 <unlink>
+    2169:	83 c4 10             	add    $0x10,%esp
+    216c:	85 c0                	test   %eax,%eax
+    216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
+  if(unlink("dd/ff") != 0){
+    2174:	83 ec 0c             	sub    $0xc,%esp
+    2177:	68 11 46 00 00       	push   $0x4611
+    217c:	e8 52 18 00 00       	call   39d3 <unlink>
+    2181:	83 c4 10             	add    $0x10,%esp
+    2184:	85 c0                	test   %eax,%eax
+    2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
+  if(unlink("dd") == 0){
+    218c:	83 ec 0c             	sub    $0xc,%esp
+    218f:	68 d8 46 00 00       	push   $0x46d8
+    2194:	e8 3a 18 00 00       	call   39d3 <unlink>
+    2199:	83 c4 10             	add    $0x10,%esp
+    219c:	85 c0                	test   %eax,%eax
+    219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
+  if(unlink("dd/dd") < 0){
+    21a4:	83 ec 0c             	sub    $0xc,%esp
+    21a7:	68 ed 45 00 00       	push   $0x45ed
+    21ac:	e8 22 18 00 00       	call   39d3 <unlink>
+    21b1:	83 c4 10             	add    $0x10,%esp
+    21b4:	85 c0                	test   %eax,%eax
+    21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
+  if(unlink("dd") < 0){
+    21bc:	83 ec 0c             	sub    $0xc,%esp
+    21bf:	68 d8 46 00 00       	push   $0x46d8
+    21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
+    21c9:	83 c4 10             	add    $0x10,%esp
+    21cc:	85 c0                	test   %eax,%eax
+    21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
+  printf(1, "subdir ok\n");
+    21d4:	83 ec 08             	sub    $0x8,%esp
+    21d7:	68 ba 48 00 00       	push   $0x48ba
+    21dc:	6a 01                	push   $0x1
+    21de:	e8 1d 19 00 00       	call   3b00 <printf>
+}
+    21e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    21e6:	83 c4 10             	add    $0x10,%esp
+    21e9:	c9                   	leave  
+    21ea:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    21eb:	50                   	push   %eax
+    21ec:	50                   	push   %eax
+    21ed:	68 57 46 00 00       	push   $0x4657
+    21f2:	6a 01                	push   $0x1
+    21f4:	e8 07 19 00 00       	call   3b00 <printf>
+    exit();
+    21f9:	e8 85 17 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    21fe:	50                   	push   %eax
+    21ff:	50                   	push   %eax
+    2200:	68 b2 46 00 00       	push   $0x46b2
+    2205:	6a 01                	push   $0x1
+    2207:	e8 f4 18 00 00       	call   3b00 <printf>
+    exit();
+    220c:	e8 72 17 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    2211:	50                   	push   %eax
+    2212:	50                   	push   %eax
+    2213:	68 7d 46 00 00       	push   $0x467d
+    2218:	6a 01                	push   $0x1
+    221a:	e8 e1 18 00 00       	call   3b00 <printf>
+    exit();
+    221f:	e8 5f 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2224:	51                   	push   %ecx
+    2225:	51                   	push   %ecx
+    2226:	68 2f 47 00 00       	push   $0x472f
+    222b:	6a 01                	push   $0x1
+    222d:	e8 ce 18 00 00       	call   3b00 <printf>
+    exit();
+    2232:	e8 4c 17 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    2237:	53                   	push   %ebx
+    2238:	53                   	push   %ebx
+    2239:	68 14 51 00 00       	push   $0x5114
+    223e:	6a 01                	push   $0x1
+    2240:	e8 bb 18 00 00       	call   3b00 <printf>
+    exit();
+    2245:	e8 39 17 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    224a:	51                   	push   %ecx
+    224b:	51                   	push   %ecx
+    224c:	68 c3 47 00 00       	push   $0x47c3
+    2251:	6a 01                	push   $0x1
+    2253:	e8 a8 18 00 00       	call   3b00 <printf>
+    exit();
+    2258:	e8 26 17 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    225d:	53                   	push   %ebx
+    225e:	53                   	push   %ebx
+    225f:	68 84 51 00 00       	push   $0x5184
+    2264:	6a 01                	push   $0x1
+    2266:	e8 95 18 00 00       	call   3b00 <printf>
+    exit();
+    226b:	e8 13 17 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    2270:	50                   	push   %eax
+    2271:	50                   	push   %eax
+    2272:	68 3e 46 00 00       	push   $0x463e
+    2277:	6a 01                	push   $0x1
+    2279:	e8 82 18 00 00       	call   3b00 <printf>
+    exit();
+    227e:	e8 00 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    2283:	51                   	push   %ecx
+    2284:	51                   	push   %ecx
+    2285:	68 17 46 00 00       	push   $0x4617
+    228a:	6a 01                	push   $0x1
+    228c:	e8 6f 18 00 00       	call   3b00 <printf>
+    exit();
+    2291:	e8 ed 16 00 00       	call   3983 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2296:	50                   	push   %eax
+    2297:	50                   	push   %eax
+    2298:	68 e0 46 00 00       	push   $0x46e0
+    229d:	6a 01                	push   $0x1
+    229f:	e8 5c 18 00 00       	call   3b00 <printf>
+    exit();
+    22a4:	e8 da 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    22a9:	52                   	push   %edx
+    22aa:	52                   	push   %edx
+    22ab:	68 cc 50 00 00       	push   $0x50cc
+    22b0:	6a 01                	push   $0x1
+    22b2:	e8 49 18 00 00       	call   3b00 <printf>
+    exit();
+    22b7:	e8 c7 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    22bc:	50                   	push   %eax
+    22bd:	50                   	push   %eax
+    22be:	68 60 51 00 00       	push   $0x5160
+    22c3:	6a 01                	push   $0x1
+    22c5:	e8 36 18 00 00       	call   3b00 <printf>
+    exit();
+    22ca:	e8 b4 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    22cf:	50                   	push   %eax
+    22d0:	50                   	push   %eax
+    22d1:	68 3c 51 00 00       	push   $0x513c
+    22d6:	6a 01                	push   $0x1
+    22d8:	e8 23 18 00 00       	call   3b00 <printf>
+    exit();
+    22dd:	e8 a1 16 00 00       	call   3983 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    22e2:	50                   	push   %eax
+    22e3:	50                   	push   %eax
+    22e4:	68 9f 47 00 00       	push   $0x479f
+    22e9:	6a 01                	push   $0x1
+    22eb:	e8 10 18 00 00       	call   3b00 <printf>
+    exit();
+    22f0:	e8 8e 16 00 00       	call   3983 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    22f5:	50                   	push   %eax
+    22f6:	50                   	push   %eax
+    22f7:	68 86 47 00 00       	push   $0x4786
+    22fc:	6a 01                	push   $0x1
+    22fe:	e8 fd 17 00 00       	call   3b00 <printf>
+    exit();
+    2303:	e8 7b 16 00 00       	call   3983 <exit>
+    printf(1, "create dd succeeded!\n");
+    2308:	50                   	push   %eax
+    2309:	50                   	push   %eax
+    230a:	68 70 47 00 00       	push   $0x4770
+    230f:	6a 01                	push   $0x1
+    2311:	e8 ea 17 00 00       	call   3b00 <printf>
+    exit();
+    2316:	e8 68 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    231b:	52                   	push   %edx
+    231c:	52                   	push   %edx
+    231d:	68 54 47 00 00       	push   $0x4754
+    2322:	6a 01                	push   $0x1
+    2324:	e8 d7 17 00 00       	call   3b00 <printf>
+    exit();
+    2329:	e8 55 16 00 00       	call   3983 <exit>
+    printf(1, "chdir dd failed\n");
+    232e:	50                   	push   %eax
+    232f:	50                   	push   %eax
+    2330:	68 95 46 00 00       	push   $0x4695
+    2335:	6a 01                	push   $0x1
+    2337:	e8 c4 17 00 00       	call   3b00 <printf>
+    exit();
+    233c:	e8 42 16 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    2341:	50                   	push   %eax
+    2342:	50                   	push   %eax
+    2343:	68 f0 50 00 00       	push   $0x50f0
+    2348:	6a 01                	push   $0x1
+    234a:	e8 b1 17 00 00       	call   3b00 <printf>
+    exit();
+    234f:	e8 2f 16 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    2354:	53                   	push   %ebx
+    2355:	53                   	push   %ebx
+    2356:	68 f3 45 00 00       	push   $0x45f3
+    235b:	6a 01                	push   $0x1
+    235d:	e8 9e 17 00 00       	call   3b00 <printf>
+    exit();
+    2362:	e8 1c 16 00 00       	call   3983 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    2367:	50                   	push   %eax
+    2368:	50                   	push   %eax
+    2369:	68 a4 50 00 00       	push   $0x50a4
+    236e:	6a 01                	push   $0x1
+    2370:	e8 8b 17 00 00       	call   3b00 <printf>
+    exit();
+    2375:	e8 09 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff failed\n");
+    237a:	50                   	push   %eax
+    237b:	50                   	push   %eax
+    237c:	68 d7 45 00 00       	push   $0x45d7
+    2381:	6a 01                	push   $0x1
+    2383:	e8 78 17 00 00       	call   3b00 <printf>
+    exit();
+    2388:	e8 f6 15 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    238d:	50                   	push   %eax
+    238e:	50                   	push   %eax
+    238f:	68 bf 45 00 00       	push   $0x45bf
+    2394:	6a 01                	push   $0x1
+    2396:	e8 65 17 00 00       	call   3b00 <printf>
+    exit();
+    239b:	e8 e3 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd failed\n");
+    23a0:	50                   	push   %eax
+    23a1:	50                   	push   %eax
+    23a2:	68 a8 48 00 00       	push   $0x48a8
+    23a7:	6a 01                	push   $0x1
+    23a9:	e8 52 17 00 00       	call   3b00 <printf>
+    exit();
+    23ae:	e8 d0 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    23b3:	52                   	push   %edx
+    23b4:	52                   	push   %edx
+    23b5:	68 93 48 00 00       	push   $0x4893
+    23ba:	6a 01                	push   $0x1
+    23bc:	e8 3f 17 00 00       	call   3b00 <printf>
+    exit();
+    23c1:	e8 bd 15 00 00       	call   3983 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    23c6:	51                   	push   %ecx
+    23c7:	51                   	push   %ecx
+    23c8:	68 a8 51 00 00       	push   $0x51a8
+    23cd:	6a 01                	push   $0x1
+    23cf:	e8 2c 17 00 00       	call   3b00 <printf>
+    exit();
+    23d4:	e8 aa 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    23d9:	53                   	push   %ebx
+    23da:	53                   	push   %ebx
+    23db:	68 7e 48 00 00       	push   $0x487e
+    23e0:	6a 01                	push   $0x1
+    23e2:	e8 19 17 00 00       	call   3b00 <printf>
+    exit();
+    23e7:	e8 97 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    23ec:	50                   	push   %eax
+    23ed:	50                   	push   %eax
+    23ee:	68 66 48 00 00       	push   $0x4866
+    23f3:	6a 01                	push   $0x1
+    23f5:	e8 06 17 00 00       	call   3b00 <printf>
+    exit();
+    23fa:	e8 84 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    23ff:	50                   	push   %eax
+    2400:	50                   	push   %eax
+    2401:	68 4e 48 00 00       	push   $0x484e
+    2406:	6a 01                	push   $0x1
+    2408:	e8 f3 16 00 00       	call   3b00 <printf>
+    exit();
+    240d:	e8 71 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    2412:	50                   	push   %eax
+    2413:	50                   	push   %eax
+    2414:	68 32 48 00 00       	push   $0x4832
+    2419:	6a 01                	push   $0x1
+    241b:	e8 e0 16 00 00       	call   3b00 <printf>
+    exit();
+    2420:	e8 5e 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2425:	50                   	push   %eax
+    2426:	50                   	push   %eax
+    2427:	68 16 48 00 00       	push   $0x4816
+    242c:	6a 01                	push   $0x1
+    242e:	e8 cd 16 00 00       	call   3b00 <printf>
+    exit();
+    2433:	e8 4b 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    2438:	50                   	push   %eax
+    2439:	50                   	push   %eax
+    243a:	68 f9 47 00 00       	push   $0x47f9
+    243f:	6a 01                	push   $0x1
+    2441:	e8 ba 16 00 00       	call   3b00 <printf>
+    exit();
+    2446:	e8 38 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    244b:	52                   	push   %edx
+    244c:	52                   	push   %edx
+    244d:	68 de 47 00 00       	push   $0x47de
+    2452:	6a 01                	push   $0x1
+    2454:	e8 a7 16 00 00       	call   3b00 <printf>
+    exit();
+    2459:	e8 25 15 00 00       	call   3983 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    245e:	51                   	push   %ecx
+    245f:	51                   	push   %ecx
+    2460:	68 0b 47 00 00       	push   $0x470b
+    2465:	6a 01                	push   $0x1
+    2467:	e8 94 16 00 00       	call   3b00 <printf>
+    exit();
+    246c:	e8 12 15 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    2471:	53                   	push   %ebx
+    2472:	53                   	push   %ebx
+    2473:	68 f3 46 00 00       	push   $0x46f3
+    2478:	6a 01                	push   $0x1
+    247a:	e8 81 16 00 00       	call   3b00 <printf>
+    exit();
+    247f:	e8 ff 14 00 00       	call   3983 <exit>
+    2484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    248b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    248f:	90                   	nop
+
+00002490 <bigwrite>:
+{
+    2490:	f3 0f 1e fb          	endbr32 
+    2494:	55                   	push   %ebp
+    2495:	89 e5                	mov    %esp,%ebp
+    2497:	56                   	push   %esi
+    2498:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    249e:	83 ec 08             	sub    $0x8,%esp
+    24a1:	68 c5 48 00 00       	push   $0x48c5
+    24a6:	6a 01                	push   $0x1
+    24a8:	e8 53 16 00 00       	call   3b00 <printf>
+  unlink("bigwrite");
+    24ad:	c7 04 24 d4 48 00 00 	movl   $0x48d4,(%esp)
+    24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
+    24b9:	83 c4 10             	add    $0x10,%esp
+    24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24c0:	83 ec 08             	sub    $0x8,%esp
+    24c3:	68 02 02 00 00       	push   $0x202
+    24c8:	68 d4 48 00 00       	push   $0x48d4
+    24cd:	e8 f1 14 00 00       	call   39c3 <open>
+    if(fd < 0){
+    24d2:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24d5:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    24d7:	85 c0                	test   %eax,%eax
+    24d9:	78 7e                	js     2559 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    24db:	83 ec 04             	sub    $0x4,%esp
+    24de:	53                   	push   %ebx
+    24df:	68 e0 86 00 00       	push   $0x86e0
+    24e4:	50                   	push   %eax
+    24e5:	e8 b9 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    24ea:	83 c4 10             	add    $0x10,%esp
+    24ed:	39 d8                	cmp    %ebx,%eax
+    24ef:	75 55                	jne    2546 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    24f1:	83 ec 04             	sub    $0x4,%esp
+    24f4:	53                   	push   %ebx
+    24f5:	68 e0 86 00 00       	push   $0x86e0
+    24fa:	56                   	push   %esi
+    24fb:	e8 a3 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    2500:	83 c4 10             	add    $0x10,%esp
+    2503:	39 d8                	cmp    %ebx,%eax
+    2505:	75 3f                	jne    2546 <bigwrite+0xb6>
+    close(fd);
+    2507:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    250a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2510:	56                   	push   %esi
+    2511:	e8 95 14 00 00       	call   39ab <close>
+    unlink("bigwrite");
+    2516:	c7 04 24 d4 48 00 00 	movl   $0x48d4,(%esp)
+    251d:	e8 b1 14 00 00       	call   39d3 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2522:	83 c4 10             	add    $0x10,%esp
+    2525:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    252b:	75 93                	jne    24c0 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    252d:	83 ec 08             	sub    $0x8,%esp
+    2530:	68 07 49 00 00       	push   $0x4907
+    2535:	6a 01                	push   $0x1
+    2537:	e8 c4 15 00 00       	call   3b00 <printf>
+}
+    253c:	83 c4 10             	add    $0x10,%esp
+    253f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    2542:	5b                   	pop    %ebx
+    2543:	5e                   	pop    %esi
+    2544:	5d                   	pop    %ebp
+    2545:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    2546:	50                   	push   %eax
+    2547:	53                   	push   %ebx
+    2548:	68 f5 48 00 00       	push   $0x48f5
+    254d:	6a 01                	push   $0x1
+    254f:	e8 ac 15 00 00       	call   3b00 <printf>
+        exit();
+    2554:	e8 2a 14 00 00       	call   3983 <exit>
+      printf(1, "cannot create bigwrite\n");
+    2559:	83 ec 08             	sub    $0x8,%esp
+    255c:	68 dd 48 00 00       	push   $0x48dd
+    2561:	6a 01                	push   $0x1
+    2563:	e8 98 15 00 00       	call   3b00 <printf>
+      exit();
+    2568:	e8 16 14 00 00       	call   3983 <exit>
+    256d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002570 <bigfile>:
+{
+    2570:	f3 0f 1e fb          	endbr32 
+    2574:	55                   	push   %ebp
+    2575:	89 e5                	mov    %esp,%ebp
+    2577:	57                   	push   %edi
+    2578:	56                   	push   %esi
+    2579:	53                   	push   %ebx
+    257a:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    257d:	68 14 49 00 00       	push   $0x4914
+    2582:	6a 01                	push   $0x1
+    2584:	e8 77 15 00 00       	call   3b00 <printf>
+  unlink("bigfile");
+    2589:	c7 04 24 30 49 00 00 	movl   $0x4930,(%esp)
+    2590:	e8 3e 14 00 00       	call   39d3 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    2595:	58                   	pop    %eax
+    2596:	5a                   	pop    %edx
+    2597:	68 02 02 00 00       	push   $0x202
+    259c:	68 30 49 00 00       	push   $0x4930
+    25a1:	e8 1d 14 00 00       	call   39c3 <open>
+  if(fd < 0){
+    25a6:	83 c4 10             	add    $0x10,%esp
+    25a9:	85 c0                	test   %eax,%eax
+    25ab:	0f 88 5a 01 00 00    	js     270b <bigfile+0x19b>
+    25b1:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    25b3:	31 db                	xor    %ebx,%ebx
+    25b5:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(buf, i, 600);
+    25b8:	83 ec 04             	sub    $0x4,%esp
+    25bb:	68 58 02 00 00       	push   $0x258
+    25c0:	53                   	push   %ebx
+    25c1:	68 e0 86 00 00       	push   $0x86e0
+    25c6:	e8 15 12 00 00       	call   37e0 <memset>
+    if(write(fd, buf, 600) != 600){
+    25cb:	83 c4 0c             	add    $0xc,%esp
+    25ce:	68 58 02 00 00       	push   $0x258
+    25d3:	68 e0 86 00 00       	push   $0x86e0
+    25d8:	56                   	push   %esi
+    25d9:	e8 c5 13 00 00       	call   39a3 <write>
+    25de:	83 c4 10             	add    $0x10,%esp
+    25e1:	3d 58 02 00 00       	cmp    $0x258,%eax
+    25e6:	0f 85 f8 00 00 00    	jne    26e4 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    25ec:	83 c3 01             	add    $0x1,%ebx
+    25ef:	83 fb 14             	cmp    $0x14,%ebx
+    25f2:	75 c4                	jne    25b8 <bigfile+0x48>
+  close(fd);
+    25f4:	83 ec 0c             	sub    $0xc,%esp
+    25f7:	56                   	push   %esi
+    25f8:	e8 ae 13 00 00       	call   39ab <close>
+  fd = open("bigfile", 0);
+    25fd:	5e                   	pop    %esi
+    25fe:	5f                   	pop    %edi
+    25ff:	6a 00                	push   $0x0
+    2601:	68 30 49 00 00       	push   $0x4930
+    2606:	e8 b8 13 00 00       	call   39c3 <open>
+  if(fd < 0){
+    260b:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", 0);
+    260e:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2610:	85 c0                	test   %eax,%eax
+    2612:	0f 88 e0 00 00 00    	js     26f8 <bigfile+0x188>
+  total = 0;
+    2618:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    261a:	31 ff                	xor    %edi,%edi
+    261c:	eb 30                	jmp    264e <bigfile+0xde>
+    261e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2620:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    262b:	89 fa                	mov    %edi,%edx
+    262d:	0f be 05 e0 86 00 00 	movsbl 0x86e0,%eax
+    2634:	d1 fa                	sar    %edx
+    2636:	39 d0                	cmp    %edx,%eax
+    2638:	75 6e                	jne    26a8 <bigfile+0x138>
+    263a:	0f be 15 0b 88 00 00 	movsbl 0x880b,%edx
+    2641:	39 d0                	cmp    %edx,%eax
+    2643:	75 63                	jne    26a8 <bigfile+0x138>
+    total += cc;
+    2645:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    264b:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    264e:	83 ec 04             	sub    $0x4,%esp
+    2651:	68 2c 01 00 00       	push   $0x12c
+    2656:	68 e0 86 00 00       	push   $0x86e0
+    265b:	56                   	push   %esi
+    265c:	e8 3a 13 00 00       	call   399b <read>
+    if(cc < 0){
+    2661:	83 c4 10             	add    $0x10,%esp
+    2664:	85 c0                	test   %eax,%eax
+    2666:	78 68                	js     26d0 <bigfile+0x160>
+    if(cc == 0)
+    2668:	75 b6                	jne    2620 <bigfile+0xb0>
+  close(fd);
+    266a:	83 ec 0c             	sub    $0xc,%esp
+    266d:	56                   	push   %esi
+    266e:	e8 38 13 00 00       	call   39ab <close>
+  if(total != 20*600){
+    2673:	83 c4 10             	add    $0x10,%esp
+    2676:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
+  unlink("bigfile");
+    2682:	83 ec 0c             	sub    $0xc,%esp
+    2685:	68 30 49 00 00       	push   $0x4930
+    268a:	e8 44 13 00 00       	call   39d3 <unlink>
+  printf(1, "bigfile test ok\n");
+    268f:	58                   	pop    %eax
+    2690:	5a                   	pop    %edx
+    2691:	68 bf 49 00 00       	push   $0x49bf
+    2696:	6a 01                	push   $0x1
+    2698:	e8 63 14 00 00       	call   3b00 <printf>
+}
+    269d:	83 c4 10             	add    $0x10,%esp
+    26a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    26a3:	5b                   	pop    %ebx
+    26a4:	5e                   	pop    %esi
+    26a5:	5f                   	pop    %edi
+    26a6:	5d                   	pop    %ebp
+    26a7:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    26a8:	83 ec 08             	sub    $0x8,%esp
+    26ab:	68 8c 49 00 00       	push   $0x498c
+    26b0:	6a 01                	push   $0x1
+    26b2:	e8 49 14 00 00       	call   3b00 <printf>
+      exit();
+    26b7:	e8 c7 12 00 00       	call   3983 <exit>
+      printf(1, "short read bigfile\n");
+    26bc:	83 ec 08             	sub    $0x8,%esp
+    26bf:	68 78 49 00 00       	push   $0x4978
+    26c4:	6a 01                	push   $0x1
+    26c6:	e8 35 14 00 00       	call   3b00 <printf>
+      exit();
+    26cb:	e8 b3 12 00 00       	call   3983 <exit>
+      printf(1, "read bigfile failed\n");
+    26d0:	83 ec 08             	sub    $0x8,%esp
+    26d3:	68 63 49 00 00       	push   $0x4963
+    26d8:	6a 01                	push   $0x1
+    26da:	e8 21 14 00 00       	call   3b00 <printf>
+      exit();
+    26df:	e8 9f 12 00 00       	call   3983 <exit>
+      printf(1, "write bigfile failed\n");
+    26e4:	83 ec 08             	sub    $0x8,%esp
+    26e7:	68 38 49 00 00       	push   $0x4938
+    26ec:	6a 01                	push   $0x1
+    26ee:	e8 0d 14 00 00       	call   3b00 <printf>
+      exit();
+    26f3:	e8 8b 12 00 00       	call   3983 <exit>
+    printf(1, "cannot open bigfile\n");
+    26f8:	53                   	push   %ebx
+    26f9:	53                   	push   %ebx
+    26fa:	68 4e 49 00 00       	push   $0x494e
+    26ff:	6a 01                	push   $0x1
+    2701:	e8 fa 13 00 00       	call   3b00 <printf>
+    exit();
+    2706:	e8 78 12 00 00       	call   3983 <exit>
+    printf(1, "cannot create bigfile");
+    270b:	50                   	push   %eax
+    270c:	50                   	push   %eax
+    270d:	68 22 49 00 00       	push   $0x4922
+    2712:	6a 01                	push   $0x1
+    2714:	e8 e7 13 00 00       	call   3b00 <printf>
+    exit();
+    2719:	e8 65 12 00 00       	call   3983 <exit>
+    printf(1, "read bigfile wrong total\n");
+    271e:	51                   	push   %ecx
+    271f:	51                   	push   %ecx
+    2720:	68 a5 49 00 00       	push   $0x49a5
+    2725:	6a 01                	push   $0x1
+    2727:	e8 d4 13 00 00       	call   3b00 <printf>
+    exit();
+    272c:	e8 52 12 00 00       	call   3983 <exit>
+    2731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    273f:	90                   	nop
+
+00002740 <fourteen>:
+{
+    2740:	f3 0f 1e fb          	endbr32 
+    2744:	55                   	push   %ebp
+    2745:	89 e5                	mov    %esp,%ebp
+    2747:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    274a:	68 d0 49 00 00       	push   $0x49d0
+    274f:	6a 01                	push   $0x1
+    2751:	e8 aa 13 00 00       	call   3b00 <printf>
+  if(mkdir("12345678901234") != 0){
+    2756:	c7 04 24 0b 4a 00 00 	movl   $0x4a0b,(%esp)
+    275d:	e8 89 12 00 00       	call   39eb <mkdir>
+    2762:	83 c4 10             	add    $0x10,%esp
+    2765:	85 c0                	test   %eax,%eax
+    2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    276d:	83 ec 0c             	sub    $0xc,%esp
+    2770:	68 c8 51 00 00       	push   $0x51c8
+    2775:	e8 71 12 00 00       	call   39eb <mkdir>
+    277a:	83 c4 10             	add    $0x10,%esp
+    277d:	85 c0                	test   %eax,%eax
+    277f:	0f 85 de 00 00 00    	jne    2863 <fourteen+0x123>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    2785:	83 ec 08             	sub    $0x8,%esp
+    2788:	68 00 02 00 00       	push   $0x200
+    278d:	68 18 52 00 00       	push   $0x5218
+    2792:	e8 2c 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2797:	83 c4 10             	add    $0x10,%esp
+    279a:	85 c0                	test   %eax,%eax
+    279c:	0f 88 ae 00 00 00    	js     2850 <fourteen+0x110>
+  close(fd);
+    27a2:	83 ec 0c             	sub    $0xc,%esp
+    27a5:	50                   	push   %eax
+    27a6:	e8 00 12 00 00       	call   39ab <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    27ab:	58                   	pop    %eax
+    27ac:	5a                   	pop    %edx
+    27ad:	6a 00                	push   $0x0
+    27af:	68 88 52 00 00       	push   $0x5288
+    27b4:	e8 0a 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    27b9:	83 c4 10             	add    $0x10,%esp
+    27bc:	85 c0                	test   %eax,%eax
+    27be:	78 7d                	js     283d <fourteen+0xfd>
+  close(fd);
+    27c0:	83 ec 0c             	sub    $0xc,%esp
+    27c3:	50                   	push   %eax
+    27c4:	e8 e2 11 00 00       	call   39ab <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    27c9:	c7 04 24 fc 49 00 00 	movl   $0x49fc,(%esp)
+    27d0:	e8 16 12 00 00       	call   39eb <mkdir>
+    27d5:	83 c4 10             	add    $0x10,%esp
+    27d8:	85 c0                	test   %eax,%eax
+    27da:	74 4e                	je     282a <fourteen+0xea>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    27dc:	83 ec 0c             	sub    $0xc,%esp
+    27df:	68 24 53 00 00       	push   $0x5324
+    27e4:	e8 02 12 00 00       	call   39eb <mkdir>
+    27e9:	83 c4 10             	add    $0x10,%esp
+    27ec:	85 c0                	test   %eax,%eax
+    27ee:	74 27                	je     2817 <fourteen+0xd7>
+  printf(1, "fourteen ok\n");
+    27f0:	83 ec 08             	sub    $0x8,%esp
+    27f3:	68 1a 4a 00 00       	push   $0x4a1a
+    27f8:	6a 01                	push   $0x1
+    27fa:	e8 01 13 00 00       	call   3b00 <printf>
+}
+    27ff:	83 c4 10             	add    $0x10,%esp
+    2802:	c9                   	leave  
+    2803:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2804:	50                   	push   %eax
+    2805:	50                   	push   %eax
+    2806:	68 df 49 00 00       	push   $0x49df
+    280b:	6a 01                	push   $0x1
+    280d:	e8 ee 12 00 00       	call   3b00 <printf>
+    exit();
+    2812:	e8 6c 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2817:	50                   	push   %eax
+    2818:	50                   	push   %eax
+    2819:	68 44 53 00 00       	push   $0x5344
+    281e:	6a 01                	push   $0x1
+    2820:	e8 db 12 00 00       	call   3b00 <printf>
+    exit();
+    2825:	e8 59 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    282a:	52                   	push   %edx
+    282b:	52                   	push   %edx
+    282c:	68 f4 52 00 00       	push   $0x52f4
+    2831:	6a 01                	push   $0x1
+    2833:	e8 c8 12 00 00       	call   3b00 <printf>
+    exit();
+    2838:	e8 46 11 00 00       	call   3983 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    283d:	51                   	push   %ecx
+    283e:	51                   	push   %ecx
+    283f:	68 b8 52 00 00       	push   $0x52b8
+    2844:	6a 01                	push   $0x1
+    2846:	e8 b5 12 00 00       	call   3b00 <printf>
+    exit();
+    284b:	e8 33 11 00 00       	call   3983 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    2850:	51                   	push   %ecx
+    2851:	51                   	push   %ecx
+    2852:	68 48 52 00 00       	push   $0x5248
+    2857:	6a 01                	push   $0x1
+    2859:	e8 a2 12 00 00       	call   3b00 <printf>
+    exit();
+    285e:	e8 20 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    2863:	50                   	push   %eax
+    2864:	50                   	push   %eax
+    2865:	68 e8 51 00 00       	push   $0x51e8
+    286a:	6a 01                	push   $0x1
+    286c:	e8 8f 12 00 00       	call   3b00 <printf>
+    exit();
+    2871:	e8 0d 11 00 00       	call   3983 <exit>
+    2876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    287d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002880 <rmdot>:
+{
+    2880:	f3 0f 1e fb          	endbr32 
+    2884:	55                   	push   %ebp
+    2885:	89 e5                	mov    %esp,%ebp
+    2887:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    288a:	68 27 4a 00 00       	push   $0x4a27
+    288f:	6a 01                	push   $0x1
+    2891:	e8 6a 12 00 00       	call   3b00 <printf>
+  if(mkdir("dots") != 0){
+    2896:	c7 04 24 33 4a 00 00 	movl   $0x4a33,(%esp)
+    289d:	e8 49 11 00 00       	call   39eb <mkdir>
+    28a2:	83 c4 10             	add    $0x10,%esp
+    28a5:	85 c0                	test   %eax,%eax
+    28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
+  if(chdir("dots") != 0){
+    28ad:	83 ec 0c             	sub    $0xc,%esp
+    28b0:	68 33 4a 00 00       	push   $0x4a33
+    28b5:	e8 39 11 00 00       	call   39f3 <chdir>
+    28ba:	83 c4 10             	add    $0x10,%esp
+    28bd:	85 c0                	test   %eax,%eax
+    28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
+  if(unlink(".") == 0){
+    28c5:	83 ec 0c             	sub    $0xc,%esp
+    28c8:	68 de 46 00 00       	push   $0x46de
+    28cd:	e8 01 11 00 00       	call   39d3 <unlink>
+    28d2:	83 c4 10             	add    $0x10,%esp
+    28d5:	85 c0                	test   %eax,%eax
+    28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
+  if(unlink("..") == 0){
+    28dd:	83 ec 0c             	sub    $0xc,%esp
+    28e0:	68 dd 46 00 00       	push   $0x46dd
+    28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
+    28ea:	83 c4 10             	add    $0x10,%esp
+    28ed:	85 c0                	test   %eax,%eax
+    28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
+  if(chdir("/") != 0){
+    28f5:	83 ec 0c             	sub    $0xc,%esp
+    28f8:	68 b1 3e 00 00       	push   $0x3eb1
+    28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
+    2902:	83 c4 10             	add    $0x10,%esp
+    2905:	85 c0                	test   %eax,%eax
+    2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
+  if(unlink("dots/.") == 0){
+    290d:	83 ec 0c             	sub    $0xc,%esp
+    2910:	68 7b 4a 00 00       	push   $0x4a7b
+    2915:	e8 b9 10 00 00       	call   39d3 <unlink>
+    291a:	83 c4 10             	add    $0x10,%esp
+    291d:	85 c0                	test   %eax,%eax
+    291f:	74 75                	je     2996 <rmdot+0x116>
+  if(unlink("dots/..") == 0){
+    2921:	83 ec 0c             	sub    $0xc,%esp
+    2924:	68 99 4a 00 00       	push   $0x4a99
+    2929:	e8 a5 10 00 00       	call   39d3 <unlink>
+    292e:	83 c4 10             	add    $0x10,%esp
+    2931:	85 c0                	test   %eax,%eax
+    2933:	74 4e                	je     2983 <rmdot+0x103>
+  if(unlink("dots") != 0){
+    2935:	83 ec 0c             	sub    $0xc,%esp
+    2938:	68 33 4a 00 00       	push   $0x4a33
+    293d:	e8 91 10 00 00       	call   39d3 <unlink>
+    2942:	83 c4 10             	add    $0x10,%esp
+    2945:	85 c0                	test   %eax,%eax
+    2947:	75 27                	jne    2970 <rmdot+0xf0>
+  printf(1, "rmdot ok\n");
+    2949:	83 ec 08             	sub    $0x8,%esp
+    294c:	68 ce 4a 00 00       	push   $0x4ace
+    2951:	6a 01                	push   $0x1
+    2953:	e8 a8 11 00 00       	call   3b00 <printf>
+}
+    2958:	83 c4 10             	add    $0x10,%esp
+    295b:	c9                   	leave  
+    295c:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    295d:	50                   	push   %eax
+    295e:	50                   	push   %eax
+    295f:	68 38 4a 00 00       	push   $0x4a38
+    2964:	6a 01                	push   $0x1
+    2966:	e8 95 11 00 00       	call   3b00 <printf>
+    exit();
+    296b:	e8 13 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots failed!\n");
+    2970:	50                   	push   %eax
+    2971:	50                   	push   %eax
+    2972:	68 b9 4a 00 00       	push   $0x4ab9
+    2977:	6a 01                	push   $0x1
+    2979:	e8 82 11 00 00       	call   3b00 <printf>
+    exit();
+    297e:	e8 00 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    2983:	52                   	push   %edx
+    2984:	52                   	push   %edx
+    2985:	68 a1 4a 00 00       	push   $0x4aa1
+    298a:	6a 01                	push   $0x1
+    298c:	e8 6f 11 00 00       	call   3b00 <printf>
+    exit();
+    2991:	e8 ed 0f 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    2996:	51                   	push   %ecx
+    2997:	51                   	push   %ecx
+    2998:	68 82 4a 00 00       	push   $0x4a82
+    299d:	6a 01                	push   $0x1
+    299f:	e8 5c 11 00 00       	call   3b00 <printf>
+    exit();
+    29a4:	e8 da 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir / failed\n");
+    29a9:	50                   	push   %eax
+    29aa:	50                   	push   %eax
+    29ab:	68 b3 3e 00 00       	push   $0x3eb3
+    29b0:	6a 01                	push   $0x1
+    29b2:	e8 49 11 00 00       	call   3b00 <printf>
+    exit();
+    29b7:	e8 c7 0f 00 00       	call   3983 <exit>
+    printf(1, "rm .. worked!\n");
+    29bc:	50                   	push   %eax
+    29bd:	50                   	push   %eax
+    29be:	68 6c 4a 00 00       	push   $0x4a6c
+    29c3:	6a 01                	push   $0x1
+    29c5:	e8 36 11 00 00       	call   3b00 <printf>
+    exit();
+    29ca:	e8 b4 0f 00 00       	call   3983 <exit>
+    printf(1, "rm . worked!\n");
+    29cf:	50                   	push   %eax
+    29d0:	50                   	push   %eax
+    29d1:	68 5e 4a 00 00       	push   $0x4a5e
+    29d6:	6a 01                	push   $0x1
+    29d8:	e8 23 11 00 00       	call   3b00 <printf>
+    exit();
+    29dd:	e8 a1 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir dots failed\n");
+    29e2:	50                   	push   %eax
+    29e3:	50                   	push   %eax
+    29e4:	68 4b 4a 00 00       	push   $0x4a4b
+    29e9:	6a 01                	push   $0x1
+    29eb:	e8 10 11 00 00       	call   3b00 <printf>
+    exit();
+    29f0:	e8 8e 0f 00 00       	call   3983 <exit>
+    29f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    29fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002a00 <dirfile>:
+{
+    2a00:	f3 0f 1e fb          	endbr32 
+    2a04:	55                   	push   %ebp
+    2a05:	89 e5                	mov    %esp,%ebp
+    2a07:	53                   	push   %ebx
+    2a08:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2a0b:	68 d8 4a 00 00       	push   $0x4ad8
+    2a10:	6a 01                	push   $0x1
+    2a12:	e8 e9 10 00 00       	call   3b00 <printf>
+  fd = open("dirfile", O_CREATE);
+    2a17:	5b                   	pop    %ebx
+    2a18:	58                   	pop    %eax
+    2a19:	68 00 02 00 00       	push   $0x200
+    2a1e:	68 e5 4a 00 00       	push   $0x4ae5
+    2a23:	e8 9b 0f 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	0f 88 43 01 00 00    	js     2b76 <dirfile+0x176>
+  close(fd);
+    2a33:	83 ec 0c             	sub    $0xc,%esp
+    2a36:	50                   	push   %eax
+    2a37:	e8 6f 0f 00 00       	call   39ab <close>
+  if(chdir("dirfile") == 0){
+    2a3c:	c7 04 24 e5 4a 00 00 	movl   $0x4ae5,(%esp)
+    2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
+    2a48:	83 c4 10             	add    $0x10,%esp
+    2a4b:	85 c0                	test   %eax,%eax
+    2a4d:	0f 84 10 01 00 00    	je     2b63 <dirfile+0x163>
+  fd = open("dirfile/xx", 0);
+    2a53:	83 ec 08             	sub    $0x8,%esp
+    2a56:	6a 00                	push   $0x0
+    2a58:	68 1e 4b 00 00       	push   $0x4b1e
+    2a5d:	e8 61 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a62:	83 c4 10             	add    $0x10,%esp
+    2a65:	85 c0                	test   %eax,%eax
+    2a67:	0f 89 e3 00 00 00    	jns    2b50 <dirfile+0x150>
+  fd = open("dirfile/xx", O_CREATE);
+    2a6d:	83 ec 08             	sub    $0x8,%esp
+    2a70:	68 00 02 00 00       	push   $0x200
+    2a75:	68 1e 4b 00 00       	push   $0x4b1e
+    2a7a:	e8 44 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a7f:	83 c4 10             	add    $0x10,%esp
+    2a82:	85 c0                	test   %eax,%eax
+    2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
+  if(mkdir("dirfile/xx") == 0){
+    2a8a:	83 ec 0c             	sub    $0xc,%esp
+    2a8d:	68 1e 4b 00 00       	push   $0x4b1e
+    2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
+    2a97:	83 c4 10             	add    $0x10,%esp
+    2a9a:	85 c0                	test   %eax,%eax
+    2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
+  if(unlink("dirfile/xx") == 0){
+    2aa2:	83 ec 0c             	sub    $0xc,%esp
+    2aa5:	68 1e 4b 00 00       	push   $0x4b1e
+    2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
+    2aaf:	83 c4 10             	add    $0x10,%esp
+    2ab2:	85 c0                	test   %eax,%eax
+    2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
+  if(link("README", "dirfile/xx") == 0){
+    2aba:	83 ec 08             	sub    $0x8,%esp
+    2abd:	68 1e 4b 00 00       	push   $0x4b1e
+    2ac2:	68 82 4b 00 00       	push   $0x4b82
+    2ac7:	e8 17 0f 00 00       	call   39e3 <link>
+    2acc:	83 c4 10             	add    $0x10,%esp
+    2acf:	85 c0                	test   %eax,%eax
+    2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
+  if(unlink("dirfile") != 0){
+    2ad7:	83 ec 0c             	sub    $0xc,%esp
+    2ada:	68 e5 4a 00 00       	push   $0x4ae5
+    2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
+    2ae4:	83 c4 10             	add    $0x10,%esp
+    2ae7:	85 c0                	test   %eax,%eax
+    2ae9:	0f 85 c0 00 00 00    	jne    2baf <dirfile+0x1af>
+  fd = open(".", O_RDWR);
+    2aef:	83 ec 08             	sub    $0x8,%esp
+    2af2:	6a 02                	push   $0x2
+    2af4:	68 de 46 00 00       	push   $0x46de
+    2af9:	e8 c5 0e 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2afe:	83 c4 10             	add    $0x10,%esp
+    2b01:	85 c0                	test   %eax,%eax
+    2b03:	0f 89 93 00 00 00    	jns    2b9c <dirfile+0x19c>
+  fd = open(".", 0);
+    2b09:	83 ec 08             	sub    $0x8,%esp
+    2b0c:	6a 00                	push   $0x0
+    2b0e:	68 de 46 00 00       	push   $0x46de
+    2b13:	e8 ab 0e 00 00       	call   39c3 <open>
+  if(write(fd, "x", 1) > 0){
+    2b18:	83 c4 0c             	add    $0xc,%esp
+    2b1b:	6a 01                	push   $0x1
+  fd = open(".", 0);
+    2b1d:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2b1f:	68 c1 47 00 00       	push   $0x47c1
+    2b24:	50                   	push   %eax
+    2b25:	e8 79 0e 00 00       	call   39a3 <write>
+    2b2a:	83 c4 10             	add    $0x10,%esp
+    2b2d:	85 c0                	test   %eax,%eax
+    2b2f:	7f 58                	jg     2b89 <dirfile+0x189>
+  close(fd);
+    2b31:	83 ec 0c             	sub    $0xc,%esp
+    2b34:	53                   	push   %ebx
+    2b35:	e8 71 0e 00 00       	call   39ab <close>
+  printf(1, "dir vs file OK\n");
+    2b3a:	58                   	pop    %eax
+    2b3b:	5a                   	pop    %edx
+    2b3c:	68 b5 4b 00 00       	push   $0x4bb5
+    2b41:	6a 01                	push   $0x1
+    2b43:	e8 b8 0f 00 00       	call   3b00 <printf>
+}
+    2b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2b4b:	83 c4 10             	add    $0x10,%esp
+    2b4e:	c9                   	leave  
+    2b4f:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2b50:	50                   	push   %eax
+    2b51:	50                   	push   %eax
+    2b52:	68 29 4b 00 00       	push   $0x4b29
+    2b57:	6a 01                	push   $0x1
+    2b59:	e8 a2 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b5e:	e8 20 0e 00 00       	call   3983 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2b63:	52                   	push   %edx
+    2b64:	52                   	push   %edx
+    2b65:	68 04 4b 00 00       	push   $0x4b04
+    2b6a:	6a 01                	push   $0x1
+    2b6c:	e8 8f 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b71:	e8 0d 0e 00 00       	call   3983 <exit>
+    printf(1, "create dirfile failed\n");
+    2b76:	51                   	push   %ecx
+    2b77:	51                   	push   %ecx
+    2b78:	68 ed 4a 00 00       	push   $0x4aed
+    2b7d:	6a 01                	push   $0x1
+    2b7f:	e8 7c 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b84:	e8 fa 0d 00 00       	call   3983 <exit>
+    printf(1, "write . succeeded!\n");
+    2b89:	51                   	push   %ecx
+    2b8a:	51                   	push   %ecx
+    2b8b:	68 a1 4b 00 00       	push   $0x4ba1
+    2b90:	6a 01                	push   $0x1
+    2b92:	e8 69 0f 00 00       	call   3b00 <printf>
+    exit();
+    2b97:	e8 e7 0d 00 00       	call   3983 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2b9c:	53                   	push   %ebx
+    2b9d:	53                   	push   %ebx
+    2b9e:	68 98 53 00 00       	push   $0x5398
+    2ba3:	6a 01                	push   $0x1
+    2ba5:	e8 56 0f 00 00       	call   3b00 <printf>
+    exit();
+    2baa:	e8 d4 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2baf:	50                   	push   %eax
+    2bb0:	50                   	push   %eax
+    2bb1:	68 89 4b 00 00       	push   $0x4b89
+    2bb6:	6a 01                	push   $0x1
+    2bb8:	e8 43 0f 00 00       	call   3b00 <printf>
+    exit();
+    2bbd:	e8 c1 0d 00 00       	call   3983 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2bc2:	50                   	push   %eax
+    2bc3:	50                   	push   %eax
+    2bc4:	68 78 53 00 00       	push   $0x5378
+    2bc9:	6a 01                	push   $0x1
+    2bcb:	e8 30 0f 00 00       	call   3b00 <printf>
+    exit();
+    2bd0:	e8 ae 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2bd5:	50                   	push   %eax
+    2bd6:	50                   	push   %eax
+    2bd7:	68 64 4b 00 00       	push   $0x4b64
+    2bdc:	6a 01                	push   $0x1
+    2bde:	e8 1d 0f 00 00       	call   3b00 <printf>
+    exit();
+    2be3:	e8 9b 0d 00 00       	call   3983 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2be8:	50                   	push   %eax
+    2be9:	50                   	push   %eax
+    2bea:	68 47 4b 00 00       	push   $0x4b47
+    2bef:	6a 01                	push   $0x1
+    2bf1:	e8 0a 0f 00 00       	call   3b00 <printf>
+    exit();
+    2bf6:	e8 88 0d 00 00       	call   3983 <exit>
+    2bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2bff:	90                   	nop
+
+00002c00 <iref>:
+{
+    2c00:	f3 0f 1e fb          	endbr32 
+    2c04:	55                   	push   %ebp
+    2c05:	89 e5                	mov    %esp,%ebp
+    2c07:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2c08:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2c0d:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2c10:	68 c5 4b 00 00       	push   $0x4bc5
+    2c15:	6a 01                	push   $0x1
+    2c17:	e8 e4 0e 00 00       	call   3b00 <printf>
+    2c1c:	83 c4 10             	add    $0x10,%esp
+    2c1f:	90                   	nop
+    if(mkdir("irefd") != 0){
+    2c20:	83 ec 0c             	sub    $0xc,%esp
+    2c23:	68 d6 4b 00 00       	push   $0x4bd6
+    2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
+    2c2d:	83 c4 10             	add    $0x10,%esp
+    2c30:	85 c0                	test   %eax,%eax
+    2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2c38:	83 ec 0c             	sub    $0xc,%esp
+    2c3b:	68 d6 4b 00 00       	push   $0x4bd6
+    2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
+    2c45:	83 c4 10             	add    $0x10,%esp
+    2c48:	85 c0                	test   %eax,%eax
+    2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
+    mkdir("");
+    2c50:	83 ec 0c             	sub    $0xc,%esp
+    2c53:	68 8b 42 00 00       	push   $0x428b
+    2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
+    link("README", "");
+    2c5d:	59                   	pop    %ecx
+    2c5e:	58                   	pop    %eax
+    2c5f:	68 8b 42 00 00       	push   $0x428b
+    2c64:	68 82 4b 00 00       	push   $0x4b82
+    2c69:	e8 75 0d 00 00       	call   39e3 <link>
+    fd = open("", O_CREATE);
+    2c6e:	58                   	pop    %eax
+    2c6f:	5a                   	pop    %edx
+    2c70:	68 00 02 00 00       	push   $0x200
+    2c75:	68 8b 42 00 00       	push   $0x428b
+    2c7a:	e8 44 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2c7f:	83 c4 10             	add    $0x10,%esp
+    2c82:	85 c0                	test   %eax,%eax
+    2c84:	78 0c                	js     2c92 <iref+0x92>
+      close(fd);
+    2c86:	83 ec 0c             	sub    $0xc,%esp
+    2c89:	50                   	push   %eax
+    2c8a:	e8 1c 0d 00 00       	call   39ab <close>
+    2c8f:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2c92:	83 ec 08             	sub    $0x8,%esp
+    2c95:	68 00 02 00 00       	push   $0x200
+    2c9a:	68 c0 47 00 00       	push   $0x47c0
+    2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2ca4:	83 c4 10             	add    $0x10,%esp
+    2ca7:	85 c0                	test   %eax,%eax
+    2ca9:	78 0c                	js     2cb7 <iref+0xb7>
+      close(fd);
+    2cab:	83 ec 0c             	sub    $0xc,%esp
+    2cae:	50                   	push   %eax
+    2caf:	e8 f7 0c 00 00       	call   39ab <close>
+    2cb4:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2cb7:	83 ec 0c             	sub    $0xc,%esp
+    2cba:	68 c0 47 00 00       	push   $0x47c0
+    2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2cc4:	83 c4 10             	add    $0x10,%esp
+    2cc7:	83 eb 01             	sub    $0x1,%ebx
+    2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
+  chdir("/");
+    2cd0:	83 ec 0c             	sub    $0xc,%esp
+    2cd3:	68 b1 3e 00 00       	push   $0x3eb1
+    2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
+  printf(1, "empty file name OK\n");
+    2cdd:	58                   	pop    %eax
+    2cde:	5a                   	pop    %edx
+    2cdf:	68 04 4c 00 00       	push   $0x4c04
+    2ce4:	6a 01                	push   $0x1
+    2ce6:	e8 15 0e 00 00       	call   3b00 <printf>
+}
+    2ceb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cee:	83 c4 10             	add    $0x10,%esp
+    2cf1:	c9                   	leave  
+    2cf2:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2cf3:	83 ec 08             	sub    $0x8,%esp
+    2cf6:	68 dc 4b 00 00       	push   $0x4bdc
+    2cfb:	6a 01                	push   $0x1
+    2cfd:	e8 fe 0d 00 00       	call   3b00 <printf>
+      exit();
+    2d02:	e8 7c 0c 00 00       	call   3983 <exit>
+      printf(1, "chdir irefd failed\n");
+    2d07:	83 ec 08             	sub    $0x8,%esp
+    2d0a:	68 f0 4b 00 00       	push   $0x4bf0
+    2d0f:	6a 01                	push   $0x1
+    2d11:	e8 ea 0d 00 00       	call   3b00 <printf>
+      exit();
+    2d16:	e8 68 0c 00 00       	call   3983 <exit>
+    2d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2d1f:	90                   	nop
+
+00002d20 <forktest>:
+{
+    2d20:	f3 0f 1e fb          	endbr32 
+    2d24:	55                   	push   %ebp
+    2d25:	89 e5                	mov    %esp,%ebp
+    2d27:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2d28:	31 db                	xor    %ebx,%ebx
+{
+    2d2a:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2d2d:	68 18 4c 00 00       	push   $0x4c18
+    2d32:	6a 01                	push   $0x1
+    2d34:	e8 c7 0d 00 00       	call   3b00 <printf>
+    2d39:	83 c4 10             	add    $0x10,%esp
+    2d3c:	eb 0f                	jmp    2d4d <forktest+0x2d>
+    2d3e:	66 90                	xchg   %ax,%ax
+    if(pid == 0)
+    2d40:	74 4a                	je     2d8c <forktest+0x6c>
+  for(n=0; n<1000; n++){
+    2d42:	83 c3 01             	add    $0x1,%ebx
+    2d45:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2d4b:	74 6b                	je     2db8 <forktest+0x98>
+    pid = fork();
+    2d4d:	e8 29 0c 00 00       	call   397b <fork>
+    if(pid < 0)
+    2d52:	85 c0                	test   %eax,%eax
+    2d54:	79 ea                	jns    2d40 <forktest+0x20>
+  for(; n > 0; n--){
+    2d56:	85 db                	test   %ebx,%ebx
+    2d58:	74 14                	je     2d6e <forktest+0x4e>
+    2d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2d60:	e8 26 0c 00 00       	call   398b <wait>
+    2d65:	85 c0                	test   %eax,%eax
+    2d67:	78 28                	js     2d91 <forktest+0x71>
+  for(; n > 0; n--){
+    2d69:	83 eb 01             	sub    $0x1,%ebx
+    2d6c:	75 f2                	jne    2d60 <forktest+0x40>
+  if(wait() != -1){
+    2d6e:	e8 18 0c 00 00       	call   398b <wait>
+    2d73:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2d76:	75 2d                	jne    2da5 <forktest+0x85>
+  printf(1, "fork test OK\n");
+    2d78:	83 ec 08             	sub    $0x8,%esp
+    2d7b:	68 4a 4c 00 00       	push   $0x4c4a
+    2d80:	6a 01                	push   $0x1
+    2d82:	e8 79 0d 00 00       	call   3b00 <printf>
+}
+    2d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2d8a:	c9                   	leave  
+    2d8b:	c3                   	ret    
+      exit();
+    2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
+      printf(1, "wait stopped early\n");
+    2d91:	83 ec 08             	sub    $0x8,%esp
+    2d94:	68 23 4c 00 00       	push   $0x4c23
+    2d99:	6a 01                	push   $0x1
+    2d9b:	e8 60 0d 00 00       	call   3b00 <printf>
+      exit();
+    2da0:	e8 de 0b 00 00       	call   3983 <exit>
+    printf(1, "wait got too many\n");
+    2da5:	52                   	push   %edx
+    2da6:	52                   	push   %edx
+    2da7:	68 37 4c 00 00       	push   $0x4c37
+    2dac:	6a 01                	push   $0x1
+    2dae:	e8 4d 0d 00 00       	call   3b00 <printf>
+    exit();
+    2db3:	e8 cb 0b 00 00       	call   3983 <exit>
+    printf(1, "fork claimed to work 1000 times!\n");
+    2db8:	50                   	push   %eax
+    2db9:	50                   	push   %eax
+    2dba:	68 b8 53 00 00       	push   $0x53b8
+    2dbf:	6a 01                	push   $0x1
+    2dc1:	e8 3a 0d 00 00       	call   3b00 <printf>
+    exit();
+    2dc6:	e8 b8 0b 00 00       	call   3983 <exit>
+    2dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2dcf:	90                   	nop
+
+00002dd0 <sbrktest>:
+{
+    2dd0:	f3 0f 1e fb          	endbr32 
+    2dd4:	55                   	push   %ebp
+    2dd5:	89 e5                	mov    %esp,%ebp
+    2dd7:	57                   	push   %edi
+  for(i = 0; i < 5000; i++){
+    2dd8:	31 ff                	xor    %edi,%edi
+{
+    2dda:	56                   	push   %esi
+    2ddb:	53                   	push   %ebx
+    2ddc:	83 ec 54             	sub    $0x54,%esp
+  printf(stdout, "sbrk test\n");
+    2ddf:	68 58 4c 00 00       	push   $0x4c58
+    2de4:	ff 35 00 5f 00 00    	pushl  0x5f00
+    2dea:	e8 11 0d 00 00       	call   3b00 <printf>
+  oldbrk = sbrk(0);
+    2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2df6:	e8 10 0c 00 00       	call   3a0b <sbrk>
+  a = sbrk(0);
+    2dfb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2e02:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2e04:	e8 02 0c 00 00       	call   3a0b <sbrk>
+    2e09:	83 c4 10             	add    $0x10,%esp
+    2e0c:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 5000; i++){
+    2e0e:	eb 02                	jmp    2e12 <sbrktest+0x42>
+    a = b + 1;
+    2e10:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2e12:	83 ec 0c             	sub    $0xc,%esp
+    2e15:	6a 01                	push   $0x1
+    2e17:	e8 ef 0b 00 00       	call   3a0b <sbrk>
+    if(b != a){
+    2e1c:	83 c4 10             	add    $0x10,%esp
+    2e1f:	39 f0                	cmp    %esi,%eax
+    2e21:	0f 85 84 02 00 00    	jne    30ab <sbrktest+0x2db>
+  for(i = 0; i < 5000; i++){
+    2e27:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2e2a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2e2d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2e30:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2e36:	75 d8                	jne    2e10 <sbrktest+0x40>
+  pid = fork();
+    2e38:	e8 3e 0b 00 00       	call   397b <fork>
+    2e3d:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2e3f:	85 c0                	test   %eax,%eax
+    2e41:	0f 88 91 03 00 00    	js     31d8 <sbrktest+0x408>
+  c = sbrk(1);
+    2e47:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2e4a:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2e4d:	6a 01                	push   $0x1
+    2e4f:	e8 b7 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(1);
+    2e54:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e5b:	e8 ab 0b 00 00       	call   3a0b <sbrk>
+  if(c != a + 1){
+    2e60:	83 c4 10             	add    $0x10,%esp
+    2e63:	39 c6                	cmp    %eax,%esi
+    2e65:	0f 85 56 03 00 00    	jne    31c1 <sbrktest+0x3f1>
+  if(pid == 0)
+    2e6b:	85 ff                	test   %edi,%edi
+    2e6d:	0f 84 49 03 00 00    	je     31bc <sbrktest+0x3ec>
+  wait();
+    2e73:	e8 13 0b 00 00       	call   398b <wait>
+  a = sbrk(0);
+    2e78:	83 ec 0c             	sub    $0xc,%esp
+    2e7b:	6a 00                	push   $0x0
+    2e7d:	e8 89 0b 00 00       	call   3a0b <sbrk>
+    2e82:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2e84:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2e89:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2e8b:	89 04 24             	mov    %eax,(%esp)
+    2e8e:	e8 78 0b 00 00       	call   3a0b <sbrk>
+  if (p != a) {
+    2e93:	83 c4 10             	add    $0x10,%esp
+    2e96:	39 c6                	cmp    %eax,%esi
+    2e98:	0f 85 07 03 00 00    	jne    31a5 <sbrktest+0x3d5>
+  a = sbrk(0);
+    2e9e:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2ea1:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2ea8:	6a 00                	push   $0x0
+    2eaa:	e8 5c 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(-4096);
+    2eaf:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2eb6:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2eb8:	e8 4e 0b 00 00       	call   3a0b <sbrk>
+  if(c == (char*)0xffffffff){
+    2ebd:	83 c4 10             	add    $0x10,%esp
+    2ec0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ec3:	0f 84 c5 02 00 00    	je     318e <sbrktest+0x3be>
+  c = sbrk(0);
+    2ec9:	83 ec 0c             	sub    $0xc,%esp
+    2ecc:	6a 00                	push   $0x0
+    2ece:	e8 38 0b 00 00       	call   3a0b <sbrk>
+  if(c != a - 4096){
+    2ed3:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2ed9:	83 c4 10             	add    $0x10,%esp
+    2edc:	39 d0                	cmp    %edx,%eax
+    2ede:	0f 85 93 02 00 00    	jne    3177 <sbrktest+0x3a7>
+  a = sbrk(0);
+    2ee4:	83 ec 0c             	sub    $0xc,%esp
+    2ee7:	6a 00                	push   $0x0
+    2ee9:	e8 1d 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(4096);
+    2eee:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  a = sbrk(0);
+    2ef5:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2ef7:	e8 0f 0b 00 00       	call   3a0b <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2efc:	83 c4 10             	add    $0x10,%esp
+  c = sbrk(4096);
+    2eff:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2f01:	39 c6                	cmp    %eax,%esi
+    2f03:	0f 85 57 02 00 00    	jne    3160 <sbrktest+0x390>
+    2f09:	83 ec 0c             	sub    $0xc,%esp
+    2f0c:	6a 00                	push   $0x0
+    2f0e:	e8 f8 0a 00 00       	call   3a0b <sbrk>
+    2f13:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2f19:	83 c4 10             	add    $0x10,%esp
+    2f1c:	39 c2                	cmp    %eax,%edx
+    2f1e:	0f 85 3c 02 00 00    	jne    3160 <sbrktest+0x390>
+  if(*lastaddr == 99){
+    2f24:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2f2b:	0f 84 18 02 00 00    	je     3149 <sbrktest+0x379>
+  a = sbrk(0);
+    2f31:	83 ec 0c             	sub    $0xc,%esp
+    2f34:	6a 00                	push   $0x0
+    2f36:	e8 d0 0a 00 00       	call   3a0b <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f3b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2f42:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f44:	e8 c2 0a 00 00       	call   3a0b <sbrk>
+    2f49:	89 d9                	mov    %ebx,%ecx
+    2f4b:	29 c1                	sub    %eax,%ecx
+    2f4d:	89 0c 24             	mov    %ecx,(%esp)
+    2f50:	e8 b6 0a 00 00       	call   3a0b <sbrk>
+  if(c != a){
+    2f55:	83 c4 10             	add    $0x10,%esp
+    2f58:	39 c6                	cmp    %eax,%esi
+    2f5a:	0f 85 d2 01 00 00    	jne    3132 <sbrktest+0x362>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f60:	be 00 00 00 80       	mov    $0x80000000,%esi
+    2f65:	8d 76 00             	lea    0x0(%esi),%esi
+    ppid = getpid();
+    2f68:	e8 96 0a 00 00       	call   3a03 <getpid>
+    2f6d:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2f6f:	e8 07 0a 00 00       	call   397b <fork>
+    if(pid < 0){
+    2f74:	85 c0                	test   %eax,%eax
+    2f76:	0f 88 9e 01 00 00    	js     311a <sbrktest+0x34a>
+    if(pid == 0){
+    2f7c:	0f 84 76 01 00 00    	je     30f8 <sbrktest+0x328>
+    wait();
+    2f82:	e8 04 0a 00 00       	call   398b <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f87:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    2f8d:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2f93:	75 d3                	jne    2f68 <sbrktest+0x198>
+  if(pipe(fds) != 0){
+    2f95:	83 ec 0c             	sub    $0xc,%esp
+    2f98:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2f9b:	50                   	push   %eax
+    2f9c:	e8 f2 09 00 00       	call   3993 <pipe>
+    2fa1:	83 c4 10             	add    $0x10,%esp
+    2fa4:	85 c0                	test   %eax,%eax
+    2fa6:	0f 85 34 01 00 00    	jne    30e0 <sbrktest+0x310>
+    2fac:	8d 75 c0             	lea    -0x40(%ebp),%esi
+    2faf:	89 f7                	mov    %esi,%edi
+    if((pids[i] = fork()) == 0){
+    2fb1:	e8 c5 09 00 00       	call   397b <fork>
+    2fb6:	89 07                	mov    %eax,(%edi)
+    2fb8:	85 c0                	test   %eax,%eax
+    2fba:	0f 84 8f 00 00 00    	je     304f <sbrktest+0x27f>
+    if(pids[i] != -1)
+    2fc0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2fc3:	74 14                	je     2fd9 <sbrktest+0x209>
+      read(fds[0], &scratch, 1);
+    2fc5:	83 ec 04             	sub    $0x4,%esp
+    2fc8:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2fcb:	6a 01                	push   $0x1
+    2fcd:	50                   	push   %eax
+    2fce:	ff 75 b8             	pushl  -0x48(%ebp)
+    2fd1:	e8 c5 09 00 00       	call   399b <read>
+    2fd6:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2fd9:	83 c7 04             	add    $0x4,%edi
+    2fdc:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2fdf:	39 c7                	cmp    %eax,%edi
+    2fe1:	75 ce                	jne    2fb1 <sbrktest+0x1e1>
+  c = sbrk(4096);
+    2fe3:	83 ec 0c             	sub    $0xc,%esp
+    2fe6:	68 00 10 00 00       	push   $0x1000
+    2feb:	e8 1b 0a 00 00       	call   3a0b <sbrk>
+    2ff0:	83 c4 10             	add    $0x10,%esp
+    2ff3:	89 c7                	mov    %eax,%edi
+    if(pids[i] == -1)
+    2ff5:	8b 06                	mov    (%esi),%eax
+    2ff7:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ffa:	74 11                	je     300d <sbrktest+0x23d>
+    kill(pids[i]);
+    2ffc:	83 ec 0c             	sub    $0xc,%esp
+    2fff:	50                   	push   %eax
+    3000:	e8 ae 09 00 00       	call   39b3 <kill>
+    wait();
+    3005:	e8 81 09 00 00       	call   398b <wait>
+    300a:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    300d:	83 c6 04             	add    $0x4,%esi
+    3010:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    3013:	39 f0                	cmp    %esi,%eax
+    3015:	75 de                	jne    2ff5 <sbrktest+0x225>
+  if(c == (char*)0xffffffff){
+    3017:	83 ff ff             	cmp    $0xffffffff,%edi
+    301a:	0f 84 a9 00 00 00    	je     30c9 <sbrktest+0x2f9>
+  if(sbrk(0) > oldbrk)
+    3020:	83 ec 0c             	sub    $0xc,%esp
+    3023:	6a 00                	push   $0x0
+    3025:	e8 e1 09 00 00       	call   3a0b <sbrk>
+    302a:	83 c4 10             	add    $0x10,%esp
+    302d:	39 c3                	cmp    %eax,%ebx
+    302f:	72 61                	jb     3092 <sbrktest+0x2c2>
+  printf(stdout, "sbrk test OK\n");
+    3031:	83 ec 08             	sub    $0x8,%esp
+    3034:	68 00 4d 00 00       	push   $0x4d00
+    3039:	ff 35 00 5f 00 00    	pushl  0x5f00
+    303f:	e8 bc 0a 00 00       	call   3b00 <printf>
+}
+    3044:	83 c4 10             	add    $0x10,%esp
+    3047:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    304a:	5b                   	pop    %ebx
+    304b:	5e                   	pop    %esi
+    304c:	5f                   	pop    %edi
+    304d:	5d                   	pop    %ebp
+    304e:	c3                   	ret    
+      sbrk(BIG - (uint)sbrk(0));
+    304f:	83 ec 0c             	sub    $0xc,%esp
+    3052:	6a 00                	push   $0x0
+    3054:	e8 b2 09 00 00       	call   3a0b <sbrk>
+    3059:	89 c2                	mov    %eax,%edx
+    305b:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    3060:	29 d0                	sub    %edx,%eax
+    3062:	89 04 24             	mov    %eax,(%esp)
+    3065:	e8 a1 09 00 00       	call   3a0b <sbrk>
+      write(fds[1], "x", 1);
+    306a:	83 c4 0c             	add    $0xc,%esp
+    306d:	6a 01                	push   $0x1
+    306f:	68 c1 47 00 00       	push   $0x47c1
+    3074:	ff 75 bc             	pushl  -0x44(%ebp)
+    3077:	e8 27 09 00 00       	call   39a3 <write>
+    307c:	83 c4 10             	add    $0x10,%esp
+    307f:	90                   	nop
+      for(;;) sleep(1000);
+    3080:	83 ec 0c             	sub    $0xc,%esp
+    3083:	68 e8 03 00 00       	push   $0x3e8
+    3088:	e8 86 09 00 00       	call   3a13 <sleep>
+    308d:	83 c4 10             	add    $0x10,%esp
+    3090:	eb ee                	jmp    3080 <sbrktest+0x2b0>
+    sbrk(-(sbrk(0) - oldbrk));
+    3092:	83 ec 0c             	sub    $0xc,%esp
+    3095:	6a 00                	push   $0x0
+    3097:	e8 6f 09 00 00       	call   3a0b <sbrk>
+    309c:	29 c3                	sub    %eax,%ebx
+    309e:	89 1c 24             	mov    %ebx,(%esp)
+    30a1:	e8 65 09 00 00       	call   3a0b <sbrk>
+    30a6:	83 c4 10             	add    $0x10,%esp
+    30a9:	eb 86                	jmp    3031 <sbrktest+0x261>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    30ab:	83 ec 0c             	sub    $0xc,%esp
+    30ae:	50                   	push   %eax
+    30af:	56                   	push   %esi
+    30b0:	57                   	push   %edi
+    30b1:	68 63 4c 00 00       	push   $0x4c63
+    30b6:	ff 35 00 5f 00 00    	pushl  0x5f00
+    30bc:	e8 3f 0a 00 00       	call   3b00 <printf>
+      exit();
+    30c1:	83 c4 20             	add    $0x20,%esp
+    30c4:	e8 ba 08 00 00       	call   3983 <exit>
+    printf(stdout, "failed sbrk leaked memory\n");
+    30c9:	50                   	push   %eax
+    30ca:	50                   	push   %eax
+    30cb:	68 e5 4c 00 00       	push   $0x4ce5
+    30d0:	ff 35 00 5f 00 00    	pushl  0x5f00
+    30d6:	e8 25 0a 00 00       	call   3b00 <printf>
+    exit();
+    30db:	e8 a3 08 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+    30e0:	52                   	push   %edx
+    30e1:	52                   	push   %edx
+    30e2:	68 a1 41 00 00       	push   $0x41a1
+    30e7:	6a 01                	push   $0x1
+    30e9:	e8 12 0a 00 00       	call   3b00 <printf>
+    exit();
+    30ee:	e8 90 08 00 00       	call   3983 <exit>
+    30f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    30f7:	90                   	nop
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    30f8:	0f be 06             	movsbl (%esi),%eax
+    30fb:	50                   	push   %eax
+    30fc:	56                   	push   %esi
+    30fd:	68 cc 4c 00 00       	push   $0x4ccc
+    3102:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3108:	e8 f3 09 00 00       	call   3b00 <printf>
+      kill(ppid);
+    310d:	89 3c 24             	mov    %edi,(%esp)
+    3110:	e8 9e 08 00 00       	call   39b3 <kill>
+      exit();
+    3115:	e8 69 08 00 00       	call   3983 <exit>
+      printf(stdout, "fork failed\n");
+    311a:	83 ec 08             	sub    $0x8,%esp
+    311d:	68 a9 4d 00 00       	push   $0x4da9
+    3122:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3128:	e8 d3 09 00 00       	call   3b00 <printf>
+      exit();
+    312d:	e8 51 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    3132:	50                   	push   %eax
+    3133:	56                   	push   %esi
+    3134:	68 ac 54 00 00       	push   $0x54ac
+    3139:	ff 35 00 5f 00 00    	pushl  0x5f00
+    313f:	e8 bc 09 00 00       	call   3b00 <printf>
+    exit();
+    3144:	e8 3a 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    3149:	51                   	push   %ecx
+    314a:	51                   	push   %ecx
+    314b:	68 7c 54 00 00       	push   $0x547c
+    3150:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3156:	e8 a5 09 00 00       	call   3b00 <printf>
+    exit();
+    315b:	e8 23 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    3160:	57                   	push   %edi
+    3161:	56                   	push   %esi
+    3162:	68 54 54 00 00       	push   $0x5454
+    3167:	ff 35 00 5f 00 00    	pushl  0x5f00
+    316d:	e8 8e 09 00 00       	call   3b00 <printf>
+    exit();
+    3172:	e8 0c 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    3177:	50                   	push   %eax
+    3178:	56                   	push   %esi
+    3179:	68 1c 54 00 00       	push   $0x541c
+    317e:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3184:	e8 77 09 00 00       	call   3b00 <printf>
+    exit();
+    3189:	e8 f5 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    318e:	53                   	push   %ebx
+    318f:	53                   	push   %ebx
+    3190:	68 b1 4c 00 00       	push   $0x4cb1
+    3195:	ff 35 00 5f 00 00    	pushl  0x5f00
+    319b:	e8 60 09 00 00       	call   3b00 <printf>
+    exit();
+    31a0:	e8 de 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    31a5:	56                   	push   %esi
+    31a6:	56                   	push   %esi
+    31a7:	68 dc 53 00 00       	push   $0x53dc
+    31ac:	ff 35 00 5f 00 00    	pushl  0x5f00
+    31b2:	e8 49 09 00 00       	call   3b00 <printf>
+    exit();
+    31b7:	e8 c7 07 00 00       	call   3983 <exit>
+    exit();
+    31bc:	e8 c2 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    31c1:	57                   	push   %edi
+    31c2:	57                   	push   %edi
+    31c3:	68 95 4c 00 00       	push   $0x4c95
+    31c8:	ff 35 00 5f 00 00    	pushl  0x5f00
+    31ce:	e8 2d 09 00 00       	call   3b00 <printf>
+    exit();
+    31d3:	e8 ab 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    31d8:	50                   	push   %eax
+    31d9:	50                   	push   %eax
+    31da:	68 7e 4c 00 00       	push   $0x4c7e
+    31df:	ff 35 00 5f 00 00    	pushl  0x5f00
+    31e5:	e8 16 09 00 00       	call   3b00 <printf>
+    exit();
+    31ea:	e8 94 07 00 00       	call   3983 <exit>
+    31ef:	90                   	nop
+
+000031f0 <validateint>:
+{
+    31f0:	f3 0f 1e fb          	endbr32 
+}
+    31f4:	c3                   	ret    
+    31f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003200 <validatetest>:
+{
+    3200:	f3 0f 1e fb          	endbr32 
+    3204:	55                   	push   %ebp
+    3205:	89 e5                	mov    %esp,%ebp
+    3207:	56                   	push   %esi
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3208:	31 f6                	xor    %esi,%esi
+{
+    320a:	53                   	push   %ebx
+  printf(stdout, "validate test\n");
+    320b:	83 ec 08             	sub    $0x8,%esp
+    320e:	68 0e 4d 00 00       	push   $0x4d0e
+    3213:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3219:	e8 e2 08 00 00       	call   3b00 <printf>
+    321e:	83 c4 10             	add    $0x10,%esp
+    3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((pid = fork()) == 0){
+    3228:	e8 4e 07 00 00       	call   397b <fork>
+    322d:	89 c3                	mov    %eax,%ebx
+    322f:	85 c0                	test   %eax,%eax
+    3231:	74 63                	je     3296 <validatetest+0x96>
+    sleep(0);
+    3233:	83 ec 0c             	sub    $0xc,%esp
+    3236:	6a 00                	push   $0x0
+    3238:	e8 d6 07 00 00       	call   3a13 <sleep>
+    sleep(0);
+    323d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3244:	e8 ca 07 00 00       	call   3a13 <sleep>
+    kill(pid);
+    3249:	89 1c 24             	mov    %ebx,(%esp)
+    324c:	e8 62 07 00 00       	call   39b3 <kill>
+    wait();
+    3251:	e8 35 07 00 00       	call   398b <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    3256:	58                   	pop    %eax
+    3257:	5a                   	pop    %edx
+    3258:	56                   	push   %esi
+    3259:	68 1d 4d 00 00       	push   $0x4d1d
+    325e:	e8 80 07 00 00       	call   39e3 <link>
+    3263:	83 c4 10             	add    $0x10,%esp
+    3266:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3269:	75 30                	jne    329b <validatetest+0x9b>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    326b:	81 c6 00 10 00 00    	add    $0x1000,%esi
+    3271:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
+    3277:	75 af                	jne    3228 <validatetest+0x28>
+  printf(stdout, "validate ok\n");
+    3279:	83 ec 08             	sub    $0x8,%esp
+    327c:	68 41 4d 00 00       	push   $0x4d41
+    3281:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3287:	e8 74 08 00 00       	call   3b00 <printf>
+}
+    328c:	83 c4 10             	add    $0x10,%esp
+    328f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3292:	5b                   	pop    %ebx
+    3293:	5e                   	pop    %esi
+    3294:	5d                   	pop    %ebp
+    3295:	c3                   	ret    
+      exit();
+    3296:	e8 e8 06 00 00       	call   3983 <exit>
+      printf(stdout, "link should not succeed\n");
+    329b:	83 ec 08             	sub    $0x8,%esp
+    329e:	68 28 4d 00 00       	push   $0x4d28
+    32a3:	ff 35 00 5f 00 00    	pushl  0x5f00
+    32a9:	e8 52 08 00 00       	call   3b00 <printf>
+      exit();
+    32ae:	e8 d0 06 00 00       	call   3983 <exit>
+    32b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    32ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000032c0 <bsstest>:
+{
+    32c0:	f3 0f 1e fb          	endbr32 
+    32c4:	55                   	push   %ebp
+    32c5:	89 e5                	mov    %esp,%ebp
+    32c7:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    32ca:	68 4e 4d 00 00       	push   $0x4d4e
+    32cf:	ff 35 00 5f 00 00    	pushl  0x5f00
+    32d5:	e8 26 08 00 00       	call   3b00 <printf>
+    32da:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(uninit); i++){
+    32dd:	31 c0                	xor    %eax,%eax
+    32df:	90                   	nop
+    if(uninit[i] != '\0'){
+    32e0:	80 b8 c0 5f 00 00 00 	cmpb   $0x0,0x5fc0(%eax)
+    32e7:	75 22                	jne    330b <bsstest+0x4b>
+  for(i = 0; i < sizeof(uninit); i++){
+    32e9:	83 c0 01             	add    $0x1,%eax
+    32ec:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    32f1:	75 ed                	jne    32e0 <bsstest+0x20>
+  printf(stdout, "bss test ok\n");
+    32f3:	83 ec 08             	sub    $0x8,%esp
+    32f6:	68 69 4d 00 00       	push   $0x4d69
+    32fb:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3301:	e8 fa 07 00 00       	call   3b00 <printf>
+}
+    3306:	83 c4 10             	add    $0x10,%esp
+    3309:	c9                   	leave  
+    330a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    330b:	83 ec 08             	sub    $0x8,%esp
+    330e:	68 58 4d 00 00       	push   $0x4d58
+    3313:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3319:	e8 e2 07 00 00       	call   3b00 <printf>
+      exit();
+    331e:	e8 60 06 00 00       	call   3983 <exit>
+    3323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    332a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003330 <bigargtest>:
+{
+    3330:	f3 0f 1e fb          	endbr32 
+    3334:	55                   	push   %ebp
+    3335:	89 e5                	mov    %esp,%ebp
+    3337:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    333a:	68 76 4d 00 00       	push   $0x4d76
+    333f:	e8 8f 06 00 00       	call   39d3 <unlink>
+  pid = fork();
+    3344:	e8 32 06 00 00       	call   397b <fork>
+  if(pid == 0){
+    3349:	83 c4 10             	add    $0x10,%esp
+    334c:	85 c0                	test   %eax,%eax
+    334e:	74 40                	je     3390 <bigargtest+0x60>
+  } else if(pid < 0){
+    3350:	0f 88 c1 00 00 00    	js     3417 <bigargtest+0xe7>
+  wait();
+    3356:	e8 30 06 00 00       	call   398b <wait>
+  fd = open("bigarg-ok", 0);
+    335b:	83 ec 08             	sub    $0x8,%esp
+    335e:	6a 00                	push   $0x0
+    3360:	68 76 4d 00 00       	push   $0x4d76
+    3365:	e8 59 06 00 00       	call   39c3 <open>
+  if(fd < 0){
+    336a:	83 c4 10             	add    $0x10,%esp
+    336d:	85 c0                	test   %eax,%eax
+    336f:	0f 88 8b 00 00 00    	js     3400 <bigargtest+0xd0>
+  close(fd);
+    3375:	83 ec 0c             	sub    $0xc,%esp
+    3378:	50                   	push   %eax
+    3379:	e8 2d 06 00 00       	call   39ab <close>
+  unlink("bigarg-ok");
+    337e:	c7 04 24 76 4d 00 00 	movl   $0x4d76,(%esp)
+    3385:	e8 49 06 00 00       	call   39d3 <unlink>
+}
+    338a:	83 c4 10             	add    $0x10,%esp
+    338d:	c9                   	leave  
+    338e:	c3                   	ret    
+    338f:	90                   	nop
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    3390:	c7 04 85 20 5f 00 00 	movl   $0x54d0,0x5f20(,%eax,4)
+    3397:	d0 54 00 00 
+    for(i = 0; i < MAXARG-1; i++)
+    339b:	83 c0 01             	add    $0x1,%eax
+    339e:	83 f8 1f             	cmp    $0x1f,%eax
+    33a1:	75 ed                	jne    3390 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    33a3:	51                   	push   %ecx
+    33a4:	51                   	push   %ecx
+    33a5:	68 80 4d 00 00       	push   $0x4d80
+    33aa:	ff 35 00 5f 00 00    	pushl  0x5f00
+    args[MAXARG-1] = 0;
+    33b0:	c7 05 9c 5f 00 00 00 	movl   $0x0,0x5f9c
+    33b7:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    33ba:	e8 41 07 00 00       	call   3b00 <printf>
+    exec("echo", args);
+    33bf:	58                   	pop    %eax
+    33c0:	5a                   	pop    %edx
+    33c1:	68 20 5f 00 00       	push   $0x5f20
+    33c6:	68 4d 3f 00 00       	push   $0x3f4d
+    33cb:	e8 eb 05 00 00       	call   39bb <exec>
+    printf(stdout, "bigarg test ok\n");
+    33d0:	59                   	pop    %ecx
+    33d1:	58                   	pop    %eax
+    33d2:	68 8d 4d 00 00       	push   $0x4d8d
+    33d7:	ff 35 00 5f 00 00    	pushl  0x5f00
+    33dd:	e8 1e 07 00 00       	call   3b00 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    33e2:	58                   	pop    %eax
+    33e3:	5a                   	pop    %edx
+    33e4:	68 00 02 00 00       	push   $0x200
+    33e9:	68 76 4d 00 00       	push   $0x4d76
+    33ee:	e8 d0 05 00 00       	call   39c3 <open>
+    close(fd);
+    33f3:	89 04 24             	mov    %eax,(%esp)
+    33f6:	e8 b0 05 00 00       	call   39ab <close>
+    exit();
+    33fb:	e8 83 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    3400:	50                   	push   %eax
+    3401:	50                   	push   %eax
+    3402:	68 b6 4d 00 00       	push   $0x4db6
+    3407:	ff 35 00 5f 00 00    	pushl  0x5f00
+    340d:	e8 ee 06 00 00       	call   3b00 <printf>
+    exit();
+    3412:	e8 6c 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3417:	52                   	push   %edx
+    3418:	52                   	push   %edx
+    3419:	68 9d 4d 00 00       	push   $0x4d9d
+    341e:	ff 35 00 5f 00 00    	pushl  0x5f00
+    3424:	e8 d7 06 00 00       	call   3b00 <printf>
+    exit();
+    3429:	e8 55 05 00 00       	call   3983 <exit>
+    342e:	66 90                	xchg   %ax,%ax
+
+00003430 <fsfull>:
+{
+    3430:	f3 0f 1e fb          	endbr32 
+    3434:	55                   	push   %ebp
+    3435:	89 e5                	mov    %esp,%ebp
+    3437:	57                   	push   %edi
+    3438:	56                   	push   %esi
+  for(nfiles = 0; ; nfiles++){
+    3439:	31 f6                	xor    %esi,%esi
+{
+    343b:	53                   	push   %ebx
+    343c:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    343f:	68 cb 4d 00 00       	push   $0x4dcb
+    3444:	6a 01                	push   $0x1
+    3446:	e8 b5 06 00 00       	call   3b00 <printf>
+    344b:	83 c4 10             	add    $0x10,%esp
+    344e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + nfiles / 1000;
+    3450:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3455:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    345a:	83 ec 04             	sub    $0x4,%esp
+    name[0] = 'f';
+    345d:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3461:	f7 e6                	mul    %esi
+    name[5] = '\0';
+    3463:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3467:	c1 ea 06             	shr    $0x6,%edx
+    346a:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    346d:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3473:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3476:	89 f0                	mov    %esi,%eax
+    3478:	29 d0                	sub    %edx,%eax
+    347a:	89 c2                	mov    %eax,%edx
+    347c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3481:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3483:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3488:	c1 ea 05             	shr    $0x5,%edx
+    348b:	83 c2 30             	add    $0x30,%edx
+    348e:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3491:	f7 e6                	mul    %esi
+    3493:	89 f0                	mov    %esi,%eax
+    3495:	c1 ea 05             	shr    $0x5,%edx
+    3498:	6b d2 64             	imul   $0x64,%edx,%edx
+    349b:	29 d0                	sub    %edx,%eax
+    349d:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    349f:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34a1:	c1 ea 03             	shr    $0x3,%edx
+    34a4:	83 c2 30             	add    $0x30,%edx
+    34a7:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    34aa:	f7 e1                	mul    %ecx
+    34ac:	89 f1                	mov    %esi,%ecx
+    34ae:	c1 ea 03             	shr    $0x3,%edx
+    34b1:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    34b4:	01 c0                	add    %eax,%eax
+    34b6:	29 c1                	sub    %eax,%ecx
+    34b8:	89 c8                	mov    %ecx,%eax
+    34ba:	83 c0 30             	add    $0x30,%eax
+    34bd:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34c3:	50                   	push   %eax
+    34c4:	68 d8 4d 00 00       	push   $0x4dd8
+    34c9:	6a 01                	push   $0x1
+    34cb:	e8 30 06 00 00       	call   3b00 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    34d0:	58                   	pop    %eax
+    34d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34d4:	5a                   	pop    %edx
+    34d5:	68 02 02 00 00       	push   $0x202
+    34da:	50                   	push   %eax
+    34db:	e8 e3 04 00 00       	call   39c3 <open>
+    if(fd < 0){
+    34e0:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    34e3:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    34e5:	85 c0                	test   %eax,%eax
+    34e7:	78 4d                	js     3536 <fsfull+0x106>
+    int total = 0;
+    34e9:	31 db                	xor    %ebx,%ebx
+    34eb:	eb 05                	jmp    34f2 <fsfull+0xc2>
+    34ed:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    34f0:	01 c3                	add    %eax,%ebx
+      int cc = write(fd, buf, 512);
+    34f2:	83 ec 04             	sub    $0x4,%esp
+    34f5:	68 00 02 00 00       	push   $0x200
+    34fa:	68 e0 86 00 00       	push   $0x86e0
+    34ff:	57                   	push   %edi
+    3500:	e8 9e 04 00 00       	call   39a3 <write>
+      if(cc < 512)
+    3505:	83 c4 10             	add    $0x10,%esp
+    3508:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    350d:	7f e1                	jg     34f0 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    350f:	83 ec 04             	sub    $0x4,%esp
+    3512:	53                   	push   %ebx
+    3513:	68 f4 4d 00 00       	push   $0x4df4
+    3518:	6a 01                	push   $0x1
+    351a:	e8 e1 05 00 00       	call   3b00 <printf>
+    close(fd);
+    351f:	89 3c 24             	mov    %edi,(%esp)
+    3522:	e8 84 04 00 00       	call   39ab <close>
+    if(total == 0)
+    3527:	83 c4 10             	add    $0x10,%esp
+    352a:	85 db                	test   %ebx,%ebx
+    352c:	74 1e                	je     354c <fsfull+0x11c>
+  for(nfiles = 0; ; nfiles++){
+    352e:	83 c6 01             	add    $0x1,%esi
+    3531:	e9 1a ff ff ff       	jmp    3450 <fsfull+0x20>
+      printf(1, "open %s failed\n", name);
+    3536:	83 ec 04             	sub    $0x4,%esp
+    3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    353c:	50                   	push   %eax
+    353d:	68 e4 4d 00 00       	push   $0x4de4
+    3542:	6a 01                	push   $0x1
+    3544:	e8 b7 05 00 00       	call   3b00 <printf>
+      break;
+    3549:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    354c:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3551:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
+    3556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    355d:	8d 76 00             	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    3560:	89 f0                	mov    %esi,%eax
+    3562:	89 f1                	mov    %esi,%ecx
+    unlink(name);
+    3564:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'f';
+    3567:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    356b:	f7 ef                	imul   %edi
+    356d:	c1 f9 1f             	sar    $0x1f,%ecx
+    name[5] = '\0';
+    3570:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3574:	c1 fa 06             	sar    $0x6,%edx
+    3577:	29 ca                	sub    %ecx,%edx
+    3579:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    357c:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3582:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3585:	89 f0                	mov    %esi,%eax
+    3587:	29 d0                	sub    %edx,%eax
+    3589:	f7 e3                	mul    %ebx
+    name[3] = '0' + (nfiles % 100) / 10;
+    358b:	89 f0                	mov    %esi,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    358d:	c1 ea 05             	shr    $0x5,%edx
+    3590:	83 c2 30             	add    $0x30,%edx
+    3593:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3596:	f7 eb                	imul   %ebx
+    3598:	89 f0                	mov    %esi,%eax
+    359a:	c1 fa 05             	sar    $0x5,%edx
+    359d:	29 ca                	sub    %ecx,%edx
+    359f:	6b d2 64             	imul   $0x64,%edx,%edx
+    35a2:	29 d0                	sub    %edx,%eax
+    35a4:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    35a9:	f7 e2                	mul    %edx
+    name[4] = '0' + (nfiles % 10);
+    35ab:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    35ad:	c1 ea 03             	shr    $0x3,%edx
+    35b0:	83 c2 30             	add    $0x30,%edx
+    35b3:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    35b6:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    35bb:	f7 ea                	imul   %edx
+    35bd:	c1 fa 02             	sar    $0x2,%edx
+    35c0:	29 ca                	sub    %ecx,%edx
+    35c2:	89 f1                	mov    %esi,%ecx
+    nfiles--;
+    35c4:	83 ee 01             	sub    $0x1,%esi
+    name[4] = '0' + (nfiles % 10);
+    35c7:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    35ca:	01 c0                	add    %eax,%eax
+    35cc:	29 c1                	sub    %eax,%ecx
+    35ce:	89 c8                	mov    %ecx,%eax
+    35d0:	83 c0 30             	add    $0x30,%eax
+    35d3:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    35d6:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    35d9:	50                   	push   %eax
+    35da:	e8 f4 03 00 00       	call   39d3 <unlink>
+  while(nfiles >= 0){
+    35df:	83 c4 10             	add    $0x10,%esp
+    35e2:	83 fe ff             	cmp    $0xffffffff,%esi
+    35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    35eb:	83 ec 08             	sub    $0x8,%esp
+    35ee:	68 04 4e 00 00       	push   $0x4e04
+    35f3:	6a 01                	push   $0x1
+    35f5:	e8 06 05 00 00       	call   3b00 <printf>
+}
+    35fa:	83 c4 10             	add    $0x10,%esp
+    35fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3600:	5b                   	pop    %ebx
+    3601:	5e                   	pop    %esi
+    3602:	5f                   	pop    %edi
+    3603:	5d                   	pop    %ebp
+    3604:	c3                   	ret    
+    3605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    360c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003610 <uio>:
+{
+    3610:	f3 0f 1e fb          	endbr32 
+    3614:	55                   	push   %ebp
+    3615:	89 e5                	mov    %esp,%ebp
+    3617:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    361a:	68 1a 4e 00 00       	push   $0x4e1a
+    361f:	6a 01                	push   $0x1
+    3621:	e8 da 04 00 00       	call   3b00 <printf>
+  pid = fork();
+    3626:	e8 50 03 00 00       	call   397b <fork>
+  if(pid == 0){
+    362b:	83 c4 10             	add    $0x10,%esp
+    362e:	85 c0                	test   %eax,%eax
+    3630:	74 1b                	je     364d <uio+0x3d>
+  } else if(pid < 0){
+    3632:	78 3d                	js     3671 <uio+0x61>
+  wait();
+    3634:	e8 52 03 00 00       	call   398b <wait>
+  printf(1, "uio test done\n");
+    3639:	83 ec 08             	sub    $0x8,%esp
+    363c:	68 24 4e 00 00       	push   $0x4e24
+    3641:	6a 01                	push   $0x1
+    3643:	e8 b8 04 00 00       	call   3b00 <printf>
+}
+    3648:	83 c4 10             	add    $0x10,%esp
+    364b:	c9                   	leave  
+    364c:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    364d:	b8 09 00 00 00       	mov    $0x9,%eax
+    3652:	ba 70 00 00 00       	mov    $0x70,%edx
+    3657:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    3658:	ba 71 00 00 00       	mov    $0x71,%edx
+    365d:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    365e:	52                   	push   %edx
+    365f:	52                   	push   %edx
+    3660:	68 b0 55 00 00       	push   $0x55b0
+    3665:	6a 01                	push   $0x1
+    3667:	e8 94 04 00 00       	call   3b00 <printf>
+    exit();
+    366c:	e8 12 03 00 00       	call   3983 <exit>
+    printf (1, "fork failed\n");
+    3671:	50                   	push   %eax
+    3672:	50                   	push   %eax
+    3673:	68 a9 4d 00 00       	push   $0x4da9
+    3678:	6a 01                	push   $0x1
+    367a:	e8 81 04 00 00       	call   3b00 <printf>
+    exit();
+    367f:	e8 ff 02 00 00       	call   3983 <exit>
+    3684:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    368b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    368f:	90                   	nop
+
+00003690 <argptest>:
+{
+    3690:	f3 0f 1e fb          	endbr32 
+    3694:	55                   	push   %ebp
+    3695:	89 e5                	mov    %esp,%ebp
+    3697:	53                   	push   %ebx
+    3698:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    369b:	6a 00                	push   $0x0
+    369d:	68 33 4e 00 00       	push   $0x4e33
+    36a2:	e8 1c 03 00 00       	call   39c3 <open>
+  if (fd < 0) {
+    36a7:	83 c4 10             	add    $0x10,%esp
+    36aa:	85 c0                	test   %eax,%eax
+    36ac:	78 39                	js     36e7 <argptest+0x57>
+  read(fd, sbrk(0) - 1, -1);
+    36ae:	83 ec 0c             	sub    $0xc,%esp
+    36b1:	89 c3                	mov    %eax,%ebx
+    36b3:	6a 00                	push   $0x0
+    36b5:	e8 51 03 00 00       	call   3a0b <sbrk>
+    36ba:	83 c4 0c             	add    $0xc,%esp
+    36bd:	83 e8 01             	sub    $0x1,%eax
+    36c0:	6a ff                	push   $0xffffffff
+    36c2:	50                   	push   %eax
+    36c3:	53                   	push   %ebx
+    36c4:	e8 d2 02 00 00       	call   399b <read>
+  close(fd);
+    36c9:	89 1c 24             	mov    %ebx,(%esp)
+    36cc:	e8 da 02 00 00       	call   39ab <close>
+  printf(1, "arg test passed\n");
+    36d1:	58                   	pop    %eax
+    36d2:	5a                   	pop    %edx
+    36d3:	68 45 4e 00 00       	push   $0x4e45
+    36d8:	6a 01                	push   $0x1
+    36da:	e8 21 04 00 00       	call   3b00 <printf>
+}
+    36df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36e2:	83 c4 10             	add    $0x10,%esp
+    36e5:	c9                   	leave  
+    36e6:	c3                   	ret    
+    printf(2, "open failed\n");
+    36e7:	51                   	push   %ecx
+    36e8:	51                   	push   %ecx
+    36e9:	68 38 4e 00 00       	push   $0x4e38
+    36ee:	6a 02                	push   $0x2
+    36f0:	e8 0b 04 00 00       	call   3b00 <printf>
+    exit();
+    36f5:	e8 89 02 00 00       	call   3983 <exit>
+    36fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003700 <rand>:
+{
+    3700:	f3 0f 1e fb          	endbr32 
+  randstate = randstate * 1664525 + 1013904223;
+    3704:	69 05 fc 5e 00 00 0d 	imul   $0x19660d,0x5efc,%eax
+    370b:	66 19 00 
+    370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3713:	a3 fc 5e 00 00       	mov    %eax,0x5efc
+}
+    3718:	c3                   	ret    
+    3719:	66 90                	xchg   %ax,%ax
+    371b:	66 90                	xchg   %ax,%ax
+    371d:	66 90                	xchg   %ax,%ax
+    371f:	90                   	nop
+
+00003720 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3720:	f3 0f 1e fb          	endbr32 
+    3724:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    3725:	31 c0                	xor    %eax,%eax
+{
+    3727:	89 e5                	mov    %esp,%ebp
+    3729:	53                   	push   %ebx
+    372a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    372d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+    3730:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+    3734:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+    3737:	83 c0 01             	add    $0x1,%eax
+    373a:	84 d2                	test   %dl,%dl
+    373c:	75 f2                	jne    3730 <strcpy+0x10>
+    ;
+  return os;
+}
+    373e:	89 c8                	mov    %ecx,%eax
+    3740:	5b                   	pop    %ebx
+    3741:	5d                   	pop    %ebp
+    3742:	c3                   	ret    
+    3743:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    374a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003750 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3750:	f3 0f 1e fb          	endbr32 
+    3754:	55                   	push   %ebp
+    3755:	89 e5                	mov    %esp,%ebp
+    3757:	53                   	push   %ebx
+    3758:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    375b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+    375e:	0f b6 01             	movzbl (%ecx),%eax
+    3761:	0f b6 1a             	movzbl (%edx),%ebx
+    3764:	84 c0                	test   %al,%al
+    3766:	75 19                	jne    3781 <strcmp+0x31>
+    3768:	eb 26                	jmp    3790 <strcmp+0x40>
+    376a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3770:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+    3774:	83 c1 01             	add    $0x1,%ecx
+    3777:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+    377a:	0f b6 1a             	movzbl (%edx),%ebx
+    377d:	84 c0                	test   %al,%al
+    377f:	74 0f                	je     3790 <strcmp+0x40>
+    3781:	38 d8                	cmp    %bl,%al
+    3783:	74 eb                	je     3770 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+    3785:	29 d8                	sub    %ebx,%eax
+}
+    3787:	5b                   	pop    %ebx
+    3788:	5d                   	pop    %ebp
+    3789:	c3                   	ret    
+    378a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3790:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+    3792:	29 d8                	sub    %ebx,%eax
+}
+    3794:	5b                   	pop    %ebx
+    3795:	5d                   	pop    %ebp
+    3796:	c3                   	ret    
+    3797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    379e:	66 90                	xchg   %ax,%ax
+
+000037a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    37a0:	f3 0f 1e fb          	endbr32 
+    37a4:	55                   	push   %ebp
+    37a5:	89 e5                	mov    %esp,%ebp
+    37a7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    37aa:	80 3a 00             	cmpb   $0x0,(%edx)
+    37ad:	74 21                	je     37d0 <strlen+0x30>
+    37af:	31 c0                	xor    %eax,%eax
+    37b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37b8:	83 c0 01             	add    $0x1,%eax
+    37bb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+    37bf:	89 c1                	mov    %eax,%ecx
+    37c1:	75 f5                	jne    37b8 <strlen+0x18>
+    ;
+  return n;
+}
+    37c3:	89 c8                	mov    %ecx,%eax
+    37c5:	5d                   	pop    %ebp
+    37c6:	c3                   	ret    
+    37c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37ce:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+    37d0:	31 c9                	xor    %ecx,%ecx
+}
+    37d2:	5d                   	pop    %ebp
+    37d3:	89 c8                	mov    %ecx,%eax
+    37d5:	c3                   	ret    
+    37d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000037e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    37e0:	f3 0f 1e fb          	endbr32 
+    37e4:	55                   	push   %ebp
+    37e5:	89 e5                	mov    %esp,%ebp
+    37e7:	57                   	push   %edi
+    37e8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    37eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    37ee:	8b 45 0c             	mov    0xc(%ebp),%eax
+    37f1:	89 d7                	mov    %edx,%edi
+    37f3:	fc                   	cld    
+    37f4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    37f6:	89 d0                	mov    %edx,%eax
+    37f8:	5f                   	pop    %edi
+    37f9:	5d                   	pop    %ebp
+    37fa:	c3                   	ret    
+    37fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37ff:	90                   	nop
+
+00003800 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3800:	f3 0f 1e fb          	endbr32 
+    3804:	55                   	push   %ebp
+    3805:	89 e5                	mov    %esp,%ebp
+    3807:	8b 45 08             	mov    0x8(%ebp),%eax
+    380a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+    380e:	0f b6 10             	movzbl (%eax),%edx
+    3811:	84 d2                	test   %dl,%dl
+    3813:	75 16                	jne    382b <strchr+0x2b>
+    3815:	eb 21                	jmp    3838 <strchr+0x38>
+    3817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    381e:	66 90                	xchg   %ax,%ax
+    3820:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+    3824:	83 c0 01             	add    $0x1,%eax
+    3827:	84 d2                	test   %dl,%dl
+    3829:	74 0d                	je     3838 <strchr+0x38>
+    if(*s == c)
+    382b:	38 d1                	cmp    %dl,%cl
+    382d:	75 f1                	jne    3820 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+    382f:	5d                   	pop    %ebp
+    3830:	c3                   	ret    
+    3831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+    3838:	31 c0                	xor    %eax,%eax
+}
+    383a:	5d                   	pop    %ebp
+    383b:	c3                   	ret    
+    383c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003840 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3840:	f3 0f 1e fb          	endbr32 
+    3844:	55                   	push   %ebp
+    3845:	89 e5                	mov    %esp,%ebp
+    3847:	57                   	push   %edi
+    3848:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3849:	31 f6                	xor    %esi,%esi
+{
+    384b:	53                   	push   %ebx
+    384c:	89 f3                	mov    %esi,%ebx
+    384e:	83 ec 1c             	sub    $0x1c,%esp
+    3851:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    3854:	eb 33                	jmp    3889 <gets+0x49>
+    3856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    385d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    3860:	83 ec 04             	sub    $0x4,%esp
+    3863:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3866:	6a 01                	push   $0x1
+    3868:	50                   	push   %eax
+    3869:	6a 00                	push   $0x0
+    386b:	e8 2b 01 00 00       	call   399b <read>
+    if(cc < 1)
+    3870:	83 c4 10             	add    $0x10,%esp
+    3873:	85 c0                	test   %eax,%eax
+    3875:	7e 1c                	jle    3893 <gets+0x53>
+      break;
+    buf[i++] = c;
+    3877:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    387b:	83 c7 01             	add    $0x1,%edi
+    387e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    3881:	3c 0a                	cmp    $0xa,%al
+    3883:	74 23                	je     38a8 <gets+0x68>
+    3885:	3c 0d                	cmp    $0xd,%al
+    3887:	74 1f                	je     38a8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+    3889:	83 c3 01             	add    $0x1,%ebx
+    388c:	89 fe                	mov    %edi,%esi
+    388e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    3891:	7c cd                	jl     3860 <gets+0x20>
+    3893:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    3895:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    3898:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    389b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    389e:	5b                   	pop    %ebx
+    389f:	5e                   	pop    %esi
+    38a0:	5f                   	pop    %edi
+    38a1:	5d                   	pop    %ebp
+    38a2:	c3                   	ret    
+    38a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    38a7:	90                   	nop
+    38a8:	8b 75 08             	mov    0x8(%ebp),%esi
+    38ab:	8b 45 08             	mov    0x8(%ebp),%eax
+    38ae:	01 de                	add    %ebx,%esi
+    38b0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    38b2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    38b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    38b8:	5b                   	pop    %ebx
+    38b9:	5e                   	pop    %esi
+    38ba:	5f                   	pop    %edi
+    38bb:	5d                   	pop    %ebp
+    38bc:	c3                   	ret    
+    38bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000038c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    38c0:	f3 0f 1e fb          	endbr32 
+    38c4:	55                   	push   %ebp
+    38c5:	89 e5                	mov    %esp,%ebp
+    38c7:	56                   	push   %esi
+    38c8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    38c9:	83 ec 08             	sub    $0x8,%esp
+    38cc:	6a 00                	push   $0x0
+    38ce:	ff 75 08             	pushl  0x8(%ebp)
+    38d1:	e8 ed 00 00 00       	call   39c3 <open>
+  if(fd < 0)
+    38d6:	83 c4 10             	add    $0x10,%esp
+    38d9:	85 c0                	test   %eax,%eax
+    38db:	78 2b                	js     3908 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+    38dd:	83 ec 08             	sub    $0x8,%esp
+    38e0:	ff 75 0c             	pushl  0xc(%ebp)
+    38e3:	89 c3                	mov    %eax,%ebx
+    38e5:	50                   	push   %eax
+    38e6:	e8 f0 00 00 00       	call   39db <fstat>
+  close(fd);
+    38eb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    38ee:	89 c6                	mov    %eax,%esi
+  close(fd);
+    38f0:	e8 b6 00 00 00       	call   39ab <close>
+  return r;
+    38f5:	83 c4 10             	add    $0x10,%esp
+}
+    38f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    38fb:	89 f0                	mov    %esi,%eax
+    38fd:	5b                   	pop    %ebx
+    38fe:	5e                   	pop    %esi
+    38ff:	5d                   	pop    %ebp
+    3900:	c3                   	ret    
+    3901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+    3908:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    390d:	eb e9                	jmp    38f8 <stat+0x38>
+    390f:	90                   	nop
+
+00003910 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3910:	f3 0f 1e fb          	endbr32 
+    3914:	55                   	push   %ebp
+    3915:	89 e5                	mov    %esp,%ebp
+    3917:	53                   	push   %ebx
+    3918:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    391b:	0f be 02             	movsbl (%edx),%eax
+    391e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+    3921:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+    3924:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+    3929:	77 1a                	ja     3945 <atoi+0x35>
+    392b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    392f:	90                   	nop
+    n = n*10 + *s++ - '0';
+    3930:	83 c2 01             	add    $0x1,%edx
+    3933:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+    3936:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+    393a:	0f be 02             	movsbl (%edx),%eax
+    393d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+    3940:	80 fb 09             	cmp    $0x9,%bl
+    3943:	76 eb                	jbe    3930 <atoi+0x20>
+  return n;
+}
+    3945:	89 c8                	mov    %ecx,%eax
+    3947:	5b                   	pop    %ebx
+    3948:	5d                   	pop    %ebp
+    3949:	c3                   	ret    
+    394a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003950 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3950:	f3 0f 1e fb          	endbr32 
+    3954:	55                   	push   %ebp
+    3955:	89 e5                	mov    %esp,%ebp
+    3957:	57                   	push   %edi
+    3958:	8b 45 10             	mov    0x10(%ebp),%eax
+    395b:	8b 55 08             	mov    0x8(%ebp),%edx
+    395e:	56                   	push   %esi
+    395f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    3962:	85 c0                	test   %eax,%eax
+    3964:	7e 0f                	jle    3975 <memmove+0x25>
+    3966:	01 d0                	add    %edx,%eax
+  dst = vdst;
+    3968:	89 d7                	mov    %edx,%edi
+    396a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+    3970:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+    3971:	39 f8                	cmp    %edi,%eax
+    3973:	75 fb                	jne    3970 <memmove+0x20>
+  return vdst;
+}
+    3975:	5e                   	pop    %esi
+    3976:	89 d0                	mov    %edx,%eax
+    3978:	5f                   	pop    %edi
+    3979:	5d                   	pop    %ebp
+    397a:	c3                   	ret    
+
+0000397b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    397b:	b8 01 00 00 00       	mov    $0x1,%eax
+    3980:	cd 40                	int    $0x40
+    3982:	c3                   	ret    
+
+00003983 <exit>:
+SYSCALL(exit)
+    3983:	b8 02 00 00 00       	mov    $0x2,%eax
+    3988:	cd 40                	int    $0x40
+    398a:	c3                   	ret    
+
+0000398b <wait>:
+SYSCALL(wait)
+    398b:	b8 03 00 00 00       	mov    $0x3,%eax
+    3990:	cd 40                	int    $0x40
+    3992:	c3                   	ret    
+
+00003993 <pipe>:
+SYSCALL(pipe)
+    3993:	b8 04 00 00 00       	mov    $0x4,%eax
+    3998:	cd 40                	int    $0x40
+    399a:	c3                   	ret    
+
+0000399b <read>:
+SYSCALL(read)
+    399b:	b8 05 00 00 00       	mov    $0x5,%eax
+    39a0:	cd 40                	int    $0x40
+    39a2:	c3                   	ret    
+
+000039a3 <write>:
+SYSCALL(write)
+    39a3:	b8 10 00 00 00       	mov    $0x10,%eax
+    39a8:	cd 40                	int    $0x40
+    39aa:	c3                   	ret    
+
+000039ab <close>:
+SYSCALL(close)
+    39ab:	b8 15 00 00 00       	mov    $0x15,%eax
+    39b0:	cd 40                	int    $0x40
+    39b2:	c3                   	ret    
+
+000039b3 <kill>:
+SYSCALL(kill)
+    39b3:	b8 06 00 00 00       	mov    $0x6,%eax
+    39b8:	cd 40                	int    $0x40
+    39ba:	c3                   	ret    
+
+000039bb <exec>:
+SYSCALL(exec)
+    39bb:	b8 07 00 00 00       	mov    $0x7,%eax
+    39c0:	cd 40                	int    $0x40
+    39c2:	c3                   	ret    
+
+000039c3 <open>:
+SYSCALL(open)
+    39c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+    39c8:	cd 40                	int    $0x40
+    39ca:	c3                   	ret    
+
+000039cb <mknod>:
+SYSCALL(mknod)
+    39cb:	b8 11 00 00 00       	mov    $0x11,%eax
+    39d0:	cd 40                	int    $0x40
+    39d2:	c3                   	ret    
+
+000039d3 <unlink>:
+SYSCALL(unlink)
+    39d3:	b8 12 00 00 00       	mov    $0x12,%eax
+    39d8:	cd 40                	int    $0x40
+    39da:	c3                   	ret    
+
+000039db <fstat>:
+SYSCALL(fstat)
+    39db:	b8 08 00 00 00       	mov    $0x8,%eax
+    39e0:	cd 40                	int    $0x40
+    39e2:	c3                   	ret    
+
+000039e3 <link>:
+SYSCALL(link)
+    39e3:	b8 13 00 00 00       	mov    $0x13,%eax
+    39e8:	cd 40                	int    $0x40
+    39ea:	c3                   	ret    
+
+000039eb <mkdir>:
+SYSCALL(mkdir)
+    39eb:	b8 14 00 00 00       	mov    $0x14,%eax
+    39f0:	cd 40                	int    $0x40
+    39f2:	c3                   	ret    
+
+000039f3 <chdir>:
+SYSCALL(chdir)
+    39f3:	b8 09 00 00 00       	mov    $0x9,%eax
+    39f8:	cd 40                	int    $0x40
+    39fa:	c3                   	ret    
+
+000039fb <dup>:
+SYSCALL(dup)
+    39fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3a00:	cd 40                	int    $0x40
+    3a02:	c3                   	ret    
+
+00003a03 <getpid>:
+SYSCALL(getpid)
+    3a03:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3a08:	cd 40                	int    $0x40
+    3a0a:	c3                   	ret    
+
+00003a0b <sbrk>:
+SYSCALL(sbrk)
+    3a0b:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3a10:	cd 40                	int    $0x40
+    3a12:	c3                   	ret    
+
+00003a13 <sleep>:
+SYSCALL(sleep)
+    3a13:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3a18:	cd 40                	int    $0x40
+    3a1a:	c3                   	ret    
+
+00003a1b <uptime>:
+SYSCALL(uptime)
+    3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3a20:	cd 40                	int    $0x40
+    3a22:	c3                   	ret    
+
+00003a23 <draw>:
+SYSCALL(draw)
+    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
+    3a28:	cd 40                	int    $0x40
+    3a2a:	c3                   	ret    
+
+00003a2b <history>:
+SYSCALL(history)
+    3a2b:	b8 17 00 00 00       	mov    $0x17,%eax
+    3a30:	cd 40                	int    $0x40
+    3a32:	c3                   	ret    
+
+00003a33 <wait2>:
+SYSCALL(wait2)
+    3a33:	b8 18 00 00 00       	mov    $0x18,%eax
+    3a38:	cd 40                	int    $0x40
+    3a3a:	c3                   	ret    
+
+00003a3b <set_prio>:
+SYSCALL(set_prio)
+    3a3b:	b8 19 00 00 00       	mov    $0x19,%eax
+    3a40:	cd 40                	int    $0x40
+    3a42:	c3                   	ret    
+
+00003a43 <yield2>:
+SYSCALL(yield2)
+    3a43:	b8 1a 00 00 00       	mov    $0x1a,%eax
+    3a48:	cd 40                	int    $0x40
+    3a4a:	c3                   	ret    
+    3a4b:	66 90                	xchg   %ax,%ax
+    3a4d:	66 90                	xchg   %ax,%ax
+    3a4f:	90                   	nop
+
+00003a50 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3a50:	55                   	push   %ebp
+    3a51:	89 e5                	mov    %esp,%ebp
+    3a53:	57                   	push   %edi
+    3a54:	56                   	push   %esi
+    3a55:	53                   	push   %ebx
+    3a56:	83 ec 3c             	sub    $0x3c,%esp
+    3a59:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+    3a5c:	89 d1                	mov    %edx,%ecx
+{
+    3a5e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+    3a61:	85 d2                	test   %edx,%edx
+    3a63:	0f 89 7f 00 00 00    	jns    3ae8 <printint+0x98>
+    3a69:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3a6d:	74 79                	je     3ae8 <printint+0x98>
+    neg = 1;
+    3a6f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+    3a76:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    3a78:	31 db                	xor    %ebx,%ebx
+    3a7a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    3a7d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    3a80:	89 c8                	mov    %ecx,%eax
+    3a82:	31 d2                	xor    %edx,%edx
+    3a84:	89 cf                	mov    %ecx,%edi
+    3a86:	f7 75 c4             	divl   -0x3c(%ebp)
+    3a89:	0f b6 92 08 56 00 00 	movzbl 0x5608(%edx),%edx
+    3a90:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    3a93:	89 d8                	mov    %ebx,%eax
+    3a95:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+    3a98:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+    3a9b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+    3a9e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    3aa1:	76 dd                	jbe    3a80 <printint+0x30>
+  if(neg)
+    3aa3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    3aa6:	85 c9                	test   %ecx,%ecx
+    3aa8:	74 0c                	je     3ab6 <printint+0x66>
+    buf[i++] = '-';
+    3aaa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+    3aaf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+    3ab1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+    3ab6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    3ab9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    3abd:	eb 07                	jmp    3ac6 <printint+0x76>
+    3abf:	90                   	nop
+    3ac0:	0f b6 13             	movzbl (%ebx),%edx
+    3ac3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+    3ac6:	83 ec 04             	sub    $0x4,%esp
+    3ac9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3acc:	6a 01                	push   $0x1
+    3ace:	56                   	push   %esi
+    3acf:	57                   	push   %edi
+    3ad0:	e8 ce fe ff ff       	call   39a3 <write>
+  while(--i >= 0)
+    3ad5:	83 c4 10             	add    $0x10,%esp
+    3ad8:	39 de                	cmp    %ebx,%esi
+    3ada:	75 e4                	jne    3ac0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+    3adc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3adf:	5b                   	pop    %ebx
+    3ae0:	5e                   	pop    %esi
+    3ae1:	5f                   	pop    %edi
+    3ae2:	5d                   	pop    %ebp
+    3ae3:	c3                   	ret    
+    3ae4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3ae8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3aef:	eb 87                	jmp    3a78 <printint+0x28>
+    3af1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3af8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3aff:	90                   	nop
+
+00003b00 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3b00:	f3 0f 1e fb          	endbr32 
+    3b04:	55                   	push   %ebp
+    3b05:	89 e5                	mov    %esp,%ebp
+    3b07:	57                   	push   %edi
+    3b08:	56                   	push   %esi
+    3b09:	53                   	push   %ebx
+    3b0a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3b0d:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3b10:	0f b6 1e             	movzbl (%esi),%ebx
+    3b13:	84 db                	test   %bl,%bl
+    3b15:	0f 84 b4 00 00 00    	je     3bcf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+    3b1b:	8d 45 10             	lea    0x10(%ebp),%eax
+    3b1e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+    3b21:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    3b24:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+    3b26:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b29:	eb 33                	jmp    3b5e <printf+0x5e>
+    3b2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b2f:	90                   	nop
+    3b30:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    3b33:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+    3b38:	83 f8 25             	cmp    $0x25,%eax
+    3b3b:	74 17                	je     3b54 <printf+0x54>
+  write(fd, &c, 1);
+    3b3d:	83 ec 04             	sub    $0x4,%esp
+    3b40:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3b43:	6a 01                	push   $0x1
+    3b45:	57                   	push   %edi
+    3b46:	ff 75 08             	pushl  0x8(%ebp)
+    3b49:	e8 55 fe ff ff       	call   39a3 <write>
+    3b4e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+    3b51:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3b54:	0f b6 1e             	movzbl (%esi),%ebx
+    3b57:	83 c6 01             	add    $0x1,%esi
+    3b5a:	84 db                	test   %bl,%bl
+    3b5c:	74 71                	je     3bcf <printf+0xcf>
+    c = fmt[i] & 0xff;
+    3b5e:	0f be cb             	movsbl %bl,%ecx
+    3b61:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3b64:	85 d2                	test   %edx,%edx
+    3b66:	74 c8                	je     3b30 <printf+0x30>
+      }
+    } else if(state == '%'){
+    3b68:	83 fa 25             	cmp    $0x25,%edx
+    3b6b:	75 e7                	jne    3b54 <printf+0x54>
+      if(c == 'd'){
+    3b6d:	83 f8 64             	cmp    $0x64,%eax
+    3b70:	0f 84 9a 00 00 00    	je     3c10 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3b76:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3b7c:	83 f9 70             	cmp    $0x70,%ecx
+    3b7f:	74 5f                	je     3be0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3b81:	83 f8 73             	cmp    $0x73,%eax
+    3b84:	0f 84 d6 00 00 00    	je     3c60 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3b8a:	83 f8 63             	cmp    $0x63,%eax
+    3b8d:	0f 84 8d 00 00 00    	je     3c20 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3b93:	83 f8 25             	cmp    $0x25,%eax
+    3b96:	0f 84 b4 00 00 00    	je     3c50 <printf+0x150>
+  write(fd, &c, 1);
+    3b9c:	83 ec 04             	sub    $0x4,%esp
+    3b9f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3ba3:	6a 01                	push   $0x1
+    3ba5:	57                   	push   %edi
+    3ba6:	ff 75 08             	pushl  0x8(%ebp)
+    3ba9:	e8 f5 fd ff ff       	call   39a3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+    3bae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3bb1:	83 c4 0c             	add    $0xc,%esp
+    3bb4:	6a 01                	push   $0x1
+    3bb6:	83 c6 01             	add    $0x1,%esi
+    3bb9:	57                   	push   %edi
+    3bba:	ff 75 08             	pushl  0x8(%ebp)
+    3bbd:	e8 e1 fd ff ff       	call   39a3 <write>
+  for(i = 0; fmt[i]; i++){
+    3bc2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+    3bc6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    3bc9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+    3bcb:	84 db                	test   %bl,%bl
+    3bcd:	75 8f                	jne    3b5e <printf+0x5e>
+    }
+  }
+}
+    3bcf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3bd2:	5b                   	pop    %ebx
+    3bd3:	5e                   	pop    %esi
+    3bd4:	5f                   	pop    %edi
+    3bd5:	5d                   	pop    %ebp
+    3bd6:	c3                   	ret    
+    3bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bde:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+    3be0:	83 ec 0c             	sub    $0xc,%esp
+    3be3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3be8:	6a 00                	push   $0x0
+    3bea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3bed:	8b 45 08             	mov    0x8(%ebp),%eax
+    3bf0:	8b 13                	mov    (%ebx),%edx
+    3bf2:	e8 59 fe ff ff       	call   3a50 <printint>
+        ap++;
+    3bf7:	89 d8                	mov    %ebx,%eax
+    3bf9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3bfc:	31 d2                	xor    %edx,%edx
+        ap++;
+    3bfe:	83 c0 04             	add    $0x4,%eax
+    3c01:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3c04:	e9 4b ff ff ff       	jmp    3b54 <printf+0x54>
+    3c09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    3c10:	83 ec 0c             	sub    $0xc,%esp
+    3c13:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3c18:	6a 01                	push   $0x1
+    3c1a:	eb ce                	jmp    3bea <printf+0xea>
+    3c1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    3c20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    3c23:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3c26:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    3c28:	6a 01                	push   $0x1
+        ap++;
+    3c2a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    3c2d:	57                   	push   %edi
+    3c2e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    3c31:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c34:	e8 6a fd ff ff       	call   39a3 <write>
+        ap++;
+    3c39:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    3c3c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3c3f:	31 d2                	xor    %edx,%edx
+    3c41:	e9 0e ff ff ff       	jmp    3b54 <printf+0x54>
+    3c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c4d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    3c50:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c53:	83 ec 04             	sub    $0x4,%esp
+    3c56:	e9 59 ff ff ff       	jmp    3bb4 <printf+0xb4>
+    3c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c5f:	90                   	nop
+        s = (char*)*ap;
+    3c60:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3c63:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    3c65:	83 c0 04             	add    $0x4,%eax
+    3c68:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    3c6b:	85 db                	test   %ebx,%ebx
+    3c6d:	74 17                	je     3c86 <printf+0x186>
+        while(*s != 0){
+    3c6f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    3c72:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    3c74:	84 c0                	test   %al,%al
+    3c76:	0f 84 d8 fe ff ff    	je     3b54 <printf+0x54>
+    3c7c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c7f:	89 de                	mov    %ebx,%esi
+    3c81:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c84:	eb 1a                	jmp    3ca0 <printf+0x1a0>
+          s = "(null)";
+    3c86:	bb fe 55 00 00       	mov    $0x55fe,%ebx
+        while(*s != 0){
+    3c8b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c8e:	b8 28 00 00 00       	mov    $0x28,%eax
+    3c93:	89 de                	mov    %ebx,%esi
+    3c95:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c9f:	90                   	nop
+  write(fd, &c, 1);
+    3ca0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3ca3:	83 c6 01             	add    $0x1,%esi
+    3ca6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3ca9:	6a 01                	push   $0x1
+    3cab:	57                   	push   %edi
+    3cac:	53                   	push   %ebx
+    3cad:	e8 f1 fc ff ff       	call   39a3 <write>
+        while(*s != 0){
+    3cb2:	0f b6 06             	movzbl (%esi),%eax
+    3cb5:	83 c4 10             	add    $0x10,%esp
+    3cb8:	84 c0                	test   %al,%al
+    3cba:	75 e4                	jne    3ca0 <printf+0x1a0>
+    3cbc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    3cbf:	31 d2                	xor    %edx,%edx
+    3cc1:	e9 8e fe ff ff       	jmp    3b54 <printf+0x54>
+    3cc6:	66 90                	xchg   %ax,%ax
+    3cc8:	66 90                	xchg   %ax,%ax
+    3cca:	66 90                	xchg   %ax,%ax
+    3ccc:	66 90                	xchg   %ax,%ax
+    3cce:	66 90                	xchg   %ax,%ax
+
+00003cd0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3cd0:	f3 0f 1e fb          	endbr32 
+    3cd4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cd5:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
+{
+    3cda:	89 e5                	mov    %esp,%ebp
+    3cdc:	57                   	push   %edi
+    3cdd:	56                   	push   %esi
+    3cde:	53                   	push   %ebx
+    3cdf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3ce2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    3ce4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3ce7:	39 c8                	cmp    %ecx,%eax
+    3ce9:	73 15                	jae    3d00 <free+0x30>
+    3ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3cef:	90                   	nop
+    3cf0:	39 d1                	cmp    %edx,%ecx
+    3cf2:	72 14                	jb     3d08 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3cf4:	39 d0                	cmp    %edx,%eax
+    3cf6:	73 10                	jae    3d08 <free+0x38>
+{
+    3cf8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cfa:	8b 10                	mov    (%eax),%edx
+    3cfc:	39 c8                	cmp    %ecx,%eax
+    3cfe:	72 f0                	jb     3cf0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3d00:	39 d0                	cmp    %edx,%eax
+    3d02:	72 f4                	jb     3cf8 <free+0x28>
+    3d04:	39 d1                	cmp    %edx,%ecx
+    3d06:	73 f0                	jae    3cf8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3d08:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3d0b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3d0e:	39 fa                	cmp    %edi,%edx
+    3d10:	74 1e                	je     3d30 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3d12:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d15:	8b 50 04             	mov    0x4(%eax),%edx
+    3d18:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d1b:	39 f1                	cmp    %esi,%ecx
+    3d1d:	74 28                	je     3d47 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3d1f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    3d21:	5b                   	pop    %ebx
+  freep = p;
+    3d22:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+}
+    3d27:	5e                   	pop    %esi
+    3d28:	5f                   	pop    %edi
+    3d29:	5d                   	pop    %ebp
+    3d2a:	c3                   	ret    
+    3d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d2f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    3d30:	03 72 04             	add    0x4(%edx),%esi
+    3d33:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3d36:	8b 10                	mov    (%eax),%edx
+    3d38:	8b 12                	mov    (%edx),%edx
+    3d3a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d3d:	8b 50 04             	mov    0x4(%eax),%edx
+    3d40:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d43:	39 f1                	cmp    %esi,%ecx
+    3d45:	75 d8                	jne    3d1f <free+0x4f>
+    p->s.size += bp->s.size;
+    3d47:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3d4a:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+    p->s.size += bp->s.size;
+    3d4f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3d52:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3d55:	89 10                	mov    %edx,(%eax)
+}
+    3d57:	5b                   	pop    %ebx
+    3d58:	5e                   	pop    %esi
+    3d59:	5f                   	pop    %edi
+    3d5a:	5d                   	pop    %ebp
+    3d5b:	c3                   	ret    
+    3d5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003d60 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3d60:	f3 0f 1e fb          	endbr32 
+    3d64:	55                   	push   %ebp
+    3d65:	89 e5                	mov    %esp,%ebp
+    3d67:	57                   	push   %edi
+    3d68:	56                   	push   %esi
+    3d69:	53                   	push   %ebx
+    3d6a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d6d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3d70:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d76:	8d 70 07             	lea    0x7(%eax),%esi
+    3d79:	c1 ee 03             	shr    $0x3,%esi
+    3d7c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    3d7f:	85 ff                	test   %edi,%edi
+    3d81:	0f 84 a9 00 00 00    	je     3e30 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3d87:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    3d89:	8b 48 04             	mov    0x4(%eax),%ecx
+    3d8c:	39 f1                	cmp    %esi,%ecx
+    3d8e:	73 6d                	jae    3dfd <malloc+0x9d>
+    3d90:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    3d96:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3d9b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3d9e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    3da5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    3da8:	eb 17                	jmp    3dc1 <malloc+0x61>
+    3daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3db0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    3db2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3db5:	39 f1                	cmp    %esi,%ecx
+    3db7:	73 4f                	jae    3e08 <malloc+0xa8>
+    3db9:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
+    3dbf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3dc1:	39 c7                	cmp    %eax,%edi
+    3dc3:	75 eb                	jne    3db0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    3dc5:	83 ec 0c             	sub    $0xc,%esp
+    3dc8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    3dcb:	e8 3b fc ff ff       	call   3a0b <sbrk>
+  if(p == (char*)-1)
+    3dd0:	83 c4 10             	add    $0x10,%esp
+    3dd3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3dd6:	74 1b                	je     3df3 <malloc+0x93>
+  hp->s.size = nu;
+    3dd8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3ddb:	83 ec 0c             	sub    $0xc,%esp
+    3dde:	83 c0 08             	add    $0x8,%eax
+    3de1:	50                   	push   %eax
+    3de2:	e8 e9 fe ff ff       	call   3cd0 <free>
+  return freep;
+    3de7:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
+      if((p = morecore(nunits)) == 0)
+    3dec:	83 c4 10             	add    $0x10,%esp
+    3def:	85 c0                	test   %eax,%eax
+    3df1:	75 bd                	jne    3db0 <malloc+0x50>
+        return 0;
+  }
+}
+    3df3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3df6:	31 c0                	xor    %eax,%eax
+}
+    3df8:	5b                   	pop    %ebx
+    3df9:	5e                   	pop    %esi
+    3dfa:	5f                   	pop    %edi
+    3dfb:	5d                   	pop    %ebp
+    3dfc:	c3                   	ret    
+    if(p->s.size >= nunits){
+    3dfd:	89 c2                	mov    %eax,%edx
+    3dff:	89 f8                	mov    %edi,%eax
+    3e01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    3e08:	39 ce                	cmp    %ecx,%esi
+    3e0a:	74 54                	je     3e60 <malloc+0x100>
+        p->s.size -= nunits;
+    3e0c:	29 f1                	sub    %esi,%ecx
+    3e0e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    3e11:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    3e14:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    3e17:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+}
+    3e1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3e1f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    3e22:	5b                   	pop    %ebx
+    3e23:	5e                   	pop    %esi
+    3e24:	5f                   	pop    %edi
+    3e25:	5d                   	pop    %ebp
+    3e26:	c3                   	ret    
+    3e27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e2e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    3e30:	c7 05 a0 5f 00 00 a4 	movl   $0x5fa4,0x5fa0
+    3e37:	5f 00 00 
+    base.s.size = 0;
+    3e3a:	bf a4 5f 00 00       	mov    $0x5fa4,%edi
+    base.s.ptr = freep = prevp = &base;
+    3e3f:	c7 05 a4 5f 00 00 a4 	movl   $0x5fa4,0x5fa4
+    3e46:	5f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3e49:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    3e4b:	c7 05 a8 5f 00 00 00 	movl   $0x0,0x5fa8
+    3e52:	00 00 00 
+    if(p->s.size >= nunits){
+    3e55:	e9 36 ff ff ff       	jmp    3d90 <malloc+0x30>
+    3e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    3e60:	8b 0a                	mov    (%edx),%ecx
+    3e62:	89 08                	mov    %ecx,(%eax)
+    3e64:	eb b1                	jmp    3e17 <malloc+0xb7>
diff -ruN xv6-public/usertests.d xv6-public_mine/usertests.d
--- xv6-public/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/usertests.d	2021-09-30 23:42:30.098486102 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and xv6-public_mine/usertests.o differ
diff -ruN xv6-public/usertests.sym xv6-public_mine/usertests.sym
--- xv6-public/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/usertests.sym	2021-09-30 23:42:30.678645473 +0530
@@ -0,0 +1,108 @@
+00000000 .text
+00003e68 .rodata
+0000561c .eh_frame
+00005efc .data
+00005f20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005f20 args.1465
+00000000 ulib.c
+00000000 printf.c
+00003a50 printint
+00005608 digits.1101
+00000000 umalloc.c
+00005fa0 freep
+00005fa4 base
+00003720 strcpy
+00000d60 exitwait
+00003a3b set_prio
+00003b00 printf
+00005f00 stdout
+00003330 bigargtest
+00003950 memmove
+00000310 openiputtest
+000039cb mknod
+00003840 gets
+00003a03 getpid
+00000a60 pipe1
+00002c00 iref
+00003d60 malloc
+00003a13 sleep
+00000210 exitiputtest
+00003430 fsfull
+00003a33 wait2
+00001c60 bigdir
+00002d20 forktest
+00000690 writetest1
+00002490 bigwrite
+00000eb0 sharedfd
+00005efc randstate
+00003993 pipe
+00005fc0 uninit
+00002a00 dirfile
+000039a3 write
+00003a2b history
+000032c0 bsstest
+00005f04 echoargv
+000039db fstat
+000039b3 kill
+00003200 validatetest
+00002880 rmdot
+000039f3 chdir
+00000a10 exectest
+000039bb exec
+0000398b wait
+00003700 rand
+0000399b read
+00000c00 preempt
+000039d3 unlink
+00003690 argptest
+00000de0 mem
+0000397b fork
+00003a0b sbrk
+00003a1b uptime
+00005f18 __bss_start
+000037e0 memset
+00000860 createtest
+00000000 main
+00001270 createdelete
+00003750 strcmp
+000004b0 writetest
+000039fb dup
+00002dd0 sbrktest
+00000410 opentest
+00001da0 subdir
+00003610 uio
+00001630 linktest
+000086e0 buf
+00000920 dirtest
+00000120 iputtest
+000038c0 stat
+00002570 bigfile
+00005f18 _edata
+0000a6e4 _end
+000014a0 unlinkread
+000039e3 link
+00003983 exit
+00003910 atoi
+00003a43 yield2
+00001b50 linkunlink
+00003a23 draw
+0000a6e0 name
+000037a0 strlen
+000039c3 open
+00003800 strchr
+00001850 concreate
+00002740 fourteen
+000031f0 validateint
+00001070 fourfiles
+000039eb mkdir
+000039ab close
+00003cd0 free
Binary files xv6-public/usys.o and xv6-public_mine/usys.o differ
diff -ruN xv6-public/usys.S xv6-public_mine/usys.S
--- xv6-public/usys.S	2020-08-10 23:58:02.000000000 +0530
+++ xv6-public_mine/usys.S	2021-09-30 10:38:54.000000000 +0530
@@ -29,3 +29,8 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(draw)
+SYSCALL(history)
+SYSCALL(wait2)
+SYSCALL(set_prio)
+SYSCALL(yield2)
Binary files xv6-public/vectors.o and xv6-public_mine/vectors.o differ
diff -ruN xv6-public/vectors.S xv6-public_mine/vectors.S
--- xv6-public/vectors.S	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/vectors.S	2021-09-30 23:42:00.373148556 +0530
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
diff -ruN xv6-public/vm.d xv6-public_mine/vm.d
--- xv6-public/vm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/vm.d	2021-09-30 23:42:01.389029117 +0530
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files xv6-public/vm.o and xv6-public_mine/vm.o differ
Binary files xv6-public/_wc and xv6-public_mine/_wc differ
diff -ruN xv6-public/wc.asm xv6-public_mine/wc.asm
--- xv6-public/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/wc.asm	2021-09-30 23:42:31.326821969 +0530
@@ -0,0 +1,1361 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 52                	jle    7f <main+0x7f>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 f7 03 00 00       	call   433 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+  4d:	83 c3 04             	add    $0x4,%ebx
+    wc(fd, argv[i]);
+  50:	50                   	push   %eax
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 bd 03 00 00       	call   41b <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 88 03 00 00       	call   3f3 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 fb 08 00 00       	push   $0x8fb
+  73:	6a 01                	push   $0x1
+  75:	e8 f6 04 00 00       	call   570 <printf>
+      exit();
+  7a:	e8 74 03 00 00       	call   3f3 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 ed 08 00 00       	push   $0x8ed
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 61 03 00 00       	call   3f3 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	57                   	push   %edi
+  a8:	56                   	push   %esi
+  a9:	53                   	push   %ebx
+  l = w = c = 0;
+  aa:	31 db                	xor    %ebx,%ebx
+{
+  ac:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c8:	83 ec 04             	sub    $0x4,%esp
+  cb:	68 00 02 00 00       	push   $0x200
+  d0:	68 20 0c 00 00       	push   $0xc20
+  d5:	ff 75 08             	pushl  0x8(%ebp)
+  d8:	e8 2e 03 00 00       	call   40b <read>
+  dd:	83 c4 10             	add    $0x10,%esp
+  e0:	89 c6                	mov    %eax,%esi
+  e2:	85 c0                	test   %eax,%eax
+  e4:	7e 62                	jle    148 <wc+0xa8>
+    for(i=0; i<n; i++){
+  e6:	31 ff                	xor    %edi,%edi
+  e8:	eb 14                	jmp    fe <wc+0x5e>
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        inword = 0;
+  f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  f7:	83 c7 01             	add    $0x1,%edi
+  fa:	39 fe                	cmp    %edi,%esi
+  fc:	74 42                	je     140 <wc+0xa0>
+      if(buf[i] == '\n')
+  fe:	0f be 87 20 0c 00 00 	movsbl 0xc20(%edi),%eax
+        l++;
+ 105:	31 c9                	xor    %ecx,%ecx
+ 107:	3c 0a                	cmp    $0xa,%al
+ 109:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10c:	83 ec 08             	sub    $0x8,%esp
+ 10f:	50                   	push   %eax
+        l++;
+ 110:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 112:	68 d8 08 00 00       	push   $0x8d8
+ 117:	e8 54 01 00 00       	call   270 <strchr>
+ 11c:	83 c4 10             	add    $0x10,%esp
+ 11f:	85 c0                	test   %eax,%eax
+ 121:	75 cd                	jne    f0 <wc+0x50>
+      else if(!inword){
+ 123:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 126:	85 d2                	test   %edx,%edx
+ 128:	75 cd                	jne    f7 <wc+0x57>
+    for(i=0; i<n; i++){
+ 12a:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 12d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+        inword = 1;
+ 131:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 138:	39 fe                	cmp    %edi,%esi
+ 13a:	75 c2                	jne    fe <wc+0x5e>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 140:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 143:	eb 83                	jmp    c8 <wc+0x28>
+ 145:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 148:	75 24                	jne    16e <wc+0xce>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 14a:	83 ec 08             	sub    $0x8,%esp
+ 14d:	ff 75 0c             	pushl  0xc(%ebp)
+ 150:	ff 75 dc             	pushl  -0x24(%ebp)
+ 153:	ff 75 e0             	pushl  -0x20(%ebp)
+ 156:	53                   	push   %ebx
+ 157:	68 ee 08 00 00       	push   $0x8ee
+ 15c:	6a 01                	push   $0x1
+ 15e:	e8 0d 04 00 00       	call   570 <printf>
+}
+ 163:	83 c4 20             	add    $0x20,%esp
+ 166:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 169:	5b                   	pop    %ebx
+ 16a:	5e                   	pop    %esi
+ 16b:	5f                   	pop    %edi
+ 16c:	5d                   	pop    %ebp
+ 16d:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 16e:	50                   	push   %eax
+ 16f:	50                   	push   %eax
+ 170:	68 de 08 00 00       	push   $0x8de
+ 175:	6a 01                	push   $0x1
+ 177:	e8 f4 03 00 00       	call   570 <printf>
+    exit();
+ 17c:	e8 72 02 00 00       	call   3f3 <exit>
+ 181:	66 90                	xchg   %ax,%ax
+ 183:	66 90                	xchg   %ax,%ax
+ 185:	66 90                	xchg   %ax,%ax
+ 187:	66 90                	xchg   %ax,%ax
+ 189:	66 90                	xchg   %ax,%ax
+ 18b:	66 90                	xchg   %ax,%ax
+ 18d:	66 90                	xchg   %ax,%ax
+ 18f:	90                   	nop
+
+00000190 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 195:	31 c0                	xor    %eax,%eax
+{
+ 197:	89 e5                	mov    %esp,%ebp
+ 199:	53                   	push   %ebx
+ 19a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 19d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 1a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1a7:	83 c0 01             	add    $0x1,%eax
+ 1aa:	84 d2                	test   %dl,%dl
+ 1ac:	75 f2                	jne    1a0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1ae:	89 c8                	mov    %ecx,%eax
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000001c0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	53                   	push   %ebx
+ 1c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 1ce:	0f b6 01             	movzbl (%ecx),%eax
+ 1d1:	0f b6 1a             	movzbl (%edx),%ebx
+ 1d4:	84 c0                	test   %al,%al
+ 1d6:	75 19                	jne    1f1 <strcmp+0x31>
+ 1d8:	eb 26                	jmp    200 <strcmp+0x40>
+ 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1e4:	83 c1 01             	add    $0x1,%ecx
+ 1e7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1ea:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ed:	84 c0                	test   %al,%al
+ 1ef:	74 0f                	je     200 <strcmp+0x40>
+ 1f1:	38 d8                	cmp    %bl,%al
+ 1f3:	74 eb                	je     1e0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1f5:	29 d8                	sub    %ebx,%eax
+}
+ 1f7:	5b                   	pop    %ebx
+ 1f8:	5d                   	pop    %ebp
+ 1f9:	c3                   	ret    
+ 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 200:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 202:	29 d8                	sub    %ebx,%eax
+}
+ 204:	5b                   	pop    %ebx
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 21a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 21d:	74 21                	je     240 <strlen+0x30>
+ 21f:	31 c0                	xor    %eax,%eax
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	83 c0 01             	add    $0x1,%eax
+ 22b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 22f:	89 c1                	mov    %eax,%ecx
+ 231:	75 f5                	jne    228 <strlen+0x18>
+    ;
+  return n;
+}
+ 233:	89 c8                	mov    %ecx,%eax
+ 235:	5d                   	pop    %ebp
+ 236:	c3                   	ret    
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 240:	31 c9                	xor    %ecx,%ecx
+}
+ 242:	5d                   	pop    %ebp
+ 243:	89 c8                	mov    %ecx,%eax
+ 245:	c3                   	ret    
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000250 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	57                   	push   %edi
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 25b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 25e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 261:	89 d7                	mov    %edx,%edi
+ 263:	fc                   	cld    
+ 264:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 266:	89 d0                	mov    %edx,%eax
+ 268:	5f                   	pop    %edi
+ 269:	5d                   	pop    %ebp
+ 26a:	c3                   	ret    
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+
+00000270 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 27e:	0f b6 10             	movzbl (%eax),%edx
+ 281:	84 d2                	test   %dl,%dl
+ 283:	75 16                	jne    29b <strchr+0x2b>
+ 285:	eb 21                	jmp    2a8 <strchr+0x38>
+ 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28e:	66 90                	xchg   %ax,%ax
+ 290:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 294:	83 c0 01             	add    $0x1,%eax
+ 297:	84 d2                	test   %dl,%dl
+ 299:	74 0d                	je     2a8 <strchr+0x38>
+    if(*s == c)
+ 29b:	38 d1                	cmp    %dl,%cl
+ 29d:	75 f1                	jne    290 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 29f:	5d                   	pop    %ebp
+ 2a0:	c3                   	ret    
+ 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2a8:	31 c0                	xor    %eax,%eax
+}
+ 2aa:	5d                   	pop    %ebp
+ 2ab:	c3                   	ret    
+ 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002b0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2b9:	31 f6                	xor    %esi,%esi
+{
+ 2bb:	53                   	push   %ebx
+ 2bc:	89 f3                	mov    %esi,%ebx
+ 2be:	83 ec 1c             	sub    $0x1c,%esp
+ 2c1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2c4:	eb 33                	jmp    2f9 <gets+0x49>
+ 2c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2d0:	83 ec 04             	sub    $0x4,%esp
+ 2d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2d6:	6a 01                	push   $0x1
+ 2d8:	50                   	push   %eax
+ 2d9:	6a 00                	push   $0x0
+ 2db:	e8 2b 01 00 00       	call   40b <read>
+    if(cc < 1)
+ 2e0:	83 c4 10             	add    $0x10,%esp
+ 2e3:	85 c0                	test   %eax,%eax
+ 2e5:	7e 1c                	jle    303 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2eb:	83 c7 01             	add    $0x1,%edi
+ 2ee:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2f1:	3c 0a                	cmp    $0xa,%al
+ 2f3:	74 23                	je     318 <gets+0x68>
+ 2f5:	3c 0d                	cmp    $0xd,%al
+ 2f7:	74 1f                	je     318 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2f9:	83 c3 01             	add    $0x1,%ebx
+ 2fc:	89 fe                	mov    %edi,%esi
+ 2fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 301:	7c cd                	jl     2d0 <gets+0x20>
+ 303:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 305:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 308:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 30b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 30e:	5b                   	pop    %ebx
+ 30f:	5e                   	pop    %esi
+ 310:	5f                   	pop    %edi
+ 311:	5d                   	pop    %ebp
+ 312:	c3                   	ret    
+ 313:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 317:	90                   	nop
+ 318:	8b 75 08             	mov    0x8(%ebp),%esi
+ 31b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31e:	01 de                	add    %ebx,%esi
+ 320:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 322:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 325:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 328:	5b                   	pop    %ebx
+ 329:	5e                   	pop    %esi
+ 32a:	5f                   	pop    %edi
+ 32b:	5d                   	pop    %ebp
+ 32c:	c3                   	ret    
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000330 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	56                   	push   %esi
+ 338:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 339:	83 ec 08             	sub    $0x8,%esp
+ 33c:	6a 00                	push   $0x0
+ 33e:	ff 75 08             	pushl  0x8(%ebp)
+ 341:	e8 ed 00 00 00       	call   433 <open>
+  if(fd < 0)
+ 346:	83 c4 10             	add    $0x10,%esp
+ 349:	85 c0                	test   %eax,%eax
+ 34b:	78 2b                	js     378 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 34d:	83 ec 08             	sub    $0x8,%esp
+ 350:	ff 75 0c             	pushl  0xc(%ebp)
+ 353:	89 c3                	mov    %eax,%ebx
+ 355:	50                   	push   %eax
+ 356:	e8 f0 00 00 00       	call   44b <fstat>
+  close(fd);
+ 35b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 35e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 360:	e8 b6 00 00 00       	call   41b <close>
+  return r;
+ 365:	83 c4 10             	add    $0x10,%esp
+}
+ 368:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 36b:	89 f0                	mov    %esi,%eax
+ 36d:	5b                   	pop    %ebx
+ 36e:	5e                   	pop    %esi
+ 36f:	5d                   	pop    %ebp
+ 370:	c3                   	ret    
+ 371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 378:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 37d:	eb e9                	jmp    368 <stat+0x38>
+ 37f:	90                   	nop
+
+00000380 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	53                   	push   %ebx
+ 388:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 38b:	0f be 02             	movsbl (%edx),%eax
+ 38e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 391:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 394:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 399:	77 1a                	ja     3b5 <atoi+0x35>
+ 39b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 39f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 3a0:	83 c2 01             	add    $0x1,%edx
+ 3a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3aa:	0f be 02             	movsbl (%edx),%eax
+ 3ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3b0:	80 fb 09             	cmp    $0x9,%bl
+ 3b3:	76 eb                	jbe    3a0 <atoi+0x20>
+  return n;
+}
+ 3b5:	89 c8                	mov    %ecx,%eax
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5d                   	pop    %ebp
+ 3b9:	c3                   	ret    
+ 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	57                   	push   %edi
+ 3c8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3cb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3ce:	56                   	push   %esi
+ 3cf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3d2:	85 c0                	test   %eax,%eax
+ 3d4:	7e 0f                	jle    3e5 <memmove+0x25>
+ 3d6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3d8:	89 d7                	mov    %edx,%edi
+ 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3e1:	39 f8                	cmp    %edi,%eax
+ 3e3:	75 fb                	jne    3e0 <memmove+0x20>
+  return vdst;
+}
+ 3e5:	5e                   	pop    %esi
+ 3e6:	89 d0                	mov    %edx,%eax
+ 3e8:	5f                   	pop    %edi
+ 3e9:	5d                   	pop    %ebp
+ 3ea:	c3                   	ret    
+
+000003eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <exit>:
+SYSCALL(exit)
+ 3f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <wait>:
+SYSCALL(wait)
+ 3fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <pipe>:
+SYSCALL(pipe)
+ 403:	b8 04 00 00 00       	mov    $0x4,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <read>:
+SYSCALL(read)
+ 40b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <write>:
+SYSCALL(write)
+ 413:	b8 10 00 00 00       	mov    $0x10,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <close>:
+SYSCALL(close)
+ 41b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <kill>:
+SYSCALL(kill)
+ 423:	b8 06 00 00 00       	mov    $0x6,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <exec>:
+SYSCALL(exec)
+ 42b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <open>:
+SYSCALL(open)
+ 433:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <mknod>:
+SYSCALL(mknod)
+ 43b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <unlink>:
+SYSCALL(unlink)
+ 443:	b8 12 00 00 00       	mov    $0x12,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <fstat>:
+SYSCALL(fstat)
+ 44b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <link>:
+SYSCALL(link)
+ 453:	b8 13 00 00 00       	mov    $0x13,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <mkdir>:
+SYSCALL(mkdir)
+ 45b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <chdir>:
+SYSCALL(chdir)
+ 463:	b8 09 00 00 00       	mov    $0x9,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <dup>:
+SYSCALL(dup)
+ 46b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <getpid>:
+SYSCALL(getpid)
+ 473:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <sbrk>:
+SYSCALL(sbrk)
+ 47b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <sleep>:
+SYSCALL(sleep)
+ 483:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <uptime>:
+SYSCALL(uptime)
+ 48b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <draw>:
+SYSCALL(draw)
+ 493:	b8 16 00 00 00       	mov    $0x16,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <history>:
+SYSCALL(history)
+ 49b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+
+000004a3 <wait2>:
+SYSCALL(wait2)
+ 4a3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 4a8:	cd 40                	int    $0x40
+ 4aa:	c3                   	ret    
+
+000004ab <set_prio>:
+SYSCALL(set_prio)
+ 4ab:	b8 19 00 00 00       	mov    $0x19,%eax
+ 4b0:	cd 40                	int    $0x40
+ 4b2:	c3                   	ret    
+
+000004b3 <yield2>:
+SYSCALL(yield2)
+ 4b3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 4b8:	cd 40                	int    $0x40
+ 4ba:	c3                   	ret    
+ 4bb:	66 90                	xchg   %ax,%ax
+ 4bd:	66 90                	xchg   %ax,%ax
+ 4bf:	90                   	nop
+
+000004c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
+ 4c4:	56                   	push   %esi
+ 4c5:	53                   	push   %ebx
+ 4c6:	83 ec 3c             	sub    $0x3c,%esp
+ 4c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 4cc:	89 d1                	mov    %edx,%ecx
+{
+ 4ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 4d1:	85 d2                	test   %edx,%edx
+ 4d3:	0f 89 7f 00 00 00    	jns    558 <printint+0x98>
+ 4d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4dd:	74 79                	je     558 <printint+0x98>
+    neg = 1;
+ 4df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 4e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4e8:	31 db                	xor    %ebx,%ebx
+ 4ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4f0:	89 c8                	mov    %ecx,%eax
+ 4f2:	31 d2                	xor    %edx,%edx
+ 4f4:	89 cf                	mov    %ecx,%edi
+ 4f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4f9:	0f b6 92 18 09 00 00 	movzbl 0x918(%edx),%edx
+ 500:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 503:	89 d8                	mov    %ebx,%eax
+ 505:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 508:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 50b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 50e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 511:	76 dd                	jbe    4f0 <printint+0x30>
+  if(neg)
+ 513:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 516:	85 c9                	test   %ecx,%ecx
+ 518:	74 0c                	je     526 <printint+0x66>
+    buf[i++] = '-';
+ 51a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 51f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 521:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 526:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 529:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 52d:	eb 07                	jmp    536 <printint+0x76>
+ 52f:	90                   	nop
+ 530:	0f b6 13             	movzbl (%ebx),%edx
+ 533:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 536:	83 ec 04             	sub    $0x4,%esp
+ 539:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 53c:	6a 01                	push   $0x1
+ 53e:	56                   	push   %esi
+ 53f:	57                   	push   %edi
+ 540:	e8 ce fe ff ff       	call   413 <write>
+  while(--i >= 0)
+ 545:	83 c4 10             	add    $0x10,%esp
+ 548:	39 de                	cmp    %ebx,%esi
+ 54a:	75 e4                	jne    530 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 54c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 54f:	5b                   	pop    %ebx
+ 550:	5e                   	pop    %esi
+ 551:	5f                   	pop    %edi
+ 552:	5d                   	pop    %ebp
+ 553:	c3                   	ret    
+ 554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 558:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 55f:	eb 87                	jmp    4e8 <printint+0x28>
+ 561:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+
+00000570 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	56                   	push   %esi
+ 579:	53                   	push   %ebx
+ 57a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 57d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 580:	0f b6 1e             	movzbl (%esi),%ebx
+ 583:	84 db                	test   %bl,%bl
+ 585:	0f 84 b4 00 00 00    	je     63f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 58b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 58e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 591:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 594:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 596:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 599:	eb 33                	jmp    5ce <printf+0x5e>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+ 5a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 5a3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 5a8:	83 f8 25             	cmp    $0x25,%eax
+ 5ab:	74 17                	je     5c4 <printf+0x54>
+  write(fd, &c, 1);
+ 5ad:	83 ec 04             	sub    $0x4,%esp
+ 5b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5b3:	6a 01                	push   $0x1
+ 5b5:	57                   	push   %edi
+ 5b6:	ff 75 08             	pushl  0x8(%ebp)
+ 5b9:	e8 55 fe ff ff       	call   413 <write>
+ 5be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 5c1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5c4:	0f b6 1e             	movzbl (%esi),%ebx
+ 5c7:	83 c6 01             	add    $0x1,%esi
+ 5ca:	84 db                	test   %bl,%bl
+ 5cc:	74 71                	je     63f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 5ce:	0f be cb             	movsbl %bl,%ecx
+ 5d1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 5d4:	85 d2                	test   %edx,%edx
+ 5d6:	74 c8                	je     5a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 5d8:	83 fa 25             	cmp    $0x25,%edx
+ 5db:	75 e7                	jne    5c4 <printf+0x54>
+      if(c == 'd'){
+ 5dd:	83 f8 64             	cmp    $0x64,%eax
+ 5e0:	0f 84 9a 00 00 00    	je     680 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5ec:	83 f9 70             	cmp    $0x70,%ecx
+ 5ef:	74 5f                	je     650 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5f1:	83 f8 73             	cmp    $0x73,%eax
+ 5f4:	0f 84 d6 00 00 00    	je     6d0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5fa:	83 f8 63             	cmp    $0x63,%eax
+ 5fd:	0f 84 8d 00 00 00    	je     690 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 603:	83 f8 25             	cmp    $0x25,%eax
+ 606:	0f 84 b4 00 00 00    	je     6c0 <printf+0x150>
+  write(fd, &c, 1);
+ 60c:	83 ec 04             	sub    $0x4,%esp
+ 60f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 613:	6a 01                	push   $0x1
+ 615:	57                   	push   %edi
+ 616:	ff 75 08             	pushl  0x8(%ebp)
+ 619:	e8 f5 fd ff ff       	call   413 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 61e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 621:	83 c4 0c             	add    $0xc,%esp
+ 624:	6a 01                	push   $0x1
+ 626:	83 c6 01             	add    $0x1,%esi
+ 629:	57                   	push   %edi
+ 62a:	ff 75 08             	pushl  0x8(%ebp)
+ 62d:	e8 e1 fd ff ff       	call   413 <write>
+  for(i = 0; fmt[i]; i++){
+ 632:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 636:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 639:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 63b:	84 db                	test   %bl,%bl
+ 63d:	75 8f                	jne    5ce <printf+0x5e>
+    }
+  }
+}
+ 63f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 642:	5b                   	pop    %ebx
+ 643:	5e                   	pop    %esi
+ 644:	5f                   	pop    %edi
+ 645:	5d                   	pop    %ebp
+ 646:	c3                   	ret    
+ 647:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 658:	6a 00                	push   $0x0
+ 65a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 65d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 660:	8b 13                	mov    (%ebx),%edx
+ 662:	e8 59 fe ff ff       	call   4c0 <printint>
+        ap++;
+ 667:	89 d8                	mov    %ebx,%eax
+ 669:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 66c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 66e:	83 c0 04             	add    $0x4,%eax
+ 671:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 674:	e9 4b ff ff ff       	jmp    5c4 <printf+0x54>
+ 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 680:	83 ec 0c             	sub    $0xc,%esp
+ 683:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 688:	6a 01                	push   $0x1
+ 68a:	eb ce                	jmp    65a <printf+0xea>
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 690:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 693:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 696:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 698:	6a 01                	push   $0x1
+        ap++;
+ 69a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 69d:	57                   	push   %edi
+ 69e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 6a1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6a4:	e8 6a fd ff ff       	call   413 <write>
+        ap++;
+ 6a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 6ac:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6af:	31 d2                	xor    %edx,%edx
+ 6b1:	e9 0e ff ff ff       	jmp    5c4 <printf+0x54>
+ 6b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 6c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6c3:	83 ec 04             	sub    $0x4,%esp
+ 6c6:	e9 59 ff ff ff       	jmp    624 <printf+0xb4>
+ 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+        s = (char*)*ap;
+ 6d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6d3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 6d5:	83 c0 04             	add    $0x4,%eax
+ 6d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 6db:	85 db                	test   %ebx,%ebx
+ 6dd:	74 17                	je     6f6 <printf+0x186>
+        while(*s != 0){
+ 6df:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 6e2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 6e4:	84 c0                	test   %al,%al
+ 6e6:	0f 84 d8 fe ff ff    	je     5c4 <printf+0x54>
+ 6ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ef:	89 de                	mov    %ebx,%esi
+ 6f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f4:	eb 1a                	jmp    710 <printf+0x1a0>
+          s = "(null)";
+ 6f6:	bb 0f 09 00 00       	mov    $0x90f,%ebx
+        while(*s != 0){
+ 6fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6fe:	b8 28 00 00 00       	mov    $0x28,%eax
+ 703:	89 de                	mov    %ebx,%esi
+ 705:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+  write(fd, &c, 1);
+ 710:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 713:	83 c6 01             	add    $0x1,%esi
+ 716:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 719:	6a 01                	push   $0x1
+ 71b:	57                   	push   %edi
+ 71c:	53                   	push   %ebx
+ 71d:	e8 f1 fc ff ff       	call   413 <write>
+        while(*s != 0){
+ 722:	0f b6 06             	movzbl (%esi),%eax
+ 725:	83 c4 10             	add    $0x10,%esp
+ 728:	84 c0                	test   %al,%al
+ 72a:	75 e4                	jne    710 <printf+0x1a0>
+ 72c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 72f:	31 d2                	xor    %edx,%edx
+ 731:	e9 8e fe ff ff       	jmp    5c4 <printf+0x54>
+ 736:	66 90                	xchg   %ax,%ax
+ 738:	66 90                	xchg   %ax,%ax
+ 73a:	66 90                	xchg   %ax,%ax
+ 73c:	66 90                	xchg   %ax,%ax
+ 73e:	66 90                	xchg   %ax,%ax
+
+00000740 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 740:	f3 0f 1e fb          	endbr32 
+ 744:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 745:	a1 00 0c 00 00       	mov    0xc00,%eax
+{
+ 74a:	89 e5                	mov    %esp,%ebp
+ 74c:	57                   	push   %edi
+ 74d:	56                   	push   %esi
+ 74e:	53                   	push   %ebx
+ 74f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 752:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 754:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 757:	39 c8                	cmp    %ecx,%eax
+ 759:	73 15                	jae    770 <free+0x30>
+ 75b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 75f:	90                   	nop
+ 760:	39 d1                	cmp    %edx,%ecx
+ 762:	72 14                	jb     778 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 764:	39 d0                	cmp    %edx,%eax
+ 766:	73 10                	jae    778 <free+0x38>
+{
+ 768:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 76a:	8b 10                	mov    (%eax),%edx
+ 76c:	39 c8                	cmp    %ecx,%eax
+ 76e:	72 f0                	jb     760 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 770:	39 d0                	cmp    %edx,%eax
+ 772:	72 f4                	jb     768 <free+0x28>
+ 774:	39 d1                	cmp    %edx,%ecx
+ 776:	73 f0                	jae    768 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 778:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 77b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 77e:	39 fa                	cmp    %edi,%edx
+ 780:	74 1e                	je     7a0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 782:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 785:	8b 50 04             	mov    0x4(%eax),%edx
+ 788:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 78b:	39 f1                	cmp    %esi,%ecx
+ 78d:	74 28                	je     7b7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 78f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 791:	5b                   	pop    %ebx
+  freep = p;
+ 792:	a3 00 0c 00 00       	mov    %eax,0xc00
+}
+ 797:	5e                   	pop    %esi
+ 798:	5f                   	pop    %edi
+ 799:	5d                   	pop    %ebp
+ 79a:	c3                   	ret    
+ 79b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 79f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 7a0:	03 72 04             	add    0x4(%edx),%esi
+ 7a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7a6:	8b 10                	mov    (%eax),%edx
+ 7a8:	8b 12                	mov    (%edx),%edx
+ 7aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 7ad:	8b 50 04             	mov    0x4(%eax),%edx
+ 7b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7b3:	39 f1                	cmp    %esi,%ecx
+ 7b5:	75 d8                	jne    78f <free+0x4f>
+    p->s.size += bp->s.size;
+ 7b7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 7ba:	a3 00 0c 00 00       	mov    %eax,0xc00
+    p->s.size += bp->s.size;
+ 7bf:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 7c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7c5:	89 10                	mov    %edx,(%eax)
+}
+ 7c7:	5b                   	pop    %ebx
+ 7c8:	5e                   	pop    %esi
+ 7c9:	5f                   	pop    %edi
+ 7ca:	5d                   	pop    %ebp
+ 7cb:	c3                   	ret    
+ 7cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000007d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7d0:	f3 0f 1e fb          	endbr32 
+ 7d4:	55                   	push   %ebp
+ 7d5:	89 e5                	mov    %esp,%ebp
+ 7d7:	57                   	push   %edi
+ 7d8:	56                   	push   %esi
+ 7d9:	53                   	push   %ebx
+ 7da:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7e0:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7e6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7e9:	c1 ee 03             	shr    $0x3,%esi
+ 7ec:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 7ef:	85 ff                	test   %edi,%edi
+ 7f1:	0f 84 a9 00 00 00    	je     8a0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 7f9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7fc:	39 f1                	cmp    %esi,%ecx
+ 7fe:	73 6d                	jae    86d <malloc+0x9d>
+ 800:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 806:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 80b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 80e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 815:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 818:	eb 17                	jmp    831 <malloc+0x61>
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 820:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 822:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 825:	39 f1                	cmp    %esi,%ecx
+ 827:	73 4f                	jae    878 <malloc+0xa8>
+ 829:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
+ 82f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 831:	39 c7                	cmp    %eax,%edi
+ 833:	75 eb                	jne    820 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 835:	83 ec 0c             	sub    $0xc,%esp
+ 838:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 83b:	e8 3b fc ff ff       	call   47b <sbrk>
+  if(p == (char*)-1)
+ 840:	83 c4 10             	add    $0x10,%esp
+ 843:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 846:	74 1b                	je     863 <malloc+0x93>
+  hp->s.size = nu;
+ 848:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 84b:	83 ec 0c             	sub    $0xc,%esp
+ 84e:	83 c0 08             	add    $0x8,%eax
+ 851:	50                   	push   %eax
+ 852:	e8 e9 fe ff ff       	call   740 <free>
+  return freep;
+ 857:	a1 00 0c 00 00       	mov    0xc00,%eax
+      if((p = morecore(nunits)) == 0)
+ 85c:	83 c4 10             	add    $0x10,%esp
+ 85f:	85 c0                	test   %eax,%eax
+ 861:	75 bd                	jne    820 <malloc+0x50>
+        return 0;
+  }
+}
+ 863:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 866:	31 c0                	xor    %eax,%eax
+}
+ 868:	5b                   	pop    %ebx
+ 869:	5e                   	pop    %esi
+ 86a:	5f                   	pop    %edi
+ 86b:	5d                   	pop    %ebp
+ 86c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 86d:	89 c2                	mov    %eax,%edx
+ 86f:	89 f8                	mov    %edi,%eax
+ 871:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 878:	39 ce                	cmp    %ecx,%esi
+ 87a:	74 54                	je     8d0 <malloc+0x100>
+        p->s.size -= nunits;
+ 87c:	29 f1                	sub    %esi,%ecx
+ 87e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 881:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 884:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 887:	a3 00 0c 00 00       	mov    %eax,0xc00
+}
+ 88c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 88f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 892:	5b                   	pop    %ebx
+ 893:	5e                   	pop    %esi
+ 894:	5f                   	pop    %edi
+ 895:	5d                   	pop    %ebp
+ 896:	c3                   	ret    
+ 897:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 89e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 8a0:	c7 05 00 0c 00 00 04 	movl   $0xc04,0xc00
+ 8a7:	0c 00 00 
+    base.s.size = 0;
+ 8aa:	bf 04 0c 00 00       	mov    $0xc04,%edi
+    base.s.ptr = freep = prevp = &base;
+ 8af:	c7 05 04 0c 00 00 04 	movl   $0xc04,0xc04
+ 8b6:	0c 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8b9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 8bb:	c7 05 08 0c 00 00 00 	movl   $0x0,0xc08
+ 8c2:	00 00 00 
+    if(p->s.size >= nunits){
+ 8c5:	e9 36 ff ff ff       	jmp    800 <malloc+0x30>
+ 8ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8d0:	8b 0a                	mov    (%edx),%ecx
+ 8d2:	89 08                	mov    %ecx,(%eax)
+ 8d4:	eb b1                	jmp    887 <malloc+0xb7>
diff -ruN xv6-public/wc.d xv6-public_mine/wc.d
--- xv6-public/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/wc.d	2021-09-30 23:42:31.122766925 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/wc.o and xv6-public_mine/wc.o differ
diff -ruN xv6-public/wc.sym xv6-public_mine/wc.sym
--- xv6-public/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/wc.sym	2021-09-30 23:42:31.370833840 +0530
@@ -0,0 +1,64 @@
+00000000 .text
+000008d8 .rodata
+0000092c .eh_frame
+00000c00 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+000004c0 printint
+00000918 digits.1101
+00000000 umalloc.c
+00000c00 freep
+00000c04 base
+00000190 strcpy
+000004ab set_prio
+00000570 printf
+000003c0 memmove
+0000043b mknod
+000002b0 gets
+00000473 getpid
+000007d0 malloc
+00000483 sleep
+000004a3 wait2
+00000403 pipe
+00000413 write
+0000049b history
+0000044b fstat
+00000423 kill
+00000463 chdir
+0000042b exec
+000003fb wait
+0000040b read
+00000443 unlink
+000000a0 wc
+000003eb fork
+0000047b sbrk
+0000048b uptime
+00000c00 __bss_start
+00000250 memset
+00000000 main
+000001c0 strcmp
+0000046b dup
+00000c20 buf
+00000330 stat
+00000c00 _edata
+00000e20 _end
+00000453 link
+000003f3 exit
+00000380 atoi
+000004b3 yield2
+00000493 draw
+00000210 strlen
+00000433 open
+00000270 strchr
+0000045b mkdir
+0000041b close
+00000740 free
Binary files xv6-public/xv6.img and xv6-public_mine/xv6.img differ
Binary files xv6-public/_zombie and xv6-public_mine/_zombie differ
diff -ruN xv6-public/zombie.asm xv6-public_mine/zombie.asm
--- xv6-public/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/zombie.asm	2021-09-30 23:42:31.958992498 +0530
@@ -0,0 +1,1191 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  15:	e8 71 02 00 00       	call   28b <fork>
+  1a:	85 c0                	test   %eax,%eax
+  1c:	7e 0d                	jle    2b <main+0x2b>
+    sleep(5);  // Let child exit before parent.
+  1e:	83 ec 0c             	sub    $0xc,%esp
+  21:	6a 05                	push   $0x5
+  23:	e8 fb 02 00 00       	call   323 <sleep>
+  28:	83 c4 10             	add    $0x10,%esp
+  exit();
+  2b:	e8 63 02 00 00       	call   293 <exit>
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	f3 0f 1e fb          	endbr32 
+  34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  35:	31 c0                	xor    %eax,%eax
+{
+  37:	89 e5                	mov    %esp,%ebp
+  39:	53                   	push   %ebx
+  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	89 c8                	mov    %ecx,%eax
+  50:	5b                   	pop    %ebx
+  51:	5d                   	pop    %ebp
+  52:	c3                   	ret    
+  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	53                   	push   %ebx
+  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  6e:	0f b6 01             	movzbl (%ecx),%eax
+  71:	0f b6 1a             	movzbl (%edx),%ebx
+  74:	84 c0                	test   %al,%al
+  76:	75 19                	jne    91 <strcmp+0x31>
+  78:	eb 26                	jmp    a0 <strcmp+0x40>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  84:	83 c1 01             	add    $0x1,%ecx
+  87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  8a:	0f b6 1a             	movzbl (%edx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	38 d8                	cmp    %bl,%al
+  93:	74 eb                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  95:	29 d8                	sub    %ebx,%eax
+}
+  97:	5b                   	pop    %ebx
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ba:	80 3a 00             	cmpb   $0x0,(%edx)
+  bd:	74 21                	je     e0 <strlen+0x30>
+  bf:	31 c0                	xor    %eax,%eax
+  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c8:	83 c0 01             	add    $0x1,%eax
+  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  cf:	89 c1                	mov    %eax,%ecx
+  d1:	75 f5                	jne    c8 <strlen+0x18>
+    ;
+  return n;
+}
+  d3:	89 c8                	mov    %ecx,%eax
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	57                   	push   %edi
+  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 101:	89 d7                	mov    %edx,%edi
+ 103:	fc                   	cld    
+ 104:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 106:	89 d0                	mov    %edx,%eax
+ 108:	5f                   	pop    %edi
+ 109:	5d                   	pop    %ebp
+ 10a:	c3                   	ret    
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11e:	0f b6 10             	movzbl (%eax),%edx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	75 16                	jne    13b <strchr+0x2b>
+ 125:	eb 21                	jmp    148 <strchr+0x38>
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+ 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 134:	83 c0 01             	add    $0x1,%eax
+ 137:	84 d2                	test   %dl,%dl
+ 139:	74 0d                	je     148 <strchr+0x38>
+    if(*s == c)
+ 13b:	38 d1                	cmp    %dl,%cl
+ 13d:	75 f1                	jne    130 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 13f:	5d                   	pop    %ebp
+ 140:	c3                   	ret    
+ 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 148:	31 c0                	xor    %eax,%eax
+}
+ 14a:	5d                   	pop    %ebp
+ 14b:	c3                   	ret    
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 159:	31 f6                	xor    %esi,%esi
+{
+ 15b:	53                   	push   %ebx
+ 15c:	89 f3                	mov    %esi,%ebx
+ 15e:	83 ec 1c             	sub    $0x1c,%esp
+ 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 164:	eb 33                	jmp    199 <gets+0x49>
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 176:	6a 01                	push   $0x1
+ 178:	50                   	push   %eax
+ 179:	6a 00                	push   $0x0
+ 17b:	e8 2b 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 180:	83 c4 10             	add    $0x10,%esp
+ 183:	85 c0                	test   %eax,%eax
+ 185:	7e 1c                	jle    1a3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 18b:	83 c7 01             	add    $0x1,%edi
+ 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 191:	3c 0a                	cmp    $0xa,%al
+ 193:	74 23                	je     1b8 <gets+0x68>
+ 195:	3c 0d                	cmp    $0xd,%al
+ 197:	74 1f                	je     1b8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	89 fe                	mov    %edi,%esi
+ 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a1:	7c cd                	jl     170 <gets+0x20>
+ 1a3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1a8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ae:	5b                   	pop    %ebx
+ 1af:	5e                   	pop    %esi
+ 1b0:	5f                   	pop    %edi
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+ 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1be:	01 de                	add    %ebx,%esi
+ 1c0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1c2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c8:	5b                   	pop    %ebx
+ 1c9:	5e                   	pop    %esi
+ 1ca:	5f                   	pop    %edi
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	56                   	push   %esi
+ 1d8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	6a 00                	push   $0x0
+ 1de:	ff 75 08             	pushl  0x8(%ebp)
+ 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e6:	83 c4 10             	add    $0x10,%esp
+ 1e9:	85 c0                	test   %eax,%eax
+ 1eb:	78 2b                	js     218 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 1ed:	83 ec 08             	sub    $0x8,%esp
+ 1f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 1f3:	89 c3                	mov    %eax,%ebx
+ 1f5:	50                   	push   %eax
+ 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1fb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fe:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 200:	e8 b6 00 00 00       	call   2bb <close>
+  return r;
+ 205:	83 c4 10             	add    $0x10,%esp
+}
+ 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20b:	89 f0                	mov    %esi,%eax
+ 20d:	5b                   	pop    %ebx
+ 20e:	5e                   	pop    %esi
+ 20f:	5d                   	pop    %ebp
+ 210:	c3                   	ret    
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 21d:	eb e9                	jmp    208 <stat+0x38>
+ 21f:	90                   	nop
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	53                   	push   %ebx
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22b:	0f be 02             	movsbl (%edx),%eax
+ 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 231:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 239:	77 1a                	ja     255 <atoi+0x35>
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	89 c8                	mov    %ecx,%eax
+ 257:	5b                   	pop    %ebx
+ 258:	5d                   	pop    %ebp
+ 259:	c3                   	ret    
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26e:	56                   	push   %esi
+ 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7e 0f                	jle    285 <memmove+0x25>
+ 276:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 278:	89 d7                	mov    %edx,%edi
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <draw>:
+SYSCALL(draw)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <history>:
+SYSCALL(history)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <wait2>:
+SYSCALL(wait2)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <set_prio>:
+SYSCALL(set_prio)
+ 34b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <yield2>:
+SYSCALL(yield2)
+ 353:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
+ 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 36c:	89 d1                	mov    %edx,%ecx
+{
+ 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 371:	85 d2                	test   %edx,%edx
+ 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
+ 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37d:	74 79                	je     3f8 <printint+0x98>
+    neg = 1;
+ 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 386:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 388:	31 db                	xor    %ebx,%ebx
+ 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 390:	89 c8                	mov    %ecx,%eax
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	89 cf                	mov    %ecx,%edi
+ 396:	f7 75 c4             	divl   -0x3c(%ebp)
+ 399:	0f b6 92 80 07 00 00 	movzbl 0x780(%edx),%edx
+ 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3a3:	89 d8                	mov    %ebx,%eax
+ 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3b1:	76 dd                	jbe    390 <printint+0x30>
+  if(neg)
+ 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3b6:	85 c9                	test   %ecx,%ecx
+ 3b8:	74 0c                	je     3c6 <printint+0x66>
+    buf[i++] = '-';
+ 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3cd:	eb 07                	jmp    3d6 <printint+0x76>
+ 3cf:	90                   	nop
+ 3d0:	0f b6 13             	movzbl (%ebx),%edx
+ 3d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3d6:	83 ec 04             	sub    $0x4,%esp
+ 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3dc:	6a 01                	push   $0x1
+ 3de:	56                   	push   %esi
+ 3df:	57                   	push   %edi
+ 3e0:	e8 ce fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ff:	eb 87                	jmp    388 <printint+0x28>
+ 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	f3 0f 1e fb          	endbr32 
+ 414:	55                   	push   %ebp
+ 415:	89 e5                	mov    %esp,%ebp
+ 417:	57                   	push   %edi
+ 418:	56                   	push   %esi
+ 419:	53                   	push   %ebx
+ 41a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 41d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 420:	0f b6 1e             	movzbl (%esi),%ebx
+ 423:	84 db                	test   %bl,%bl
+ 425:	0f 84 b4 00 00 00    	je     4df <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 42b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 42e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 431:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 434:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 436:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 439:	eb 33                	jmp    46e <printf+0x5e>
+ 43b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+ 440:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 443:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	74 17                	je     464 <printf+0x54>
+  write(fd, &c, 1);
+ 44d:	83 ec 04             	sub    $0x4,%esp
+ 450:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 453:	6a 01                	push   $0x1
+ 455:	57                   	push   %edi
+ 456:	ff 75 08             	pushl  0x8(%ebp)
+ 459:	e8 55 fe ff ff       	call   2b3 <write>
+ 45e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 461:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 464:	0f b6 1e             	movzbl (%esi),%ebx
+ 467:	83 c6 01             	add    $0x1,%esi
+ 46a:	84 db                	test   %bl,%bl
+ 46c:	74 71                	je     4df <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 46e:	0f be cb             	movsbl %bl,%ecx
+ 471:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 474:	85 d2                	test   %edx,%edx
+ 476:	74 c8                	je     440 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 478:	83 fa 25             	cmp    $0x25,%edx
+ 47b:	75 e7                	jne    464 <printf+0x54>
+      if(c == 'd'){
+ 47d:	83 f8 64             	cmp    $0x64,%eax
+ 480:	0f 84 9a 00 00 00    	je     520 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 486:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 48c:	83 f9 70             	cmp    $0x70,%ecx
+ 48f:	74 5f                	je     4f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 491:	83 f8 73             	cmp    $0x73,%eax
+ 494:	0f 84 d6 00 00 00    	je     570 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 49a:	83 f8 63             	cmp    $0x63,%eax
+ 49d:	0f 84 8d 00 00 00    	je     530 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4a3:	83 f8 25             	cmp    $0x25,%eax
+ 4a6:	0f 84 b4 00 00 00    	je     560 <printf+0x150>
+  write(fd, &c, 1);
+ 4ac:	83 ec 04             	sub    $0x4,%esp
+ 4af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	ff 75 08             	pushl  0x8(%ebp)
+ 4b9:	e8 f5 fd ff ff       	call   2b3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4be:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4c1:	83 c4 0c             	add    $0xc,%esp
+ 4c4:	6a 01                	push   $0x1
+ 4c6:	83 c6 01             	add    $0x1,%esi
+ 4c9:	57                   	push   %edi
+ 4ca:	ff 75 08             	pushl  0x8(%ebp)
+ 4cd:	e8 e1 fd ff ff       	call   2b3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4d6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4d9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4db:	84 db                	test   %bl,%bl
+ 4dd:	75 8f                	jne    46e <printf+0x5e>
+    }
+  }
+}
+ 4df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4e2:	5b                   	pop    %ebx
+ 4e3:	5e                   	pop    %esi
+ 4e4:	5f                   	pop    %edi
+ 4e5:	5d                   	pop    %ebp
+ 4e6:	c3                   	ret    
+ 4e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 500:	8b 13                	mov    (%ebx),%edx
+ 502:	e8 59 fe ff ff       	call   360 <printint>
+        ap++;
+ 507:	89 d8                	mov    %ebx,%eax
+ 509:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 50e:	83 c0 04             	add    $0x4,%eax
+ 511:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 514:	e9 4b ff ff ff       	jmp    464 <printf+0x54>
+ 519:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 528:	6a 01                	push   $0x1
+ 52a:	eb ce                	jmp    4fa <printf+0xea>
+ 52c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 530:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 533:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 536:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 538:	6a 01                	push   $0x1
+        ap++;
+ 53a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 53d:	57                   	push   %edi
+ 53e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 541:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 544:	e8 6a fd ff ff       	call   2b3 <write>
+        ap++;
+ 549:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 54c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54f:	31 d2                	xor    %edx,%edx
+ 551:	e9 0e ff ff ff       	jmp    464 <printf+0x54>
+ 556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 560:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+ 566:	e9 59 ff ff ff       	jmp    4c4 <printf+0xb4>
+ 56b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+        s = (char*)*ap;
+ 570:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 573:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 575:	83 c0 04             	add    $0x4,%eax
+ 578:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 57b:	85 db                	test   %ebx,%ebx
+ 57d:	74 17                	je     596 <printf+0x186>
+        while(*s != 0){
+ 57f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 582:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 584:	84 c0                	test   %al,%al
+ 586:	0f 84 d8 fe ff ff    	je     464 <printf+0x54>
+ 58c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 58f:	89 de                	mov    %ebx,%esi
+ 591:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 594:	eb 1a                	jmp    5b0 <printf+0x1a0>
+          s = "(null)";
+ 596:	bb 78 07 00 00       	mov    $0x778,%ebx
+        while(*s != 0){
+ 59b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 59e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5a3:	89 de                	mov    %ebx,%esi
+ 5a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+  write(fd, &c, 1);
+ 5b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5b3:	83 c6 01             	add    $0x1,%esi
+ 5b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5b9:	6a 01                	push   $0x1
+ 5bb:	57                   	push   %edi
+ 5bc:	53                   	push   %ebx
+ 5bd:	e8 f1 fc ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 5c2:	0f b6 06             	movzbl (%esi),%eax
+ 5c5:	83 c4 10             	add    $0x10,%esp
+ 5c8:	84 c0                	test   %al,%al
+ 5ca:	75 e4                	jne    5b0 <printf+0x1a0>
+ 5cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5cf:	31 d2                	xor    %edx,%edx
+ 5d1:	e9 8e fe ff ff       	jmp    464 <printf+0x54>
+ 5d6:	66 90                	xchg   %ax,%ax
+ 5d8:	66 90                	xchg   %ax,%ax
+ 5da:	66 90                	xchg   %ax,%ax
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e0:	f3 0f 1e fb          	endbr32 
+ 5e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e5:	a1 28 0a 00 00       	mov    0xa28,%eax
+{
+ 5ea:	89 e5                	mov    %esp,%ebp
+ 5ec:	57                   	push   %edi
+ 5ed:	56                   	push   %esi
+ 5ee:	53                   	push   %ebx
+ 5ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 5f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f7:	39 c8                	cmp    %ecx,%eax
+ 5f9:	73 15                	jae    610 <free+0x30>
+ 5fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ff:	90                   	nop
+ 600:	39 d1                	cmp    %edx,%ecx
+ 602:	72 14                	jb     618 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 604:	39 d0                	cmp    %edx,%eax
+ 606:	73 10                	jae    618 <free+0x38>
+{
+ 608:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 60a:	8b 10                	mov    (%eax),%edx
+ 60c:	39 c8                	cmp    %ecx,%eax
+ 60e:	72 f0                	jb     600 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 610:	39 d0                	cmp    %edx,%eax
+ 612:	72 f4                	jb     608 <free+0x28>
+ 614:	39 d1                	cmp    %edx,%ecx
+ 616:	73 f0                	jae    608 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 fa                	cmp    %edi,%edx
+ 620:	74 1e                	je     640 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 622:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 625:	8b 50 04             	mov    0x4(%eax),%edx
+ 628:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 28                	je     657 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 62f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 631:	5b                   	pop    %ebx
+  freep = p;
+ 632:	a3 28 0a 00 00       	mov    %eax,0xa28
+}
+ 637:	5e                   	pop    %esi
+ 638:	5f                   	pop    %edi
+ 639:	5d                   	pop    %ebp
+ 63a:	c3                   	ret    
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 640:	03 72 04             	add    0x4(%edx),%esi
+ 643:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 646:	8b 10                	mov    (%eax),%edx
+ 648:	8b 12                	mov    (%edx),%edx
+ 64a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 64d:	8b 50 04             	mov    0x4(%eax),%edx
+ 650:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 653:	39 f1                	cmp    %esi,%ecx
+ 655:	75 d8                	jne    62f <free+0x4f>
+    p->s.size += bp->s.size;
+ 657:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 65a:	a3 28 0a 00 00       	mov    %eax,0xa28
+    p->s.size += bp->s.size;
+ 65f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 662:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 665:	89 10                	mov    %edx,(%eax)
+}
+ 667:	5b                   	pop    %ebx
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000670 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 670:	f3 0f 1e fb          	endbr32 
+ 674:	55                   	push   %ebp
+ 675:	89 e5                	mov    %esp,%ebp
+ 677:	57                   	push   %edi
+ 678:	56                   	push   %esi
+ 679:	53                   	push   %ebx
+ 67a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 67d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 680:	8b 3d 28 0a 00 00    	mov    0xa28,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 686:	8d 70 07             	lea    0x7(%eax),%esi
+ 689:	c1 ee 03             	shr    $0x3,%esi
+ 68c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 68f:	85 ff                	test   %edi,%edi
+ 691:	0f 84 a9 00 00 00    	je     740 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 697:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 699:	8b 48 04             	mov    0x4(%eax),%ecx
+ 69c:	39 f1                	cmp    %esi,%ecx
+ 69e:	73 6d                	jae    70d <malloc+0x9d>
+ 6a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6b8:	eb 17                	jmp    6d1 <malloc+0x61>
+ 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6c5:	39 f1                	cmp    %esi,%ecx
+ 6c7:	73 4f                	jae    718 <malloc+0xa8>
+ 6c9:	8b 3d 28 0a 00 00    	mov    0xa28,%edi
+ 6cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	39 c7                	cmp    %eax,%edi
+ 6d3:	75 eb                	jne    6c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6d5:	83 ec 0c             	sub    $0xc,%esp
+ 6d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6db:	e8 3b fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6e0:	83 c4 10             	add    $0x10,%esp
+ 6e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6e6:	74 1b                	je     703 <malloc+0x93>
+  hp->s.size = nu;
+ 6e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6eb:	83 ec 0c             	sub    $0xc,%esp
+ 6ee:	83 c0 08             	add    $0x8,%eax
+ 6f1:	50                   	push   %eax
+ 6f2:	e8 e9 fe ff ff       	call   5e0 <free>
+  return freep;
+ 6f7:	a1 28 0a 00 00       	mov    0xa28,%eax
+      if((p = morecore(nunits)) == 0)
+ 6fc:	83 c4 10             	add    $0x10,%esp
+ 6ff:	85 c0                	test   %eax,%eax
+ 701:	75 bd                	jne    6c0 <malloc+0x50>
+        return 0;
+  }
+}
+ 703:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 706:	31 c0                	xor    %eax,%eax
+}
+ 708:	5b                   	pop    %ebx
+ 709:	5e                   	pop    %esi
+ 70a:	5f                   	pop    %edi
+ 70b:	5d                   	pop    %ebp
+ 70c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 70d:	89 c2                	mov    %eax,%edx
+ 70f:	89 f8                	mov    %edi,%eax
+ 711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 718:	39 ce                	cmp    %ecx,%esi
+ 71a:	74 54                	je     770 <malloc+0x100>
+        p->s.size -= nunits;
+ 71c:	29 f1                	sub    %esi,%ecx
+ 71e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 721:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 724:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 727:	a3 28 0a 00 00       	mov    %eax,0xa28
+}
+ 72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 72f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 732:	5b                   	pop    %ebx
+ 733:	5e                   	pop    %esi
+ 734:	5f                   	pop    %edi
+ 735:	5d                   	pop    %ebp
+ 736:	c3                   	ret    
+ 737:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 28 0a 00 00 2c 	movl   $0xa2c,0xa28
+ 747:	0a 00 00 
+    base.s.size = 0;
+ 74a:	bf 2c 0a 00 00       	mov    $0xa2c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 74f:	c7 05 2c 0a 00 00 2c 	movl   $0xa2c,0xa2c
+ 756:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 759:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 75b:	c7 05 30 0a 00 00 00 	movl   $0x0,0xa30
+ 762:	00 00 00 
+    if(p->s.size >= nunits){
+ 765:	e9 36 ff ff ff       	jmp    6a0 <malloc+0x30>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 0a                	mov    (%edx),%ecx
+ 772:	89 08                	mov    %ecx,(%eax)
+ 774:	eb b1                	jmp    727 <malloc+0xb7>
diff -ruN xv6-public/zombie.d xv6-public_mine/zombie.d
--- xv6-public/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/zombie.d	2021-09-30 23:42:31.714926660 +0530
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/zombie.o and xv6-public_mine/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-public_mine/zombie.sym
--- xv6-public/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_mine/zombie.sym	2021-09-30 23:42:31.978997893 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000778 .rodata
+00000794 .eh_frame
+00000a28 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+00000780 digits.1101
+00000000 umalloc.c
+00000a28 freep
+00000a2c base
+00000030 strcpy
+0000034b set_prio
+00000410 printf
+00000260 memmove
+000002db mknod
+00000150 gets
+00000313 getpid
+00000670 malloc
+00000323 sleep
+00000343 wait2
+000002a3 pipe
+000002b3 write
+0000033b history
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000a28 __bss_start
+000000f0 memset
+00000000 main
+00000060 strcmp
+0000030b dup
+000001d0 stat
+00000a28 _edata
+00000a34 _end
+000002f3 link
+00000293 exit
+00000220 atoi
+00000353 yield2
+00000333 draw
+000000b0 strlen
+000002d3 open
+00000110 strchr
+000002fb mkdir
+000002bb close
+000005e0 free
