diff -ruN xv6-public/ASCII_image.h xv6-public_task_1/ASCII_image.h
--- xv6-public/ASCII_image.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ASCII_image.h	2021-08-19 18:27:11.151917000 +0530
@@ -0,0 +1,31 @@
+// define ASCII images here
+#define wolfi "               \t\t\t,ood8888booo,\n\
+                              ,od8           8bo,\n\
+                           ,od                   bo,\n\
+                         ,d8                       8b,\n\
+                        ,o                           o,    ,a8b\n\
+                       ,8                             8,,od8  8\n\
+                       8'                             d8'     8b\n\
+                       8                           d8'ba     aP'\n\
+                       Y,                       o8'         aP'\n\
+                        Y8,                      YaaaP'    ba\n\
+                         Y8o                   Y8'         88\n\
+                          `Y8               ,8\"           `P\n\
+                            Y8o        ,d8P'              ba\n\
+                       ooood8888888P\"\"\"'                  P'\n\
+                    ,od                                  8\n\
+                 ,dP     o88o                           o'\n\
+                ,dP          8                          8\n\
+               ,d'   oo       8                       ,8\n\
+               $    d$\"8      8           Y    Y  o   8\n\
+              d    d  d8    od  \"\"boooooooob   d\"\" 8   8\n\
+              $    8  d   ood' ,   8        b  8   '8  b\n\
+              $   $  8  8     d  d8        `b  d    '8  b\n\
+               $  $ 8   b    Y  d8          8 ,P     '8  b\n\
+               `$$  Yb  b     8b 8b         8 8,      '8  o,\n\
+                    `Y  b      8o  $$o      d  b        b   $o\n\
+                     8   '$     8$,,$\"      $   $o      '$o$$\n\
+                      $o$$P\"                 $$o$\n\n"
+
+#define hello "this is woking.. need to find a new ascii file."
+
diff -ruN xv6-public/bio.d xv6-public_task_1/bio.d
--- xv6-public/bio.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/bio.d	2021-09-15 20:34:52.932380000 +0530
@@ -0,0 +1,2 @@
+bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/bio.o and xv6-public_task_1/bio.o differ
diff -ruN xv6-public/bootasm.d xv6-public_task_1/bootasm.d
--- xv6-public/bootasm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/bootasm.d	2021-09-15 20:34:52.808380000 +0530
@@ -0,0 +1 @@
+bootasm.o: bootasm.S asm.h memlayout.h mmu.h
Binary files xv6-public/bootasm.o and xv6-public_task_1/bootasm.o differ
Binary files xv6-public/bootblock and xv6-public_task_1/bootblock differ
diff -ruN xv6-public/bootblock.asm xv6-public_task_1/bootblock.asm
--- xv6-public/bootblock.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/bootblock.asm	2021-09-15 20:34:52.820380000 +0530
@@ -0,0 +1,361 @@
+
+bootblock.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007c00 <start>:
+# with %cs=0 %ip=7c00.
+
+.code16                       # Assemble for 16-bit mode
+.globl start
+start:
+  cli                         # BIOS enabled interrupts; disable
+    7c00:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax             # Set %ax to zero
+    7c01:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds             # -> Data Segment
+    7c03:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es             # -> Extra Segment
+    7c05:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss             # -> Stack Segment
+    7c07:	8e d0                	mov    %eax,%ss
+
+00007c09 <seta20.1>:
+
+  # Physical address line A20 is tied to zero so that the first PCs 
+  # with 2 MB would run software that assumed 1 MB.  Undo that.
+seta20.1:
+  inb     $0x64,%al               # Wait for not busy
+    7c09:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c0b:	a8 02                	test   $0x2,%al
+  jnz     seta20.1
+    7c0d:	75 fa                	jne    7c09 <seta20.1>
+
+  movb    $0xd1,%al               # 0xd1 -> port 0x64
+    7c0f:	b0 d1                	mov    $0xd1,%al
+  outb    %al,$0x64
+    7c11:	e6 64                	out    %al,$0x64
+
+00007c13 <seta20.2>:
+
+seta20.2:
+  inb     $0x64,%al               # Wait for not busy
+    7c13:	e4 64                	in     $0x64,%al
+  testb   $0x2,%al
+    7c15:	a8 02                	test   $0x2,%al
+  jnz     seta20.2
+    7c17:	75 fa                	jne    7c13 <seta20.2>
+
+  movb    $0xdf,%al               # 0xdf -> port 0x60
+    7c19:	b0 df                	mov    $0xdf,%al
+  outb    %al,$0x60
+    7c1b:	e6 60                	out    %al,$0x60
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7c1d:	0f 01 16             	lgdtl  (%esi)
+    7c20:	78 7c                	js     7c9e <readsect+0xe>
+  movl    %cr0, %eax
+    7c22:	0f 20 c0             	mov    %cr0,%eax
+  orl     $CR0_PE, %eax
+    7c25:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7c29:	0f 22 c0             	mov    %eax,%cr0
+
+//PAGEBREAK!
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmp    $(SEG_KCODE<<3), $start32
+    7c2c:	ea                   	.byte 0xea
+    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
+
+00007c31 <start32>:
+
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7c31:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7c35:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7c37:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7c39:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    7c3b:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    7c3f:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7c41:	8e e8                	mov    %eax,%gs
+
+  # Set up the stack pointer and call into C.
+  movl    $start, %esp
+    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
+  call    bootmain
+    7c48:	e8 fc 00 00 00       	call   7d49 <bootmain>
+
+  # If bootmain returns (it shouldn't), trigger a Bochs
+  # breakpoint if running under Bochs, then loop.
+  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
+    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    7c51:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7c54:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
+    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7c5a:	66 ef                	out    %ax,(%dx)
+
+00007c5c <spin>:
+spin:
+  jmp     spin
+    7c5c:	eb fe                	jmp    7c5c <spin>
+    7c5e:	66 90                	xchg   %ax,%ax
+
+00007c60 <gdt>:
+	...
+    7c68:	ff                   	(bad)  
+    7c69:	ff 00                	incl   (%eax)
+    7c6b:	00 00                	add    %al,(%eax)
+    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7c74:	00                   	.byte 0x0
+    7c75:	92                   	xchg   %eax,%edx
+    7c76:	cf                   	iret   
+	...
+
+00007c78 <gdtdesc>:
+    7c78:	17                   	pop    %ss
+    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
+	...
+
+00007c7e <waitdisk>:
+  entry();
+}
+
+void
+waitdisk(void)
+{
+    7c7e:	f3 0f 1e fb          	endbr32 
+static inline uchar
+inb(ushort port)
+{
+  uchar data;
+
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+    7c82:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7c87:	ec                   	in     (%dx),%al
+  // Wait for disk ready.
+  while((inb(0x1F7) & 0xC0) != 0x40)
+    7c88:	83 e0 c0             	and    $0xffffffc0,%eax
+    7c8b:	3c 40                	cmp    $0x40,%al
+    7c8d:	75 f8                	jne    7c87 <waitdisk+0x9>
+    ;
+}
+    7c8f:	c3                   	ret    
+
+00007c90 <readsect>:
+
+// Read a single sector at offset into dst.
+void
+readsect(void *dst, uint offset)
+{
+    7c90:	f3 0f 1e fb          	endbr32 
+    7c94:	55                   	push   %ebp
+    7c95:	89 e5                	mov    %esp,%ebp
+    7c97:	57                   	push   %edi
+    7c98:	53                   	push   %ebx
+    7c99:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  // Issue command.
+  waitdisk();
+    7c9c:	e8 dd ff ff ff       	call   7c7e <waitdisk>
+}
+
+static inline void
+outb(ushort port, uchar data)
+{
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+    7ca1:	b8 01 00 00 00       	mov    $0x1,%eax
+    7ca6:	ba f2 01 00 00       	mov    $0x1f2,%edx
+    7cab:	ee                   	out    %al,(%dx)
+    7cac:	ba f3 01 00 00       	mov    $0x1f3,%edx
+    7cb1:	89 d8                	mov    %ebx,%eax
+    7cb3:	ee                   	out    %al,(%dx)
+  outb(0x1F2, 1);   // count = 1
+  outb(0x1F3, offset);
+  outb(0x1F4, offset >> 8);
+    7cb4:	89 d8                	mov    %ebx,%eax
+    7cb6:	c1 e8 08             	shr    $0x8,%eax
+    7cb9:	ba f4 01 00 00       	mov    $0x1f4,%edx
+    7cbe:	ee                   	out    %al,(%dx)
+  outb(0x1F5, offset >> 16);
+    7cbf:	89 d8                	mov    %ebx,%eax
+    7cc1:	c1 e8 10             	shr    $0x10,%eax
+    7cc4:	ba f5 01 00 00       	mov    $0x1f5,%edx
+    7cc9:	ee                   	out    %al,(%dx)
+  outb(0x1F6, (offset >> 24) | 0xE0);
+    7cca:	89 d8                	mov    %ebx,%eax
+    7ccc:	c1 e8 18             	shr    $0x18,%eax
+    7ccf:	83 c8 e0             	or     $0xffffffe0,%eax
+    7cd2:	ba f6 01 00 00       	mov    $0x1f6,%edx
+    7cd7:	ee                   	out    %al,(%dx)
+    7cd8:	b8 20 00 00 00       	mov    $0x20,%eax
+    7cdd:	ba f7 01 00 00       	mov    $0x1f7,%edx
+    7ce2:	ee                   	out    %al,(%dx)
+  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
+
+  // Read data.
+  waitdisk();
+    7ce3:	e8 96 ff ff ff       	call   7c7e <waitdisk>
+  asm volatile("cld; rep insl" :
+    7ce8:	8b 7d 08             	mov    0x8(%ebp),%edi
+    7ceb:	b9 80 00 00 00       	mov    $0x80,%ecx
+    7cf0:	ba f0 01 00 00       	mov    $0x1f0,%edx
+    7cf5:	fc                   	cld    
+    7cf6:	f3 6d                	rep insl (%dx),%es:(%edi)
+  insl(0x1F0, dst, SECTSIZE/4);
+}
+    7cf8:	5b                   	pop    %ebx
+    7cf9:	5f                   	pop    %edi
+    7cfa:	5d                   	pop    %ebp
+    7cfb:	c3                   	ret    
+
+00007cfc <readseg>:
+
+// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
+// Might copy more than asked.
+void
+readseg(uchar* pa, uint count, uint offset)
+{
+    7cfc:	f3 0f 1e fb          	endbr32 
+    7d00:	55                   	push   %ebp
+    7d01:	89 e5                	mov    %esp,%ebp
+    7d03:	57                   	push   %edi
+    7d04:	56                   	push   %esi
+    7d05:	53                   	push   %ebx
+    7d06:	83 ec 0c             	sub    $0xc,%esp
+    7d09:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    7d0c:	8b 75 10             	mov    0x10(%ebp),%esi
+  uchar* epa;
+
+  epa = pa + count;
+    7d0f:	89 df                	mov    %ebx,%edi
+    7d11:	03 7d 0c             	add    0xc(%ebp),%edi
+
+  // Round down to sector boundary.
+  pa -= offset % SECTSIZE;
+    7d14:	89 f0                	mov    %esi,%eax
+    7d16:	25 ff 01 00 00       	and    $0x1ff,%eax
+    7d1b:	29 c3                	sub    %eax,%ebx
+
+  // Translate from bytes to sectors; kernel starts at sector 1.
+  offset = (offset / SECTSIZE) + 1;
+    7d1d:	c1 ee 09             	shr    $0x9,%esi
+    7d20:	83 c6 01             	add    $0x1,%esi
+
+  // If this is too slow, we could read lots of sectors at a time.
+  // We'd write more to memory than asked, but it doesn't matter --
+  // we load in increasing order.
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d23:	39 df                	cmp    %ebx,%edi
+    7d25:	76 1a                	jbe    7d41 <readseg+0x45>
+    readsect(pa, offset);
+    7d27:	83 ec 08             	sub    $0x8,%esp
+    7d2a:	56                   	push   %esi
+    7d2b:	53                   	push   %ebx
+    7d2c:	e8 5f ff ff ff       	call   7c90 <readsect>
+  for(; pa < epa; pa += SECTSIZE, offset++)
+    7d31:	81 c3 00 02 00 00    	add    $0x200,%ebx
+    7d37:	83 c6 01             	add    $0x1,%esi
+    7d3a:	83 c4 10             	add    $0x10,%esp
+    7d3d:	39 df                	cmp    %ebx,%edi
+    7d3f:	77 e6                	ja     7d27 <readseg+0x2b>
+}
+    7d41:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d44:	5b                   	pop    %ebx
+    7d45:	5e                   	pop    %esi
+    7d46:	5f                   	pop    %edi
+    7d47:	5d                   	pop    %ebp
+    7d48:	c3                   	ret    
+
+00007d49 <bootmain>:
+{
+    7d49:	f3 0f 1e fb          	endbr32 
+    7d4d:	55                   	push   %ebp
+    7d4e:	89 e5                	mov    %esp,%ebp
+    7d50:	57                   	push   %edi
+    7d51:	56                   	push   %esi
+    7d52:	53                   	push   %ebx
+    7d53:	83 ec 10             	sub    $0x10,%esp
+  readseg((uchar*)elf, 4096, 0);
+    7d56:	6a 00                	push   $0x0
+    7d58:	68 00 10 00 00       	push   $0x1000
+    7d5d:	68 00 00 01 00       	push   $0x10000
+    7d62:	e8 95 ff ff ff       	call   7cfc <readseg>
+  if(elf->magic != ELF_MAGIC)
+    7d67:	83 c4 10             	add    $0x10,%esp
+    7d6a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
+    7d71:	45 4c 46 
+    7d74:	75 21                	jne    7d97 <bootmain+0x4e>
+  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
+    7d76:	a1 1c 00 01 00       	mov    0x1001c,%eax
+    7d7b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
+  eph = ph + elf->phnum;
+    7d81:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
+    7d88:	c1 e6 05             	shl    $0x5,%esi
+    7d8b:	01 de                	add    %ebx,%esi
+  for(; ph < eph; ph++){
+    7d8d:	39 f3                	cmp    %esi,%ebx
+    7d8f:	72 15                	jb     7da6 <bootmain+0x5d>
+  entry();
+    7d91:	ff 15 18 00 01 00    	call   *0x10018
+}
+    7d97:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    7d9a:	5b                   	pop    %ebx
+    7d9b:	5e                   	pop    %esi
+    7d9c:	5f                   	pop    %edi
+    7d9d:	5d                   	pop    %ebp
+    7d9e:	c3                   	ret    
+  for(; ph < eph; ph++){
+    7d9f:	83 c3 20             	add    $0x20,%ebx
+    7da2:	39 de                	cmp    %ebx,%esi
+    7da4:	76 eb                	jbe    7d91 <bootmain+0x48>
+    pa = (uchar*)ph->paddr;
+    7da6:	8b 7b 0c             	mov    0xc(%ebx),%edi
+    readseg(pa, ph->filesz, ph->off);
+    7da9:	83 ec 04             	sub    $0x4,%esp
+    7dac:	ff 73 04             	pushl  0x4(%ebx)
+    7daf:	ff 73 10             	pushl  0x10(%ebx)
+    7db2:	57                   	push   %edi
+    7db3:	e8 44 ff ff ff       	call   7cfc <readseg>
+    if(ph->memsz > ph->filesz)
+    7db8:	8b 4b 14             	mov    0x14(%ebx),%ecx
+    7dbb:	8b 43 10             	mov    0x10(%ebx),%eax
+    7dbe:	83 c4 10             	add    $0x10,%esp
+    7dc1:	39 c1                	cmp    %eax,%ecx
+    7dc3:	76 da                	jbe    7d9f <bootmain+0x56>
+      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
+    7dc5:	01 c7                	add    %eax,%edi
+    7dc7:	29 c1                	sub    %eax,%ecx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    7dc9:	b8 00 00 00 00       	mov    $0x0,%eax
+    7dce:	fc                   	cld    
+    7dcf:	f3 aa                	rep stos %al,%es:(%edi)
+               "=D" (addr), "=c" (cnt) :
+               "0" (addr), "1" (cnt), "a" (data) :
+               "memory", "cc");
+}
+    7dd1:	eb cc                	jmp    7d9f <bootmain+0x56>
Binary files xv6-public/bootblock.o and xv6-public_task_1/bootblock.o differ
Binary files xv6-public/bootblockother.o and xv6-public_task_1/bootblockother.o differ
diff -ruN xv6-public/bootmain.d xv6-public_task_1/bootmain.d
--- xv6-public/bootmain.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/bootmain.d	2021-09-15 20:34:52.792381000 +0530
@@ -0,0 +1 @@
+bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
Binary files xv6-public/bootmain.o and xv6-public_task_1/bootmain.o differ
Binary files xv6-public/_cat and xv6-public_task_1/_cat differ
diff -ruN xv6-public/cat.asm xv6-public_task_1/cat.asm
--- xv6-public/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/cat.asm	2021-09-15 20:34:57.372373000 +0530
@@ -0,0 +1,1291 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 50                	jle    7d <main+0x7d>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 77 03 00 00       	call   3b3 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 3f 03 00 00       	call   39b <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 0a 03 00 00       	call   373 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	pushl  (%ebx)
+  6c:	68 6b 08 00 00       	push   $0x86b
+  71:	6a 01                	push   $0x1
+  73:	e8 68 04 00 00       	call   4e0 <printf>
+      exit();
+  78:	e8 f6 02 00 00       	call   373 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 e7 02 00 00       	call   373 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	56                   	push   %esi
+  98:	8b 75 08             	mov    0x8(%ebp),%esi
+  9b:	53                   	push   %ebx
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  9c:	eb 19                	jmp    b7 <cat+0x27>
+  9e:	66 90                	xchg   %ax,%ax
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 a0 0b 00 00       	push   $0xba0
+  a9:	6a 01                	push   $0x1
+  ab:	e8 e3 02 00 00       	call   393 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 25                	jne    dc <cat+0x4c>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 a0 0b 00 00       	push   $0xba0
+  c4:	56                   	push   %esi
+  c5:	e8 c1 02 00 00       	call   38b <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	89 c3                	mov    %eax,%ebx
+  cf:	85 c0                	test   %eax,%eax
+  d1:	7f cd                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d3:	75 1b                	jne    f0 <cat+0x60>
+}
+  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d8:	5b                   	pop    %ebx
+  d9:	5e                   	pop    %esi
+  da:	5d                   	pop    %ebp
+  db:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dc:	83 ec 08             	sub    $0x8,%esp
+  df:	68 48 08 00 00       	push   $0x848
+  e4:	6a 01                	push   $0x1
+  e6:	e8 f5 03 00 00       	call   4e0 <printf>
+      exit();
+  eb:	e8 83 02 00 00       	call   373 <exit>
+    printf(1, "cat: read error\n");
+  f0:	50                   	push   %eax
+  f1:	50                   	push   %eax
+  f2:	68 5a 08 00 00       	push   $0x85a
+  f7:	6a 01                	push   $0x1
+  f9:	e8 e2 03 00 00       	call   4e0 <printf>
+    exit();
+  fe:	e8 70 02 00 00       	call   373 <exit>
+ 103:	66 90                	xchg   %ax,%ax
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 115:	31 c0                	xor    %eax,%eax
+{
+ 117:	89 e5                	mov    %esp,%ebp
+ 119:	53                   	push   %ebx
+ 11a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 11d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 127:	83 c0 01             	add    $0x1,%eax
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 12e:	89 c8                	mov    %ecx,%eax
+ 130:	5b                   	pop    %ebx
+ 131:	5d                   	pop    %ebp
+ 132:	c3                   	ret    
+ 133:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	53                   	push   %ebx
+ 148:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 14e:	0f b6 01             	movzbl (%ecx),%eax
+ 151:	0f b6 1a             	movzbl (%edx),%ebx
+ 154:	84 c0                	test   %al,%al
+ 156:	75 19                	jne    171 <strcmp+0x31>
+ 158:	eb 26                	jmp    180 <strcmp+0x40>
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 164:	83 c1 01             	add    $0x1,%ecx
+ 167:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 16a:	0f b6 1a             	movzbl (%edx),%ebx
+ 16d:	84 c0                	test   %al,%al
+ 16f:	74 0f                	je     180 <strcmp+0x40>
+ 171:	38 d8                	cmp    %bl,%al
+ 173:	74 eb                	je     160 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 175:	29 d8                	sub    %ebx,%eax
+}
+ 177:	5b                   	pop    %ebx
+ 178:	5d                   	pop    %ebp
+ 179:	c3                   	ret    
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 180:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 182:	29 d8                	sub    %ebx,%eax
+}
+ 184:	5b                   	pop    %ebx
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18e:	66 90                	xchg   %ax,%ax
+
+00000190 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 19a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 19d:	74 21                	je     1c0 <strlen+0x30>
+ 19f:	31 c0                	xor    %eax,%eax
+ 1a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1a8:	83 c0 01             	add    $0x1,%eax
+ 1ab:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1af:	89 c1                	mov    %eax,%ecx
+ 1b1:	75 f5                	jne    1a8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1b3:	89 c8                	mov    %ecx,%eax
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1c0:	31 c9                	xor    %ecx,%ecx
+}
+ 1c2:	5d                   	pop    %ebp
+ 1c3:	89 c8                	mov    %ecx,%eax
+ 1c5:	c3                   	ret    
+ 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	57                   	push   %edi
+ 1d8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1db:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1de:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1e1:	89 d7                	mov    %edx,%edi
+ 1e3:	fc                   	cld    
+ 1e4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1e6:	89 d0                	mov    %edx,%eax
+ 1e8:	5f                   	pop    %edi
+ 1e9:	5d                   	pop    %ebp
+ 1ea:	c3                   	ret    
+ 1eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1f0:	f3 0f 1e fb          	endbr32 
+ 1f4:	55                   	push   %ebp
+ 1f5:	89 e5                	mov    %esp,%ebp
+ 1f7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fa:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1fe:	0f b6 10             	movzbl (%eax),%edx
+ 201:	84 d2                	test   %dl,%dl
+ 203:	75 16                	jne    21b <strchr+0x2b>
+ 205:	eb 21                	jmp    228 <strchr+0x38>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+ 210:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 214:	83 c0 01             	add    $0x1,%eax
+ 217:	84 d2                	test   %dl,%dl
+ 219:	74 0d                	je     228 <strchr+0x38>
+    if(*s == c)
+ 21b:	38 d1                	cmp    %dl,%cl
+ 21d:	75 f1                	jne    210 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 21f:	5d                   	pop    %ebp
+ 220:	c3                   	ret    
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 228:	31 c0                	xor    %eax,%eax
+}
+ 22a:	5d                   	pop    %ebp
+ 22b:	c3                   	ret    
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000230 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 239:	31 f6                	xor    %esi,%esi
+{
+ 23b:	53                   	push   %ebx
+ 23c:	89 f3                	mov    %esi,%ebx
+ 23e:	83 ec 1c             	sub    $0x1c,%esp
+ 241:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 244:	eb 33                	jmp    279 <gets+0x49>
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 250:	83 ec 04             	sub    $0x4,%esp
+ 253:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 256:	6a 01                	push   $0x1
+ 258:	50                   	push   %eax
+ 259:	6a 00                	push   $0x0
+ 25b:	e8 2b 01 00 00       	call   38b <read>
+    if(cc < 1)
+ 260:	83 c4 10             	add    $0x10,%esp
+ 263:	85 c0                	test   %eax,%eax
+ 265:	7e 1c                	jle    283 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 267:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 26b:	83 c7 01             	add    $0x1,%edi
+ 26e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 271:	3c 0a                	cmp    $0xa,%al
+ 273:	74 23                	je     298 <gets+0x68>
+ 275:	3c 0d                	cmp    $0xd,%al
+ 277:	74 1f                	je     298 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 279:	83 c3 01             	add    $0x1,%ebx
+ 27c:	89 fe                	mov    %edi,%esi
+ 27e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 281:	7c cd                	jl     250 <gets+0x20>
+ 283:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 285:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 288:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 28b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28e:	5b                   	pop    %ebx
+ 28f:	5e                   	pop    %esi
+ 290:	5f                   	pop    %edi
+ 291:	5d                   	pop    %ebp
+ 292:	c3                   	ret    
+ 293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 297:	90                   	nop
+ 298:	8b 75 08             	mov    0x8(%ebp),%esi
+ 29b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 29e:	01 de                	add    %ebx,%esi
+ 2a0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2a2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2a8:	5b                   	pop    %ebx
+ 2a9:	5e                   	pop    %esi
+ 2aa:	5f                   	pop    %edi
+ 2ab:	5d                   	pop    %ebp
+ 2ac:	c3                   	ret    
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	56                   	push   %esi
+ 2b8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	6a 00                	push   $0x0
+ 2be:	ff 75 08             	pushl  0x8(%ebp)
+ 2c1:	e8 ed 00 00 00       	call   3b3 <open>
+  if(fd < 0)
+ 2c6:	83 c4 10             	add    $0x10,%esp
+ 2c9:	85 c0                	test   %eax,%eax
+ 2cb:	78 2b                	js     2f8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2cd:	83 ec 08             	sub    $0x8,%esp
+ 2d0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2d3:	89 c3                	mov    %eax,%ebx
+ 2d5:	50                   	push   %eax
+ 2d6:	e8 f0 00 00 00       	call   3cb <fstat>
+  close(fd);
+ 2db:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2de:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2e0:	e8 b6 00 00 00       	call   39b <close>
+  return r;
+ 2e5:	83 c4 10             	add    $0x10,%esp
+}
+ 2e8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2eb:	89 f0                	mov    %esi,%eax
+ 2ed:	5b                   	pop    %ebx
+ 2ee:	5e                   	pop    %esi
+ 2ef:	5d                   	pop    %ebp
+ 2f0:	c3                   	ret    
+ 2f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2f8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2fd:	eb e9                	jmp    2e8 <stat+0x38>
+ 2ff:	90                   	nop
+
+00000300 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 300:	f3 0f 1e fb          	endbr32 
+ 304:	55                   	push   %ebp
+ 305:	89 e5                	mov    %esp,%ebp
+ 307:	53                   	push   %ebx
+ 308:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 30b:	0f be 02             	movsbl (%edx),%eax
+ 30e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 311:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 314:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 319:	77 1a                	ja     335 <atoi+0x35>
+ 31b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 31f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 320:	83 c2 01             	add    $0x1,%edx
+ 323:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 326:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 32a:	0f be 02             	movsbl (%edx),%eax
+ 32d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 330:	80 fb 09             	cmp    $0x9,%bl
+ 333:	76 eb                	jbe    320 <atoi+0x20>
+  return n;
+}
+ 335:	89 c8                	mov    %ecx,%eax
+ 337:	5b                   	pop    %ebx
+ 338:	5d                   	pop    %ebp
+ 339:	c3                   	ret    
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000340 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	57                   	push   %edi
+ 348:	8b 45 10             	mov    0x10(%ebp),%eax
+ 34b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 34e:	56                   	push   %esi
+ 34f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 352:	85 c0                	test   %eax,%eax
+ 354:	7e 0f                	jle    365 <memmove+0x25>
+ 356:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 358:	89 d7                	mov    %edx,%edi
+ 35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 360:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 361:	39 f8                	cmp    %edi,%eax
+ 363:	75 fb                	jne    360 <memmove+0x20>
+  return vdst;
+}
+ 365:	5e                   	pop    %esi
+ 366:	89 d0                	mov    %edx,%eax
+ 368:	5f                   	pop    %edi
+ 369:	5d                   	pop    %ebp
+ 36a:	c3                   	ret    
+
+0000036b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 36b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <exit>:
+SYSCALL(exit)
+ 373:	b8 02 00 00 00       	mov    $0x2,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <wait>:
+SYSCALL(wait)
+ 37b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <pipe>:
+SYSCALL(pipe)
+ 383:	b8 04 00 00 00       	mov    $0x4,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <read>:
+SYSCALL(read)
+ 38b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <write>:
+SYSCALL(write)
+ 393:	b8 10 00 00 00       	mov    $0x10,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <close>:
+SYSCALL(close)
+ 39b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <kill>:
+SYSCALL(kill)
+ 3a3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <exec>:
+SYSCALL(exec)
+ 3ab:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <open>:
+SYSCALL(open)
+ 3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mknod>:
+SYSCALL(mknod)
+ 3bb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <unlink>:
+SYSCALL(unlink)
+ 3c3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <fstat>:
+SYSCALL(fstat)
+ 3cb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <link>:
+SYSCALL(link)
+ 3d3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mkdir>:
+SYSCALL(mkdir)
+ 3db:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <chdir>:
+SYSCALL(chdir)
+ 3e3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <dup>:
+SYSCALL(dup)
+ 3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getpid>:
+SYSCALL(getpid)
+ 3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <sbrk>:
+SYSCALL(sbrk)
+ 3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <sleep>:
+SYSCALL(sleep)
+ 403:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <uptime>:
+SYSCALL(uptime)
+ 40b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <draw>:
+SYSCALL(draw)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <history>:
+ 41b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+ 423:	66 90                	xchg   %ax,%ax
+ 425:	66 90                	xchg   %ax,%ax
+ 427:	66 90                	xchg   %ax,%ax
+ 429:	66 90                	xchg   %ax,%ax
+ 42b:	66 90                	xchg   %ax,%ax
+ 42d:	66 90                	xchg   %ax,%ax
+ 42f:	90                   	nop
+
+00000430 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+ 439:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 43c:	89 d1                	mov    %edx,%ecx
+{
+ 43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 441:	85 d2                	test   %edx,%edx
+ 443:	0f 89 7f 00 00 00    	jns    4c8 <printint+0x98>
+ 449:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 44d:	74 79                	je     4c8 <printint+0x98>
+    neg = 1;
+ 44f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 456:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 458:	31 db                	xor    %ebx,%ebx
+ 45a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 460:	89 c8                	mov    %ecx,%eax
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	89 cf                	mov    %ecx,%edi
+ 466:	f7 75 c4             	divl   -0x3c(%ebp)
+ 469:	0f b6 92 88 08 00 00 	movzbl 0x888(%edx),%edx
+ 470:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 473:	89 d8                	mov    %ebx,%eax
+ 475:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 478:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 47b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 47e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 481:	76 dd                	jbe    460 <printint+0x30>
+  if(neg)
+ 483:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 486:	85 c9                	test   %ecx,%ecx
+ 488:	74 0c                	je     496 <printint+0x66>
+    buf[i++] = '-';
+ 48a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 48f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 491:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 496:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 499:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 49d:	eb 07                	jmp    4a6 <printint+0x76>
+ 49f:	90                   	nop
+ 4a0:	0f b6 13             	movzbl (%ebx),%edx
+ 4a3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4a6:	83 ec 04             	sub    $0x4,%esp
+ 4a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ac:	6a 01                	push   $0x1
+ 4ae:	56                   	push   %esi
+ 4af:	57                   	push   %edi
+ 4b0:	e8 de fe ff ff       	call   393 <write>
+  while(--i >= 0)
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	39 de                	cmp    %ebx,%esi
+ 4ba:	75 e4                	jne    4a0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bf:	5b                   	pop    %ebx
+ 4c0:	5e                   	pop    %esi
+ 4c1:	5f                   	pop    %edi
+ 4c2:	5d                   	pop    %ebp
+ 4c3:	c3                   	ret    
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4cf:	eb 87                	jmp    458 <printint+0x28>
+ 4d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
+
+000004e0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	57                   	push   %edi
+ 4e8:	56                   	push   %esi
+ 4e9:	53                   	push   %ebx
+ 4ea:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4ed:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4f0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4f3:	84 db                	test   %bl,%bl
+ 4f5:	0f 84 b4 00 00 00    	je     5af <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4fb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4fe:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 501:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 504:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 506:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 509:	eb 33                	jmp    53e <printf+0x5e>
+ 50b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+ 510:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 513:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	74 17                	je     534 <printf+0x54>
+  write(fd, &c, 1);
+ 51d:	83 ec 04             	sub    $0x4,%esp
+ 520:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 523:	6a 01                	push   $0x1
+ 525:	57                   	push   %edi
+ 526:	ff 75 08             	pushl  0x8(%ebp)
+ 529:	e8 65 fe ff ff       	call   393 <write>
+ 52e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 531:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 534:	0f b6 1e             	movzbl (%esi),%ebx
+ 537:	83 c6 01             	add    $0x1,%esi
+ 53a:	84 db                	test   %bl,%bl
+ 53c:	74 71                	je     5af <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 53e:	0f be cb             	movsbl %bl,%ecx
+ 541:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 544:	85 d2                	test   %edx,%edx
+ 546:	74 c8                	je     510 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 548:	83 fa 25             	cmp    $0x25,%edx
+ 54b:	75 e7                	jne    534 <printf+0x54>
+      if(c == 'd'){
+ 54d:	83 f8 64             	cmp    $0x64,%eax
+ 550:	0f 84 9a 00 00 00    	je     5f0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 556:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 55c:	83 f9 70             	cmp    $0x70,%ecx
+ 55f:	74 5f                	je     5c0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 561:	83 f8 73             	cmp    $0x73,%eax
+ 564:	0f 84 d6 00 00 00    	je     640 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 56a:	83 f8 63             	cmp    $0x63,%eax
+ 56d:	0f 84 8d 00 00 00    	je     600 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 573:	83 f8 25             	cmp    $0x25,%eax
+ 576:	0f 84 b4 00 00 00    	je     630 <printf+0x150>
+  write(fd, &c, 1);
+ 57c:	83 ec 04             	sub    $0x4,%esp
+ 57f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 583:	6a 01                	push   $0x1
+ 585:	57                   	push   %edi
+ 586:	ff 75 08             	pushl  0x8(%ebp)
+ 589:	e8 05 fe ff ff       	call   393 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 58e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 591:	83 c4 0c             	add    $0xc,%esp
+ 594:	6a 01                	push   $0x1
+ 596:	83 c6 01             	add    $0x1,%esi
+ 599:	57                   	push   %edi
+ 59a:	ff 75 08             	pushl  0x8(%ebp)
+ 59d:	e8 f1 fd ff ff       	call   393 <write>
+  for(i = 0; fmt[i]; i++){
+ 5a2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5a6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5a9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5ab:	84 db                	test   %bl,%bl
+ 5ad:	75 8f                	jne    53e <printf+0x5e>
+    }
+  }
+}
+ 5af:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5b2:	5b                   	pop    %ebx
+ 5b3:	5e                   	pop    %esi
+ 5b4:	5f                   	pop    %edi
+ 5b5:	5d                   	pop    %ebp
+ 5b6:	c3                   	ret    
+ 5b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5be:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c8:	6a 00                	push   $0x0
+ 5ca:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5cd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5d0:	8b 13                	mov    (%ebx),%edx
+ 5d2:	e8 59 fe ff ff       	call   430 <printint>
+        ap++;
+ 5d7:	89 d8                	mov    %ebx,%eax
+ 5d9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5dc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5de:	83 c0 04             	add    $0x4,%eax
+ 5e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5e4:	e9 4b ff ff ff       	jmp    534 <printf+0x54>
+ 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5f8:	6a 01                	push   $0x1
+ 5fa:	eb ce                	jmp    5ca <printf+0xea>
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 600:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 603:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 606:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 608:	6a 01                	push   $0x1
+        ap++;
+ 60a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 60d:	57                   	push   %edi
+ 60e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 611:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 614:	e8 7a fd ff ff       	call   393 <write>
+        ap++;
+ 619:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 61c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 61f:	31 d2                	xor    %edx,%edx
+ 621:	e9 0e ff ff ff       	jmp    534 <printf+0x54>
+ 626:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 62d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 630:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 633:	83 ec 04             	sub    $0x4,%esp
+ 636:	e9 59 ff ff ff       	jmp    594 <printf+0xb4>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+        s = (char*)*ap;
+ 640:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 643:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 645:	83 c0 04             	add    $0x4,%eax
+ 648:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 64b:	85 db                	test   %ebx,%ebx
+ 64d:	74 17                	je     666 <printf+0x186>
+        while(*s != 0){
+ 64f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 652:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 654:	84 c0                	test   %al,%al
+ 656:	0f 84 d8 fe ff ff    	je     534 <printf+0x54>
+ 65c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 65f:	89 de                	mov    %ebx,%esi
+ 661:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 664:	eb 1a                	jmp    680 <printf+0x1a0>
+          s = "(null)";
+ 666:	bb 80 08 00 00       	mov    $0x880,%ebx
+        while(*s != 0){
+ 66b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 66e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 673:	89 de                	mov    %ebx,%esi
+ 675:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+  write(fd, &c, 1);
+ 680:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 683:	83 c6 01             	add    $0x1,%esi
+ 686:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 689:	6a 01                	push   $0x1
+ 68b:	57                   	push   %edi
+ 68c:	53                   	push   %ebx
+ 68d:	e8 01 fd ff ff       	call   393 <write>
+        while(*s != 0){
+ 692:	0f b6 06             	movzbl (%esi),%eax
+ 695:	83 c4 10             	add    $0x10,%esp
+ 698:	84 c0                	test   %al,%al
+ 69a:	75 e4                	jne    680 <printf+0x1a0>
+ 69c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 69f:	31 d2                	xor    %edx,%edx
+ 6a1:	e9 8e fe ff ff       	jmp    534 <printf+0x54>
+ 6a6:	66 90                	xchg   %ax,%ax
+ 6a8:	66 90                	xchg   %ax,%ax
+ 6aa:	66 90                	xchg   %ax,%ax
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
+
+000006b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b5:	a1 80 0b 00 00       	mov    0xb80,%eax
+{
+ 6ba:	89 e5                	mov    %esp,%ebp
+ 6bc:	57                   	push   %edi
+ 6bd:	56                   	push   %esi
+ 6be:	53                   	push   %ebx
+ 6bf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6c2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6c4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c7:	39 c8                	cmp    %ecx,%eax
+ 6c9:	73 15                	jae    6e0 <free+0x30>
+ 6cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6cf:	90                   	nop
+ 6d0:	39 d1                	cmp    %edx,%ecx
+ 6d2:	72 14                	jb     6e8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d4:	39 d0                	cmp    %edx,%eax
+ 6d6:	73 10                	jae    6e8 <free+0x38>
+{
+ 6d8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6da:	8b 10                	mov    (%eax),%edx
+ 6dc:	39 c8                	cmp    %ecx,%eax
+ 6de:	72 f0                	jb     6d0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6e0:	39 d0                	cmp    %edx,%eax
+ 6e2:	72 f4                	jb     6d8 <free+0x28>
+ 6e4:	39 d1                	cmp    %edx,%ecx
+ 6e6:	73 f0                	jae    6d8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6e8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6eb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ee:	39 fa                	cmp    %edi,%edx
+ 6f0:	74 1e                	je     710 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6f2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6f5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6fb:	39 f1                	cmp    %esi,%ecx
+ 6fd:	74 28                	je     727 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6ff:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 701:	5b                   	pop    %ebx
+  freep = p;
+ 702:	a3 80 0b 00 00       	mov    %eax,0xb80
+}
+ 707:	5e                   	pop    %esi
+ 708:	5f                   	pop    %edi
+ 709:	5d                   	pop    %ebp
+ 70a:	c3                   	ret    
+ 70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 710:	03 72 04             	add    0x4(%edx),%esi
+ 713:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 716:	8b 10                	mov    (%eax),%edx
+ 718:	8b 12                	mov    (%edx),%edx
+ 71a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 71d:	8b 50 04             	mov    0x4(%eax),%edx
+ 720:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 723:	39 f1                	cmp    %esi,%ecx
+ 725:	75 d8                	jne    6ff <free+0x4f>
+    p->s.size += bp->s.size;
+ 727:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 72a:	a3 80 0b 00 00       	mov    %eax,0xb80
+    p->s.size += bp->s.size;
+ 72f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 732:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 735:	89 10                	mov    %edx,(%eax)
+}
+ 737:	5b                   	pop    %ebx
+ 738:	5e                   	pop    %esi
+ 739:	5f                   	pop    %edi
+ 73a:	5d                   	pop    %ebp
+ 73b:	c3                   	ret    
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000740 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 740:	f3 0f 1e fb          	endbr32 
+ 744:	55                   	push   %ebp
+ 745:	89 e5                	mov    %esp,%ebp
+ 747:	57                   	push   %edi
+ 748:	56                   	push   %esi
+ 749:	53                   	push   %ebx
+ 74a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 74d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 750:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 756:	8d 70 07             	lea    0x7(%eax),%esi
+ 759:	c1 ee 03             	shr    $0x3,%esi
+ 75c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 75f:	85 ff                	test   %edi,%edi
+ 761:	0f 84 a9 00 00 00    	je     810 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 767:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 769:	8b 48 04             	mov    0x4(%eax),%ecx
+ 76c:	39 f1                	cmp    %esi,%ecx
+ 76e:	73 6d                	jae    7dd <malloc+0x9d>
+ 770:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 776:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 77b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 77e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 785:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 788:	eb 17                	jmp    7a1 <malloc+0x61>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 790:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 792:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 795:	39 f1                	cmp    %esi,%ecx
+ 797:	73 4f                	jae    7e8 <malloc+0xa8>
+ 799:	8b 3d 80 0b 00 00    	mov    0xb80,%edi
+ 79f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7a1:	39 c7                	cmp    %eax,%edi
+ 7a3:	75 eb                	jne    790 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7a5:	83 ec 0c             	sub    $0xc,%esp
+ 7a8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7ab:	e8 4b fc ff ff       	call   3fb <sbrk>
+  if(p == (char*)-1)
+ 7b0:	83 c4 10             	add    $0x10,%esp
+ 7b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7b6:	74 1b                	je     7d3 <malloc+0x93>
+  hp->s.size = nu;
+ 7b8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7bb:	83 ec 0c             	sub    $0xc,%esp
+ 7be:	83 c0 08             	add    $0x8,%eax
+ 7c1:	50                   	push   %eax
+ 7c2:	e8 e9 fe ff ff       	call   6b0 <free>
+  return freep;
+ 7c7:	a1 80 0b 00 00       	mov    0xb80,%eax
+      if((p = morecore(nunits)) == 0)
+ 7cc:	83 c4 10             	add    $0x10,%esp
+ 7cf:	85 c0                	test   %eax,%eax
+ 7d1:	75 bd                	jne    790 <malloc+0x50>
+        return 0;
+  }
+}
+ 7d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7d6:	31 c0                	xor    %eax,%eax
+}
+ 7d8:	5b                   	pop    %ebx
+ 7d9:	5e                   	pop    %esi
+ 7da:	5f                   	pop    %edi
+ 7db:	5d                   	pop    %ebp
+ 7dc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7dd:	89 c2                	mov    %eax,%edx
+ 7df:	89 f8                	mov    %edi,%eax
+ 7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7e8:	39 ce                	cmp    %ecx,%esi
+ 7ea:	74 54                	je     840 <malloc+0x100>
+        p->s.size -= nunits;
+ 7ec:	29 f1                	sub    %esi,%ecx
+ 7ee:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7f1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7f4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7f7:	a3 80 0b 00 00       	mov    %eax,0xb80
+}
+ 7fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7ff:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 802:	5b                   	pop    %ebx
+ 803:	5e                   	pop    %esi
+ 804:	5f                   	pop    %edi
+ 805:	5d                   	pop    %ebp
+ 806:	c3                   	ret    
+ 807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 80e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 810:	c7 05 80 0b 00 00 84 	movl   $0xb84,0xb80
+ 817:	0b 00 00 
+    base.s.size = 0;
+ 81a:	bf 84 0b 00 00       	mov    $0xb84,%edi
+    base.s.ptr = freep = prevp = &base;
+ 81f:	c7 05 84 0b 00 00 84 	movl   $0xb84,0xb84
+ 826:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 829:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 82b:	c7 05 88 0b 00 00 00 	movl   $0x0,0xb88
+ 832:	00 00 00 
+    if(p->s.size >= nunits){
+ 835:	e9 36 ff ff ff       	jmp    770 <malloc+0x30>
+ 83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 840:	8b 0a                	mov    (%edx),%ecx
+ 842:	89 08                	mov    %ecx,(%eax)
+ 844:	eb b1                	jmp    7f7 <malloc+0xb7>
diff -ruN xv6-public/cat.d xv6-public_task_1/cat.d
--- xv6-public/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/cat.d	2021-09-15 20:34:57.272373000 +0530
@@ -0,0 +1 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/cat.o and xv6-public_task_1/cat.o differ
diff -ruN xv6-public/cat.sym xv6-public_task_1/cat.sym
--- xv6-public/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/cat.sym	2021-09-15 20:34:57.384373000 +0530
@@ -0,0 +1,61 @@
+00000000 .text
+00000848 .rodata
+0000089c .eh_frame
+00000b80 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000430 printint
+00000888 digits.1091
+00000000 umalloc.c
+00000b80 freep
+00000b84 base
+00000110 strcpy
+000004e0 printf
+00000340 memmove
+000003bb mknod
+00000230 gets
+000003f3 getpid
+00000090 cat
+00000740 malloc
+00000403 sleep
+00000383 pipe
+00000393 write
+0000041b history
+000003cb fstat
+000003a3 kill
+000003e3 chdir
+000003ab exec
+0000037b wait
+0000038b read
+000003c3 unlink
+0000036b fork
+000003fb sbrk
+0000040b uptime
+00000b6c __bss_start
+000001d0 memset
+00000000 main
+00000140 strcmp
+000003eb dup
+00000ba0 buf
+000002b0 stat
+00000b6c _edata
+00000da0 _end
+000003d3 link
+00000373 exit
+00000300 atoi
+00000413 draw
+00000190 strlen
+000003b3 open
+000001f0 strchr
+000003db mkdir
+0000039b close
+000006b0 free
diff -ruN xv6-public/console.c xv6-public_task_1/console.c
--- xv6-public/console.c	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/console.c	2021-09-15 20:34:40.700400000 +0530
@@ -1,7 +1,7 @@
 // Console input and output.
 // Input is from the keyboard or serial port.
 // Output is written to the screen and serial port.
-
+#include "console.h"
 #include "types.h"
 #include "defs.h"
 #include "param.h"
@@ -124,8 +124,7 @@
 }
 
 //PAGEBREAK: 50
-#define BACKSPACE 0x100
-#define CRTPORT 0x3d4
+
 static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
 
 static void
@@ -139,18 +138,25 @@
   outb(CRTPORT, 15);
   pos |= inb(CRTPORT+1);
 
-  if(c == '\n')
-    pos += 80 - pos%80;
-  else if(c == BACKSPACE){
-    if(pos > 0) --pos;
-  } else
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  switch(c) {
+    case '\n':
+      pos += 80 - pos%80;
+      break;
+    case BACKSPACE:
+      if(pos > 0) --pos;
+      break;
+    case LEFT_ARROW:
+      if(pos > 0) --pos;
+      break;
+    default:
+      crt[pos++] = (c&0xff) | 0x0700;  // black on white
+  }
 
   if(pos < 0 || pos > 25*80)
     panic("pos under/overflow");
 
   if((pos/80) >= 24){  // Scroll up.
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+    memmove(crt, crt+80, sizeof(crt[0])*23*80); 
     pos -= 80;
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
   }
@@ -159,7 +165,8 @@
   outb(CRTPORT+1, pos>>8);
   outb(CRTPORT, 15);
   outb(CRTPORT+1, pos);
-  crt[pos] = ' ' | 0x0700;
+  if (c == BACKSPACE)
+    crt[pos] = ' ' | 0x0700;
 }
 
 void
@@ -171,60 +178,224 @@
       ;
   }
 
-  if(c == BACKSPACE){
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-  } else
-    uartputc(c);
+  switch (c) {
+    case BACKSPACE:
+      uartputc('\b'); uartputc(' '); uartputc('\b');  // uart is writing to the linux shell
+      break;
+    case LEFT_ARROW:
+      uartputc('\b');
+      break;
+    default:
+      uartputc(c);
+  }
   cgaputc(c);
+  // uartputc prints to Linux's terminal and cgaputc prints to QEMU's terminal
 }
 
-#define INPUT_BUF 128
 struct {
   char buf[INPUT_BUF];
   uint r;  // Read index
   uint w;  // Write index
   uint e;  // Edit index
+  uint rightmost; // the first empty char in the line
 } input;
 
+// stores the charactes in the input which have to be shifted while backspacing and typing while caret is not at the end.
+char buffToBeShifted[INPUT_BUF]; 
+
+// this struct stores the commands and its details.
+struct {
+  char CommandMemArr[MAX_HISTORY][INPUT_BUF];   // holds the actual command strings.
+  uint lengthsArr[MAX_HISTORY];                 // this will hold the length of each command string.
+  uint FinalCMdIndex;                          // the index of the last command entered to history.
+  int TotalCMDsInMem;                           // total number of commands executed from the system boot.
+  int currentPosition;                          // no. of skips in history array while toggling up and down arrow.
+} HistoryMem;
+
+char oldBuf[INPUT_BUF]; // this will hold the details of the command that was written before accessing the history
+uint lengthOfOldBuf;
+
+char buf2[INPUT_BUF];
+
 #define C(x)  ((x)-'@')  // Control-x
 
+// copies the contents which have to be shifted from input to bufftoshifted 
+void copybuffToBeShifted() {
+  uint n = input.rightmost - input.e; // contents after edit have to be shifted when typed or backspaced.
+  uint i;
+  for (i = 0; i < n; i++)
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+}
+
+// shifts the input to right by one position and repaints it on the line on the screen from edit index and brings back caret to the original position
+void shiftbufright() {
+  uint n = input.rightmost - input.e;
+  int i;
+  for (i = 0; i < n; i++) {
+
+    char c = buffToBeShifted[i];
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+    consputc(c); // repaitning the screen.
+  }
+  // reset buffToBeShifted for future use
+  memset(buffToBeShifted, '\0', INPUT_BUF);
+  // return the caret to its correct position
+  for (i = 0; i < n; i++) {
+    consputc(LEFT_ARROW);
+  }
+}
+
+// Shift input.buf one positon to the left, and repaint the chars on-screen. Used only when punching in BACKSPACE and the caret isn't at the end of the line.
+void shiftbufleft() {
+  uint n = input.rightmost - input.e;
+  uint i;
+  consputc(LEFT_ARROW);
+  input.e--;
+  for (i = 0; i < n; i++) {
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+    consputc(c); // repainting the screen.
+  }
+  input.rightmost--;
+  consputc(' '); // delete the last char in line
+  for (i = 0; i <= n; i++) {
+    consputc(LEFT_ARROW); // shift the caret back to the left
+  }
+}
+
 void
 consoleintr(int (*getc)(void))
 {
   int c, doprocdump = 0;
-
+  uint tempIndex;
   acquire(&cons.lock);
   while((c = getc()) >= 0){
     switch(c){
-    case C('P'):  // Process listing.
-      // procdump() locks cons.lock indirectly; invoke later
-      doprocdump = 1;
-      break;
-    case C('U'):  // Kill line.
-      while(input.e != input.w &&
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    case C('H'): case '\x7f':  // Backspace
-      if(input.e != input.w){
-        input.e--;
-        consputc(BACKSPACE);
-      }
-      break;
-    default:
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-        c = (c == '\r') ? '\n' : c;
-        input.buf[input.e++ % INPUT_BUF] = c;
-        consputc(c);
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-          input.w = input.e;
-          wakeup(&input.r);
+    	case C('P'):  // Process listing.
+        doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
+        break;
+      case C('U'):  // Kill line.
+        if (input.rightmost > input.e) { // caret isn't at the end of the line
+          uint numtoshift = input.rightmost - input.e;
+          uint placestoshift = input.e - input.r;
+          uint i;
+          for (i = 0; i < placestoshift; i++) {
+            consputc(LEFT_ARROW);
+          }
+          memset(buf2, '\0', INPUT_BUF);
+          for (i = 0; i < numtoshift; i++) {
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+          }
+          for (i = 0; i < numtoshift; i++) {
+            input.buf[(input.r + i) % INPUT_BUF] = buf2[i];
+          }
+          input.e -= placestoshift;
+          input.rightmost -= placestoshift;
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+          }
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+            consputc(' ');
+          }
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+            consputc(LEFT_ARROW);
+          }
+        }
+        else { // caret is at the end of the line -                                       ( deleting everything from both screen and inputbuf)
+          while(input.e != input.r &&
+                input.buf[(input.e - 1) % INPUT_BUF] != '\n'){ 
+            input.e--;
+            input.rightmost--;
+            consputc(BACKSPACE);
+          }
+        }
+        break;
+      case C('H'): case '\x7f':  // Backspace
+        if (input.rightmost != input.e && input.e != input.r) { // caret isn't at the end of the line
+          shiftbufleft(); // shifting buffer to one position left.
+          break;
+        }
+        if(input.e != input.r){ // caret is at the end of the line - deleting last char
+          input.e--;
+          input.rightmost--;
+          consputc(BACKSPACE);
         }
+        break;
+      case LEFT_ARROW:
+        if (input.e != input.r) {
+          input.e--;
+          consputc(c);
+        }
+        break;
+      case RIGHT_ARROW:
+        if (input.e < input.rightmost) {
+          consputc(input.buf[input.e % INPUT_BUF]);
+          input.e++;
+        }
+        else if (input.e == input.rightmost){ // This line add the cursor at the end ogf the line. 
+          consputc(' ');
+          consputc(LEFT_ARROW);
+        }
+        break;
+      case UP_ARROW:
+       if (HistoryMem.currentPosition < HistoryMem.TotalCMDsInMem-1 && HistoryMem.currentPosition < MAX_HISTORY-1 ){ 
+          // current history means the oldest possible will be MAX_HISTORY-1
+          earaseCurrentLineOnScreen(); // eraseing the whole line 
+          earaseContentOnInputBuf();   // erasing in input.buf
+          if (HistoryMem.currentPosition == -1) // if it is the first toggle we make then the our written command  should be stored.
+              copybuffToBeShiftedToOldBuf();
+          HistoryMem.currentPosition++; // toggling by increasing out current position.
+          tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) %MAX_HISTORY; // gives us the index of currentposition'th index from the recent command.
+          copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+          copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+        }
+        break;
+      case DOWN_ARROW:
+        switch(HistoryMem.currentPosition){
+          case -1:
+            //does nothing
+            break;
+          case 0: // prints the string from oldbuff
+            earaseCurrentLineOnScreen();
+            copyBufferToInputBuf(oldBuf, lengthOfOldBuf);
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+            HistoryMem.currentPosition--; // decreasing out current position.
+            break;
+          default:
+            earaseCurrentLineOnScreen();
+            HistoryMem.currentPosition--; // decreasing out current position.
+            tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) % MAX_HISTORY;
+            copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+            copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+            break;
+        }
+        break;
+      case '\n':
+      case '\r':
+	  input.e = input.rightmost;
+      default:
+	if(c != 0 && input.e-input.r < INPUT_BUF){
+	  c = (c == '\r') ? '\n' : c;
+	  if (input.rightmost > input.e) { // caret isn't at the end of the line
+	    copybuffToBeShifted();
+	    input.buf[input.e++ % INPUT_BUF] = c;
+	    input.rightmost++;
+	    consputc(c);
+	    shiftbufright();
+	  }
+	  else {
+	    input.buf[input.e++ % INPUT_BUF] = c;
+	    input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+	    consputc(c);
+	  }
+	  if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
+	    saveCMDinHistoryMem(); // when enter is entered we saving that command to historyMem
+	    input.w = input.rightmost;
+	    wakeup(&input.r);
+	  }
+	}
+	break;
       }
-      break;
-    }
   }
   release(&cons.lock);
   if(doprocdump) {
@@ -232,6 +403,97 @@
   }
 }
 
+// this method eareases the current line from screen
+void
+earaseCurrentLineOnScreen(void){
+    uint numToEarase = input.rightmost - input.r;
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+          consputc(input.buf[input.e % INPUT_BUF]);
+          input.e++;
+        }
+    uint i;
+    for (i = 0; i < numToEarase; i++) {
+      consputc(BACKSPACE); // backspacing the whole line.
+    }
+}
+
+// this method copies the chars currently on display (and on Input.buf) to oldBuf and save its length on current_history_viewed.lengthOld
+void
+copybuffToBeShiftedToOldBuf(void){
+    lengthOfOldBuf = input.rightmost - input.r;
+    uint i;
+    for (i = 0; i < lengthOfOldBuf; i++) {
+        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
+    }
+
+}
+
+// this method earase all the content of the current command on the inputbuf
+void
+earaseContentOnInputBuf(){
+  input.rightmost = input.r;
+  input.e = input.r;
+}
+
+/*
+  this method will print the given buf on the screen
+*/
+void
+copyBufferToScreen(char * bufToPrintOnScreen, uint length){
+  uint i;
+  for (i = 0; i < length; i++) {
+    consputc(bufToPrintOnScreen[i]);
+  }
+}
+
+
+// this method will copy the given buf to Input.buf will set the input.e and input.rightmost assumes input.r=input.w=input.rightmost=input.e
+void
+copyBufferToInputBuf(char * bufToSaveInInput, uint length){
+  uint i;
+  for (i = 0; i < length; i++) {
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+  }
+  input.e = input.r+length;
+  input.rightmost = input.e;
+}
+
+// This method saves the current command into the historyMem
+void
+saveCMDinHistoryMem(){
+  HistoryMem.TotalCMDsInMem++; // counting the total no.of commands executed till now.
+  uint l = input.rightmost-input.r -1;
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+  HistoryMem.lengthsArr[HistoryMem.FinalCMdIndex] = l;
+  uint i;
+  for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
+    HistoryMem.CommandMemArr[HistoryMem.FinalCMdIndex][i] =  input.buf[(input.r+i)%INPUT_BUF];
+  }
+  return;
+}
+
+/*
+  this is the function that gets called by the sys_history and writes the requested command history in the buffer
+*/
+int history(char *buffer, int historyId) {
+  // this function returns command which was executed at historID+1 position in the stored MAX_HISTORY commands.
+  if (historyId < 0 || historyId > MAX_HISTORY - 1)
+    return -2;
+  if (historyId >= HistoryMem.TotalCMDsInMem )
+    return -1;
+  memset(buffer, '\0', INPUT_BUF);
+  uint temp;
+  if(HistoryMem.TotalCMDsInMem > MAX_HISTORY){
+    temp = HistoryMem.FinalCMdIndex - 1;
+  }
+  else{
+    temp = MAX_HISTORY - 1;
+  }
+  temp = (temp - historyId) % MAX_HISTORY;
+  memmove(buffer, HistoryMem.CommandMemArr[temp], HistoryMem.lengthsArr[temp]);
+  return 0;
+}
+
 int
 consoleread(struct inode *ip, char *dst, int n)
 {
@@ -295,5 +557,8 @@
   cons.locking = 1;
 
   ioapicenable(IRQ_KBD, 0);
+  HistoryMem.TotalCMDsInMem = 0;
+  HistoryMem.FinalCMdIndex = 0;
+  HistoryMem.currentPosition = -1;
 }
 
diff -ruN xv6-public/console.d xv6-public_task_1/console.d
--- xv6-public/console.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/console.d	2021-09-15 20:34:53.276380000 +0530
@@ -0,0 +1,3 @@
+console.o: console.c /usr/include/stdc-predef.h console.h types.h defs.h \
+ param.h traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h \
+ proc.h x86.h
diff -ruN xv6-public/console.h xv6-public_task_1/console.h
--- xv6-public/console.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/console.h	2021-09-14 22:22:57.459674000 +0530
@@ -0,0 +1,36 @@
+//constants used in console.c
+#define BACKSPACE 0x100
+#define CRTPORT 0x3d4
+#define INPUT_BUF 128
+#define UP_ARROW 226
+#define DOWN_ARROW 227
+#define LEFT_ARROW 228
+#define RIGHT_ARROW 229
+#define MAX_HISTORY 16
+
+#include "types.h"
+
+
+void
+earaseCurrentLineOnScreen(void);
+
+
+void
+copybuffToBeShiftedToOldBuf(void);
+
+
+
+void
+earaseContentOnInputBuf();
+
+void
+copyBufferToScreen(char * bufToPrintOnScreen, uint length);
+
+void
+copyBufferToInputBuf(char * bufToSaveInInput, uint length);
+
+
+void
+saveCMDinHistoryMem();
+
+int history(char *buffer, int historyId);
\ No newline at end of file
Binary files xv6-public/console.o and xv6-public_task_1/console.o differ
diff -ruN xv6-public/defs.h xv6-public_task_1/defs.h
--- xv6-public/defs.h	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/defs.h	2021-09-10 23:39:20.599253000 +0530
@@ -21,6 +21,7 @@
 void            cprintf(char*, ...);
 void            consoleintr(int(*)(void));
 void            panic(char*) __attribute__((noreturn));
+int             history(char* , int);
 
 // exec.c
 int             exec(char*, char**);
Binary files xv6-public/_Drawtest and xv6-public_task_1/_Drawtest differ
diff -ruN xv6-public/Drawtest.asm xv6-public_task_1/Drawtest.asm
--- xv6-public/Drawtest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/Drawtest.asm	2021-09-15 20:34:59.796369000 +0530
@@ -0,0 +1,1290 @@
+
+_Drawtest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+//maximum size of the buffer
+const int max_size = 1578;
+
+int main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 14             	sub    $0x14,%esp
+
+    void* k = malloc(100); int n;
+  18:	6a 64                	push   $0x64
+  1a:	e8 f1 06 00 00       	call   710 <malloc>
+  1f:	89 c6                	mov    %eax,%esi
+    // Taking buffer size from the user.
+    printf(1, "ENTER BUFFER SIZE : ");
+  21:	58                   	pop    %eax
+  22:	5a                   	pop    %edx
+  23:	68 18 08 00 00       	push   $0x818
+  28:	6a 01                	push   $0x1
+  2a:	e8 81 04 00 00       	call   4b0 <printf>
+    n = read(0, k, 100);
+  2f:	83 c4 0c             	add    $0xc,%esp
+  32:	6a 64                	push   $0x64
+  34:	56                   	push   %esi
+  35:	6a 00                	push   $0x0
+  37:	e8 1f 03 00 00       	call   35b <read>
+    if(n < 0) {
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	85 c0                	test   %eax,%eax
+  41:	78 7d                	js     c0 <main+0xc0>
+	printf(2, "read error\n");
+	exit();
+    }
+    char* size_str= (char*)k;
+    
+    uint size=0, i=0;
+  43:	31 db                	xor    %ebx,%ebx
+    while(i<n-1){
+  45:	83 f8 01             	cmp    $0x1,%eax
+  48:	74 1f                	je     69 <main+0x69>
+  4a:	89 f2                	mov    %esi,%edx
+  4c:	8d 7c 06 ff          	lea    -0x1(%esi,%eax,1),%edi
+    uint size=0, i=0;
+  50:	31 db                	xor    %ebx,%ebx
+  52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    	size = 10*size + (int) size_str[i]-48;
+  58:	0f be 02             	movsbl (%edx),%eax
+  5b:	8d 0c 9b             	lea    (%ebx,%ebx,4),%ecx
+  5e:	83 c2 01             	add    $0x1,%edx
+  61:	8d 5c 48 d0          	lea    -0x30(%eax,%ecx,2),%ebx
+    while(i<n-1){
+  65:	39 fa                	cmp    %edi,%edx
+  67:	75 ef                	jne    58 <main+0x58>
+	i++;
+    }
+    // Created a buffer with maximum size as size
+    void *draw_buffer = malloc(size);
+  69:	83 ec 0c             	sub    $0xc,%esp
+  6c:	53                   	push   %ebx
+  6d:	e8 9e 06 00 00       	call   710 <malloc>
+
+    // Called the system call and stored the size of image.
+    int draw_size = draw(draw_buffer,size);
+  72:	59                   	pop    %ecx
+    void *draw_buffer = malloc(size);
+  73:	89 c7                	mov    %eax,%edi
+    int draw_size = draw(draw_buffer,size);
+  75:	58                   	pop    %eax
+  76:	53                   	push   %ebx
+  77:	57                   	push   %edi
+  78:	e8 66 03 00 00       	call   3e3 <draw>
+
+    // If the size of image is in buffer is greater than size then print a error message
+    if (draw_size == -1)
+  7d:	83 c4 10             	add    $0x10,%esp
+  80:	83 f8 ff             	cmp    $0xffffffff,%eax
+  83:	74 28                	je     ad <main+0xad>
+        // file descriptor 1 used to print on the standard output i.e (stdout)
+        printf(1, "Buffer size is too small\n");
+    }
+    else
+    {
+        printf(1, "%s\n", (char *)draw_buffer);
+  85:	50                   	push   %eax
+  86:	57                   	push   %edi
+  87:	68 53 08 00 00       	push   $0x853
+  8c:	6a 01                	push   $0x1
+  8e:	e8 1d 04 00 00       	call   4b0 <printf>
+  93:	83 c4 10             	add    $0x10,%esp
+        
+    }
+    free(k); // Deallocating buffer which was used to take buffer size from the user.
+  96:	83 ec 0c             	sub    $0xc,%esp
+  99:	56                   	push   %esi
+  9a:	e8 e1 05 00 00       	call   680 <free>
+
+    return 0;
+}
+  9f:	8d 65 f0             	lea    -0x10(%ebp),%esp
+  a2:	31 c0                	xor    %eax,%eax
+  a4:	59                   	pop    %ecx
+  a5:	5b                   	pop    %ebx
+  a6:	5e                   	pop    %esi
+  a7:	5f                   	pop    %edi
+  a8:	5d                   	pop    %ebp
+  a9:	8d 61 fc             	lea    -0x4(%ecx),%esp
+  ac:	c3                   	ret    
+        printf(1, "Buffer size is too small\n");
+  ad:	52                   	push   %edx
+  ae:	52                   	push   %edx
+  af:	68 39 08 00 00       	push   $0x839
+  b4:	6a 01                	push   $0x1
+  b6:	e8 f5 03 00 00       	call   4b0 <printf>
+  bb:	83 c4 10             	add    $0x10,%esp
+  be:	eb d6                	jmp    96 <main+0x96>
+	printf(2, "read error\n");
+  c0:	50                   	push   %eax
+  c1:	50                   	push   %eax
+  c2:	68 2d 08 00 00       	push   $0x82d
+  c7:	6a 02                	push   $0x2
+  c9:	e8 e2 03 00 00       	call   4b0 <printf>
+	exit();
+  ce:	e8 70 02 00 00       	call   343 <exit>
+  d3:	66 90                	xchg   %ax,%ax
+  d5:	66 90                	xchg   %ax,%ax
+  d7:	66 90                	xchg   %ax,%ax
+  d9:	66 90                	xchg   %ax,%ax
+  db:	66 90                	xchg   %ax,%ax
+  dd:	66 90                	xchg   %ax,%ax
+  df:	90                   	nop
+
+000000e0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  e0:	f3 0f 1e fb          	endbr32 
+  e4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  e5:	31 c0                	xor    %eax,%eax
+{
+  e7:	89 e5                	mov    %esp,%ebp
+  e9:	53                   	push   %ebx
+  ea:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ed:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  f0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  f4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  f7:	83 c0 01             	add    $0x1,%eax
+  fa:	84 d2                	test   %dl,%dl
+  fc:	75 f2                	jne    f0 <strcpy+0x10>
+    ;
+  return os;
+}
+  fe:	89 c8                	mov    %ecx,%eax
+ 100:	5b                   	pop    %ebx
+ 101:	5d                   	pop    %ebp
+ 102:	c3                   	ret    
+ 103:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000110 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	53                   	push   %ebx
+ 118:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 11b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 11e:	0f b6 01             	movzbl (%ecx),%eax
+ 121:	0f b6 1a             	movzbl (%edx),%ebx
+ 124:	84 c0                	test   %al,%al
+ 126:	75 19                	jne    141 <strcmp+0x31>
+ 128:	eb 26                	jmp    150 <strcmp+0x40>
+ 12a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 130:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 134:	83 c1 01             	add    $0x1,%ecx
+ 137:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 13a:	0f b6 1a             	movzbl (%edx),%ebx
+ 13d:	84 c0                	test   %al,%al
+ 13f:	74 0f                	je     150 <strcmp+0x40>
+ 141:	38 d8                	cmp    %bl,%al
+ 143:	74 eb                	je     130 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 145:	29 d8                	sub    %ebx,%eax
+}
+ 147:	5b                   	pop    %ebx
+ 148:	5d                   	pop    %ebp
+ 149:	c3                   	ret    
+ 14a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 150:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 152:	29 d8                	sub    %ebx,%eax
+}
+ 154:	5b                   	pop    %ebx
+ 155:	5d                   	pop    %ebp
+ 156:	c3                   	ret    
+ 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15e:	66 90                	xchg   %ax,%ax
+
+00000160 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 16a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 16d:	74 21                	je     190 <strlen+0x30>
+ 16f:	31 c0                	xor    %eax,%eax
+ 171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 178:	83 c0 01             	add    $0x1,%eax
+ 17b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 17f:	89 c1                	mov    %eax,%ecx
+ 181:	75 f5                	jne    178 <strlen+0x18>
+    ;
+  return n;
+}
+ 183:	89 c8                	mov    %ecx,%eax
+ 185:	5d                   	pop    %ebp
+ 186:	c3                   	ret    
+ 187:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 190:	31 c9                	xor    %ecx,%ecx
+}
+ 192:	5d                   	pop    %ebp
+ 193:	89 c8                	mov    %ecx,%eax
+ 195:	c3                   	ret    
+ 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001a0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1ab:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ae:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1b1:	89 d7                	mov    %edx,%edi
+ 1b3:	fc                   	cld    
+ 1b4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1b6:	89 d0                	mov    %edx,%eax
+ 1b8:	5f                   	pop    %edi
+ 1b9:	5d                   	pop    %ebp
+ 1ba:	c3                   	ret    
+ 1bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1ca:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1ce:	0f b6 10             	movzbl (%eax),%edx
+ 1d1:	84 d2                	test   %dl,%dl
+ 1d3:	75 16                	jne    1eb <strchr+0x2b>
+ 1d5:	eb 21                	jmp    1f8 <strchr+0x38>
+ 1d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1de:	66 90                	xchg   %ax,%ax
+ 1e0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1e4:	83 c0 01             	add    $0x1,%eax
+ 1e7:	84 d2                	test   %dl,%dl
+ 1e9:	74 0d                	je     1f8 <strchr+0x38>
+    if(*s == c)
+ 1eb:	38 d1                	cmp    %dl,%cl
+ 1ed:	75 f1                	jne    1e0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 1f8:	31 c0                	xor    %eax,%eax
+}
+ 1fa:	5d                   	pop    %ebp
+ 1fb:	c3                   	ret    
+ 1fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	57                   	push   %edi
+ 208:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 209:	31 f6                	xor    %esi,%esi
+{
+ 20b:	53                   	push   %ebx
+ 20c:	89 f3                	mov    %esi,%ebx
+ 20e:	83 ec 1c             	sub    $0x1c,%esp
+ 211:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 214:	eb 33                	jmp    249 <gets+0x49>
+ 216:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 220:	83 ec 04             	sub    $0x4,%esp
+ 223:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 226:	6a 01                	push   $0x1
+ 228:	50                   	push   %eax
+ 229:	6a 00                	push   $0x0
+ 22b:	e8 2b 01 00 00       	call   35b <read>
+    if(cc < 1)
+ 230:	83 c4 10             	add    $0x10,%esp
+ 233:	85 c0                	test   %eax,%eax
+ 235:	7e 1c                	jle    253 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 237:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 23b:	83 c7 01             	add    $0x1,%edi
+ 23e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 241:	3c 0a                	cmp    $0xa,%al
+ 243:	74 23                	je     268 <gets+0x68>
+ 245:	3c 0d                	cmp    $0xd,%al
+ 247:	74 1f                	je     268 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 249:	83 c3 01             	add    $0x1,%ebx
+ 24c:	89 fe                	mov    %edi,%esi
+ 24e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 251:	7c cd                	jl     220 <gets+0x20>
+ 253:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 255:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 258:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 25b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 25e:	5b                   	pop    %ebx
+ 25f:	5e                   	pop    %esi
+ 260:	5f                   	pop    %edi
+ 261:	5d                   	pop    %ebp
+ 262:	c3                   	ret    
+ 263:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 267:	90                   	nop
+ 268:	8b 75 08             	mov    0x8(%ebp),%esi
+ 26b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 26e:	01 de                	add    %ebx,%esi
+ 270:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 272:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 275:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 278:	5b                   	pop    %ebx
+ 279:	5e                   	pop    %esi
+ 27a:	5f                   	pop    %edi
+ 27b:	5d                   	pop    %ebp
+ 27c:	c3                   	ret    
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000280 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 280:	f3 0f 1e fb          	endbr32 
+ 284:	55                   	push   %ebp
+ 285:	89 e5                	mov    %esp,%ebp
+ 287:	56                   	push   %esi
+ 288:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 289:	83 ec 08             	sub    $0x8,%esp
+ 28c:	6a 00                	push   $0x0
+ 28e:	ff 75 08             	pushl  0x8(%ebp)
+ 291:	e8 ed 00 00 00       	call   383 <open>
+  if(fd < 0)
+ 296:	83 c4 10             	add    $0x10,%esp
+ 299:	85 c0                	test   %eax,%eax
+ 29b:	78 2b                	js     2c8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 29d:	83 ec 08             	sub    $0x8,%esp
+ 2a0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2a3:	89 c3                	mov    %eax,%ebx
+ 2a5:	50                   	push   %eax
+ 2a6:	e8 f0 00 00 00       	call   39b <fstat>
+  close(fd);
+ 2ab:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ae:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2b0:	e8 b6 00 00 00       	call   36b <close>
+  return r;
+ 2b5:	83 c4 10             	add    $0x10,%esp
+}
+ 2b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2bb:	89 f0                	mov    %esi,%eax
+ 2bd:	5b                   	pop    %ebx
+ 2be:	5e                   	pop    %esi
+ 2bf:	5d                   	pop    %ebp
+ 2c0:	c3                   	ret    
+ 2c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2c8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2cd:	eb e9                	jmp    2b8 <stat+0x38>
+ 2cf:	90                   	nop
+
+000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	f3 0f 1e fb          	endbr32 
+ 2d4:	55                   	push   %ebp
+ 2d5:	89 e5                	mov    %esp,%ebp
+ 2d7:	53                   	push   %ebx
+ 2d8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2db:	0f be 02             	movsbl (%edx),%eax
+ 2de:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2e1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2e4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2e9:	77 1a                	ja     305 <atoi+0x35>
+ 2eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ef:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 2f0:	83 c2 01             	add    $0x1,%edx
+ 2f3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2f6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2fa:	0f be 02             	movsbl (%edx),%eax
+ 2fd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 300:	80 fb 09             	cmp    $0x9,%bl
+ 303:	76 eb                	jbe    2f0 <atoi+0x20>
+  return n;
+}
+ 305:	89 c8                	mov    %ecx,%eax
+ 307:	5b                   	pop    %ebx
+ 308:	5d                   	pop    %ebp
+ 309:	c3                   	ret    
+ 30a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000310 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 310:	f3 0f 1e fb          	endbr32 
+ 314:	55                   	push   %ebp
+ 315:	89 e5                	mov    %esp,%ebp
+ 317:	57                   	push   %edi
+ 318:	8b 45 10             	mov    0x10(%ebp),%eax
+ 31b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 31e:	56                   	push   %esi
+ 31f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 322:	85 c0                	test   %eax,%eax
+ 324:	7e 0f                	jle    335 <memmove+0x25>
+ 326:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 328:	89 d7                	mov    %edx,%edi
+ 32a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 330:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 331:	39 f8                	cmp    %edi,%eax
+ 333:	75 fb                	jne    330 <memmove+0x20>
+  return vdst;
+}
+ 335:	5e                   	pop    %esi
+ 336:	89 d0                	mov    %edx,%eax
+ 338:	5f                   	pop    %edi
+ 339:	5d                   	pop    %ebp
+ 33a:	c3                   	ret    
+
+0000033b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 33b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <exit>:
+SYSCALL(exit)
+ 343:	b8 02 00 00 00       	mov    $0x2,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <wait>:
+SYSCALL(wait)
+ 34b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <pipe>:
+SYSCALL(pipe)
+ 353:	b8 04 00 00 00       	mov    $0x4,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <read>:
+SYSCALL(read)
+ 35b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <write>:
+SYSCALL(write)
+ 363:	b8 10 00 00 00       	mov    $0x10,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <close>:
+SYSCALL(close)
+ 36b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <kill>:
+SYSCALL(kill)
+ 373:	b8 06 00 00 00       	mov    $0x6,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <exec>:
+SYSCALL(exec)
+ 37b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <open>:
+SYSCALL(open)
+ 383:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <mknod>:
+SYSCALL(mknod)
+ 38b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <unlink>:
+SYSCALL(unlink)
+ 393:	b8 12 00 00 00       	mov    $0x12,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <fstat>:
+SYSCALL(fstat)
+ 39b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <link>:
+SYSCALL(link)
+ 3a3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <mkdir>:
+SYSCALL(mkdir)
+ 3ab:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <chdir>:
+SYSCALL(chdir)
+ 3b3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <dup>:
+SYSCALL(dup)
+ 3bb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getpid>:
+SYSCALL(getpid)
+ 3c3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <sbrk>:
+SYSCALL(sbrk)
+ 3cb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <sleep>:
+SYSCALL(sleep)
+ 3d3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <uptime>:
+SYSCALL(uptime)
+ 3db:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <draw>:
+SYSCALL(draw)
+ 3e3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <history>:
+ 3eb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+ 3f3:	66 90                	xchg   %ax,%ax
+ 3f5:	66 90                	xchg   %ax,%ax
+ 3f7:	66 90                	xchg   %ax,%ax
+ 3f9:	66 90                	xchg   %ax,%ax
+ 3fb:	66 90                	xchg   %ax,%ax
+ 3fd:	66 90                	xchg   %ax,%ax
+ 3ff:	90                   	nop
+
+00000400 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+ 406:	83 ec 3c             	sub    $0x3c,%esp
+ 409:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 40c:	89 d1                	mov    %edx,%ecx
+{
+ 40e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 411:	85 d2                	test   %edx,%edx
+ 413:	0f 89 7f 00 00 00    	jns    498 <printint+0x98>
+ 419:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 41d:	74 79                	je     498 <printint+0x98>
+    neg = 1;
+ 41f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 426:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 428:	31 db                	xor    %ebx,%ebx
+ 42a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 430:	89 c8                	mov    %ecx,%eax
+ 432:	31 d2                	xor    %edx,%edx
+ 434:	89 cf                	mov    %ecx,%edi
+ 436:	f7 75 c4             	divl   -0x3c(%ebp)
+ 439:	0f b6 92 64 08 00 00 	movzbl 0x864(%edx),%edx
+ 440:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 443:	89 d8                	mov    %ebx,%eax
+ 445:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 448:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 44b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 44e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 451:	76 dd                	jbe    430 <printint+0x30>
+  if(neg)
+ 453:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 456:	85 c9                	test   %ecx,%ecx
+ 458:	74 0c                	je     466 <printint+0x66>
+    buf[i++] = '-';
+ 45a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 45f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 461:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 466:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 469:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 46d:	eb 07                	jmp    476 <printint+0x76>
+ 46f:	90                   	nop
+ 470:	0f b6 13             	movzbl (%ebx),%edx
+ 473:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 476:	83 ec 04             	sub    $0x4,%esp
+ 479:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 47c:	6a 01                	push   $0x1
+ 47e:	56                   	push   %esi
+ 47f:	57                   	push   %edi
+ 480:	e8 de fe ff ff       	call   363 <write>
+  while(--i >= 0)
+ 485:	83 c4 10             	add    $0x10,%esp
+ 488:	39 de                	cmp    %ebx,%esi
+ 48a:	75 e4                	jne    470 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 48c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 48f:	5b                   	pop    %ebx
+ 490:	5e                   	pop    %esi
+ 491:	5f                   	pop    %edi
+ 492:	5d                   	pop    %ebp
+ 493:	c3                   	ret    
+ 494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 498:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 49f:	eb 87                	jmp    428 <printint+0x28>
+ 4a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4af:	90                   	nop
+
+000004b0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4b0:	f3 0f 1e fb          	endbr32 
+ 4b4:	55                   	push   %ebp
+ 4b5:	89 e5                	mov    %esp,%ebp
+ 4b7:	57                   	push   %edi
+ 4b8:	56                   	push   %esi
+ 4b9:	53                   	push   %ebx
+ 4ba:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4bd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4c0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4c3:	84 db                	test   %bl,%bl
+ 4c5:	0f 84 b4 00 00 00    	je     57f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4cb:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4ce:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4d1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4d4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4d6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4d9:	eb 33                	jmp    50e <printf+0x5e>
+ 4db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
+ 4e0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4e3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	74 17                	je     504 <printf+0x54>
+  write(fd, &c, 1);
+ 4ed:	83 ec 04             	sub    $0x4,%esp
+ 4f0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 65 fe ff ff       	call   363 <write>
+ 4fe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 501:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 504:	0f b6 1e             	movzbl (%esi),%ebx
+ 507:	83 c6 01             	add    $0x1,%esi
+ 50a:	84 db                	test   %bl,%bl
+ 50c:	74 71                	je     57f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 50e:	0f be cb             	movsbl %bl,%ecx
+ 511:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 514:	85 d2                	test   %edx,%edx
+ 516:	74 c8                	je     4e0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 518:	83 fa 25             	cmp    $0x25,%edx
+ 51b:	75 e7                	jne    504 <printf+0x54>
+      if(c == 'd'){
+ 51d:	83 f8 64             	cmp    $0x64,%eax
+ 520:	0f 84 9a 00 00 00    	je     5c0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 526:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 52c:	83 f9 70             	cmp    $0x70,%ecx
+ 52f:	74 5f                	je     590 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 531:	83 f8 73             	cmp    $0x73,%eax
+ 534:	0f 84 d6 00 00 00    	je     610 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 53a:	83 f8 63             	cmp    $0x63,%eax
+ 53d:	0f 84 8d 00 00 00    	je     5d0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 543:	83 f8 25             	cmp    $0x25,%eax
+ 546:	0f 84 b4 00 00 00    	je     600 <printf+0x150>
+  write(fd, &c, 1);
+ 54c:	83 ec 04             	sub    $0x4,%esp
+ 54f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 553:	6a 01                	push   $0x1
+ 555:	57                   	push   %edi
+ 556:	ff 75 08             	pushl  0x8(%ebp)
+ 559:	e8 05 fe ff ff       	call   363 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 55e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 561:	83 c4 0c             	add    $0xc,%esp
+ 564:	6a 01                	push   $0x1
+ 566:	83 c6 01             	add    $0x1,%esi
+ 569:	57                   	push   %edi
+ 56a:	ff 75 08             	pushl  0x8(%ebp)
+ 56d:	e8 f1 fd ff ff       	call   363 <write>
+  for(i = 0; fmt[i]; i++){
+ 572:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 576:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 579:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 57b:	84 db                	test   %bl,%bl
+ 57d:	75 8f                	jne    50e <printf+0x5e>
+    }
+  }
+}
+ 57f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 582:	5b                   	pop    %ebx
+ 583:	5e                   	pop    %esi
+ 584:	5f                   	pop    %edi
+ 585:	5d                   	pop    %ebp
+ 586:	c3                   	ret    
+ 587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 598:	6a 00                	push   $0x0
+ 59a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 59d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5a0:	8b 13                	mov    (%ebx),%edx
+ 5a2:	e8 59 fe ff ff       	call   400 <printint>
+        ap++;
+ 5a7:	89 d8                	mov    %ebx,%eax
+ 5a9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ac:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5ae:	83 c0 04             	add    $0x4,%eax
+ 5b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5b4:	e9 4b ff ff ff       	jmp    504 <printf+0x54>
+ 5b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	eb ce                	jmp    59a <printf+0xea>
+ 5cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5d6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5d8:	6a 01                	push   $0x1
+        ap++;
+ 5da:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5dd:	57                   	push   %edi
+ 5de:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5e1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e4:	e8 7a fd ff ff       	call   363 <write>
+        ap++;
+ 5e9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5ec:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ef:	31 d2                	xor    %edx,%edx
+ 5f1:	e9 0e ff ff ff       	jmp    504 <printf+0x54>
+ 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 600:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 603:	83 ec 04             	sub    $0x4,%esp
+ 606:	e9 59 ff ff ff       	jmp    564 <printf+0xb4>
+ 60b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 60f:	90                   	nop
+        s = (char*)*ap;
+ 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 613:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 615:	83 c0 04             	add    $0x4,%eax
+ 618:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 61b:	85 db                	test   %ebx,%ebx
+ 61d:	74 17                	je     636 <printf+0x186>
+        while(*s != 0){
+ 61f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 622:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 624:	84 c0                	test   %al,%al
+ 626:	0f 84 d8 fe ff ff    	je     504 <printf+0x54>
+ 62c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 62f:	89 de                	mov    %ebx,%esi
+ 631:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 634:	eb 1a                	jmp    650 <printf+0x1a0>
+          s = "(null)";
+ 636:	bb 5c 08 00 00       	mov    $0x85c,%ebx
+        while(*s != 0){
+ 63b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 63e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 643:	89 de                	mov    %ebx,%esi
+ 645:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64f:	90                   	nop
+  write(fd, &c, 1);
+ 650:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 653:	83 c6 01             	add    $0x1,%esi
+ 656:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 659:	6a 01                	push   $0x1
+ 65b:	57                   	push   %edi
+ 65c:	53                   	push   %ebx
+ 65d:	e8 01 fd ff ff       	call   363 <write>
+        while(*s != 0){
+ 662:	0f b6 06             	movzbl (%esi),%eax
+ 665:	83 c4 10             	add    $0x10,%esp
+ 668:	84 c0                	test   %al,%al
+ 66a:	75 e4                	jne    650 <printf+0x1a0>
+ 66c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 66f:	31 d2                	xor    %edx,%edx
+ 671:	e9 8e fe ff ff       	jmp    504 <printf+0x54>
+ 676:	66 90                	xchg   %ax,%ax
+ 678:	66 90                	xchg   %ax,%ax
+ 67a:	66 90                	xchg   %ax,%ax
+ 67c:	66 90                	xchg   %ax,%ax
+ 67e:	66 90                	xchg   %ax,%ax
+
+00000680 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 680:	f3 0f 1e fb          	endbr32 
+ 684:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 685:	a1 30 0b 00 00       	mov    0xb30,%eax
+{
+ 68a:	89 e5                	mov    %esp,%ebp
+ 68c:	57                   	push   %edi
+ 68d:	56                   	push   %esi
+ 68e:	53                   	push   %ebx
+ 68f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 692:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 694:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 697:	39 c8                	cmp    %ecx,%eax
+ 699:	73 15                	jae    6b0 <free+0x30>
+ 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 69f:	90                   	nop
+ 6a0:	39 d1                	cmp    %edx,%ecx
+ 6a2:	72 14                	jb     6b8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a4:	39 d0                	cmp    %edx,%eax
+ 6a6:	73 10                	jae    6b8 <free+0x38>
+{
+ 6a8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6aa:	8b 10                	mov    (%eax),%edx
+ 6ac:	39 c8                	cmp    %ecx,%eax
+ 6ae:	72 f0                	jb     6a0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b0:	39 d0                	cmp    %edx,%eax
+ 6b2:	72 f4                	jb     6a8 <free+0x28>
+ 6b4:	39 d1                	cmp    %edx,%ecx
+ 6b6:	73 f0                	jae    6a8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6be:	39 fa                	cmp    %edi,%edx
+ 6c0:	74 1e                	je     6e0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6c2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6c5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6c8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6cb:	39 f1                	cmp    %esi,%ecx
+ 6cd:	74 28                	je     6f7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6cf:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6d1:	5b                   	pop    %ebx
+  freep = p;
+ 6d2:	a3 30 0b 00 00       	mov    %eax,0xb30
+}
+ 6d7:	5e                   	pop    %esi
+ 6d8:	5f                   	pop    %edi
+ 6d9:	5d                   	pop    %ebp
+ 6da:	c3                   	ret    
+ 6db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6df:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6e0:	03 72 04             	add    0x4(%edx),%esi
+ 6e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e6:	8b 10                	mov    (%eax),%edx
+ 6e8:	8b 12                	mov    (%edx),%edx
+ 6ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ed:	8b 50 04             	mov    0x4(%eax),%edx
+ 6f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6f3:	39 f1                	cmp    %esi,%ecx
+ 6f5:	75 d8                	jne    6cf <free+0x4f>
+    p->s.size += bp->s.size;
+ 6f7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 6fa:	a3 30 0b 00 00       	mov    %eax,0xb30
+    p->s.size += bp->s.size;
+ 6ff:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 702:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 705:	89 10                	mov    %edx,(%eax)
+}
+ 707:	5b                   	pop    %ebx
+ 708:	5e                   	pop    %esi
+ 709:	5f                   	pop    %edi
+ 70a:	5d                   	pop    %ebp
+ 70b:	c3                   	ret    
+ 70c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000710 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 710:	f3 0f 1e fb          	endbr32 
+ 714:	55                   	push   %ebp
+ 715:	89 e5                	mov    %esp,%ebp
+ 717:	57                   	push   %edi
+ 718:	56                   	push   %esi
+ 719:	53                   	push   %ebx
+ 71a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 71d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 720:	8b 3d 30 0b 00 00    	mov    0xb30,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 726:	8d 70 07             	lea    0x7(%eax),%esi
+ 729:	c1 ee 03             	shr    $0x3,%esi
+ 72c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 72f:	85 ff                	test   %edi,%edi
+ 731:	0f 84 a9 00 00 00    	je     7e0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 737:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 739:	8b 48 04             	mov    0x4(%eax),%ecx
+ 73c:	39 f1                	cmp    %esi,%ecx
+ 73e:	73 6d                	jae    7ad <malloc+0x9d>
+ 740:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 746:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 74b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 74e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 755:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 758:	eb 17                	jmp    771 <malloc+0x61>
+ 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 760:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 762:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 765:	39 f1                	cmp    %esi,%ecx
+ 767:	73 4f                	jae    7b8 <malloc+0xa8>
+ 769:	8b 3d 30 0b 00 00    	mov    0xb30,%edi
+ 76f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 771:	39 c7                	cmp    %eax,%edi
+ 773:	75 eb                	jne    760 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 775:	83 ec 0c             	sub    $0xc,%esp
+ 778:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 77b:	e8 4b fc ff ff       	call   3cb <sbrk>
+  if(p == (char*)-1)
+ 780:	83 c4 10             	add    $0x10,%esp
+ 783:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 786:	74 1b                	je     7a3 <malloc+0x93>
+  hp->s.size = nu;
+ 788:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 78b:	83 ec 0c             	sub    $0xc,%esp
+ 78e:	83 c0 08             	add    $0x8,%eax
+ 791:	50                   	push   %eax
+ 792:	e8 e9 fe ff ff       	call   680 <free>
+  return freep;
+ 797:	a1 30 0b 00 00       	mov    0xb30,%eax
+      if((p = morecore(nunits)) == 0)
+ 79c:	83 c4 10             	add    $0x10,%esp
+ 79f:	85 c0                	test   %eax,%eax
+ 7a1:	75 bd                	jne    760 <malloc+0x50>
+        return 0;
+  }
+}
+ 7a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7a6:	31 c0                	xor    %eax,%eax
+}
+ 7a8:	5b                   	pop    %ebx
+ 7a9:	5e                   	pop    %esi
+ 7aa:	5f                   	pop    %edi
+ 7ab:	5d                   	pop    %ebp
+ 7ac:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7ad:	89 c2                	mov    %eax,%edx
+ 7af:	89 f8                	mov    %edi,%eax
+ 7b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7b8:	39 ce                	cmp    %ecx,%esi
+ 7ba:	74 54                	je     810 <malloc+0x100>
+        p->s.size -= nunits;
+ 7bc:	29 f1                	sub    %esi,%ecx
+ 7be:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7c1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7c4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7c7:	a3 30 0b 00 00       	mov    %eax,0xb30
+}
+ 7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7cf:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 7d2:	5b                   	pop    %ebx
+ 7d3:	5e                   	pop    %esi
+ 7d4:	5f                   	pop    %edi
+ 7d5:	5d                   	pop    %ebp
+ 7d6:	c3                   	ret    
+ 7d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7de:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7e0:	c7 05 30 0b 00 00 34 	movl   $0xb34,0xb30
+ 7e7:	0b 00 00 
+    base.s.size = 0;
+ 7ea:	bf 34 0b 00 00       	mov    $0xb34,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7ef:	c7 05 34 0b 00 00 34 	movl   $0xb34,0xb34
+ 7f6:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7f9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 7fb:	c7 05 38 0b 00 00 00 	movl   $0x0,0xb38
+ 802:	00 00 00 
+    if(p->s.size >= nunits){
+ 805:	e9 36 ff ff ff       	jmp    740 <malloc+0x30>
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 810:	8b 0a                	mov    (%edx),%ecx
+ 812:	89 08                	mov    %ecx,(%eax)
+ 814:	eb b1                	jmp    7c7 <malloc+0xb7>
diff -ruN xv6-public/Drawtest.c xv6-public_task_1/Drawtest.c
--- xv6-public/Drawtest.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/Drawtest.c	2021-08-20 16:18:38.412727000 +0530
@@ -0,0 +1,46 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+//maximum size of the buffer
+const int max_size = 1578;
+
+int main(void)
+{
+
+    void* k = malloc(100); int n;
+    // Taking buffer size from the user.
+    printf(1, "ENTER BUFFER SIZE : ");
+    n = read(0, k, 100);
+    if(n < 0) {
+	printf(2, "read error\n");
+	exit();
+    }
+    char* size_str= (char*)k;
+    
+    uint size=0, i=0;
+    while(i<n-1){
+    	size = 10*size + (int) size_str[i]-48;
+	i++;
+    }
+    // Created a buffer with maximum size as size
+    void *draw_buffer = malloc(size);
+
+    // Called the system call and stored the size of image.
+    int draw_size = draw(draw_buffer,size);
+
+    // If the size of image is in buffer is greater than size then print a error message
+    if (draw_size == -1)
+    {
+        // file descriptor 1 used to print on the standard output i.e (stdout)
+        printf(1, "Buffer size is too small\n");
+    }
+    else
+    {
+        printf(1, "%s\n", (char *)draw_buffer);
+        
+    }
+    free(k); // Deallocating buffer which was used to take buffer size from the user.
+
+    return 0;
+}
diff -ruN xv6-public/Drawtest.d xv6-public_task_1/Drawtest.d
--- xv6-public/Drawtest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/Drawtest.d	2021-09-15 20:34:59.756369000 +0530
@@ -0,0 +1 @@
+Drawtest.o: Drawtest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/Drawtest.o and xv6-public_task_1/Drawtest.o differ
diff -ruN xv6-public/Drawtest.sym xv6-public_task_1/Drawtest.sym
--- xv6-public/Drawtest.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/Drawtest.sym	2021-09-15 20:34:59.800369000 +0530
@@ -0,0 +1,60 @@
+00000000 .text
+00000818 .rodata
+00000878 .eh_frame
+00000b30 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 Drawtest.c
+00000000 ulib.c
+00000000 printf.c
+00000400 printint
+00000864 digits.1091
+00000000 umalloc.c
+00000b30 freep
+00000b34 base
+000000e0 strcpy
+000004b0 printf
+00000310 memmove
+0000038b mknod
+00000200 gets
+000003c3 getpid
+00000710 malloc
+000003d3 sleep
+00000858 max_size
+00000353 pipe
+00000363 write
+000003eb history
+0000039b fstat
+00000373 kill
+000003b3 chdir
+0000037b exec
+0000034b wait
+0000035b read
+00000393 unlink
+0000033b fork
+000003cb sbrk
+000003db uptime
+00000b30 __bss_start
+000001a0 memset
+00000000 main
+00000110 strcmp
+000003bb dup
+00000280 stat
+00000b30 _edata
+00000b3c _end
+000003a3 link
+00000343 exit
+000002d0 atoi
+000003e3 draw
+00000160 strlen
+00000383 open
+000001c0 strchr
+000003ab mkdir
+0000036b close
+00000680 free
Binary files xv6-public/_echo and xv6-public_task_1/_echo differ
diff -ruN xv6-public/echo.asm xv6-public_task_1/echo.asm
--- xv6-public/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/echo.asm	2021-09-15 20:34:57.484373000 +0530
@@ -0,0 +1,1210 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  for(i = 1; i < argc; i++)
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 4b                	jle    6c <main+0x6c>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  27:	83 c3 04             	add    $0x4,%ebx
+  2a:	8b 43 fc             	mov    -0x4(%ebx),%eax
+  2d:	39 f3                	cmp    %esi,%ebx
+  2f:	74 26                	je     57 <main+0x57>
+  31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  38:	68 b8 07 00 00       	push   $0x7b8
+  3d:	83 c3 04             	add    $0x4,%ebx
+  40:	50                   	push   %eax
+  41:	68 ba 07 00 00       	push   $0x7ba
+  46:	6a 01                	push   $0x1
+  48:	e8 03 04 00 00       	call   450 <printf>
+  for(i = 1; i < argc; i++)
+  4d:	8b 43 fc             	mov    -0x4(%ebx),%eax
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  50:	83 c4 10             	add    $0x10,%esp
+  53:	39 f3                	cmp    %esi,%ebx
+  55:	75 e1                	jne    38 <main+0x38>
+  57:	68 bf 07 00 00       	push   $0x7bf
+  5c:	50                   	push   %eax
+  5d:	68 ba 07 00 00       	push   $0x7ba
+  62:	6a 01                	push   $0x1
+  64:	e8 e7 03 00 00       	call   450 <printf>
+  69:	83 c4 10             	add    $0x10,%esp
+  exit();
+  6c:	e8 72 02 00 00       	call   2e3 <exit>
+  71:	66 90                	xchg   %ax,%ax
+  73:	66 90                	xchg   %ax,%ax
+  75:	66 90                	xchg   %ax,%ax
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <draw>:
+SYSCALL(draw)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <history>:
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+ 393:	66 90                	xchg   %ax,%ax
+ 395:	66 90                	xchg   %ax,%ax
+ 397:	66 90                	xchg   %ax,%ax
+ 399:	66 90                	xchg   %ax,%ax
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 c8 07 00 00 	movzbl 0x7c8(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 de fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 474:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 65 fe ff ff       	call   303 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
+      if(c == 'd'){
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
+  write(fd, &c, 1);
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 05 fe ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 f1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 516:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 519:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
+    }
+  }
+}
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+        ap++;
+ 57a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 584:	e8 7a fd ff ff       	call   303 <write>
+        ap++;
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        s = (char*)*ap;
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
+        while(*s != 0){
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
+          s = "(null)";
+ 5d6:	bb c1 07 00 00       	mov    $0x7c1,%ebx
+        while(*s != 0){
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 01 fd ff ff       	call   303 <write>
+        while(*s != 0){
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 625:	a1 78 0a 00 00       	mov    0xa78,%eax
+{
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
+{
+ 648:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 671:	5b                   	pop    %ebx
+  freep = p;
+ 672:	a3 78 0a 00 00       	mov    %eax,0xa78
+}
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 78 0a 00 00       	mov    %eax,0xa78
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6c0:	8b 3d 78 0a 00 00    	mov    0xa78,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 700:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d 78 0a 00 00    	mov    0xa78,%edi
+ 70f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 4b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
+  hp->s.size = nu;
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
+  return freep;
+ 737:	a1 78 0a 00 00       	mov    0xa78,%eax
+      if((p = morecore(nunits)) == 0)
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
+        return 0;
+  }
+}
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 746:	31 c0                	xor    %eax,%eax
+}
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
+        p->s.size -= nunits;
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 767:	a3 78 0a 00 00       	mov    %eax,0xa78
+}
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 78 0a 00 00 7c 	movl   $0xa7c,0xa78
+ 787:	0a 00 00 
+    base.s.size = 0;
+ 78a:	bf 7c 0a 00 00       	mov    $0xa7c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 78f:	c7 05 7c 0a 00 00 7c 	movl   $0xa7c,0xa7c
+ 796:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 799:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 79b:	c7 05 80 0a 00 00 00 	movl   $0x0,0xa80
+ 7a2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/echo.d xv6-public_task_1/echo.d
--- xv6-public/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/echo.d	2021-09-15 20:34:57.448373000 +0530
@@ -0,0 +1 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/echo.o and xv6-public_task_1/echo.o differ
diff -ruN xv6-public/echo.sym xv6-public_task_1/echo.sym
--- xv6-public/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/echo.sym	2021-09-15 20:34:57.492373000 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+000007b8 .rodata
+000007dc .eh_frame
+00000a78 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007c8 digits.1091
+00000000 umalloc.c
+00000a78 freep
+00000a7c base
+00000080 strcpy
+00000450 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006b0 malloc
+00000373 sleep
+000002f3 pipe
+00000303 write
+0000038b history
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000a78 __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000035b dup
+00000220 stat
+00000a78 _edata
+00000a84 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+00000383 draw
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000620 free
Binary files xv6-public/entry.o and xv6-public_task_1/entry.o differ
Binary files xv6-public/entryother and xv6-public_task_1/entryother differ
diff -ruN xv6-public/entryother.asm xv6-public_task_1/entryother.asm
--- xv6-public/entryother.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/entryother.asm	2021-09-15 20:34:56.208375000 +0530
@@ -0,0 +1,125 @@
+
+bootblockother.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00007000 <start>:
+# This code combines elements of bootasm.S and entry.S.
+
+.code16           
+.globl start
+start:
+  cli            
+    7000:	fa                   	cli    
+
+  # Zero data segment registers DS, ES, and SS.
+  xorw    %ax,%ax
+    7001:	31 c0                	xor    %eax,%eax
+  movw    %ax,%ds
+    7003:	8e d8                	mov    %eax,%ds
+  movw    %ax,%es
+    7005:	8e c0                	mov    %eax,%es
+  movw    %ax,%ss
+    7007:	8e d0                	mov    %eax,%ss
+
+  # Switch from real to protected mode.  Use a bootstrap GDT that makes
+  # virtual addresses map directly to physical addresses so that the
+  # effective memory map doesn't change during the transition.
+  lgdt    gdtdesc
+    7009:	0f 01 16             	lgdtl  (%esi)
+    700c:	84 70 0f             	test   %dh,0xf(%eax)
+  movl    %cr0, %eax
+    700f:	20 c0                	and    %al,%al
+  orl     $CR0_PE, %eax
+    7011:	66 83 c8 01          	or     $0x1,%ax
+  movl    %eax, %cr0
+    7015:	0f 22 c0             	mov    %eax,%cr0
+
+  # Complete the transition to 32-bit protected mode by using a long jmp
+  # to reload %cs and %eip.  The segment descriptors are set up with no
+  # translation, so that the mapping is still the identity mapping.
+  ljmpl    $(SEG_KCODE<<3), $(start32)
+    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
+    701e:	08 00                	or     %al,(%eax)
+
+00007020 <start32>:
+
+//PAGEBREAK!
+.code32  # Tell assembler to generate 32-bit code now.
+start32:
+  # Set up the protected-mode data segment registers
+  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
+    7020:	66 b8 10 00          	mov    $0x10,%ax
+  movw    %ax, %ds                # -> DS: Data Segment
+    7024:	8e d8                	mov    %eax,%ds
+  movw    %ax, %es                # -> ES: Extra Segment
+    7026:	8e c0                	mov    %eax,%es
+  movw    %ax, %ss                # -> SS: Stack Segment
+    7028:	8e d0                	mov    %eax,%ss
+  movw    $0, %ax                 # Zero segments not ready for use
+    702a:	66 b8 00 00          	mov    $0x0,%ax
+  movw    %ax, %fs                # -> FS
+    702e:	8e e0                	mov    %eax,%fs
+  movw    %ax, %gs                # -> GS
+    7030:	8e e8                	mov    %eax,%gs
+
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+    7032:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+    7035:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+    7038:	0f 22 e0             	mov    %eax,%cr4
+  # Use entrypgdir as our initial page table
+  movl    (start-12), %eax
+    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
+  movl    %eax, %cr3
+    7040:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+    7043:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
+    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
+  movl    %eax, %cr0
+    704b:	0f 22 c0             	mov    %eax,%cr0
+
+  # Switch to the stack allocated by startothers()
+  movl    (start-4), %esp
+    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
+  # Call mpenter()
+  call	 *(start-8)
+    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
+
+  movw    $0x8a00, %ax
+    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
+  movw    %ax, %dx
+    705e:	66 89 c2             	mov    %ax,%dx
+  outw    %ax, %dx
+    7061:	66 ef                	out    %ax,(%dx)
+  movw    $0x8ae0, %ax
+    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
+  outw    %ax, %dx
+    7067:	66 ef                	out    %ax,(%dx)
+
+00007069 <spin>:
+spin:
+  jmp     spin
+    7069:	eb fe                	jmp    7069 <spin>
+    706b:	90                   	nop
+
+0000706c <gdt>:
+	...
+    7074:	ff                   	(bad)  
+    7075:	ff 00                	incl   (%eax)
+    7077:	00 00                	add    %al,(%eax)
+    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
+    7080:	00                   	.byte 0x0
+    7081:	92                   	xchg   %eax,%edx
+    7082:	cf                   	iret   
+	...
+
+00007084 <gdtdesc>:
+    7084:	17                   	pop    %ss
+    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
+	...
diff -ruN xv6-public/entryother.d xv6-public_task_1/entryother.d
--- xv6-public/entryother.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/entryother.d	2021-09-15 20:34:56.192375000 +0530
@@ -0,0 +1 @@
+entryother.o: entryother.S asm.h memlayout.h mmu.h
Binary files xv6-public/entryother.o and xv6-public_task_1/entryother.o differ
diff -ruN xv6-public/exec.d xv6-public_task_1/exec.d
--- xv6-public/exec.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/exec.d	2021-09-15 20:34:53.388380000 +0530
@@ -0,0 +1,2 @@
+exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
+ mmu.h proc.h defs.h x86.h elf.h
Binary files xv6-public/exec.o and xv6-public_task_1/exec.o differ
diff -ruN xv6-public/file.d xv6-public_task_1/file.d
--- xv6-public/file.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/file.d	2021-09-15 20:34:53.488379000 +0530
@@ -0,0 +1,2 @@
+file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
+ spinlock.h sleeplock.h file.h
Binary files xv6-public/file.o and xv6-public_task_1/file.o differ
Binary files xv6-public/_forktest and xv6-public_task_1/_forktest differ
diff -ruN xv6-public/forktest.asm xv6-public_task_1/forktest.asm
--- xv6-public/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/forktest.asm	2021-09-15 20:34:57.580373000 +0530
@@ -0,0 +1,690 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	55                   	push   %ebp
+   5:	89 e5                	mov    %esp,%ebp
+   7:	83 e4 f0             	and    $0xfffffff0,%esp
+  forktest();
+   a:	e8 41 00 00 00       	call   50 <forktest>
+  exit();
+   f:	e8 9f 03 00 00       	call   3b3 <exit>
+  14:	66 90                	xchg   %ax,%ax
+  16:	66 90                	xchg   %ax,%ax
+  18:	66 90                	xchg   %ax,%ax
+  1a:	66 90                	xchg   %ax,%ax
+  1c:	66 90                	xchg   %ax,%ax
+  1e:	66 90                	xchg   %ax,%ax
+
+00000020 <printf>:
+{
+  20:	f3 0f 1e fb          	endbr32 
+  24:	55                   	push   %ebp
+  25:	89 e5                	mov    %esp,%ebp
+  27:	53                   	push   %ebx
+  28:	83 ec 10             	sub    $0x10,%esp
+  2b:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  2e:	53                   	push   %ebx
+  2f:	e8 9c 01 00 00       	call   1d0 <strlen>
+  34:	83 c4 0c             	add    $0xc,%esp
+  37:	50                   	push   %eax
+  38:	53                   	push   %ebx
+  39:	ff 75 08             	pushl  0x8(%ebp)
+  3c:	e8 92 03 00 00       	call   3d3 <write>
+}
+  41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  44:	83 c4 10             	add    $0x10,%esp
+  47:	c9                   	leave  
+  48:	c3                   	ret    
+  49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000050 <forktest>:
+{
+  50:	f3 0f 1e fb          	endbr32 
+  54:	55                   	push   %ebp
+  55:	89 e5                	mov    %esp,%ebp
+  57:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  58:	31 db                	xor    %ebx,%ebx
+{
+  5a:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  5d:	68 64 04 00 00       	push   $0x464
+  62:	e8 69 01 00 00       	call   1d0 <strlen>
+  67:	83 c4 0c             	add    $0xc,%esp
+  6a:	50                   	push   %eax
+  6b:	68 64 04 00 00       	push   $0x464
+  70:	6a 01                	push   $0x1
+  72:	e8 5c 03 00 00       	call   3d3 <write>
+  77:	83 c4 10             	add    $0x10,%esp
+  7a:	eb 15                	jmp    91 <forktest+0x41>
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid == 0)
+  80:	74 58                	je     da <forktest+0x8a>
+  for(n=0; n<N; n++){
+  82:	83 c3 01             	add    $0x1,%ebx
+  85:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  8b:	0f 84 92 00 00 00    	je     123 <forktest+0xd3>
+    pid = fork();
+  91:	e8 15 03 00 00       	call   3ab <fork>
+    if(pid < 0)
+  96:	85 c0                	test   %eax,%eax
+  98:	79 e6                	jns    80 <forktest+0x30>
+  for(; n > 0; n--){
+  9a:	85 db                	test   %ebx,%ebx
+  9c:	74 10                	je     ae <forktest+0x5e>
+  9e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  a0:	e8 16 03 00 00       	call   3bb <wait>
+  a5:	85 c0                	test   %eax,%eax
+  a7:	78 36                	js     df <forktest+0x8f>
+  for(; n > 0; n--){
+  a9:	83 eb 01             	sub    $0x1,%ebx
+  ac:	75 f2                	jne    a0 <forktest+0x50>
+  if(wait() != -1){
+  ae:	e8 08 03 00 00       	call   3bb <wait>
+  b3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  b6:	75 49                	jne    101 <forktest+0xb1>
+  write(fd, s, strlen(s));
+  b8:	83 ec 0c             	sub    $0xc,%esp
+  bb:	68 96 04 00 00       	push   $0x496
+  c0:	e8 0b 01 00 00       	call   1d0 <strlen>
+  c5:	83 c4 0c             	add    $0xc,%esp
+  c8:	50                   	push   %eax
+  c9:	68 96 04 00 00       	push   $0x496
+  ce:	6a 01                	push   $0x1
+  d0:	e8 fe 02 00 00       	call   3d3 <write>
+}
+  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d8:	c9                   	leave  
+  d9:	c3                   	ret    
+      exit();
+  da:	e8 d4 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+  df:	83 ec 0c             	sub    $0xc,%esp
+  e2:	68 6f 04 00 00       	push   $0x46f
+  e7:	e8 e4 00 00 00       	call   1d0 <strlen>
+  ec:	83 c4 0c             	add    $0xc,%esp
+  ef:	50                   	push   %eax
+  f0:	68 6f 04 00 00       	push   $0x46f
+  f5:	6a 01                	push   $0x1
+  f7:	e8 d7 02 00 00       	call   3d3 <write>
+      exit();
+  fc:	e8 b2 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 101:	83 ec 0c             	sub    $0xc,%esp
+ 104:	68 83 04 00 00       	push   $0x483
+ 109:	e8 c2 00 00 00       	call   1d0 <strlen>
+ 10e:	83 c4 0c             	add    $0xc,%esp
+ 111:	50                   	push   %eax
+ 112:	68 83 04 00 00       	push   $0x483
+ 117:	6a 01                	push   $0x1
+ 119:	e8 b5 02 00 00       	call   3d3 <write>
+    exit();
+ 11e:	e8 90 02 00 00       	call   3b3 <exit>
+  write(fd, s, strlen(s));
+ 123:	83 ec 0c             	sub    $0xc,%esp
+ 126:	68 a4 04 00 00       	push   $0x4a4
+ 12b:	e8 a0 00 00 00       	call   1d0 <strlen>
+ 130:	83 c4 0c             	add    $0xc,%esp
+ 133:	50                   	push   %eax
+ 134:	68 a4 04 00 00       	push   $0x4a4
+ 139:	6a 01                	push   $0x1
+ 13b:	e8 93 02 00 00       	call   3d3 <write>
+    exit();
+ 140:	e8 6e 02 00 00       	call   3b3 <exit>
+ 145:	66 90                	xchg   %ax,%ax
+ 147:	66 90                	xchg   %ax,%ax
+ 149:	66 90                	xchg   %ax,%ax
+ 14b:	66 90                	xchg   %ax,%ax
+ 14d:	66 90                	xchg   %ax,%ax
+ 14f:	90                   	nop
+
+00000150 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 155:	31 c0                	xor    %eax,%eax
+{
+ 157:	89 e5                	mov    %esp,%ebp
+ 159:	53                   	push   %ebx
+ 15a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 15d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 160:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 164:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 167:	83 c0 01             	add    $0x1,%eax
+ 16a:	84 d2                	test   %dl,%dl
+ 16c:	75 f2                	jne    160 <strcpy+0x10>
+    ;
+  return os;
+}
+ 16e:	89 c8                	mov    %ecx,%eax
+ 170:	5b                   	pop    %ebx
+ 171:	5d                   	pop    %ebp
+ 172:	c3                   	ret    
+ 173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000180 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	53                   	push   %ebx
+ 188:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 18b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 18e:	0f b6 01             	movzbl (%ecx),%eax
+ 191:	0f b6 1a             	movzbl (%edx),%ebx
+ 194:	84 c0                	test   %al,%al
+ 196:	75 19                	jne    1b1 <strcmp+0x31>
+ 198:	eb 26                	jmp    1c0 <strcmp+0x40>
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1a4:	83 c1 01             	add    $0x1,%ecx
+ 1a7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1aa:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ad:	84 c0                	test   %al,%al
+ 1af:	74 0f                	je     1c0 <strcmp+0x40>
+ 1b1:	38 d8                	cmp    %bl,%al
+ 1b3:	74 eb                	je     1a0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1b5:	29 d8                	sub    %ebx,%eax
+}
+ 1b7:	5b                   	pop    %ebx
+ 1b8:	5d                   	pop    %ebp
+ 1b9:	c3                   	ret    
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1c0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1c2:	29 d8                	sub    %ebx,%eax
+}
+ 1c4:	5b                   	pop    %ebx
+ 1c5:	5d                   	pop    %ebp
+ 1c6:	c3                   	ret    
+ 1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ce:	66 90                	xchg   %ax,%ax
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1da:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1dd:	74 21                	je     200 <strlen+0x30>
+ 1df:	31 c0                	xor    %eax,%eax
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	83 c0 01             	add    $0x1,%eax
+ 1eb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1ef:	89 c1                	mov    %eax,%ecx
+ 1f1:	75 f5                	jne    1e8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	5d                   	pop    %ebp
+ 1f6:	c3                   	ret    
+ 1f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fe:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 200:	31 c9                	xor    %ecx,%ecx
+}
+ 202:	5d                   	pop    %ebp
+ 203:	89 c8                	mov    %ecx,%eax
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 21b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 21e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 221:	89 d7                	mov    %edx,%edi
+ 223:	fc                   	cld    
+ 224:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 226:	89 d0                	mov    %edx,%eax
+ 228:	5f                   	pop    %edi
+ 229:	5d                   	pop    %ebp
+ 22a:	c3                   	ret    
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	8b 45 08             	mov    0x8(%ebp),%eax
+ 23a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 23e:	0f b6 10             	movzbl (%eax),%edx
+ 241:	84 d2                	test   %dl,%dl
+ 243:	75 16                	jne    25b <strchr+0x2b>
+ 245:	eb 21                	jmp    268 <strchr+0x38>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+ 250:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 254:	83 c0 01             	add    $0x1,%eax
+ 257:	84 d2                	test   %dl,%dl
+ 259:	74 0d                	je     268 <strchr+0x38>
+    if(*s == c)
+ 25b:	38 d1                	cmp    %dl,%cl
+ 25d:	75 f1                	jne    250 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 268:	31 c0                	xor    %eax,%eax
+}
+ 26a:	5d                   	pop    %ebp
+ 26b:	c3                   	ret    
+ 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000270 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	57                   	push   %edi
+ 278:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 279:	31 f6                	xor    %esi,%esi
+{
+ 27b:	53                   	push   %ebx
+ 27c:	89 f3                	mov    %esi,%ebx
+ 27e:	83 ec 1c             	sub    $0x1c,%esp
+ 281:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 284:	eb 33                	jmp    2b9 <gets+0x49>
+ 286:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 290:	83 ec 04             	sub    $0x4,%esp
+ 293:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 296:	6a 01                	push   $0x1
+ 298:	50                   	push   %eax
+ 299:	6a 00                	push   $0x0
+ 29b:	e8 2b 01 00 00       	call   3cb <read>
+    if(cc < 1)
+ 2a0:	83 c4 10             	add    $0x10,%esp
+ 2a3:	85 c0                	test   %eax,%eax
+ 2a5:	7e 1c                	jle    2c3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2a7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2ab:	83 c7 01             	add    $0x1,%edi
+ 2ae:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2b1:	3c 0a                	cmp    $0xa,%al
+ 2b3:	74 23                	je     2d8 <gets+0x68>
+ 2b5:	3c 0d                	cmp    $0xd,%al
+ 2b7:	74 1f                	je     2d8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2b9:	83 c3 01             	add    $0x1,%ebx
+ 2bc:	89 fe                	mov    %edi,%esi
+ 2be:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2c1:	7c cd                	jl     290 <gets+0x20>
+ 2c3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2c5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2c8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ce:	5b                   	pop    %ebx
+ 2cf:	5e                   	pop    %esi
+ 2d0:	5f                   	pop    %edi
+ 2d1:	5d                   	pop    %ebp
+ 2d2:	c3                   	ret    
+ 2d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2d7:	90                   	nop
+ 2d8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2db:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2de:	01 de                	add    %ebx,%esi
+ 2e0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2e2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2e8:	5b                   	pop    %ebx
+ 2e9:	5e                   	pop    %esi
+ 2ea:	5f                   	pop    %edi
+ 2eb:	5d                   	pop    %ebp
+ 2ec:	c3                   	ret    
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2f0:	f3 0f 1e fb          	endbr32 
+ 2f4:	55                   	push   %ebp
+ 2f5:	89 e5                	mov    %esp,%ebp
+ 2f7:	56                   	push   %esi
+ 2f8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2f9:	83 ec 08             	sub    $0x8,%esp
+ 2fc:	6a 00                	push   $0x0
+ 2fe:	ff 75 08             	pushl  0x8(%ebp)
+ 301:	e8 ed 00 00 00       	call   3f3 <open>
+  if(fd < 0)
+ 306:	83 c4 10             	add    $0x10,%esp
+ 309:	85 c0                	test   %eax,%eax
+ 30b:	78 2b                	js     338 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 30d:	83 ec 08             	sub    $0x8,%esp
+ 310:	ff 75 0c             	pushl  0xc(%ebp)
+ 313:	89 c3                	mov    %eax,%ebx
+ 315:	50                   	push   %eax
+ 316:	e8 f0 00 00 00       	call   40b <fstat>
+  close(fd);
+ 31b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 31e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 320:	e8 b6 00 00 00       	call   3db <close>
+  return r;
+ 325:	83 c4 10             	add    $0x10,%esp
+}
+ 328:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 32b:	89 f0                	mov    %esi,%eax
+ 32d:	5b                   	pop    %ebx
+ 32e:	5e                   	pop    %esi
+ 32f:	5d                   	pop    %ebp
+ 330:	c3                   	ret    
+ 331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 338:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 33d:	eb e9                	jmp    328 <stat+0x38>
+ 33f:	90                   	nop
+
+00000340 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+ 345:	89 e5                	mov    %esp,%ebp
+ 347:	53                   	push   %ebx
+ 348:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 34b:	0f be 02             	movsbl (%edx),%eax
+ 34e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 351:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 354:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 359:	77 1a                	ja     375 <atoi+0x35>
+ 35b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 35f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 360:	83 c2 01             	add    $0x1,%edx
+ 363:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 366:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 36a:	0f be 02             	movsbl (%edx),%eax
+ 36d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 370:	80 fb 09             	cmp    $0x9,%bl
+ 373:	76 eb                	jbe    360 <atoi+0x20>
+  return n;
+}
+ 375:	89 c8                	mov    %ecx,%eax
+ 377:	5b                   	pop    %ebx
+ 378:	5d                   	pop    %ebp
+ 379:	c3                   	ret    
+ 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000380 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	57                   	push   %edi
+ 388:	8b 45 10             	mov    0x10(%ebp),%eax
+ 38b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 38e:	56                   	push   %esi
+ 38f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 392:	85 c0                	test   %eax,%eax
+ 394:	7e 0f                	jle    3a5 <memmove+0x25>
+ 396:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 398:	89 d7                	mov    %edx,%edi
+ 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3a1:	39 f8                	cmp    %edi,%eax
+ 3a3:	75 fb                	jne    3a0 <memmove+0x20>
+  return vdst;
+}
+ 3a5:	5e                   	pop    %esi
+ 3a6:	89 d0                	mov    %edx,%eax
+ 3a8:	5f                   	pop    %edi
+ 3a9:	5d                   	pop    %ebp
+ 3aa:	c3                   	ret    
+
+000003ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <exit>:
+SYSCALL(exit)
+ 3b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <wait>:
+SYSCALL(wait)
+ 3bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <pipe>:
+SYSCALL(pipe)
+ 3c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <read>:
+SYSCALL(read)
+ 3cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <write>:
+SYSCALL(write)
+ 3d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <close>:
+SYSCALL(close)
+ 3db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <kill>:
+SYSCALL(kill)
+ 3e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <exec>:
+SYSCALL(exec)
+ 3eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <open>:
+SYSCALL(open)
+ 3f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <mknod>:
+SYSCALL(mknod)
+ 3fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <unlink>:
+SYSCALL(unlink)
+ 403:	b8 12 00 00 00       	mov    $0x12,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <fstat>:
+SYSCALL(fstat)
+ 40b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <link>:
+SYSCALL(link)
+ 413:	b8 13 00 00 00       	mov    $0x13,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <mkdir>:
+SYSCALL(mkdir)
+ 41b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <chdir>:
+SYSCALL(chdir)
+ 423:	b8 09 00 00 00       	mov    $0x9,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <dup>:
+SYSCALL(dup)
+ 42b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getpid>:
+SYSCALL(getpid)
+ 433:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <sbrk>:
+SYSCALL(sbrk)
+ 43b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <sleep>:
+SYSCALL(sleep)
+ 443:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <uptime>:
+SYSCALL(uptime)
+ 44b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <draw>:
+SYSCALL(draw)
+ 453:	b8 16 00 00 00       	mov    $0x16,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <history>:
+ 45b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
diff -ruN xv6-public/forktest.d xv6-public_task_1/forktest.d
--- xv6-public/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/forktest.d	2021-09-15 20:34:57.548373000 +0530
@@ -0,0 +1 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/forktest.o and xv6-public_task_1/forktest.o differ
diff -ruN xv6-public/fs.d xv6-public_task_1/fs.d
--- xv6-public/fs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/fs.d	2021-09-15 20:34:53.780379000 +0530
@@ -0,0 +1,2 @@
+fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
+ proc.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files xv6-public/fs.img and xv6-public_task_1/fs.img differ
Binary files xv6-public/fs.o and xv6-public_task_1/fs.o differ
diff -ruN xv6-public/.git/config xv6-public_task_1/.git/config
--- xv6-public/.git/config	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/.git/config	1970-01-01 05:30:00.000000000 +0530
@@ -1,11 +0,0 @@
-[core]
-	repositoryformatversion = 0
-	filemode = true
-	bare = false
-	logallrefupdates = true
-[remote "origin"]
-	url = git://github.com/mit-pdos/xv6-public.git
-	fetch = +refs/heads/*:refs/remotes/origin/*
-[branch "master"]
-	remote = origin
-	merge = refs/heads/master
diff -ruN xv6-public/.git/description xv6-public_task_1/.git/description
--- xv6-public/.git/description	2021-09-15 22:30:09.785062956 +0530
+++ xv6-public_task_1/.git/description	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-Unnamed repository; edit this file 'description' to name the repository.
diff -ruN xv6-public/.git/HEAD xv6-public_task_1/.git/HEAD
--- xv6-public/.git/HEAD	2021-09-15 22:30:13.469050547 +0530
+++ xv6-public_task_1/.git/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-ref: refs/heads/master
diff -ruN xv6-public/.git/hooks/applypatch-msg.sample xv6-public_task_1/.git/hooks/applypatch-msg.sample
--- xv6-public/.git/hooks/applypatch-msg.sample	2021-09-15 22:30:09.781062969 +0530
+++ xv6-public_task_1/.git/hooks/applypatch-msg.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,15 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message taken by
-# applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.  The hook is
-# allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "applypatch-msg".
-
-. git-sh-setup
-commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
-test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
-:
diff -ruN xv6-public/.git/hooks/commit-msg.sample xv6-public_task_1/.git/hooks/commit-msg.sample
--- xv6-public/.git/hooks/commit-msg.sample	2021-09-15 22:30:09.777062983 +0530
+++ xv6-public_task_1/.git/hooks/commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,24 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to check the commit log message.
-# Called by "git commit" with one argument, the name of the file
-# that has the commit message.  The hook should exit with non-zero
-# status after issuing an appropriate message if it wants to stop the
-# commit.  The hook is allowed to edit the commit message file.
-#
-# To enable this hook, rename this file to "commit-msg".
-
-# Uncomment the below to add a Signed-off-by line to the message.
-# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
-# hook is more suited to it.
-#
-# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
-
-# This example catches duplicate Signed-off-by lines.
-
-test "" = "$(grep '^Signed-off-by: ' "$1" |
-	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
-	echo >&2 Duplicate Signed-off-by lines.
-	exit 1
-}
diff -ruN xv6-public/.git/hooks/fsmonitor-watchman.sample xv6-public_task_1/.git/hooks/fsmonitor-watchman.sample
--- xv6-public/.git/hooks/fsmonitor-watchman.sample	2021-09-15 22:30:09.781062969 +0530
+++ xv6-public_task_1/.git/hooks/fsmonitor-watchman.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,109 +0,0 @@
-#!/usr/bin/perl
-
-use strict;
-use warnings;
-use IPC::Open2;
-
-# An example hook script to integrate Watchman
-# (https://facebook.github.io/watchman/) with git to speed up detecting
-# new and modified files.
-#
-# The hook is passed a version (currently 1) and a time in nanoseconds
-# formatted as a string and outputs to stdout all files that have been
-# modified since the given time. Paths must be relative to the root of
-# the working tree and separated by a single NUL.
-#
-# To enable this hook, rename this file to "query-watchman" and set
-# 'git config core.fsmonitor .git/hooks/query-watchman'
-#
-my ($version, $time) = @ARGV;
-
-# Check the hook interface version
-
-if ($version == 1) {
-	# convert nanoseconds to seconds
-	# subtract one second to make sure watchman will return all changes
-	$time = int ($time / 1000000000) - 1;
-} else {
-	die "Unsupported query-fsmonitor hook version '$version'.\n" .
-	    "Falling back to scanning...\n";
-}
-
-my $git_work_tree;
-if ($^O =~ 'msys' || $^O =~ 'cygwin') {
-	$git_work_tree = Win32::GetCwd();
-	$git_work_tree =~ tr/\\/\//;
-} else {
-	require Cwd;
-	$git_work_tree = Cwd::cwd();
-}
-
-my $retry = 1;
-
-launch_watchman();
-
-sub launch_watchman {
-
-	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
-	    or die "open2() failed: $!\n" .
-	    "Falling back to scanning...\n";
-
-	# In the query expression below we're asking for names of files that
-	# changed since $time but were not transient (ie created after
-	# $time but no longer exist).
-	#
-	# To accomplish this, we're using the "since" generator to use the
-	# recency index to select candidate nodes and "fields" to limit the
-	# output to file names only.
-
-	my $query = <<"	END";
-		["query", "$git_work_tree", {
-			"since": $time,
-			"fields": ["name"]
-		}]
-	END
-
-	print CHLD_IN $query;
-	close CHLD_IN;
-	my $response = do {local $/; <CHLD_OUT>};
-
-	die "Watchman: command returned no output.\n" .
-	    "Falling back to scanning...\n" if $response eq "";
-	die "Watchman: command returned invalid output: $response\n" .
-	    "Falling back to scanning...\n" unless $response =~ /^\{/;
-
-	my $json_pkg;
-	eval {
-		require JSON::XS;
-		$json_pkg = "JSON::XS";
-		1;
-	} or do {
-		require JSON::PP;
-		$json_pkg = "JSON::PP";
-	};
-
-	my $o = $json_pkg->new->utf8->decode($response);
-
-	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
-		print STDERR "Adding '$git_work_tree' to watchman's watch list.\n";
-		$retry--;
-		qx/watchman watch "$git_work_tree"/;
-		die "Failed to make watchman watch '$git_work_tree'.\n" .
-		    "Falling back to scanning...\n" if $? != 0;
-
-		# Watchman will always return all files on the first query so
-		# return the fast "everything is dirty" flag to git and do the
-		# Watchman query just to get it over with now so we won't pay
-		# the cost in git to look up each individual file.
-		print "/\0";
-		eval { launch_watchman() };
-		exit 0;
-	}
-
-	die "Watchman: $o->{error}.\n" .
-	    "Falling back to scanning...\n" if $o->{error};
-
-	binmode STDOUT, ":utf8";
-	local $, = "\0";
-	print @{$o->{files}};
-}
diff -ruN xv6-public/.git/hooks/post-update.sample xv6-public_task_1/.git/hooks/post-update.sample
--- xv6-public/.git/hooks/post-update.sample	2021-09-15 22:30:09.781062969 +0530
+++ xv6-public_task_1/.git/hooks/post-update.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,8 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare a packed repository for use over
-# dumb transports.
-#
-# To enable this hook, rename this file to "post-update".
-
-exec git update-server-info
diff -ruN xv6-public/.git/hooks/pre-applypatch.sample xv6-public_task_1/.git/hooks/pre-applypatch.sample
--- xv6-public/.git/hooks/pre-applypatch.sample	2021-09-15 22:30:09.777062983 +0530
+++ xv6-public_task_1/.git/hooks/pre-applypatch.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,14 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed
-# by applypatch from an e-mail message.
-#
-# The hook should exit with non-zero status after issuing an
-# appropriate message if it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-applypatch".
-
-. git-sh-setup
-precommit="$(git rev-parse --git-path hooks/pre-commit)"
-test -x "$precommit" && exec "$precommit" ${1+"$@"}
-:
diff -ruN xv6-public/.git/hooks/pre-commit.sample xv6-public_task_1/.git/hooks/pre-commit.sample
--- xv6-public/.git/hooks/pre-commit.sample	2021-09-15 22:30:09.777062983 +0530
+++ xv6-public_task_1/.git/hooks/pre-commit.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,49 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git commit" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message if
-# it wants to stop the commit.
-#
-# To enable this hook, rename this file to "pre-commit".
-
-if git rev-parse --verify HEAD >/dev/null 2>&1
-then
-	against=HEAD
-else
-	# Initial commit: diff against an empty tree object
-	against=$(git hash-object -t tree /dev/null)
-fi
-
-# If you want to allow non-ASCII filenames set this variable to true.
-allownonascii=$(git config --bool hooks.allownonascii)
-
-# Redirect output to stderr.
-exec 1>&2
-
-# Cross platform projects tend to avoid non-ASCII filenames; prevent
-# them from being added to the repository. We exploit the fact that the
-# printable range starts at the space character and ends with tilde.
-if [ "$allownonascii" != "true" ] &&
-	# Note that the use of brackets around a tr range is ok here, (it's
-	# even required, for portability to Solaris 10's /usr/bin/tr), since
-	# the square bracket bytes happen to fall in the designated range.
-	test $(git diff --cached --name-only --diff-filter=A -z $against |
-	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
-then
-	cat <<\EOF
-Error: Attempt to add a non-ASCII file name.
-
-This can cause problems if you want to work with people on other platforms.
-
-To be portable it is advisable to rename the file.
-
-If you know what you are doing you can disable this check using:
-
-  git config hooks.allownonascii true
-EOF
-	exit 1
-fi
-
-# If there are whitespace errors, print the offending file names and fail.
-exec git diff-index --check --cached $against --
diff -ruN xv6-public/.git/hooks/pre-merge-commit.sample xv6-public_task_1/.git/hooks/pre-merge-commit.sample
--- xv6-public/.git/hooks/pre-merge-commit.sample	2021-09-15 22:30:09.777062983 +0530
+++ xv6-public_task_1/.git/hooks/pre-merge-commit.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,13 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to verify what is about to be committed.
-# Called by "git merge" with no arguments.  The hook should
-# exit with non-zero status after issuing an appropriate message to
-# stderr if it wants to stop the merge commit.
-#
-# To enable this hook, rename this file to "pre-merge-commit".
-
-. git-sh-setup
-test -x "$GIT_DIR/hooks/pre-commit" &&
-        exec "$GIT_DIR/hooks/pre-commit"
-:
diff -ruN xv6-public/.git/hooks/prepare-commit-msg.sample xv6-public_task_1/.git/hooks/prepare-commit-msg.sample
--- xv6-public/.git/hooks/prepare-commit-msg.sample	2021-09-15 22:30:09.781062969 +0530
+++ xv6-public_task_1/.git/hooks/prepare-commit-msg.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,42 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to prepare the commit log message.
-# Called by "git commit" with the name of the file that has the
-# commit message, followed by the description of the commit
-# message's source.  The hook's purpose is to edit the commit
-# message file.  If the hook fails with a non-zero status,
-# the commit is aborted.
-#
-# To enable this hook, rename this file to "prepare-commit-msg".
-
-# This hook includes three examples. The first one removes the
-# "# Please enter the commit message..." help message.
-#
-# The second includes the output of "git diff --name-status -r"
-# into the message, just before the "git status" output.  It is
-# commented because it doesn't cope with --amend or with squashed
-# commits.
-#
-# The third example adds a Signed-off-by line to the message, that can
-# still be edited.  This is rarely a good idea.
-
-COMMIT_MSG_FILE=$1
-COMMIT_SOURCE=$2
-SHA1=$3
-
-/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
-
-# case "$COMMIT_SOURCE,$SHA1" in
-#  ,|template,)
-#    /usr/bin/perl -i.bak -pe '
-#       print "\n" . `git diff --cached --name-status -r`
-# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
-#  *) ;;
-# esac
-
-# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
-# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
-# if test -z "$COMMIT_SOURCE"
-# then
-#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
-# fi
diff -ruN xv6-public/.git/hooks/pre-push.sample xv6-public_task_1/.git/hooks/pre-push.sample
--- xv6-public/.git/hooks/pre-push.sample	2021-09-15 22:30:09.777062983 +0530
+++ xv6-public_task_1/.git/hooks/pre-push.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,53 +0,0 @@
-#!/bin/sh
-
-# An example hook script to verify what is about to be pushed.  Called by "git
-# push" after it has checked the remote status, but before anything has been
-# pushed.  If this script exits with a non-zero status nothing will be pushed.
-#
-# This hook is called with the following parameters:
-#
-# $1 -- Name of the remote to which the push is being done
-# $2 -- URL to which the push is being done
-#
-# If pushing without using a named remote those arguments will be equal.
-#
-# Information about the commits which are being pushed is supplied as lines to
-# the standard input in the form:
-#
-#   <local ref> <local sha1> <remote ref> <remote sha1>
-#
-# This sample shows how to prevent push of commits where the log message starts
-# with "WIP" (work in progress).
-
-remote="$1"
-url="$2"
-
-z40=0000000000000000000000000000000000000000
-
-while read local_ref local_sha remote_ref remote_sha
-do
-	if [ "$local_sha" = $z40 ]
-	then
-		# Handle delete
-		:
-	else
-		if [ "$remote_sha" = $z40 ]
-		then
-			# New branch, examine all commits
-			range="$local_sha"
-		else
-			# Update to existing branch, examine new commits
-			range="$remote_sha..$local_sha"
-		fi
-
-		# Check for WIP commit
-		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
-		if [ -n "$commit" ]
-		then
-			echo >&2 "Found WIP commit in $local_ref, not pushing"
-			exit 1
-		fi
-	fi
-done
-
-exit 0
diff -ruN xv6-public/.git/hooks/pre-rebase.sample xv6-public_task_1/.git/hooks/pre-rebase.sample
--- xv6-public/.git/hooks/pre-rebase.sample	2021-09-15 22:30:09.781062969 +0530
+++ xv6-public_task_1/.git/hooks/pre-rebase.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,169 +0,0 @@
-#!/bin/sh
-#
-# Copyright (c) 2006, 2008 Junio C Hamano
-#
-# The "pre-rebase" hook is run just before "git rebase" starts doing
-# its job, and can prevent the command from running by exiting with
-# non-zero status.
-#
-# The hook is called with the following parameters:
-#
-# $1 -- the upstream the series was forked from.
-# $2 -- the branch being rebased (or empty when rebasing the current branch).
-#
-# This sample shows how to prevent topic branches that are already
-# merged to 'next' branch from getting rebased, because allowing it
-# would result in rebasing already published history.
-
-publish=next
-basebranch="$1"
-if test "$#" = 2
-then
-	topic="refs/heads/$2"
-else
-	topic=`git symbolic-ref HEAD` ||
-	exit 0 ;# we do not interrupt rebasing detached HEAD
-fi
-
-case "$topic" in
-refs/heads/??/*)
-	;;
-*)
-	exit 0 ;# we do not interrupt others.
-	;;
-esac
-
-# Now we are dealing with a topic branch being rebased
-# on top of master.  Is it OK to rebase it?
-
-# Does the topic really exist?
-git show-ref -q "$topic" || {
-	echo >&2 "No such branch $topic"
-	exit 1
-}
-
-# Is topic fully merged to master?
-not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
-if test -z "$not_in_master"
-then
-	echo >&2 "$topic is fully merged to master; better remove it."
-	exit 1 ;# we could allow it, but there is no point.
-fi
-
-# Is topic ever merged to next?  If so you should not be rebasing it.
-only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
-only_next_2=`git rev-list ^master           ${publish} | sort`
-if test "$only_next_1" = "$only_next_2"
-then
-	not_in_topic=`git rev-list "^$topic" master`
-	if test -z "$not_in_topic"
-	then
-		echo >&2 "$topic is already up to date with master"
-		exit 1 ;# we could allow it, but there is no point.
-	else
-		exit 0
-	fi
-else
-	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
-	/usr/bin/perl -e '
-		my $topic = $ARGV[0];
-		my $msg = "* $topic has commits already merged to public branch:\n";
-		my (%not_in_next) = map {
-			/^([0-9a-f]+) /;
-			($1 => 1);
-		} split(/\n/, $ARGV[1]);
-		for my $elem (map {
-				/^([0-9a-f]+) (.*)$/;
-				[$1 => $2];
-			} split(/\n/, $ARGV[2])) {
-			if (!exists $not_in_next{$elem->[0]}) {
-				if ($msg) {
-					print STDERR $msg;
-					undef $msg;
-				}
-				print STDERR " $elem->[1]\n";
-			}
-		}
-	' "$topic" "$not_in_next" "$not_in_master"
-	exit 1
-fi
-
-<<\DOC_END
-
-This sample hook safeguards topic branches that have been
-published from being rewound.
-
-The workflow assumed here is:
-
- * Once a topic branch forks from "master", "master" is never
-   merged into it again (either directly or indirectly).
-
- * Once a topic branch is fully cooked and merged into "master",
-   it is deleted.  If you need to build on top of it to correct
-   earlier mistakes, a new topic branch is created by forking at
-   the tip of the "master".  This is not strictly necessary, but
-   it makes it easier to keep your history simple.
-
- * Whenever you need to test or publish your changes to topic
-   branches, merge them into "next" branch.
-
-The script, being an example, hardcodes the publish branch name
-to be "next", but it is trivial to make it configurable via
-$GIT_DIR/config mechanism.
-
-With this workflow, you would want to know:
-
-(1) ... if a topic branch has ever been merged to "next".  Young
-    topic branches can have stupid mistakes you would rather
-    clean up before publishing, and things that have not been
-    merged into other branches can be easily rebased without
-    affecting other people.  But once it is published, you would
-    not want to rewind it.
-
-(2) ... if a topic branch has been fully merged to "master".
-    Then you can delete it.  More importantly, you should not
-    build on top of it -- other people may already want to
-    change things related to the topic as patches against your
-    "master", so if you need further changes, it is better to
-    fork the topic (perhaps with the same name) afresh from the
-    tip of "master".
-
-Let's look at this example:
-
-		   o---o---o---o---o---o---o---o---o---o "next"
-		  /       /           /           /
-		 /   a---a---b A     /           /
-		/   /               /           /
-	       /   /   c---c---c---c B         /
-	      /   /   /             \         /
-	     /   /   /   b---b C     \       /
-	    /   /   /   /             \     /
-    ---o---o---o---o---o---o---o---o---o---o---o "master"
-
-
-A, B and C are topic branches.
-
- * A has one fix since it was merged up to "next".
-
- * B has finished.  It has been fully merged up to "master" and "next",
-   and is ready to be deleted.
-
- * C has not merged to "next" at all.
-
-We would want to allow C to be rebased, refuse A, and encourage
-B to be deleted.
-
-To compute (1):
-
-	git rev-list ^master ^topic next
-	git rev-list ^master        next
-
-	if these match, topic has not merged in next at all.
-
-To compute (2):
-
-	git rev-list master..topic
-
-	if this is empty, it is fully merged to "master".
-
-DOC_END
diff -ruN xv6-public/.git/hooks/pre-receive.sample xv6-public_task_1/.git/hooks/pre-receive.sample
--- xv6-public/.git/hooks/pre-receive.sample	2021-09-15 22:30:09.777062983 +0530
+++ xv6-public_task_1/.git/hooks/pre-receive.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,24 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to make use of push options.
-# The example simply echoes all push options that start with 'echoback='
-# and rejects all pushes when the "reject" push option is used.
-#
-# To enable this hook, rename this file to "pre-receive".
-
-if test -n "$GIT_PUSH_OPTION_COUNT"
-then
-	i=0
-	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
-	do
-		eval "value=\$GIT_PUSH_OPTION_$i"
-		case "$value" in
-		echoback=*)
-			echo "echo from the pre-receive-hook: ${value#*=}" >&2
-			;;
-		reject)
-			exit 1
-		esac
-		i=$((i + 1))
-	done
-fi
diff -ruN xv6-public/.git/hooks/update.sample xv6-public_task_1/.git/hooks/update.sample
--- xv6-public/.git/hooks/update.sample	2021-09-15 22:30:09.781062969 +0530
+++ xv6-public_task_1/.git/hooks/update.sample	1970-01-01 05:30:00.000000000 +0530
@@ -1,128 +0,0 @@
-#!/bin/sh
-#
-# An example hook script to block unannotated tags from entering.
-# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
-#
-# To enable this hook, rename this file to "update".
-#
-# Config
-# ------
-# hooks.allowunannotated
-#   This boolean sets whether unannotated tags will be allowed into the
-#   repository.  By default they won't be.
-# hooks.allowdeletetag
-#   This boolean sets whether deleting tags will be allowed in the
-#   repository.  By default they won't be.
-# hooks.allowmodifytag
-#   This boolean sets whether a tag may be modified after creation. By default
-#   it won't be.
-# hooks.allowdeletebranch
-#   This boolean sets whether deleting branches will be allowed in the
-#   repository.  By default they won't be.
-# hooks.denycreatebranch
-#   This boolean sets whether remotely creating branches will be denied
-#   in the repository.  By default this is allowed.
-#
-
-# --- Command line
-refname="$1"
-oldrev="$2"
-newrev="$3"
-
-# --- Safety check
-if [ -z "$GIT_DIR" ]; then
-	echo "Don't run this script from the command line." >&2
-	echo " (if you want, you could supply GIT_DIR then run" >&2
-	echo "  $0 <ref> <oldrev> <newrev>)" >&2
-	exit 1
-fi
-
-if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
-	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
-	exit 1
-fi
-
-# --- Config
-allowunannotated=$(git config --bool hooks.allowunannotated)
-allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
-denycreatebranch=$(git config --bool hooks.denycreatebranch)
-allowdeletetag=$(git config --bool hooks.allowdeletetag)
-allowmodifytag=$(git config --bool hooks.allowmodifytag)
-
-# check for no description
-projectdesc=$(sed -e '1q' "$GIT_DIR/description")
-case "$projectdesc" in
-"Unnamed repository"* | "")
-	echo "*** Project description file hasn't been set" >&2
-	exit 1
-	;;
-esac
-
-# --- Check types
-# if $newrev is 0000...0000, it's a commit to delete a ref.
-zero="0000000000000000000000000000000000000000"
-if [ "$newrev" = "$zero" ]; then
-	newrev_type=delete
-else
-	newrev_type=$(git cat-file -t $newrev)
-fi
-
-case "$refname","$newrev_type" in
-	refs/tags/*,commit)
-		# un-annotated tag
-		short_refname=${refname##refs/tags/}
-		if [ "$allowunannotated" != "true" ]; then
-			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
-			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,delete)
-		# delete tag
-		if [ "$allowdeletetag" != "true" ]; then
-			echo "*** Deleting a tag is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/tags/*,tag)
-		# annotated tag
-		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
-		then
-			echo "*** Tag '$refname' already exists." >&2
-			echo "*** Modifying a tag is not allowed in this repository." >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,commit)
-		# branch
-		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
-			echo "*** Creating a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/heads/*,delete)
-		# delete branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	refs/remotes/*,commit)
-		# tracking branch
-		;;
-	refs/remotes/*,delete)
-		# delete tracking branch
-		if [ "$allowdeletebranch" != "true" ]; then
-			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
-			exit 1
-		fi
-		;;
-	*)
-		# Anything else (is there anything else?)
-		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
-		exit 1
-		;;
-esac
-
-# --- Finished
-exit 0
Binary files xv6-public/.git/index and xv6-public_task_1/.git/index differ
diff -ruN xv6-public/.git/info/exclude xv6-public_task_1/.git/info/exclude
--- xv6-public/.git/info/exclude	2021-09-15 22:30:09.781062969 +0530
+++ xv6-public_task_1/.git/info/exclude	1970-01-01 05:30:00.000000000 +0530
@@ -1,6 +0,0 @@
-# git ls-files --others --exclude-from=.git/info/exclude
-# Lines that start with '#' are comments.
-# For a project mostly in C, the following would be a good set of
-# exclude patterns (uncomment them if you want to use them):
-# *.[oa]
-# *~
diff -ruN xv6-public/.git/logs/HEAD xv6-public_task_1/.git/logs/HEAD
--- xv6-public/.git/logs/HEAD	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/.git/logs/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Ashrith <ashrith@ashrith-VirtualBox.(none)> 1631725213 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/heads/master xv6-public_task_1/.git/logs/refs/heads/master
--- xv6-public/.git/logs/refs/heads/master	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/.git/logs/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Ashrith <ashrith@ashrith-VirtualBox.(none)> 1631725213 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -ruN xv6-public/.git/logs/refs/remotes/origin/HEAD xv6-public_task_1/.git/logs/refs/remotes/origin/HEAD
--- xv6-public/.git/logs/refs/remotes/origin/HEAD	2021-09-15 22:30:13.469050547 +0530
+++ xv6-public_task_1/.git/logs/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 Ashrith <ashrith@ashrith-VirtualBox.(none)> 1631725213 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
Binary files xv6-public/.git/objects/pack/pack-12ca327ecdd26d679901b04fa869cf247b06c9ef.idx and xv6-public_task_1/.git/objects/pack/pack-12ca327ecdd26d679901b04fa869cf247b06c9ef.idx differ
Binary files xv6-public/.git/objects/pack/pack-12ca327ecdd26d679901b04fa869cf247b06c9ef.pack and xv6-public_task_1/.git/objects/pack/pack-12ca327ecdd26d679901b04fa869cf247b06c9ef.pack differ
diff -ruN xv6-public/.git/packed-refs xv6-public_task_1/.git/packed-refs
--- xv6-public/.git/packed-refs	2021-09-15 22:30:13.469050547 +0530
+++ xv6-public_task_1/.git/packed-refs	1970-01-01 05:30:00.000000000 +0530
@@ -1,28 +0,0 @@
-# pack-refs with: peeled fully-peeled sorted 
-eeb7b415dbcb12cc362d0783e41c3d1f44066b17 refs/remotes/origin/master
-af0e851a3a8a7d13bc2f2d596b58500594040892 refs/tags/osdi12-submit
-^8286b58087750e09bac3815219e0382a0bb2b159
-9e698c587b135db17b38a5838976805b9c01e338 refs/tags/symlinks
-05e0b1218dcebe1f40028531b51926df8ae52be0 refs/tags/xv6-2006
-^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
-42f3c3f7be9717b66ba6e133a113c0f751c53133 refs/tags/xv6-2007
-adcd16c3f7588b4a28d37495f05e94278c9e3a1e refs/tags/xv6-2008
-124fe7e457c0dc9b671c7ffccb56004eb61da4f0 refs/tags/xv6-2010
-5922cdbbcc4fdbd76eec9e0dad9f650e4c86ee99 refs/tags/xv6-rev0
-^5cc0bd5ceaf805ab44f851e6a3f1952a29e9d7b7
-81f31a773dd49b001437eaed3975438585ff9911 refs/tags/xv6-rev1
-^42f3c3f7be9717b66ba6e133a113c0f751c53133
-b818915f793cd20c5d1e24f668534a9d690f3cc8 refs/tags/xv6-rev11
-30dab73b68b816877dc8f78504ceca0808c976eb refs/tags/xv6-rev3
-^074ac7ccd43c08d01a237ce6f14cac10715a51ef
-113005d48f09a4e3939940d72a77bf6973ea8755 refs/tags/xv6-rev4
-^124fe7e457c0dc9b671c7ffccb56004eb61da4f0
-d6aa754494b37e32862b1f78d53deedc53f66a15 refs/tags/xv6-rev5
-^ae603ff5e79bb7b5eea4147425752f33d29fe558
-3e9d6413d331b4c912d55bfac253af1629d4bac9 refs/tags/xv6-rev6
-^e64c661ae8b91bd7e858bb1895bef96e6ac2b4bb
-ccc25c0fac59067d88af52ad9f3b8cee97c3810a refs/tags/xv6-rev7
-^2ae8392a5c203a7b1bc5b8bff5eabc8b5eab8972
-7d6f95e327f1c18570d5dd187e3d92e1aadae2cf refs/tags/xv6-rev8
-^9ba21267e796eb462a657392906e3cbccaedcc99
-5bf3fbee00fb27cb8cb4eca72dcd9fc4c288ed71 refs/tags/xv6-rev9
diff -ruN xv6-public/.git/refs/heads/master xv6-public_task_1/.git/refs/heads/master
--- xv6-public/.git/refs/heads/master	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/.git/refs/heads/master	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-eeb7b415dbcb12cc362d0783e41c3d1f44066b17
diff -ruN xv6-public/.git/refs/remotes/origin/HEAD xv6-public_task_1/.git/refs/remotes/origin/HEAD
--- xv6-public/.git/refs/remotes/origin/HEAD	2021-09-15 22:30:13.469050547 +0530
+++ xv6-public_task_1/.git/refs/remotes/origin/HEAD	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-ref: refs/remotes/origin/master
Binary files xv6-public/_grep and xv6-public_task_1/_grep differ
diff -ruN xv6-public/grep.asm xv6-public_task_1/grep.asm
--- xv6-public/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/grep.asm	2021-09-15 20:34:57.732373000 +0530
@@ -0,0 +1,1576 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	53                   	push   %ebx
+  14:	51                   	push   %ecx
+  15:	83 ec 18             	sub    $0x18,%esp
+  18:	8b 01                	mov    (%ecx),%eax
+  1a:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  20:	83 f8 01             	cmp    $0x1,%eax
+  23:	7e 6b                	jle    90 <main+0x90>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  25:	8b 43 04             	mov    0x4(%ebx),%eax
+  28:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  2b:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  2f:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  34:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  37:	75 29                	jne    62 <main+0x62>
+  39:	eb 68                	jmp    a3 <main+0xa3>
+  3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  3f:	90                   	nop
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  40:	83 ec 08             	sub    $0x8,%esp
+  for(i = 2; i < argc; i++){
+  43:	83 c6 01             	add    $0x1,%esi
+  46:	83 c3 04             	add    $0x4,%ebx
+    grep(pattern, fd);
+  49:	50                   	push   %eax
+  4a:	ff 75 e0             	pushl  -0x20(%ebp)
+  4d:	e8 de 01 00 00       	call   230 <grep>
+    close(fd);
+  52:	89 3c 24             	mov    %edi,(%esp)
+  55:	e8 71 05 00 00       	call   5cb <close>
+  for(i = 2; i < argc; i++){
+  5a:	83 c4 10             	add    $0x10,%esp
+  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  60:	7e 29                	jle    8b <main+0x8b>
+    if((fd = open(argv[i], 0)) < 0){
+  62:	83 ec 08             	sub    $0x8,%esp
+  65:	6a 00                	push   $0x0
+  67:	ff 33                	pushl  (%ebx)
+  69:	e8 75 05 00 00       	call   5e3 <open>
+  6e:	83 c4 10             	add    $0x10,%esp
+  71:	89 c7                	mov    %eax,%edi
+  73:	85 c0                	test   %eax,%eax
+  75:	79 c9                	jns    40 <main+0x40>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  77:	50                   	push   %eax
+  78:	ff 33                	pushl  (%ebx)
+  7a:	68 98 0a 00 00       	push   $0xa98
+  7f:	6a 01                	push   $0x1
+  81:	e8 8a 06 00 00       	call   710 <printf>
+      exit();
+  86:	e8 18 05 00 00       	call   5a3 <exit>
+  }
+  exit();
+  8b:	e8 13 05 00 00       	call   5a3 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  90:	51                   	push   %ecx
+  91:	51                   	push   %ecx
+  92:	68 78 0a 00 00       	push   $0xa78
+  97:	6a 02                	push   $0x2
+  99:	e8 72 06 00 00       	call   710 <printf>
+    exit();
+  9e:	e8 00 05 00 00       	call   5a3 <exit>
+    grep(pattern, 0);
+  a3:	52                   	push   %edx
+  a4:	52                   	push   %edx
+  a5:	6a 00                	push   $0x0
+  a7:	50                   	push   %eax
+  a8:	e8 83 01 00 00       	call   230 <grep>
+    exit();
+  ad:	e8 f1 04 00 00       	call   5a3 <exit>
+  b2:	66 90                	xchg   %ax,%ax
+  b4:	66 90                	xchg   %ax,%ax
+  b6:	66 90                	xchg   %ax,%ax
+  b8:	66 90                	xchg   %ax,%ax
+  ba:	66 90                	xchg   %ax,%ax
+  bc:	66 90                	xchg   %ax,%ax
+  be:	66 90                	xchg   %ax,%ax
+
+000000c0 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  c0:	f3 0f 1e fb          	endbr32 
+  c4:	55                   	push   %ebp
+  c5:	89 e5                	mov    %esp,%ebp
+  c7:	57                   	push   %edi
+  c8:	56                   	push   %esi
+  c9:	53                   	push   %ebx
+  ca:	83 ec 0c             	sub    $0xc,%esp
+  cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  d0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  d3:	8b 7d 10             	mov    0x10(%ebp),%edi
+  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+  e0:	83 ec 08             	sub    $0x8,%esp
+  e3:	57                   	push   %edi
+  e4:	56                   	push   %esi
+  e5:	e8 36 00 00 00       	call   120 <matchhere>
+  ea:	83 c4 10             	add    $0x10,%esp
+  ed:	85 c0                	test   %eax,%eax
+  ef:	75 1f                	jne    110 <matchstar+0x50>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  f1:	0f be 17             	movsbl (%edi),%edx
+  f4:	84 d2                	test   %dl,%dl
+  f6:	74 0c                	je     104 <matchstar+0x44>
+  f8:	83 c7 01             	add    $0x1,%edi
+  fb:	39 da                	cmp    %ebx,%edx
+  fd:	74 e1                	je     e0 <matchstar+0x20>
+  ff:	83 fb 2e             	cmp    $0x2e,%ebx
+ 102:	74 dc                	je     e0 <matchstar+0x20>
+  return 0;
+}
+ 104:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 107:	5b                   	pop    %ebx
+ 108:	5e                   	pop    %esi
+ 109:	5f                   	pop    %edi
+ 10a:	5d                   	pop    %ebp
+ 10b:	c3                   	ret    
+ 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 110:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+ 113:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 118:	5b                   	pop    %ebx
+ 119:	5e                   	pop    %esi
+ 11a:	5f                   	pop    %edi
+ 11b:	5d                   	pop    %ebp
+ 11c:	c3                   	ret    
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <matchhere>:
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	56                   	push   %esi
+ 129:	53                   	push   %ebx
+ 12a:	83 ec 0c             	sub    $0xc,%esp
+ 12d:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 130:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+ 133:	0f b6 01             	movzbl (%ecx),%eax
+ 136:	84 c0                	test   %al,%al
+ 138:	75 2b                	jne    165 <matchhere+0x45>
+ 13a:	eb 64                	jmp    1a0 <matchhere+0x80>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  if(re[0] == '$' && re[1] == '\0')
+ 140:	0f b6 37             	movzbl (%edi),%esi
+ 143:	80 fa 24             	cmp    $0x24,%dl
+ 146:	75 04                	jne    14c <matchhere+0x2c>
+ 148:	84 c0                	test   %al,%al
+ 14a:	74 61                	je     1ad <matchhere+0x8d>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+ 14c:	89 f3                	mov    %esi,%ebx
+ 14e:	84 db                	test   %bl,%bl
+ 150:	74 3e                	je     190 <matchhere+0x70>
+ 152:	80 fa 2e             	cmp    $0x2e,%dl
+ 155:	74 04                	je     15b <matchhere+0x3b>
+ 157:	38 d3                	cmp    %dl,%bl
+ 159:	75 35                	jne    190 <matchhere+0x70>
+    return matchhere(re+1, text+1);
+ 15b:	83 c7 01             	add    $0x1,%edi
+ 15e:	83 c1 01             	add    $0x1,%ecx
+  if(re[0] == '\0')
+ 161:	84 c0                	test   %al,%al
+ 163:	74 3b                	je     1a0 <matchhere+0x80>
+  if(re[1] == '*')
+ 165:	0f be d0             	movsbl %al,%edx
+ 168:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+ 16c:	3c 2a                	cmp    $0x2a,%al
+ 16e:	75 d0                	jne    140 <matchhere+0x20>
+    return matchstar(re[0], re+2, text);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	83 c1 02             	add    $0x2,%ecx
+ 176:	57                   	push   %edi
+ 177:	51                   	push   %ecx
+ 178:	52                   	push   %edx
+ 179:	e8 42 ff ff ff       	call   c0 <matchstar>
+ 17e:	83 c4 10             	add    $0x10,%esp
+}
+ 181:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 184:	5b                   	pop    %ebx
+ 185:	5e                   	pop    %esi
+ 186:	5f                   	pop    %edi
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 190:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 193:	31 c0                	xor    %eax,%eax
+}
+ 195:	5b                   	pop    %ebx
+ 196:	5e                   	pop    %esi
+ 197:	5f                   	pop    %edi
+ 198:	5d                   	pop    %ebp
+ 199:	c3                   	ret    
+ 19a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 1;
+ 1a3:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1a8:	5b                   	pop    %ebx
+ 1a9:	5e                   	pop    %esi
+ 1aa:	5f                   	pop    %edi
+ 1ab:	5d                   	pop    %ebp
+ 1ac:	c3                   	ret    
+    return *text == '\0';
+ 1ad:	89 f0                	mov    %esi,%eax
+ 1af:	84 c0                	test   %al,%al
+ 1b1:	0f 94 c0             	sete   %al
+ 1b4:	0f b6 c0             	movzbl %al,%eax
+ 1b7:	eb c8                	jmp    181 <matchhere+0x61>
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001c0 <match>:
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	56                   	push   %esi
+ 1c8:	53                   	push   %ebx
+ 1c9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 1cc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(re[0] == '^')
+ 1cf:	80 3b 5e             	cmpb   $0x5e,(%ebx)
+ 1d2:	75 15                	jne    1e9 <match+0x29>
+ 1d4:	eb 3a                	jmp    210 <match+0x50>
+ 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 1e0:	83 c6 01             	add    $0x1,%esi
+ 1e3:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 1e7:	74 16                	je     1ff <match+0x3f>
+    if(matchhere(re, text))
+ 1e9:	83 ec 08             	sub    $0x8,%esp
+ 1ec:	56                   	push   %esi
+ 1ed:	53                   	push   %ebx
+ 1ee:	e8 2d ff ff ff       	call   120 <matchhere>
+ 1f3:	83 c4 10             	add    $0x10,%esp
+ 1f6:	85 c0                	test   %eax,%eax
+ 1f8:	74 e6                	je     1e0 <match+0x20>
+      return 1;
+ 1fa:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1ff:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 202:	5b                   	pop    %ebx
+ 203:	5e                   	pop    %esi
+ 204:	5d                   	pop    %ebp
+ 205:	c3                   	ret    
+ 206:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+    return matchhere(re+1, text);
+ 210:	83 c3 01             	add    $0x1,%ebx
+ 213:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+ 216:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 219:	5b                   	pop    %ebx
+ 21a:	5e                   	pop    %esi
+ 21b:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 21c:	e9 ff fe ff ff       	jmp    120 <matchhere>
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <grep>:
+{
+ 230:	f3 0f 1e fb          	endbr32 
+ 234:	55                   	push   %ebp
+ 235:	89 e5                	mov    %esp,%ebp
+ 237:	57                   	push   %edi
+ 238:	56                   	push   %esi
+ 239:	53                   	push   %ebx
+ 23a:	83 ec 1c             	sub    $0x1c,%esp
+  m = 0;
+ 23d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+{
+ 244:	8b 75 08             	mov    0x8(%ebp),%esi
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 250:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 253:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 258:	83 ec 04             	sub    $0x4,%esp
+ 25b:	29 c8                	sub    %ecx,%eax
+ 25d:	50                   	push   %eax
+ 25e:	8d 81 80 0e 00 00    	lea    0xe80(%ecx),%eax
+ 264:	50                   	push   %eax
+ 265:	ff 75 0c             	pushl  0xc(%ebp)
+ 268:	e8 4e 03 00 00       	call   5bb <read>
+ 26d:	83 c4 10             	add    $0x10,%esp
+ 270:	85 c0                	test   %eax,%eax
+ 272:	0f 8e b8 00 00 00    	jle    330 <grep+0x100>
+    m += n;
+ 278:	01 45 e4             	add    %eax,-0x1c(%ebp)
+ 27b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+    p = buf;
+ 27e:	bb 80 0e 00 00       	mov    $0xe80,%ebx
+    buf[m] = '\0';
+ 283:	c6 81 80 0e 00 00 00 	movb   $0x0,0xe80(%ecx)
+    while((q = strchr(p, '\n')) != 0){
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 290:	83 ec 08             	sub    $0x8,%esp
+ 293:	6a 0a                	push   $0xa
+ 295:	53                   	push   %ebx
+ 296:	e8 85 01 00 00       	call   420 <strchr>
+ 29b:	83 c4 10             	add    $0x10,%esp
+ 29e:	89 c7                	mov    %eax,%edi
+ 2a0:	85 c0                	test   %eax,%eax
+ 2a2:	74 3c                	je     2e0 <grep+0xb0>
+      if(match(pattern, p)){
+ 2a4:	83 ec 08             	sub    $0x8,%esp
+      *q = 0;
+ 2a7:	c6 07 00             	movb   $0x0,(%edi)
+      if(match(pattern, p)){
+ 2aa:	53                   	push   %ebx
+ 2ab:	56                   	push   %esi
+ 2ac:	e8 0f ff ff ff       	call   1c0 <match>
+ 2b1:	83 c4 10             	add    $0x10,%esp
+ 2b4:	8d 57 01             	lea    0x1(%edi),%edx
+ 2b7:	85 c0                	test   %eax,%eax
+ 2b9:	75 05                	jne    2c0 <grep+0x90>
+      p = q+1;
+ 2bb:	89 d3                	mov    %edx,%ebx
+ 2bd:	eb d1                	jmp    290 <grep+0x60>
+ 2bf:	90                   	nop
+        write(1, p, q+1 - p);
+ 2c0:	89 d0                	mov    %edx,%eax
+ 2c2:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 2c5:	c6 07 0a             	movb   $0xa,(%edi)
+        write(1, p, q+1 - p);
+ 2c8:	29 d8                	sub    %ebx,%eax
+ 2ca:	89 55 e0             	mov    %edx,-0x20(%ebp)
+ 2cd:	50                   	push   %eax
+ 2ce:	53                   	push   %ebx
+ 2cf:	6a 01                	push   $0x1
+ 2d1:	e8 ed 02 00 00       	call   5c3 <write>
+ 2d6:	8b 55 e0             	mov    -0x20(%ebp),%edx
+ 2d9:	83 c4 10             	add    $0x10,%esp
+      p = q+1;
+ 2dc:	89 d3                	mov    %edx,%ebx
+ 2de:	eb b0                	jmp    290 <grep+0x60>
+    if(p == buf)
+ 2e0:	81 fb 80 0e 00 00    	cmp    $0xe80,%ebx
+ 2e6:	74 38                	je     320 <grep+0xf0>
+    if(m > 0){
+ 2e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+ 2eb:	85 c9                	test   %ecx,%ecx
+ 2ed:	0f 8e 5d ff ff ff    	jle    250 <grep+0x20>
+      m -= p - buf;
+ 2f3:	89 d8                	mov    %ebx,%eax
+      memmove(buf, p, m);
+ 2f5:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2f8:	2d 80 0e 00 00       	sub    $0xe80,%eax
+ 2fd:	29 c1                	sub    %eax,%ecx
+      memmove(buf, p, m);
+ 2ff:	51                   	push   %ecx
+ 300:	53                   	push   %ebx
+ 301:	68 80 0e 00 00       	push   $0xe80
+      m -= p - buf;
+ 306:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+      memmove(buf, p, m);
+ 309:	e8 62 02 00 00       	call   570 <memmove>
+ 30e:	83 c4 10             	add    $0x10,%esp
+ 311:	e9 3a ff ff ff       	jmp    250 <grep+0x20>
+ 316:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 0;
+ 320:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+ 327:	e9 24 ff ff ff       	jmp    250 <grep+0x20>
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+ 330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 333:	5b                   	pop    %ebx
+ 334:	5e                   	pop    %esi
+ 335:	5f                   	pop    %edi
+ 336:	5d                   	pop    %ebp
+ 337:	c3                   	ret    
+ 338:	66 90                	xchg   %ax,%ax
+ 33a:	66 90                	xchg   %ax,%ax
+ 33c:	66 90                	xchg   %ax,%ax
+ 33e:	66 90                	xchg   %ax,%ax
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <draw>:
+SYSCALL(draw)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <history>:
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+ 653:	66 90                	xchg   %ax,%ax
+ 655:	66 90                	xchg   %ax,%ax
+ 657:	66 90                	xchg   %ax,%ax
+ 659:	66 90                	xchg   %ax,%ax
+ 65b:	66 90                	xchg   %ax,%ax
+ 65d:	66 90                	xchg   %ax,%ax
+ 65f:	90                   	nop
+
+00000660 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 3c             	sub    $0x3c,%esp
+ 669:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 66c:	89 d1                	mov    %edx,%ecx
+{
+ 66e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 671:	85 d2                	test   %edx,%edx
+ 673:	0f 89 7f 00 00 00    	jns    6f8 <printint+0x98>
+ 679:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 67d:	74 79                	je     6f8 <printint+0x98>
+    neg = 1;
+ 67f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 686:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 688:	31 db                	xor    %ebx,%ebx
+ 68a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 690:	89 c8                	mov    %ecx,%eax
+ 692:	31 d2                	xor    %edx,%edx
+ 694:	89 cf                	mov    %ecx,%edi
+ 696:	f7 75 c4             	divl   -0x3c(%ebp)
+ 699:	0f b6 92 b8 0a 00 00 	movzbl 0xab8(%edx),%edx
+ 6a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6a3:	89 d8                	mov    %ebx,%eax
+ 6a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6b1:	76 dd                	jbe    690 <printint+0x30>
+  if(neg)
+ 6b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6b6:	85 c9                	test   %ecx,%ecx
+ 6b8:	74 0c                	je     6c6 <printint+0x66>
+    buf[i++] = '-';
+ 6ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6cd:	eb 07                	jmp    6d6 <printint+0x76>
+ 6cf:	90                   	nop
+ 6d0:	0f b6 13             	movzbl (%ebx),%edx
+ 6d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6d6:	83 ec 04             	sub    $0x4,%esp
+ 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6dc:	6a 01                	push   $0x1
+ 6de:	56                   	push   %esi
+ 6df:	57                   	push   %edi
+ 6e0:	e8 de fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6ff:	eb 87                	jmp    688 <printint+0x28>
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+
+00000710 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 710:	f3 0f 1e fb          	endbr32 
+ 714:	55                   	push   %ebp
+ 715:	89 e5                	mov    %esp,%ebp
+ 717:	57                   	push   %edi
+ 718:	56                   	push   %esi
+ 719:	53                   	push   %ebx
+ 71a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 71d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 720:	0f b6 1e             	movzbl (%esi),%ebx
+ 723:	84 db                	test   %bl,%bl
+ 725:	0f 84 b4 00 00 00    	je     7df <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 72b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 72e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 731:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 734:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 736:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 739:	eb 33                	jmp    76e <printf+0x5e>
+ 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+ 740:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 743:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 748:	83 f8 25             	cmp    $0x25,%eax
+ 74b:	74 17                	je     764 <printf+0x54>
+  write(fd, &c, 1);
+ 74d:	83 ec 04             	sub    $0x4,%esp
+ 750:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 753:	6a 01                	push   $0x1
+ 755:	57                   	push   %edi
+ 756:	ff 75 08             	pushl  0x8(%ebp)
+ 759:	e8 65 fe ff ff       	call   5c3 <write>
+ 75e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 761:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 764:	0f b6 1e             	movzbl (%esi),%ebx
+ 767:	83 c6 01             	add    $0x1,%esi
+ 76a:	84 db                	test   %bl,%bl
+ 76c:	74 71                	je     7df <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 76e:	0f be cb             	movsbl %bl,%ecx
+ 771:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 774:	85 d2                	test   %edx,%edx
+ 776:	74 c8                	je     740 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 778:	83 fa 25             	cmp    $0x25,%edx
+ 77b:	75 e7                	jne    764 <printf+0x54>
+      if(c == 'd'){
+ 77d:	83 f8 64             	cmp    $0x64,%eax
+ 780:	0f 84 9a 00 00 00    	je     820 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 786:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 78c:	83 f9 70             	cmp    $0x70,%ecx
+ 78f:	74 5f                	je     7f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 791:	83 f8 73             	cmp    $0x73,%eax
+ 794:	0f 84 d6 00 00 00    	je     870 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 79a:	83 f8 63             	cmp    $0x63,%eax
+ 79d:	0f 84 8d 00 00 00    	je     830 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7a3:	83 f8 25             	cmp    $0x25,%eax
+ 7a6:	0f 84 b4 00 00 00    	je     860 <printf+0x150>
+  write(fd, &c, 1);
+ 7ac:	83 ec 04             	sub    $0x4,%esp
+ 7af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7b3:	6a 01                	push   $0x1
+ 7b5:	57                   	push   %edi
+ 7b6:	ff 75 08             	pushl  0x8(%ebp)
+ 7b9:	e8 05 fe ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7be:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7c1:	83 c4 0c             	add    $0xc,%esp
+ 7c4:	6a 01                	push   $0x1
+ 7c6:	83 c6 01             	add    $0x1,%esi
+ 7c9:	57                   	push   %edi
+ 7ca:	ff 75 08             	pushl  0x8(%ebp)
+ 7cd:	e8 f1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7d6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7d9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7db:	84 db                	test   %bl,%bl
+ 7dd:	75 8f                	jne    76e <printf+0x5e>
+    }
+  }
+}
+ 7df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7e2:	5b                   	pop    %ebx
+ 7e3:	5e                   	pop    %esi
+ 7e4:	5f                   	pop    %edi
+ 7e5:	5d                   	pop    %ebp
+ 7e6:	c3                   	ret    
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 7f0:	83 ec 0c             	sub    $0xc,%esp
+ 7f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7f8:	6a 00                	push   $0x0
+ 7fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 800:	8b 13                	mov    (%ebx),%edx
+ 802:	e8 59 fe ff ff       	call   660 <printint>
+        ap++;
+ 807:	89 d8                	mov    %ebx,%eax
+ 809:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 80c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 80e:	83 c0 04             	add    $0x4,%eax
+ 811:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 814:	e9 4b ff ff ff       	jmp    764 <printf+0x54>
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 820:	83 ec 0c             	sub    $0xc,%esp
+ 823:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 828:	6a 01                	push   $0x1
+ 82a:	eb ce                	jmp    7fa <printf+0xea>
+ 82c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 830:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 833:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 836:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 838:	6a 01                	push   $0x1
+        ap++;
+ 83a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 83d:	57                   	push   %edi
+ 83e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 841:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 844:	e8 7a fd ff ff       	call   5c3 <write>
+        ap++;
+ 849:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 84c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 84f:	31 d2                	xor    %edx,%edx
+ 851:	e9 0e ff ff ff       	jmp    764 <printf+0x54>
+ 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 860:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 863:	83 ec 04             	sub    $0x4,%esp
+ 866:	e9 59 ff ff ff       	jmp    7c4 <printf+0xb4>
+ 86b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 86f:	90                   	nop
+        s = (char*)*ap;
+ 870:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 873:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 875:	83 c0 04             	add    $0x4,%eax
+ 878:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 87b:	85 db                	test   %ebx,%ebx
+ 87d:	74 17                	je     896 <printf+0x186>
+        while(*s != 0){
+ 87f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 882:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 884:	84 c0                	test   %al,%al
+ 886:	0f 84 d8 fe ff ff    	je     764 <printf+0x54>
+ 88c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 88f:	89 de                	mov    %ebx,%esi
+ 891:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 894:	eb 1a                	jmp    8b0 <printf+0x1a0>
+          s = "(null)";
+ 896:	bb ae 0a 00 00       	mov    $0xaae,%ebx
+        while(*s != 0){
+ 89b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8a3:	89 de                	mov    %ebx,%esi
+ 8a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8af:	90                   	nop
+  write(fd, &c, 1);
+ 8b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8b3:	83 c6 01             	add    $0x1,%esi
+ 8b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8b9:	6a 01                	push   $0x1
+ 8bb:	57                   	push   %edi
+ 8bc:	53                   	push   %ebx
+ 8bd:	e8 01 fd ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8c2:	0f b6 06             	movzbl (%esi),%eax
+ 8c5:	83 c4 10             	add    $0x10,%esp
+ 8c8:	84 c0                	test   %al,%al
+ 8ca:	75 e4                	jne    8b0 <printf+0x1a0>
+ 8cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8cf:	31 d2                	xor    %edx,%edx
+ 8d1:	e9 8e fe ff ff       	jmp    764 <printf+0x54>
+ 8d6:	66 90                	xchg   %ax,%ax
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8e0:	f3 0f 1e fb          	endbr32 
+ 8e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e5:	a1 60 0e 00 00       	mov    0xe60,%eax
+{
+ 8ea:	89 e5                	mov    %esp,%ebp
+ 8ec:	57                   	push   %edi
+ 8ed:	56                   	push   %esi
+ 8ee:	53                   	push   %ebx
+ 8ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 8f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f7:	39 c8                	cmp    %ecx,%eax
+ 8f9:	73 15                	jae    910 <free+0x30>
+ 8fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8ff:	90                   	nop
+ 900:	39 d1                	cmp    %edx,%ecx
+ 902:	72 14                	jb     918 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 904:	39 d0                	cmp    %edx,%eax
+ 906:	73 10                	jae    918 <free+0x38>
+{
+ 908:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 90a:	8b 10                	mov    (%eax),%edx
+ 90c:	39 c8                	cmp    %ecx,%eax
+ 90e:	72 f0                	jb     900 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 910:	39 d0                	cmp    %edx,%eax
+ 912:	72 f4                	jb     908 <free+0x28>
+ 914:	39 d1                	cmp    %edx,%ecx
+ 916:	73 f0                	jae    908 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 918:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 91b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 91e:	39 fa                	cmp    %edi,%edx
+ 920:	74 1e                	je     940 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 922:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 925:	8b 50 04             	mov    0x4(%eax),%edx
+ 928:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 92b:	39 f1                	cmp    %esi,%ecx
+ 92d:	74 28                	je     957 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 92f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 931:	5b                   	pop    %ebx
+  freep = p;
+ 932:	a3 60 0e 00 00       	mov    %eax,0xe60
+}
+ 937:	5e                   	pop    %esi
+ 938:	5f                   	pop    %edi
+ 939:	5d                   	pop    %ebp
+ 93a:	c3                   	ret    
+ 93b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 940:	03 72 04             	add    0x4(%edx),%esi
+ 943:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 946:	8b 10                	mov    (%eax),%edx
+ 948:	8b 12                	mov    (%edx),%edx
+ 94a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 94d:	8b 50 04             	mov    0x4(%eax),%edx
+ 950:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 953:	39 f1                	cmp    %esi,%ecx
+ 955:	75 d8                	jne    92f <free+0x4f>
+    p->s.size += bp->s.size;
+ 957:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 95a:	a3 60 0e 00 00       	mov    %eax,0xe60
+    p->s.size += bp->s.size;
+ 95f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 962:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 965:	89 10                	mov    %edx,(%eax)
+}
+ 967:	5b                   	pop    %ebx
+ 968:	5e                   	pop    %esi
+ 969:	5f                   	pop    %edi
+ 96a:	5d                   	pop    %ebp
+ 96b:	c3                   	ret    
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 97d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 980:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 986:	8d 70 07             	lea    0x7(%eax),%esi
+ 989:	c1 ee 03             	shr    $0x3,%esi
+ 98c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 98f:	85 ff                	test   %edi,%edi
+ 991:	0f 84 a9 00 00 00    	je     a40 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 997:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 999:	8b 48 04             	mov    0x4(%eax),%ecx
+ 99c:	39 f1                	cmp    %esi,%ecx
+ 99e:	73 6d                	jae    a0d <malloc+0x9d>
+ 9a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9b8:	eb 17                	jmp    9d1 <malloc+0x61>
+ 9ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9c5:	39 f1                	cmp    %esi,%ecx
+ 9c7:	73 4f                	jae    a18 <malloc+0xa8>
+ 9c9:	8b 3d 60 0e 00 00    	mov    0xe60,%edi
+ 9cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9d1:	39 c7                	cmp    %eax,%edi
+ 9d3:	75 eb                	jne    9c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9d5:	83 ec 0c             	sub    $0xc,%esp
+ 9d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9db:	e8 4b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ 9e0:	83 c4 10             	add    $0x10,%esp
+ 9e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9e6:	74 1b                	je     a03 <malloc+0x93>
+  hp->s.size = nu;
+ 9e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9eb:	83 ec 0c             	sub    $0xc,%esp
+ 9ee:	83 c0 08             	add    $0x8,%eax
+ 9f1:	50                   	push   %eax
+ 9f2:	e8 e9 fe ff ff       	call   8e0 <free>
+  return freep;
+ 9f7:	a1 60 0e 00 00       	mov    0xe60,%eax
+      if((p = morecore(nunits)) == 0)
+ 9fc:	83 c4 10             	add    $0x10,%esp
+ 9ff:	85 c0                	test   %eax,%eax
+ a01:	75 bd                	jne    9c0 <malloc+0x50>
+        return 0;
+  }
+}
+ a03:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a06:	31 c0                	xor    %eax,%eax
+}
+ a08:	5b                   	pop    %ebx
+ a09:	5e                   	pop    %esi
+ a0a:	5f                   	pop    %edi
+ a0b:	5d                   	pop    %ebp
+ a0c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a0d:	89 c2                	mov    %eax,%edx
+ a0f:	89 f8                	mov    %edi,%eax
+ a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a18:	39 ce                	cmp    %ecx,%esi
+ a1a:	74 54                	je     a70 <malloc+0x100>
+        p->s.size -= nunits;
+ a1c:	29 f1                	sub    %esi,%ecx
+ a1e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a21:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a24:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a27:	a3 60 0e 00 00       	mov    %eax,0xe60
+}
+ a2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a2f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a32:	5b                   	pop    %ebx
+ a33:	5e                   	pop    %esi
+ a34:	5f                   	pop    %edi
+ a35:	5d                   	pop    %ebp
+ a36:	c3                   	ret    
+ a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a3e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a40:	c7 05 60 0e 00 00 64 	movl   $0xe64,0xe60
+ a47:	0e 00 00 
+    base.s.size = 0;
+ a4a:	bf 64 0e 00 00       	mov    $0xe64,%edi
+    base.s.ptr = freep = prevp = &base;
+ a4f:	c7 05 64 0e 00 00 64 	movl   $0xe64,0xe64
+ a56:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a59:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a5b:	c7 05 68 0e 00 00 00 	movl   $0x0,0xe68
+ a62:	00 00 00 
+    if(p->s.size >= nunits){
+ a65:	e9 36 ff ff ff       	jmp    9a0 <malloc+0x30>
+ a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a70:	8b 0a                	mov    (%edx),%ecx
+ a72:	89 08                	mov    %ecx,(%eax)
+ a74:	eb b1                	jmp    a27 <malloc+0xb7>
diff -ruN xv6-public/grep.d xv6-public_task_1/grep.d
--- xv6-public/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/grep.d	2021-09-15 20:34:57.696373000 +0530
@@ -0,0 +1 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/grep.o and xv6-public_task_1/grep.o differ
diff -ruN xv6-public/grep.sym xv6-public_task_1/grep.sym
--- xv6-public/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/grep.sym	2021-09-15 20:34:57.748373000 +0530
@@ -0,0 +1,64 @@
+00000000 .text
+00000a78 .rodata
+00000acc .eh_frame
+00000e60 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000660 printint
+00000ab8 digits.1091
+00000000 umalloc.c
+00000e60 freep
+00000e64 base
+00000340 strcpy
+00000710 printf
+00000570 memmove
+00000120 matchhere
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000230 grep
+00000970 malloc
+00000633 sleep
+000005b3 pipe
+000005c3 write
+0000064b history
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+00000e54 __bss_start
+00000400 memset
+00000000 main
+000000c0 matchstar
+00000370 strcmp
+0000061b dup
+00000e80 buf
+000004e0 stat
+00000e54 _edata
+00001280 _end
+000001c0 match
+00000603 link
+000005a3 exit
+00000530 atoi
+00000643 draw
+000003c0 strlen
+000005e3 open
+00000420 strchr
+0000060b mkdir
+000005cb close
+000008e0 free
diff -ruN xv6-public/ide.d xv6-public_task_1/ide.d
--- xv6-public/ide.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ide.d	2021-09-15 20:34:53.892379000 +0530
@@ -0,0 +1,2 @@
+ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
Binary files xv6-public/ide.o and xv6-public_task_1/ide.o differ
Binary files xv6-public/_init and xv6-public_task_1/_init differ
diff -ruN xv6-public/init.asm xv6-public_task_1/init.asm
--- xv6-public/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/init.asm	2021-09-15 20:34:57.816373000 +0530
@@ -0,0 +1,1265 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	53                   	push   %ebx
+  12:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+  13:	83 ec 08             	sub    $0x8,%esp
+  16:	6a 02                	push   $0x2
+  18:	68 28 08 00 00       	push   $0x828
+  1d:	e8 71 03 00 00       	call   393 <open>
+  22:	83 c4 10             	add    $0x10,%esp
+  25:	85 c0                	test   %eax,%eax
+  27:	0f 88 9b 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  2d:	83 ec 0c             	sub    $0xc,%esp
+  30:	6a 00                	push   $0x0
+  32:	e8 94 03 00 00       	call   3cb <dup>
+  dup(0);  // stderr
+  37:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3e:	e8 88 03 00 00       	call   3cb <dup>
+  43:	83 c4 10             	add    $0x10,%esp
+  46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  50:	83 ec 08             	sub    $0x8,%esp
+  53:	68 30 08 00 00       	push   $0x830
+  58:	6a 01                	push   $0x1
+  5a:	e8 61 04 00 00       	call   4c0 <printf>
+    pid = fork();
+  5f:	e8 e7 02 00 00       	call   34b <fork>
+    if(pid < 0){
+  64:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  67:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  69:	85 c0                	test   %eax,%eax
+  6b:	78 24                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  6d:	74 35                	je     a4 <main+0xa4>
+  6f:	90                   	nop
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 e6 02 00 00       	call   35b <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 d7                	js     50 <main+0x50>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 d3                	je     50 <main+0x50>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 6f 08 00 00       	push   $0x86f
+  85:	6a 01                	push   $0x1
+  87:	e8 34 04 00 00       	call   4c0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 43 08 00 00       	push   $0x843
+  98:	6a 01                	push   $0x1
+  9a:	e8 21 04 00 00       	call   4c0 <printf>
+      exit();
+  9f:	e8 af 02 00 00       	call   353 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 2c 0b 00 00       	push   $0xb2c
+  ab:	68 56 08 00 00       	push   $0x856
+  b0:	e8 d6 02 00 00       	call   38b <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 59 08 00 00       	push   $0x859
+  bc:	6a 01                	push   $0x1
+  be:	e8 fd 03 00 00       	call   4c0 <printf>
+      exit();
+  c3:	e8 8b 02 00 00       	call   353 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 28 08 00 00       	push   $0x828
+  d2:	e8 c4 02 00 00       	call   39b <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 28 08 00 00       	push   $0x828
+  e0:	e8 ae 02 00 00       	call   393 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 40 ff ff ff       	jmp    2d <main+0x2d>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f5:	31 c0                	xor    %eax,%eax
+{
+  f7:	89 e5                	mov    %esp,%ebp
+  f9:	53                   	push   %ebx
+  fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  fd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 107:	83 c0 01             	add    $0x1,%eax
+ 10a:	84 d2                	test   %dl,%dl
+ 10c:	75 f2                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 10e:	89 c8                	mov    %ecx,%eax
+ 110:	5b                   	pop    %ebx
+ 111:	5d                   	pop    %ebp
+ 112:	c3                   	ret    
+ 113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	53                   	push   %ebx
+ 128:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 12b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 12e:	0f b6 01             	movzbl (%ecx),%eax
+ 131:	0f b6 1a             	movzbl (%edx),%ebx
+ 134:	84 c0                	test   %al,%al
+ 136:	75 19                	jne    151 <strcmp+0x31>
+ 138:	eb 26                	jmp    160 <strcmp+0x40>
+ 13a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 140:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 144:	83 c1 01             	add    $0x1,%ecx
+ 147:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 14a:	0f b6 1a             	movzbl (%edx),%ebx
+ 14d:	84 c0                	test   %al,%al
+ 14f:	74 0f                	je     160 <strcmp+0x40>
+ 151:	38 d8                	cmp    %bl,%al
+ 153:	74 eb                	je     140 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 155:	29 d8                	sub    %ebx,%eax
+}
+ 157:	5b                   	pop    %ebx
+ 158:	5d                   	pop    %ebp
+ 159:	c3                   	ret    
+ 15a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 160:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 162:	29 d8                	sub    %ebx,%eax
+}
+ 164:	5b                   	pop    %ebx
+ 165:	5d                   	pop    %ebp
+ 166:	c3                   	ret    
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+
+00000170 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 17a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 17d:	74 21                	je     1a0 <strlen+0x30>
+ 17f:	31 c0                	xor    %eax,%eax
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 188:	83 c0 01             	add    $0x1,%eax
+ 18b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 18f:	89 c1                	mov    %eax,%ecx
+ 191:	75 f5                	jne    188 <strlen+0x18>
+    ;
+  return n;
+}
+ 193:	89 c8                	mov    %ecx,%eax
+ 195:	5d                   	pop    %ebp
+ 196:	c3                   	ret    
+ 197:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1a0:	31 c9                	xor    %ecx,%ecx
+}
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	89 c8                	mov    %ecx,%eax
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001b0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1b0:	f3 0f 1e fb          	endbr32 
+ 1b4:	55                   	push   %ebp
+ 1b5:	89 e5                	mov    %esp,%ebp
+ 1b7:	57                   	push   %edi
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1bb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1be:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1c1:	89 d7                	mov    %edx,%edi
+ 1c3:	fc                   	cld    
+ 1c4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1c6:	89 d0                	mov    %edx,%eax
+ 1c8:	5f                   	pop    %edi
+ 1c9:	5d                   	pop    %ebp
+ 1ca:	c3                   	ret    
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1da:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1de:	0f b6 10             	movzbl (%eax),%edx
+ 1e1:	84 d2                	test   %dl,%dl
+ 1e3:	75 16                	jne    1fb <strchr+0x2b>
+ 1e5:	eb 21                	jmp    208 <strchr+0x38>
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+ 1f0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1f4:	83 c0 01             	add    $0x1,%eax
+ 1f7:	84 d2                	test   %dl,%dl
+ 1f9:	74 0d                	je     208 <strchr+0x38>
+    if(*s == c)
+ 1fb:	38 d1                	cmp    %dl,%cl
+ 1fd:	75 f1                	jne    1f0 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 208:	31 c0                	xor    %eax,%eax
+}
+ 20a:	5d                   	pop    %ebp
+ 20b:	c3                   	ret    
+ 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	57                   	push   %edi
+ 218:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 219:	31 f6                	xor    %esi,%esi
+{
+ 21b:	53                   	push   %ebx
+ 21c:	89 f3                	mov    %esi,%ebx
+ 21e:	83 ec 1c             	sub    $0x1c,%esp
+ 221:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 224:	eb 33                	jmp    259 <gets+0x49>
+ 226:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 230:	83 ec 04             	sub    $0x4,%esp
+ 233:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 236:	6a 01                	push   $0x1
+ 238:	50                   	push   %eax
+ 239:	6a 00                	push   $0x0
+ 23b:	e8 2b 01 00 00       	call   36b <read>
+    if(cc < 1)
+ 240:	83 c4 10             	add    $0x10,%esp
+ 243:	85 c0                	test   %eax,%eax
+ 245:	7e 1c                	jle    263 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 247:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 24b:	83 c7 01             	add    $0x1,%edi
+ 24e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 251:	3c 0a                	cmp    $0xa,%al
+ 253:	74 23                	je     278 <gets+0x68>
+ 255:	3c 0d                	cmp    $0xd,%al
+ 257:	74 1f                	je     278 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 259:	83 c3 01             	add    $0x1,%ebx
+ 25c:	89 fe                	mov    %edi,%esi
+ 25e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 261:	7c cd                	jl     230 <gets+0x20>
+ 263:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 265:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 268:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 26b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 26e:	5b                   	pop    %ebx
+ 26f:	5e                   	pop    %esi
+ 270:	5f                   	pop    %edi
+ 271:	5d                   	pop    %ebp
+ 272:	c3                   	ret    
+ 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 277:	90                   	nop
+ 278:	8b 75 08             	mov    0x8(%ebp),%esi
+ 27b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27e:	01 de                	add    %ebx,%esi
+ 280:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 282:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 285:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 288:	5b                   	pop    %ebx
+ 289:	5e                   	pop    %esi
+ 28a:	5f                   	pop    %edi
+ 28b:	5d                   	pop    %ebp
+ 28c:	c3                   	ret    
+ 28d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000290 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	56                   	push   %esi
+ 298:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	6a 00                	push   $0x0
+ 29e:	ff 75 08             	pushl  0x8(%ebp)
+ 2a1:	e8 ed 00 00 00       	call   393 <open>
+  if(fd < 0)
+ 2a6:	83 c4 10             	add    $0x10,%esp
+ 2a9:	85 c0                	test   %eax,%eax
+ 2ab:	78 2b                	js     2d8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2ad:	83 ec 08             	sub    $0x8,%esp
+ 2b0:	ff 75 0c             	pushl  0xc(%ebp)
+ 2b3:	89 c3                	mov    %eax,%ebx
+ 2b5:	50                   	push   %eax
+ 2b6:	e8 f0 00 00 00       	call   3ab <fstat>
+  close(fd);
+ 2bb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2be:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2c0:	e8 b6 00 00 00       	call   37b <close>
+  return r;
+ 2c5:	83 c4 10             	add    $0x10,%esp
+}
+ 2c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2cb:	89 f0                	mov    %esi,%eax
+ 2cd:	5b                   	pop    %ebx
+ 2ce:	5e                   	pop    %esi
+ 2cf:	5d                   	pop    %ebp
+ 2d0:	c3                   	ret    
+ 2d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 2d8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2dd:	eb e9                	jmp    2c8 <stat+0x38>
+ 2df:	90                   	nop
+
+000002e0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	53                   	push   %ebx
+ 2e8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2eb:	0f be 02             	movsbl (%edx),%eax
+ 2ee:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2f1:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2f4:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2f9:	77 1a                	ja     315 <atoi+0x35>
+ 2fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2ff:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 300:	83 c2 01             	add    $0x1,%edx
+ 303:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 306:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 30a:	0f be 02             	movsbl (%edx),%eax
+ 30d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 310:	80 fb 09             	cmp    $0x9,%bl
+ 313:	76 eb                	jbe    300 <atoi+0x20>
+  return n;
+}
+ 315:	89 c8                	mov    %ecx,%eax
+ 317:	5b                   	pop    %ebx
+ 318:	5d                   	pop    %ebp
+ 319:	c3                   	ret    
+ 31a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000320 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 320:	f3 0f 1e fb          	endbr32 
+ 324:	55                   	push   %ebp
+ 325:	89 e5                	mov    %esp,%ebp
+ 327:	57                   	push   %edi
+ 328:	8b 45 10             	mov    0x10(%ebp),%eax
+ 32b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 32e:	56                   	push   %esi
+ 32f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 332:	85 c0                	test   %eax,%eax
+ 334:	7e 0f                	jle    345 <memmove+0x25>
+ 336:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 338:	89 d7                	mov    %edx,%edi
+ 33a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 340:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 341:	39 f8                	cmp    %edi,%eax
+ 343:	75 fb                	jne    340 <memmove+0x20>
+  return vdst;
+}
+ 345:	5e                   	pop    %esi
+ 346:	89 d0                	mov    %edx,%eax
+ 348:	5f                   	pop    %edi
+ 349:	5d                   	pop    %ebp
+ 34a:	c3                   	ret    
+
+0000034b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 34b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <exit>:
+SYSCALL(exit)
+ 353:	b8 02 00 00 00       	mov    $0x2,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <wait>:
+SYSCALL(wait)
+ 35b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <pipe>:
+SYSCALL(pipe)
+ 363:	b8 04 00 00 00       	mov    $0x4,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <read>:
+SYSCALL(read)
+ 36b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <write>:
+SYSCALL(write)
+ 373:	b8 10 00 00 00       	mov    $0x10,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <close>:
+SYSCALL(close)
+ 37b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <kill>:
+SYSCALL(kill)
+ 383:	b8 06 00 00 00       	mov    $0x6,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <exec>:
+SYSCALL(exec)
+ 38b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <open>:
+SYSCALL(open)
+ 393:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <mknod>:
+SYSCALL(mknod)
+ 39b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <unlink>:
+SYSCALL(unlink)
+ 3a3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <fstat>:
+SYSCALL(fstat)
+ 3ab:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <link>:
+SYSCALL(link)
+ 3b3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mkdir>:
+SYSCALL(mkdir)
+ 3bb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <chdir>:
+SYSCALL(chdir)
+ 3c3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <dup>:
+SYSCALL(dup)
+ 3cb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <getpid>:
+SYSCALL(getpid)
+ 3d3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <sbrk>:
+SYSCALL(sbrk)
+ 3db:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <sleep>:
+SYSCALL(sleep)
+ 3e3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <uptime>:
+SYSCALL(uptime)
+ 3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <draw>:
+SYSCALL(draw)
+ 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <history>:
+ 3fb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+ 403:	66 90                	xchg   %ax,%ax
+ 405:	66 90                	xchg   %ax,%ax
+ 407:	66 90                	xchg   %ax,%ax
+ 409:	66 90                	xchg   %ax,%ax
+ 40b:	66 90                	xchg   %ax,%ax
+ 40d:	66 90                	xchg   %ax,%ax
+ 40f:	90                   	nop
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+ 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 41c:	89 d1                	mov    %edx,%ecx
+{
+ 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 421:	85 d2                	test   %edx,%edx
+ 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
+ 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 42d:	74 79                	je     4a8 <printint+0x98>
+    neg = 1;
+ 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 436:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 438:	31 db                	xor    %ebx,%ebx
+ 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 440:	89 c8                	mov    %ecx,%eax
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	89 cf                	mov    %ecx,%edi
+ 446:	f7 75 c4             	divl   -0x3c(%ebp)
+ 449:	0f b6 92 80 08 00 00 	movzbl 0x880(%edx),%edx
+ 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 453:	89 d8                	mov    %ebx,%eax
+ 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 461:	76 dd                	jbe    440 <printint+0x30>
+  if(neg)
+ 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 466:	85 c9                	test   %ecx,%ecx
+ 468:	74 0c                	je     476 <printint+0x66>
+    buf[i++] = '-';
+ 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 46f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 47d:	eb 07                	jmp    486 <printint+0x76>
+ 47f:	90                   	nop
+ 480:	0f b6 13             	movzbl (%ebx),%edx
+ 483:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 486:	83 ec 04             	sub    $0x4,%esp
+ 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 48c:	6a 01                	push   $0x1
+ 48e:	56                   	push   %esi
+ 48f:	57                   	push   %edi
+ 490:	e8 de fe ff ff       	call   373 <write>
+  while(--i >= 0)
+ 495:	83 c4 10             	add    $0x10,%esp
+ 498:	39 de                	cmp    %ebx,%esi
+ 49a:	75 e4                	jne    480 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49f:	5b                   	pop    %ebx
+ 4a0:	5e                   	pop    %esi
+ 4a1:	5f                   	pop    %edi
+ 4a2:	5d                   	pop    %ebp
+ 4a3:	c3                   	ret    
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4af:	eb 87                	jmp    438 <printint+0x28>
+ 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+
+000004c0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4c0:	f3 0f 1e fb          	endbr32 
+ 4c4:	55                   	push   %ebp
+ 4c5:	89 e5                	mov    %esp,%ebp
+ 4c7:	57                   	push   %edi
+ 4c8:	56                   	push   %esi
+ 4c9:	53                   	push   %ebx
+ 4ca:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4cd:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 4d0:	0f b6 1e             	movzbl (%esi),%ebx
+ 4d3:	84 db                	test   %bl,%bl
+ 4d5:	0f 84 b4 00 00 00    	je     58f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 4db:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4de:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 4e1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4e4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 4e6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4e9:	eb 33                	jmp    51e <printf+0x5e>
+ 4eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4ef:	90                   	nop
+ 4f0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4f3:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	74 17                	je     514 <printf+0x54>
+  write(fd, &c, 1);
+ 4fd:	83 ec 04             	sub    $0x4,%esp
+ 500:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	ff 75 08             	pushl  0x8(%ebp)
+ 509:	e8 65 fe ff ff       	call   373 <write>
+ 50e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 511:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 514:	0f b6 1e             	movzbl (%esi),%ebx
+ 517:	83 c6 01             	add    $0x1,%esi
+ 51a:	84 db                	test   %bl,%bl
+ 51c:	74 71                	je     58f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 51e:	0f be cb             	movsbl %bl,%ecx
+ 521:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 524:	85 d2                	test   %edx,%edx
+ 526:	74 c8                	je     4f0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 528:	83 fa 25             	cmp    $0x25,%edx
+ 52b:	75 e7                	jne    514 <printf+0x54>
+      if(c == 'd'){
+ 52d:	83 f8 64             	cmp    $0x64,%eax
+ 530:	0f 84 9a 00 00 00    	je     5d0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 536:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 53c:	83 f9 70             	cmp    $0x70,%ecx
+ 53f:	74 5f                	je     5a0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 541:	83 f8 73             	cmp    $0x73,%eax
+ 544:	0f 84 d6 00 00 00    	je     620 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 54a:	83 f8 63             	cmp    $0x63,%eax
+ 54d:	0f 84 8d 00 00 00    	je     5e0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 553:	83 f8 25             	cmp    $0x25,%eax
+ 556:	0f 84 b4 00 00 00    	je     610 <printf+0x150>
+  write(fd, &c, 1);
+ 55c:	83 ec 04             	sub    $0x4,%esp
+ 55f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 563:	6a 01                	push   $0x1
+ 565:	57                   	push   %edi
+ 566:	ff 75 08             	pushl  0x8(%ebp)
+ 569:	e8 05 fe ff ff       	call   373 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 56e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 571:	83 c4 0c             	add    $0xc,%esp
+ 574:	6a 01                	push   $0x1
+ 576:	83 c6 01             	add    $0x1,%esi
+ 579:	57                   	push   %edi
+ 57a:	ff 75 08             	pushl  0x8(%ebp)
+ 57d:	e8 f1 fd ff ff       	call   373 <write>
+  for(i = 0; fmt[i]; i++){
+ 582:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 586:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 589:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 58b:	84 db                	test   %bl,%bl
+ 58d:	75 8f                	jne    51e <printf+0x5e>
+    }
+  }
+}
+ 58f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 592:	5b                   	pop    %ebx
+ 593:	5e                   	pop    %esi
+ 594:	5f                   	pop    %edi
+ 595:	5d                   	pop    %ebp
+ 596:	c3                   	ret    
+ 597:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a8:	6a 00                	push   $0x0
+ 5aa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5ad:	8b 45 08             	mov    0x8(%ebp),%eax
+ 5b0:	8b 13                	mov    (%ebx),%edx
+ 5b2:	e8 59 fe ff ff       	call   410 <printint>
+        ap++;
+ 5b7:	89 d8                	mov    %ebx,%eax
+ 5b9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5bc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 5be:	83 c0 04             	add    $0x4,%eax
+ 5c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 5c4:	e9 4b ff ff ff       	jmp    514 <printf+0x54>
+ 5c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5d8:	6a 01                	push   $0x1
+ 5da:	eb ce                	jmp    5aa <printf+0xea>
+ 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 5e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 5e3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5e6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 5e8:	6a 01                	push   $0x1
+        ap++;
+ 5ea:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 5ed:	57                   	push   %edi
+ 5ee:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 5f1:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f4:	e8 7a fd ff ff       	call   373 <write>
+        ap++;
+ 5f9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 5fc:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 0e ff ff ff       	jmp    514 <printf+0x54>
+ 606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 60d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 610:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+ 616:	e9 59 ff ff ff       	jmp    574 <printf+0xb4>
+ 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+        s = (char*)*ap;
+ 620:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 623:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 625:	83 c0 04             	add    $0x4,%eax
+ 628:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 62b:	85 db                	test   %ebx,%ebx
+ 62d:	74 17                	je     646 <printf+0x186>
+        while(*s != 0){
+ 62f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 632:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 634:	84 c0                	test   %al,%al
+ 636:	0f 84 d8 fe ff ff    	je     514 <printf+0x54>
+ 63c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 63f:	89 de                	mov    %ebx,%esi
+ 641:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 644:	eb 1a                	jmp    660 <printf+0x1a0>
+          s = "(null)";
+ 646:	bb 78 08 00 00       	mov    $0x878,%ebx
+        while(*s != 0){
+ 64b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 64e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 653:	89 de                	mov    %ebx,%esi
+ 655:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 658:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+  write(fd, &c, 1);
+ 660:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 663:	83 c6 01             	add    $0x1,%esi
+ 666:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 669:	6a 01                	push   $0x1
+ 66b:	57                   	push   %edi
+ 66c:	53                   	push   %ebx
+ 66d:	e8 01 fd ff ff       	call   373 <write>
+        while(*s != 0){
+ 672:	0f b6 06             	movzbl (%esi),%eax
+ 675:	83 c4 10             	add    $0x10,%esp
+ 678:	84 c0                	test   %al,%al
+ 67a:	75 e4                	jne    660 <printf+0x1a0>
+ 67c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 67f:	31 d2                	xor    %edx,%edx
+ 681:	e9 8e fe ff ff       	jmp    514 <printf+0x54>
+ 686:	66 90                	xchg   %ax,%ax
+ 688:	66 90                	xchg   %ax,%ax
+ 68a:	66 90                	xchg   %ax,%ax
+ 68c:	66 90                	xchg   %ax,%ax
+ 68e:	66 90                	xchg   %ax,%ax
+
+00000690 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 690:	f3 0f 1e fb          	endbr32 
+ 694:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 695:	a1 34 0b 00 00       	mov    0xb34,%eax
+{
+ 69a:	89 e5                	mov    %esp,%ebp
+ 69c:	57                   	push   %edi
+ 69d:	56                   	push   %esi
+ 69e:	53                   	push   %ebx
+ 69f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6a4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a7:	39 c8                	cmp    %ecx,%eax
+ 6a9:	73 15                	jae    6c0 <free+0x30>
+ 6ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6af:	90                   	nop
+ 6b0:	39 d1                	cmp    %edx,%ecx
+ 6b2:	72 14                	jb     6c8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b4:	39 d0                	cmp    %edx,%eax
+ 6b6:	73 10                	jae    6c8 <free+0x38>
+{
+ 6b8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6ba:	8b 10                	mov    (%eax),%edx
+ 6bc:	39 c8                	cmp    %ecx,%eax
+ 6be:	72 f0                	jb     6b0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c0:	39 d0                	cmp    %edx,%eax
+ 6c2:	72 f4                	jb     6b8 <free+0x28>
+ 6c4:	39 d1                	cmp    %edx,%ecx
+ 6c6:	73 f0                	jae    6b8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ce:	39 fa                	cmp    %edi,%edx
+ 6d0:	74 1e                	je     6f0 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 6d2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6d5:	8b 50 04             	mov    0x4(%eax),%edx
+ 6d8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 6db:	39 f1                	cmp    %esi,%ecx
+ 6dd:	74 28                	je     707 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 6df:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 6e1:	5b                   	pop    %ebx
+  freep = p;
+ 6e2:	a3 34 0b 00 00       	mov    %eax,0xb34
+}
+ 6e7:	5e                   	pop    %esi
+ 6e8:	5f                   	pop    %edi
+ 6e9:	5d                   	pop    %ebp
+ 6ea:	c3                   	ret    
+ 6eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ef:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 6f0:	03 72 04             	add    0x4(%edx),%esi
+ 6f3:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6f6:	8b 10                	mov    (%eax),%edx
+ 6f8:	8b 12                	mov    (%edx),%edx
+ 6fa:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6fd:	8b 50 04             	mov    0x4(%eax),%edx
+ 700:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 703:	39 f1                	cmp    %esi,%ecx
+ 705:	75 d8                	jne    6df <free+0x4f>
+    p->s.size += bp->s.size;
+ 707:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 70a:	a3 34 0b 00 00       	mov    %eax,0xb34
+    p->s.size += bp->s.size;
+ 70f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 712:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 715:	89 10                	mov    %edx,(%eax)
+}
+ 717:	5b                   	pop    %ebx
+ 718:	5e                   	pop    %esi
+ 719:	5f                   	pop    %edi
+ 71a:	5d                   	pop    %ebp
+ 71b:	c3                   	ret    
+ 71c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000720 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 720:	f3 0f 1e fb          	endbr32 
+ 724:	55                   	push   %ebp
+ 725:	89 e5                	mov    %esp,%ebp
+ 727:	57                   	push   %edi
+ 728:	56                   	push   %esi
+ 729:	53                   	push   %ebx
+ 72a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 72d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 730:	8b 3d 34 0b 00 00    	mov    0xb34,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 736:	8d 70 07             	lea    0x7(%eax),%esi
+ 739:	c1 ee 03             	shr    $0x3,%esi
+ 73c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 73f:	85 ff                	test   %edi,%edi
+ 741:	0f 84 a9 00 00 00    	je     7f0 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 747:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 749:	8b 48 04             	mov    0x4(%eax),%ecx
+ 74c:	39 f1                	cmp    %esi,%ecx
+ 74e:	73 6d                	jae    7bd <malloc+0x9d>
+ 750:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 756:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 75b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 75e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 765:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 768:	eb 17                	jmp    781 <malloc+0x61>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 770:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 772:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 775:	39 f1                	cmp    %esi,%ecx
+ 777:	73 4f                	jae    7c8 <malloc+0xa8>
+ 779:	8b 3d 34 0b 00 00    	mov    0xb34,%edi
+ 77f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 781:	39 c7                	cmp    %eax,%edi
+ 783:	75 eb                	jne    770 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 785:	83 ec 0c             	sub    $0xc,%esp
+ 788:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 78b:	e8 4b fc ff ff       	call   3db <sbrk>
+  if(p == (char*)-1)
+ 790:	83 c4 10             	add    $0x10,%esp
+ 793:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 796:	74 1b                	je     7b3 <malloc+0x93>
+  hp->s.size = nu;
+ 798:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 79b:	83 ec 0c             	sub    $0xc,%esp
+ 79e:	83 c0 08             	add    $0x8,%eax
+ 7a1:	50                   	push   %eax
+ 7a2:	e8 e9 fe ff ff       	call   690 <free>
+  return freep;
+ 7a7:	a1 34 0b 00 00       	mov    0xb34,%eax
+      if((p = morecore(nunits)) == 0)
+ 7ac:	83 c4 10             	add    $0x10,%esp
+ 7af:	85 c0                	test   %eax,%eax
+ 7b1:	75 bd                	jne    770 <malloc+0x50>
+        return 0;
+  }
+}
+ 7b3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7b6:	31 c0                	xor    %eax,%eax
+}
+ 7b8:	5b                   	pop    %ebx
+ 7b9:	5e                   	pop    %esi
+ 7ba:	5f                   	pop    %edi
+ 7bb:	5d                   	pop    %ebp
+ 7bc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7bd:	89 c2                	mov    %eax,%edx
+ 7bf:	89 f8                	mov    %edi,%eax
+ 7c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 7c8:	39 ce                	cmp    %ecx,%esi
+ 7ca:	74 54                	je     820 <malloc+0x100>
+        p->s.size -= nunits;
+ 7cc:	29 f1                	sub    %esi,%ecx
+ 7ce:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 7d1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 7d4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 7d7:	a3 34 0b 00 00       	mov    %eax,0xb34
+}
+ 7dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7df:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 7e2:	5b                   	pop    %ebx
+ 7e3:	5e                   	pop    %esi
+ 7e4:	5f                   	pop    %edi
+ 7e5:	5d                   	pop    %ebp
+ 7e6:	c3                   	ret    
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 7f0:	c7 05 34 0b 00 00 38 	movl   $0xb38,0xb34
+ 7f7:	0b 00 00 
+    base.s.size = 0;
+ 7fa:	bf 38 0b 00 00       	mov    $0xb38,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7ff:	c7 05 38 0b 00 00 38 	movl   $0xb38,0xb38
+ 806:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 809:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 80b:	c7 05 3c 0b 00 00 00 	movl   $0x0,0xb3c
+ 812:	00 00 00 
+    if(p->s.size >= nunits){
+ 815:	e9 36 ff ff ff       	jmp    750 <malloc+0x30>
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 820:	8b 0a                	mov    (%edx),%ecx
+ 822:	89 08                	mov    %ecx,(%eax)
+ 824:	eb b1                	jmp    7d7 <malloc+0xb7>
Binary files xv6-public/initcode and xv6-public_task_1/initcode differ
diff -ruN xv6-public/initcode.asm xv6-public_task_1/initcode.asm
--- xv6-public/initcode.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/initcode.asm	2021-09-15 20:34:56.264375000 +0530
@@ -0,0 +1,43 @@
+
+initcode.o:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <start>:
+
+
+# exec(init, argv)
+.globl start
+start:
+  pushl $argv
+   0:	68 24 00 00 00       	push   $0x24
+  pushl $init
+   5:	68 1c 00 00 00       	push   $0x1c
+  pushl $0  // where caller pc would be
+   a:	6a 00                	push   $0x0
+  movl $SYS_exec, %eax
+   c:	b8 07 00 00 00       	mov    $0x7,%eax
+  int $T_SYSCALL
+  11:	cd 40                	int    $0x40
+
+00000013 <exit>:
+
+# for(;;) exit();
+exit:
+  movl $SYS_exit, %eax
+  13:	b8 02 00 00 00       	mov    $0x2,%eax
+  int $T_SYSCALL
+  18:	cd 40                	int    $0x40
+  jmp exit
+  1a:	eb f7                	jmp    13 <exit>
+
+0000001c <init>:
+  1c:	2f                   	das    
+  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
+
+00000024 <argv>:
+  24:	1c 00                	sbb    $0x0,%al
+  26:	00 00                	add    %al,(%eax)
+  28:	00 00                	add    %al,(%eax)
+	...
diff -ruN xv6-public/initcode.d xv6-public_task_1/initcode.d
--- xv6-public/initcode.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/initcode.d	2021-09-15 20:34:56.232375000 +0530
@@ -0,0 +1 @@
+initcode.o: initcode.S syscall.h traps.h
Binary files xv6-public/initcode.o and xv6-public_task_1/initcode.o differ
Binary files xv6-public/initcode.out and xv6-public_task_1/initcode.out differ
diff -ruN xv6-public/init.d xv6-public_task_1/init.d
--- xv6-public/init.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/init.d	2021-09-15 20:34:57.792373000 +0530
@@ -0,0 +1 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
Binary files xv6-public/init.o and xv6-public_task_1/init.o differ
diff -ruN xv6-public/init.sym xv6-public_task_1/init.sym
--- xv6-public/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/init.sym	2021-09-15 20:34:57.820373000 +0530
@@ -0,0 +1,61 @@
+00000000 .text
+00000828 .rodata
+00000894 .eh_frame
+00000b2c .data
+00000b34 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000880 digits.1091
+00000000 umalloc.c
+00000b34 freep
+00000b38 base
+000000f0 strcpy
+000004c0 printf
+00000b2c argv
+00000320 memmove
+0000039b mknod
+00000210 gets
+000003d3 getpid
+00000720 malloc
+000003e3 sleep
+00000363 pipe
+00000373 write
+000003fb history
+000003ab fstat
+00000383 kill
+000003c3 chdir
+0000038b exec
+0000035b wait
+0000036b read
+000003a3 unlink
+0000034b fork
+000003db sbrk
+000003eb uptime
+00000b34 __bss_start
+000001b0 memset
+00000000 main
+00000120 strcmp
+000003cb dup
+00000290 stat
+00000b34 _edata
+00000b40 _end
+000003b3 link
+00000353 exit
+000002e0 atoi
+000003f3 draw
+00000170 strlen
+00000393 open
+000001d0 strchr
+000003bb mkdir
+0000037b close
+00000690 free
diff -ruN xv6-public/ioapic.d xv6-public_task_1/ioapic.d
--- xv6-public/ioapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ioapic.d	2021-09-15 20:34:53.956379000 +0530
@@ -0,0 +1 @@
+ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
Binary files xv6-public/ioapic.o and xv6-public_task_1/ioapic.o differ
diff -ruN xv6-public/kalloc.d xv6-public_task_1/kalloc.d
--- xv6-public/kalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/kalloc.d	2021-09-15 20:34:54.040379000 +0530
@@ -0,0 +1,2 @@
+kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h spinlock.h
Binary files xv6-public/kalloc.o and xv6-public_task_1/kalloc.o differ
diff -ruN xv6-public/kbd.d xv6-public_task_1/kbd.d
--- xv6-public/kbd.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/kbd.d	2021-09-15 20:34:54.116378000 +0530
@@ -0,0 +1 @@
+kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
Binary files xv6-public/kbd.o and xv6-public_task_1/kbd.o differ
Binary files xv6-public/kernel and xv6-public_task_1/kernel differ
diff -ruN xv6-public/kernel.asm xv6-public_task_1/kernel.asm
--- xv6-public/kernel.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/kernel.asm	2021-09-15 20:34:56.376375000 +0530
@@ -0,0 +1,16749 @@
+
+kernel:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+80100000 <multiboot_header>:
+80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
+80100006:	00 00                	add    %al,(%eax)
+80100008:	fe 4f 52             	decb   0x52(%edi)
+8010000b:	e4                   	.byte 0xe4
+
+8010000c <entry>:
+
+# Entering xv6 on boot processor, with paging off.
+.globl entry
+entry:
+  # Turn on page size extension for 4Mbyte pages
+  movl    %cr4, %eax
+8010000c:	0f 20 e0             	mov    %cr4,%eax
+  orl     $(CR4_PSE), %eax
+8010000f:	83 c8 10             	or     $0x10,%eax
+  movl    %eax, %cr4
+80100012:	0f 22 e0             	mov    %eax,%cr4
+  # Set page directory
+  movl    $(V2P_WO(entrypgdir)), %eax
+80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
+  movl    %eax, %cr3
+8010001a:	0f 22 d8             	mov    %eax,%cr3
+  # Turn on paging.
+  movl    %cr0, %eax
+8010001d:	0f 20 c0             	mov    %cr0,%eax
+  orl     $(CR0_PG|CR0_WP), %eax
+80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
+  movl    %eax, %cr0
+80100025:	0f 22 c0             	mov    %eax,%cr0
+
+  # Set up the stack pointer.
+  movl $(stack + KSTACKSIZE), %esp
+80100028:	bc c0 c5 10 80       	mov    $0x8010c5c0,%esp
+
+  # Jump to main(), and switch to executing at
+  # high addresses. The indirect call is needed because
+  # the assembler produces a PC-relative instruction
+  # for a direct jump.
+  mov $main, %eax
+8010002d:	b8 30 3a 10 80       	mov    $0x80103a30,%eax
+  jmp *%eax
+80100032:	ff e0                	jmp    *%eax
+80100034:	66 90                	xchg   %ax,%ax
+80100036:	66 90                	xchg   %ax,%ax
+80100038:	66 90                	xchg   %ax,%ax
+8010003a:	66 90                	xchg   %ax,%ax
+8010003c:	66 90                	xchg   %ax,%ax
+8010003e:	66 90                	xchg   %ax,%ax
+
+80100040 <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+80100040:	f3 0f 1e fb          	endbr32 
+80100044:	55                   	push   %ebp
+80100045:	89 e5                	mov    %esp,%ebp
+80100047:	53                   	push   %ebx
+
+//PAGEBREAK!
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+80100048:	bb f4 c5 10 80       	mov    $0x8010c5f4,%ebx
+{
+8010004d:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&bcache.lock, "bcache");
+80100050:	68 a0 7b 10 80       	push   $0x80107ba0
+80100055:	68 c0 c5 10 80       	push   $0x8010c5c0
+8010005a:	e8 71 4d 00 00       	call   80104dd0 <initlock>
+  bcache.head.next = &bcache.head;
+8010005f:	83 c4 10             	add    $0x10,%esp
+80100062:	b8 bc 0c 11 80       	mov    $0x80110cbc,%eax
+  bcache.head.prev = &bcache.head;
+80100067:	c7 05 0c 0d 11 80 bc 	movl   $0x80110cbc,0x80110d0c
+8010006e:	0c 11 80 
+  bcache.head.next = &bcache.head;
+80100071:	c7 05 10 0d 11 80 bc 	movl   $0x80110cbc,0x80110d10
+80100078:	0c 11 80 
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+8010007b:	eb 05                	jmp    80100082 <binit+0x42>
+8010007d:	8d 76 00             	lea    0x0(%esi),%esi
+80100080:	89 d3                	mov    %edx,%ebx
+    b->next = bcache.head.next;
+80100082:	89 43 54             	mov    %eax,0x54(%ebx)
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+80100085:	83 ec 08             	sub    $0x8,%esp
+80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
+    b->prev = &bcache.head;
+8010008b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
+    initsleeplock(&b->lock, "buffer");
+80100092:	68 a7 7b 10 80       	push   $0x80107ba7
+80100097:	50                   	push   %eax
+80100098:	e8 f3 4b 00 00       	call   80104c90 <initsleeplock>
+    bcache.head.next->prev = b;
+8010009d:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
+801000a8:	83 c4 10             	add    $0x10,%esp
+    bcache.head.next->prev = b;
+801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+801000ae:	89 d8                	mov    %ebx,%eax
+801000b0:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+801000b6:	81 fb 60 0a 11 80    	cmp    $0x80110a60,%ebx
+801000bc:	75 c2                	jne    80100080 <binit+0x40>
+  }
+}
+801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801000c1:	c9                   	leave  
+801000c2:	c3                   	ret    
+801000c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801000ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801000d0 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+801000d0:	f3 0f 1e fb          	endbr32 
+801000d4:	55                   	push   %ebp
+801000d5:	89 e5                	mov    %esp,%ebp
+801000d7:	57                   	push   %edi
+801000d8:	56                   	push   %esi
+801000d9:	53                   	push   %ebx
+801000da:	83 ec 18             	sub    $0x18,%esp
+801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
+801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&bcache.lock);
+801000e3:	68 c0 c5 10 80       	push   $0x8010c5c0
+801000e8:	e8 63 4e 00 00       	call   80104f50 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+801000ed:	8b 1d 10 0d 11 80    	mov    0x80110d10,%ebx
+801000f3:	83 c4 10             	add    $0x10,%esp
+801000f6:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+801000fc:	75 0d                	jne    8010010b <bread+0x3b>
+801000fe:	eb 20                	jmp    80100120 <bread+0x50>
+80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
+80100103:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+80100109:	74 15                	je     80100120 <bread+0x50>
+    if(b->dev == dev && b->blockno == blockno){
+8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
+8010010e:	75 f0                	jne    80100100 <bread+0x30>
+80100110:	3b 73 08             	cmp    0x8(%ebx),%esi
+80100113:	75 eb                	jne    80100100 <bread+0x30>
+      b->refcnt++;
+80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
+8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010011f:	90                   	nop
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+80100120:	8b 1d 0c 0d 11 80    	mov    0x80110d0c,%ebx
+80100126:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+8010012c:	75 0d                	jne    8010013b <bread+0x6b>
+8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
+80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
+80100133:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+80100139:	74 65                	je     801001a0 <bread+0xd0>
+    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
+8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010013e:	85 c0                	test   %eax,%eax
+80100140:	75 ee                	jne    80100130 <bread+0x60>
+80100142:	f6 03 04             	testb  $0x4,(%ebx)
+80100145:	75 e9                	jne    80100130 <bread+0x60>
+      b->dev = dev;
+80100147:	89 7b 04             	mov    %edi,0x4(%ebx)
+      b->blockno = blockno;
+8010014a:	89 73 08             	mov    %esi,0x8(%ebx)
+      b->flags = 0;
+8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+      b->refcnt = 1;
+80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+      release(&bcache.lock);
+8010015a:	83 ec 0c             	sub    $0xc,%esp
+8010015d:	68 c0 c5 10 80       	push   $0x8010c5c0
+80100162:	e8 a9 4e 00 00       	call   80105010 <release>
+      acquiresleep(&b->lock);
+80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
+8010016a:	89 04 24             	mov    %eax,(%esp)
+8010016d:	e8 5e 4b 00 00       	call   80104cd0 <acquiresleep>
+      return b;
+80100172:	83 c4 10             	add    $0x10,%esp
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if((b->flags & B_VALID) == 0) {
+80100175:	f6 03 02             	testb  $0x2,(%ebx)
+80100178:	74 0e                	je     80100188 <bread+0xb8>
+    iderw(b);
+  }
+  return b;
+}
+8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010017d:	89 d8                	mov    %ebx,%eax
+8010017f:	5b                   	pop    %ebx
+80100180:	5e                   	pop    %esi
+80100181:	5f                   	pop    %edi
+80100182:	5d                   	pop    %ebp
+80100183:	c3                   	ret    
+80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    iderw(b);
+80100188:	83 ec 0c             	sub    $0xc,%esp
+8010018b:	53                   	push   %ebx
+8010018c:	e8 df 2a 00 00       	call   80102c70 <iderw>
+80100191:	83 c4 10             	add    $0x10,%esp
+}
+80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100197:	89 d8                	mov    %ebx,%eax
+80100199:	5b                   	pop    %ebx
+8010019a:	5e                   	pop    %esi
+8010019b:	5f                   	pop    %edi
+8010019c:	5d                   	pop    %ebp
+8010019d:	c3                   	ret    
+8010019e:	66 90                	xchg   %ax,%ax
+  panic("bget: no buffers");
+801001a0:	83 ec 0c             	sub    $0xc,%esp
+801001a3:	68 ae 7b 10 80       	push   $0x80107bae
+801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
+801001ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801001b0 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+801001b0:	f3 0f 1e fb          	endbr32 
+801001b4:	55                   	push   %ebp
+801001b5:	89 e5                	mov    %esp,%ebp
+801001b7:	53                   	push   %ebx
+801001b8:	83 ec 10             	sub    $0x10,%esp
+801001bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
+801001c1:	50                   	push   %eax
+801001c2:	e8 a9 4b 00 00       	call   80104d70 <holdingsleep>
+801001c7:	83 c4 10             	add    $0x10,%esp
+801001ca:	85 c0                	test   %eax,%eax
+801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
+    panic("bwrite");
+  b->flags |= B_DIRTY;
+801001ce:	83 0b 04             	orl    $0x4,(%ebx)
+  iderw(b);
+801001d1:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+801001d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801001d7:	c9                   	leave  
+  iderw(b);
+801001d8:	e9 93 2a 00 00       	jmp    80102c70 <iderw>
+    panic("bwrite");
+801001dd:	83 ec 0c             	sub    $0xc,%esp
+801001e0:	68 bf 7b 10 80       	push   $0x80107bbf
+801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
+801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801001f0 <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the MRU list.
+void
+brelse(struct buf *b)
+{
+801001f0:	f3 0f 1e fb          	endbr32 
+801001f4:	55                   	push   %ebp
+801001f5:	89 e5                	mov    %esp,%ebp
+801001f7:	56                   	push   %esi
+801001f8:	53                   	push   %ebx
+801001f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holdingsleep(&b->lock))
+801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
+801001ff:	83 ec 0c             	sub    $0xc,%esp
+80100202:	56                   	push   %esi
+80100203:	e8 68 4b 00 00       	call   80104d70 <holdingsleep>
+80100208:	83 c4 10             	add    $0x10,%esp
+8010020b:	85 c0                	test   %eax,%eax
+8010020d:	74 66                	je     80100275 <brelse+0x85>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+8010020f:	83 ec 0c             	sub    $0xc,%esp
+80100212:	56                   	push   %esi
+80100213:	e8 18 4b 00 00       	call   80104d30 <releasesleep>
+
+  acquire(&bcache.lock);
+80100218:	c7 04 24 c0 c5 10 80 	movl   $0x8010c5c0,(%esp)
+8010021f:	e8 2c 4d 00 00       	call   80104f50 <acquire>
+  b->refcnt--;
+80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
+  if (b->refcnt == 0) {
+80100227:	83 c4 10             	add    $0x10,%esp
+  b->refcnt--;
+8010022a:	83 e8 01             	sub    $0x1,%eax
+8010022d:	89 43 4c             	mov    %eax,0x4c(%ebx)
+  if (b->refcnt == 0) {
+80100230:	85 c0                	test   %eax,%eax
+80100232:	75 2f                	jne    80100263 <brelse+0x73>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+80100234:	8b 43 54             	mov    0x54(%ebx),%eax
+80100237:	8b 53 50             	mov    0x50(%ebx),%edx
+8010023a:	89 50 50             	mov    %edx,0x50(%eax)
+    b->prev->next = b->next;
+8010023d:	8b 43 50             	mov    0x50(%ebx),%eax
+80100240:	8b 53 54             	mov    0x54(%ebx),%edx
+80100243:	89 50 54             	mov    %edx,0x54(%eax)
+    b->next = bcache.head.next;
+80100246:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+    b->prev = &bcache.head;
+8010024b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
+    b->next = bcache.head.next;
+80100252:	89 43 54             	mov    %eax,0x54(%ebx)
+    bcache.head.next->prev = b;
+80100255:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
+    bcache.head.next = b;
+8010025d:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
+  }
+  
+  release(&bcache.lock);
+80100263:	c7 45 08 c0 c5 10 80 	movl   $0x8010c5c0,0x8(%ebp)
+}
+8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010026d:	5b                   	pop    %ebx
+8010026e:	5e                   	pop    %esi
+8010026f:	5d                   	pop    %ebp
+  release(&bcache.lock);
+80100270:	e9 9b 4d 00 00       	jmp    80105010 <release>
+    panic("brelse");
+80100275:	83 ec 0c             	sub    $0xc,%esp
+80100278:	68 c6 7b 10 80       	push   $0x80107bc6
+8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
+80100282:	66 90                	xchg   %ax,%ax
+80100284:	66 90                	xchg   %ax,%ax
+80100286:	66 90                	xchg   %ax,%ax
+80100288:	66 90                	xchg   %ax,%ax
+8010028a:	66 90                	xchg   %ax,%ax
+8010028c:	66 90                	xchg   %ax,%ax
+8010028e:	66 90                	xchg   %ax,%ax
+
+80100290 <consoleread>:
+  return 0;
+}
+
+int
+consoleread(struct inode *ip, char *dst, int n)
+{
+80100290:	f3 0f 1e fb          	endbr32 
+80100294:	55                   	push   %ebp
+80100295:	89 e5                	mov    %esp,%ebp
+80100297:	57                   	push   %edi
+80100298:	56                   	push   %esi
+80100299:	53                   	push   %ebx
+8010029a:	83 ec 18             	sub    $0x18,%esp
+  uint target;
+  int c;
+
+  iunlock(ip);
+8010029d:	ff 75 08             	pushl  0x8(%ebp)
+{
+801002a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  target = n;
+801002a3:	89 de                	mov    %ebx,%esi
+  iunlock(ip);
+801002a5:	e8 86 1f 00 00       	call   80102230 <iunlock>
+  acquire(&cons.lock);
+801002aa:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+801002b1:	e8 9a 4c 00 00       	call   80104f50 <acquire>
+        // caller gets a 0-byte result.
+        input.r--;
+      }
+      break;
+    }
+    *dst++ = c;
+801002b6:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  while(n > 0){
+801002b9:	83 c4 10             	add    $0x10,%esp
+    *dst++ = c;
+801002bc:	01 df                	add    %ebx,%edi
+  while(n > 0){
+801002be:	85 db                	test   %ebx,%ebx
+801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
+    while(input.r == input.w){
+801002c6:	a1 20 10 11 80       	mov    0x80111020,%eax
+801002cb:	3b 05 24 10 11 80    	cmp    0x80111024,%eax
+801002d1:	74 27                	je     801002fa <consoleread+0x6a>
+801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
+801002d5:	8d 76 00             	lea    0x0(%esi),%esi
+      sleep(&input.r, &cons.lock);
+801002d8:	83 ec 08             	sub    $0x8,%esp
+801002db:	68 20 b5 10 80       	push   $0x8010b520
+801002e0:	68 20 10 11 80       	push   $0x80111020
+801002e5:	e8 26 46 00 00       	call   80104910 <sleep>
+    while(input.r == input.w){
+801002ea:	a1 20 10 11 80       	mov    0x80111020,%eax
+801002ef:	83 c4 10             	add    $0x10,%esp
+801002f2:	3b 05 24 10 11 80    	cmp    0x80111024,%eax
+801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
+      if(myproc()->killed){
+801002fa:	e8 51 40 00 00       	call   80104350 <myproc>
+801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
+80100302:	85 c9                	test   %ecx,%ecx
+80100304:	74 d2                	je     801002d8 <consoleread+0x48>
+        release(&cons.lock);
+80100306:	83 ec 0c             	sub    $0xc,%esp
+80100309:	68 20 b5 10 80       	push   $0x8010b520
+8010030e:	e8 fd 4c 00 00       	call   80105010 <release>
+        ilock(ip);
+80100313:	5a                   	pop    %edx
+80100314:	ff 75 08             	pushl  0x8(%ebp)
+80100317:	e8 34 1e 00 00       	call   80102150 <ilock>
+        return -1;
+8010031c:	83 c4 10             	add    $0x10,%esp
+  }
+  release(&cons.lock);
+  ilock(ip);
+
+  return target - n;
+}
+8010031f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return -1;
+80100322:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80100327:	5b                   	pop    %ebx
+80100328:	5e                   	pop    %esi
+80100329:	5f                   	pop    %edi
+8010032a:	5d                   	pop    %ebp
+8010032b:	c3                   	ret    
+8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    c = input.buf[input.r++ % INPUT_BUF];
+80100330:	8d 50 01             	lea    0x1(%eax),%edx
+80100333:	89 15 20 10 11 80    	mov    %edx,0x80111020
+80100339:	89 c2                	mov    %eax,%edx
+8010033b:	83 e2 7f             	and    $0x7f,%edx
+8010033e:	0f be 8a a0 0f 11 80 	movsbl -0x7feef060(%edx),%ecx
+    if(c == C('D')){  // EOF
+80100345:	80 f9 04             	cmp    $0x4,%cl
+80100348:	74 38                	je     80100382 <consoleread+0xf2>
+    *dst++ = c;
+8010034a:	89 d8                	mov    %ebx,%eax
+    --n;
+8010034c:	83 eb 01             	sub    $0x1,%ebx
+    *dst++ = c;
+8010034f:	f7 d8                	neg    %eax
+80100351:	88 0c 07             	mov    %cl,(%edi,%eax,1)
+    if(c == '\n')
+80100354:	83 f9 0a             	cmp    $0xa,%ecx
+80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
+  release(&cons.lock);
+8010035d:	83 ec 0c             	sub    $0xc,%esp
+80100360:	68 20 b5 10 80       	push   $0x8010b520
+80100365:	e8 a6 4c 00 00       	call   80105010 <release>
+  ilock(ip);
+8010036a:	58                   	pop    %eax
+8010036b:	ff 75 08             	pushl  0x8(%ebp)
+8010036e:	e8 dd 1d 00 00       	call   80102150 <ilock>
+  return target - n;
+80100373:	89 f0                	mov    %esi,%eax
+80100375:	83 c4 10             	add    $0x10,%esp
+}
+80100378:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return target - n;
+8010037b:	29 d8                	sub    %ebx,%eax
+}
+8010037d:	5b                   	pop    %ebx
+8010037e:	5e                   	pop    %esi
+8010037f:	5f                   	pop    %edi
+80100380:	5d                   	pop    %ebp
+80100381:	c3                   	ret    
+      if(n < target){
+80100382:	39 f3                	cmp    %esi,%ebx
+80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
+        input.r--;
+80100386:	a3 20 10 11 80       	mov    %eax,0x80111020
+8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
+8010038d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100390 <panic>:
+{
+80100390:	f3 0f 1e fb          	endbr32 
+80100394:	55                   	push   %ebp
+80100395:	89 e5                	mov    %esp,%ebp
+80100397:	56                   	push   %esi
+80100398:	53                   	push   %ebx
+80100399:	83 ec 30             	sub    $0x30,%esp
+}
+
+static inline void
+cli(void)
+{
+  asm volatile("cli");
+8010039c:	fa                   	cli    
+  cons.locking = 0;
+8010039d:	c7 05 54 b5 10 80 00 	movl   $0x0,0x8010b554
+801003a4:	00 00 00 
+  getcallerpcs(&s, pcs);
+801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
+801003aa:	8d 75 f8             	lea    -0x8(%ebp),%esi
+  cprintf("lapicid %d: panic: ", lapicid());
+801003ad:	e8 de 2e 00 00       	call   80103290 <lapicid>
+801003b2:	83 ec 08             	sub    $0x8,%esp
+801003b5:	50                   	push   %eax
+801003b6:	68 cd 7b 10 80       	push   $0x80107bcd
+801003bb:	e8 30 03 00 00       	call   801006f0 <cprintf>
+  cprintf(s);
+801003c0:	58                   	pop    %eax
+801003c1:	ff 75 08             	pushl  0x8(%ebp)
+801003c4:	e8 27 03 00 00       	call   801006f0 <cprintf>
+  cprintf("\n");
+801003c9:	c7 04 24 6b 8b 10 80 	movl   $0x80108b6b,(%esp)
+801003d0:	e8 1b 03 00 00       	call   801006f0 <cprintf>
+  getcallerpcs(&s, pcs);
+801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
+801003d8:	5a                   	pop    %edx
+801003d9:	59                   	pop    %ecx
+801003da:	53                   	push   %ebx
+801003db:	50                   	push   %eax
+801003dc:	e8 0f 4a 00 00       	call   80104df0 <getcallerpcs>
+  for(i=0; i<10; i++)
+801003e1:	83 c4 10             	add    $0x10,%esp
+    cprintf(" %p", pcs[i]);
+801003e4:	83 ec 08             	sub    $0x8,%esp
+801003e7:	ff 33                	pushl  (%ebx)
+801003e9:	83 c3 04             	add    $0x4,%ebx
+801003ec:	68 e1 7b 10 80       	push   $0x80107be1
+801003f1:	e8 fa 02 00 00       	call   801006f0 <cprintf>
+  for(i=0; i<10; i++)
+801003f6:	83 c4 10             	add    $0x10,%esp
+801003f9:	39 f3                	cmp    %esi,%ebx
+801003fb:	75 e7                	jne    801003e4 <panic+0x54>
+  panicked = 1; // freeze other CPU
+801003fd:	c7 05 58 b5 10 80 01 	movl   $0x1,0x8010b558
+80100404:	00 00 00 
+  for(;;)
+80100407:	eb fe                	jmp    80100407 <panic+0x77>
+80100409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80100410 <consputc.part.0>:
+consputc(int c)
+80100410:	55                   	push   %ebp
+80100411:	89 e5                	mov    %esp,%ebp
+80100413:	57                   	push   %edi
+80100414:	56                   	push   %esi
+80100415:	89 c6                	mov    %eax,%esi
+80100417:	53                   	push   %ebx
+80100418:	83 ec 1c             	sub    $0x1c,%esp
+  switch (c) {
+8010041b:	3d e4 00 00 00       	cmp    $0xe4,%eax
+80100420:	0f 84 52 01 00 00    	je     80100578 <consputc.part.0+0x168>
+80100426:	3d 00 01 00 00       	cmp    $0x100,%eax
+8010042b:	0f 85 5f 01 00 00    	jne    80100590 <consputc.part.0+0x180>
+      uartputc('\b'); uartputc(' '); uartputc('\b');  // uart is writing to the linux shell
+80100431:	83 ec 0c             	sub    $0xc,%esp
+80100434:	6a 08                	push   $0x8
+80100436:	e8 55 63 00 00       	call   80106790 <uartputc>
+8010043b:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+80100442:	e8 49 63 00 00       	call   80106790 <uartputc>
+80100447:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+8010044e:	e8 3d 63 00 00       	call   80106790 <uartputc>
+      break;
+80100453:	83 c4 10             	add    $0x10,%esp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80100456:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+8010045b:	b8 0e 00 00 00       	mov    $0xe,%eax
+80100460:	89 da                	mov    %ebx,%edx
+80100462:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100463:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+80100468:	89 ca                	mov    %ecx,%edx
+8010046a:	ec                   	in     (%dx),%al
+  pos = inb(CRTPORT+1) << 8;
+8010046b:	0f b6 f8             	movzbl %al,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010046e:	89 da                	mov    %ebx,%edx
+80100470:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100475:	c1 e7 08             	shl    $0x8,%edi
+80100478:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80100479:	89 ca                	mov    %ecx,%edx
+8010047b:	ec                   	in     (%dx),%al
+  pos |= inb(CRTPORT+1);
+8010047c:	0f b6 d8             	movzbl %al,%ebx
+8010047f:	09 fb                	or     %edi,%ebx
+  switch(c) {
+80100481:	81 fe e4 00 00 00    	cmp    $0xe4,%esi
+80100487:	0f 84 db 00 00 00    	je     80100568 <consputc.part.0+0x158>
+8010048d:	81 fe 00 01 00 00    	cmp    $0x100,%esi
+80100493:	0f 84 cf 00 00 00    	je     80100568 <consputc.part.0+0x158>
+80100499:	83 fe 0a             	cmp    $0xa,%esi
+8010049c:	0f 84 16 01 00 00    	je     801005b8 <consputc.part.0+0x1a8>
+      crt[pos++] = (c&0xff) | 0x0700;  // black on white
+801004a2:	89 f0                	mov    %esi,%eax
+801004a4:	0f b6 c0             	movzbl %al,%eax
+801004a7:	80 cc 07             	or     $0x7,%ah
+801004aa:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+801004b1:	80 
+801004b2:	83 c3 01             	add    $0x1,%ebx
+  if(pos < 0 || pos > 25*80)
+801004b5:	81 fb d0 07 00 00    	cmp    $0x7d0,%ebx
+801004bb:	0f 8f 11 01 00 00    	jg     801005d2 <consputc.part.0+0x1c2>
+  if((pos/80) >= 24){  // Scroll up.
+801004c1:	81 fb 7f 07 00 00    	cmp    $0x77f,%ebx
+801004c7:	7f 57                	jg     80100520 <consputc.part.0+0x110>
+801004c9:	0f b6 c7             	movzbl %bh,%eax
+801004cc:	88 5d e7             	mov    %bl,-0x19(%ebp)
+801004cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801004d2:	bf d4 03 00 00       	mov    $0x3d4,%edi
+801004d7:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004dc:	89 fa                	mov    %edi,%edx
+801004de:	ee                   	out    %al,(%dx)
+801004df:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+801004e4:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+801004e8:	89 ca                	mov    %ecx,%edx
+801004ea:	ee                   	out    %al,(%dx)
+801004eb:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004f0:	89 fa                	mov    %edi,%edx
+801004f2:	ee                   	out    %al,(%dx)
+801004f3:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+801004f7:	89 ca                	mov    %ecx,%edx
+801004f9:	ee                   	out    %al,(%dx)
+  if (c == BACKSPACE)
+801004fa:	81 fe 00 01 00 00    	cmp    $0x100,%esi
+80100500:	75 0d                	jne    8010050f <consputc.part.0+0xff>
+    crt[pos] = ' ' | 0x0700;
+80100502:	b8 20 07 00 00       	mov    $0x720,%eax
+80100507:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
+8010050e:	80 
+}
+8010050f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100512:	5b                   	pop    %ebx
+80100513:	5e                   	pop    %esi
+80100514:	5f                   	pop    %edi
+80100515:	5d                   	pop    %ebp
+80100516:	c3                   	ret    
+80100517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010051e:	66 90                	xchg   %ax,%ax
+    memmove(crt, crt+80, sizeof(crt[0])*23*80); 
+80100520:	83 ec 04             	sub    $0x4,%esp
+    pos -= 80;
+80100523:	83 eb 50             	sub    $0x50,%ebx
+    memmove(crt, crt+80, sizeof(crt[0])*23*80); 
+80100526:	68 60 0e 00 00       	push   $0xe60
+8010052b:	68 a0 80 0b 80       	push   $0x800b80a0
+80100530:	68 00 80 0b 80       	push   $0x800b8000
+80100535:	e8 c6 4b 00 00       	call   80105100 <memmove>
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+8010053a:	b8 80 07 00 00       	mov    $0x780,%eax
+8010053f:	83 c4 0c             	add    $0xc,%esp
+80100542:	29 d8                	sub    %ebx,%eax
+80100544:	01 c0                	add    %eax,%eax
+80100546:	50                   	push   %eax
+80100547:	8d 84 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%eax
+8010054e:	6a 00                	push   $0x0
+80100550:	50                   	push   %eax
+80100551:	e8 0a 4b 00 00       	call   80105060 <memset>
+80100556:	88 5d e7             	mov    %bl,-0x19(%ebp)
+80100559:	83 c4 10             	add    $0x10,%esp
+8010055c:	c6 45 e0 07          	movb   $0x7,-0x20(%ebp)
+80100560:	e9 6d ff ff ff       	jmp    801004d2 <consputc.part.0+0xc2>
+80100565:	8d 76 00             	lea    0x0(%esi),%esi
+      if(pos > 0) --pos;
+80100568:	85 db                	test   %ebx,%ebx
+8010056a:	74 3c                	je     801005a8 <consputc.part.0+0x198>
+8010056c:	83 eb 01             	sub    $0x1,%ebx
+8010056f:	e9 41 ff ff ff       	jmp    801004b5 <consputc.part.0+0xa5>
+80100574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      uartputc('\b');
+80100578:	83 ec 0c             	sub    $0xc,%esp
+8010057b:	6a 08                	push   $0x8
+8010057d:	e8 0e 62 00 00       	call   80106790 <uartputc>
+      break;
+80100582:	83 c4 10             	add    $0x10,%esp
+80100585:	e9 cc fe ff ff       	jmp    80100456 <consputc.part.0+0x46>
+8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      uartputc(c);
+80100590:	83 ec 0c             	sub    $0xc,%esp
+80100593:	50                   	push   %eax
+80100594:	e8 f7 61 00 00       	call   80106790 <uartputc>
+80100599:	83 c4 10             	add    $0x10,%esp
+8010059c:	e9 b5 fe ff ff       	jmp    80100456 <consputc.part.0+0x46>
+801005a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801005a8:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
+801005ac:	c6 45 e0 00          	movb   $0x0,-0x20(%ebp)
+801005b0:	e9 1d ff ff ff       	jmp    801004d2 <consputc.part.0+0xc2>
+801005b5:	8d 76 00             	lea    0x0(%esi),%esi
+      pos += 80 - pos%80;
+801005b8:	89 d8                	mov    %ebx,%eax
+801005ba:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+801005bf:	f7 e2                	mul    %edx
+801005c1:	c1 ea 06             	shr    $0x6,%edx
+801005c4:	8d 04 92             	lea    (%edx,%edx,4),%eax
+801005c7:	c1 e0 04             	shl    $0x4,%eax
+801005ca:	8d 58 50             	lea    0x50(%eax),%ebx
+      break;
+801005cd:	e9 e3 fe ff ff       	jmp    801004b5 <consputc.part.0+0xa5>
+    panic("pos under/overflow");
+801005d2:	83 ec 0c             	sub    $0xc,%esp
+801005d5:	68 e5 7b 10 80       	push   $0x80107be5
+801005da:	e8 b1 fd ff ff       	call   80100390 <panic>
+801005df:	90                   	nop
+
+801005e0 <printint>:
+{
+801005e0:	55                   	push   %ebp
+801005e1:	89 e5                	mov    %esp,%ebp
+801005e3:	57                   	push   %edi
+801005e4:	56                   	push   %esi
+801005e5:	53                   	push   %ebx
+801005e6:	83 ec 2c             	sub    $0x2c,%esp
+801005e9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+  if(sign && (sign = xx < 0))
+801005ec:	85 c9                	test   %ecx,%ecx
+801005ee:	74 04                	je     801005f4 <printint+0x14>
+801005f0:	85 c0                	test   %eax,%eax
+801005f2:	78 6d                	js     80100661 <printint+0x81>
+    x = xx;
+801005f4:	89 c1                	mov    %eax,%ecx
+801005f6:	31 f6                	xor    %esi,%esi
+  i = 0;
+801005f8:	89 75 cc             	mov    %esi,-0x34(%ebp)
+801005fb:	31 db                	xor    %ebx,%ebx
+801005fd:	8d 7d d7             	lea    -0x29(%ebp),%edi
+    buf[i++] = digits[x % base];
+80100600:	89 c8                	mov    %ecx,%eax
+80100602:	31 d2                	xor    %edx,%edx
+80100604:	89 ce                	mov    %ecx,%esi
+80100606:	f7 75 d4             	divl   -0x2c(%ebp)
+80100609:	0f b6 92 48 7c 10 80 	movzbl -0x7fef83b8(%edx),%edx
+80100610:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80100613:	89 d8                	mov    %ebx,%eax
+80100615:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+80100618:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+8010061b:	89 75 d0             	mov    %esi,-0x30(%ebp)
+    buf[i++] = digits[x % base];
+8010061e:	88 14 1f             	mov    %dl,(%edi,%ebx,1)
+  }while((x /= base) != 0);
+80100621:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+80100624:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+80100627:	73 d7                	jae    80100600 <printint+0x20>
+80100629:	8b 75 cc             	mov    -0x34(%ebp),%esi
+  if(sign)
+8010062c:	85 f6                	test   %esi,%esi
+8010062e:	74 0c                	je     8010063c <printint+0x5c>
+    buf[i++] = '-';
+80100630:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+80100635:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+80100637:	ba 2d 00 00 00       	mov    $0x2d,%edx
+  while(--i >= 0)
+8010063c:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+80100640:	0f be c2             	movsbl %dl,%eax
+  if(panicked){
+80100643:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+80100649:	85 d2                	test   %edx,%edx
+8010064b:	74 03                	je     80100650 <printint+0x70>
+  asm volatile("cli");
+8010064d:	fa                   	cli    
+    for(;;)
+8010064e:	eb fe                	jmp    8010064e <printint+0x6e>
+80100650:	e8 bb fd ff ff       	call   80100410 <consputc.part.0>
+  while(--i >= 0)
+80100655:	39 fb                	cmp    %edi,%ebx
+80100657:	74 10                	je     80100669 <printint+0x89>
+80100659:	0f be 03             	movsbl (%ebx),%eax
+8010065c:	83 eb 01             	sub    $0x1,%ebx
+8010065f:	eb e2                	jmp    80100643 <printint+0x63>
+    x = -xx;
+80100661:	f7 d8                	neg    %eax
+80100663:	89 ce                	mov    %ecx,%esi
+80100665:	89 c1                	mov    %eax,%ecx
+80100667:	eb 8f                	jmp    801005f8 <printint+0x18>
+}
+80100669:	83 c4 2c             	add    $0x2c,%esp
+8010066c:	5b                   	pop    %ebx
+8010066d:	5e                   	pop    %esi
+8010066e:	5f                   	pop    %edi
+8010066f:	5d                   	pop    %ebp
+80100670:	c3                   	ret    
+80100671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010067f:	90                   	nop
+
+80100680 <consolewrite>:
+
+int
+consolewrite(struct inode *ip, char *buf, int n)
+{
+80100680:	f3 0f 1e fb          	endbr32 
+80100684:	55                   	push   %ebp
+80100685:	89 e5                	mov    %esp,%ebp
+80100687:	57                   	push   %edi
+80100688:	56                   	push   %esi
+80100689:	53                   	push   %ebx
+8010068a:	83 ec 18             	sub    $0x18,%esp
+  int i;
+
+  iunlock(ip);
+8010068d:	ff 75 08             	pushl  0x8(%ebp)
+{
+80100690:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  iunlock(ip);
+80100693:	e8 98 1b 00 00       	call   80102230 <iunlock>
+  acquire(&cons.lock);
+80100698:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
+8010069f:	e8 ac 48 00 00       	call   80104f50 <acquire>
+  for(i = 0; i < n; i++)
+801006a4:	83 c4 10             	add    $0x10,%esp
+801006a7:	85 db                	test   %ebx,%ebx
+801006a9:	7e 24                	jle    801006cf <consolewrite+0x4f>
+801006ab:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801006ae:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
+  if(panicked){
+801006b1:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+801006b7:	85 d2                	test   %edx,%edx
+801006b9:	74 05                	je     801006c0 <consolewrite+0x40>
+801006bb:	fa                   	cli    
+    for(;;)
+801006bc:	eb fe                	jmp    801006bc <consolewrite+0x3c>
+801006be:	66 90                	xchg   %ax,%ax
+    consputc(buf[i] & 0xff);
+801006c0:	0f b6 07             	movzbl (%edi),%eax
+801006c3:	83 c7 01             	add    $0x1,%edi
+801006c6:	e8 45 fd ff ff       	call   80100410 <consputc.part.0>
+  for(i = 0; i < n; i++)
+801006cb:	39 fe                	cmp    %edi,%esi
+801006cd:	75 e2                	jne    801006b1 <consolewrite+0x31>
+  release(&cons.lock);
+801006cf:	83 ec 0c             	sub    $0xc,%esp
+801006d2:	68 20 b5 10 80       	push   $0x8010b520
+801006d7:	e8 34 49 00 00       	call   80105010 <release>
+  ilock(ip);
+801006dc:	58                   	pop    %eax
+801006dd:	ff 75 08             	pushl  0x8(%ebp)
+801006e0:	e8 6b 1a 00 00       	call   80102150 <ilock>
+
+  return n;
+}
+801006e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801006e8:	89 d8                	mov    %ebx,%eax
+801006ea:	5b                   	pop    %ebx
+801006eb:	5e                   	pop    %esi
+801006ec:	5f                   	pop    %edi
+801006ed:	5d                   	pop    %ebp
+801006ee:	c3                   	ret    
+801006ef:	90                   	nop
+
+801006f0 <cprintf>:
+{
+801006f0:	f3 0f 1e fb          	endbr32 
+801006f4:	55                   	push   %ebp
+801006f5:	89 e5                	mov    %esp,%ebp
+801006f7:	57                   	push   %edi
+801006f8:	56                   	push   %esi
+801006f9:	53                   	push   %ebx
+801006fa:	83 ec 1c             	sub    $0x1c,%esp
+  locking = cons.locking;
+801006fd:	a1 54 b5 10 80       	mov    0x8010b554,%eax
+80100702:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(locking)
+80100705:	85 c0                	test   %eax,%eax
+80100707:	0f 85 e8 00 00 00    	jne    801007f5 <cprintf+0x105>
+  if (fmt == 0)
+8010070d:	8b 45 08             	mov    0x8(%ebp),%eax
+80100710:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80100713:	85 c0                	test   %eax,%eax
+80100715:	0f 84 5a 01 00 00    	je     80100875 <cprintf+0x185>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010071b:	0f b6 00             	movzbl (%eax),%eax
+8010071e:	85 c0                	test   %eax,%eax
+80100720:	74 36                	je     80100758 <cprintf+0x68>
+  argp = (uint*)(void*)(&fmt + 1);
+80100722:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+80100725:	31 f6                	xor    %esi,%esi
+    if(c != '%'){
+80100727:	83 f8 25             	cmp    $0x25,%eax
+8010072a:	74 44                	je     80100770 <cprintf+0x80>
+  if(panicked){
+8010072c:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
+80100732:	85 c9                	test   %ecx,%ecx
+80100734:	74 0f                	je     80100745 <cprintf+0x55>
+80100736:	fa                   	cli    
+    for(;;)
+80100737:	eb fe                	jmp    80100737 <cprintf+0x47>
+80100739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100740:	b8 25 00 00 00       	mov    $0x25,%eax
+80100745:	e8 c6 fc ff ff       	call   80100410 <consputc.part.0>
+  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
+8010074a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010074d:	83 c6 01             	add    $0x1,%esi
+80100750:	0f b6 04 30          	movzbl (%eax,%esi,1),%eax
+80100754:	85 c0                	test   %eax,%eax
+80100756:	75 cf                	jne    80100727 <cprintf+0x37>
+  if(locking)
+80100758:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010075b:	85 c0                	test   %eax,%eax
+8010075d:	0f 85 fd 00 00 00    	jne    80100860 <cprintf+0x170>
+}
+80100763:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100766:	5b                   	pop    %ebx
+80100767:	5e                   	pop    %esi
+80100768:	5f                   	pop    %edi
+80100769:	5d                   	pop    %ebp
+8010076a:	c3                   	ret    
+8010076b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010076f:	90                   	nop
+    c = fmt[++i] & 0xff;
+80100770:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100773:	83 c6 01             	add    $0x1,%esi
+80100776:	0f b6 3c 30          	movzbl (%eax,%esi,1),%edi
+    if(c == 0)
+8010077a:	85 ff                	test   %edi,%edi
+8010077c:	74 da                	je     80100758 <cprintf+0x68>
+    switch(c){
+8010077e:	83 ff 70             	cmp    $0x70,%edi
+80100781:	74 5a                	je     801007dd <cprintf+0xed>
+80100783:	7f 2a                	jg     801007af <cprintf+0xbf>
+80100785:	83 ff 25             	cmp    $0x25,%edi
+80100788:	0f 84 92 00 00 00    	je     80100820 <cprintf+0x130>
+8010078e:	83 ff 64             	cmp    $0x64,%edi
+80100791:	0f 85 a1 00 00 00    	jne    80100838 <cprintf+0x148>
+      printint(*argp++, 10, 1);
+80100797:	8b 03                	mov    (%ebx),%eax
+80100799:	8d 7b 04             	lea    0x4(%ebx),%edi
+8010079c:	b9 01 00 00 00       	mov    $0x1,%ecx
+801007a1:	ba 0a 00 00 00       	mov    $0xa,%edx
+801007a6:	89 fb                	mov    %edi,%ebx
+801007a8:	e8 33 fe ff ff       	call   801005e0 <printint>
+      break;
+801007ad:	eb 9b                	jmp    8010074a <cprintf+0x5a>
+    switch(c){
+801007af:	83 ff 73             	cmp    $0x73,%edi
+801007b2:	75 24                	jne    801007d8 <cprintf+0xe8>
+      if((s = (char*)*argp++) == 0)
+801007b4:	8d 7b 04             	lea    0x4(%ebx),%edi
+801007b7:	8b 1b                	mov    (%ebx),%ebx
+801007b9:	85 db                	test   %ebx,%ebx
+801007bb:	75 55                	jne    80100812 <cprintf+0x122>
+        s = "(null)";
+801007bd:	bb f8 7b 10 80       	mov    $0x80107bf8,%ebx
+      for(; *s; s++)
+801007c2:	b8 28 00 00 00       	mov    $0x28,%eax
+  if(panicked){
+801007c7:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+801007cd:	85 d2                	test   %edx,%edx
+801007cf:	74 39                	je     8010080a <cprintf+0x11a>
+801007d1:	fa                   	cli    
+    for(;;)
+801007d2:	eb fe                	jmp    801007d2 <cprintf+0xe2>
+801007d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    switch(c){
+801007d8:	83 ff 78             	cmp    $0x78,%edi
+801007db:	75 5b                	jne    80100838 <cprintf+0x148>
+      printint(*argp++, 16, 0);
+801007dd:	8b 03                	mov    (%ebx),%eax
+801007df:	8d 7b 04             	lea    0x4(%ebx),%edi
+801007e2:	31 c9                	xor    %ecx,%ecx
+801007e4:	ba 10 00 00 00       	mov    $0x10,%edx
+801007e9:	89 fb                	mov    %edi,%ebx
+801007eb:	e8 f0 fd ff ff       	call   801005e0 <printint>
+      break;
+801007f0:	e9 55 ff ff ff       	jmp    8010074a <cprintf+0x5a>
+    acquire(&cons.lock);
+801007f5:	83 ec 0c             	sub    $0xc,%esp
+801007f8:	68 20 b5 10 80       	push   $0x8010b520
+801007fd:	e8 4e 47 00 00       	call   80104f50 <acquire>
+80100802:	83 c4 10             	add    $0x10,%esp
+80100805:	e9 03 ff ff ff       	jmp    8010070d <cprintf+0x1d>
+8010080a:	e8 01 fc ff ff       	call   80100410 <consputc.part.0>
+      for(; *s; s++)
+8010080f:	83 c3 01             	add    $0x1,%ebx
+80100812:	0f be 03             	movsbl (%ebx),%eax
+80100815:	84 c0                	test   %al,%al
+80100817:	75 ae                	jne    801007c7 <cprintf+0xd7>
+      if((s = (char*)*argp++) == 0)
+80100819:	89 fb                	mov    %edi,%ebx
+8010081b:	e9 2a ff ff ff       	jmp    8010074a <cprintf+0x5a>
+  if(panicked){
+80100820:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
+80100826:	85 ff                	test   %edi,%edi
+80100828:	0f 84 12 ff ff ff    	je     80100740 <cprintf+0x50>
+8010082e:	fa                   	cli    
+    for(;;)
+8010082f:	eb fe                	jmp    8010082f <cprintf+0x13f>
+80100831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(panicked){
+80100838:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
+8010083e:	85 c9                	test   %ecx,%ecx
+80100840:	74 06                	je     80100848 <cprintf+0x158>
+80100842:	fa                   	cli    
+    for(;;)
+80100843:	eb fe                	jmp    80100843 <cprintf+0x153>
+80100845:	8d 76 00             	lea    0x0(%esi),%esi
+80100848:	b8 25 00 00 00       	mov    $0x25,%eax
+8010084d:	e8 be fb ff ff       	call   80100410 <consputc.part.0>
+  if(panicked){
+80100852:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+80100858:	85 d2                	test   %edx,%edx
+8010085a:	74 2c                	je     80100888 <cprintf+0x198>
+8010085c:	fa                   	cli    
+    for(;;)
+8010085d:	eb fe                	jmp    8010085d <cprintf+0x16d>
+8010085f:	90                   	nop
+    release(&cons.lock);
+80100860:	83 ec 0c             	sub    $0xc,%esp
+80100863:	68 20 b5 10 80       	push   $0x8010b520
+80100868:	e8 a3 47 00 00       	call   80105010 <release>
+8010086d:	83 c4 10             	add    $0x10,%esp
+}
+80100870:	e9 ee fe ff ff       	jmp    80100763 <cprintf+0x73>
+    panic("null fmt");
+80100875:	83 ec 0c             	sub    $0xc,%esp
+80100878:	68 ff 7b 10 80       	push   $0x80107bff
+8010087d:	e8 0e fb ff ff       	call   80100390 <panic>
+80100882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100888:	89 f8                	mov    %edi,%eax
+8010088a:	e8 81 fb ff ff       	call   80100410 <consputc.part.0>
+8010088f:	e9 b6 fe ff ff       	jmp    8010074a <cprintf+0x5a>
+80100894:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010089b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010089f:	90                   	nop
+
+801008a0 <copybuffToBeShifted>:
+void copybuffToBeShifted() {
+801008a0:	f3 0f 1e fb          	endbr32 
+801008a4:	55                   	push   %ebp
+  for (i = 0; i < n; i++)
+801008a5:	8b 0d 2c 10 11 80    	mov    0x8011102c,%ecx
+void copybuffToBeShifted() {
+801008ab:	89 e5                	mov    %esp,%ebp
+801008ad:	53                   	push   %ebx
+  uint n = input.rightmost - input.e; // contents after edit have to be shifted when typed or backspaced.
+801008ae:	8b 1d 28 10 11 80    	mov    0x80111028,%ebx
+  for (i = 0; i < n; i++)
+801008b4:	29 d9                	sub    %ebx,%ecx
+801008b6:	74 22                	je     801008da <copybuffToBeShifted+0x3a>
+801008b8:	31 c0                	xor    %eax,%eax
+801008ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+801008c0:	8d 14 03             	lea    (%ebx,%eax,1),%edx
+  for (i = 0; i < n; i++)
+801008c3:	83 c0 01             	add    $0x1,%eax
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+801008c6:	83 e2 7f             	and    $0x7f,%edx
+801008c9:	0f b6 92 a0 0f 11 80 	movzbl -0x7feef060(%edx),%edx
+801008d0:	88 90 3f 19 11 80    	mov    %dl,-0x7feee6c1(%eax)
+  for (i = 0; i < n; i++)
+801008d6:	39 c1                	cmp    %eax,%ecx
+801008d8:	75 e6                	jne    801008c0 <copybuffToBeShifted+0x20>
+}
+801008da:	5b                   	pop    %ebx
+801008db:	5d                   	pop    %ebp
+801008dc:	c3                   	ret    
+801008dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801008e0 <shiftbufright>:
+void shiftbufright() {
+801008e0:	f3 0f 1e fb          	endbr32 
+801008e4:	55                   	push   %ebp
+801008e5:	89 e5                	mov    %esp,%ebp
+801008e7:	57                   	push   %edi
+801008e8:	56                   	push   %esi
+801008e9:	53                   	push   %ebx
+801008ea:	83 ec 0c             	sub    $0xc,%esp
+  uint n = input.rightmost - input.e;
+801008ed:	a1 28 10 11 80       	mov    0x80111028,%eax
+  for (i = 0; i < n; i++) {
+801008f2:	8b 3d 2c 10 11 80    	mov    0x8011102c,%edi
+801008f8:	29 c7                	sub    %eax,%edi
+801008fa:	74 79                	je     80100975 <shiftbufright+0x95>
+801008fc:	31 db                	xor    %ebx,%ebx
+    char c = buffToBeShifted[i];
+801008fe:	0f b6 93 40 19 11 80 	movzbl -0x7feee6c0(%ebx),%edx
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+80100905:	01 d8                	add    %ebx,%eax
+  if(panicked){
+80100907:	8b 35 58 b5 10 80    	mov    0x8010b558,%esi
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+8010090d:	83 e0 7f             	and    $0x7f,%eax
+80100910:	88 90 a0 0f 11 80    	mov    %dl,-0x7feef060(%eax)
+  if(panicked){
+80100916:	85 f6                	test   %esi,%esi
+80100918:	74 06                	je     80100920 <shiftbufright+0x40>
+8010091a:	fa                   	cli    
+    for(;;)
+8010091b:	eb fe                	jmp    8010091b <shiftbufright+0x3b>
+8010091d:	8d 76 00             	lea    0x0(%esi),%esi
+    consputc(c); // repaitning the screen.
+80100920:	0f be c2             	movsbl %dl,%eax
+80100923:	e8 e8 fa ff ff       	call   80100410 <consputc.part.0>
+  for (i = 0; i < n; i++) {
+80100928:	8d 53 01             	lea    0x1(%ebx),%edx
+8010092b:	39 d7                	cmp    %edx,%edi
+8010092d:	74 09                	je     80100938 <shiftbufright+0x58>
+8010092f:	a1 28 10 11 80       	mov    0x80111028,%eax
+80100934:	89 d3                	mov    %edx,%ebx
+80100936:	eb c6                	jmp    801008fe <shiftbufright+0x1e>
+  memset(buffToBeShifted, '\0', INPUT_BUF);
+80100938:	83 ec 04             	sub    $0x4,%esp
+8010093b:	68 80 00 00 00       	push   $0x80
+80100940:	6a 00                	push   $0x0
+80100942:	68 40 19 11 80       	push   $0x80111940
+80100947:	e8 14 47 00 00       	call   80105060 <memset>
+8010094c:	83 c4 10             	add    $0x10,%esp
+  if(panicked){
+8010094f:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+80100954:	85 c0                	test   %eax,%eax
+80100956:	74 08                	je     80100960 <shiftbufright+0x80>
+80100958:	fa                   	cli    
+    for(;;)
+80100959:	eb fe                	jmp    80100959 <shiftbufright+0x79>
+8010095b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010095f:	90                   	nop
+80100960:	b8 e4 00 00 00       	mov    $0xe4,%eax
+80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
+  for (i = 0; i < n; i++) {
+8010096a:	8d 46 01             	lea    0x1(%esi),%eax
+8010096d:	39 f3                	cmp    %esi,%ebx
+8010096f:	74 1b                	je     8010098c <shiftbufright+0xac>
+80100971:	89 c6                	mov    %eax,%esi
+80100973:	eb da                	jmp    8010094f <shiftbufright+0x6f>
+  memset(buffToBeShifted, '\0', INPUT_BUF);
+80100975:	83 ec 04             	sub    $0x4,%esp
+80100978:	68 80 00 00 00       	push   $0x80
+8010097d:	6a 00                	push   $0x0
+8010097f:	68 40 19 11 80       	push   $0x80111940
+80100984:	e8 d7 46 00 00       	call   80105060 <memset>
+80100989:	83 c4 10             	add    $0x10,%esp
+}
+8010098c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010098f:	5b                   	pop    %ebx
+80100990:	5e                   	pop    %esi
+80100991:	5f                   	pop    %edi
+80100992:	5d                   	pop    %ebp
+80100993:	c3                   	ret    
+80100994:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010099b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010099f:	90                   	nop
+
+801009a0 <shiftbufleft>:
+void shiftbufleft() {
+801009a0:	f3 0f 1e fb          	endbr32 
+  if(panicked){
+801009a4:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+801009a9:	85 c0                	test   %eax,%eax
+801009ab:	74 03                	je     801009b0 <shiftbufleft+0x10>
+801009ad:	fa                   	cli    
+    for(;;)
+801009ae:	eb fe                	jmp    801009ae <shiftbufleft+0xe>
+void shiftbufleft() {
+801009b0:	55                   	push   %ebp
+801009b1:	b8 e4 00 00 00       	mov    $0xe4,%eax
+801009b6:	89 e5                	mov    %esp,%ebp
+801009b8:	56                   	push   %esi
+801009b9:	53                   	push   %ebx
+  uint n = input.rightmost - input.e;
+801009ba:	8b 1d 2c 10 11 80    	mov    0x8011102c,%ebx
+801009c0:	2b 1d 28 10 11 80    	sub    0x80111028,%ebx
+801009c6:	e8 45 fa ff ff       	call   80100410 <consputc.part.0>
+  input.e--;
+801009cb:	a1 28 10 11 80       	mov    0x80111028,%eax
+801009d0:	83 e8 01             	sub    $0x1,%eax
+801009d3:	a3 28 10 11 80       	mov    %eax,0x80111028
+  for (i = 0; i < n; i++) {
+801009d8:	85 db                	test   %ebx,%ebx
+801009da:	74 42                	je     80100a1e <shiftbufleft+0x7e>
+801009dc:	31 f6                	xor    %esi,%esi
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+801009de:	01 f0                	add    %esi,%eax
+  if(panicked){
+801009e0:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+801009e6:	8d 50 01             	lea    0x1(%eax),%edx
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+801009e9:	83 e0 7f             	and    $0x7f,%eax
+    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
+801009ec:	83 e2 7f             	and    $0x7f,%edx
+801009ef:	0f b6 92 a0 0f 11 80 	movzbl -0x7feef060(%edx),%edx
+    input.buf[(input.e + i) % INPUT_BUF] = c;
+801009f6:	88 90 a0 0f 11 80    	mov    %dl,-0x7feef060(%eax)
+  if(panicked){
+801009fc:	85 c9                	test   %ecx,%ecx
+801009fe:	74 08                	je     80100a08 <shiftbufleft+0x68>
+80100a00:	fa                   	cli    
+    for(;;)
+80100a01:	eb fe                	jmp    80100a01 <shiftbufleft+0x61>
+80100a03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100a07:	90                   	nop
+    consputc(c); // repainting the screen.
+80100a08:	0f be c2             	movsbl %dl,%eax
+  for (i = 0; i < n; i++) {
+80100a0b:	83 c6 01             	add    $0x1,%esi
+80100a0e:	e8 fd f9 ff ff       	call   80100410 <consputc.part.0>
+80100a13:	39 f3                	cmp    %esi,%ebx
+80100a15:	74 07                	je     80100a1e <shiftbufleft+0x7e>
+80100a17:	a1 28 10 11 80       	mov    0x80111028,%eax
+80100a1c:	eb c0                	jmp    801009de <shiftbufleft+0x3e>
+  if(panicked){
+80100a1e:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+  input.rightmost--;
+80100a24:	83 2d 2c 10 11 80 01 	subl   $0x1,0x8011102c
+  if(panicked){
+80100a2b:	85 d2                	test   %edx,%edx
+80100a2d:	75 21                	jne    80100a50 <shiftbufleft+0xb0>
+80100a2f:	b8 20 00 00 00       	mov    $0x20,%eax
+  for (i = 0; i <= n; i++) {
+80100a34:	31 f6                	xor    %esi,%esi
+80100a36:	e8 d5 f9 ff ff       	call   80100410 <consputc.part.0>
+  if(panicked){
+80100a3b:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+80100a40:	85 c0                	test   %eax,%eax
+80100a42:	74 14                	je     80100a58 <shiftbufleft+0xb8>
+80100a44:	fa                   	cli    
+    for(;;)
+80100a45:	eb fe                	jmp    80100a45 <shiftbufleft+0xa5>
+80100a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100a4e:	66 90                	xchg   %ax,%ax
+80100a50:	fa                   	cli    
+80100a51:	eb fe                	jmp    80100a51 <shiftbufleft+0xb1>
+80100a53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100a57:	90                   	nop
+80100a58:	b8 e4 00 00 00       	mov    $0xe4,%eax
+  for (i = 0; i <= n; i++) {
+80100a5d:	83 c6 01             	add    $0x1,%esi
+80100a60:	e8 ab f9 ff ff       	call   80100410 <consputc.part.0>
+80100a65:	39 f3                	cmp    %esi,%ebx
+80100a67:	73 d2                	jae    80100a3b <shiftbufleft+0x9b>
+}
+80100a69:	5b                   	pop    %ebx
+80100a6a:	5e                   	pop    %esi
+80100a6b:	5d                   	pop    %ebp
+80100a6c:	c3                   	ret    
+80100a6d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100a70 <earaseCurrentLineOnScreen>:
+earaseCurrentLineOnScreen(void){
+80100a70:	f3 0f 1e fb          	endbr32 
+80100a74:	55                   	push   %ebp
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+80100a75:	a1 28 10 11 80       	mov    0x80111028,%eax
+earaseCurrentLineOnScreen(void){
+80100a7a:	89 e5                	mov    %esp,%ebp
+80100a7c:	56                   	push   %esi
+    uint numToEarase = input.rightmost - input.r;
+80100a7d:	8b 35 2c 10 11 80    	mov    0x8011102c,%esi
+earaseCurrentLineOnScreen(void){
+80100a83:	53                   	push   %ebx
+    uint numToEarase = input.rightmost - input.r;
+80100a84:	8b 1d 20 10 11 80    	mov    0x80111020,%ebx
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+80100a8a:	39 c6                	cmp    %eax,%esi
+80100a8c:	76 36                	jbe    80100ac4 <earaseCurrentLineOnScreen+0x54>
+  if(panicked){
+80100a8e:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+80100a94:	85 d2                	test   %edx,%edx
+80100a96:	74 08                	je     80100aa0 <earaseCurrentLineOnScreen+0x30>
+80100a98:	fa                   	cli    
+    for(;;)
+80100a99:	eb fe                	jmp    80100a99 <earaseCurrentLineOnScreen+0x29>
+80100a9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100a9f:	90                   	nop
+          consputc(input.buf[input.e % INPUT_BUF]);
+80100aa0:	83 e0 7f             	and    $0x7f,%eax
+80100aa3:	0f be 80 a0 0f 11 80 	movsbl -0x7feef060(%eax),%eax
+80100aaa:	e8 61 f9 ff ff       	call   80100410 <consputc.part.0>
+          input.e++;
+80100aaf:	a1 28 10 11 80       	mov    0x80111028,%eax
+80100ab4:	83 c0 01             	add    $0x1,%eax
+80100ab7:	a3 28 10 11 80       	mov    %eax,0x80111028
+    while (input.e < input.rightmost) { // taking caret to the end of the line.
+80100abc:	3b 05 2c 10 11 80    	cmp    0x8011102c,%eax
+80100ac2:	72 ca                	jb     80100a8e <earaseCurrentLineOnScreen+0x1e>
+    for (i = 0; i < numToEarase; i++) {
+80100ac4:	29 de                	sub    %ebx,%esi
+80100ac6:	74 29                	je     80100af1 <earaseCurrentLineOnScreen+0x81>
+80100ac8:	31 db                	xor    %ebx,%ebx
+  if(panicked){
+80100aca:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+80100acf:	85 c0                	test   %eax,%eax
+80100ad1:	74 0d                	je     80100ae0 <earaseCurrentLineOnScreen+0x70>
+80100ad3:	fa                   	cli    
+    for(;;)
+80100ad4:	eb fe                	jmp    80100ad4 <earaseCurrentLineOnScreen+0x64>
+80100ad6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100add:	8d 76 00             	lea    0x0(%esi),%esi
+80100ae0:	b8 00 01 00 00       	mov    $0x100,%eax
+    for (i = 0; i < numToEarase; i++) {
+80100ae5:	83 c3 01             	add    $0x1,%ebx
+80100ae8:	e8 23 f9 ff ff       	call   80100410 <consputc.part.0>
+80100aed:	39 de                	cmp    %ebx,%esi
+80100aef:	75 d9                	jne    80100aca <earaseCurrentLineOnScreen+0x5a>
+}
+80100af1:	5b                   	pop    %ebx
+80100af2:	5e                   	pop    %esi
+80100af3:	5d                   	pop    %ebp
+80100af4:	c3                   	ret    
+80100af5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100b00 <copybuffToBeShiftedToOldBuf>:
+copybuffToBeShiftedToOldBuf(void){
+80100b00:	f3 0f 1e fb          	endbr32 
+80100b04:	55                   	push   %ebp
+    lengthOfOldBuf = input.rightmost - input.r;
+80100b05:	8b 0d 2c 10 11 80    	mov    0x8011102c,%ecx
+copybuffToBeShiftedToOldBuf(void){
+80100b0b:	89 e5                	mov    %esp,%ebp
+80100b0d:	53                   	push   %ebx
+    lengthOfOldBuf = input.rightmost - input.r;
+80100b0e:	8b 1d 20 10 11 80    	mov    0x80111020,%ebx
+80100b14:	29 d9                	sub    %ebx,%ecx
+80100b16:	89 0d c0 10 11 80    	mov    %ecx,0x801110c0
+    for (i = 0; i < lengthOfOldBuf; i++) {
+80100b1c:	74 1c                	je     80100b3a <copybuffToBeShiftedToOldBuf+0x3a>
+80100b1e:	31 c0                	xor    %eax,%eax
+        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
+80100b20:	8d 14 03             	lea    (%ebx,%eax,1),%edx
+    for (i = 0; i < lengthOfOldBuf; i++) {
+80100b23:	83 c0 01             	add    $0x1,%eax
+        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
+80100b26:	83 e2 7f             	and    $0x7f,%edx
+80100b29:	0f b6 92 a0 0f 11 80 	movzbl -0x7feef060(%edx),%edx
+80100b30:	88 90 1f 0f 11 80    	mov    %dl,-0x7feef0e1(%eax)
+    for (i = 0; i < lengthOfOldBuf; i++) {
+80100b36:	39 c1                	cmp    %eax,%ecx
+80100b38:	75 e6                	jne    80100b20 <copybuffToBeShiftedToOldBuf+0x20>
+}
+80100b3a:	5b                   	pop    %ebx
+80100b3b:	5d                   	pop    %ebp
+80100b3c:	c3                   	ret    
+80100b3d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80100b40 <earaseContentOnInputBuf>:
+earaseContentOnInputBuf(){
+80100b40:	f3 0f 1e fb          	endbr32 
+  input.rightmost = input.r;
+80100b44:	a1 20 10 11 80       	mov    0x80111020,%eax
+80100b49:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+  input.e = input.r;
+80100b4e:	a3 28 10 11 80       	mov    %eax,0x80111028
+}
+80100b53:	c3                   	ret    
+80100b54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100b5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100b5f:	90                   	nop
+
+80100b60 <copyBufferToScreen>:
+copyBufferToScreen(char * bufToPrintOnScreen, uint length){
+80100b60:	f3 0f 1e fb          	endbr32 
+80100b64:	55                   	push   %ebp
+80100b65:	89 e5                	mov    %esp,%ebp
+80100b67:	56                   	push   %esi
+80100b68:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100b6b:	53                   	push   %ebx
+  for (i = 0; i < length; i++) {
+80100b6c:	85 c0                	test   %eax,%eax
+80100b6e:	74 27                	je     80100b97 <copyBufferToScreen+0x37>
+80100b70:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100b73:	8d 34 03             	lea    (%ebx,%eax,1),%esi
+  if(panicked){
+80100b76:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+80100b7b:	85 c0                	test   %eax,%eax
+80100b7d:	74 09                	je     80100b88 <copyBufferToScreen+0x28>
+80100b7f:	fa                   	cli    
+    for(;;)
+80100b80:	eb fe                	jmp    80100b80 <copyBufferToScreen+0x20>
+80100b82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    consputc(bufToPrintOnScreen[i]);
+80100b88:	0f be 03             	movsbl (%ebx),%eax
+80100b8b:	83 c3 01             	add    $0x1,%ebx
+80100b8e:	e8 7d f8 ff ff       	call   80100410 <consputc.part.0>
+  for (i = 0; i < length; i++) {
+80100b93:	39 f3                	cmp    %esi,%ebx
+80100b95:	75 df                	jne    80100b76 <copyBufferToScreen+0x16>
+}
+80100b97:	5b                   	pop    %ebx
+80100b98:	5e                   	pop    %esi
+80100b99:	5d                   	pop    %ebp
+80100b9a:	c3                   	ret    
+80100b9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100b9f:	90                   	nop
+
+80100ba0 <copyBufferToInputBuf>:
+copyBufferToInputBuf(char * bufToSaveInInput, uint length){
+80100ba0:	f3 0f 1e fb          	endbr32 
+80100ba4:	55                   	push   %ebp
+80100ba5:	8b 15 20 10 11 80    	mov    0x80111020,%edx
+80100bab:	89 d0                	mov    %edx,%eax
+80100bad:	89 e5                	mov    %esp,%ebp
+80100baf:	56                   	push   %esi
+80100bb0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100bb3:	8b 75 08             	mov    0x8(%ebp),%esi
+copyBufferToInputBuf(char * bufToSaveInInput, uint length){
+80100bb6:	53                   	push   %ebx
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100bb7:	29 d6                	sub    %edx,%esi
+80100bb9:	8d 1c 11             	lea    (%ecx,%edx,1),%ebx
+  for (i = 0; i < length; i++) {
+80100bbc:	85 c9                	test   %ecx,%ecx
+80100bbe:	74 30                	je     80100bf0 <copyBufferToInputBuf+0x50>
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100bc0:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80100bc4:	89 c2                	mov    %eax,%edx
+80100bc6:	83 c0 01             	add    $0x1,%eax
+80100bc9:	83 e2 7f             	and    $0x7f,%edx
+80100bcc:	88 8a a0 0f 11 80    	mov    %cl,-0x7feef060(%edx)
+  for (i = 0; i < length; i++) {
+80100bd2:	39 d8                	cmp    %ebx,%eax
+80100bd4:	75 ea                	jne    80100bc0 <copyBufferToInputBuf+0x20>
+  input.e = input.r+length;
+80100bd6:	89 1d 28 10 11 80    	mov    %ebx,0x80111028
+  input.rightmost = input.e;
+80100bdc:	89 1d 2c 10 11 80    	mov    %ebx,0x8011102c
+}
+80100be2:	5b                   	pop    %ebx
+80100be3:	5e                   	pop    %esi
+80100be4:	5d                   	pop    %ebp
+80100be5:	c3                   	ret    
+80100be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100bed:	8d 76 00             	lea    0x0(%esi),%esi
+80100bf0:	89 d3                	mov    %edx,%ebx
+80100bf2:	eb e2                	jmp    80100bd6 <copyBufferToInputBuf+0x36>
+80100bf4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100bff:	90                   	nop
+
+80100c00 <saveCMDinHistoryMem>:
+saveCMDinHistoryMem(){
+80100c00:	f3 0f 1e fb          	endbr32 
+  HistoryMem.TotalCMDsInMem++; // counting the total no.of commands executed till now.
+80100c04:	8b 0d 2c 10 11 80    	mov    0x8011102c,%ecx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c0a:	8b 15 20 19 11 80    	mov    0x80111920,%edx
+saveCMDinHistoryMem(){
+80100c10:	55                   	push   %ebp
+  uint l = input.rightmost-input.r -1;
+80100c11:	a1 20 10 11 80       	mov    0x80111020,%eax
+  HistoryMem.TotalCMDsInMem++; // counting the total no.of commands executed till now.
+80100c16:	83 05 24 19 11 80 01 	addl   $0x1,0x80111924
+  uint l = input.rightmost-input.r -1;
+80100c1d:	83 e9 01             	sub    $0x1,%ecx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c20:	83 ea 01             	sub    $0x1,%edx
+saveCMDinHistoryMem(){
+80100c23:	89 e5                	mov    %esp,%ebp
+80100c25:	53                   	push   %ebx
+  uint l = input.rightmost-input.r -1;
+80100c26:	89 cb                	mov    %ecx,%ebx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c28:	83 e2 0f             	and    $0xf,%edx
+  uint l = input.rightmost-input.r -1;
+80100c2b:	29 c3                	sub    %eax,%ebx
+  HistoryMem.FinalCMdIndex = (HistoryMem.FinalCMdIndex - 1) % MAX_HISTORY; // this step stores the commands in a cyclic manner if the memory is full. 
+80100c2d:	89 15 20 19 11 80    	mov    %edx,0x80111920
+  HistoryMem.lengthsArr[HistoryMem.FinalCMdIndex] = l;
+80100c33:	89 1c 95 e0 18 11 80 	mov    %ebx,-0x7feee720(,%edx,4)
+  for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
+80100c3a:	85 db                	test   %ebx,%ebx
+80100c3c:	74 24                	je     80100c62 <saveCMDinHistoryMem+0x62>
+80100c3e:	c1 e2 07             	shl    $0x7,%edx
+80100c41:	29 c2                	sub    %eax,%edx
+80100c43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100c47:	90                   	nop
+    HistoryMem.CommandMemArr[HistoryMem.FinalCMdIndex][i] =  input.buf[(input.r+i)%INPUT_BUF];
+80100c48:	89 c3                	mov    %eax,%ebx
+80100c4a:	83 e3 7f             	and    $0x7f,%ebx
+80100c4d:	0f b6 9b a0 0f 11 80 	movzbl -0x7feef060(%ebx),%ebx
+80100c54:	88 9c 02 e0 10 11 80 	mov    %bl,-0x7feeef20(%edx,%eax,1)
+80100c5b:	83 c0 01             	add    $0x1,%eax
+  for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
+80100c5e:	39 c1                	cmp    %eax,%ecx
+80100c60:	75 e6                	jne    80100c48 <saveCMDinHistoryMem+0x48>
+}
+80100c62:	5b                   	pop    %ebx
+80100c63:	5d                   	pop    %ebp
+80100c64:	c3                   	ret    
+80100c65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100c6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80100c70 <consoleintr>:
+{
+80100c70:	f3 0f 1e fb          	endbr32 
+80100c74:	55                   	push   %ebp
+80100c75:	89 e5                	mov    %esp,%ebp
+80100c77:	57                   	push   %edi
+80100c78:	56                   	push   %esi
+80100c79:	53                   	push   %ebx
+  int c, doprocdump = 0;
+80100c7a:	31 db                	xor    %ebx,%ebx
+{
+80100c7c:	83 ec 38             	sub    $0x38,%esp
+80100c7f:	8b 45 08             	mov    0x8(%ebp),%eax
+  acquire(&cons.lock);
+80100c82:	68 20 b5 10 80       	push   $0x8010b520
+{
+80100c87:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  acquire(&cons.lock);
+80100c8a:	e8 c1 42 00 00       	call   80104f50 <acquire>
+  while((c = getc()) >= 0){
+80100c8f:	83 c4 10             	add    $0x10,%esp
+80100c92:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80100c95:	ff d0                	call   *%eax
+80100c97:	89 c6                	mov    %eax,%esi
+80100c99:	85 c0                	test   %eax,%eax
+80100c9b:	0f 88 1c 05 00 00    	js     801011bd <consoleintr+0x54d>
+    switch(c){
+80100ca1:	83 fe 7f             	cmp    $0x7f,%esi
+80100ca4:	0f 84 cf 01 00 00    	je     80100e79 <consoleintr+0x209>
+80100caa:	0f 8e a0 00 00 00    	jle    80100d50 <consoleintr+0xe0>
+80100cb0:	81 fe e4 00 00 00    	cmp    $0xe4,%esi
+80100cb6:	0f 84 1c 02 00 00    	je     80100ed8 <consoleintr+0x268>
+80100cbc:	0f 8f ac 00 00 00    	jg     80100d6e <consoleintr+0xfe>
+80100cc2:	81 fe e2 00 00 00    	cmp    $0xe2,%esi
+80100cc8:	0f 84 3a 02 00 00    	je     80100f08 <consoleintr+0x298>
+80100cce:	81 fe e3 00 00 00    	cmp    $0xe3,%esi
+80100cd4:	0f 85 2a 01 00 00    	jne    80100e04 <consoleintr+0x194>
+        switch(HistoryMem.currentPosition){
+80100cda:	a1 28 19 11 80       	mov    0x80111928,%eax
+80100cdf:	83 f8 ff             	cmp    $0xffffffff,%eax
+80100ce2:	74 ae                	je     80100c92 <consoleintr+0x22>
+80100ce4:	85 c0                	test   %eax,%eax
+80100ce6:	0f 85 3c 04 00 00    	jne    80101128 <consoleintr+0x4b8>
+            earaseCurrentLineOnScreen();
+80100cec:	e8 7f fd ff ff       	call   80100a70 <earaseCurrentLineOnScreen>
+            copyBufferToInputBuf(oldBuf, lengthOfOldBuf);
+80100cf1:	8b 35 c0 10 11 80    	mov    0x801110c0,%esi
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100cf7:	a1 20 10 11 80       	mov    0x80111020,%eax
+  for (i = 0; i < length; i++) {
+80100cfc:	85 f6                	test   %esi,%esi
+80100cfe:	74 20                	je     80100d20 <consoleintr+0xb0>
+80100d00:	31 d2                	xor    %edx,%edx
+80100d02:	89 df                	mov    %ebx,%edi
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100d04:	0f b6 9a 20 0f 11 80 	movzbl -0x7feef0e0(%edx),%ebx
+80100d0b:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
+  for (i = 0; i < length; i++) {
+80100d0e:	83 c2 01             	add    $0x1,%edx
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100d11:	83 e1 7f             	and    $0x7f,%ecx
+80100d14:	88 99 a0 0f 11 80    	mov    %bl,-0x7feef060(%ecx)
+  for (i = 0; i < length; i++) {
+80100d1a:	39 d6                	cmp    %edx,%esi
+80100d1c:	75 e6                	jne    80100d04 <consoleintr+0x94>
+80100d1e:	89 fb                	mov    %edi,%ebx
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+80100d20:	83 ec 08             	sub    $0x8,%esp
+  input.e = input.r+length;
+80100d23:	01 f0                	add    %esi,%eax
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+80100d25:	56                   	push   %esi
+80100d26:	68 20 0f 11 80       	push   $0x80110f20
+  input.e = input.r+length;
+80100d2b:	a3 28 10 11 80       	mov    %eax,0x80111028
+  input.rightmost = input.e;
+80100d30:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+            copyBufferToScreen(oldBuf, lengthOfOldBuf);
+80100d35:	e8 26 fe ff ff       	call   80100b60 <copyBufferToScreen>
+            HistoryMem.currentPosition--; // decreasing out current position.
+80100d3a:	83 2d 28 19 11 80 01 	subl   $0x1,0x80111928
+            break;
+80100d41:	83 c4 10             	add    $0x10,%esp
+80100d44:	e9 49 ff ff ff       	jmp    80100c92 <consoleintr+0x22>
+80100d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    switch(c){
+80100d50:	8d 46 f8             	lea    -0x8(%esi),%eax
+80100d53:	83 f8 0d             	cmp    $0xd,%eax
+80100d56:	0f 87 a0 00 00 00    	ja     80100dfc <consoleintr+0x18c>
+80100d5c:	3e ff 24 85 10 7c 10 	notrack jmp *-0x7fef83f0(,%eax,4)
+80100d63:	80 
+80100d64:	bb 01 00 00 00       	mov    $0x1,%ebx
+80100d69:	e9 24 ff ff ff       	jmp    80100c92 <consoleintr+0x22>
+80100d6e:	81 fe e5 00 00 00    	cmp    $0xe5,%esi
+80100d74:	0f 85 8a 00 00 00    	jne    80100e04 <consoleintr+0x194>
+        if (input.e < input.rightmost) {
+80100d7a:	a1 28 10 11 80       	mov    0x80111028,%eax
+80100d7f:	3b 05 2c 10 11 80    	cmp    0x8011102c,%eax
+80100d85:	0f 83 19 01 00 00    	jae    80100ea4 <consoleintr+0x234>
+  if(panicked){
+80100d8b:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
+80100d91:	85 ff                	test   %edi,%edi
+80100d93:	0f 84 26 03 00 00    	je     801010bf <consoleintr+0x44f>
+80100d99:	fa                   	cli    
+    for(;;)
+80100d9a:	eb fe                	jmp    80100d9a <consoleintr+0x12a>
+        if (input.rightmost > input.e) { // caret isn't at the end of the line
+80100d9c:	a1 2c 10 11 80       	mov    0x8011102c,%eax
+80100da1:	8b 15 28 10 11 80    	mov    0x80111028,%edx
+80100da7:	8b 35 20 10 11 80    	mov    0x80111020,%esi
+80100dad:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100db0:	39 d0                	cmp    %edx,%eax
+80100db2:	0f 87 13 02 00 00    	ja     80100fcb <consoleintr+0x35b>
+          while(input.e != input.r &&
+80100db8:	39 f2                	cmp    %esi,%edx
+80100dba:	0f 84 d2 fe ff ff    	je     80100c92 <consoleintr+0x22>
+                input.buf[(input.e - 1) % INPUT_BUF] != '\n'){ 
+80100dc0:	83 ea 01             	sub    $0x1,%edx
+80100dc3:	89 d0                	mov    %edx,%eax
+80100dc5:	83 e0 7f             	and    $0x7f,%eax
+          while(input.e != input.r &&
+80100dc8:	80 b8 a0 0f 11 80 0a 	cmpb   $0xa,-0x7feef060(%eax)
+80100dcf:	0f 84 bd fe ff ff    	je     80100c92 <consoleintr+0x22>
+  if(panicked){
+80100dd5:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+            input.rightmost--;
+80100dda:	83 2d 2c 10 11 80 01 	subl   $0x1,0x8011102c
+            input.e--;
+80100de1:	89 15 28 10 11 80    	mov    %edx,0x80111028
+  if(panicked){
+80100de7:	85 c0                	test   %eax,%eax
+80100de9:	0f 84 eb 02 00 00    	je     801010da <consoleintr+0x46a>
+80100def:	fa                   	cli    
+    for(;;)
+80100df0:	eb fe                	jmp    80100df0 <consoleintr+0x180>
+	  input.e = input.rightmost;
+80100df2:	a1 2c 10 11 80       	mov    0x8011102c,%eax
+80100df7:	a3 28 10 11 80       	mov    %eax,0x80111028
+	if(c != 0 && input.e-input.r < INPUT_BUF){
+80100dfc:	85 f6                	test   %esi,%esi
+80100dfe:	0f 84 8e fe ff ff    	je     80100c92 <consoleintr+0x22>
+80100e04:	8b 15 28 10 11 80    	mov    0x80111028,%edx
+80100e0a:	89 d0                	mov    %edx,%eax
+80100e0c:	2b 05 20 10 11 80    	sub    0x80111020,%eax
+80100e12:	83 f8 7f             	cmp    $0x7f,%eax
+80100e15:	0f 87 77 fe ff ff    	ja     80100c92 <consoleintr+0x22>
+	  c = (c == '\r') ? '\n' : c;
+80100e1b:	83 fe 0d             	cmp    $0xd,%esi
+80100e1e:	0f 84 5c 04 00 00    	je     80101280 <consoleintr+0x610>
+80100e24:	89 f0                	mov    %esi,%eax
+80100e26:	88 45 e0             	mov    %al,-0x20(%ebp)
+	  if (input.rightmost > input.e) { // caret isn't at the end of the line
+80100e29:	8b 0d 2c 10 11 80    	mov    0x8011102c,%ecx
+80100e2f:	89 d7                	mov    %edx,%edi
+80100e31:	8d 42 01             	lea    0x1(%edx),%eax
+80100e34:	83 e7 7f             	and    $0x7f,%edi
+80100e37:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80100e3a:	89 7d dc             	mov    %edi,-0x24(%ebp)
+80100e3d:	39 ca                	cmp    %ecx,%edx
+80100e3f:	0f 82 e1 03 00 00    	jb     80101226 <consoleintr+0x5b6>
+	    input.buf[input.e++ % INPUT_BUF] = c;
+80100e45:	0f b6 4d e0          	movzbl -0x20(%ebp),%ecx
+80100e49:	8b 7d dc             	mov    -0x24(%ebp),%edi
+	    input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+80100e4c:	89 c2                	mov    %eax,%edx
+	    input.buf[input.e++ % INPUT_BUF] = c;
+80100e4e:	a3 28 10 11 80       	mov    %eax,0x80111028
+80100e53:	88 8f a0 0f 11 80    	mov    %cl,-0x7feef060(%edi)
+	    input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
+80100e59:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80100e5c:	29 ca                	sub    %ecx,%edx
+80100e5e:	83 fa 01             	cmp    $0x1,%edx
+80100e61:	0f 45 c1             	cmovne %ecx,%eax
+80100e64:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+  if(panicked){
+80100e69:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+80100e6e:	85 c0                	test   %eax,%eax
+80100e70:	0f 84 67 03 00 00    	je     801011dd <consoleintr+0x56d>
+80100e76:	fa                   	cli    
+    for(;;)
+80100e77:	eb fe                	jmp    80100e77 <consoleintr+0x207>
+        if (input.rightmost != input.e && input.e != input.r) { // caret isn't at the end of the line
+80100e79:	a1 2c 10 11 80       	mov    0x8011102c,%eax
+80100e7e:	8b 0d 28 10 11 80    	mov    0x80111028,%ecx
+80100e84:	8b 15 20 10 11 80    	mov    0x80111020,%edx
+80100e8a:	39 c8                	cmp    %ecx,%eax
+80100e8c:	0f 84 6e 02 00 00    	je     80101100 <consoleintr+0x490>
+80100e92:	39 d1                	cmp    %edx,%ecx
+80100e94:	0f 84 f8 fd ff ff    	je     80100c92 <consoleintr+0x22>
+          shiftbufleft(); // shifting buffer to one position left.
+80100e9a:	e8 01 fb ff ff       	call   801009a0 <shiftbufleft>
+          break;
+80100e9f:	e9 ee fd ff ff       	jmp    80100c92 <consoleintr+0x22>
+        else if (input.e == input.rightmost){ // This line add the cursor at the end ogf the line. 
+80100ea4:	0f 85 e8 fd ff ff    	jne    80100c92 <consoleintr+0x22>
+  if(panicked){
+80100eaa:	8b 35 58 b5 10 80    	mov    0x8010b558,%esi
+80100eb0:	85 f6                	test   %esi,%esi
+80100eb2:	0f 85 d6 03 00 00    	jne    8010128e <consoleintr+0x61e>
+80100eb8:	b8 20 00 00 00       	mov    $0x20,%eax
+80100ebd:	e8 4e f5 ff ff       	call   80100410 <consputc.part.0>
+80100ec2:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
+80100ec8:	85 c9                	test   %ecx,%ecx
+80100eca:	0f 84 e0 01 00 00    	je     801010b0 <consoleintr+0x440>
+80100ed0:	fa                   	cli    
+    for(;;)
+80100ed1:	eb fe                	jmp    80100ed1 <consoleintr+0x261>
+80100ed3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100ed7:	90                   	nop
+        if (input.e != input.r) {
+80100ed8:	a1 28 10 11 80       	mov    0x80111028,%eax
+80100edd:	3b 05 20 10 11 80    	cmp    0x80111020,%eax
+80100ee3:	0f 84 a9 fd ff ff    	je     80100c92 <consoleintr+0x22>
+          input.e--;
+80100ee9:	83 e8 01             	sub    $0x1,%eax
+80100eec:	a3 28 10 11 80       	mov    %eax,0x80111028
+  if(panicked){
+80100ef1:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+80100ef6:	85 c0                	test   %eax,%eax
+80100ef8:	0f 84 b2 01 00 00    	je     801010b0 <consoleintr+0x440>
+80100efe:	fa                   	cli    
+    for(;;)
+80100eff:	eb fe                	jmp    80100eff <consoleintr+0x28f>
+80100f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+       if (HistoryMem.currentPosition < HistoryMem.TotalCMDsInMem-1 && HistoryMem.currentPosition < MAX_HISTORY-1 ){ 
+80100f08:	a1 24 19 11 80       	mov    0x80111924,%eax
+80100f0d:	8b 15 28 19 11 80    	mov    0x80111928,%edx
+80100f13:	83 e8 01             	sub    $0x1,%eax
+80100f16:	39 c2                	cmp    %eax,%edx
+80100f18:	0f 8d 74 fd ff ff    	jge    80100c92 <consoleintr+0x22>
+80100f1e:	83 fa 0e             	cmp    $0xe,%edx
+80100f21:	0f 8f 6b fd ff ff    	jg     80100c92 <consoleintr+0x22>
+          earaseCurrentLineOnScreen(); // eraseing the whole line 
+80100f27:	e8 44 fb ff ff       	call   80100a70 <earaseCurrentLineOnScreen>
+  input.rightmost = input.r;
+80100f2c:	a1 20 10 11 80       	mov    0x80111020,%eax
+80100f31:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+  input.e = input.r;
+80100f36:	a3 28 10 11 80       	mov    %eax,0x80111028
+          if (HistoryMem.currentPosition == -1) // if it is the first toggle we make then the our written command  should be stored.
+80100f3b:	a1 28 19 11 80       	mov    0x80111928,%eax
+80100f40:	83 f8 ff             	cmp    $0xffffffff,%eax
+80100f43:	75 0a                	jne    80100f4f <consoleintr+0x2df>
+    lengthOfOldBuf = input.rightmost - input.r;
+80100f45:	c7 05 c0 10 11 80 00 	movl   $0x0,0x801110c0
+80100f4c:	00 00 00 
+          HistoryMem.currentPosition++; // toggling by increasing out current position.
+80100f4f:	83 c0 01             	add    $0x1,%eax
+          copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80100f52:	83 ec 08             	sub    $0x8,%esp
+          HistoryMem.currentPosition++; // toggling by increasing out current position.
+80100f55:	a3 28 19 11 80       	mov    %eax,0x80111928
+          tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) %MAX_HISTORY; // gives us the index of currentposition'th index from the recent command.
+80100f5a:	03 05 20 19 11 80    	add    0x80111920,%eax
+80100f60:	89 c6                	mov    %eax,%esi
+80100f62:	83 e6 0f             	and    $0xf,%esi
+          copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80100f65:	89 f2                	mov    %esi,%edx
+80100f67:	81 c6 00 02 00 00    	add    $0x200,%esi
+80100f6d:	c1 e2 07             	shl    $0x7,%edx
+80100f70:	ff 34 b5 e0 10 11 80 	pushl  -0x7feeef20(,%esi,4)
+80100f77:	8d ba e0 10 11 80    	lea    -0x7feeef20(%edx),%edi
+80100f7d:	57                   	push   %edi
+80100f7e:	e8 dd fb ff ff       	call   80100b60 <copyBufferToScreen>
+          copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80100f83:	8b 34 b5 e0 10 11 80 	mov    -0x7feeef20(,%esi,4),%esi
+  for (i = 0; i < length; i++) {
+80100f8a:	83 c4 10             	add    $0x10,%esp
+80100f8d:	85 f6                	test   %esi,%esi
+80100f8f:	0f 84 1a 03 00 00    	je     801012af <consoleintr+0x63f>
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80100f95:	a1 20 10 11 80       	mov    0x80111020,%eax
+80100f9a:	29 c7                	sub    %eax,%edi
+80100f9c:	01 c6                	add    %eax,%esi
+80100f9e:	89 fa                	mov    %edi,%edx
+80100fa0:	89 df                	mov    %ebx,%edi
+80100fa2:	0f b6 1c 02          	movzbl (%edx,%eax,1),%ebx
+80100fa6:	89 c1                	mov    %eax,%ecx
+80100fa8:	83 c0 01             	add    $0x1,%eax
+80100fab:	83 e1 7f             	and    $0x7f,%ecx
+80100fae:	88 99 a0 0f 11 80    	mov    %bl,-0x7feef060(%ecx)
+  for (i = 0; i < length; i++) {
+80100fb4:	39 c6                	cmp    %eax,%esi
+80100fb6:	75 ea                	jne    80100fa2 <consoleintr+0x332>
+80100fb8:	89 fb                	mov    %edi,%ebx
+  input.e = input.r+length;
+80100fba:	89 35 28 10 11 80    	mov    %esi,0x80111028
+  input.rightmost = input.e;
+80100fc0:	89 35 2c 10 11 80    	mov    %esi,0x8011102c
+}
+80100fc6:	e9 c7 fc ff ff       	jmp    80100c92 <consoleintr+0x22>
+          for (i = 0; i < placestoshift; i++) {
+80100fcb:	89 d7                	mov    %edx,%edi
+80100fcd:	31 c9                	xor    %ecx,%ecx
+80100fcf:	29 f7                	sub    %esi,%edi
+80100fd1:	74 36                	je     80101009 <consoleintr+0x399>
+80100fd3:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80100fd6:	89 cb                	mov    %ecx,%ebx
+80100fd8:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80100fdb:	89 d6                	mov    %edx,%esi
+  if(panicked){
+80100fdd:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
+80100fe3:	85 c9                	test   %ecx,%ecx
+80100fe5:	74 09                	je     80100ff0 <consoleintr+0x380>
+80100fe7:	fa                   	cli    
+    for(;;)
+80100fe8:	eb fe                	jmp    80100fe8 <consoleintr+0x378>
+80100fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100ff0:	b8 e4 00 00 00       	mov    $0xe4,%eax
+          for (i = 0; i < placestoshift; i++) {
+80100ff5:	83 c3 01             	add    $0x1,%ebx
+80100ff8:	e8 13 f4 ff ff       	call   80100410 <consputc.part.0>
+80100ffd:	39 df                	cmp    %ebx,%edi
+80100fff:	75 dc                	jne    80100fdd <consoleintr+0x36d>
+80101001:	89 f2                	mov    %esi,%edx
+80101003:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101006:	8b 75 dc             	mov    -0x24(%ebp),%esi
+          memset(buf2, '\0', INPUT_BUF);
+80101009:	83 ec 04             	sub    $0x4,%esp
+          uint numtoshift = input.rightmost - input.e;
+8010100c:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010100f:	89 55 d0             	mov    %edx,-0x30(%ebp)
+          memset(buf2, '\0', INPUT_BUF);
+80101012:	68 80 00 00 00       	push   $0x80
+80101017:	6a 00                	push   $0x0
+          uint numtoshift = input.rightmost - input.e;
+80101019:	29 d0                	sub    %edx,%eax
+          memset(buf2, '\0', INPUT_BUF);
+8010101b:	68 40 10 11 80       	push   $0x80111040
+          uint numtoshift = input.rightmost - input.e;
+80101020:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+          memset(buf2, '\0', INPUT_BUF);
+80101023:	e8 38 40 00 00       	call   80105060 <memset>
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+80101028:	a1 20 10 11 80       	mov    0x80111020,%eax
+8010102d:	8b 55 d0             	mov    -0x30(%ebp),%edx
+80101030:	83 c4 10             	add    $0x10,%esp
+80101033:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101036:	01 f8                	add    %edi,%eax
+80101038:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+          for (i = 0; i < numtoshift; i++) {
+8010103b:	31 c0                	xor    %eax,%eax
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+8010103d:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+80101040:	01 c1                	add    %eax,%ecx
+          for (i = 0; i < numtoshift; i++) {
+80101042:	83 c0 01             	add    $0x1,%eax
+            buf2[i] = input.buf[(input.r + i + placestoshift) % INPUT_BUF];
+80101045:	83 e1 7f             	and    $0x7f,%ecx
+80101048:	0f b6 89 a0 0f 11 80 	movzbl -0x7feef060(%ecx),%ecx
+8010104f:	88 88 3f 10 11 80    	mov    %cl,-0x7feeefc1(%eax)
+          for (i = 0; i < numtoshift; i++) {
+80101055:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+80101058:	75 e3                	jne    8010103d <consoleintr+0x3cd>
+          for (i = 0; i < numtoshift; i++) {
+8010105a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+8010105d:	31 c0                	xor    %eax,%eax
+            input.buf[(input.r + i) % INPUT_BUF] = buf2[i];
+8010105f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+80101062:	0f b6 90 40 10 11 80 	movzbl -0x7feeefc0(%eax),%edx
+80101069:	01 c1                	add    %eax,%ecx
+          for (i = 0; i < numtoshift; i++) {
+8010106b:	83 c0 01             	add    $0x1,%eax
+            input.buf[(input.r + i) % INPUT_BUF] = buf2[i];
+8010106e:	83 e1 7f             	and    $0x7f,%ecx
+80101071:	88 91 a0 0f 11 80    	mov    %dl,-0x7feef060(%ecx)
+          for (i = 0; i < numtoshift; i++) {
+80101077:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
+8010107a:	75 e3                	jne    8010105f <consoleintr+0x3ef>
+8010107c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+          input.e -= placestoshift;
+8010107f:	89 f0                	mov    %esi,%eax
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+80101081:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101084:	89 de                	mov    %ebx,%esi
+80101086:	29 d0                	sub    %edx,%eax
+80101088:	89 c2                	mov    %eax,%edx
+          input.e -= placestoshift;
+8010108a:	03 05 28 10 11 80    	add    0x80111028,%eax
+          input.rightmost -= placestoshift;
+80101090:	01 15 2c 10 11 80    	add    %edx,0x8011102c
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+80101096:	31 d2                	xor    %edx,%edx
+          input.e -= placestoshift;
+80101098:	a3 28 10 11 80       	mov    %eax,0x80111028
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+8010109d:	89 d3                	mov    %edx,%ebx
+  if(panicked){
+8010109f:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+801010a5:	85 d2                	test   %edx,%edx
+801010a7:	0f 84 1e 02 00 00    	je     801012cb <consoleintr+0x65b>
+801010ad:	fa                   	cli    
+    for(;;)
+801010ae:	eb fe                	jmp    801010ae <consoleintr+0x43e>
+801010b0:	b8 e4 00 00 00       	mov    $0xe4,%eax
+801010b5:	e8 56 f3 ff ff       	call   80100410 <consputc.part.0>
+801010ba:	e9 d3 fb ff ff       	jmp    80100c92 <consoleintr+0x22>
+          consputc(input.buf[input.e % INPUT_BUF]);
+801010bf:	83 e0 7f             	and    $0x7f,%eax
+801010c2:	0f be 80 a0 0f 11 80 	movsbl -0x7feef060(%eax),%eax
+801010c9:	e8 42 f3 ff ff       	call   80100410 <consputc.part.0>
+          input.e++;
+801010ce:	83 05 28 10 11 80 01 	addl   $0x1,0x80111028
+801010d5:	e9 b8 fb ff ff       	jmp    80100c92 <consoleintr+0x22>
+801010da:	b8 00 01 00 00       	mov    $0x100,%eax
+801010df:	e8 2c f3 ff ff       	call   80100410 <consputc.part.0>
+          while(input.e != input.r &&
+801010e4:	8b 15 28 10 11 80    	mov    0x80111028,%edx
+801010ea:	3b 15 20 10 11 80    	cmp    0x80111020,%edx
+801010f0:	0f 85 ca fc ff ff    	jne    80100dc0 <consoleintr+0x150>
+801010f6:	e9 97 fb ff ff       	jmp    80100c92 <consoleintr+0x22>
+801010fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801010ff:	90                   	nop
+        if(input.e != input.r){ // caret is at the end of the line - deleting last char
+80101100:	39 d0                	cmp    %edx,%eax
+80101102:	0f 84 8a fb ff ff    	je     80100c92 <consoleintr+0x22>
+          input.e--;
+80101108:	83 e8 01             	sub    $0x1,%eax
+8010110b:	a3 28 10 11 80       	mov    %eax,0x80111028
+          input.rightmost--;
+80101110:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+  if(panicked){
+80101115:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+8010111a:	85 c0                	test   %eax,%eax
+8010111c:	0f 84 8c 00 00 00    	je     801011ae <consoleintr+0x53e>
+80101122:	fa                   	cli    
+    for(;;)
+80101123:	eb fe                	jmp    80101123 <consoleintr+0x4b3>
+80101125:	8d 76 00             	lea    0x0(%esi),%esi
+            earaseCurrentLineOnScreen();
+80101128:	e8 43 f9 ff ff       	call   80100a70 <earaseCurrentLineOnScreen>
+            HistoryMem.currentPosition--; // decreasing out current position.
+8010112d:	a1 28 19 11 80       	mov    0x80111928,%eax
+            copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80101132:	83 ec 08             	sub    $0x8,%esp
+            HistoryMem.currentPosition--; // decreasing out current position.
+80101135:	83 e8 01             	sub    $0x1,%eax
+80101138:	a3 28 19 11 80       	mov    %eax,0x80111928
+            tempIndex = (HistoryMem.FinalCMdIndex + HistoryMem.currentPosition) % MAX_HISTORY;
+8010113d:	03 05 20 19 11 80    	add    0x80111920,%eax
+80101143:	89 c6                	mov    %eax,%esi
+80101145:	83 e6 0f             	and    $0xf,%esi
+            copyBufferToScreen(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80101148:	89 f7                	mov    %esi,%edi
+8010114a:	81 c6 00 02 00 00    	add    $0x200,%esi
+80101150:	c1 e7 07             	shl    $0x7,%edi
+80101153:	ff 34 b5 e0 10 11 80 	pushl  -0x7feeef20(,%esi,4)
+8010115a:	81 c7 e0 10 11 80    	add    $0x801110e0,%edi
+80101160:	57                   	push   %edi
+80101161:	e8 fa f9 ff ff       	call   80100b60 <copyBufferToScreen>
+            copyBufferToInputBuf(HistoryMem.CommandMemArr[ tempIndex]  , HistoryMem.lengthsArr[tempIndex]);
+80101166:	8b 14 b5 e0 10 11 80 	mov    -0x7feeef20(,%esi,4),%edx
+  for (i = 0; i < length; i++) {
+8010116d:	83 c4 10             	add    $0x10,%esp
+80101170:	85 d2                	test   %edx,%edx
+80101172:	0f 84 2c 01 00 00    	je     801012a4 <consoleintr+0x634>
+    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
+80101178:	a1 20 10 11 80       	mov    0x80111020,%eax
+8010117d:	29 c7                	sub    %eax,%edi
+8010117f:	01 c2                	add    %eax,%edx
+80101181:	89 fe                	mov    %edi,%esi
+80101183:	89 df                	mov    %ebx,%edi
+80101185:	0f b6 1c 06          	movzbl (%esi,%eax,1),%ebx
+80101189:	89 c1                	mov    %eax,%ecx
+8010118b:	83 c0 01             	add    $0x1,%eax
+8010118e:	83 e1 7f             	and    $0x7f,%ecx
+80101191:	88 99 a0 0f 11 80    	mov    %bl,-0x7feef060(%ecx)
+  for (i = 0; i < length; i++) {
+80101197:	39 c2                	cmp    %eax,%edx
+80101199:	75 ea                	jne    80101185 <consoleintr+0x515>
+8010119b:	89 fb                	mov    %edi,%ebx
+  input.e = input.r+length;
+8010119d:	89 15 28 10 11 80    	mov    %edx,0x80111028
+  input.rightmost = input.e;
+801011a3:	89 15 2c 10 11 80    	mov    %edx,0x8011102c
+}
+801011a9:	e9 e4 fa ff ff       	jmp    80100c92 <consoleintr+0x22>
+801011ae:	b8 00 01 00 00       	mov    $0x100,%eax
+801011b3:	e8 58 f2 ff ff       	call   80100410 <consputc.part.0>
+801011b8:	e9 d5 fa ff ff       	jmp    80100c92 <consoleintr+0x22>
+  release(&cons.lock);
+801011bd:	83 ec 0c             	sub    $0xc,%esp
+801011c0:	68 20 b5 10 80       	push   $0x8010b520
+801011c5:	e8 46 3e 00 00       	call   80105010 <release>
+  if(doprocdump) {
+801011ca:	83 c4 10             	add    $0x10,%esp
+801011cd:	85 db                	test   %ebx,%ebx
+801011cf:	0f 85 c3 00 00 00    	jne    80101298 <consoleintr+0x628>
+}
+801011d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801011d8:	5b                   	pop    %ebx
+801011d9:	5e                   	pop    %esi
+801011da:	5f                   	pop    %edi
+801011db:	5d                   	pop    %ebp
+801011dc:	c3                   	ret    
+801011dd:	89 f0                	mov    %esi,%eax
+801011df:	e8 2c f2 ff ff       	call   80100410 <consputc.part.0>
+	  if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
+801011e4:	83 fe 0a             	cmp    $0xa,%esi
+801011e7:	74 19                	je     80101202 <consoleintr+0x592>
+801011e9:	83 fe 04             	cmp    $0x4,%esi
+801011ec:	74 14                	je     80101202 <consoleintr+0x592>
+801011ee:	a1 20 10 11 80       	mov    0x80111020,%eax
+801011f3:	83 e8 80             	sub    $0xffffff80,%eax
+801011f6:	39 05 2c 10 11 80    	cmp    %eax,0x8011102c
+801011fc:	0f 85 90 fa ff ff    	jne    80100c92 <consoleintr+0x22>
+	    saveCMDinHistoryMem(); // when enter is entered we saving that command to historyMem
+80101202:	e8 f9 f9 ff ff       	call   80100c00 <saveCMDinHistoryMem>
+	    wakeup(&input.r);
+80101207:	83 ec 0c             	sub    $0xc,%esp
+	    input.w = input.rightmost;
+8010120a:	a1 2c 10 11 80       	mov    0x8011102c,%eax
+	    wakeup(&input.r);
+8010120f:	68 20 10 11 80       	push   $0x80111020
+	    input.w = input.rightmost;
+80101214:	a3 24 10 11 80       	mov    %eax,0x80111024
+	    wakeup(&input.r);
+80101219:	e8 b2 38 00 00       	call   80104ad0 <wakeup>
+8010121e:	83 c4 10             	add    $0x10,%esp
+80101221:	e9 6c fa ff ff       	jmp    80100c92 <consoleintr+0x22>
+  for (i = 0; i < n; i++)
+80101226:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  uint n = input.rightmost - input.e; // contents after edit have to be shifted when typed or backspaced.
+80101229:	29 d1                	sub    %edx,%ecx
+8010122b:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  for (i = 0; i < n; i++)
+8010122e:	31 c9                	xor    %ecx,%ecx
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+80101230:	8d 3c 0a             	lea    (%edx,%ecx,1),%edi
+  for (i = 0; i < n; i++)
+80101233:	83 c1 01             	add    $0x1,%ecx
+    buffToBeShifted[i] = input.buf[(input.e + i) % INPUT_BUF];
+80101236:	83 e7 7f             	and    $0x7f,%edi
+80101239:	0f b6 87 a0 0f 11 80 	movzbl -0x7feef060(%edi),%eax
+80101240:	88 81 3f 19 11 80    	mov    %al,-0x7feee6c1(%ecx)
+  for (i = 0; i < n; i++)
+80101246:	39 4d d4             	cmp    %ecx,-0x2c(%ebp)
+80101249:	75 e5                	jne    80101230 <consoleintr+0x5c0>
+8010124b:	8b 45 d0             	mov    -0x30(%ebp),%eax
+	    input.buf[input.e++ % INPUT_BUF] = c;
+8010124e:	8b 7d dc             	mov    -0x24(%ebp),%edi
+  if(panicked){
+80101251:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
+	    input.buf[input.e++ % INPUT_BUF] = c;
+80101257:	a3 28 10 11 80       	mov    %eax,0x80111028
+8010125c:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
+80101260:	88 87 a0 0f 11 80    	mov    %al,-0x7feef060(%edi)
+	    input.rightmost++;
+80101266:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101269:	83 c0 01             	add    $0x1,%eax
+8010126c:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+  if(panicked){
+80101271:	85 d2                	test   %edx,%edx
+80101273:	74 45                	je     801012ba <consoleintr+0x64a>
+80101275:	fa                   	cli    
+    for(;;)
+80101276:	eb fe                	jmp    80101276 <consoleintr+0x606>
+80101278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010127f:	90                   	nop
+80101280:	c6 45 e0 0a          	movb   $0xa,-0x20(%ebp)
+	  c = (c == '\r') ? '\n' : c;
+80101284:	be 0a 00 00 00       	mov    $0xa,%esi
+80101289:	e9 9b fb ff ff       	jmp    80100e29 <consoleintr+0x1b9>
+8010128e:	fa                   	cli    
+    for(;;)
+8010128f:	eb fe                	jmp    8010128f <consoleintr+0x61f>
+80101291:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+}
+80101298:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010129b:	5b                   	pop    %ebx
+8010129c:	5e                   	pop    %esi
+8010129d:	5f                   	pop    %edi
+8010129e:	5d                   	pop    %ebp
+    procdump();  // now call procdump() wo. cons.lock held
+8010129f:	e9 1c 39 00 00       	jmp    80104bc0 <procdump>
+801012a4:	8b 15 20 10 11 80    	mov    0x80111020,%edx
+801012aa:	e9 ee fe ff ff       	jmp    8010119d <consoleintr+0x52d>
+801012af:	8b 35 20 10 11 80    	mov    0x80111020,%esi
+801012b5:	e9 00 fd ff ff       	jmp    80100fba <consoleintr+0x34a>
+801012ba:	89 f0                	mov    %esi,%eax
+801012bc:	e8 4f f1 ff ff       	call   80100410 <consputc.part.0>
+	    shiftbufright();
+801012c1:	e8 1a f6 ff ff       	call   801008e0 <shiftbufright>
+801012c6:	e9 19 ff ff ff       	jmp    801011e4 <consoleintr+0x574>
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+801012cb:	01 d8                	add    %ebx,%eax
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+801012cd:	83 c3 01             	add    $0x1,%ebx
+            consputc(input.buf[(input.e + i) % INPUT_BUF]);
+801012d0:	83 e0 7f             	and    $0x7f,%eax
+801012d3:	0f be 80 a0 0f 11 80 	movsbl -0x7feef060(%eax),%eax
+801012da:	e8 31 f1 ff ff       	call   80100410 <consputc.part.0>
+          for (i = 0; i < numtoshift; i++) { // repaint the chars
+801012df:	39 5d e4             	cmp    %ebx,-0x1c(%ebp)
+801012e2:	74 0a                	je     801012ee <consoleintr+0x67e>
+801012e4:	a1 28 10 11 80       	mov    0x80111028,%eax
+801012e9:	e9 b1 fd ff ff       	jmp    8010109f <consoleintr+0x42f>
+801012ee:	89 f3                	mov    %esi,%ebx
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+801012f0:	31 d2                	xor    %edx,%edx
+801012f2:	8b 75 dc             	mov    -0x24(%ebp),%esi
+801012f5:	85 ff                	test   %edi,%edi
+801012f7:	74 2d                	je     80101326 <consoleintr+0x6b6>
+801012f9:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+801012fc:	89 de                	mov    %ebx,%esi
+801012fe:	89 d3                	mov    %edx,%ebx
+  if(panicked){
+80101300:	a1 58 b5 10 80       	mov    0x8010b558,%eax
+80101305:	85 c0                	test   %eax,%eax
+80101307:	74 07                	je     80101310 <consoleintr+0x6a0>
+80101309:	fa                   	cli    
+    for(;;)
+8010130a:	eb fe                	jmp    8010130a <consoleintr+0x69a>
+8010130c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101310:	b8 20 00 00 00       	mov    $0x20,%eax
+          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
+80101315:	83 c3 01             	add    $0x1,%ebx
+80101318:	e8 f3 f0 ff ff       	call   80100410 <consputc.part.0>
+8010131d:	39 df                	cmp    %ebx,%edi
+8010131f:	75 df                	jne    80101300 <consoleintr+0x690>
+80101321:	89 f3                	mov    %esi,%ebx
+80101323:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+80101326:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101329:	31 ff                	xor    %edi,%edi
+8010132b:	29 f0                	sub    %esi,%eax
+8010132d:	89 c6                	mov    %eax,%esi
+8010132f:	39 fe                	cmp    %edi,%esi
+80101331:	0f 86 5b f9 ff ff    	jbe    80100c92 <consoleintr+0x22>
+  if(panicked){
+80101337:	83 3d 58 b5 10 80 00 	cmpl   $0x0,0x8010b558
+8010133e:	74 03                	je     80101343 <consoleintr+0x6d3>
+80101340:	fa                   	cli    
+    for(;;)
+80101341:	eb fe                	jmp    80101341 <consoleintr+0x6d1>
+80101343:	b8 e4 00 00 00       	mov    $0xe4,%eax
+          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
+80101348:	83 c7 01             	add    $0x1,%edi
+8010134b:	e8 c0 f0 ff ff       	call   80100410 <consputc.part.0>
+80101350:	eb dd                	jmp    8010132f <consoleintr+0x6bf>
+80101352:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101359:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101360 <history>:
+int history(char *buffer, int historyId) {
+80101360:	f3 0f 1e fb          	endbr32 
+80101364:	55                   	push   %ebp
+80101365:	89 e5                	mov    %esp,%ebp
+80101367:	56                   	push   %esi
+80101368:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010136b:	53                   	push   %ebx
+8010136c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (historyId < 0 || historyId > MAX_HISTORY - 1)
+8010136f:	83 fe 0f             	cmp    $0xf,%esi
+80101372:	77 7c                	ja     801013f0 <history+0x90>
+  if (historyId >= HistoryMem.TotalCMDsInMem )
+80101374:	39 35 24 19 11 80    	cmp    %esi,0x80111924
+8010137a:	7e 64                	jle    801013e0 <history+0x80>
+  memset(buffer, '\0', INPUT_BUF);
+8010137c:	83 ec 04             	sub    $0x4,%esp
+8010137f:	68 80 00 00 00       	push   $0x80
+80101384:	6a 00                	push   $0x0
+80101386:	53                   	push   %ebx
+80101387:	e8 d4 3c 00 00       	call   80105060 <memset>
+  if(HistoryMem.TotalCMDsInMem > MAX_HISTORY){
+8010138c:	83 c4 10             	add    $0x10,%esp
+8010138f:	83 3d 24 19 11 80 10 	cmpl   $0x10,0x80111924
+    temp = MAX_HISTORY - 1;
+80101396:	b8 0f 00 00 00       	mov    $0xf,%eax
+  if(HistoryMem.TotalCMDsInMem > MAX_HISTORY){
+8010139b:	7f 33                	jg     801013d0 <history+0x70>
+  temp = (temp - historyId) % MAX_HISTORY;
+8010139d:	29 f0                	sub    %esi,%eax
+  memmove(buffer, HistoryMem.CommandMemArr[temp], HistoryMem.lengthsArr[temp]);
+8010139f:	83 ec 04             	sub    $0x4,%esp
+  temp = (temp - historyId) % MAX_HISTORY;
+801013a2:	83 e0 0f             	and    $0xf,%eax
+  memmove(buffer, HistoryMem.CommandMemArr[temp], HistoryMem.lengthsArr[temp]);
+801013a5:	ff 34 85 e0 18 11 80 	pushl  -0x7feee720(,%eax,4)
+801013ac:	c1 e0 07             	shl    $0x7,%eax
+801013af:	05 e0 10 11 80       	add    $0x801110e0,%eax
+801013b4:	50                   	push   %eax
+801013b5:	53                   	push   %ebx
+801013b6:	e8 45 3d 00 00       	call   80105100 <memmove>
+  return 0;
+801013bb:	83 c4 10             	add    $0x10,%esp
+801013be:	31 c0                	xor    %eax,%eax
+}
+801013c0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801013c3:	5b                   	pop    %ebx
+801013c4:	5e                   	pop    %esi
+801013c5:	5d                   	pop    %ebp
+801013c6:	c3                   	ret    
+801013c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013ce:	66 90                	xchg   %ax,%ax
+    temp = HistoryMem.FinalCMdIndex - 1;
+801013d0:	a1 20 19 11 80       	mov    0x80111920,%eax
+801013d5:	83 e8 01             	sub    $0x1,%eax
+801013d8:	eb c3                	jmp    8010139d <history+0x3d>
+801013da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+801013e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801013e5:	eb d9                	jmp    801013c0 <history+0x60>
+801013e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013ee:	66 90                	xchg   %ax,%ax
+    return -2;
+801013f0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
+801013f5:	eb c9                	jmp    801013c0 <history+0x60>
+801013f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013fe:	66 90                	xchg   %ax,%ax
+
+80101400 <consoleinit>:
+
+void
+consoleinit(void)
+{
+80101400:	f3 0f 1e fb          	endbr32 
+80101404:	55                   	push   %ebp
+80101405:	89 e5                	mov    %esp,%ebp
+80101407:	83 ec 10             	sub    $0x10,%esp
+  initlock(&cons.lock, "console");
+8010140a:	68 08 7c 10 80       	push   $0x80107c08
+8010140f:	68 20 b5 10 80       	push   $0x8010b520
+80101414:	e8 b7 39 00 00       	call   80104dd0 <initlock>
+
+  devsw[CONSOLE].write = consolewrite;
+  devsw[CONSOLE].read = consoleread;
+  cons.locking = 1;
+
+  ioapicenable(IRQ_KBD, 0);
+80101419:	58                   	pop    %eax
+8010141a:	5a                   	pop    %edx
+8010141b:	6a 00                	push   $0x0
+8010141d:	6a 01                	push   $0x1
+  devsw[CONSOLE].write = consolewrite;
+8010141f:	c7 05 6c 23 11 80 80 	movl   $0x80100680,0x8011236c
+80101426:	06 10 80 
+  devsw[CONSOLE].read = consoleread;
+80101429:	c7 05 68 23 11 80 90 	movl   $0x80100290,0x80112368
+80101430:	02 10 80 
+  cons.locking = 1;
+80101433:	c7 05 54 b5 10 80 01 	movl   $0x1,0x8010b554
+8010143a:	00 00 00 
+  ioapicenable(IRQ_KBD, 0);
+8010143d:	e8 de 19 00 00       	call   80102e20 <ioapicenable>
+  HistoryMem.TotalCMDsInMem = 0;
+  HistoryMem.FinalCMdIndex = 0;
+  HistoryMem.currentPosition = -1;
+}
+80101442:	83 c4 10             	add    $0x10,%esp
+  HistoryMem.TotalCMDsInMem = 0;
+80101445:	c7 05 24 19 11 80 00 	movl   $0x0,0x80111924
+8010144c:	00 00 00 
+  HistoryMem.FinalCMdIndex = 0;
+8010144f:	c7 05 20 19 11 80 00 	movl   $0x0,0x80111920
+80101456:	00 00 00 
+  HistoryMem.currentPosition = -1;
+80101459:	c7 05 28 19 11 80 ff 	movl   $0xffffffff,0x80111928
+80101460:	ff ff ff 
+}
+80101463:	c9                   	leave  
+80101464:	c3                   	ret    
+80101465:	66 90                	xchg   %ax,%ax
+80101467:	66 90                	xchg   %ax,%ax
+80101469:	66 90                	xchg   %ax,%ax
+8010146b:	66 90                	xchg   %ax,%ax
+8010146d:	66 90                	xchg   %ax,%ax
+8010146f:	90                   	nop
+
+80101470 <exec>:
+#include "x86.h"
+#include "elf.h"
+
+int
+exec(char *path, char **argv)
+{
+80101470:	f3 0f 1e fb          	endbr32 
+80101474:	55                   	push   %ebp
+80101475:	89 e5                	mov    %esp,%ebp
+80101477:	57                   	push   %edi
+80101478:	56                   	push   %esi
+80101479:	53                   	push   %ebx
+8010147a:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+  uint argc, sz, sp, ustack[3+MAXARG+1];
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pde_t *pgdir, *oldpgdir;
+  struct proc *curproc = myproc();
+80101480:	e8 cb 2e 00 00       	call   80104350 <myproc>
+80101485:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+
+  begin_op();
+8010148b:	e8 90 22 00 00       	call   80103720 <begin_op>
+
+  if((ip = namei(path)) == 0){
+80101490:	83 ec 0c             	sub    $0xc,%esp
+80101493:	ff 75 08             	pushl  0x8(%ebp)
+80101496:	e8 85 15 00 00       	call   80102a20 <namei>
+8010149b:	83 c4 10             	add    $0x10,%esp
+8010149e:	85 c0                	test   %eax,%eax
+801014a0:	0f 84 fe 02 00 00    	je     801017a4 <exec+0x334>
+    end_op();
+    cprintf("exec: fail\n");
+    return -1;
+  }
+  ilock(ip);
+801014a6:	83 ec 0c             	sub    $0xc,%esp
+801014a9:	89 c3                	mov    %eax,%ebx
+801014ab:	50                   	push   %eax
+801014ac:	e8 9f 0c 00 00       	call   80102150 <ilock>
+  pgdir = 0;
+
+  // Check ELF header
+  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
+801014b1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+801014b7:	6a 34                	push   $0x34
+801014b9:	6a 00                	push   $0x0
+801014bb:	50                   	push   %eax
+801014bc:	53                   	push   %ebx
+801014bd:	e8 8e 0f 00 00       	call   80102450 <readi>
+801014c2:	83 c4 20             	add    $0x20,%esp
+801014c5:	83 f8 34             	cmp    $0x34,%eax
+801014c8:	74 26                	je     801014f0 <exec+0x80>
+
+ bad:
+  if(pgdir)
+    freevm(pgdir);
+  if(ip){
+    iunlockput(ip);
+801014ca:	83 ec 0c             	sub    $0xc,%esp
+801014cd:	53                   	push   %ebx
+801014ce:	e8 1d 0f 00 00       	call   801023f0 <iunlockput>
+    end_op();
+801014d3:	e8 b8 22 00 00       	call   80103790 <end_op>
+801014d8:	83 c4 10             	add    $0x10,%esp
+  }
+  return -1;
+801014db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801014e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801014e3:	5b                   	pop    %ebx
+801014e4:	5e                   	pop    %esi
+801014e5:	5f                   	pop    %edi
+801014e6:	5d                   	pop    %ebp
+801014e7:	c3                   	ret    
+801014e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014ef:	90                   	nop
+  if(elf.magic != ELF_MAGIC)
+801014f0:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+801014f7:	45 4c 46 
+801014fa:	75 ce                	jne    801014ca <exec+0x5a>
+  if((pgdir = setupkvm()) == 0)
+801014fc:	e8 ff 63 00 00       	call   80107900 <setupkvm>
+80101501:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+80101507:	85 c0                	test   %eax,%eax
+80101509:	74 bf                	je     801014ca <exec+0x5a>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+8010150b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80101512:	00 
+80101513:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
+80101519:	0f 84 a4 02 00 00    	je     801017c3 <exec+0x353>
+  sz = 0;
+8010151f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
+80101526:	00 00 00 
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+80101529:	31 ff                	xor    %edi,%edi
+8010152b:	e9 86 00 00 00       	jmp    801015b6 <exec+0x146>
+    if(ph.type != ELF_PROG_LOAD)
+80101530:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80101537:	75 6c                	jne    801015a5 <exec+0x135>
+    if(ph.memsz < ph.filesz)
+80101539:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+8010153f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80101545:	0f 82 87 00 00 00    	jb     801015d2 <exec+0x162>
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+8010154b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80101551:	72 7f                	jb     801015d2 <exec+0x162>
+    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+80101553:	83 ec 04             	sub    $0x4,%esp
+80101556:	50                   	push   %eax
+80101557:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+8010155d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80101563:	e8 b8 61 00 00       	call   80107720 <allocuvm>
+80101568:	83 c4 10             	add    $0x10,%esp
+8010156b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80101571:	85 c0                	test   %eax,%eax
+80101573:	74 5d                	je     801015d2 <exec+0x162>
+    if(ph.vaddr % PGSIZE != 0)
+80101575:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+8010157b:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80101580:	75 50                	jne    801015d2 <exec+0x162>
+    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
+80101582:	83 ec 0c             	sub    $0xc,%esp
+80101585:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+8010158b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80101591:	53                   	push   %ebx
+80101592:	50                   	push   %eax
+80101593:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80101599:	e8 b2 60 00 00       	call   80107650 <loaduvm>
+8010159e:	83 c4 20             	add    $0x20,%esp
+801015a1:	85 c0                	test   %eax,%eax
+801015a3:	78 2d                	js     801015d2 <exec+0x162>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+801015a5:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+801015ac:	83 c7 01             	add    $0x1,%edi
+801015af:	83 c6 20             	add    $0x20,%esi
+801015b2:	39 f8                	cmp    %edi,%eax
+801015b4:	7e 3a                	jle    801015f0 <exec+0x180>
+    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
+801015b6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+801015bc:	6a 20                	push   $0x20
+801015be:	56                   	push   %esi
+801015bf:	50                   	push   %eax
+801015c0:	53                   	push   %ebx
+801015c1:	e8 8a 0e 00 00       	call   80102450 <readi>
+801015c6:	83 c4 10             	add    $0x10,%esp
+801015c9:	83 f8 20             	cmp    $0x20,%eax
+801015cc:	0f 84 5e ff ff ff    	je     80101530 <exec+0xc0>
+    freevm(pgdir);
+801015d2:	83 ec 0c             	sub    $0xc,%esp
+801015d5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+801015db:	e8 a0 62 00 00       	call   80107880 <freevm>
+  if(ip){
+801015e0:	83 c4 10             	add    $0x10,%esp
+801015e3:	e9 e2 fe ff ff       	jmp    801014ca <exec+0x5a>
+801015e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801015ef:	90                   	nop
+801015f0:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
+801015f6:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+801015fc:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80101602:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+  iunlockput(ip);
+80101608:	83 ec 0c             	sub    $0xc,%esp
+8010160b:	53                   	push   %ebx
+8010160c:	e8 df 0d 00 00       	call   801023f0 <iunlockput>
+  end_op();
+80101611:	e8 7a 21 00 00       	call   80103790 <end_op>
+  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+80101616:	83 c4 0c             	add    $0xc,%esp
+80101619:	56                   	push   %esi
+8010161a:	57                   	push   %edi
+8010161b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80101621:	57                   	push   %edi
+80101622:	e8 f9 60 00 00       	call   80107720 <allocuvm>
+80101627:	83 c4 10             	add    $0x10,%esp
+8010162a:	89 c6                	mov    %eax,%esi
+8010162c:	85 c0                	test   %eax,%eax
+8010162e:	0f 84 94 00 00 00    	je     801016c8 <exec+0x258>
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80101634:	83 ec 08             	sub    $0x8,%esp
+80101637:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+  for(argc = 0; argv[argc]; argc++) {
+8010163d:	89 f3                	mov    %esi,%ebx
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+8010163f:	50                   	push   %eax
+80101640:	57                   	push   %edi
+  for(argc = 0; argv[argc]; argc++) {
+80101641:	31 ff                	xor    %edi,%edi
+  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
+80101643:	e8 58 63 00 00       	call   801079a0 <clearpteu>
+  for(argc = 0; argv[argc]; argc++) {
+80101648:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010164b:	83 c4 10             	add    $0x10,%esp
+8010164e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80101654:	8b 00                	mov    (%eax),%eax
+80101656:	85 c0                	test   %eax,%eax
+80101658:	0f 84 8b 00 00 00    	je     801016e9 <exec+0x279>
+8010165e:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
+80101664:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
+8010166a:	eb 23                	jmp    8010168f <exec+0x21f>
+8010166c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101670:	8b 45 0c             	mov    0xc(%ebp),%eax
+    ustack[3+argc] = sp;
+80101673:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+  for(argc = 0; argv[argc]; argc++) {
+8010167a:	83 c7 01             	add    $0x1,%edi
+    ustack[3+argc] = sp;
+8010167d:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+  for(argc = 0; argv[argc]; argc++) {
+80101683:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80101686:	85 c0                	test   %eax,%eax
+80101688:	74 59                	je     801016e3 <exec+0x273>
+    if(argc >= MAXARG)
+8010168a:	83 ff 20             	cmp    $0x20,%edi
+8010168d:	74 39                	je     801016c8 <exec+0x258>
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+8010168f:	83 ec 0c             	sub    $0xc,%esp
+80101692:	50                   	push   %eax
+80101693:	e8 c8 3b 00 00       	call   80105260 <strlen>
+80101698:	f7 d0                	not    %eax
+8010169a:	01 c3                	add    %eax,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+8010169c:	58                   	pop    %eax
+8010169d:	8b 45 0c             	mov    0xc(%ebp),%eax
+    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+801016a0:	83 e3 fc             	and    $0xfffffffc,%ebx
+    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+801016a3:	ff 34 b8             	pushl  (%eax,%edi,4)
+801016a6:	e8 b5 3b 00 00       	call   80105260 <strlen>
+801016ab:	83 c0 01             	add    $0x1,%eax
+801016ae:	50                   	push   %eax
+801016af:	8b 45 0c             	mov    0xc(%ebp),%eax
+801016b2:	ff 34 b8             	pushl  (%eax,%edi,4)
+801016b5:	53                   	push   %ebx
+801016b6:	56                   	push   %esi
+801016b7:	e8 44 64 00 00       	call   80107b00 <copyout>
+801016bc:	83 c4 20             	add    $0x20,%esp
+801016bf:	85 c0                	test   %eax,%eax
+801016c1:	79 ad                	jns    80101670 <exec+0x200>
+801016c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801016c7:	90                   	nop
+    freevm(pgdir);
+801016c8:	83 ec 0c             	sub    $0xc,%esp
+801016cb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+801016d1:	e8 aa 61 00 00       	call   80107880 <freevm>
+801016d6:	83 c4 10             	add    $0x10,%esp
+  return -1;
+801016d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801016de:	e9 fd fd ff ff       	jmp    801014e0 <exec+0x70>
+801016e3:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+801016e9:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+801016f0:	89 d9                	mov    %ebx,%ecx
+  ustack[3+argc] = 0;
+801016f2:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+801016f9:	00 00 00 00 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+801016fd:	29 c1                	sub    %eax,%ecx
+  sp -= (3+argc+1) * 4;
+801016ff:	83 c0 0c             	add    $0xc,%eax
+  ustack[1] = argc;
+80101702:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+  sp -= (3+argc+1) * 4;
+80101708:	29 c3                	sub    %eax,%ebx
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+8010170a:	50                   	push   %eax
+8010170b:	52                   	push   %edx
+8010170c:	53                   	push   %ebx
+8010170d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+  ustack[0] = 0xffffffff;  // fake return PC
+80101713:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+8010171a:	ff ff ff 
+  ustack[2] = sp - (argc+1)*4;  // argv pointer
+8010171d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
+80101723:	e8 d8 63 00 00       	call   80107b00 <copyout>
+80101728:	83 c4 10             	add    $0x10,%esp
+8010172b:	85 c0                	test   %eax,%eax
+8010172d:	78 99                	js     801016c8 <exec+0x258>
+  for(last=s=path; *s; s++)
+8010172f:	8b 45 08             	mov    0x8(%ebp),%eax
+80101732:	8b 55 08             	mov    0x8(%ebp),%edx
+80101735:	0f b6 00             	movzbl (%eax),%eax
+80101738:	84 c0                	test   %al,%al
+8010173a:	74 13                	je     8010174f <exec+0x2df>
+8010173c:	89 d1                	mov    %edx,%ecx
+8010173e:	66 90                	xchg   %ax,%ax
+    if(*s == '/')
+80101740:	83 c1 01             	add    $0x1,%ecx
+80101743:	3c 2f                	cmp    $0x2f,%al
+  for(last=s=path; *s; s++)
+80101745:	0f b6 01             	movzbl (%ecx),%eax
+    if(*s == '/')
+80101748:	0f 44 d1             	cmove  %ecx,%edx
+  for(last=s=path; *s; s++)
+8010174b:	84 c0                	test   %al,%al
+8010174d:	75 f1                	jne    80101740 <exec+0x2d0>
+  safestrcpy(curproc->name, last, sizeof(curproc->name));
+8010174f:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
+80101755:	83 ec 04             	sub    $0x4,%esp
+80101758:	6a 10                	push   $0x10
+8010175a:	89 f8                	mov    %edi,%eax
+8010175c:	52                   	push   %edx
+8010175d:	83 c0 6c             	add    $0x6c,%eax
+80101760:	50                   	push   %eax
+80101761:	e8 ba 3a 00 00       	call   80105220 <safestrcpy>
+  curproc->pgdir = pgdir;
+80101766:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
+  oldpgdir = curproc->pgdir;
+8010176c:	89 f8                	mov    %edi,%eax
+8010176e:	8b 7f 04             	mov    0x4(%edi),%edi
+  curproc->sz = sz;
+80101771:	89 30                	mov    %esi,(%eax)
+  curproc->pgdir = pgdir;
+80101773:	89 48 04             	mov    %ecx,0x4(%eax)
+  curproc->tf->eip = elf.entry;  // main
+80101776:	89 c1                	mov    %eax,%ecx
+80101778:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+8010177e:	8b 40 18             	mov    0x18(%eax),%eax
+80101781:	89 50 38             	mov    %edx,0x38(%eax)
+  curproc->tf->esp = sp;
+80101784:	8b 41 18             	mov    0x18(%ecx),%eax
+80101787:	89 58 44             	mov    %ebx,0x44(%eax)
+  switchuvm(curproc);
+8010178a:	89 0c 24             	mov    %ecx,(%esp)
+8010178d:	e8 2e 5d 00 00       	call   801074c0 <switchuvm>
+  freevm(oldpgdir);
+80101792:	89 3c 24             	mov    %edi,(%esp)
+80101795:	e8 e6 60 00 00       	call   80107880 <freevm>
+  return 0;
+8010179a:	83 c4 10             	add    $0x10,%esp
+8010179d:	31 c0                	xor    %eax,%eax
+8010179f:	e9 3c fd ff ff       	jmp    801014e0 <exec+0x70>
+    end_op();
+801017a4:	e8 e7 1f 00 00       	call   80103790 <end_op>
+    cprintf("exec: fail\n");
+801017a9:	83 ec 0c             	sub    $0xc,%esp
+801017ac:	68 59 7c 10 80       	push   $0x80107c59
+801017b1:	e8 3a ef ff ff       	call   801006f0 <cprintf>
+    return -1;
+801017b6:	83 c4 10             	add    $0x10,%esp
+801017b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801017be:	e9 1d fd ff ff       	jmp    801014e0 <exec+0x70>
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+801017c3:	31 ff                	xor    %edi,%edi
+801017c5:	be 00 20 00 00       	mov    $0x2000,%esi
+801017ca:	e9 39 fe ff ff       	jmp    80101608 <exec+0x198>
+801017cf:	90                   	nop
+
+801017d0 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+801017d0:	f3 0f 1e fb          	endbr32 
+801017d4:	55                   	push   %ebp
+801017d5:	89 e5                	mov    %esp,%ebp
+801017d7:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ftable.lock, "ftable");
+801017da:	68 65 7c 10 80       	push   $0x80107c65
+801017df:	68 c0 19 11 80       	push   $0x801119c0
+801017e4:	e8 e7 35 00 00       	call   80104dd0 <initlock>
+}
+801017e9:	83 c4 10             	add    $0x10,%esp
+801017ec:	c9                   	leave  
+801017ed:	c3                   	ret    
+801017ee:	66 90                	xchg   %ax,%ax
+
+801017f0 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+801017f0:	f3 0f 1e fb          	endbr32 
+801017f4:	55                   	push   %ebp
+801017f5:	89 e5                	mov    %esp,%ebp
+801017f7:	53                   	push   %ebx
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+801017f8:	bb f4 19 11 80       	mov    $0x801119f4,%ebx
+{
+801017fd:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ftable.lock);
+80101800:	68 c0 19 11 80       	push   $0x801119c0
+80101805:	e8 46 37 00 00       	call   80104f50 <acquire>
+8010180a:	83 c4 10             	add    $0x10,%esp
+8010180d:	eb 0c                	jmp    8010181b <filealloc+0x2b>
+8010180f:	90                   	nop
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+80101810:	83 c3 18             	add    $0x18,%ebx
+80101813:	81 fb 54 23 11 80    	cmp    $0x80112354,%ebx
+80101819:	74 25                	je     80101840 <filealloc+0x50>
+    if(f->ref == 0){
+8010181b:	8b 43 04             	mov    0x4(%ebx),%eax
+8010181e:	85 c0                	test   %eax,%eax
+80101820:	75 ee                	jne    80101810 <filealloc+0x20>
+      f->ref = 1;
+      release(&ftable.lock);
+80101822:	83 ec 0c             	sub    $0xc,%esp
+      f->ref = 1;
+80101825:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+      release(&ftable.lock);
+8010182c:	68 c0 19 11 80       	push   $0x801119c0
+80101831:	e8 da 37 00 00       	call   80105010 <release>
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+80101836:	89 d8                	mov    %ebx,%eax
+      return f;
+80101838:	83 c4 10             	add    $0x10,%esp
+}
+8010183b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010183e:	c9                   	leave  
+8010183f:	c3                   	ret    
+  release(&ftable.lock);
+80101840:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80101843:	31 db                	xor    %ebx,%ebx
+  release(&ftable.lock);
+80101845:	68 c0 19 11 80       	push   $0x801119c0
+8010184a:	e8 c1 37 00 00       	call   80105010 <release>
+}
+8010184f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80101851:	83 c4 10             	add    $0x10,%esp
+}
+80101854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101857:	c9                   	leave  
+80101858:	c3                   	ret    
+80101859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80101860 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+80101860:	f3 0f 1e fb          	endbr32 
+80101864:	55                   	push   %ebp
+80101865:	89 e5                	mov    %esp,%ebp
+80101867:	53                   	push   %ebx
+80101868:	83 ec 10             	sub    $0x10,%esp
+8010186b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ftable.lock);
+8010186e:	68 c0 19 11 80       	push   $0x801119c0
+80101873:	e8 d8 36 00 00       	call   80104f50 <acquire>
+  if(f->ref < 1)
+80101878:	8b 43 04             	mov    0x4(%ebx),%eax
+8010187b:	83 c4 10             	add    $0x10,%esp
+8010187e:	85 c0                	test   %eax,%eax
+80101880:	7e 1a                	jle    8010189c <filedup+0x3c>
+    panic("filedup");
+  f->ref++;
+80101882:	83 c0 01             	add    $0x1,%eax
+  release(&ftable.lock);
+80101885:	83 ec 0c             	sub    $0xc,%esp
+  f->ref++;
+80101888:	89 43 04             	mov    %eax,0x4(%ebx)
+  release(&ftable.lock);
+8010188b:	68 c0 19 11 80       	push   $0x801119c0
+80101890:	e8 7b 37 00 00       	call   80105010 <release>
+  return f;
+}
+80101895:	89 d8                	mov    %ebx,%eax
+80101897:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010189a:	c9                   	leave  
+8010189b:	c3                   	ret    
+    panic("filedup");
+8010189c:	83 ec 0c             	sub    $0xc,%esp
+8010189f:	68 6c 7c 10 80       	push   $0x80107c6c
+801018a4:	e8 e7 ea ff ff       	call   80100390 <panic>
+801018a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801018b0 <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+801018b0:	f3 0f 1e fb          	endbr32 
+801018b4:	55                   	push   %ebp
+801018b5:	89 e5                	mov    %esp,%ebp
+801018b7:	57                   	push   %edi
+801018b8:	56                   	push   %esi
+801018b9:	53                   	push   %ebx
+801018ba:	83 ec 28             	sub    $0x28,%esp
+801018bd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct file ff;
+
+  acquire(&ftable.lock);
+801018c0:	68 c0 19 11 80       	push   $0x801119c0
+801018c5:	e8 86 36 00 00       	call   80104f50 <acquire>
+  if(f->ref < 1)
+801018ca:	8b 53 04             	mov    0x4(%ebx),%edx
+801018cd:	83 c4 10             	add    $0x10,%esp
+801018d0:	85 d2                	test   %edx,%edx
+801018d2:	0f 8e a1 00 00 00    	jle    80101979 <fileclose+0xc9>
+    panic("fileclose");
+  if(--f->ref > 0){
+801018d8:	83 ea 01             	sub    $0x1,%edx
+801018db:	89 53 04             	mov    %edx,0x4(%ebx)
+801018de:	75 40                	jne    80101920 <fileclose+0x70>
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+801018e0:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+801018e4:	83 ec 0c             	sub    $0xc,%esp
+  ff = *f;
+801018e7:	8b 3b                	mov    (%ebx),%edi
+  f->type = FD_NONE;
+801018e9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  ff = *f;
+801018ef:	8b 73 0c             	mov    0xc(%ebx),%esi
+801018f2:	88 45 e7             	mov    %al,-0x19(%ebp)
+801018f5:	8b 43 10             	mov    0x10(%ebx),%eax
+  release(&ftable.lock);
+801018f8:	68 c0 19 11 80       	push   $0x801119c0
+  ff = *f;
+801018fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  release(&ftable.lock);
+80101900:	e8 0b 37 00 00       	call   80105010 <release>
+
+  if(ff.type == FD_PIPE)
+80101905:	83 c4 10             	add    $0x10,%esp
+80101908:	83 ff 01             	cmp    $0x1,%edi
+8010190b:	74 53                	je     80101960 <fileclose+0xb0>
+    pipeclose(ff.pipe, ff.writable);
+  else if(ff.type == FD_INODE){
+8010190d:	83 ff 02             	cmp    $0x2,%edi
+80101910:	74 26                	je     80101938 <fileclose+0x88>
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+80101912:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101915:	5b                   	pop    %ebx
+80101916:	5e                   	pop    %esi
+80101917:	5f                   	pop    %edi
+80101918:	5d                   	pop    %ebp
+80101919:	c3                   	ret    
+8010191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    release(&ftable.lock);
+80101920:	c7 45 08 c0 19 11 80 	movl   $0x801119c0,0x8(%ebp)
+}
+80101927:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010192a:	5b                   	pop    %ebx
+8010192b:	5e                   	pop    %esi
+8010192c:	5f                   	pop    %edi
+8010192d:	5d                   	pop    %ebp
+    release(&ftable.lock);
+8010192e:	e9 dd 36 00 00       	jmp    80105010 <release>
+80101933:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101937:	90                   	nop
+    begin_op();
+80101938:	e8 e3 1d 00 00       	call   80103720 <begin_op>
+    iput(ff.ip);
+8010193d:	83 ec 0c             	sub    $0xc,%esp
+80101940:	ff 75 e0             	pushl  -0x20(%ebp)
+80101943:	e8 38 09 00 00       	call   80102280 <iput>
+    end_op();
+80101948:	83 c4 10             	add    $0x10,%esp
+}
+8010194b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010194e:	5b                   	pop    %ebx
+8010194f:	5e                   	pop    %esi
+80101950:	5f                   	pop    %edi
+80101951:	5d                   	pop    %ebp
+    end_op();
+80101952:	e9 39 1e 00 00       	jmp    80103790 <end_op>
+80101957:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010195e:	66 90                	xchg   %ax,%ax
+    pipeclose(ff.pipe, ff.writable);
+80101960:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80101964:	83 ec 08             	sub    $0x8,%esp
+80101967:	53                   	push   %ebx
+80101968:	56                   	push   %esi
+80101969:	e8 82 25 00 00       	call   80103ef0 <pipeclose>
+8010196e:	83 c4 10             	add    $0x10,%esp
+}
+80101971:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101974:	5b                   	pop    %ebx
+80101975:	5e                   	pop    %esi
+80101976:	5f                   	pop    %edi
+80101977:	5d                   	pop    %ebp
+80101978:	c3                   	ret    
+    panic("fileclose");
+80101979:	83 ec 0c             	sub    $0xc,%esp
+8010197c:	68 74 7c 10 80       	push   $0x80107c74
+80101981:	e8 0a ea ff ff       	call   80100390 <panic>
+80101986:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010198d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101990 <filestat>:
+
+// Get metadata about file f.
+int
+filestat(struct file *f, struct stat *st)
+{
+80101990:	f3 0f 1e fb          	endbr32 
+80101994:	55                   	push   %ebp
+80101995:	89 e5                	mov    %esp,%ebp
+80101997:	53                   	push   %ebx
+80101998:	83 ec 04             	sub    $0x4,%esp
+8010199b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(f->type == FD_INODE){
+8010199e:	83 3b 02             	cmpl   $0x2,(%ebx)
+801019a1:	75 2d                	jne    801019d0 <filestat+0x40>
+    ilock(f->ip);
+801019a3:	83 ec 0c             	sub    $0xc,%esp
+801019a6:	ff 73 10             	pushl  0x10(%ebx)
+801019a9:	e8 a2 07 00 00       	call   80102150 <ilock>
+    stati(f->ip, st);
+801019ae:	58                   	pop    %eax
+801019af:	5a                   	pop    %edx
+801019b0:	ff 75 0c             	pushl  0xc(%ebp)
+801019b3:	ff 73 10             	pushl  0x10(%ebx)
+801019b6:	e8 65 0a 00 00       	call   80102420 <stati>
+    iunlock(f->ip);
+801019bb:	59                   	pop    %ecx
+801019bc:	ff 73 10             	pushl  0x10(%ebx)
+801019bf:	e8 6c 08 00 00       	call   80102230 <iunlock>
+    return 0;
+  }
+  return -1;
+}
+801019c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    return 0;
+801019c7:	83 c4 10             	add    $0x10,%esp
+801019ca:	31 c0                	xor    %eax,%eax
+}
+801019cc:	c9                   	leave  
+801019cd:	c3                   	ret    
+801019ce:	66 90                	xchg   %ax,%ax
+801019d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  return -1;
+801019d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801019d8:	c9                   	leave  
+801019d9:	c3                   	ret    
+801019da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801019e0 <fileread>:
+
+// Read from file f.
+int
+fileread(struct file *f, char *addr, int n)
+{
+801019e0:	f3 0f 1e fb          	endbr32 
+801019e4:	55                   	push   %ebp
+801019e5:	89 e5                	mov    %esp,%ebp
+801019e7:	57                   	push   %edi
+801019e8:	56                   	push   %esi
+801019e9:	53                   	push   %ebx
+801019ea:	83 ec 0c             	sub    $0xc,%esp
+801019ed:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801019f0:	8b 75 0c             	mov    0xc(%ebp),%esi
+801019f3:	8b 7d 10             	mov    0x10(%ebp),%edi
+  int r;
+
+  if(f->readable == 0)
+801019f6:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+801019fa:	74 64                	je     80101a60 <fileread+0x80>
+    return -1;
+  if(f->type == FD_PIPE)
+801019fc:	8b 03                	mov    (%ebx),%eax
+801019fe:	83 f8 01             	cmp    $0x1,%eax
+80101a01:	74 45                	je     80101a48 <fileread+0x68>
+    return piperead(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+80101a03:	83 f8 02             	cmp    $0x2,%eax
+80101a06:	75 5f                	jne    80101a67 <fileread+0x87>
+    ilock(f->ip);
+80101a08:	83 ec 0c             	sub    $0xc,%esp
+80101a0b:	ff 73 10             	pushl  0x10(%ebx)
+80101a0e:	e8 3d 07 00 00       	call   80102150 <ilock>
+    if((r = readi(f->ip, addr, f->off, n)) > 0)
+80101a13:	57                   	push   %edi
+80101a14:	ff 73 14             	pushl  0x14(%ebx)
+80101a17:	56                   	push   %esi
+80101a18:	ff 73 10             	pushl  0x10(%ebx)
+80101a1b:	e8 30 0a 00 00       	call   80102450 <readi>
+80101a20:	83 c4 20             	add    $0x20,%esp
+80101a23:	89 c6                	mov    %eax,%esi
+80101a25:	85 c0                	test   %eax,%eax
+80101a27:	7e 03                	jle    80101a2c <fileread+0x4c>
+      f->off += r;
+80101a29:	01 43 14             	add    %eax,0x14(%ebx)
+    iunlock(f->ip);
+80101a2c:	83 ec 0c             	sub    $0xc,%esp
+80101a2f:	ff 73 10             	pushl  0x10(%ebx)
+80101a32:	e8 f9 07 00 00       	call   80102230 <iunlock>
+    return r;
+80101a37:	83 c4 10             	add    $0x10,%esp
+  }
+  panic("fileread");
+}
+80101a3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a3d:	89 f0                	mov    %esi,%eax
+80101a3f:	5b                   	pop    %ebx
+80101a40:	5e                   	pop    %esi
+80101a41:	5f                   	pop    %edi
+80101a42:	5d                   	pop    %ebp
+80101a43:	c3                   	ret    
+80101a44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return piperead(f->pipe, addr, n);
+80101a48:	8b 43 0c             	mov    0xc(%ebx),%eax
+80101a4b:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80101a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101a51:	5b                   	pop    %ebx
+80101a52:	5e                   	pop    %esi
+80101a53:	5f                   	pop    %edi
+80101a54:	5d                   	pop    %ebp
+    return piperead(f->pipe, addr, n);
+80101a55:	e9 36 26 00 00       	jmp    80104090 <piperead>
+80101a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80101a60:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80101a65:	eb d3                	jmp    80101a3a <fileread+0x5a>
+  panic("fileread");
+80101a67:	83 ec 0c             	sub    $0xc,%esp
+80101a6a:	68 7e 7c 10 80       	push   $0x80107c7e
+80101a6f:	e8 1c e9 ff ff       	call   80100390 <panic>
+80101a74:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101a7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101a7f:	90                   	nop
+
+80101a80 <filewrite>:
+
+//PAGEBREAK!
+// Write to file f.
+int
+filewrite(struct file *f, char *addr, int n)
+{
+80101a80:	f3 0f 1e fb          	endbr32 
+80101a84:	55                   	push   %ebp
+80101a85:	89 e5                	mov    %esp,%ebp
+80101a87:	57                   	push   %edi
+80101a88:	56                   	push   %esi
+80101a89:	53                   	push   %ebx
+80101a8a:	83 ec 1c             	sub    $0x1c,%esp
+80101a8d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101a90:	8b 75 08             	mov    0x8(%ebp),%esi
+80101a93:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101a96:	8b 45 10             	mov    0x10(%ebp),%eax
+  int r;
+
+  if(f->writable == 0)
+80101a99:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
+{
+80101a9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(f->writable == 0)
+80101aa0:	0f 84 c1 00 00 00    	je     80101b67 <filewrite+0xe7>
+    return -1;
+  if(f->type == FD_PIPE)
+80101aa6:	8b 06                	mov    (%esi),%eax
+80101aa8:	83 f8 01             	cmp    $0x1,%eax
+80101aab:	0f 84 c3 00 00 00    	je     80101b74 <filewrite+0xf4>
+    return pipewrite(f->pipe, addr, n);
+  if(f->type == FD_INODE){
+80101ab1:	83 f8 02             	cmp    $0x2,%eax
+80101ab4:	0f 85 cc 00 00 00    	jne    80101b86 <filewrite+0x106>
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
+    int i = 0;
+    while(i < n){
+80101aba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    int i = 0;
+80101abd:	31 ff                	xor    %edi,%edi
+    while(i < n){
+80101abf:	85 c0                	test   %eax,%eax
+80101ac1:	7f 34                	jg     80101af7 <filewrite+0x77>
+80101ac3:	e9 98 00 00 00       	jmp    80101b60 <filewrite+0xe0>
+80101ac8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101acf:	90                   	nop
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+        f->off += r;
+80101ad0:	01 46 14             	add    %eax,0x14(%esi)
+      iunlock(f->ip);
+80101ad3:	83 ec 0c             	sub    $0xc,%esp
+80101ad6:	ff 76 10             	pushl  0x10(%esi)
+        f->off += r;
+80101ad9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+      iunlock(f->ip);
+80101adc:	e8 4f 07 00 00       	call   80102230 <iunlock>
+      end_op();
+80101ae1:	e8 aa 1c 00 00       	call   80103790 <end_op>
+
+      if(r < 0)
+        break;
+      if(r != n1)
+80101ae6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101ae9:	83 c4 10             	add    $0x10,%esp
+80101aec:	39 c3                	cmp    %eax,%ebx
+80101aee:	75 60                	jne    80101b50 <filewrite+0xd0>
+        panic("short filewrite");
+      i += r;
+80101af0:	01 df                	add    %ebx,%edi
+    while(i < n){
+80101af2:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101af5:	7e 69                	jle    80101b60 <filewrite+0xe0>
+      int n1 = n - i;
+80101af7:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101afa:	b8 00 06 00 00       	mov    $0x600,%eax
+80101aff:	29 fb                	sub    %edi,%ebx
+      if(n1 > max)
+80101b01:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
+80101b07:	0f 4f d8             	cmovg  %eax,%ebx
+      begin_op();
+80101b0a:	e8 11 1c 00 00       	call   80103720 <begin_op>
+      ilock(f->ip);
+80101b0f:	83 ec 0c             	sub    $0xc,%esp
+80101b12:	ff 76 10             	pushl  0x10(%esi)
+80101b15:	e8 36 06 00 00       	call   80102150 <ilock>
+      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
+80101b1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101b1d:	53                   	push   %ebx
+80101b1e:	ff 76 14             	pushl  0x14(%esi)
+80101b21:	01 f8                	add    %edi,%eax
+80101b23:	50                   	push   %eax
+80101b24:	ff 76 10             	pushl  0x10(%esi)
+80101b27:	e8 24 0a 00 00       	call   80102550 <writei>
+80101b2c:	83 c4 20             	add    $0x20,%esp
+80101b2f:	85 c0                	test   %eax,%eax
+80101b31:	7f 9d                	jg     80101ad0 <filewrite+0x50>
+      iunlock(f->ip);
+80101b33:	83 ec 0c             	sub    $0xc,%esp
+80101b36:	ff 76 10             	pushl  0x10(%esi)
+80101b39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101b3c:	e8 ef 06 00 00       	call   80102230 <iunlock>
+      end_op();
+80101b41:	e8 4a 1c 00 00       	call   80103790 <end_op>
+      if(r < 0)
+80101b46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101b49:	83 c4 10             	add    $0x10,%esp
+80101b4c:	85 c0                	test   %eax,%eax
+80101b4e:	75 17                	jne    80101b67 <filewrite+0xe7>
+        panic("short filewrite");
+80101b50:	83 ec 0c             	sub    $0xc,%esp
+80101b53:	68 87 7c 10 80       	push   $0x80107c87
+80101b58:	e8 33 e8 ff ff       	call   80100390 <panic>
+80101b5d:	8d 76 00             	lea    0x0(%esi),%esi
+    }
+    return i == n ? n : -1;
+80101b60:	89 f8                	mov    %edi,%eax
+80101b62:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80101b65:	74 05                	je     80101b6c <filewrite+0xec>
+80101b67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  }
+  panic("filewrite");
+}
+80101b6c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b6f:	5b                   	pop    %ebx
+80101b70:	5e                   	pop    %esi
+80101b71:	5f                   	pop    %edi
+80101b72:	5d                   	pop    %ebp
+80101b73:	c3                   	ret    
+    return pipewrite(f->pipe, addr, n);
+80101b74:	8b 46 0c             	mov    0xc(%esi),%eax
+80101b77:	89 45 08             	mov    %eax,0x8(%ebp)
+}
+80101b7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b7d:	5b                   	pop    %ebx
+80101b7e:	5e                   	pop    %esi
+80101b7f:	5f                   	pop    %edi
+80101b80:	5d                   	pop    %ebp
+    return pipewrite(f->pipe, addr, n);
+80101b81:	e9 0a 24 00 00       	jmp    80103f90 <pipewrite>
+  panic("filewrite");
+80101b86:	83 ec 0c             	sub    $0xc,%esp
+80101b89:	68 8d 7c 10 80       	push   $0x80107c8d
+80101b8e:	e8 fd e7 ff ff       	call   80100390 <panic>
+80101b93:	66 90                	xchg   %ax,%ax
+80101b95:	66 90                	xchg   %ax,%ax
+80101b97:	66 90                	xchg   %ax,%ax
+80101b99:	66 90                	xchg   %ax,%ax
+80101b9b:	66 90                	xchg   %ax,%ax
+80101b9d:	66 90                	xchg   %ax,%ax
+80101b9f:	90                   	nop
+
+80101ba0 <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+80101ba0:	55                   	push   %ebp
+80101ba1:	89 c1                	mov    %eax,%ecx
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+80101ba3:	89 d0                	mov    %edx,%eax
+80101ba5:	c1 e8 0c             	shr    $0xc,%eax
+80101ba8:	03 05 d8 23 11 80    	add    0x801123d8,%eax
+{
+80101bae:	89 e5                	mov    %esp,%ebp
+80101bb0:	56                   	push   %esi
+80101bb1:	53                   	push   %ebx
+80101bb2:	89 d3                	mov    %edx,%ebx
+  bp = bread(dev, BBLOCK(b, sb));
+80101bb4:	83 ec 08             	sub    $0x8,%esp
+80101bb7:	50                   	push   %eax
+80101bb8:	51                   	push   %ecx
+80101bb9:	e8 12 e5 ff ff       	call   801000d0 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+80101bbe:	89 d9                	mov    %ebx,%ecx
+  if((bp->data[bi/8] & m) == 0)
+80101bc0:	c1 fb 03             	sar    $0x3,%ebx
+  m = 1 << (bi % 8);
+80101bc3:	ba 01 00 00 00       	mov    $0x1,%edx
+80101bc8:	83 e1 07             	and    $0x7,%ecx
+  if((bp->data[bi/8] & m) == 0)
+80101bcb:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+80101bd1:	83 c4 10             	add    $0x10,%esp
+  m = 1 << (bi % 8);
+80101bd4:	d3 e2                	shl    %cl,%edx
+  if((bp->data[bi/8] & m) == 0)
+80101bd6:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+80101bdb:	85 d1                	test   %edx,%ecx
+80101bdd:	74 25                	je     80101c04 <bfree+0x64>
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+80101bdf:	f7 d2                	not    %edx
+  log_write(bp);
+80101be1:	83 ec 0c             	sub    $0xc,%esp
+80101be4:	89 c6                	mov    %eax,%esi
+  bp->data[bi/8] &= ~m;
+80101be6:	21 ca                	and    %ecx,%edx
+80101be8:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
+  log_write(bp);
+80101bec:	50                   	push   %eax
+80101bed:	e8 0e 1d 00 00       	call   80103900 <log_write>
+  brelse(bp);
+80101bf2:	89 34 24             	mov    %esi,(%esp)
+80101bf5:	e8 f6 e5 ff ff       	call   801001f0 <brelse>
+}
+80101bfa:	83 c4 10             	add    $0x10,%esp
+80101bfd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101c00:	5b                   	pop    %ebx
+80101c01:	5e                   	pop    %esi
+80101c02:	5d                   	pop    %ebp
+80101c03:	c3                   	ret    
+    panic("freeing free block");
+80101c04:	83 ec 0c             	sub    $0xc,%esp
+80101c07:	68 97 7c 10 80       	push   $0x80107c97
+80101c0c:	e8 7f e7 ff ff       	call   80100390 <panic>
+80101c11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c1f:	90                   	nop
+
+80101c20 <balloc>:
+{
+80101c20:	55                   	push   %ebp
+80101c21:	89 e5                	mov    %esp,%ebp
+80101c23:	57                   	push   %edi
+80101c24:	56                   	push   %esi
+80101c25:	53                   	push   %ebx
+80101c26:	83 ec 1c             	sub    $0x1c,%esp
+  for(b = 0; b < sb.size; b += BPB){
+80101c29:	8b 0d c0 23 11 80    	mov    0x801123c0,%ecx
+{
+80101c2f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+  for(b = 0; b < sb.size; b += BPB){
+80101c32:	85 c9                	test   %ecx,%ecx
+80101c34:	0f 84 87 00 00 00    	je     80101cc1 <balloc+0xa1>
+80101c3a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    bp = bread(dev, BBLOCK(b, sb));
+80101c41:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101c44:	83 ec 08             	sub    $0x8,%esp
+80101c47:	89 f0                	mov    %esi,%eax
+80101c49:	c1 f8 0c             	sar    $0xc,%eax
+80101c4c:	03 05 d8 23 11 80    	add    0x801123d8,%eax
+80101c52:	50                   	push   %eax
+80101c53:	ff 75 d8             	pushl  -0x28(%ebp)
+80101c56:	e8 75 e4 ff ff       	call   801000d0 <bread>
+80101c5b:	83 c4 10             	add    $0x10,%esp
+80101c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+80101c61:	a1 c0 23 11 80       	mov    0x801123c0,%eax
+80101c66:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101c69:	31 c0                	xor    %eax,%eax
+80101c6b:	eb 2f                	jmp    80101c9c <balloc+0x7c>
+80101c6d:	8d 76 00             	lea    0x0(%esi),%esi
+      m = 1 << (bi % 8);
+80101c70:	89 c1                	mov    %eax,%ecx
+80101c72:	bb 01 00 00 00       	mov    $0x1,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101c77:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      m = 1 << (bi % 8);
+80101c7a:	83 e1 07             	and    $0x7,%ecx
+80101c7d:	d3 e3                	shl    %cl,%ebx
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+80101c7f:	89 c1                	mov    %eax,%ecx
+80101c81:	c1 f9 03             	sar    $0x3,%ecx
+80101c84:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+80101c89:	89 fa                	mov    %edi,%edx
+80101c8b:	85 df                	test   %ebx,%edi
+80101c8d:	74 41                	je     80101cd0 <balloc+0xb0>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+80101c8f:	83 c0 01             	add    $0x1,%eax
+80101c92:	83 c6 01             	add    $0x1,%esi
+80101c95:	3d 00 10 00 00       	cmp    $0x1000,%eax
+80101c9a:	74 05                	je     80101ca1 <balloc+0x81>
+80101c9c:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+80101c9f:	77 cf                	ja     80101c70 <balloc+0x50>
+    brelse(bp);
+80101ca1:	83 ec 0c             	sub    $0xc,%esp
+80101ca4:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101ca7:	e8 44 e5 ff ff       	call   801001f0 <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+80101cac:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+80101cb3:	83 c4 10             	add    $0x10,%esp
+80101cb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101cb9:	39 05 c0 23 11 80    	cmp    %eax,0x801123c0
+80101cbf:	77 80                	ja     80101c41 <balloc+0x21>
+  panic("balloc: out of blocks");
+80101cc1:	83 ec 0c             	sub    $0xc,%esp
+80101cc4:	68 aa 7c 10 80       	push   $0x80107caa
+80101cc9:	e8 c2 e6 ff ff       	call   80100390 <panic>
+80101cce:	66 90                	xchg   %ax,%ax
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101cd0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+        log_write(bp);
+80101cd3:	83 ec 0c             	sub    $0xc,%esp
+        bp->data[bi/8] |= m;  // Mark block in use.
+80101cd6:	09 da                	or     %ebx,%edx
+80101cd8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+        log_write(bp);
+80101cdc:	57                   	push   %edi
+80101cdd:	e8 1e 1c 00 00       	call   80103900 <log_write>
+        brelse(bp);
+80101ce2:	89 3c 24             	mov    %edi,(%esp)
+80101ce5:	e8 06 e5 ff ff       	call   801001f0 <brelse>
+  bp = bread(dev, bno);
+80101cea:	58                   	pop    %eax
+80101ceb:	5a                   	pop    %edx
+80101cec:	56                   	push   %esi
+80101ced:	ff 75 d8             	pushl  -0x28(%ebp)
+80101cf0:	e8 db e3 ff ff       	call   801000d0 <bread>
+  memset(bp->data, 0, BSIZE);
+80101cf5:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, bno);
+80101cf8:	89 c3                	mov    %eax,%ebx
+  memset(bp->data, 0, BSIZE);
+80101cfa:	8d 40 5c             	lea    0x5c(%eax),%eax
+80101cfd:	68 00 02 00 00       	push   $0x200
+80101d02:	6a 00                	push   $0x0
+80101d04:	50                   	push   %eax
+80101d05:	e8 56 33 00 00       	call   80105060 <memset>
+  log_write(bp);
+80101d0a:	89 1c 24             	mov    %ebx,(%esp)
+80101d0d:	e8 ee 1b 00 00       	call   80103900 <log_write>
+  brelse(bp);
+80101d12:	89 1c 24             	mov    %ebx,(%esp)
+80101d15:	e8 d6 e4 ff ff       	call   801001f0 <brelse>
+}
+80101d1a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d1d:	89 f0                	mov    %esi,%eax
+80101d1f:	5b                   	pop    %ebx
+80101d20:	5e                   	pop    %esi
+80101d21:	5f                   	pop    %edi
+80101d22:	5d                   	pop    %ebp
+80101d23:	c3                   	ret    
+80101d24:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d2f:	90                   	nop
+
+80101d30 <iget>:
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+80101d30:	55                   	push   %ebp
+80101d31:	89 e5                	mov    %esp,%ebp
+80101d33:	57                   	push   %edi
+80101d34:	89 c7                	mov    %eax,%edi
+80101d36:	56                   	push   %esi
+  struct inode *ip, *empty;
+
+  acquire(&icache.lock);
+
+  // Is the inode already cached?
+  empty = 0;
+80101d37:	31 f6                	xor    %esi,%esi
+{
+80101d39:	53                   	push   %ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d3a:	bb 14 24 11 80       	mov    $0x80112414,%ebx
+{
+80101d3f:	83 ec 28             	sub    $0x28,%esp
+80101d42:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+  acquire(&icache.lock);
+80101d45:	68 e0 23 11 80       	push   $0x801123e0
+80101d4a:	e8 01 32 00 00       	call   80104f50 <acquire>
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d4f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  acquire(&icache.lock);
+80101d52:	83 c4 10             	add    $0x10,%esp
+80101d55:	eb 1b                	jmp    80101d72 <iget+0x42>
+80101d57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d5e:	66 90                	xchg   %ax,%ax
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101d60:	39 3b                	cmp    %edi,(%ebx)
+80101d62:	74 6c                	je     80101dd0 <iget+0xa0>
+80101d64:	81 c3 90 00 00 00    	add    $0x90,%ebx
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d6a:	81 fb 34 40 11 80    	cmp    $0x80114034,%ebx
+80101d70:	73 26                	jae    80101d98 <iget+0x68>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101d72:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101d75:	85 c9                	test   %ecx,%ecx
+80101d77:	7f e7                	jg     80101d60 <iget+0x30>
+      ip->ref++;
+      release(&icache.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+80101d79:	85 f6                	test   %esi,%esi
+80101d7b:	75 e7                	jne    80101d64 <iget+0x34>
+80101d7d:	89 d8                	mov    %ebx,%eax
+80101d7f:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101d85:	85 c9                	test   %ecx,%ecx
+80101d87:	75 6e                	jne    80101df7 <iget+0xc7>
+80101d89:	89 c6                	mov    %eax,%esi
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101d8b:	81 fb 34 40 11 80    	cmp    $0x80114034,%ebx
+80101d91:	72 df                	jb     80101d72 <iget+0x42>
+80101d93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d97:	90                   	nop
+      empty = ip;
+  }
+
+  // Recycle an inode cache entry.
+  if(empty == 0)
+80101d98:	85 f6                	test   %esi,%esi
+80101d9a:	74 73                	je     80101e0f <iget+0xdf>
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&icache.lock);
+80101d9c:	83 ec 0c             	sub    $0xc,%esp
+  ip->dev = dev;
+80101d9f:	89 3e                	mov    %edi,(%esi)
+  ip->inum = inum;
+80101da1:	89 56 04             	mov    %edx,0x4(%esi)
+  ip->ref = 1;
+80101da4:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+  ip->valid = 0;
+80101dab:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+  release(&icache.lock);
+80101db2:	68 e0 23 11 80       	push   $0x801123e0
+80101db7:	e8 54 32 00 00       	call   80105010 <release>
+
+  return ip;
+80101dbc:	83 c4 10             	add    $0x10,%esp
+}
+80101dbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101dc2:	89 f0                	mov    %esi,%eax
+80101dc4:	5b                   	pop    %ebx
+80101dc5:	5e                   	pop    %esi
+80101dc6:	5f                   	pop    %edi
+80101dc7:	5d                   	pop    %ebp
+80101dc8:	c3                   	ret    
+80101dc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101dd0:	39 53 04             	cmp    %edx,0x4(%ebx)
+80101dd3:	75 8f                	jne    80101d64 <iget+0x34>
+      release(&icache.lock);
+80101dd5:	83 ec 0c             	sub    $0xc,%esp
+      ip->ref++;
+80101dd8:	83 c1 01             	add    $0x1,%ecx
+      return ip;
+80101ddb:	89 de                	mov    %ebx,%esi
+      release(&icache.lock);
+80101ddd:	68 e0 23 11 80       	push   $0x801123e0
+      ip->ref++;
+80101de2:	89 4b 08             	mov    %ecx,0x8(%ebx)
+      release(&icache.lock);
+80101de5:	e8 26 32 00 00       	call   80105010 <release>
+      return ip;
+80101dea:	83 c4 10             	add    $0x10,%esp
+}
+80101ded:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101df0:	89 f0                	mov    %esi,%eax
+80101df2:	5b                   	pop    %ebx
+80101df3:	5e                   	pop    %esi
+80101df4:	5f                   	pop    %edi
+80101df5:	5d                   	pop    %ebp
+80101df6:	c3                   	ret    
+  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
+80101df7:	81 fb 34 40 11 80    	cmp    $0x80114034,%ebx
+80101dfd:	73 10                	jae    80101e0f <iget+0xdf>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+80101dff:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101e02:	85 c9                	test   %ecx,%ecx
+80101e04:	0f 8f 56 ff ff ff    	jg     80101d60 <iget+0x30>
+80101e0a:	e9 6e ff ff ff       	jmp    80101d7d <iget+0x4d>
+    panic("iget: no inodes");
+80101e0f:	83 ec 0c             	sub    $0xc,%esp
+80101e12:	68 c0 7c 10 80       	push   $0x80107cc0
+80101e17:	e8 74 e5 ff ff       	call   80100390 <panic>
+80101e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101e20 <bmap>:
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+80101e20:	55                   	push   %ebp
+80101e21:	89 e5                	mov    %esp,%ebp
+80101e23:	57                   	push   %edi
+80101e24:	56                   	push   %esi
+80101e25:	89 c6                	mov    %eax,%esi
+80101e27:	53                   	push   %ebx
+80101e28:	83 ec 1c             	sub    $0x1c,%esp
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+80101e2b:	83 fa 0b             	cmp    $0xb,%edx
+80101e2e:	0f 86 84 00 00 00    	jbe    80101eb8 <bmap+0x98>
+    if((addr = ip->addrs[bn]) == 0)
+      ip->addrs[bn] = addr = balloc(ip->dev);
+    return addr;
+  }
+  bn -= NDIRECT;
+80101e34:	8d 5a f4             	lea    -0xc(%edx),%ebx
+
+  if(bn < NINDIRECT){
+80101e37:	83 fb 7f             	cmp    $0x7f,%ebx
+80101e3a:	0f 87 98 00 00 00    	ja     80101ed8 <bmap+0xb8>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0)
+80101e40:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
+80101e46:	8b 16                	mov    (%esi),%edx
+80101e48:	85 c0                	test   %eax,%eax
+80101e4a:	74 54                	je     80101ea0 <bmap+0x80>
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+    bp = bread(ip->dev, addr);
+80101e4c:	83 ec 08             	sub    $0x8,%esp
+80101e4f:	50                   	push   %eax
+80101e50:	52                   	push   %edx
+80101e51:	e8 7a e2 ff ff       	call   801000d0 <bread>
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+80101e56:	83 c4 10             	add    $0x10,%esp
+80101e59:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+    bp = bread(ip->dev, addr);
+80101e5d:	89 c7                	mov    %eax,%edi
+    if((addr = a[bn]) == 0){
+80101e5f:	8b 1a                	mov    (%edx),%ebx
+80101e61:	85 db                	test   %ebx,%ebx
+80101e63:	74 1b                	je     80101e80 <bmap+0x60>
+      a[bn] = addr = balloc(ip->dev);
+      log_write(bp);
+    }
+    brelse(bp);
+80101e65:	83 ec 0c             	sub    $0xc,%esp
+80101e68:	57                   	push   %edi
+80101e69:	e8 82 e3 ff ff       	call   801001f0 <brelse>
+    return addr;
+80101e6e:	83 c4 10             	add    $0x10,%esp
+  }
+
+  panic("bmap: out of range");
+}
+80101e71:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101e74:	89 d8                	mov    %ebx,%eax
+80101e76:	5b                   	pop    %ebx
+80101e77:	5e                   	pop    %esi
+80101e78:	5f                   	pop    %edi
+80101e79:	5d                   	pop    %ebp
+80101e7a:	c3                   	ret    
+80101e7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101e7f:	90                   	nop
+      a[bn] = addr = balloc(ip->dev);
+80101e80:	8b 06                	mov    (%esi),%eax
+80101e82:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101e85:	e8 96 fd ff ff       	call   80101c20 <balloc>
+80101e8a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+      log_write(bp);
+80101e8d:	83 ec 0c             	sub    $0xc,%esp
+      a[bn] = addr = balloc(ip->dev);
+80101e90:	89 c3                	mov    %eax,%ebx
+80101e92:	89 02                	mov    %eax,(%edx)
+      log_write(bp);
+80101e94:	57                   	push   %edi
+80101e95:	e8 66 1a 00 00       	call   80103900 <log_write>
+80101e9a:	83 c4 10             	add    $0x10,%esp
+80101e9d:	eb c6                	jmp    80101e65 <bmap+0x45>
+80101e9f:	90                   	nop
+      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
+80101ea0:	89 d0                	mov    %edx,%eax
+80101ea2:	e8 79 fd ff ff       	call   80101c20 <balloc>
+80101ea7:	8b 16                	mov    (%esi),%edx
+80101ea9:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+80101eaf:	eb 9b                	jmp    80101e4c <bmap+0x2c>
+80101eb1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((addr = ip->addrs[bn]) == 0)
+80101eb8:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+80101ebb:	8b 5f 5c             	mov    0x5c(%edi),%ebx
+80101ebe:	85 db                	test   %ebx,%ebx
+80101ec0:	75 af                	jne    80101e71 <bmap+0x51>
+      ip->addrs[bn] = addr = balloc(ip->dev);
+80101ec2:	8b 00                	mov    (%eax),%eax
+80101ec4:	e8 57 fd ff ff       	call   80101c20 <balloc>
+80101ec9:	89 47 5c             	mov    %eax,0x5c(%edi)
+80101ecc:	89 c3                	mov    %eax,%ebx
+}
+80101ece:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ed1:	89 d8                	mov    %ebx,%eax
+80101ed3:	5b                   	pop    %ebx
+80101ed4:	5e                   	pop    %esi
+80101ed5:	5f                   	pop    %edi
+80101ed6:	5d                   	pop    %ebp
+80101ed7:	c3                   	ret    
+  panic("bmap: out of range");
+80101ed8:	83 ec 0c             	sub    $0xc,%esp
+80101edb:	68 d0 7c 10 80       	push   $0x80107cd0
+80101ee0:	e8 ab e4 ff ff       	call   80100390 <panic>
+80101ee5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101ef0 <readsb>:
+{
+80101ef0:	f3 0f 1e fb          	endbr32 
+80101ef4:	55                   	push   %ebp
+80101ef5:	89 e5                	mov    %esp,%ebp
+80101ef7:	56                   	push   %esi
+80101ef8:	53                   	push   %ebx
+80101ef9:	8b 75 0c             	mov    0xc(%ebp),%esi
+  bp = bread(dev, 1);
+80101efc:	83 ec 08             	sub    $0x8,%esp
+80101eff:	6a 01                	push   $0x1
+80101f01:	ff 75 08             	pushl  0x8(%ebp)
+80101f04:	e8 c7 e1 ff ff       	call   801000d0 <bread>
+  memmove(sb, bp->data, sizeof(*sb));
+80101f09:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(dev, 1);
+80101f0c:	89 c3                	mov    %eax,%ebx
+  memmove(sb, bp->data, sizeof(*sb));
+80101f0e:	8d 40 5c             	lea    0x5c(%eax),%eax
+80101f11:	6a 1c                	push   $0x1c
+80101f13:	50                   	push   %eax
+80101f14:	56                   	push   %esi
+80101f15:	e8 e6 31 00 00       	call   80105100 <memmove>
+  brelse(bp);
+80101f1a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101f1d:	83 c4 10             	add    $0x10,%esp
+}
+80101f20:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101f23:	5b                   	pop    %ebx
+80101f24:	5e                   	pop    %esi
+80101f25:	5d                   	pop    %ebp
+  brelse(bp);
+80101f26:	e9 c5 e2 ff ff       	jmp    801001f0 <brelse>
+80101f2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101f2f:	90                   	nop
+
+80101f30 <iinit>:
+{
+80101f30:	f3 0f 1e fb          	endbr32 
+80101f34:	55                   	push   %ebp
+80101f35:	89 e5                	mov    %esp,%ebp
+80101f37:	53                   	push   %ebx
+80101f38:	bb 20 24 11 80       	mov    $0x80112420,%ebx
+80101f3d:	83 ec 0c             	sub    $0xc,%esp
+  initlock(&icache.lock, "icache");
+80101f40:	68 e3 7c 10 80       	push   $0x80107ce3
+80101f45:	68 e0 23 11 80       	push   $0x801123e0
+80101f4a:	e8 81 2e 00 00       	call   80104dd0 <initlock>
+  for(i = 0; i < NINODE; i++) {
+80101f4f:	83 c4 10             	add    $0x10,%esp
+80101f52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    initsleeplock(&icache.inode[i].lock, "inode");
+80101f58:	83 ec 08             	sub    $0x8,%esp
+80101f5b:	68 ea 7c 10 80       	push   $0x80107cea
+80101f60:	53                   	push   %ebx
+80101f61:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101f67:	e8 24 2d 00 00       	call   80104c90 <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+80101f6c:	83 c4 10             	add    $0x10,%esp
+80101f6f:	81 fb 40 40 11 80    	cmp    $0x80114040,%ebx
+80101f75:	75 e1                	jne    80101f58 <iinit+0x28>
+  readsb(dev, &sb);
+80101f77:	83 ec 08             	sub    $0x8,%esp
+80101f7a:	68 c0 23 11 80       	push   $0x801123c0
+80101f7f:	ff 75 08             	pushl  0x8(%ebp)
+80101f82:	e8 69 ff ff ff       	call   80101ef0 <readsb>
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
+80101f87:	ff 35 d8 23 11 80    	pushl  0x801123d8
+80101f8d:	ff 35 d4 23 11 80    	pushl  0x801123d4
+80101f93:	ff 35 d0 23 11 80    	pushl  0x801123d0
+80101f99:	ff 35 cc 23 11 80    	pushl  0x801123cc
+80101f9f:	ff 35 c8 23 11 80    	pushl  0x801123c8
+80101fa5:	ff 35 c4 23 11 80    	pushl  0x801123c4
+80101fab:	ff 35 c0 23 11 80    	pushl  0x801123c0
+80101fb1:	68 50 7d 10 80       	push   $0x80107d50
+80101fb6:	e8 35 e7 ff ff       	call   801006f0 <cprintf>
+}
+80101fbb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101fbe:	83 c4 30             	add    $0x30,%esp
+80101fc1:	c9                   	leave  
+80101fc2:	c3                   	ret    
+80101fc3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101fca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101fd0 <ialloc>:
+{
+80101fd0:	f3 0f 1e fb          	endbr32 
+80101fd4:	55                   	push   %ebp
+80101fd5:	89 e5                	mov    %esp,%ebp
+80101fd7:	57                   	push   %edi
+80101fd8:	56                   	push   %esi
+80101fd9:	53                   	push   %ebx
+80101fda:	83 ec 1c             	sub    $0x1c,%esp
+80101fdd:	8b 45 0c             	mov    0xc(%ebp),%eax
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101fe0:	83 3d c8 23 11 80 01 	cmpl   $0x1,0x801123c8
+{
+80101fe7:	8b 75 08             	mov    0x8(%ebp),%esi
+80101fea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  for(inum = 1; inum < sb.ninodes; inum++){
+80101fed:	0f 86 8d 00 00 00    	jbe    80102080 <ialloc+0xb0>
+80101ff3:	bf 01 00 00 00       	mov    $0x1,%edi
+80101ff8:	eb 1d                	jmp    80102017 <ialloc+0x47>
+80101ffa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    brelse(bp);
+80102000:	83 ec 0c             	sub    $0xc,%esp
+  for(inum = 1; inum < sb.ninodes; inum++){
+80102003:	83 c7 01             	add    $0x1,%edi
+    brelse(bp);
+80102006:	53                   	push   %ebx
+80102007:	e8 e4 e1 ff ff       	call   801001f0 <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+8010200c:	83 c4 10             	add    $0x10,%esp
+8010200f:	3b 3d c8 23 11 80    	cmp    0x801123c8,%edi
+80102015:	73 69                	jae    80102080 <ialloc+0xb0>
+    bp = bread(dev, IBLOCK(inum, sb));
+80102017:	89 f8                	mov    %edi,%eax
+80102019:	83 ec 08             	sub    $0x8,%esp
+8010201c:	c1 e8 03             	shr    $0x3,%eax
+8010201f:	03 05 d4 23 11 80    	add    0x801123d4,%eax
+80102025:	50                   	push   %eax
+80102026:	56                   	push   %esi
+80102027:	e8 a4 e0 ff ff       	call   801000d0 <bread>
+    if(dip->type == 0){  // a free inode
+8010202c:	83 c4 10             	add    $0x10,%esp
+    bp = bread(dev, IBLOCK(inum, sb));
+8010202f:	89 c3                	mov    %eax,%ebx
+    dip = (struct dinode*)bp->data + inum%IPB;
+80102031:	89 f8                	mov    %edi,%eax
+80102033:	83 e0 07             	and    $0x7,%eax
+80102036:	c1 e0 06             	shl    $0x6,%eax
+80102039:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
+    if(dip->type == 0){  // a free inode
+8010203d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80102041:	75 bd                	jne    80102000 <ialloc+0x30>
+      memset(dip, 0, sizeof(*dip));
+80102043:	83 ec 04             	sub    $0x4,%esp
+80102046:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80102049:	6a 40                	push   $0x40
+8010204b:	6a 00                	push   $0x0
+8010204d:	51                   	push   %ecx
+8010204e:	e8 0d 30 00 00       	call   80105060 <memset>
+      dip->type = type;
+80102053:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80102057:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010205a:	66 89 01             	mov    %ax,(%ecx)
+      log_write(bp);   // mark it allocated on the disk
+8010205d:	89 1c 24             	mov    %ebx,(%esp)
+80102060:	e8 9b 18 00 00       	call   80103900 <log_write>
+      brelse(bp);
+80102065:	89 1c 24             	mov    %ebx,(%esp)
+80102068:	e8 83 e1 ff ff       	call   801001f0 <brelse>
+      return iget(dev, inum);
+8010206d:	83 c4 10             	add    $0x10,%esp
+}
+80102070:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return iget(dev, inum);
+80102073:	89 fa                	mov    %edi,%edx
+}
+80102075:	5b                   	pop    %ebx
+      return iget(dev, inum);
+80102076:	89 f0                	mov    %esi,%eax
+}
+80102078:	5e                   	pop    %esi
+80102079:	5f                   	pop    %edi
+8010207a:	5d                   	pop    %ebp
+      return iget(dev, inum);
+8010207b:	e9 b0 fc ff ff       	jmp    80101d30 <iget>
+  panic("ialloc: no inodes");
+80102080:	83 ec 0c             	sub    $0xc,%esp
+80102083:	68 f0 7c 10 80       	push   $0x80107cf0
+80102088:	e8 03 e3 ff ff       	call   80100390 <panic>
+8010208d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102090 <iupdate>:
+{
+80102090:	f3 0f 1e fb          	endbr32 
+80102094:	55                   	push   %ebp
+80102095:	89 e5                	mov    %esp,%ebp
+80102097:	56                   	push   %esi
+80102098:	53                   	push   %ebx
+80102099:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+8010209c:	8b 43 04             	mov    0x4(%ebx),%eax
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+8010209f:	83 c3 5c             	add    $0x5c,%ebx
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801020a2:	83 ec 08             	sub    $0x8,%esp
+801020a5:	c1 e8 03             	shr    $0x3,%eax
+801020a8:	03 05 d4 23 11 80    	add    0x801123d4,%eax
+801020ae:	50                   	push   %eax
+801020af:	ff 73 a4             	pushl  -0x5c(%ebx)
+801020b2:	e8 19 e0 ff ff       	call   801000d0 <bread>
+  dip->type = ip->type;
+801020b7:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801020bb:	83 c4 0c             	add    $0xc,%esp
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801020be:	89 c6                	mov    %eax,%esi
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+801020c0:	8b 43 a8             	mov    -0x58(%ebx),%eax
+801020c3:	83 e0 07             	and    $0x7,%eax
+801020c6:	c1 e0 06             	shl    $0x6,%eax
+801020c9:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+  dip->type = ip->type;
+801020cd:	66 89 10             	mov    %dx,(%eax)
+  dip->major = ip->major;
+801020d0:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801020d4:	83 c0 0c             	add    $0xc,%eax
+  dip->major = ip->major;
+801020d7:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+  dip->minor = ip->minor;
+801020db:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+801020df:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+  dip->nlink = ip->nlink;
+801020e3:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+801020e7:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+  dip->size = ip->size;
+801020eb:	8b 53 fc             	mov    -0x4(%ebx),%edx
+801020ee:	89 50 fc             	mov    %edx,-0x4(%eax)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+801020f1:	6a 34                	push   $0x34
+801020f3:	53                   	push   %ebx
+801020f4:	50                   	push   %eax
+801020f5:	e8 06 30 00 00       	call   80105100 <memmove>
+  log_write(bp);
+801020fa:	89 34 24             	mov    %esi,(%esp)
+801020fd:	e8 fe 17 00 00       	call   80103900 <log_write>
+  brelse(bp);
+80102102:	89 75 08             	mov    %esi,0x8(%ebp)
+80102105:	83 c4 10             	add    $0x10,%esp
+}
+80102108:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010210b:	5b                   	pop    %ebx
+8010210c:	5e                   	pop    %esi
+8010210d:	5d                   	pop    %ebp
+  brelse(bp);
+8010210e:	e9 dd e0 ff ff       	jmp    801001f0 <brelse>
+80102113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010211a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102120 <idup>:
+{
+80102120:	f3 0f 1e fb          	endbr32 
+80102124:	55                   	push   %ebp
+80102125:	89 e5                	mov    %esp,%ebp
+80102127:	53                   	push   %ebx
+80102128:	83 ec 10             	sub    $0x10,%esp
+8010212b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&icache.lock);
+8010212e:	68 e0 23 11 80       	push   $0x801123e0
+80102133:	e8 18 2e 00 00       	call   80104f50 <acquire>
+  ip->ref++;
+80102138:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+8010213c:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
+80102143:	e8 c8 2e 00 00       	call   80105010 <release>
+}
+80102148:	89 d8                	mov    %ebx,%eax
+8010214a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010214d:	c9                   	leave  
+8010214e:	c3                   	ret    
+8010214f:	90                   	nop
+
+80102150 <ilock>:
+{
+80102150:	f3 0f 1e fb          	endbr32 
+80102154:	55                   	push   %ebp
+80102155:	89 e5                	mov    %esp,%ebp
+80102157:	56                   	push   %esi
+80102158:	53                   	push   %ebx
+80102159:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || ip->ref < 1)
+8010215c:	85 db                	test   %ebx,%ebx
+8010215e:	0f 84 b3 00 00 00    	je     80102217 <ilock+0xc7>
+80102164:	8b 53 08             	mov    0x8(%ebx),%edx
+80102167:	85 d2                	test   %edx,%edx
+80102169:	0f 8e a8 00 00 00    	jle    80102217 <ilock+0xc7>
+  acquiresleep(&ip->lock);
+8010216f:	83 ec 0c             	sub    $0xc,%esp
+80102172:	8d 43 0c             	lea    0xc(%ebx),%eax
+80102175:	50                   	push   %eax
+80102176:	e8 55 2b 00 00       	call   80104cd0 <acquiresleep>
+  if(ip->valid == 0){
+8010217b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010217e:	83 c4 10             	add    $0x10,%esp
+80102181:	85 c0                	test   %eax,%eax
+80102183:	74 0b                	je     80102190 <ilock+0x40>
+}
+80102185:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102188:	5b                   	pop    %ebx
+80102189:	5e                   	pop    %esi
+8010218a:	5d                   	pop    %ebp
+8010218b:	c3                   	ret    
+8010218c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+80102190:	8b 43 04             	mov    0x4(%ebx),%eax
+80102193:	83 ec 08             	sub    $0x8,%esp
+80102196:	c1 e8 03             	shr    $0x3,%eax
+80102199:	03 05 d4 23 11 80    	add    0x801123d4,%eax
+8010219f:	50                   	push   %eax
+801021a0:	ff 33                	pushl  (%ebx)
+801021a2:	e8 29 df ff ff       	call   801000d0 <bread>
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801021a7:	83 c4 0c             	add    $0xc,%esp
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+801021aa:	89 c6                	mov    %eax,%esi
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+801021ac:	8b 43 04             	mov    0x4(%ebx),%eax
+801021af:	83 e0 07             	and    $0x7,%eax
+801021b2:	c1 e0 06             	shl    $0x6,%eax
+801021b5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+    ip->type = dip->type;
+801021b9:	0f b7 10             	movzwl (%eax),%edx
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801021bc:	83 c0 0c             	add    $0xc,%eax
+    ip->type = dip->type;
+801021bf:	66 89 53 50          	mov    %dx,0x50(%ebx)
+    ip->major = dip->major;
+801021c3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+801021c7:	66 89 53 52          	mov    %dx,0x52(%ebx)
+    ip->minor = dip->minor;
+801021cb:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+801021cf:	66 89 53 54          	mov    %dx,0x54(%ebx)
+    ip->nlink = dip->nlink;
+801021d3:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+801021d7:	66 89 53 56          	mov    %dx,0x56(%ebx)
+    ip->size = dip->size;
+801021db:	8b 50 fc             	mov    -0x4(%eax),%edx
+801021de:	89 53 58             	mov    %edx,0x58(%ebx)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+801021e1:	6a 34                	push   $0x34
+801021e3:	50                   	push   %eax
+801021e4:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801021e7:	50                   	push   %eax
+801021e8:	e8 13 2f 00 00       	call   80105100 <memmove>
+    brelse(bp);
+801021ed:	89 34 24             	mov    %esi,(%esp)
+801021f0:	e8 fb df ff ff       	call   801001f0 <brelse>
+    if(ip->type == 0)
+801021f5:	83 c4 10             	add    $0x10,%esp
+801021f8:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+    ip->valid = 1;
+801021fd:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+    if(ip->type == 0)
+80102204:	0f 85 7b ff ff ff    	jne    80102185 <ilock+0x35>
+      panic("ilock: no type");
+8010220a:	83 ec 0c             	sub    $0xc,%esp
+8010220d:	68 08 7d 10 80       	push   $0x80107d08
+80102212:	e8 79 e1 ff ff       	call   80100390 <panic>
+    panic("ilock");
+80102217:	83 ec 0c             	sub    $0xc,%esp
+8010221a:	68 02 7d 10 80       	push   $0x80107d02
+8010221f:	e8 6c e1 ff ff       	call   80100390 <panic>
+80102224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010222b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010222f:	90                   	nop
+
+80102230 <iunlock>:
+{
+80102230:	f3 0f 1e fb          	endbr32 
+80102234:	55                   	push   %ebp
+80102235:	89 e5                	mov    %esp,%ebp
+80102237:	56                   	push   %esi
+80102238:	53                   	push   %ebx
+80102239:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+8010223c:	85 db                	test   %ebx,%ebx
+8010223e:	74 28                	je     80102268 <iunlock+0x38>
+80102240:	83 ec 0c             	sub    $0xc,%esp
+80102243:	8d 73 0c             	lea    0xc(%ebx),%esi
+80102246:	56                   	push   %esi
+80102247:	e8 24 2b 00 00       	call   80104d70 <holdingsleep>
+8010224c:	83 c4 10             	add    $0x10,%esp
+8010224f:	85 c0                	test   %eax,%eax
+80102251:	74 15                	je     80102268 <iunlock+0x38>
+80102253:	8b 43 08             	mov    0x8(%ebx),%eax
+80102256:	85 c0                	test   %eax,%eax
+80102258:	7e 0e                	jle    80102268 <iunlock+0x38>
+  releasesleep(&ip->lock);
+8010225a:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+8010225d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102260:	5b                   	pop    %ebx
+80102261:	5e                   	pop    %esi
+80102262:	5d                   	pop    %ebp
+  releasesleep(&ip->lock);
+80102263:	e9 c8 2a 00 00       	jmp    80104d30 <releasesleep>
+    panic("iunlock");
+80102268:	83 ec 0c             	sub    $0xc,%esp
+8010226b:	68 17 7d 10 80       	push   $0x80107d17
+80102270:	e8 1b e1 ff ff       	call   80100390 <panic>
+80102275:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010227c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80102280 <iput>:
+{
+80102280:	f3 0f 1e fb          	endbr32 
+80102284:	55                   	push   %ebp
+80102285:	89 e5                	mov    %esp,%ebp
+80102287:	57                   	push   %edi
+80102288:	56                   	push   %esi
+80102289:	53                   	push   %ebx
+8010228a:	83 ec 28             	sub    $0x28,%esp
+8010228d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquiresleep(&ip->lock);
+80102290:	8d 7b 0c             	lea    0xc(%ebx),%edi
+80102293:	57                   	push   %edi
+80102294:	e8 37 2a 00 00       	call   80104cd0 <acquiresleep>
+  if(ip->valid && ip->nlink == 0){
+80102299:	8b 53 4c             	mov    0x4c(%ebx),%edx
+8010229c:	83 c4 10             	add    $0x10,%esp
+8010229f:	85 d2                	test   %edx,%edx
+801022a1:	74 07                	je     801022aa <iput+0x2a>
+801022a3:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801022a8:	74 36                	je     801022e0 <iput+0x60>
+  releasesleep(&ip->lock);
+801022aa:	83 ec 0c             	sub    $0xc,%esp
+801022ad:	57                   	push   %edi
+801022ae:	e8 7d 2a 00 00       	call   80104d30 <releasesleep>
+  acquire(&icache.lock);
+801022b3:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
+801022ba:	e8 91 2c 00 00       	call   80104f50 <acquire>
+  ip->ref--;
+801022bf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+  release(&icache.lock);
+801022c3:	83 c4 10             	add    $0x10,%esp
+801022c6:	c7 45 08 e0 23 11 80 	movl   $0x801123e0,0x8(%ebp)
+}
+801022cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801022d0:	5b                   	pop    %ebx
+801022d1:	5e                   	pop    %esi
+801022d2:	5f                   	pop    %edi
+801022d3:	5d                   	pop    %ebp
+  release(&icache.lock);
+801022d4:	e9 37 2d 00 00       	jmp    80105010 <release>
+801022d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    acquire(&icache.lock);
+801022e0:	83 ec 0c             	sub    $0xc,%esp
+801022e3:	68 e0 23 11 80       	push   $0x801123e0
+801022e8:	e8 63 2c 00 00       	call   80104f50 <acquire>
+    int r = ip->ref;
+801022ed:	8b 73 08             	mov    0x8(%ebx),%esi
+    release(&icache.lock);
+801022f0:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
+801022f7:	e8 14 2d 00 00       	call   80105010 <release>
+    if(r == 1){
+801022fc:	83 c4 10             	add    $0x10,%esp
+801022ff:	83 fe 01             	cmp    $0x1,%esi
+80102302:	75 a6                	jne    801022aa <iput+0x2a>
+80102304:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+8010230a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+8010230d:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102310:	89 cf                	mov    %ecx,%edi
+80102312:	eb 0b                	jmp    8010231f <iput+0x9f>
+80102314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+80102318:	83 c6 04             	add    $0x4,%esi
+8010231b:	39 fe                	cmp    %edi,%esi
+8010231d:	74 19                	je     80102338 <iput+0xb8>
+    if(ip->addrs[i]){
+8010231f:	8b 16                	mov    (%esi),%edx
+80102321:	85 d2                	test   %edx,%edx
+80102323:	74 f3                	je     80102318 <iput+0x98>
+      bfree(ip->dev, ip->addrs[i]);
+80102325:	8b 03                	mov    (%ebx),%eax
+80102327:	e8 74 f8 ff ff       	call   80101ba0 <bfree>
+      ip->addrs[i] = 0;
+8010232c:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80102332:	eb e4                	jmp    80102318 <iput+0x98>
+80102334:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+80102338:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+8010233e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80102341:	85 c0                	test   %eax,%eax
+80102343:	75 33                	jne    80102378 <iput+0xf8>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+80102345:	83 ec 0c             	sub    $0xc,%esp
+  ip->size = 0;
+80102348:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  iupdate(ip);
+8010234f:	53                   	push   %ebx
+80102350:	e8 3b fd ff ff       	call   80102090 <iupdate>
+      ip->type = 0;
+80102355:	31 c0                	xor    %eax,%eax
+80102357:	66 89 43 50          	mov    %ax,0x50(%ebx)
+      iupdate(ip);
+8010235b:	89 1c 24             	mov    %ebx,(%esp)
+8010235e:	e8 2d fd ff ff       	call   80102090 <iupdate>
+      ip->valid = 0;
+80102363:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+8010236a:	83 c4 10             	add    $0x10,%esp
+8010236d:	e9 38 ff ff ff       	jmp    801022aa <iput+0x2a>
+80102372:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+80102378:	83 ec 08             	sub    $0x8,%esp
+8010237b:	50                   	push   %eax
+8010237c:	ff 33                	pushl  (%ebx)
+8010237e:	e8 4d dd ff ff       	call   801000d0 <bread>
+80102383:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80102386:	83 c4 10             	add    $0x10,%esp
+80102389:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+8010238f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    for(j = 0; j < NINDIRECT; j++){
+80102392:	8d 70 5c             	lea    0x5c(%eax),%esi
+80102395:	89 cf                	mov    %ecx,%edi
+80102397:	eb 0e                	jmp    801023a7 <iput+0x127>
+80102399:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801023a0:	83 c6 04             	add    $0x4,%esi
+801023a3:	39 f7                	cmp    %esi,%edi
+801023a5:	74 19                	je     801023c0 <iput+0x140>
+      if(a[j])
+801023a7:	8b 16                	mov    (%esi),%edx
+801023a9:	85 d2                	test   %edx,%edx
+801023ab:	74 f3                	je     801023a0 <iput+0x120>
+        bfree(ip->dev, a[j]);
+801023ad:	8b 03                	mov    (%ebx),%eax
+801023af:	e8 ec f7 ff ff       	call   80101ba0 <bfree>
+801023b4:	eb ea                	jmp    801023a0 <iput+0x120>
+801023b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801023bd:	8d 76 00             	lea    0x0(%esi),%esi
+    brelse(bp);
+801023c0:	83 ec 0c             	sub    $0xc,%esp
+801023c3:	ff 75 e4             	pushl  -0x1c(%ebp)
+801023c6:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801023c9:	e8 22 de ff ff       	call   801001f0 <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+801023ce:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+801023d4:	8b 03                	mov    (%ebx),%eax
+801023d6:	e8 c5 f7 ff ff       	call   80101ba0 <bfree>
+    ip->addrs[NDIRECT] = 0;
+801023db:	83 c4 10             	add    $0x10,%esp
+801023de:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+801023e5:	00 00 00 
+801023e8:	e9 58 ff ff ff       	jmp    80102345 <iput+0xc5>
+801023ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801023f0 <iunlockput>:
+{
+801023f0:	f3 0f 1e fb          	endbr32 
+801023f4:	55                   	push   %ebp
+801023f5:	89 e5                	mov    %esp,%ebp
+801023f7:	53                   	push   %ebx
+801023f8:	83 ec 10             	sub    $0x10,%esp
+801023fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  iunlock(ip);
+801023fe:	53                   	push   %ebx
+801023ff:	e8 2c fe ff ff       	call   80102230 <iunlock>
+  iput(ip);
+80102404:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80102407:	83 c4 10             	add    $0x10,%esp
+}
+8010240a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010240d:	c9                   	leave  
+  iput(ip);
+8010240e:	e9 6d fe ff ff       	jmp    80102280 <iput>
+80102413:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010241a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102420 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+80102420:	f3 0f 1e fb          	endbr32 
+80102424:	55                   	push   %ebp
+80102425:	89 e5                	mov    %esp,%ebp
+80102427:	8b 55 08             	mov    0x8(%ebp),%edx
+8010242a:	8b 45 0c             	mov    0xc(%ebp),%eax
+  st->dev = ip->dev;
+8010242d:	8b 0a                	mov    (%edx),%ecx
+8010242f:	89 48 04             	mov    %ecx,0x4(%eax)
+  st->ino = ip->inum;
+80102432:	8b 4a 04             	mov    0x4(%edx),%ecx
+80102435:	89 48 08             	mov    %ecx,0x8(%eax)
+  st->type = ip->type;
+80102438:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+8010243c:	66 89 08             	mov    %cx,(%eax)
+  st->nlink = ip->nlink;
+8010243f:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+80102443:	66 89 48 0c          	mov    %cx,0xc(%eax)
+  st->size = ip->size;
+80102447:	8b 52 58             	mov    0x58(%edx),%edx
+8010244a:	89 50 10             	mov    %edx,0x10(%eax)
+}
+8010244d:	5d                   	pop    %ebp
+8010244e:	c3                   	ret    
+8010244f:	90                   	nop
+
+80102450 <readi>:
+//PAGEBREAK!
+// Read data from inode.
+// Caller must hold ip->lock.
+int
+readi(struct inode *ip, char *dst, uint off, uint n)
+{
+80102450:	f3 0f 1e fb          	endbr32 
+80102454:	55                   	push   %ebp
+80102455:	89 e5                	mov    %esp,%ebp
+80102457:	57                   	push   %edi
+80102458:	56                   	push   %esi
+80102459:	53                   	push   %ebx
+8010245a:	83 ec 1c             	sub    $0x1c,%esp
+8010245d:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80102460:	8b 45 08             	mov    0x8(%ebp),%eax
+80102463:	8b 75 10             	mov    0x10(%ebp),%esi
+80102466:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80102469:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+8010246c:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+80102471:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102474:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+  if(ip->type == T_DEV){
+80102477:	0f 84 a3 00 00 00    	je     80102520 <readi+0xd0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+      return -1;
+    return devsw[ip->major].read(ip, dst, n);
+  }
+
+  if(off > ip->size || off + n < off)
+8010247d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80102480:	8b 40 58             	mov    0x58(%eax),%eax
+80102483:	39 c6                	cmp    %eax,%esi
+80102485:	0f 87 b6 00 00 00    	ja     80102541 <readi+0xf1>
+8010248b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+8010248e:	31 c9                	xor    %ecx,%ecx
+80102490:	89 da                	mov    %ebx,%edx
+80102492:	01 f2                	add    %esi,%edx
+80102494:	0f 92 c1             	setb   %cl
+80102497:	89 cf                	mov    %ecx,%edi
+80102499:	0f 82 a2 00 00 00    	jb     80102541 <readi+0xf1>
+    return -1;
+  if(off + n > ip->size)
+    n = ip->size - off;
+8010249f:	89 c1                	mov    %eax,%ecx
+801024a1:	29 f1                	sub    %esi,%ecx
+801024a3:	39 d0                	cmp    %edx,%eax
+801024a5:	0f 43 cb             	cmovae %ebx,%ecx
+801024a8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801024ab:	85 c9                	test   %ecx,%ecx
+801024ad:	74 63                	je     80102512 <readi+0xc2>
+801024af:	90                   	nop
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801024b0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+801024b3:	89 f2                	mov    %esi,%edx
+801024b5:	c1 ea 09             	shr    $0x9,%edx
+801024b8:	89 d8                	mov    %ebx,%eax
+801024ba:	e8 61 f9 ff ff       	call   80101e20 <bmap>
+801024bf:	83 ec 08             	sub    $0x8,%esp
+801024c2:	50                   	push   %eax
+801024c3:	ff 33                	pushl  (%ebx)
+801024c5:	e8 06 dc ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024ca:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+801024cd:	b9 00 02 00 00       	mov    $0x200,%ecx
+801024d2:	83 c4 0c             	add    $0xc,%esp
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801024d5:	89 c2                	mov    %eax,%edx
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024d7:	89 f0                	mov    %esi,%eax
+801024d9:	25 ff 01 00 00       	and    $0x1ff,%eax
+801024de:	29 fb                	sub    %edi,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+801024e0:	89 55 dc             	mov    %edx,-0x24(%ebp)
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024e3:	29 c1                	sub    %eax,%ecx
+    memmove(dst, bp->data + off%BSIZE, m);
+801024e5:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+801024e9:	39 d9                	cmp    %ebx,%ecx
+801024eb:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(dst, bp->data + off%BSIZE, m);
+801024ee:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+801024ef:	01 df                	add    %ebx,%edi
+801024f1:	01 de                	add    %ebx,%esi
+    memmove(dst, bp->data + off%BSIZE, m);
+801024f3:	50                   	push   %eax
+801024f4:	ff 75 e0             	pushl  -0x20(%ebp)
+801024f7:	e8 04 2c 00 00       	call   80105100 <memmove>
+    brelse(bp);
+801024fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801024ff:	89 14 24             	mov    %edx,(%esp)
+80102502:	e8 e9 dc ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+80102507:	01 5d e0             	add    %ebx,-0x20(%ebp)
+8010250a:	83 c4 10             	add    $0x10,%esp
+8010250d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80102510:	77 9e                	ja     801024b0 <readi+0x60>
+  }
+  return n;
+80102512:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+}
+80102515:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102518:	5b                   	pop    %ebx
+80102519:	5e                   	pop    %esi
+8010251a:	5f                   	pop    %edi
+8010251b:	5d                   	pop    %ebp
+8010251c:	c3                   	ret    
+8010251d:	8d 76 00             	lea    0x0(%esi),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
+80102520:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80102524:	66 83 f8 09          	cmp    $0x9,%ax
+80102528:	77 17                	ja     80102541 <readi+0xf1>
+8010252a:	8b 04 c5 60 23 11 80 	mov    -0x7feedca0(,%eax,8),%eax
+80102531:	85 c0                	test   %eax,%eax
+80102533:	74 0c                	je     80102541 <readi+0xf1>
+    return devsw[ip->major].read(ip, dst, n);
+80102535:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80102538:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010253b:	5b                   	pop    %ebx
+8010253c:	5e                   	pop    %esi
+8010253d:	5f                   	pop    %edi
+8010253e:	5d                   	pop    %ebp
+    return devsw[ip->major].read(ip, dst, n);
+8010253f:	ff e0                	jmp    *%eax
+      return -1;
+80102541:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102546:	eb cd                	jmp    80102515 <readi+0xc5>
+80102548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010254f:	90                   	nop
+
+80102550 <writei>:
+// PAGEBREAK!
+// Write data to inode.
+// Caller must hold ip->lock.
+int
+writei(struct inode *ip, char *src, uint off, uint n)
+{
+80102550:	f3 0f 1e fb          	endbr32 
+80102554:	55                   	push   %ebp
+80102555:	89 e5                	mov    %esp,%ebp
+80102557:	57                   	push   %edi
+80102558:	56                   	push   %esi
+80102559:	53                   	push   %ebx
+8010255a:	83 ec 1c             	sub    $0x1c,%esp
+8010255d:	8b 45 08             	mov    0x8(%ebp),%eax
+80102560:	8b 75 0c             	mov    0xc(%ebp),%esi
+80102563:	8b 7d 14             	mov    0x14(%ebp),%edi
+  uint tot, m;
+  struct buf *bp;
+
+  if(ip->type == T_DEV){
+80102566:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+{
+8010256b:	89 75 dc             	mov    %esi,-0x24(%ebp)
+8010256e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102571:	8b 75 10             	mov    0x10(%ebp),%esi
+80102574:	89 7d e0             	mov    %edi,-0x20(%ebp)
+  if(ip->type == T_DEV){
+80102577:	0f 84 b3 00 00 00    	je     80102630 <writei+0xe0>
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+      return -1;
+    return devsw[ip->major].write(ip, src, n);
+  }
+
+  if(off > ip->size || off + n < off)
+8010257d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80102580:	39 70 58             	cmp    %esi,0x58(%eax)
+80102583:	0f 82 e3 00 00 00    	jb     8010266c <writei+0x11c>
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+80102589:	8b 7d e0             	mov    -0x20(%ebp),%edi
+8010258c:	89 f8                	mov    %edi,%eax
+8010258e:	01 f0                	add    %esi,%eax
+80102590:	0f 82 d6 00 00 00    	jb     8010266c <writei+0x11c>
+80102596:	3d 00 18 01 00       	cmp    $0x11800,%eax
+8010259b:	0f 87 cb 00 00 00    	ja     8010266c <writei+0x11c>
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+801025a1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801025a8:	85 ff                	test   %edi,%edi
+801025aa:	74 75                	je     80102621 <writei+0xd1>
+801025ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801025b0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+801025b3:	89 f2                	mov    %esi,%edx
+801025b5:	c1 ea 09             	shr    $0x9,%edx
+801025b8:	89 f8                	mov    %edi,%eax
+801025ba:	e8 61 f8 ff ff       	call   80101e20 <bmap>
+801025bf:	83 ec 08             	sub    $0x8,%esp
+801025c2:	50                   	push   %eax
+801025c3:	ff 37                	pushl  (%edi)
+801025c5:	e8 06 db ff ff       	call   801000d0 <bread>
+    m = min(n - tot, BSIZE - off%BSIZE);
+801025ca:	b9 00 02 00 00       	mov    $0x200,%ecx
+801025cf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+801025d2:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+801025d5:	89 c7                	mov    %eax,%edi
+    m = min(n - tot, BSIZE - off%BSIZE);
+801025d7:	89 f0                	mov    %esi,%eax
+801025d9:	83 c4 0c             	add    $0xc,%esp
+801025dc:	25 ff 01 00 00       	and    $0x1ff,%eax
+801025e1:	29 c1                	sub    %eax,%ecx
+    memmove(bp->data + off%BSIZE, src, m);
+801025e3:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+    m = min(n - tot, BSIZE - off%BSIZE);
+801025e7:	39 d9                	cmp    %ebx,%ecx
+801025e9:	0f 46 d9             	cmovbe %ecx,%ebx
+    memmove(bp->data + off%BSIZE, src, m);
+801025ec:	53                   	push   %ebx
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+801025ed:	01 de                	add    %ebx,%esi
+    memmove(bp->data + off%BSIZE, src, m);
+801025ef:	ff 75 dc             	pushl  -0x24(%ebp)
+801025f2:	50                   	push   %eax
+801025f3:	e8 08 2b 00 00       	call   80105100 <memmove>
+    log_write(bp);
+801025f8:	89 3c 24             	mov    %edi,(%esp)
+801025fb:	e8 00 13 00 00       	call   80103900 <log_write>
+    brelse(bp);
+80102600:	89 3c 24             	mov    %edi,(%esp)
+80102603:	e8 e8 db ff ff       	call   801001f0 <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+80102608:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+8010260b:	83 c4 10             	add    $0x10,%esp
+8010260e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80102611:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80102614:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80102617:	77 97                	ja     801025b0 <writei+0x60>
+  }
+
+  if(n > 0 && off > ip->size){
+80102619:	8b 45 d8             	mov    -0x28(%ebp),%eax
+8010261c:	3b 70 58             	cmp    0x58(%eax),%esi
+8010261f:	77 37                	ja     80102658 <writei+0x108>
+    ip->size = off;
+    iupdate(ip);
+  }
+  return n;
+80102621:	8b 45 e0             	mov    -0x20(%ebp),%eax
+}
+80102624:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102627:	5b                   	pop    %ebx
+80102628:	5e                   	pop    %esi
+80102629:	5f                   	pop    %edi
+8010262a:	5d                   	pop    %ebp
+8010262b:	c3                   	ret    
+8010262c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
+80102630:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80102634:	66 83 f8 09          	cmp    $0x9,%ax
+80102638:	77 32                	ja     8010266c <writei+0x11c>
+8010263a:	8b 04 c5 64 23 11 80 	mov    -0x7feedc9c(,%eax,8),%eax
+80102641:	85 c0                	test   %eax,%eax
+80102643:	74 27                	je     8010266c <writei+0x11c>
+    return devsw[ip->major].write(ip, src, n);
+80102645:	89 7d 10             	mov    %edi,0x10(%ebp)
+}
+80102648:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010264b:	5b                   	pop    %ebx
+8010264c:	5e                   	pop    %esi
+8010264d:	5f                   	pop    %edi
+8010264e:	5d                   	pop    %ebp
+    return devsw[ip->major].write(ip, src, n);
+8010264f:	ff e0                	jmp    *%eax
+80102651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    ip->size = off;
+80102658:	8b 45 d8             	mov    -0x28(%ebp),%eax
+    iupdate(ip);
+8010265b:	83 ec 0c             	sub    $0xc,%esp
+    ip->size = off;
+8010265e:	89 70 58             	mov    %esi,0x58(%eax)
+    iupdate(ip);
+80102661:	50                   	push   %eax
+80102662:	e8 29 fa ff ff       	call   80102090 <iupdate>
+80102667:	83 c4 10             	add    $0x10,%esp
+8010266a:	eb b5                	jmp    80102621 <writei+0xd1>
+      return -1;
+8010266c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102671:	eb b1                	jmp    80102624 <writei+0xd4>
+80102673:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010267a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102680 <namecmp>:
+//PAGEBREAK!
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+80102680:	f3 0f 1e fb          	endbr32 
+80102684:	55                   	push   %ebp
+80102685:	89 e5                	mov    %esp,%ebp
+80102687:	83 ec 0c             	sub    $0xc,%esp
+  return strncmp(s, t, DIRSIZ);
+8010268a:	6a 0e                	push   $0xe
+8010268c:	ff 75 0c             	pushl  0xc(%ebp)
+8010268f:	ff 75 08             	pushl  0x8(%ebp)
+80102692:	e8 d9 2a 00 00       	call   80105170 <strncmp>
+}
+80102697:	c9                   	leave  
+80102698:	c3                   	ret    
+80102699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801026a0 <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+801026a0:	f3 0f 1e fb          	endbr32 
+801026a4:	55                   	push   %ebp
+801026a5:	89 e5                	mov    %esp,%ebp
+801026a7:	57                   	push   %edi
+801026a8:	56                   	push   %esi
+801026a9:	53                   	push   %ebx
+801026aa:	83 ec 1c             	sub    $0x1c,%esp
+801026ad:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+801026b0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801026b5:	0f 85 89 00 00 00    	jne    80102744 <dirlookup+0xa4>
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+801026bb:	8b 53 58             	mov    0x58(%ebx),%edx
+801026be:	31 ff                	xor    %edi,%edi
+801026c0:	8d 75 d8             	lea    -0x28(%ebp),%esi
+801026c3:	85 d2                	test   %edx,%edx
+801026c5:	74 42                	je     80102709 <dirlookup+0x69>
+801026c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801026ce:	66 90                	xchg   %ax,%ax
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801026d0:	6a 10                	push   $0x10
+801026d2:	57                   	push   %edi
+801026d3:	56                   	push   %esi
+801026d4:	53                   	push   %ebx
+801026d5:	e8 76 fd ff ff       	call   80102450 <readi>
+801026da:	83 c4 10             	add    $0x10,%esp
+801026dd:	83 f8 10             	cmp    $0x10,%eax
+801026e0:	75 55                	jne    80102737 <dirlookup+0x97>
+      panic("dirlookup read");
+    if(de.inum == 0)
+801026e2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801026e7:	74 18                	je     80102701 <dirlookup+0x61>
+  return strncmp(s, t, DIRSIZ);
+801026e9:	83 ec 04             	sub    $0x4,%esp
+801026ec:	8d 45 da             	lea    -0x26(%ebp),%eax
+801026ef:	6a 0e                	push   $0xe
+801026f1:	50                   	push   %eax
+801026f2:	ff 75 0c             	pushl  0xc(%ebp)
+801026f5:	e8 76 2a 00 00       	call   80105170 <strncmp>
+      continue;
+    if(namecmp(name, de.name) == 0){
+801026fa:	83 c4 10             	add    $0x10,%esp
+801026fd:	85 c0                	test   %eax,%eax
+801026ff:	74 17                	je     80102718 <dirlookup+0x78>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80102701:	83 c7 10             	add    $0x10,%edi
+80102704:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80102707:	72 c7                	jb     801026d0 <dirlookup+0x30>
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+80102709:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+8010270c:	31 c0                	xor    %eax,%eax
+}
+8010270e:	5b                   	pop    %ebx
+8010270f:	5e                   	pop    %esi
+80102710:	5f                   	pop    %edi
+80102711:	5d                   	pop    %ebp
+80102712:	c3                   	ret    
+80102713:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102717:	90                   	nop
+      if(poff)
+80102718:	8b 45 10             	mov    0x10(%ebp),%eax
+8010271b:	85 c0                	test   %eax,%eax
+8010271d:	74 05                	je     80102724 <dirlookup+0x84>
+        *poff = off;
+8010271f:	8b 45 10             	mov    0x10(%ebp),%eax
+80102722:	89 38                	mov    %edi,(%eax)
+      inum = de.inum;
+80102724:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+      return iget(dp->dev, inum);
+80102728:	8b 03                	mov    (%ebx),%eax
+8010272a:	e8 01 f6 ff ff       	call   80101d30 <iget>
+}
+8010272f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102732:	5b                   	pop    %ebx
+80102733:	5e                   	pop    %esi
+80102734:	5f                   	pop    %edi
+80102735:	5d                   	pop    %ebp
+80102736:	c3                   	ret    
+      panic("dirlookup read");
+80102737:	83 ec 0c             	sub    $0xc,%esp
+8010273a:	68 31 7d 10 80       	push   $0x80107d31
+8010273f:	e8 4c dc ff ff       	call   80100390 <panic>
+    panic("dirlookup not DIR");
+80102744:	83 ec 0c             	sub    $0xc,%esp
+80102747:	68 1f 7d 10 80       	push   $0x80107d1f
+8010274c:	e8 3f dc ff ff       	call   80100390 <panic>
+80102751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010275f:	90                   	nop
+
+80102760 <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+80102760:	55                   	push   %ebp
+80102761:	89 e5                	mov    %esp,%ebp
+80102763:	57                   	push   %edi
+80102764:	56                   	push   %esi
+80102765:	53                   	push   %ebx
+80102766:	89 c3                	mov    %eax,%ebx
+80102768:	83 ec 1c             	sub    $0x1c,%esp
+  struct inode *ip, *next;
+
+  if(*path == '/')
+8010276b:	80 38 2f             	cmpb   $0x2f,(%eax)
+{
+8010276e:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80102771:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+  if(*path == '/')
+80102774:	0f 84 86 01 00 00    	je     80102900 <namex+0x1a0>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+8010277a:	e8 d1 1b 00 00       	call   80104350 <myproc>
+  acquire(&icache.lock);
+8010277f:	83 ec 0c             	sub    $0xc,%esp
+80102782:	89 df                	mov    %ebx,%edi
+    ip = idup(myproc()->cwd);
+80102784:	8b 70 68             	mov    0x68(%eax),%esi
+  acquire(&icache.lock);
+80102787:	68 e0 23 11 80       	push   $0x801123e0
+8010278c:	e8 bf 27 00 00       	call   80104f50 <acquire>
+  ip->ref++;
+80102791:	83 46 08 01          	addl   $0x1,0x8(%esi)
+  release(&icache.lock);
+80102795:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
+8010279c:	e8 6f 28 00 00       	call   80105010 <release>
+801027a1:	83 c4 10             	add    $0x10,%esp
+801027a4:	eb 0d                	jmp    801027b3 <namex+0x53>
+801027a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027ad:	8d 76 00             	lea    0x0(%esi),%esi
+    path++;
+801027b0:	83 c7 01             	add    $0x1,%edi
+  while(*path == '/')
+801027b3:	0f b6 07             	movzbl (%edi),%eax
+801027b6:	3c 2f                	cmp    $0x2f,%al
+801027b8:	74 f6                	je     801027b0 <namex+0x50>
+  if(*path == 0)
+801027ba:	84 c0                	test   %al,%al
+801027bc:	0f 84 ee 00 00 00    	je     801028b0 <namex+0x150>
+  while(*path != '/' && *path != 0)
+801027c2:	0f b6 07             	movzbl (%edi),%eax
+801027c5:	84 c0                	test   %al,%al
+801027c7:	0f 84 fb 00 00 00    	je     801028c8 <namex+0x168>
+801027cd:	89 fb                	mov    %edi,%ebx
+801027cf:	3c 2f                	cmp    $0x2f,%al
+801027d1:	0f 84 f1 00 00 00    	je     801028c8 <namex+0x168>
+801027d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801027de:	66 90                	xchg   %ax,%ax
+801027e0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
+    path++;
+801027e4:	83 c3 01             	add    $0x1,%ebx
+  while(*path != '/' && *path != 0)
+801027e7:	3c 2f                	cmp    $0x2f,%al
+801027e9:	74 04                	je     801027ef <namex+0x8f>
+801027eb:	84 c0                	test   %al,%al
+801027ed:	75 f1                	jne    801027e0 <namex+0x80>
+  len = path - s;
+801027ef:	89 d8                	mov    %ebx,%eax
+801027f1:	29 f8                	sub    %edi,%eax
+  if(len >= DIRSIZ)
+801027f3:	83 f8 0d             	cmp    $0xd,%eax
+801027f6:	0f 8e 84 00 00 00    	jle    80102880 <namex+0x120>
+    memmove(name, s, DIRSIZ);
+801027fc:	83 ec 04             	sub    $0x4,%esp
+801027ff:	6a 0e                	push   $0xe
+80102801:	57                   	push   %edi
+    path++;
+80102802:	89 df                	mov    %ebx,%edi
+    memmove(name, s, DIRSIZ);
+80102804:	ff 75 e4             	pushl  -0x1c(%ebp)
+80102807:	e8 f4 28 00 00       	call   80105100 <memmove>
+8010280c:	83 c4 10             	add    $0x10,%esp
+  while(*path == '/')
+8010280f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80102812:	75 0c                	jne    80102820 <namex+0xc0>
+80102814:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    path++;
+80102818:	83 c7 01             	add    $0x1,%edi
+  while(*path == '/')
+8010281b:	80 3f 2f             	cmpb   $0x2f,(%edi)
+8010281e:	74 f8                	je     80102818 <namex+0xb8>
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+80102820:	83 ec 0c             	sub    $0xc,%esp
+80102823:	56                   	push   %esi
+80102824:	e8 27 f9 ff ff       	call   80102150 <ilock>
+    if(ip->type != T_DIR){
+80102829:	83 c4 10             	add    $0x10,%esp
+8010282c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80102831:	0f 85 a1 00 00 00    	jne    801028d8 <namex+0x178>
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+80102837:	8b 55 e0             	mov    -0x20(%ebp),%edx
+8010283a:	85 d2                	test   %edx,%edx
+8010283c:	74 09                	je     80102847 <namex+0xe7>
+8010283e:	80 3f 00             	cmpb   $0x0,(%edi)
+80102841:	0f 84 d9 00 00 00    	je     80102920 <namex+0x1c0>
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+80102847:	83 ec 04             	sub    $0x4,%esp
+8010284a:	6a 00                	push   $0x0
+8010284c:	ff 75 e4             	pushl  -0x1c(%ebp)
+8010284f:	56                   	push   %esi
+80102850:	e8 4b fe ff ff       	call   801026a0 <dirlookup>
+80102855:	83 c4 10             	add    $0x10,%esp
+80102858:	89 c3                	mov    %eax,%ebx
+8010285a:	85 c0                	test   %eax,%eax
+8010285c:	74 7a                	je     801028d8 <namex+0x178>
+  iunlock(ip);
+8010285e:	83 ec 0c             	sub    $0xc,%esp
+80102861:	56                   	push   %esi
+80102862:	e8 c9 f9 ff ff       	call   80102230 <iunlock>
+  iput(ip);
+80102867:	89 34 24             	mov    %esi,(%esp)
+8010286a:	89 de                	mov    %ebx,%esi
+8010286c:	e8 0f fa ff ff       	call   80102280 <iput>
+80102871:	83 c4 10             	add    $0x10,%esp
+80102874:	e9 3a ff ff ff       	jmp    801027b3 <namex+0x53>
+80102879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102880:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80102883:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
+80102886:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+    memmove(name, s, len);
+80102889:	83 ec 04             	sub    $0x4,%esp
+8010288c:	50                   	push   %eax
+8010288d:	57                   	push   %edi
+    name[len] = 0;
+8010288e:	89 df                	mov    %ebx,%edi
+    memmove(name, s, len);
+80102890:	ff 75 e4             	pushl  -0x1c(%ebp)
+80102893:	e8 68 28 00 00       	call   80105100 <memmove>
+    name[len] = 0;
+80102898:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010289b:	83 c4 10             	add    $0x10,%esp
+8010289e:	c6 00 00             	movb   $0x0,(%eax)
+801028a1:	e9 69 ff ff ff       	jmp    8010280f <namex+0xaf>
+801028a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028ad:	8d 76 00             	lea    0x0(%esi),%esi
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+801028b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801028b3:	85 c0                	test   %eax,%eax
+801028b5:	0f 85 85 00 00 00    	jne    80102940 <namex+0x1e0>
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+801028bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801028be:	89 f0                	mov    %esi,%eax
+801028c0:	5b                   	pop    %ebx
+801028c1:	5e                   	pop    %esi
+801028c2:	5f                   	pop    %edi
+801028c3:	5d                   	pop    %ebp
+801028c4:	c3                   	ret    
+801028c5:	8d 76 00             	lea    0x0(%esi),%esi
+  while(*path != '/' && *path != 0)
+801028c8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801028cb:	89 fb                	mov    %edi,%ebx
+801028cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801028d0:	31 c0                	xor    %eax,%eax
+801028d2:	eb b5                	jmp    80102889 <namex+0x129>
+801028d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  iunlock(ip);
+801028d8:	83 ec 0c             	sub    $0xc,%esp
+801028db:	56                   	push   %esi
+801028dc:	e8 4f f9 ff ff       	call   80102230 <iunlock>
+  iput(ip);
+801028e1:	89 34 24             	mov    %esi,(%esp)
+      return 0;
+801028e4:	31 f6                	xor    %esi,%esi
+  iput(ip);
+801028e6:	e8 95 f9 ff ff       	call   80102280 <iput>
+      return 0;
+801028eb:	83 c4 10             	add    $0x10,%esp
+}
+801028ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801028f1:	89 f0                	mov    %esi,%eax
+801028f3:	5b                   	pop    %ebx
+801028f4:	5e                   	pop    %esi
+801028f5:	5f                   	pop    %edi
+801028f6:	5d                   	pop    %ebp
+801028f7:	c3                   	ret    
+801028f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028ff:	90                   	nop
+    ip = iget(ROOTDEV, ROOTINO);
+80102900:	ba 01 00 00 00       	mov    $0x1,%edx
+80102905:	b8 01 00 00 00       	mov    $0x1,%eax
+8010290a:	89 df                	mov    %ebx,%edi
+8010290c:	e8 1f f4 ff ff       	call   80101d30 <iget>
+80102911:	89 c6                	mov    %eax,%esi
+80102913:	e9 9b fe ff ff       	jmp    801027b3 <namex+0x53>
+80102918:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010291f:	90                   	nop
+      iunlock(ip);
+80102920:	83 ec 0c             	sub    $0xc,%esp
+80102923:	56                   	push   %esi
+80102924:	e8 07 f9 ff ff       	call   80102230 <iunlock>
+      return ip;
+80102929:	83 c4 10             	add    $0x10,%esp
+}
+8010292c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010292f:	89 f0                	mov    %esi,%eax
+80102931:	5b                   	pop    %ebx
+80102932:	5e                   	pop    %esi
+80102933:	5f                   	pop    %edi
+80102934:	5d                   	pop    %ebp
+80102935:	c3                   	ret    
+80102936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010293d:	8d 76 00             	lea    0x0(%esi),%esi
+    iput(ip);
+80102940:	83 ec 0c             	sub    $0xc,%esp
+80102943:	56                   	push   %esi
+    return 0;
+80102944:	31 f6                	xor    %esi,%esi
+    iput(ip);
+80102946:	e8 35 f9 ff ff       	call   80102280 <iput>
+    return 0;
+8010294b:	83 c4 10             	add    $0x10,%esp
+8010294e:	e9 68 ff ff ff       	jmp    801028bb <namex+0x15b>
+80102953:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010295a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102960 <dirlink>:
+{
+80102960:	f3 0f 1e fb          	endbr32 
+80102964:	55                   	push   %ebp
+80102965:	89 e5                	mov    %esp,%ebp
+80102967:	57                   	push   %edi
+80102968:	56                   	push   %esi
+80102969:	53                   	push   %ebx
+8010296a:	83 ec 20             	sub    $0x20,%esp
+8010296d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if((ip = dirlookup(dp, name, 0)) != 0){
+80102970:	6a 00                	push   $0x0
+80102972:	ff 75 0c             	pushl  0xc(%ebp)
+80102975:	53                   	push   %ebx
+80102976:	e8 25 fd ff ff       	call   801026a0 <dirlookup>
+8010297b:	83 c4 10             	add    $0x10,%esp
+8010297e:	85 c0                	test   %eax,%eax
+80102980:	75 6b                	jne    801029ed <dirlink+0x8d>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+80102982:	8b 7b 58             	mov    0x58(%ebx),%edi
+80102985:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80102988:	85 ff                	test   %edi,%edi
+8010298a:	74 2d                	je     801029b9 <dirlink+0x59>
+8010298c:	31 ff                	xor    %edi,%edi
+8010298e:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80102991:	eb 0d                	jmp    801029a0 <dirlink+0x40>
+80102993:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102997:	90                   	nop
+80102998:	83 c7 10             	add    $0x10,%edi
+8010299b:	3b 7b 58             	cmp    0x58(%ebx),%edi
+8010299e:	73 19                	jae    801029b9 <dirlink+0x59>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029a0:	6a 10                	push   $0x10
+801029a2:	57                   	push   %edi
+801029a3:	56                   	push   %esi
+801029a4:	53                   	push   %ebx
+801029a5:	e8 a6 fa ff ff       	call   80102450 <readi>
+801029aa:	83 c4 10             	add    $0x10,%esp
+801029ad:	83 f8 10             	cmp    $0x10,%eax
+801029b0:	75 4e                	jne    80102a00 <dirlink+0xa0>
+    if(de.inum == 0)
+801029b2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801029b7:	75 df                	jne    80102998 <dirlink+0x38>
+  strncpy(de.name, name, DIRSIZ);
+801029b9:	83 ec 04             	sub    $0x4,%esp
+801029bc:	8d 45 da             	lea    -0x26(%ebp),%eax
+801029bf:	6a 0e                	push   $0xe
+801029c1:	ff 75 0c             	pushl  0xc(%ebp)
+801029c4:	50                   	push   %eax
+801029c5:	e8 f6 27 00 00       	call   801051c0 <strncpy>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029ca:	6a 10                	push   $0x10
+  de.inum = inum;
+801029cc:	8b 45 10             	mov    0x10(%ebp),%eax
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029cf:	57                   	push   %edi
+801029d0:	56                   	push   %esi
+801029d1:	53                   	push   %ebx
+  de.inum = inum;
+801029d2:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+801029d6:	e8 75 fb ff ff       	call   80102550 <writei>
+801029db:	83 c4 20             	add    $0x20,%esp
+801029de:	83 f8 10             	cmp    $0x10,%eax
+801029e1:	75 2a                	jne    80102a0d <dirlink+0xad>
+  return 0;
+801029e3:	31 c0                	xor    %eax,%eax
+}
+801029e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801029e8:	5b                   	pop    %ebx
+801029e9:	5e                   	pop    %esi
+801029ea:	5f                   	pop    %edi
+801029eb:	5d                   	pop    %ebp
+801029ec:	c3                   	ret    
+    iput(ip);
+801029ed:	83 ec 0c             	sub    $0xc,%esp
+801029f0:	50                   	push   %eax
+801029f1:	e8 8a f8 ff ff       	call   80102280 <iput>
+    return -1;
+801029f6:	83 c4 10             	add    $0x10,%esp
+801029f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801029fe:	eb e5                	jmp    801029e5 <dirlink+0x85>
+      panic("dirlink read");
+80102a00:	83 ec 0c             	sub    $0xc,%esp
+80102a03:	68 40 7d 10 80       	push   $0x80107d40
+80102a08:	e8 83 d9 ff ff       	call   80100390 <panic>
+    panic("dirlink");
+80102a0d:	83 ec 0c             	sub    $0xc,%esp
+80102a10:	68 26 83 10 80       	push   $0x80108326
+80102a15:	e8 76 d9 ff ff       	call   80100390 <panic>
+80102a1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80102a20 <namei>:
+
+struct inode*
+namei(char *path)
+{
+80102a20:	f3 0f 1e fb          	endbr32 
+80102a24:	55                   	push   %ebp
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+80102a25:	31 d2                	xor    %edx,%edx
+{
+80102a27:	89 e5                	mov    %esp,%ebp
+80102a29:	83 ec 18             	sub    $0x18,%esp
+  return namex(path, 0, name);
+80102a2c:	8b 45 08             	mov    0x8(%ebp),%eax
+80102a2f:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80102a32:	e8 29 fd ff ff       	call   80102760 <namex>
+}
+80102a37:	c9                   	leave  
+80102a38:	c3                   	ret    
+80102a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102a40 <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+80102a40:	f3 0f 1e fb          	endbr32 
+80102a44:	55                   	push   %ebp
+  return namex(path, 1, name);
+80102a45:	ba 01 00 00 00       	mov    $0x1,%edx
+{
+80102a4a:	89 e5                	mov    %esp,%ebp
+  return namex(path, 1, name);
+80102a4c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102a4f:	8b 45 08             	mov    0x8(%ebp),%eax
+}
+80102a52:	5d                   	pop    %ebp
+  return namex(path, 1, name);
+80102a53:	e9 08 fd ff ff       	jmp    80102760 <namex>
+80102a58:	66 90                	xchg   %ax,%ax
+80102a5a:	66 90                	xchg   %ax,%ax
+80102a5c:	66 90                	xchg   %ax,%ax
+80102a5e:	66 90                	xchg   %ax,%ax
+
+80102a60 <idestart>:
+}
+
+// Start the request for b.  Caller must hold idelock.
+static void
+idestart(struct buf *b)
+{
+80102a60:	55                   	push   %ebp
+80102a61:	89 e5                	mov    %esp,%ebp
+80102a63:	57                   	push   %edi
+80102a64:	56                   	push   %esi
+80102a65:	53                   	push   %ebx
+80102a66:	83 ec 0c             	sub    $0xc,%esp
+  if(b == 0)
+80102a69:	85 c0                	test   %eax,%eax
+80102a6b:	0f 84 b4 00 00 00    	je     80102b25 <idestart+0xc5>
+    panic("idestart");
+  if(b->blockno >= FSSIZE)
+80102a71:	8b 70 08             	mov    0x8(%eax),%esi
+80102a74:	89 c3                	mov    %eax,%ebx
+80102a76:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
+80102a7c:	0f 87 96 00 00 00    	ja     80102b18 <idestart+0xb8>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102a82:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80102a87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102a8e:	66 90                	xchg   %ax,%ax
+80102a90:	89 ca                	mov    %ecx,%edx
+80102a92:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102a93:	83 e0 c0             	and    $0xffffffc0,%eax
+80102a96:	3c 40                	cmp    $0x40,%al
+80102a98:	75 f6                	jne    80102a90 <idestart+0x30>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102a9a:	31 ff                	xor    %edi,%edi
+80102a9c:	ba f6 03 00 00       	mov    $0x3f6,%edx
+80102aa1:	89 f8                	mov    %edi,%eax
+80102aa3:	ee                   	out    %al,(%dx)
+80102aa4:	b8 01 00 00 00       	mov    $0x1,%eax
+80102aa9:	ba f2 01 00 00       	mov    $0x1f2,%edx
+80102aae:	ee                   	out    %al,(%dx)
+80102aaf:	ba f3 01 00 00       	mov    $0x1f3,%edx
+80102ab4:	89 f0                	mov    %esi,%eax
+80102ab6:	ee                   	out    %al,(%dx)
+
+  idewait(0);
+  outb(0x3f6, 0);  // generate interrupt
+  outb(0x1f2, sector_per_block);  // number of sectors
+  outb(0x1f3, sector & 0xff);
+  outb(0x1f4, (sector >> 8) & 0xff);
+80102ab7:	89 f0                	mov    %esi,%eax
+80102ab9:	ba f4 01 00 00       	mov    $0x1f4,%edx
+80102abe:	c1 f8 08             	sar    $0x8,%eax
+80102ac1:	ee                   	out    %al,(%dx)
+80102ac2:	ba f5 01 00 00       	mov    $0x1f5,%edx
+80102ac7:	89 f8                	mov    %edi,%eax
+80102ac9:	ee                   	out    %al,(%dx)
+  outb(0x1f5, (sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+80102aca:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
+80102ace:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102ad3:	c1 e0 04             	shl    $0x4,%eax
+80102ad6:	83 e0 10             	and    $0x10,%eax
+80102ad9:	83 c8 e0             	or     $0xffffffe0,%eax
+80102adc:	ee                   	out    %al,(%dx)
+  if(b->flags & B_DIRTY){
+80102add:	f6 03 04             	testb  $0x4,(%ebx)
+80102ae0:	75 16                	jne    80102af8 <idestart+0x98>
+80102ae2:	b8 20 00 00 00       	mov    $0x20,%eax
+80102ae7:	89 ca                	mov    %ecx,%edx
+80102ae9:	ee                   	out    %al,(%dx)
+    outb(0x1f7, write_cmd);
+    outsl(0x1f0, b->data, BSIZE/4);
+  } else {
+    outb(0x1f7, read_cmd);
+  }
+}
+80102aea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102aed:	5b                   	pop    %ebx
+80102aee:	5e                   	pop    %esi
+80102aef:	5f                   	pop    %edi
+80102af0:	5d                   	pop    %ebp
+80102af1:	c3                   	ret    
+80102af2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102af8:	b8 30 00 00 00       	mov    $0x30,%eax
+80102afd:	89 ca                	mov    %ecx,%edx
+80102aff:	ee                   	out    %al,(%dx)
+  asm volatile("cld; rep outsl" :
+80102b00:	b9 80 00 00 00       	mov    $0x80,%ecx
+    outsl(0x1f0, b->data, BSIZE/4);
+80102b05:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102b08:	ba f0 01 00 00       	mov    $0x1f0,%edx
+80102b0d:	fc                   	cld    
+80102b0e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+}
+80102b10:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102b13:	5b                   	pop    %ebx
+80102b14:	5e                   	pop    %esi
+80102b15:	5f                   	pop    %edi
+80102b16:	5d                   	pop    %ebp
+80102b17:	c3                   	ret    
+    panic("incorrect blockno");
+80102b18:	83 ec 0c             	sub    $0xc,%esp
+80102b1b:	68 ac 7d 10 80       	push   $0x80107dac
+80102b20:	e8 6b d8 ff ff       	call   80100390 <panic>
+    panic("idestart");
+80102b25:	83 ec 0c             	sub    $0xc,%esp
+80102b28:	68 a3 7d 10 80       	push   $0x80107da3
+80102b2d:	e8 5e d8 ff ff       	call   80100390 <panic>
+80102b32:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102b39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102b40 <ideinit>:
+{
+80102b40:	f3 0f 1e fb          	endbr32 
+80102b44:	55                   	push   %ebp
+80102b45:	89 e5                	mov    %esp,%ebp
+80102b47:	83 ec 10             	sub    $0x10,%esp
+  initlock(&idelock, "ide");
+80102b4a:	68 be 7d 10 80       	push   $0x80107dbe
+80102b4f:	68 80 b5 10 80       	push   $0x8010b580
+80102b54:	e8 77 22 00 00       	call   80104dd0 <initlock>
+  ioapicenable(IRQ_IDE, ncpu - 1);
+80102b59:	58                   	pop    %eax
+80102b5a:	a1 00 47 11 80       	mov    0x80114700,%eax
+80102b5f:	5a                   	pop    %edx
+80102b60:	83 e8 01             	sub    $0x1,%eax
+80102b63:	50                   	push   %eax
+80102b64:	6a 0e                	push   $0xe
+80102b66:	e8 b5 02 00 00       	call   80102e20 <ioapicenable>
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102b6b:	83 c4 10             	add    $0x10,%esp
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b6e:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102b73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102b77:	90                   	nop
+80102b78:	ec                   	in     (%dx),%al
+80102b79:	83 e0 c0             	and    $0xffffffc0,%eax
+80102b7c:	3c 40                	cmp    $0x40,%al
+80102b7e:	75 f8                	jne    80102b78 <ideinit+0x38>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102b80:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+80102b85:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102b8a:	ee                   	out    %al,(%dx)
+80102b8b:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102b90:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102b95:	eb 0e                	jmp    80102ba5 <ideinit+0x65>
+80102b97:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102b9e:	66 90                	xchg   %ax,%ax
+  for(i=0; i<1000; i++){
+80102ba0:	83 e9 01             	sub    $0x1,%ecx
+80102ba3:	74 0f                	je     80102bb4 <ideinit+0x74>
+80102ba5:	ec                   	in     (%dx),%al
+    if(inb(0x1f7) != 0){
+80102ba6:	84 c0                	test   %al,%al
+80102ba8:	74 f6                	je     80102ba0 <ideinit+0x60>
+      havedisk1 = 1;
+80102baa:	c7 05 60 b5 10 80 01 	movl   $0x1,0x8010b560
+80102bb1:	00 00 00 
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80102bb4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+80102bb9:	ba f6 01 00 00       	mov    $0x1f6,%edx
+80102bbe:	ee                   	out    %al,(%dx)
+}
+80102bbf:	c9                   	leave  
+80102bc0:	c3                   	ret    
+80102bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102bc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102bcf:	90                   	nop
+
+80102bd0 <ideintr>:
+
+// Interrupt handler.
+void
+ideintr(void)
+{
+80102bd0:	f3 0f 1e fb          	endbr32 
+80102bd4:	55                   	push   %ebp
+80102bd5:	89 e5                	mov    %esp,%ebp
+80102bd7:	57                   	push   %edi
+80102bd8:	56                   	push   %esi
+80102bd9:	53                   	push   %ebx
+80102bda:	83 ec 18             	sub    $0x18,%esp
+  struct buf *b;
+
+  // First queued buffer is the active request.
+  acquire(&idelock);
+80102bdd:	68 80 b5 10 80       	push   $0x8010b580
+80102be2:	e8 69 23 00 00       	call   80104f50 <acquire>
+
+  if((b = idequeue) == 0){
+80102be7:	8b 1d 64 b5 10 80    	mov    0x8010b564,%ebx
+80102bed:	83 c4 10             	add    $0x10,%esp
+80102bf0:	85 db                	test   %ebx,%ebx
+80102bf2:	74 5f                	je     80102c53 <ideintr+0x83>
+    release(&idelock);
+    return;
+  }
+  idequeue = b->qnext;
+80102bf4:	8b 43 58             	mov    0x58(%ebx),%eax
+80102bf7:	a3 64 b5 10 80       	mov    %eax,0x8010b564
+
+  // Read data if needed.
+  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
+80102bfc:	8b 33                	mov    (%ebx),%esi
+80102bfe:	f7 c6 04 00 00 00    	test   $0x4,%esi
+80102c04:	75 2b                	jne    80102c31 <ideintr+0x61>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80102c06:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102c0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c0f:	90                   	nop
+80102c10:	ec                   	in     (%dx),%al
+  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
+80102c11:	89 c1                	mov    %eax,%ecx
+80102c13:	83 e1 c0             	and    $0xffffffc0,%ecx
+80102c16:	80 f9 40             	cmp    $0x40,%cl
+80102c19:	75 f5                	jne    80102c10 <ideintr+0x40>
+  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
+80102c1b:	a8 21                	test   $0x21,%al
+80102c1d:	75 12                	jne    80102c31 <ideintr+0x61>
+    insl(0x1f0, b->data, BSIZE/4);
+80102c1f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+  asm volatile("cld; rep insl" :
+80102c22:	b9 80 00 00 00       	mov    $0x80,%ecx
+80102c27:	ba f0 01 00 00       	mov    $0x1f0,%edx
+80102c2c:	fc                   	cld    
+80102c2d:	f3 6d                	rep insl (%dx),%es:(%edi)
+80102c2f:	8b 33                	mov    (%ebx),%esi
+
+  // Wake process waiting for this buf.
+  b->flags |= B_VALID;
+  b->flags &= ~B_DIRTY;
+80102c31:	83 e6 fb             	and    $0xfffffffb,%esi
+  wakeup(b);
+80102c34:	83 ec 0c             	sub    $0xc,%esp
+  b->flags &= ~B_DIRTY;
+80102c37:	83 ce 02             	or     $0x2,%esi
+80102c3a:	89 33                	mov    %esi,(%ebx)
+  wakeup(b);
+80102c3c:	53                   	push   %ebx
+80102c3d:	e8 8e 1e 00 00       	call   80104ad0 <wakeup>
+
+  // Start disk on next buf in queue.
+  if(idequeue != 0)
+80102c42:	a1 64 b5 10 80       	mov    0x8010b564,%eax
+80102c47:	83 c4 10             	add    $0x10,%esp
+80102c4a:	85 c0                	test   %eax,%eax
+80102c4c:	74 05                	je     80102c53 <ideintr+0x83>
+    idestart(idequeue);
+80102c4e:	e8 0d fe ff ff       	call   80102a60 <idestart>
+    release(&idelock);
+80102c53:	83 ec 0c             	sub    $0xc,%esp
+80102c56:	68 80 b5 10 80       	push   $0x8010b580
+80102c5b:	e8 b0 23 00 00       	call   80105010 <release>
+
+  release(&idelock);
+}
+80102c60:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102c63:	5b                   	pop    %ebx
+80102c64:	5e                   	pop    %esi
+80102c65:	5f                   	pop    %edi
+80102c66:	5d                   	pop    %ebp
+80102c67:	c3                   	ret    
+80102c68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102c6f:	90                   	nop
+
+80102c70 <iderw>:
+// Sync buf with disk.
+// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
+// Else if B_VALID is not set, read buf from disk, set B_VALID.
+void
+iderw(struct buf *b)
+{
+80102c70:	f3 0f 1e fb          	endbr32 
+80102c74:	55                   	push   %ebp
+80102c75:	89 e5                	mov    %esp,%ebp
+80102c77:	53                   	push   %ebx
+80102c78:	83 ec 10             	sub    $0x10,%esp
+80102c7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct buf **pp;
+
+  if(!holdingsleep(&b->lock))
+80102c7e:	8d 43 0c             	lea    0xc(%ebx),%eax
+80102c81:	50                   	push   %eax
+80102c82:	e8 e9 20 00 00       	call   80104d70 <holdingsleep>
+80102c87:	83 c4 10             	add    $0x10,%esp
+80102c8a:	85 c0                	test   %eax,%eax
+80102c8c:	0f 84 cf 00 00 00    	je     80102d61 <iderw+0xf1>
+    panic("iderw: buf not locked");
+  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
+80102c92:	8b 03                	mov    (%ebx),%eax
+80102c94:	83 e0 06             	and    $0x6,%eax
+80102c97:	83 f8 02             	cmp    $0x2,%eax
+80102c9a:	0f 84 b4 00 00 00    	je     80102d54 <iderw+0xe4>
+    panic("iderw: nothing to do");
+  if(b->dev != 0 && !havedisk1)
+80102ca0:	8b 53 04             	mov    0x4(%ebx),%edx
+80102ca3:	85 d2                	test   %edx,%edx
+80102ca5:	74 0d                	je     80102cb4 <iderw+0x44>
+80102ca7:	a1 60 b5 10 80       	mov    0x8010b560,%eax
+80102cac:	85 c0                	test   %eax,%eax
+80102cae:	0f 84 93 00 00 00    	je     80102d47 <iderw+0xd7>
+    panic("iderw: ide disk 1 not present");
+
+  acquire(&idelock);  //DOC:acquire-lock
+80102cb4:	83 ec 0c             	sub    $0xc,%esp
+80102cb7:	68 80 b5 10 80       	push   $0x8010b580
+80102cbc:	e8 8f 22 00 00       	call   80104f50 <acquire>
+
+  // Append b to idequeue.
+  b->qnext = 0;
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102cc1:	a1 64 b5 10 80       	mov    0x8010b564,%eax
+  b->qnext = 0;
+80102cc6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102ccd:	83 c4 10             	add    $0x10,%esp
+80102cd0:	85 c0                	test   %eax,%eax
+80102cd2:	74 6c                	je     80102d40 <iderw+0xd0>
+80102cd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102cd8:	89 c2                	mov    %eax,%edx
+80102cda:	8b 40 58             	mov    0x58(%eax),%eax
+80102cdd:	85 c0                	test   %eax,%eax
+80102cdf:	75 f7                	jne    80102cd8 <iderw+0x68>
+80102ce1:	83 c2 58             	add    $0x58,%edx
+    ;
+  *pp = b;
+80102ce4:	89 1a                	mov    %ebx,(%edx)
+
+  // Start disk if necessary.
+  if(idequeue == b)
+80102ce6:	39 1d 64 b5 10 80    	cmp    %ebx,0x8010b564
+80102cec:	74 42                	je     80102d30 <iderw+0xc0>
+    idestart(b);
+
+  // Wait for request to finish.
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+80102cee:	8b 03                	mov    (%ebx),%eax
+80102cf0:	83 e0 06             	and    $0x6,%eax
+80102cf3:	83 f8 02             	cmp    $0x2,%eax
+80102cf6:	74 23                	je     80102d1b <iderw+0xab>
+80102cf8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102cff:	90                   	nop
+    sleep(b, &idelock);
+80102d00:	83 ec 08             	sub    $0x8,%esp
+80102d03:	68 80 b5 10 80       	push   $0x8010b580
+80102d08:	53                   	push   %ebx
+80102d09:	e8 02 1c 00 00       	call   80104910 <sleep>
+  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
+80102d0e:	8b 03                	mov    (%ebx),%eax
+80102d10:	83 c4 10             	add    $0x10,%esp
+80102d13:	83 e0 06             	and    $0x6,%eax
+80102d16:	83 f8 02             	cmp    $0x2,%eax
+80102d19:	75 e5                	jne    80102d00 <iderw+0x90>
+  }
+
+
+  release(&idelock);
+80102d1b:	c7 45 08 80 b5 10 80 	movl   $0x8010b580,0x8(%ebp)
+}
+80102d22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102d25:	c9                   	leave  
+  release(&idelock);
+80102d26:	e9 e5 22 00 00       	jmp    80105010 <release>
+80102d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102d2f:	90                   	nop
+    idestart(b);
+80102d30:	89 d8                	mov    %ebx,%eax
+80102d32:	e8 29 fd ff ff       	call   80102a60 <idestart>
+80102d37:	eb b5                	jmp    80102cee <iderw+0x7e>
+80102d39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
+80102d40:	ba 64 b5 10 80       	mov    $0x8010b564,%edx
+80102d45:	eb 9d                	jmp    80102ce4 <iderw+0x74>
+    panic("iderw: ide disk 1 not present");
+80102d47:	83 ec 0c             	sub    $0xc,%esp
+80102d4a:	68 ed 7d 10 80       	push   $0x80107ded
+80102d4f:	e8 3c d6 ff ff       	call   80100390 <panic>
+    panic("iderw: nothing to do");
+80102d54:	83 ec 0c             	sub    $0xc,%esp
+80102d57:	68 d8 7d 10 80       	push   $0x80107dd8
+80102d5c:	e8 2f d6 ff ff       	call   80100390 <panic>
+    panic("iderw: buf not locked");
+80102d61:	83 ec 0c             	sub    $0xc,%esp
+80102d64:	68 c2 7d 10 80       	push   $0x80107dc2
+80102d69:	e8 22 d6 ff ff       	call   80100390 <panic>
+80102d6e:	66 90                	xchg   %ax,%ax
+
+80102d70 <ioapicinit>:
+  ioapic->data = data;
+}
+
+void
+ioapicinit(void)
+{
+80102d70:	f3 0f 1e fb          	endbr32 
+80102d74:	55                   	push   %ebp
+  int i, id, maxintr;
+
+  ioapic = (volatile struct ioapic*)IOAPIC;
+80102d75:	c7 05 34 40 11 80 00 	movl   $0xfec00000,0x80114034
+80102d7c:	00 c0 fe 
+{
+80102d7f:	89 e5                	mov    %esp,%ebp
+80102d81:	56                   	push   %esi
+80102d82:	53                   	push   %ebx
+  ioapic->reg = reg;
+80102d83:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+80102d8a:	00 00 00 
+  return ioapic->data;
+80102d8d:	8b 15 34 40 11 80    	mov    0x80114034,%edx
+80102d93:	8b 72 10             	mov    0x10(%edx),%esi
+  ioapic->reg = reg;
+80102d96:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+  return ioapic->data;
+80102d9c:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+  id = ioapicread(REG_ID) >> 24;
+  if(id != ioapicid)
+80102da2:	0f b6 15 60 41 11 80 	movzbl 0x80114160,%edx
+  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
+80102da9:	c1 ee 10             	shr    $0x10,%esi
+80102dac:	89 f0                	mov    %esi,%eax
+80102dae:	0f b6 f0             	movzbl %al,%esi
+  return ioapic->data;
+80102db1:	8b 41 10             	mov    0x10(%ecx),%eax
+  id = ioapicread(REG_ID) >> 24;
+80102db4:	c1 e8 18             	shr    $0x18,%eax
+  if(id != ioapicid)
+80102db7:	39 c2                	cmp    %eax,%edx
+80102db9:	74 16                	je     80102dd1 <ioapicinit+0x61>
+    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
+80102dbb:	83 ec 0c             	sub    $0xc,%esp
+80102dbe:	68 0c 7e 10 80       	push   $0x80107e0c
+80102dc3:	e8 28 d9 ff ff       	call   801006f0 <cprintf>
+80102dc8:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+80102dce:	83 c4 10             	add    $0x10,%esp
+80102dd1:	83 c6 21             	add    $0x21,%esi
+{
+80102dd4:	ba 10 00 00 00       	mov    $0x10,%edx
+80102dd9:	b8 20 00 00 00       	mov    $0x20,%eax
+80102dde:	66 90                	xchg   %ax,%ax
+  ioapic->reg = reg;
+80102de0:	89 11                	mov    %edx,(%ecx)
+
+  // Mark all interrupts edge-triggered, active high, disabled,
+  // and not routed to any CPUs.
+  for(i = 0; i <= maxintr; i++){
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102de2:	89 c3                	mov    %eax,%ebx
+  ioapic->data = data;
+80102de4:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+80102dea:	83 c0 01             	add    $0x1,%eax
+    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
+80102ded:	81 cb 00 00 01 00    	or     $0x10000,%ebx
+  ioapic->data = data;
+80102df3:	89 59 10             	mov    %ebx,0x10(%ecx)
+  ioapic->reg = reg;
+80102df6:	8d 5a 01             	lea    0x1(%edx),%ebx
+80102df9:	83 c2 02             	add    $0x2,%edx
+80102dfc:	89 19                	mov    %ebx,(%ecx)
+  ioapic->data = data;
+80102dfe:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+80102e04:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+  for(i = 0; i <= maxintr; i++){
+80102e0b:	39 f0                	cmp    %esi,%eax
+80102e0d:	75 d1                	jne    80102de0 <ioapicinit+0x70>
+    ioapicwrite(REG_TABLE+2*i+1, 0);
+  }
+}
+80102e0f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102e12:	5b                   	pop    %ebx
+80102e13:	5e                   	pop    %esi
+80102e14:	5d                   	pop    %ebp
+80102e15:	c3                   	ret    
+80102e16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102e1d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102e20 <ioapicenable>:
+
+void
+ioapicenable(int irq, int cpunum)
+{
+80102e20:	f3 0f 1e fb          	endbr32 
+80102e24:	55                   	push   %ebp
+  ioapic->reg = reg;
+80102e25:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+{
+80102e2b:	89 e5                	mov    %esp,%ebp
+80102e2d:	8b 45 08             	mov    0x8(%ebp),%eax
+  // Mark interrupt edge-triggered, active high,
+  // enabled, and routed to the given cpunum,
+  // which happens to be that cpu's APIC ID.
+  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
+80102e30:	8d 50 20             	lea    0x20(%eax),%edx
+80102e33:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+  ioapic->reg = reg;
+80102e37:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+80102e39:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102e3f:	83 c0 01             	add    $0x1,%eax
+  ioapic->data = data;
+80102e42:	89 51 10             	mov    %edx,0x10(%ecx)
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102e45:	8b 55 0c             	mov    0xc(%ebp),%edx
+  ioapic->reg = reg;
+80102e48:	89 01                	mov    %eax,(%ecx)
+  ioapic->data = data;
+80102e4a:	a1 34 40 11 80       	mov    0x80114034,%eax
+  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
+80102e4f:	c1 e2 18             	shl    $0x18,%edx
+  ioapic->data = data;
+80102e52:	89 50 10             	mov    %edx,0x10(%eax)
+}
+80102e55:	5d                   	pop    %ebp
+80102e56:	c3                   	ret    
+80102e57:	66 90                	xchg   %ax,%ax
+80102e59:	66 90                	xchg   %ax,%ax
+80102e5b:	66 90                	xchg   %ax,%ax
+80102e5d:	66 90                	xchg   %ax,%ax
+80102e5f:	90                   	nop
+
+80102e60 <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(char *v)
+{
+80102e60:	f3 0f 1e fb          	endbr32 
+80102e64:	55                   	push   %ebp
+80102e65:	89 e5                	mov    %esp,%ebp
+80102e67:	53                   	push   %ebx
+80102e68:	83 ec 04             	sub    $0x4,%esp
+80102e6b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct run *r;
+
+  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
+80102e6e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+80102e74:	75 7a                	jne    80102ef0 <kfree+0x90>
+80102e76:	81 fb a8 6e 11 80    	cmp    $0x80116ea8,%ebx
+80102e7c:	72 72                	jb     80102ef0 <kfree+0x90>
+80102e7e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80102e84:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102e89:	77 65                	ja     80102ef0 <kfree+0x90>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(v, 1, PGSIZE);
+80102e8b:	83 ec 04             	sub    $0x4,%esp
+80102e8e:	68 00 10 00 00       	push   $0x1000
+80102e93:	6a 01                	push   $0x1
+80102e95:	53                   	push   %ebx
+80102e96:	e8 c5 21 00 00       	call   80105060 <memset>
+
+  if(kmem.use_lock)
+80102e9b:	8b 15 74 40 11 80    	mov    0x80114074,%edx
+80102ea1:	83 c4 10             	add    $0x10,%esp
+80102ea4:	85 d2                	test   %edx,%edx
+80102ea6:	75 20                	jne    80102ec8 <kfree+0x68>
+    acquire(&kmem.lock);
+  r = (struct run*)v;
+  r->next = kmem.freelist;
+80102ea8:	a1 78 40 11 80       	mov    0x80114078,%eax
+80102ead:	89 03                	mov    %eax,(%ebx)
+  kmem.freelist = r;
+  if(kmem.use_lock)
+80102eaf:	a1 74 40 11 80       	mov    0x80114074,%eax
+  kmem.freelist = r;
+80102eb4:	89 1d 78 40 11 80    	mov    %ebx,0x80114078
+  if(kmem.use_lock)
+80102eba:	85 c0                	test   %eax,%eax
+80102ebc:	75 22                	jne    80102ee0 <kfree+0x80>
+    release(&kmem.lock);
+}
+80102ebe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102ec1:	c9                   	leave  
+80102ec2:	c3                   	ret    
+80102ec3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102ec7:	90                   	nop
+    acquire(&kmem.lock);
+80102ec8:	83 ec 0c             	sub    $0xc,%esp
+80102ecb:	68 40 40 11 80       	push   $0x80114040
+80102ed0:	e8 7b 20 00 00       	call   80104f50 <acquire>
+80102ed5:	83 c4 10             	add    $0x10,%esp
+80102ed8:	eb ce                	jmp    80102ea8 <kfree+0x48>
+80102eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    release(&kmem.lock);
+80102ee0:	c7 45 08 40 40 11 80 	movl   $0x80114040,0x8(%ebp)
+}
+80102ee7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102eea:	c9                   	leave  
+    release(&kmem.lock);
+80102eeb:	e9 20 21 00 00       	jmp    80105010 <release>
+    panic("kfree");
+80102ef0:	83 ec 0c             	sub    $0xc,%esp
+80102ef3:	68 3e 7e 10 80       	push   $0x80107e3e
+80102ef8:	e8 93 d4 ff ff       	call   80100390 <panic>
+80102efd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102f00 <freerange>:
+{
+80102f00:	f3 0f 1e fb          	endbr32 
+80102f04:	55                   	push   %ebp
+80102f05:	89 e5                	mov    %esp,%ebp
+80102f07:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f08:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102f0b:	8b 75 0c             	mov    0xc(%ebp),%esi
+80102f0e:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f0f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102f15:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f1b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102f21:	39 de                	cmp    %ebx,%esi
+80102f23:	72 1f                	jb     80102f44 <freerange+0x44>
+80102f25:	8d 76 00             	lea    0x0(%esi),%esi
+    kfree(p);
+80102f28:	83 ec 0c             	sub    $0xc,%esp
+80102f2b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f31:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102f37:	50                   	push   %eax
+80102f38:	e8 23 ff ff ff       	call   80102e60 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f3d:	83 c4 10             	add    $0x10,%esp
+80102f40:	39 f3                	cmp    %esi,%ebx
+80102f42:	76 e4                	jbe    80102f28 <freerange+0x28>
+}
+80102f44:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102f47:	5b                   	pop    %ebx
+80102f48:	5e                   	pop    %esi
+80102f49:	5d                   	pop    %ebp
+80102f4a:	c3                   	ret    
+80102f4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102f4f:	90                   	nop
+
+80102f50 <kinit1>:
+{
+80102f50:	f3 0f 1e fb          	endbr32 
+80102f54:	55                   	push   %ebp
+80102f55:	89 e5                	mov    %esp,%ebp
+80102f57:	56                   	push   %esi
+80102f58:	53                   	push   %ebx
+80102f59:	8b 75 0c             	mov    0xc(%ebp),%esi
+  initlock(&kmem.lock, "kmem");
+80102f5c:	83 ec 08             	sub    $0x8,%esp
+80102f5f:	68 44 7e 10 80       	push   $0x80107e44
+80102f64:	68 40 40 11 80       	push   $0x80114040
+80102f69:	e8 62 1e 00 00       	call   80104dd0 <initlock>
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f6e:	8b 45 08             	mov    0x8(%ebp),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f71:	83 c4 10             	add    $0x10,%esp
+  kmem.use_lock = 0;
+80102f74:	c7 05 74 40 11 80 00 	movl   $0x0,0x80114074
+80102f7b:	00 00 00 
+  p = (char*)PGROUNDUP((uint)vstart);
+80102f7e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102f84:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102f8a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102f90:	39 de                	cmp    %ebx,%esi
+80102f92:	72 20                	jb     80102fb4 <kinit1+0x64>
+80102f94:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    kfree(p);
+80102f98:	83 ec 0c             	sub    $0xc,%esp
+80102f9b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102fa1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102fa7:	50                   	push   %eax
+80102fa8:	e8 b3 fe ff ff       	call   80102e60 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102fad:	83 c4 10             	add    $0x10,%esp
+80102fb0:	39 de                	cmp    %ebx,%esi
+80102fb2:	73 e4                	jae    80102f98 <kinit1+0x48>
+}
+80102fb4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102fb7:	5b                   	pop    %ebx
+80102fb8:	5e                   	pop    %esi
+80102fb9:	5d                   	pop    %ebp
+80102fba:	c3                   	ret    
+80102fbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102fbf:	90                   	nop
+
+80102fc0 <kinit2>:
+{
+80102fc0:	f3 0f 1e fb          	endbr32 
+80102fc4:	55                   	push   %ebp
+80102fc5:	89 e5                	mov    %esp,%ebp
+80102fc7:	56                   	push   %esi
+  p = (char*)PGROUNDUP((uint)vstart);
+80102fc8:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80102fcb:	8b 75 0c             	mov    0xc(%ebp),%esi
+80102fce:	53                   	push   %ebx
+  p = (char*)PGROUNDUP((uint)vstart);
+80102fcf:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102fd5:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102fdb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102fe1:	39 de                	cmp    %ebx,%esi
+80102fe3:	72 1f                	jb     80103004 <kinit2+0x44>
+80102fe5:	8d 76 00             	lea    0x0(%esi),%esi
+    kfree(p);
+80102fe8:	83 ec 0c             	sub    $0xc,%esp
+80102feb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102ff1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    kfree(p);
+80102ff7:	50                   	push   %eax
+80102ff8:	e8 63 fe ff ff       	call   80102e60 <kfree>
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+80102ffd:	83 c4 10             	add    $0x10,%esp
+80103000:	39 de                	cmp    %ebx,%esi
+80103002:	73 e4                	jae    80102fe8 <kinit2+0x28>
+  kmem.use_lock = 1;
+80103004:	c7 05 74 40 11 80 01 	movl   $0x1,0x80114074
+8010300b:	00 00 00 
+}
+8010300e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103011:	5b                   	pop    %ebx
+80103012:	5e                   	pop    %esi
+80103013:	5d                   	pop    %ebp
+80103014:	c3                   	ret    
+80103015:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010301c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103020 <kalloc>:
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+char*
+kalloc(void)
+{
+80103020:	f3 0f 1e fb          	endbr32 
+  struct run *r;
+
+  if(kmem.use_lock)
+80103024:	a1 74 40 11 80       	mov    0x80114074,%eax
+80103029:	85 c0                	test   %eax,%eax
+8010302b:	75 1b                	jne    80103048 <kalloc+0x28>
+    acquire(&kmem.lock);
+  r = kmem.freelist;
+8010302d:	a1 78 40 11 80       	mov    0x80114078,%eax
+  if(r)
+80103032:	85 c0                	test   %eax,%eax
+80103034:	74 0a                	je     80103040 <kalloc+0x20>
+    kmem.freelist = r->next;
+80103036:	8b 10                	mov    (%eax),%edx
+80103038:	89 15 78 40 11 80    	mov    %edx,0x80114078
+  if(kmem.use_lock)
+8010303e:	c3                   	ret    
+8010303f:	90                   	nop
+    release(&kmem.lock);
+  return (char*)r;
+}
+80103040:	c3                   	ret    
+80103041:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+80103048:	55                   	push   %ebp
+80103049:	89 e5                	mov    %esp,%ebp
+8010304b:	83 ec 24             	sub    $0x24,%esp
+    acquire(&kmem.lock);
+8010304e:	68 40 40 11 80       	push   $0x80114040
+80103053:	e8 f8 1e 00 00       	call   80104f50 <acquire>
+  r = kmem.freelist;
+80103058:	a1 78 40 11 80       	mov    0x80114078,%eax
+  if(r)
+8010305d:	8b 15 74 40 11 80    	mov    0x80114074,%edx
+80103063:	83 c4 10             	add    $0x10,%esp
+80103066:	85 c0                	test   %eax,%eax
+80103068:	74 08                	je     80103072 <kalloc+0x52>
+    kmem.freelist = r->next;
+8010306a:	8b 08                	mov    (%eax),%ecx
+8010306c:	89 0d 78 40 11 80    	mov    %ecx,0x80114078
+  if(kmem.use_lock)
+80103072:	85 d2                	test   %edx,%edx
+80103074:	74 16                	je     8010308c <kalloc+0x6c>
+    release(&kmem.lock);
+80103076:	83 ec 0c             	sub    $0xc,%esp
+80103079:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010307c:	68 40 40 11 80       	push   $0x80114040
+80103081:	e8 8a 1f 00 00       	call   80105010 <release>
+  return (char*)r;
+80103086:	8b 45 f4             	mov    -0xc(%ebp),%eax
+    release(&kmem.lock);
+80103089:	83 c4 10             	add    $0x10,%esp
+}
+8010308c:	c9                   	leave  
+8010308d:	c3                   	ret    
+8010308e:	66 90                	xchg   %ax,%ax
+
+80103090 <kbdgetc>:
+#include "defs.h"
+#include "kbd.h"
+
+int
+kbdgetc(void)
+{
+80103090:	f3 0f 1e fb          	endbr32 
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103094:	ba 64 00 00 00       	mov    $0x64,%edx
+80103099:	ec                   	in     (%dx),%al
+    normalmap, shiftmap, ctlmap, ctlmap
+  };
+  uint st, data, c;
+
+  st = inb(KBSTATP);
+  if((st & KBS_DIB) == 0)
+8010309a:	a8 01                	test   $0x1,%al
+8010309c:	0f 84 be 00 00 00    	je     80103160 <kbdgetc+0xd0>
+{
+801030a2:	55                   	push   %ebp
+801030a3:	ba 60 00 00 00       	mov    $0x60,%edx
+801030a8:	89 e5                	mov    %esp,%ebp
+801030aa:	53                   	push   %ebx
+801030ab:	ec                   	in     (%dx),%al
+  return data;
+801030ac:	8b 1d b4 b5 10 80    	mov    0x8010b5b4,%ebx
+    return -1;
+  data = inb(KBDATAP);
+801030b2:	0f b6 d0             	movzbl %al,%edx
+
+  if(data == 0xE0){
+801030b5:	3c e0                	cmp    $0xe0,%al
+801030b7:	74 57                	je     80103110 <kbdgetc+0x80>
+    shift |= E0ESC;
+    return 0;
+  } else if(data & 0x80){
+801030b9:	89 d9                	mov    %ebx,%ecx
+801030bb:	83 e1 40             	and    $0x40,%ecx
+801030be:	84 c0                	test   %al,%al
+801030c0:	78 5e                	js     80103120 <kbdgetc+0x90>
+    // Key released
+    data = (shift & E0ESC ? data : data & 0x7F);
+    shift &= ~(shiftcode[data] | E0ESC);
+    return 0;
+  } else if(shift & E0ESC){
+801030c2:	85 c9                	test   %ecx,%ecx
+801030c4:	74 09                	je     801030cf <kbdgetc+0x3f>
+    // Last character was an E0 escape; or with 0x80
+    data |= 0x80;
+801030c6:	83 c8 80             	or     $0xffffff80,%eax
+    shift &= ~E0ESC;
+801030c9:	83 e3 bf             	and    $0xffffffbf,%ebx
+    data |= 0x80;
+801030cc:	0f b6 d0             	movzbl %al,%edx
+  }
+
+  shift |= shiftcode[data];
+801030cf:	0f b6 8a 80 7f 10 80 	movzbl -0x7fef8080(%edx),%ecx
+  shift ^= togglecode[data];
+801030d6:	0f b6 82 80 7e 10 80 	movzbl -0x7fef8180(%edx),%eax
+  shift |= shiftcode[data];
+801030dd:	09 d9                	or     %ebx,%ecx
+  shift ^= togglecode[data];
+801030df:	31 c1                	xor    %eax,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+801030e1:	89 c8                	mov    %ecx,%eax
+  shift ^= togglecode[data];
+801030e3:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
+  c = charcode[shift & (CTL | SHIFT)][data];
+801030e9:	83 e0 03             	and    $0x3,%eax
+  if(shift & CAPSLOCK){
+801030ec:	83 e1 08             	and    $0x8,%ecx
+  c = charcode[shift & (CTL | SHIFT)][data];
+801030ef:	8b 04 85 60 7e 10 80 	mov    -0x7fef81a0(,%eax,4),%eax
+801030f6:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+  if(shift & CAPSLOCK){
+801030fa:	74 0b                	je     80103107 <kbdgetc+0x77>
+    if('a' <= c && c <= 'z')
+801030fc:	8d 50 9f             	lea    -0x61(%eax),%edx
+801030ff:	83 fa 19             	cmp    $0x19,%edx
+80103102:	77 44                	ja     80103148 <kbdgetc+0xb8>
+      c += 'A' - 'a';
+80103104:	83 e8 20             	sub    $0x20,%eax
+    else if('A' <= c && c <= 'Z')
+      c += 'a' - 'A';
+  }
+  return c;
+}
+80103107:	5b                   	pop    %ebx
+80103108:	5d                   	pop    %ebp
+80103109:	c3                   	ret    
+8010310a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    shift |= E0ESC;
+80103110:	83 cb 40             	or     $0x40,%ebx
+    return 0;
+80103113:	31 c0                	xor    %eax,%eax
+    shift |= E0ESC;
+80103115:	89 1d b4 b5 10 80    	mov    %ebx,0x8010b5b4
+}
+8010311b:	5b                   	pop    %ebx
+8010311c:	5d                   	pop    %ebp
+8010311d:	c3                   	ret    
+8010311e:	66 90                	xchg   %ax,%ax
+    data = (shift & E0ESC ? data : data & 0x7F);
+80103120:	83 e0 7f             	and    $0x7f,%eax
+80103123:	85 c9                	test   %ecx,%ecx
+80103125:	0f 44 d0             	cmove  %eax,%edx
+    return 0;
+80103128:	31 c0                	xor    %eax,%eax
+    shift &= ~(shiftcode[data] | E0ESC);
+8010312a:	0f b6 8a 80 7f 10 80 	movzbl -0x7fef8080(%edx),%ecx
+80103131:	83 c9 40             	or     $0x40,%ecx
+80103134:	0f b6 c9             	movzbl %cl,%ecx
+80103137:	f7 d1                	not    %ecx
+80103139:	21 d9                	and    %ebx,%ecx
+}
+8010313b:	5b                   	pop    %ebx
+8010313c:	5d                   	pop    %ebp
+    shift &= ~(shiftcode[data] | E0ESC);
+8010313d:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
+}
+80103143:	c3                   	ret    
+80103144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    else if('A' <= c && c <= 'Z')
+80103148:	8d 48 bf             	lea    -0x41(%eax),%ecx
+      c += 'a' - 'A';
+8010314b:	8d 50 20             	lea    0x20(%eax),%edx
+}
+8010314e:	5b                   	pop    %ebx
+8010314f:	5d                   	pop    %ebp
+      c += 'a' - 'A';
+80103150:	83 f9 1a             	cmp    $0x1a,%ecx
+80103153:	0f 42 c2             	cmovb  %edx,%eax
+}
+80103156:	c3                   	ret    
+80103157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010315e:	66 90                	xchg   %ax,%ax
+    return -1;
+80103160:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80103165:	c3                   	ret    
+80103166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010316d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103170 <kbdintr>:
+
+void
+kbdintr(void)
+{
+80103170:	f3 0f 1e fb          	endbr32 
+80103174:	55                   	push   %ebp
+80103175:	89 e5                	mov    %esp,%ebp
+80103177:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(kbdgetc);
+8010317a:	68 90 30 10 80       	push   $0x80103090
+8010317f:	e8 ec da ff ff       	call   80100c70 <consoleintr>
+}
+80103184:	83 c4 10             	add    $0x10,%esp
+80103187:	c9                   	leave  
+80103188:	c3                   	ret    
+80103189:	66 90                	xchg   %ax,%ax
+8010318b:	66 90                	xchg   %ax,%ax
+8010318d:	66 90                	xchg   %ax,%ax
+8010318f:	90                   	nop
+
+80103190 <lapicinit>:
+  lapic[ID];  // wait for write to finish, by reading
+}
+
+void
+lapicinit(void)
+{
+80103190:	f3 0f 1e fb          	endbr32 
+  if(!lapic)
+80103194:	a1 7c 40 11 80       	mov    0x8011407c,%eax
+80103199:	85 c0                	test   %eax,%eax
+8010319b:	0f 84 c7 00 00 00    	je     80103268 <lapicinit+0xd8>
+  lapic[index] = value;
+801031a1:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+801031a8:	01 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031ab:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031ae:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+801031b5:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031b8:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031bb:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+801031c2:	00 02 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031c5:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031c8:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+801031cf:	96 98 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031d2:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031d5:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+801031dc:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031df:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+801031e2:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+801031e9:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+801031ec:	8b 50 20             	mov    0x20(%eax),%edx
+  lapicw(LINT0, MASKED);
+  lapicw(LINT1, MASKED);
+
+  // Disable performance counter overflow interrupts
+  // on machines that provide that interrupt entry.
+  if(((lapic[VER]>>16) & 0xFF) >= 4)
+801031ef:	8b 50 30             	mov    0x30(%eax),%edx
+801031f2:	c1 ea 10             	shr    $0x10,%edx
+801031f5:	81 e2 fc 00 00 00    	and    $0xfc,%edx
+801031fb:	75 73                	jne    80103270 <lapicinit+0xe0>
+  lapic[index] = value;
+801031fd:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80103204:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103207:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010320a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+80103211:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103214:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103217:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010321e:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103221:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103224:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+8010322b:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010322e:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103231:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+80103238:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010323b:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+8010323e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+80103245:	85 08 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103248:	8b 50 20             	mov    0x20(%eax),%edx
+8010324b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010324f:	90                   	nop
+  lapicw(EOI, 0);
+
+  // Send an Init Level De-Assert to synchronise arbitration ID's.
+  lapicw(ICRHI, 0);
+  lapicw(ICRLO, BCAST | INIT | LEVEL);
+  while(lapic[ICRLO] & DELIVS)
+80103250:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+80103256:	80 e6 10             	and    $0x10,%dh
+80103259:	75 f5                	jne    80103250 <lapicinit+0xc0>
+  lapic[index] = value;
+8010325b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+80103262:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103265:	8b 40 20             	mov    0x20(%eax),%eax
+    ;
+
+  // Enable interrupts on the APIC (but not on the processor).
+  lapicw(TPR, 0);
+}
+80103268:	c3                   	ret    
+80103269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  lapic[index] = value;
+80103270:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80103277:	00 01 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010327a:	8b 50 20             	mov    0x20(%eax),%edx
+}
+8010327d:	e9 7b ff ff ff       	jmp    801031fd <lapicinit+0x6d>
+80103282:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103290 <lapicid>:
+
+int
+lapicid(void)
+{
+80103290:	f3 0f 1e fb          	endbr32 
+  if (!lapic)
+80103294:	a1 7c 40 11 80       	mov    0x8011407c,%eax
+80103299:	85 c0                	test   %eax,%eax
+8010329b:	74 0b                	je     801032a8 <lapicid+0x18>
+    return 0;
+  return lapic[ID] >> 24;
+8010329d:	8b 40 20             	mov    0x20(%eax),%eax
+801032a0:	c1 e8 18             	shr    $0x18,%eax
+801032a3:	c3                   	ret    
+801032a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return 0;
+801032a8:	31 c0                	xor    %eax,%eax
+}
+801032aa:	c3                   	ret    
+801032ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801032af:	90                   	nop
+
+801032b0 <lapiceoi>:
+
+// Acknowledge interrupt.
+void
+lapiceoi(void)
+{
+801032b0:	f3 0f 1e fb          	endbr32 
+  if(lapic)
+801032b4:	a1 7c 40 11 80       	mov    0x8011407c,%eax
+801032b9:	85 c0                	test   %eax,%eax
+801032bb:	74 0d                	je     801032ca <lapiceoi+0x1a>
+  lapic[index] = value;
+801032bd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801032c4:	00 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+801032c7:	8b 40 20             	mov    0x20(%eax),%eax
+    lapicw(EOI, 0);
+}
+801032ca:	c3                   	ret    
+801032cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801032cf:	90                   	nop
+
+801032d0 <microdelay>:
+
+// Spin for a given number of microseconds.
+// On real hardware would want to tune this dynamically.
+void
+microdelay(int us)
+{
+801032d0:	f3 0f 1e fb          	endbr32 
+}
+801032d4:	c3                   	ret    
+801032d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801032dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801032e0 <lapicstartap>:
+
+// Start additional processor running entry code at addr.
+// See Appendix B of MultiProcessor Specification.
+void
+lapicstartap(uchar apicid, uint addr)
+{
+801032e0:	f3 0f 1e fb          	endbr32 
+801032e4:	55                   	push   %ebp
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801032e5:	b8 0f 00 00 00       	mov    $0xf,%eax
+801032ea:	ba 70 00 00 00       	mov    $0x70,%edx
+801032ef:	89 e5                	mov    %esp,%ebp
+801032f1:	53                   	push   %ebx
+801032f2:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801032f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801032f8:	ee                   	out    %al,(%dx)
+801032f9:	b8 0a 00 00 00       	mov    $0xa,%eax
+801032fe:	ba 71 00 00 00       	mov    $0x71,%edx
+80103303:	ee                   	out    %al,(%dx)
+  // and the warm reset vector (DWORD based at 40:67) to point at
+  // the AP startup code prior to the [universal startup algorithm]."
+  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
+  outb(CMOS_PORT+1, 0x0A);
+  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
+  wrv[0] = 0;
+80103304:	31 c0                	xor    %eax,%eax
+  wrv[1] = addr >> 4;
+
+  // "Universal startup algorithm."
+  // Send INIT (level-triggered) interrupt to reset other CPU.
+  lapicw(ICRHI, apicid<<24);
+80103306:	c1 e3 18             	shl    $0x18,%ebx
+  wrv[0] = 0;
+80103309:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+  wrv[1] = addr >> 4;
+8010330f:	89 c8                	mov    %ecx,%eax
+  // when it is in the halted state due to an INIT.  So the second
+  // should be ignored, but it is part of the official Intel algorithm.
+  // Bochs complains about the second one.  Too bad for Bochs.
+  for(i = 0; i < 2; i++){
+    lapicw(ICRHI, apicid<<24);
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80103311:	c1 e9 0c             	shr    $0xc,%ecx
+  lapicw(ICRHI, apicid<<24);
+80103314:	89 da                	mov    %ebx,%edx
+  wrv[1] = addr >> 4;
+80103316:	c1 e8 04             	shr    $0x4,%eax
+    lapicw(ICRLO, STARTUP | (addr>>12));
+80103319:	80 cd 06             	or     $0x6,%ch
+  wrv[1] = addr >> 4;
+8010331c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+  lapic[index] = value;
+80103322:	a1 7c 40 11 80       	mov    0x8011407c,%eax
+80103327:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+8010332d:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80103330:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80103337:	c5 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+8010333a:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+8010333d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+80103344:	85 00 00 
+  lapic[ID];  // wait for write to finish, by reading
+80103347:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+8010334a:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80103350:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+80103353:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80103359:	8b 58 20             	mov    0x20(%eax),%ebx
+  lapic[index] = value;
+8010335c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+  lapic[ID];  // wait for write to finish, by reading
+80103362:	8b 50 20             	mov    0x20(%eax),%edx
+  lapic[index] = value;
+80103365:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+    microdelay(200);
+  }
+}
+8010336b:	5b                   	pop    %ebx
+  lapic[ID];  // wait for write to finish, by reading
+8010336c:	8b 40 20             	mov    0x20(%eax),%eax
+}
+8010336f:	5d                   	pop    %ebp
+80103370:	c3                   	ret    
+80103371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103378:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010337f:	90                   	nop
+
+80103380 <cmostime>:
+}
+
+// qemu seems to use 24-hour GWT and the values are BCD encoded
+void
+cmostime(struct rtcdate *r)
+{
+80103380:	f3 0f 1e fb          	endbr32 
+80103384:	55                   	push   %ebp
+80103385:	b8 0b 00 00 00       	mov    $0xb,%eax
+8010338a:	ba 70 00 00 00       	mov    $0x70,%edx
+8010338f:	89 e5                	mov    %esp,%ebp
+80103391:	57                   	push   %edi
+80103392:	56                   	push   %esi
+80103393:	53                   	push   %ebx
+80103394:	83 ec 4c             	sub    $0x4c,%esp
+80103397:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103398:	ba 71 00 00 00       	mov    $0x71,%edx
+8010339d:	ec                   	in     (%dx),%al
+  struct rtcdate t1, t2;
+  int sb, bcd;
+
+  sb = cmos_read(CMOS_STATB);
+
+  bcd = (sb & (1 << 2)) == 0;
+8010339e:	83 e0 04             	and    $0x4,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033a1:	bb 70 00 00 00       	mov    $0x70,%ebx
+801033a6:	88 45 b3             	mov    %al,-0x4d(%ebp)
+801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033b0:	31 c0                	xor    %eax,%eax
+801033b2:	89 da                	mov    %ebx,%edx
+801033b4:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033b5:	b9 71 00 00 00       	mov    $0x71,%ecx
+801033ba:	89 ca                	mov    %ecx,%edx
+801033bc:	ec                   	in     (%dx),%al
+801033bd:	88 45 b7             	mov    %al,-0x49(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033c0:	89 da                	mov    %ebx,%edx
+801033c2:	b8 02 00 00 00       	mov    $0x2,%eax
+801033c7:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033c8:	89 ca                	mov    %ecx,%edx
+801033ca:	ec                   	in     (%dx),%al
+801033cb:	88 45 b6             	mov    %al,-0x4a(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033ce:	89 da                	mov    %ebx,%edx
+801033d0:	b8 04 00 00 00       	mov    $0x4,%eax
+801033d5:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033d6:	89 ca                	mov    %ecx,%edx
+801033d8:	ec                   	in     (%dx),%al
+801033d9:	88 45 b5             	mov    %al,-0x4b(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033dc:	89 da                	mov    %ebx,%edx
+801033de:	b8 07 00 00 00       	mov    $0x7,%eax
+801033e3:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033e4:	89 ca                	mov    %ecx,%edx
+801033e6:	ec                   	in     (%dx),%al
+801033e7:	88 45 b4             	mov    %al,-0x4c(%ebp)
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033ea:	89 da                	mov    %ebx,%edx
+801033ec:	b8 08 00 00 00       	mov    $0x8,%eax
+801033f1:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033f2:	89 ca                	mov    %ecx,%edx
+801033f4:	ec                   	in     (%dx),%al
+801033f5:	89 c7                	mov    %eax,%edi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801033f7:	89 da                	mov    %ebx,%edx
+801033f9:	b8 09 00 00 00       	mov    $0x9,%eax
+801033fe:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+801033ff:	89 ca                	mov    %ecx,%edx
+80103401:	ec                   	in     (%dx),%al
+80103402:	89 c6                	mov    %eax,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103404:	89 da                	mov    %ebx,%edx
+80103406:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010340b:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010340c:	89 ca                	mov    %ecx,%edx
+8010340e:	ec                   	in     (%dx),%al
+
+  // make sure CMOS doesn't modify time while we read it
+  for(;;) {
+    fill_rtcdate(&t1);
+    if(cmos_read(CMOS_STATA) & CMOS_UIP)
+8010340f:	84 c0                	test   %al,%al
+80103411:	78 9d                	js     801033b0 <cmostime+0x30>
+  return inb(CMOS_RETURN);
+80103413:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+80103417:	89 fa                	mov    %edi,%edx
+80103419:	0f b6 fa             	movzbl %dl,%edi
+8010341c:	89 f2                	mov    %esi,%edx
+8010341e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80103421:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80103425:	0f b6 f2             	movzbl %dl,%esi
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103428:	89 da                	mov    %ebx,%edx
+8010342a:	89 7d c8             	mov    %edi,-0x38(%ebp)
+8010342d:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80103430:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+80103434:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80103437:	89 45 c0             	mov    %eax,-0x40(%ebp)
+8010343a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+8010343e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80103441:	31 c0                	xor    %eax,%eax
+80103443:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103444:	89 ca                	mov    %ecx,%edx
+80103446:	ec                   	in     (%dx),%al
+80103447:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010344a:	89 da                	mov    %ebx,%edx
+8010344c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+8010344f:	b8 02 00 00 00       	mov    $0x2,%eax
+80103454:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103455:	89 ca                	mov    %ecx,%edx
+80103457:	ec                   	in     (%dx),%al
+80103458:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010345b:	89 da                	mov    %ebx,%edx
+8010345d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80103460:	b8 04 00 00 00       	mov    $0x4,%eax
+80103465:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103466:	89 ca                	mov    %ecx,%edx
+80103468:	ec                   	in     (%dx),%al
+80103469:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010346c:	89 da                	mov    %ebx,%edx
+8010346e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80103471:	b8 07 00 00 00       	mov    $0x7,%eax
+80103476:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103477:	89 ca                	mov    %ecx,%edx
+80103479:	ec                   	in     (%dx),%al
+8010347a:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010347d:	89 da                	mov    %ebx,%edx
+8010347f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80103482:	b8 08 00 00 00       	mov    $0x8,%eax
+80103487:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103488:	89 ca                	mov    %ecx,%edx
+8010348a:	ec                   	in     (%dx),%al
+8010348b:	0f b6 c0             	movzbl %al,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+8010348e:	89 da                	mov    %ebx,%edx
+80103490:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80103493:	b8 09 00 00 00       	mov    $0x9,%eax
+80103498:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103499:	89 ca                	mov    %ecx,%edx
+8010349b:	ec                   	in     (%dx),%al
+8010349c:	0f b6 c0             	movzbl %al,%eax
+        continue;
+    fill_rtcdate(&t2);
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+8010349f:	83 ec 04             	sub    $0x4,%esp
+  return inb(CMOS_RETURN);
+801034a2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
+801034a5:	8d 45 d0             	lea    -0x30(%ebp),%eax
+801034a8:	6a 18                	push   $0x18
+801034aa:	50                   	push   %eax
+801034ab:	8d 45 b8             	lea    -0x48(%ebp),%eax
+801034ae:	50                   	push   %eax
+801034af:	e8 fc 1b 00 00       	call   801050b0 <memcmp>
+801034b4:	83 c4 10             	add    $0x10,%esp
+801034b7:	85 c0                	test   %eax,%eax
+801034b9:	0f 85 f1 fe ff ff    	jne    801033b0 <cmostime+0x30>
+      break;
+  }
+
+  // convert
+  if(bcd) {
+801034bf:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+801034c3:	75 78                	jne    8010353d <cmostime+0x1bd>
+#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
+    CONV(second);
+801034c5:	8b 45 b8             	mov    -0x48(%ebp),%eax
+801034c8:	89 c2                	mov    %eax,%edx
+801034ca:	83 e0 0f             	and    $0xf,%eax
+801034cd:	c1 ea 04             	shr    $0x4,%edx
+801034d0:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801034d3:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801034d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
+    CONV(minute);
+801034d9:	8b 45 bc             	mov    -0x44(%ebp),%eax
+801034dc:	89 c2                	mov    %eax,%edx
+801034de:	83 e0 0f             	and    $0xf,%eax
+801034e1:	c1 ea 04             	shr    $0x4,%edx
+801034e4:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801034e7:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801034ea:	89 45 bc             	mov    %eax,-0x44(%ebp)
+    CONV(hour  );
+801034ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
+801034f0:	89 c2                	mov    %eax,%edx
+801034f2:	83 e0 0f             	and    $0xf,%eax
+801034f5:	c1 ea 04             	shr    $0x4,%edx
+801034f8:	8d 14 92             	lea    (%edx,%edx,4),%edx
+801034fb:	8d 04 50             	lea    (%eax,%edx,2),%eax
+801034fe:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    CONV(day   );
+80103501:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80103504:	89 c2                	mov    %eax,%edx
+80103506:	83 e0 0f             	and    $0xf,%eax
+80103509:	c1 ea 04             	shr    $0x4,%edx
+8010350c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+8010350f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80103512:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+    CONV(month );
+80103515:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80103518:	89 c2                	mov    %eax,%edx
+8010351a:	83 e0 0f             	and    $0xf,%eax
+8010351d:	c1 ea 04             	shr    $0x4,%edx
+80103520:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80103523:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80103526:	89 45 c8             	mov    %eax,-0x38(%ebp)
+    CONV(year  );
+80103529:	8b 45 cc             	mov    -0x34(%ebp),%eax
+8010352c:	89 c2                	mov    %eax,%edx
+8010352e:	83 e0 0f             	and    $0xf,%eax
+80103531:	c1 ea 04             	shr    $0x4,%edx
+80103534:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80103537:	8d 04 50             	lea    (%eax,%edx,2),%eax
+8010353a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+#undef     CONV
+  }
+
+  *r = t1;
+8010353d:	8b 75 08             	mov    0x8(%ebp),%esi
+80103540:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80103543:	89 06                	mov    %eax,(%esi)
+80103545:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80103548:	89 46 04             	mov    %eax,0x4(%esi)
+8010354b:	8b 45 c0             	mov    -0x40(%ebp),%eax
+8010354e:	89 46 08             	mov    %eax,0x8(%esi)
+80103551:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80103554:	89 46 0c             	mov    %eax,0xc(%esi)
+80103557:	8b 45 c8             	mov    -0x38(%ebp),%eax
+8010355a:	89 46 10             	mov    %eax,0x10(%esi)
+8010355d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80103560:	89 46 14             	mov    %eax,0x14(%esi)
+  r->year += 2000;
+80103563:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+}
+8010356a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010356d:	5b                   	pop    %ebx
+8010356e:	5e                   	pop    %esi
+8010356f:	5f                   	pop    %edi
+80103570:	5d                   	pop    %ebp
+80103571:	c3                   	ret    
+80103572:	66 90                	xchg   %ax,%ax
+80103574:	66 90                	xchg   %ax,%ax
+80103576:	66 90                	xchg   %ax,%ax
+80103578:	66 90                	xchg   %ax,%ax
+8010357a:	66 90                	xchg   %ax,%ax
+8010357c:	66 90                	xchg   %ax,%ax
+8010357e:	66 90                	xchg   %ax,%ax
+
+80103580 <install_trans>:
+static void
+install_trans(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103580:	8b 0d c8 40 11 80    	mov    0x801140c8,%ecx
+80103586:	85 c9                	test   %ecx,%ecx
+80103588:	0f 8e 8a 00 00 00    	jle    80103618 <install_trans+0x98>
+{
+8010358e:	55                   	push   %ebp
+8010358f:	89 e5                	mov    %esp,%ebp
+80103591:	57                   	push   %edi
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103592:	31 ff                	xor    %edi,%edi
+{
+80103594:	56                   	push   %esi
+80103595:	53                   	push   %ebx
+80103596:	83 ec 0c             	sub    $0xc,%esp
+80103599:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+801035a0:	a1 b4 40 11 80       	mov    0x801140b4,%eax
+801035a5:	83 ec 08             	sub    $0x8,%esp
+801035a8:	01 f8                	add    %edi,%eax
+801035aa:	83 c0 01             	add    $0x1,%eax
+801035ad:	50                   	push   %eax
+801035ae:	ff 35 c4 40 11 80    	pushl  0x801140c4
+801035b4:	e8 17 cb ff ff       	call   801000d0 <bread>
+801035b9:	89 c6                	mov    %eax,%esi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801035bb:	58                   	pop    %eax
+801035bc:	5a                   	pop    %edx
+801035bd:	ff 34 bd cc 40 11 80 	pushl  -0x7feebf34(,%edi,4)
+801035c4:	ff 35 c4 40 11 80    	pushl  0x801140c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+801035ca:	83 c7 01             	add    $0x1,%edi
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801035cd:	e8 fe ca ff ff       	call   801000d0 <bread>
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+801035d2:	83 c4 0c             	add    $0xc,%esp
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+801035d5:	89 c3                	mov    %eax,%ebx
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+801035d7:	8d 46 5c             	lea    0x5c(%esi),%eax
+801035da:	68 00 02 00 00       	push   $0x200
+801035df:	50                   	push   %eax
+801035e0:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801035e3:	50                   	push   %eax
+801035e4:	e8 17 1b 00 00       	call   80105100 <memmove>
+    bwrite(dbuf);  // write dst to disk
+801035e9:	89 1c 24             	mov    %ebx,(%esp)
+801035ec:	e8 bf cb ff ff       	call   801001b0 <bwrite>
+    brelse(lbuf);
+801035f1:	89 34 24             	mov    %esi,(%esp)
+801035f4:	e8 f7 cb ff ff       	call   801001f0 <brelse>
+    brelse(dbuf);
+801035f9:	89 1c 24             	mov    %ebx,(%esp)
+801035fc:	e8 ef cb ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103601:	83 c4 10             	add    $0x10,%esp
+80103604:	39 3d c8 40 11 80    	cmp    %edi,0x801140c8
+8010360a:	7f 94                	jg     801035a0 <install_trans+0x20>
+  }
+}
+8010360c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010360f:	5b                   	pop    %ebx
+80103610:	5e                   	pop    %esi
+80103611:	5f                   	pop    %edi
+80103612:	5d                   	pop    %ebp
+80103613:	c3                   	ret    
+80103614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103618:	c3                   	ret    
+80103619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103620 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+80103620:	55                   	push   %ebp
+80103621:	89 e5                	mov    %esp,%ebp
+80103623:	53                   	push   %ebx
+80103624:	83 ec 0c             	sub    $0xc,%esp
+  struct buf *buf = bread(log.dev, log.start);
+80103627:	ff 35 b4 40 11 80    	pushl  0x801140b4
+8010362d:	ff 35 c4 40 11 80    	pushl  0x801140c4
+80103633:	e8 98 ca ff ff       	call   801000d0 <bread>
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+80103638:	83 c4 10             	add    $0x10,%esp
+  struct buf *buf = bread(log.dev, log.start);
+8010363b:	89 c3                	mov    %eax,%ebx
+  hb->n = log.lh.n;
+8010363d:	a1 c8 40 11 80       	mov    0x801140c8,%eax
+80103642:	89 43 5c             	mov    %eax,0x5c(%ebx)
+  for (i = 0; i < log.lh.n; i++) {
+80103645:	85 c0                	test   %eax,%eax
+80103647:	7e 19                	jle    80103662 <write_head+0x42>
+80103649:	31 d2                	xor    %edx,%edx
+8010364b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010364f:	90                   	nop
+    hb->block[i] = log.lh.block[i];
+80103650:	8b 0c 95 cc 40 11 80 	mov    -0x7feebf34(,%edx,4),%ecx
+80103657:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+8010365b:	83 c2 01             	add    $0x1,%edx
+8010365e:	39 d0                	cmp    %edx,%eax
+80103660:	75 ee                	jne    80103650 <write_head+0x30>
+  }
+  bwrite(buf);
+80103662:	83 ec 0c             	sub    $0xc,%esp
+80103665:	53                   	push   %ebx
+80103666:	e8 45 cb ff ff       	call   801001b0 <bwrite>
+  brelse(buf);
+8010366b:	89 1c 24             	mov    %ebx,(%esp)
+8010366e:	e8 7d cb ff ff       	call   801001f0 <brelse>
+}
+80103673:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103676:	83 c4 10             	add    $0x10,%esp
+80103679:	c9                   	leave  
+8010367a:	c3                   	ret    
+8010367b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010367f:	90                   	nop
+
+80103680 <initlog>:
+{
+80103680:	f3 0f 1e fb          	endbr32 
+80103684:	55                   	push   %ebp
+80103685:	89 e5                	mov    %esp,%ebp
+80103687:	53                   	push   %ebx
+80103688:	83 ec 2c             	sub    $0x2c,%esp
+8010368b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&log.lock, "log");
+8010368e:	68 80 80 10 80       	push   $0x80108080
+80103693:	68 80 40 11 80       	push   $0x80114080
+80103698:	e8 33 17 00 00       	call   80104dd0 <initlock>
+  readsb(dev, &sb);
+8010369d:	58                   	pop    %eax
+8010369e:	8d 45 dc             	lea    -0x24(%ebp),%eax
+801036a1:	5a                   	pop    %edx
+801036a2:	50                   	push   %eax
+801036a3:	53                   	push   %ebx
+801036a4:	e8 47 e8 ff ff       	call   80101ef0 <readsb>
+  log.start = sb.logstart;
+801036a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
+  struct buf *buf = bread(log.dev, log.start);
+801036ac:	59                   	pop    %ecx
+  log.dev = dev;
+801036ad:	89 1d c4 40 11 80    	mov    %ebx,0x801140c4
+  log.size = sb.nlog;
+801036b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
+  log.start = sb.logstart;
+801036b6:	a3 b4 40 11 80       	mov    %eax,0x801140b4
+  log.size = sb.nlog;
+801036bb:	89 15 b8 40 11 80    	mov    %edx,0x801140b8
+  struct buf *buf = bread(log.dev, log.start);
+801036c1:	5a                   	pop    %edx
+801036c2:	50                   	push   %eax
+801036c3:	53                   	push   %ebx
+801036c4:	e8 07 ca ff ff       	call   801000d0 <bread>
+  for (i = 0; i < log.lh.n; i++) {
+801036c9:	83 c4 10             	add    $0x10,%esp
+  log.lh.n = lh->n;
+801036cc:	8b 48 5c             	mov    0x5c(%eax),%ecx
+801036cf:	89 0d c8 40 11 80    	mov    %ecx,0x801140c8
+  for (i = 0; i < log.lh.n; i++) {
+801036d5:	85 c9                	test   %ecx,%ecx
+801036d7:	7e 19                	jle    801036f2 <initlog+0x72>
+801036d9:	31 d2                	xor    %edx,%edx
+801036db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801036df:	90                   	nop
+    log.lh.block[i] = lh->block[i];
+801036e0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
+801036e4:	89 1c 95 cc 40 11 80 	mov    %ebx,-0x7feebf34(,%edx,4)
+  for (i = 0; i < log.lh.n; i++) {
+801036eb:	83 c2 01             	add    $0x1,%edx
+801036ee:	39 d1                	cmp    %edx,%ecx
+801036f0:	75 ee                	jne    801036e0 <initlog+0x60>
+  brelse(buf);
+801036f2:	83 ec 0c             	sub    $0xc,%esp
+801036f5:	50                   	push   %eax
+801036f6:	e8 f5 ca ff ff       	call   801001f0 <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(); // if committed, copy from log to disk
+801036fb:	e8 80 fe ff ff       	call   80103580 <install_trans>
+  log.lh.n = 0;
+80103700:	c7 05 c8 40 11 80 00 	movl   $0x0,0x801140c8
+80103707:	00 00 00 
+  write_head(); // clear the log
+8010370a:	e8 11 ff ff ff       	call   80103620 <write_head>
+}
+8010370f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103712:	83 c4 10             	add    $0x10,%esp
+80103715:	c9                   	leave  
+80103716:	c3                   	ret    
+80103717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010371e:	66 90                	xchg   %ax,%ax
+
+80103720 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+80103720:	f3 0f 1e fb          	endbr32 
+80103724:	55                   	push   %ebp
+80103725:	89 e5                	mov    %esp,%ebp
+80103727:	83 ec 14             	sub    $0x14,%esp
+  acquire(&log.lock);
+8010372a:	68 80 40 11 80       	push   $0x80114080
+8010372f:	e8 1c 18 00 00       	call   80104f50 <acquire>
+80103734:	83 c4 10             	add    $0x10,%esp
+80103737:	eb 1c                	jmp    80103755 <begin_op+0x35>
+80103739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+80103740:	83 ec 08             	sub    $0x8,%esp
+80103743:	68 80 40 11 80       	push   $0x80114080
+80103748:	68 80 40 11 80       	push   $0x80114080
+8010374d:	e8 be 11 00 00       	call   80104910 <sleep>
+80103752:	83 c4 10             	add    $0x10,%esp
+    if(log.committing){
+80103755:	a1 c0 40 11 80       	mov    0x801140c0,%eax
+8010375a:	85 c0                	test   %eax,%eax
+8010375c:	75 e2                	jne    80103740 <begin_op+0x20>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+8010375e:	a1 bc 40 11 80       	mov    0x801140bc,%eax
+80103763:	8b 15 c8 40 11 80    	mov    0x801140c8,%edx
+80103769:	83 c0 01             	add    $0x1,%eax
+8010376c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+8010376f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80103772:	83 fa 1e             	cmp    $0x1e,%edx
+80103775:	7f c9                	jg     80103740 <begin_op+0x20>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+80103777:	83 ec 0c             	sub    $0xc,%esp
+      log.outstanding += 1;
+8010377a:	a3 bc 40 11 80       	mov    %eax,0x801140bc
+      release(&log.lock);
+8010377f:	68 80 40 11 80       	push   $0x80114080
+80103784:	e8 87 18 00 00       	call   80105010 <release>
+      break;
+    }
+  }
+}
+80103789:	83 c4 10             	add    $0x10,%esp
+8010378c:	c9                   	leave  
+8010378d:	c3                   	ret    
+8010378e:	66 90                	xchg   %ax,%ax
+
+80103790 <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+80103790:	f3 0f 1e fb          	endbr32 
+80103794:	55                   	push   %ebp
+80103795:	89 e5                	mov    %esp,%ebp
+80103797:	57                   	push   %edi
+80103798:	56                   	push   %esi
+80103799:	53                   	push   %ebx
+8010379a:	83 ec 18             	sub    $0x18,%esp
+  int do_commit = 0;
+
+  acquire(&log.lock);
+8010379d:	68 80 40 11 80       	push   $0x80114080
+801037a2:	e8 a9 17 00 00       	call   80104f50 <acquire>
+  log.outstanding -= 1;
+801037a7:	a1 bc 40 11 80       	mov    0x801140bc,%eax
+  if(log.committing)
+801037ac:	8b 35 c0 40 11 80    	mov    0x801140c0,%esi
+801037b2:	83 c4 10             	add    $0x10,%esp
+  log.outstanding -= 1;
+801037b5:	8d 58 ff             	lea    -0x1(%eax),%ebx
+801037b8:	89 1d bc 40 11 80    	mov    %ebx,0x801140bc
+  if(log.committing)
+801037be:	85 f6                	test   %esi,%esi
+801037c0:	0f 85 1e 01 00 00    	jne    801038e4 <end_op+0x154>
+    panic("log.committing");
+  if(log.outstanding == 0){
+801037c6:	85 db                	test   %ebx,%ebx
+801037c8:	0f 85 f2 00 00 00    	jne    801038c0 <end_op+0x130>
+    do_commit = 1;
+    log.committing = 1;
+801037ce:	c7 05 c0 40 11 80 01 	movl   $0x1,0x801140c0
+801037d5:	00 00 00 
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+801037d8:	83 ec 0c             	sub    $0xc,%esp
+801037db:	68 80 40 11 80       	push   $0x80114080
+801037e0:	e8 2b 18 00 00       	call   80105010 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+801037e5:	8b 0d c8 40 11 80    	mov    0x801140c8,%ecx
+801037eb:	83 c4 10             	add    $0x10,%esp
+801037ee:	85 c9                	test   %ecx,%ecx
+801037f0:	7f 3e                	jg     80103830 <end_op+0xa0>
+    acquire(&log.lock);
+801037f2:	83 ec 0c             	sub    $0xc,%esp
+801037f5:	68 80 40 11 80       	push   $0x80114080
+801037fa:	e8 51 17 00 00       	call   80104f50 <acquire>
+    wakeup(&log);
+801037ff:	c7 04 24 80 40 11 80 	movl   $0x80114080,(%esp)
+    log.committing = 0;
+80103806:	c7 05 c0 40 11 80 00 	movl   $0x0,0x801140c0
+8010380d:	00 00 00 
+    wakeup(&log);
+80103810:	e8 bb 12 00 00       	call   80104ad0 <wakeup>
+    release(&log.lock);
+80103815:	c7 04 24 80 40 11 80 	movl   $0x80114080,(%esp)
+8010381c:	e8 ef 17 00 00       	call   80105010 <release>
+80103821:	83 c4 10             	add    $0x10,%esp
+}
+80103824:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103827:	5b                   	pop    %ebx
+80103828:	5e                   	pop    %esi
+80103829:	5f                   	pop    %edi
+8010382a:	5d                   	pop    %ebp
+8010382b:	c3                   	ret    
+8010382c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+80103830:	a1 b4 40 11 80       	mov    0x801140b4,%eax
+80103835:	83 ec 08             	sub    $0x8,%esp
+80103838:	01 d8                	add    %ebx,%eax
+8010383a:	83 c0 01             	add    $0x1,%eax
+8010383d:	50                   	push   %eax
+8010383e:	ff 35 c4 40 11 80    	pushl  0x801140c4
+80103844:	e8 87 c8 ff ff       	call   801000d0 <bread>
+80103849:	89 c6                	mov    %eax,%esi
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+8010384b:	58                   	pop    %eax
+8010384c:	5a                   	pop    %edx
+8010384d:	ff 34 9d cc 40 11 80 	pushl  -0x7feebf34(,%ebx,4)
+80103854:	ff 35 c4 40 11 80    	pushl  0x801140c4
+  for (tail = 0; tail < log.lh.n; tail++) {
+8010385a:	83 c3 01             	add    $0x1,%ebx
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+8010385d:	e8 6e c8 ff ff       	call   801000d0 <bread>
+    memmove(to->data, from->data, BSIZE);
+80103862:	83 c4 0c             	add    $0xc,%esp
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+80103865:	89 c7                	mov    %eax,%edi
+    memmove(to->data, from->data, BSIZE);
+80103867:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010386a:	68 00 02 00 00       	push   $0x200
+8010386f:	50                   	push   %eax
+80103870:	8d 46 5c             	lea    0x5c(%esi),%eax
+80103873:	50                   	push   %eax
+80103874:	e8 87 18 00 00       	call   80105100 <memmove>
+    bwrite(to);  // write the log
+80103879:	89 34 24             	mov    %esi,(%esp)
+8010387c:	e8 2f c9 ff ff       	call   801001b0 <bwrite>
+    brelse(from);
+80103881:	89 3c 24             	mov    %edi,(%esp)
+80103884:	e8 67 c9 ff ff       	call   801001f0 <brelse>
+    brelse(to);
+80103889:	89 34 24             	mov    %esi,(%esp)
+8010388c:	e8 5f c9 ff ff       	call   801001f0 <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+80103891:	83 c4 10             	add    $0x10,%esp
+80103894:	3b 1d c8 40 11 80    	cmp    0x801140c8,%ebx
+8010389a:	7c 94                	jl     80103830 <end_op+0xa0>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+8010389c:	e8 7f fd ff ff       	call   80103620 <write_head>
+    install_trans(); // Now install writes to home locations
+801038a1:	e8 da fc ff ff       	call   80103580 <install_trans>
+    log.lh.n = 0;
+801038a6:	c7 05 c8 40 11 80 00 	movl   $0x0,0x801140c8
+801038ad:	00 00 00 
+    write_head();    // Erase the transaction from the log
+801038b0:	e8 6b fd ff ff       	call   80103620 <write_head>
+801038b5:	e9 38 ff ff ff       	jmp    801037f2 <end_op+0x62>
+801038ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    wakeup(&log);
+801038c0:	83 ec 0c             	sub    $0xc,%esp
+801038c3:	68 80 40 11 80       	push   $0x80114080
+801038c8:	e8 03 12 00 00       	call   80104ad0 <wakeup>
+  release(&log.lock);
+801038cd:	c7 04 24 80 40 11 80 	movl   $0x80114080,(%esp)
+801038d4:	e8 37 17 00 00       	call   80105010 <release>
+801038d9:	83 c4 10             	add    $0x10,%esp
+}
+801038dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801038df:	5b                   	pop    %ebx
+801038e0:	5e                   	pop    %esi
+801038e1:	5f                   	pop    %edi
+801038e2:	5d                   	pop    %ebp
+801038e3:	c3                   	ret    
+    panic("log.committing");
+801038e4:	83 ec 0c             	sub    $0xc,%esp
+801038e7:	68 84 80 10 80       	push   $0x80108084
+801038ec:	e8 9f ca ff ff       	call   80100390 <panic>
+801038f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038ff:	90                   	nop
+
+80103900 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+80103900:	f3 0f 1e fb          	endbr32 
+80103904:	55                   	push   %ebp
+80103905:	89 e5                	mov    %esp,%ebp
+80103907:	53                   	push   %ebx
+80103908:	83 ec 04             	sub    $0x4,%esp
+  int i;
+
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+8010390b:	8b 15 c8 40 11 80    	mov    0x801140c8,%edx
+{
+80103911:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+80103914:	83 fa 1d             	cmp    $0x1d,%edx
+80103917:	0f 8f 91 00 00 00    	jg     801039ae <log_write+0xae>
+8010391d:	a1 b8 40 11 80       	mov    0x801140b8,%eax
+80103922:	83 e8 01             	sub    $0x1,%eax
+80103925:	39 c2                	cmp    %eax,%edx
+80103927:	0f 8d 81 00 00 00    	jge    801039ae <log_write+0xae>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+8010392d:	a1 bc 40 11 80       	mov    0x801140bc,%eax
+80103932:	85 c0                	test   %eax,%eax
+80103934:	0f 8e 81 00 00 00    	jle    801039bb <log_write+0xbb>
+    panic("log_write outside of trans");
+
+  acquire(&log.lock);
+8010393a:	83 ec 0c             	sub    $0xc,%esp
+8010393d:	68 80 40 11 80       	push   $0x80114080
+80103942:	e8 09 16 00 00       	call   80104f50 <acquire>
+  for (i = 0; i < log.lh.n; i++) {
+80103947:	8b 15 c8 40 11 80    	mov    0x801140c8,%edx
+8010394d:	83 c4 10             	add    $0x10,%esp
+80103950:	85 d2                	test   %edx,%edx
+80103952:	7e 4e                	jle    801039a2 <log_write+0xa2>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80103954:	8b 4b 08             	mov    0x8(%ebx),%ecx
+  for (i = 0; i < log.lh.n; i++) {
+80103957:	31 c0                	xor    %eax,%eax
+80103959:	eb 0c                	jmp    80103967 <log_write+0x67>
+8010395b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010395f:	90                   	nop
+80103960:	83 c0 01             	add    $0x1,%eax
+80103963:	39 c2                	cmp    %eax,%edx
+80103965:	74 29                	je     80103990 <log_write+0x90>
+    if (log.lh.block[i] == b->blockno)   // log absorbtion
+80103967:	39 0c 85 cc 40 11 80 	cmp    %ecx,-0x7feebf34(,%eax,4)
+8010396e:	75 f0                	jne    80103960 <log_write+0x60>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+80103970:	89 0c 85 cc 40 11 80 	mov    %ecx,-0x7feebf34(,%eax,4)
+  if (i == log.lh.n)
+    log.lh.n++;
+  b->flags |= B_DIRTY; // prevent eviction
+80103977:	83 0b 04             	orl    $0x4,(%ebx)
+  release(&log.lock);
+}
+8010397a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  release(&log.lock);
+8010397d:	c7 45 08 80 40 11 80 	movl   $0x80114080,0x8(%ebp)
+}
+80103984:	c9                   	leave  
+  release(&log.lock);
+80103985:	e9 86 16 00 00       	jmp    80105010 <release>
+8010398a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  log.lh.block[i] = b->blockno;
+80103990:	89 0c 95 cc 40 11 80 	mov    %ecx,-0x7feebf34(,%edx,4)
+    log.lh.n++;
+80103997:	83 c2 01             	add    $0x1,%edx
+8010399a:	89 15 c8 40 11 80    	mov    %edx,0x801140c8
+801039a0:	eb d5                	jmp    80103977 <log_write+0x77>
+  log.lh.block[i] = b->blockno;
+801039a2:	8b 43 08             	mov    0x8(%ebx),%eax
+801039a5:	a3 cc 40 11 80       	mov    %eax,0x801140cc
+  if (i == log.lh.n)
+801039aa:	75 cb                	jne    80103977 <log_write+0x77>
+801039ac:	eb e9                	jmp    80103997 <log_write+0x97>
+    panic("too big a transaction");
+801039ae:	83 ec 0c             	sub    $0xc,%esp
+801039b1:	68 93 80 10 80       	push   $0x80108093
+801039b6:	e8 d5 c9 ff ff       	call   80100390 <panic>
+    panic("log_write outside of trans");
+801039bb:	83 ec 0c             	sub    $0xc,%esp
+801039be:	68 a9 80 10 80       	push   $0x801080a9
+801039c3:	e8 c8 c9 ff ff       	call   80100390 <panic>
+801039c8:	66 90                	xchg   %ax,%ax
+801039ca:	66 90                	xchg   %ax,%ax
+801039cc:	66 90                	xchg   %ax,%ax
+801039ce:	66 90                	xchg   %ax,%ax
+
+801039d0 <mpmain>:
+}
+
+// Common CPU setup code.
+static void
+mpmain(void)
+{
+801039d0:	55                   	push   %ebp
+801039d1:	89 e5                	mov    %esp,%ebp
+801039d3:	53                   	push   %ebx
+801039d4:	83 ec 04             	sub    $0x4,%esp
+  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
+801039d7:	e8 54 09 00 00       	call   80104330 <cpuid>
+801039dc:	89 c3                	mov    %eax,%ebx
+801039de:	e8 4d 09 00 00       	call   80104330 <cpuid>
+801039e3:	83 ec 04             	sub    $0x4,%esp
+801039e6:	53                   	push   %ebx
+801039e7:	50                   	push   %eax
+801039e8:	68 c4 80 10 80       	push   $0x801080c4
+801039ed:	e8 fe cc ff ff       	call   801006f0 <cprintf>
+  idtinit();       // load idt register
+801039f2:	e8 d9 29 00 00       	call   801063d0 <idtinit>
+  xchg(&(mycpu()->started), 1); // tell startothers() we're up
+801039f7:	e8 c4 08 00 00       	call   801042c0 <mycpu>
+801039fc:	89 c2                	mov    %eax,%edx
+xchg(volatile uint *addr, uint newval)
+{
+  uint result;
+
+  // The + in "+m" denotes a read-modify-write operand.
+  asm volatile("lock; xchgl %0, %1" :
+801039fe:	b8 01 00 00 00       	mov    $0x1,%eax
+80103a03:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+  scheduler();     // start running processes
+80103a0a:	e8 11 0c 00 00       	call   80104620 <scheduler>
+80103a0f:	90                   	nop
+
+80103a10 <mpenter>:
+{
+80103a10:	f3 0f 1e fb          	endbr32 
+80103a14:	55                   	push   %ebp
+80103a15:	89 e5                	mov    %esp,%ebp
+80103a17:	83 ec 08             	sub    $0x8,%esp
+  switchkvm();
+80103a1a:	e8 81 3a 00 00       	call   801074a0 <switchkvm>
+  seginit();
+80103a1f:	e8 ec 39 00 00       	call   80107410 <seginit>
+  lapicinit();
+80103a24:	e8 67 f7 ff ff       	call   80103190 <lapicinit>
+  mpmain();
+80103a29:	e8 a2 ff ff ff       	call   801039d0 <mpmain>
+80103a2e:	66 90                	xchg   %ax,%ax
+
+80103a30 <main>:
+{
+80103a30:	f3 0f 1e fb          	endbr32 
+80103a34:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80103a38:	83 e4 f0             	and    $0xfffffff0,%esp
+80103a3b:	ff 71 fc             	pushl  -0x4(%ecx)
+80103a3e:	55                   	push   %ebp
+80103a3f:	89 e5                	mov    %esp,%ebp
+80103a41:	53                   	push   %ebx
+80103a42:	51                   	push   %ecx
+  kinit1(end, P2V(4*1024*1024)); // phys page allocator
+80103a43:	83 ec 08             	sub    $0x8,%esp
+80103a46:	68 00 00 40 80       	push   $0x80400000
+80103a4b:	68 a8 6e 11 80       	push   $0x80116ea8
+80103a50:	e8 fb f4 ff ff       	call   80102f50 <kinit1>
+  kvmalloc();      // kernel page table
+80103a55:	e8 26 3f 00 00       	call   80107980 <kvmalloc>
+  mpinit();        // detect other processors
+80103a5a:	e8 81 01 00 00       	call   80103be0 <mpinit>
+  lapicinit();     // interrupt controller
+80103a5f:	e8 2c f7 ff ff       	call   80103190 <lapicinit>
+  seginit();       // segment descriptors
+80103a64:	e8 a7 39 00 00       	call   80107410 <seginit>
+  picinit();       // disable pic
+80103a69:	e8 52 03 00 00       	call   80103dc0 <picinit>
+  ioapicinit();    // another interrupt controller
+80103a6e:	e8 fd f2 ff ff       	call   80102d70 <ioapicinit>
+  consoleinit();   // console hardware
+80103a73:	e8 88 d9 ff ff       	call   80101400 <consoleinit>
+  uartinit();      // serial port
+80103a78:	e8 53 2c 00 00       	call   801066d0 <uartinit>
+  pinit();         // process table
+80103a7d:	e8 1e 08 00 00       	call   801042a0 <pinit>
+  tvinit();        // trap vectors
+80103a82:	e8 c9 28 00 00       	call   80106350 <tvinit>
+  binit();         // buffer cache
+80103a87:	e8 b4 c5 ff ff       	call   80100040 <binit>
+  fileinit();      // file table
+80103a8c:	e8 3f dd ff ff       	call   801017d0 <fileinit>
+  ideinit();       // disk 
+80103a91:	e8 aa f0 ff ff       	call   80102b40 <ideinit>
+
+  // Write entry code to unused memory at 0x7000.
+  // The linker has placed the image of entryother.S in
+  // _binary_entryother_start.
+  code = P2V(0x7000);
+  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
+80103a96:	83 c4 0c             	add    $0xc,%esp
+80103a99:	68 8a 00 00 00       	push   $0x8a
+80103a9e:	68 8c b4 10 80       	push   $0x8010b48c
+80103aa3:	68 00 70 00 80       	push   $0x80007000
+80103aa8:	e8 53 16 00 00       	call   80105100 <memmove>
+
+  for(c = cpus; c < cpus+ncpu; c++){
+80103aad:	83 c4 10             	add    $0x10,%esp
+80103ab0:	69 05 00 47 11 80 b0 	imul   $0xb0,0x80114700,%eax
+80103ab7:	00 00 00 
+80103aba:	05 80 41 11 80       	add    $0x80114180,%eax
+80103abf:	3d 80 41 11 80       	cmp    $0x80114180,%eax
+80103ac4:	76 7a                	jbe    80103b40 <main+0x110>
+80103ac6:	bb 80 41 11 80       	mov    $0x80114180,%ebx
+80103acb:	eb 1c                	jmp    80103ae9 <main+0xb9>
+80103acd:	8d 76 00             	lea    0x0(%esi),%esi
+80103ad0:	69 05 00 47 11 80 b0 	imul   $0xb0,0x80114700,%eax
+80103ad7:	00 00 00 
+80103ada:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+80103ae0:	05 80 41 11 80       	add    $0x80114180,%eax
+80103ae5:	39 c3                	cmp    %eax,%ebx
+80103ae7:	73 57                	jae    80103b40 <main+0x110>
+    if(c == mycpu())  // We've started already.
+80103ae9:	e8 d2 07 00 00       	call   801042c0 <mycpu>
+80103aee:	39 c3                	cmp    %eax,%ebx
+80103af0:	74 de                	je     80103ad0 <main+0xa0>
+      continue;
+
+    // Tell entryother.S what stack to use, where to enter, and what
+    // pgdir to use. We cannot use kpgdir yet, because the AP processor
+    // is running in low  memory, so we use entrypgdir for the APs too.
+    stack = kalloc();
+80103af2:	e8 29 f5 ff ff       	call   80103020 <kalloc>
+    *(void**)(code-4) = stack + KSTACKSIZE;
+    *(void(**)(void))(code-8) = mpenter;
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+
+    lapicstartap(c->apicid, V2P(code));
+80103af7:	83 ec 08             	sub    $0x8,%esp
+    *(void(**)(void))(code-8) = mpenter;
+80103afa:	c7 05 f8 6f 00 80 10 	movl   $0x80103a10,0x80006ff8
+80103b01:	3a 10 80 
+    *(int**)(code-12) = (void *) V2P(entrypgdir);
+80103b04:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
+80103b0b:	a0 10 00 
+    *(void**)(code-4) = stack + KSTACKSIZE;
+80103b0e:	05 00 10 00 00       	add    $0x1000,%eax
+80103b13:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+    lapicstartap(c->apicid, V2P(code));
+80103b18:	0f b6 03             	movzbl (%ebx),%eax
+80103b1b:	68 00 70 00 00       	push   $0x7000
+80103b20:	50                   	push   %eax
+80103b21:	e8 ba f7 ff ff       	call   801032e0 <lapicstartap>
+
+    // wait for cpu to finish mpmain()
+    while(c->started == 0)
+80103b26:	83 c4 10             	add    $0x10,%esp
+80103b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b30:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80103b36:	85 c0                	test   %eax,%eax
+80103b38:	74 f6                	je     80103b30 <main+0x100>
+80103b3a:	eb 94                	jmp    80103ad0 <main+0xa0>
+80103b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
+80103b40:	83 ec 08             	sub    $0x8,%esp
+80103b43:	68 00 00 00 8e       	push   $0x8e000000
+80103b48:	68 00 00 40 80       	push   $0x80400000
+80103b4d:	e8 6e f4 ff ff       	call   80102fc0 <kinit2>
+  userinit();      // first user process
+80103b52:	e8 29 08 00 00       	call   80104380 <userinit>
+  mpmain();        // finish this processor's setup
+80103b57:	e8 74 fe ff ff       	call   801039d0 <mpmain>
+80103b5c:	66 90                	xchg   %ax,%ax
+80103b5e:	66 90                	xchg   %ax,%ax
+
+80103b60 <mpsearch1>:
+}
+
+// Look for an MP structure in the len bytes at addr.
+static struct mp*
+mpsearch1(uint a, int len)
+{
+80103b60:	55                   	push   %ebp
+80103b61:	89 e5                	mov    %esp,%ebp
+80103b63:	57                   	push   %edi
+80103b64:	56                   	push   %esi
+  uchar *e, *p, *addr;
+
+  addr = P2V(a);
+80103b65:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+{
+80103b6b:	53                   	push   %ebx
+  e = addr+len;
+80103b6c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+{
+80103b6f:	83 ec 0c             	sub    $0xc,%esp
+  for(p = addr; p < e; p += sizeof(struct mp))
+80103b72:	39 de                	cmp    %ebx,%esi
+80103b74:	72 10                	jb     80103b86 <mpsearch1+0x26>
+80103b76:	eb 50                	jmp    80103bc8 <mpsearch1+0x68>
+80103b78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b7f:	90                   	nop
+80103b80:	89 fe                	mov    %edi,%esi
+80103b82:	39 fb                	cmp    %edi,%ebx
+80103b84:	76 42                	jbe    80103bc8 <mpsearch1+0x68>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103b86:	83 ec 04             	sub    $0x4,%esp
+80103b89:	8d 7e 10             	lea    0x10(%esi),%edi
+80103b8c:	6a 04                	push   $0x4
+80103b8e:	68 d8 80 10 80       	push   $0x801080d8
+80103b93:	56                   	push   %esi
+80103b94:	e8 17 15 00 00       	call   801050b0 <memcmp>
+80103b99:	83 c4 10             	add    $0x10,%esp
+80103b9c:	85 c0                	test   %eax,%eax
+80103b9e:	75 e0                	jne    80103b80 <mpsearch1+0x20>
+80103ba0:	89 f2                	mov    %esi,%edx
+80103ba2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    sum += addr[i];
+80103ba8:	0f b6 0a             	movzbl (%edx),%ecx
+80103bab:	83 c2 01             	add    $0x1,%edx
+80103bae:	01 c8                	add    %ecx,%eax
+  for(i=0; i<len; i++)
+80103bb0:	39 fa                	cmp    %edi,%edx
+80103bb2:	75 f4                	jne    80103ba8 <mpsearch1+0x48>
+    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
+80103bb4:	84 c0                	test   %al,%al
+80103bb6:	75 c8                	jne    80103b80 <mpsearch1+0x20>
+      return (struct mp*)p;
+  return 0;
+}
+80103bb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103bbb:	89 f0                	mov    %esi,%eax
+80103bbd:	5b                   	pop    %ebx
+80103bbe:	5e                   	pop    %esi
+80103bbf:	5f                   	pop    %edi
+80103bc0:	5d                   	pop    %ebp
+80103bc1:	c3                   	ret    
+80103bc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103bc8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80103bcb:	31 f6                	xor    %esi,%esi
+}
+80103bcd:	5b                   	pop    %ebx
+80103bce:	89 f0                	mov    %esi,%eax
+80103bd0:	5e                   	pop    %esi
+80103bd1:	5f                   	pop    %edi
+80103bd2:	5d                   	pop    %ebp
+80103bd3:	c3                   	ret    
+80103bd4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103bdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103bdf:	90                   	nop
+
+80103be0 <mpinit>:
+  return conf;
+}
+
+void
+mpinit(void)
+{
+80103be0:	f3 0f 1e fb          	endbr32 
+80103be4:	55                   	push   %ebp
+80103be5:	89 e5                	mov    %esp,%ebp
+80103be7:	57                   	push   %edi
+80103be8:	56                   	push   %esi
+80103be9:	53                   	push   %ebx
+80103bea:	83 ec 1c             	sub    $0x1c,%esp
+  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
+80103bed:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103bf4:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+80103bfb:	c1 e0 08             	shl    $0x8,%eax
+80103bfe:	09 d0                	or     %edx,%eax
+80103c00:	c1 e0 04             	shl    $0x4,%eax
+80103c03:	75 1b                	jne    80103c20 <mpinit+0x40>
+    p = ((bda[0x14]<<8)|bda[0x13])*1024;
+80103c05:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+80103c0c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103c13:	c1 e0 08             	shl    $0x8,%eax
+80103c16:	09 d0                	or     %edx,%eax
+80103c18:	c1 e0 0a             	shl    $0xa,%eax
+    if((mp = mpsearch1(p-1024, 1024)))
+80103c1b:	2d 00 04 00 00       	sub    $0x400,%eax
+    if((mp = mpsearch1(p, 1024)))
+80103c20:	ba 00 04 00 00       	mov    $0x400,%edx
+80103c25:	e8 36 ff ff ff       	call   80103b60 <mpsearch1>
+80103c2a:	89 c6                	mov    %eax,%esi
+80103c2c:	85 c0                	test   %eax,%eax
+80103c2e:	0f 84 4c 01 00 00    	je     80103d80 <mpinit+0x1a0>
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103c34:	8b 5e 04             	mov    0x4(%esi),%ebx
+80103c37:	85 db                	test   %ebx,%ebx
+80103c39:	0f 84 61 01 00 00    	je     80103da0 <mpinit+0x1c0>
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103c3f:	83 ec 04             	sub    $0x4,%esp
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+80103c42:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103c48:	6a 04                	push   $0x4
+80103c4a:	68 dd 80 10 80       	push   $0x801080dd
+80103c4f:	50                   	push   %eax
+  conf = (struct mpconf*) P2V((uint) mp->physaddr);
+80103c50:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(memcmp(conf, "PCMP", 4) != 0)
+80103c53:	e8 58 14 00 00       	call   801050b0 <memcmp>
+80103c58:	83 c4 10             	add    $0x10,%esp
+80103c5b:	85 c0                	test   %eax,%eax
+80103c5d:	0f 85 3d 01 00 00    	jne    80103da0 <mpinit+0x1c0>
+  if(conf->version != 1 && conf->version != 4)
+80103c63:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+80103c6a:	3c 01                	cmp    $0x1,%al
+80103c6c:	74 08                	je     80103c76 <mpinit+0x96>
+80103c6e:	3c 04                	cmp    $0x4,%al
+80103c70:	0f 85 2a 01 00 00    	jne    80103da0 <mpinit+0x1c0>
+  if(sum((uchar*)conf, conf->length) != 0)
+80103c76:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+  for(i=0; i<len; i++)
+80103c7d:	66 85 d2             	test   %dx,%dx
+80103c80:	74 26                	je     80103ca8 <mpinit+0xc8>
+80103c82:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
+80103c85:	89 d8                	mov    %ebx,%eax
+  sum = 0;
+80103c87:	31 d2                	xor    %edx,%edx
+80103c89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    sum += addr[i];
+80103c90:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
+80103c97:	83 c0 01             	add    $0x1,%eax
+80103c9a:	01 ca                	add    %ecx,%edx
+  for(i=0; i<len; i++)
+80103c9c:	39 f8                	cmp    %edi,%eax
+80103c9e:	75 f0                	jne    80103c90 <mpinit+0xb0>
+  if(sum((uchar*)conf, conf->length) != 0)
+80103ca0:	84 d2                	test   %dl,%dl
+80103ca2:	0f 85 f8 00 00 00    	jne    80103da0 <mpinit+0x1c0>
+  struct mpioapic *ioapic;
+
+  if((conf = mpconfig(&mp)) == 0)
+    panic("Expect to run on an SMP");
+  ismp = 1;
+  lapic = (uint*)conf->lapicaddr;
+80103ca8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+80103cae:	a3 7c 40 11 80       	mov    %eax,0x8011407c
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103cb3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+80103cb9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+  ismp = 1;
+80103cc0:	bb 01 00 00 00       	mov    $0x1,%ebx
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103cc5:	03 55 e4             	add    -0x1c(%ebp),%edx
+80103cc8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80103ccb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ccf:	90                   	nop
+80103cd0:	39 c2                	cmp    %eax,%edx
+80103cd2:	76 15                	jbe    80103ce9 <mpinit+0x109>
+    switch(*p){
+80103cd4:	0f b6 08             	movzbl (%eax),%ecx
+80103cd7:	80 f9 02             	cmp    $0x2,%cl
+80103cda:	74 5c                	je     80103d38 <mpinit+0x158>
+80103cdc:	77 42                	ja     80103d20 <mpinit+0x140>
+80103cde:	84 c9                	test   %cl,%cl
+80103ce0:	74 6e                	je     80103d50 <mpinit+0x170>
+      p += sizeof(struct mpioapic);
+      continue;
+    case MPBUS:
+    case MPIOINTR:
+    case MPLINTR:
+      p += 8;
+80103ce2:	83 c0 08             	add    $0x8,%eax
+  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
+80103ce5:	39 c2                	cmp    %eax,%edx
+80103ce7:	77 eb                	ja     80103cd4 <mpinit+0xf4>
+80103ce9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+    default:
+      ismp = 0;
+      break;
+    }
+  }
+  if(!ismp)
+80103cec:	85 db                	test   %ebx,%ebx
+80103cee:	0f 84 b9 00 00 00    	je     80103dad <mpinit+0x1cd>
+    panic("Didn't find a suitable machine");
+
+  if(mp->imcrp){
+80103cf4:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
+80103cf8:	74 15                	je     80103d0f <mpinit+0x12f>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103cfa:	b8 70 00 00 00       	mov    $0x70,%eax
+80103cff:	ba 22 00 00 00       	mov    $0x22,%edx
+80103d04:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80103d05:	ba 23 00 00 00       	mov    $0x23,%edx
+80103d0a:	ec                   	in     (%dx),%al
+    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
+    // But it would on real hardware.
+    outb(0x22, 0x70);   // Select IMCR
+    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
+80103d0b:	83 c8 01             	or     $0x1,%eax
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+80103d0e:	ee                   	out    %al,(%dx)
+  }
+}
+80103d0f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103d12:	5b                   	pop    %ebx
+80103d13:	5e                   	pop    %esi
+80103d14:	5f                   	pop    %edi
+80103d15:	5d                   	pop    %ebp
+80103d16:	c3                   	ret    
+80103d17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d1e:	66 90                	xchg   %ax,%ax
+    switch(*p){
+80103d20:	83 e9 03             	sub    $0x3,%ecx
+80103d23:	80 f9 01             	cmp    $0x1,%cl
+80103d26:	76 ba                	jbe    80103ce2 <mpinit+0x102>
+80103d28:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80103d2f:	eb 9f                	jmp    80103cd0 <mpinit+0xf0>
+80103d31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      ioapicid = ioapic->apicno;
+80103d38:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
+      p += sizeof(struct mpioapic);
+80103d3c:	83 c0 08             	add    $0x8,%eax
+      ioapicid = ioapic->apicno;
+80103d3f:	88 0d 60 41 11 80    	mov    %cl,0x80114160
+      continue;
+80103d45:	eb 89                	jmp    80103cd0 <mpinit+0xf0>
+80103d47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d4e:	66 90                	xchg   %ax,%ax
+      if(ncpu < NCPU) {
+80103d50:	8b 0d 00 47 11 80    	mov    0x80114700,%ecx
+80103d56:	83 f9 07             	cmp    $0x7,%ecx
+80103d59:	7f 19                	jg     80103d74 <mpinit+0x194>
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+80103d5b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+80103d61:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+        ncpu++;
+80103d65:	83 c1 01             	add    $0x1,%ecx
+80103d68:	89 0d 00 47 11 80    	mov    %ecx,0x80114700
+        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
+80103d6e:	88 9f 80 41 11 80    	mov    %bl,-0x7feebe80(%edi)
+      p += sizeof(struct mpproc);
+80103d74:	83 c0 14             	add    $0x14,%eax
+      continue;
+80103d77:	e9 54 ff ff ff       	jmp    80103cd0 <mpinit+0xf0>
+80103d7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return mpsearch1(0xF0000, 0x10000);
+80103d80:	ba 00 00 01 00       	mov    $0x10000,%edx
+80103d85:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+80103d8a:	e8 d1 fd ff ff       	call   80103b60 <mpsearch1>
+80103d8f:	89 c6                	mov    %eax,%esi
+  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
+80103d91:	85 c0                	test   %eax,%eax
+80103d93:	0f 85 9b fe ff ff    	jne    80103c34 <mpinit+0x54>
+80103d99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    panic("Expect to run on an SMP");
+80103da0:	83 ec 0c             	sub    $0xc,%esp
+80103da3:	68 e2 80 10 80       	push   $0x801080e2
+80103da8:	e8 e3 c5 ff ff       	call   80100390 <panic>
+    panic("Didn't find a suitable machine");
+80103dad:	83 ec 0c             	sub    $0xc,%esp
+80103db0:	68 fc 80 10 80       	push   $0x801080fc
+80103db5:	e8 d6 c5 ff ff       	call   80100390 <panic>
+80103dba:	66 90                	xchg   %ax,%ax
+80103dbc:	66 90                	xchg   %ax,%ax
+80103dbe:	66 90                	xchg   %ax,%ax
+
+80103dc0 <picinit>:
+#define IO_PIC2         0xA0    // Slave (IRQs 8-15)
+
+// Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
+void
+picinit(void)
+{
+80103dc0:	f3 0f 1e fb          	endbr32 
+80103dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103dc9:	ba 21 00 00 00       	mov    $0x21,%edx
+80103dce:	ee                   	out    %al,(%dx)
+80103dcf:	ba a1 00 00 00       	mov    $0xa1,%edx
+80103dd4:	ee                   	out    %al,(%dx)
+  // mask all interrupts
+  outb(IO_PIC1+1, 0xFF);
+  outb(IO_PIC2+1, 0xFF);
+}
+80103dd5:	c3                   	ret    
+80103dd6:	66 90                	xchg   %ax,%ax
+80103dd8:	66 90                	xchg   %ax,%ax
+80103dda:	66 90                	xchg   %ax,%ax
+80103ddc:	66 90                	xchg   %ax,%ax
+80103dde:	66 90                	xchg   %ax,%ax
+
+80103de0 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+80103de0:	f3 0f 1e fb          	endbr32 
+80103de4:	55                   	push   %ebp
+80103de5:	89 e5                	mov    %esp,%ebp
+80103de7:	57                   	push   %edi
+80103de8:	56                   	push   %esi
+80103de9:	53                   	push   %ebx
+80103dea:	83 ec 0c             	sub    $0xc,%esp
+80103ded:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103df0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  struct pipe *p;
+
+  p = 0;
+  *f0 = *f1 = 0;
+80103df3:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103df9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+80103dff:	e8 ec d9 ff ff       	call   801017f0 <filealloc>
+80103e04:	89 03                	mov    %eax,(%ebx)
+80103e06:	85 c0                	test   %eax,%eax
+80103e08:	0f 84 ac 00 00 00    	je     80103eba <pipealloc+0xda>
+80103e0e:	e8 dd d9 ff ff       	call   801017f0 <filealloc>
+80103e13:	89 06                	mov    %eax,(%esi)
+80103e15:	85 c0                	test   %eax,%eax
+80103e17:	0f 84 8b 00 00 00    	je     80103ea8 <pipealloc+0xc8>
+    goto bad;
+  if((p = (struct pipe*)kalloc()) == 0)
+80103e1d:	e8 fe f1 ff ff       	call   80103020 <kalloc>
+80103e22:	89 c7                	mov    %eax,%edi
+80103e24:	85 c0                	test   %eax,%eax
+80103e26:	0f 84 b4 00 00 00    	je     80103ee0 <pipealloc+0x100>
+    goto bad;
+  p->readopen = 1;
+80103e2c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+80103e33:	00 00 00 
+  p->writeopen = 1;
+  p->nwrite = 0;
+  p->nread = 0;
+  initlock(&p->lock, "pipe");
+80103e36:	83 ec 08             	sub    $0x8,%esp
+  p->writeopen = 1;
+80103e39:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+80103e40:	00 00 00 
+  p->nwrite = 0;
+80103e43:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+80103e4a:	00 00 00 
+  p->nread = 0;
+80103e4d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80103e54:	00 00 00 
+  initlock(&p->lock, "pipe");
+80103e57:	68 1b 81 10 80       	push   $0x8010811b
+80103e5c:	50                   	push   %eax
+80103e5d:	e8 6e 0f 00 00       	call   80104dd0 <initlock>
+  (*f0)->type = FD_PIPE;
+80103e62:	8b 03                	mov    (%ebx),%eax
+  (*f0)->pipe = p;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = p;
+  return 0;
+80103e64:	83 c4 10             	add    $0x10,%esp
+  (*f0)->type = FD_PIPE;
+80103e67:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f0)->readable = 1;
+80103e6d:	8b 03                	mov    (%ebx),%eax
+80103e6f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+  (*f0)->writable = 0;
+80103e73:	8b 03                	mov    (%ebx),%eax
+80103e75:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+  (*f0)->pipe = p;
+80103e79:	8b 03                	mov    (%ebx),%eax
+80103e7b:	89 78 0c             	mov    %edi,0xc(%eax)
+  (*f1)->type = FD_PIPE;
+80103e7e:	8b 06                	mov    (%esi),%eax
+80103e80:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  (*f1)->readable = 0;
+80103e86:	8b 06                	mov    (%esi),%eax
+80103e88:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+  (*f1)->writable = 1;
+80103e8c:	8b 06                	mov    (%esi),%eax
+80103e8e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+  (*f1)->pipe = p;
+80103e92:	8b 06                	mov    (%esi),%eax
+80103e94:	89 78 0c             	mov    %edi,0xc(%eax)
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+80103e97:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80103e9a:	31 c0                	xor    %eax,%eax
+}
+80103e9c:	5b                   	pop    %ebx
+80103e9d:	5e                   	pop    %esi
+80103e9e:	5f                   	pop    %edi
+80103e9f:	5d                   	pop    %ebp
+80103ea0:	c3                   	ret    
+80103ea1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(*f0)
+80103ea8:	8b 03                	mov    (%ebx),%eax
+80103eaa:	85 c0                	test   %eax,%eax
+80103eac:	74 1e                	je     80103ecc <pipealloc+0xec>
+    fileclose(*f0);
+80103eae:	83 ec 0c             	sub    $0xc,%esp
+80103eb1:	50                   	push   %eax
+80103eb2:	e8 f9 d9 ff ff       	call   801018b0 <fileclose>
+80103eb7:	83 c4 10             	add    $0x10,%esp
+  if(*f1)
+80103eba:	8b 06                	mov    (%esi),%eax
+80103ebc:	85 c0                	test   %eax,%eax
+80103ebe:	74 0c                	je     80103ecc <pipealloc+0xec>
+    fileclose(*f1);
+80103ec0:	83 ec 0c             	sub    $0xc,%esp
+80103ec3:	50                   	push   %eax
+80103ec4:	e8 e7 d9 ff ff       	call   801018b0 <fileclose>
+80103ec9:	83 c4 10             	add    $0x10,%esp
+}
+80103ecc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return -1;
+80103ecf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80103ed4:	5b                   	pop    %ebx
+80103ed5:	5e                   	pop    %esi
+80103ed6:	5f                   	pop    %edi
+80103ed7:	5d                   	pop    %ebp
+80103ed8:	c3                   	ret    
+80103ed9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  if(*f0)
+80103ee0:	8b 03                	mov    (%ebx),%eax
+80103ee2:	85 c0                	test   %eax,%eax
+80103ee4:	75 c8                	jne    80103eae <pipealloc+0xce>
+80103ee6:	eb d2                	jmp    80103eba <pipealloc+0xda>
+80103ee8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103eef:	90                   	nop
+
+80103ef0 <pipeclose>:
+
+void
+pipeclose(struct pipe *p, int writable)
+{
+80103ef0:	f3 0f 1e fb          	endbr32 
+80103ef4:	55                   	push   %ebp
+80103ef5:	89 e5                	mov    %esp,%ebp
+80103ef7:	56                   	push   %esi
+80103ef8:	53                   	push   %ebx
+80103ef9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103efc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  acquire(&p->lock);
+80103eff:	83 ec 0c             	sub    $0xc,%esp
+80103f02:	53                   	push   %ebx
+80103f03:	e8 48 10 00 00       	call   80104f50 <acquire>
+  if(writable){
+80103f08:	83 c4 10             	add    $0x10,%esp
+80103f0b:	85 f6                	test   %esi,%esi
+80103f0d:	74 41                	je     80103f50 <pipeclose+0x60>
+    p->writeopen = 0;
+    wakeup(&p->nread);
+80103f0f:	83 ec 0c             	sub    $0xc,%esp
+80103f12:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+    p->writeopen = 0;
+80103f18:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+80103f1f:	00 00 00 
+    wakeup(&p->nread);
+80103f22:	50                   	push   %eax
+80103f23:	e8 a8 0b 00 00       	call   80104ad0 <wakeup>
+80103f28:	83 c4 10             	add    $0x10,%esp
+  } else {
+    p->readopen = 0;
+    wakeup(&p->nwrite);
+  }
+  if(p->readopen == 0 && p->writeopen == 0){
+80103f2b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+80103f31:	85 d2                	test   %edx,%edx
+80103f33:	75 0a                	jne    80103f3f <pipeclose+0x4f>
+80103f35:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+80103f3b:	85 c0                	test   %eax,%eax
+80103f3d:	74 31                	je     80103f70 <pipeclose+0x80>
+    release(&p->lock);
+    kfree((char*)p);
+  } else
+    release(&p->lock);
+80103f3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+80103f42:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f45:	5b                   	pop    %ebx
+80103f46:	5e                   	pop    %esi
+80103f47:	5d                   	pop    %ebp
+    release(&p->lock);
+80103f48:	e9 c3 10 00 00       	jmp    80105010 <release>
+80103f4d:	8d 76 00             	lea    0x0(%esi),%esi
+    wakeup(&p->nwrite);
+80103f50:	83 ec 0c             	sub    $0xc,%esp
+80103f53:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+    p->readopen = 0;
+80103f59:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+80103f60:	00 00 00 
+    wakeup(&p->nwrite);
+80103f63:	50                   	push   %eax
+80103f64:	e8 67 0b 00 00       	call   80104ad0 <wakeup>
+80103f69:	83 c4 10             	add    $0x10,%esp
+80103f6c:	eb bd                	jmp    80103f2b <pipeclose+0x3b>
+80103f6e:	66 90                	xchg   %ax,%ax
+    release(&p->lock);
+80103f70:	83 ec 0c             	sub    $0xc,%esp
+80103f73:	53                   	push   %ebx
+80103f74:	e8 97 10 00 00       	call   80105010 <release>
+    kfree((char*)p);
+80103f79:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80103f7c:	83 c4 10             	add    $0x10,%esp
+}
+80103f7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103f82:	5b                   	pop    %ebx
+80103f83:	5e                   	pop    %esi
+80103f84:	5d                   	pop    %ebp
+    kfree((char*)p);
+80103f85:	e9 d6 ee ff ff       	jmp    80102e60 <kfree>
+80103f8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103f90 <pipewrite>:
+
+//PAGEBREAK: 40
+int
+pipewrite(struct pipe *p, char *addr, int n)
+{
+80103f90:	f3 0f 1e fb          	endbr32 
+80103f94:	55                   	push   %ebp
+80103f95:	89 e5                	mov    %esp,%ebp
+80103f97:	57                   	push   %edi
+80103f98:	56                   	push   %esi
+80103f99:	53                   	push   %ebx
+80103f9a:	83 ec 28             	sub    $0x28,%esp
+80103f9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int i;
+
+  acquire(&p->lock);
+80103fa0:	53                   	push   %ebx
+80103fa1:	e8 aa 0f 00 00       	call   80104f50 <acquire>
+  for(i = 0; i < n; i++){
+80103fa6:	8b 45 10             	mov    0x10(%ebp),%eax
+80103fa9:	83 c4 10             	add    $0x10,%esp
+80103fac:	85 c0                	test   %eax,%eax
+80103fae:	0f 8e bc 00 00 00    	jle    80104070 <pipewrite+0xe0>
+80103fb4:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103fb7:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+      if(p->readopen == 0 || myproc()->killed){
+        release(&p->lock);
+        return -1;
+      }
+      wakeup(&p->nread);
+80103fbd:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+80103fc3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103fc6:	03 45 10             	add    0x10(%ebp),%eax
+80103fc9:	89 45 e0             	mov    %eax,-0x20(%ebp)
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103fcc:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103fd2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80103fd8:	89 ca                	mov    %ecx,%edx
+80103fda:	05 00 02 00 00       	add    $0x200,%eax
+80103fdf:	39 c1                	cmp    %eax,%ecx
+80103fe1:	74 3b                	je     8010401e <pipewrite+0x8e>
+80103fe3:	eb 63                	jmp    80104048 <pipewrite+0xb8>
+80103fe5:	8d 76 00             	lea    0x0(%esi),%esi
+      if(p->readopen == 0 || myproc()->killed){
+80103fe8:	e8 63 03 00 00       	call   80104350 <myproc>
+80103fed:	8b 48 24             	mov    0x24(%eax),%ecx
+80103ff0:	85 c9                	test   %ecx,%ecx
+80103ff2:	75 34                	jne    80104028 <pipewrite+0x98>
+      wakeup(&p->nread);
+80103ff4:	83 ec 0c             	sub    $0xc,%esp
+80103ff7:	57                   	push   %edi
+80103ff8:	e8 d3 0a 00 00       	call   80104ad0 <wakeup>
+      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
+80103ffd:	58                   	pop    %eax
+80103ffe:	5a                   	pop    %edx
+80103fff:	53                   	push   %ebx
+80104000:	56                   	push   %esi
+80104001:	e8 0a 09 00 00       	call   80104910 <sleep>
+    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
+80104006:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010400c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+80104012:	83 c4 10             	add    $0x10,%esp
+80104015:	05 00 02 00 00       	add    $0x200,%eax
+8010401a:	39 c2                	cmp    %eax,%edx
+8010401c:	75 2a                	jne    80104048 <pipewrite+0xb8>
+      if(p->readopen == 0 || myproc()->killed){
+8010401e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80104024:	85 c0                	test   %eax,%eax
+80104026:	75 c0                	jne    80103fe8 <pipewrite+0x58>
+        release(&p->lock);
+80104028:	83 ec 0c             	sub    $0xc,%esp
+8010402b:	53                   	push   %ebx
+8010402c:	e8 df 0f 00 00       	call   80105010 <release>
+        return -1;
+80104031:	83 c4 10             	add    $0x10,%esp
+80104034:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+  }
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+  release(&p->lock);
+  return n;
+}
+80104039:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010403c:	5b                   	pop    %ebx
+8010403d:	5e                   	pop    %esi
+8010403e:	5f                   	pop    %edi
+8010403f:	5d                   	pop    %ebp
+80104040:	c3                   	ret    
+80104041:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    p->data[p->nwrite++ % PIPESIZE] = addr[i];
+80104048:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+8010404b:	8d 4a 01             	lea    0x1(%edx),%ecx
+8010404e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+80104054:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
+8010405a:	0f b6 06             	movzbl (%esi),%eax
+8010405d:	83 c6 01             	add    $0x1,%esi
+80104060:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+80104063:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
+  for(i = 0; i < n; i++){
+80104067:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+8010406a:	0f 85 5c ff ff ff    	jne    80103fcc <pipewrite+0x3c>
+  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
+80104070:	83 ec 0c             	sub    $0xc,%esp
+80104073:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80104079:	50                   	push   %eax
+8010407a:	e8 51 0a 00 00       	call   80104ad0 <wakeup>
+  release(&p->lock);
+8010407f:	89 1c 24             	mov    %ebx,(%esp)
+80104082:	e8 89 0f 00 00       	call   80105010 <release>
+  return n;
+80104087:	8b 45 10             	mov    0x10(%ebp),%eax
+8010408a:	83 c4 10             	add    $0x10,%esp
+8010408d:	eb aa                	jmp    80104039 <pipewrite+0xa9>
+8010408f:	90                   	nop
+
+80104090 <piperead>:
+
+int
+piperead(struct pipe *p, char *addr, int n)
+{
+80104090:	f3 0f 1e fb          	endbr32 
+80104094:	55                   	push   %ebp
+80104095:	89 e5                	mov    %esp,%ebp
+80104097:	57                   	push   %edi
+80104098:	56                   	push   %esi
+80104099:	53                   	push   %ebx
+8010409a:	83 ec 18             	sub    $0x18,%esp
+8010409d:	8b 75 08             	mov    0x8(%ebp),%esi
+801040a0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  int i;
+
+  acquire(&p->lock);
+801040a3:	56                   	push   %esi
+801040a4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+801040aa:	e8 a1 0e 00 00       	call   80104f50 <acquire>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801040af:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+801040b5:	83 c4 10             	add    $0x10,%esp
+801040b8:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
+801040be:	74 33                	je     801040f3 <piperead+0x63>
+801040c0:	eb 3b                	jmp    801040fd <piperead+0x6d>
+801040c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(myproc()->killed){
+801040c8:	e8 83 02 00 00       	call   80104350 <myproc>
+801040cd:	8b 48 24             	mov    0x24(%eax),%ecx
+801040d0:	85 c9                	test   %ecx,%ecx
+801040d2:	0f 85 88 00 00 00    	jne    80104160 <piperead+0xd0>
+      release(&p->lock);
+      return -1;
+    }
+    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
+801040d8:	83 ec 08             	sub    $0x8,%esp
+801040db:	56                   	push   %esi
+801040dc:	53                   	push   %ebx
+801040dd:	e8 2e 08 00 00       	call   80104910 <sleep>
+  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
+801040e2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
+801040e8:	83 c4 10             	add    $0x10,%esp
+801040eb:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
+801040f1:	75 0a                	jne    801040fd <piperead+0x6d>
+801040f3:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
+801040f9:	85 c0                	test   %eax,%eax
+801040fb:	75 cb                	jne    801040c8 <piperead+0x38>
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+801040fd:	8b 55 10             	mov    0x10(%ebp),%edx
+80104100:	31 db                	xor    %ebx,%ebx
+80104102:	85 d2                	test   %edx,%edx
+80104104:	7f 28                	jg     8010412e <piperead+0x9e>
+80104106:	eb 34                	jmp    8010413c <piperead+0xac>
+80104108:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010410f:	90                   	nop
+    if(p->nread == p->nwrite)
+      break;
+    addr[i] = p->data[p->nread++ % PIPESIZE];
+80104110:	8d 48 01             	lea    0x1(%eax),%ecx
+80104113:	25 ff 01 00 00       	and    $0x1ff,%eax
+80104118:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
+8010411e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
+80104123:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+80104126:	83 c3 01             	add    $0x1,%ebx
+80104129:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010412c:	74 0e                	je     8010413c <piperead+0xac>
+    if(p->nread == p->nwrite)
+8010412e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+80104134:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
+8010413a:	75 d4                	jne    80104110 <piperead+0x80>
+  }
+  wakeup(&p->nwrite);  //DOC: piperead-wakeup
+8010413c:	83 ec 0c             	sub    $0xc,%esp
+8010413f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+80104145:	50                   	push   %eax
+80104146:	e8 85 09 00 00       	call   80104ad0 <wakeup>
+  release(&p->lock);
+8010414b:	89 34 24             	mov    %esi,(%esp)
+8010414e:	e8 bd 0e 00 00       	call   80105010 <release>
+  return i;
+80104153:	83 c4 10             	add    $0x10,%esp
+}
+80104156:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104159:	89 d8                	mov    %ebx,%eax
+8010415b:	5b                   	pop    %ebx
+8010415c:	5e                   	pop    %esi
+8010415d:	5f                   	pop    %edi
+8010415e:	5d                   	pop    %ebp
+8010415f:	c3                   	ret    
+      release(&p->lock);
+80104160:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80104163:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+      release(&p->lock);
+80104168:	56                   	push   %esi
+80104169:	e8 a2 0e 00 00       	call   80105010 <release>
+      return -1;
+8010416e:	83 c4 10             	add    $0x10,%esp
+}
+80104171:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104174:	89 d8                	mov    %ebx,%eax
+80104176:	5b                   	pop    %ebx
+80104177:	5e                   	pop    %esi
+80104178:	5f                   	pop    %edi
+80104179:	5d                   	pop    %ebp
+8010417a:	c3                   	ret    
+8010417b:	66 90                	xchg   %ax,%ax
+8010417d:	66 90                	xchg   %ax,%ax
+8010417f:	90                   	nop
+
+80104180 <allocproc>:
+// If found, change state to EMBRYO and initialize
+// state required to run in the kernel.
+// Otherwise return 0.
+static struct proc*
+allocproc(void)
+{
+80104180:	55                   	push   %ebp
+80104181:	89 e5                	mov    %esp,%ebp
+80104183:	53                   	push   %ebx
+  struct proc *p;
+  char *sp;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104184:	bb 54 47 11 80       	mov    $0x80114754,%ebx
+{
+80104189:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);
+8010418c:	68 20 47 11 80       	push   $0x80114720
+80104191:	e8 ba 0d 00 00       	call   80104f50 <acquire>
+80104196:	83 c4 10             	add    $0x10,%esp
+80104199:	eb 10                	jmp    801041ab <allocproc+0x2b>
+8010419b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010419f:	90                   	nop
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+801041a0:	83 c3 7c             	add    $0x7c,%ebx
+801041a3:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
+801041a9:	74 75                	je     80104220 <allocproc+0xa0>
+    if(p->state == UNUSED)
+801041ab:	8b 43 0c             	mov    0xc(%ebx),%eax
+801041ae:	85 c0                	test   %eax,%eax
+801041b0:	75 ee                	jne    801041a0 <allocproc+0x20>
+  release(&ptable.lock);
+  return 0;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+801041b2:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+
+  release(&ptable.lock);
+801041b7:	83 ec 0c             	sub    $0xc,%esp
+  p->state = EMBRYO;
+801041ba:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+  p->pid = nextpid++;
+801041c1:	89 43 10             	mov    %eax,0x10(%ebx)
+801041c4:	8d 50 01             	lea    0x1(%eax),%edx
+  release(&ptable.lock);
+801041c7:	68 20 47 11 80       	push   $0x80114720
+  p->pid = nextpid++;
+801041cc:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
+  release(&ptable.lock);
+801041d2:	e8 39 0e 00 00       	call   80105010 <release>
+
+  // Allocate kernel stack.
+  if((p->kstack = kalloc()) == 0){
+801041d7:	e8 44 ee ff ff       	call   80103020 <kalloc>
+801041dc:	83 c4 10             	add    $0x10,%esp
+801041df:	89 43 08             	mov    %eax,0x8(%ebx)
+801041e2:	85 c0                	test   %eax,%eax
+801041e4:	74 53                	je     80104239 <allocproc+0xb9>
+    return 0;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+801041e6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+  sp -= 4;
+  *(uint*)sp = (uint)trapret;
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+801041ec:	83 ec 04             	sub    $0x4,%esp
+  sp -= sizeof *p->context;
+801041ef:	05 9c 0f 00 00       	add    $0xf9c,%eax
+  sp -= sizeof *p->tf;
+801041f4:	89 53 18             	mov    %edx,0x18(%ebx)
+  *(uint*)sp = (uint)trapret;
+801041f7:	c7 40 14 3b 63 10 80 	movl   $0x8010633b,0x14(%eax)
+  p->context = (struct context*)sp;
+801041fe:	89 43 1c             	mov    %eax,0x1c(%ebx)
+  memset(p->context, 0, sizeof *p->context);
+80104201:	6a 14                	push   $0x14
+80104203:	6a 00                	push   $0x0
+80104205:	50                   	push   %eax
+80104206:	e8 55 0e 00 00       	call   80105060 <memset>
+  p->context->eip = (uint)forkret;
+8010420b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+
+  return p;
+8010420e:	83 c4 10             	add    $0x10,%esp
+  p->context->eip = (uint)forkret;
+80104211:	c7 40 10 50 42 10 80 	movl   $0x80104250,0x10(%eax)
+}
+80104218:	89 d8                	mov    %ebx,%eax
+8010421a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010421d:	c9                   	leave  
+8010421e:	c3                   	ret    
+8010421f:	90                   	nop
+  release(&ptable.lock);
+80104220:	83 ec 0c             	sub    $0xc,%esp
+  return 0;
+80104223:	31 db                	xor    %ebx,%ebx
+  release(&ptable.lock);
+80104225:	68 20 47 11 80       	push   $0x80114720
+8010422a:	e8 e1 0d 00 00       	call   80105010 <release>
+}
+8010422f:	89 d8                	mov    %ebx,%eax
+  return 0;
+80104231:	83 c4 10             	add    $0x10,%esp
+}
+80104234:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104237:	c9                   	leave  
+80104238:	c3                   	ret    
+    p->state = UNUSED;
+80104239:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return 0;
+80104240:	31 db                	xor    %ebx,%ebx
+}
+80104242:	89 d8                	mov    %ebx,%eax
+80104244:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104247:	c9                   	leave  
+80104248:	c3                   	ret    
+80104249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104250 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch here.  "Return" to user space.
+void
+forkret(void)
+{
+80104250:	f3 0f 1e fb          	endbr32 
+80104254:	55                   	push   %ebp
+80104255:	89 e5                	mov    %esp,%ebp
+80104257:	83 ec 14             	sub    $0x14,%esp
+  static int first = 1;
+  // Still holding ptable.lock from scheduler.
+  release(&ptable.lock);
+8010425a:	68 20 47 11 80       	push   $0x80114720
+8010425f:	e8 ac 0d 00 00       	call   80105010 <release>
+
+  if (first) {
+80104264:	a1 00 b0 10 80       	mov    0x8010b000,%eax
+80104269:	83 c4 10             	add    $0x10,%esp
+8010426c:	85 c0                	test   %eax,%eax
+8010426e:	75 08                	jne    80104278 <forkret+0x28>
+    iinit(ROOTDEV);
+    initlog(ROOTDEV);
+  }
+
+  // Return to "caller", actually trapret (see allocproc).
+}
+80104270:	c9                   	leave  
+80104271:	c3                   	ret    
+80104272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    first = 0;
+80104278:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
+8010427f:	00 00 00 
+    iinit(ROOTDEV);
+80104282:	83 ec 0c             	sub    $0xc,%esp
+80104285:	6a 01                	push   $0x1
+80104287:	e8 a4 dc ff ff       	call   80101f30 <iinit>
+    initlog(ROOTDEV);
+8010428c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+80104293:	e8 e8 f3 ff ff       	call   80103680 <initlog>
+}
+80104298:	83 c4 10             	add    $0x10,%esp
+8010429b:	c9                   	leave  
+8010429c:	c3                   	ret    
+8010429d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801042a0 <pinit>:
+{
+801042a0:	f3 0f 1e fb          	endbr32 
+801042a4:	55                   	push   %ebp
+801042a5:	89 e5                	mov    %esp,%ebp
+801042a7:	83 ec 10             	sub    $0x10,%esp
+  initlock(&ptable.lock, "ptable");
+801042aa:	68 20 81 10 80       	push   $0x80108120
+801042af:	68 20 47 11 80       	push   $0x80114720
+801042b4:	e8 17 0b 00 00       	call   80104dd0 <initlock>
+}
+801042b9:	83 c4 10             	add    $0x10,%esp
+801042bc:	c9                   	leave  
+801042bd:	c3                   	ret    
+801042be:	66 90                	xchg   %ax,%ax
+
+801042c0 <mycpu>:
+{
+801042c0:	f3 0f 1e fb          	endbr32 
+801042c4:	55                   	push   %ebp
+801042c5:	89 e5                	mov    %esp,%ebp
+801042c7:	56                   	push   %esi
+801042c8:	53                   	push   %ebx
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+801042c9:	9c                   	pushf  
+801042ca:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+801042cb:	f6 c4 02             	test   $0x2,%ah
+801042ce:	75 4a                	jne    8010431a <mycpu+0x5a>
+  apicid = lapicid();
+801042d0:	e8 bb ef ff ff       	call   80103290 <lapicid>
+  for (i = 0; i < ncpu; ++i) {
+801042d5:	8b 35 00 47 11 80    	mov    0x80114700,%esi
+  apicid = lapicid();
+801042db:	89 c3                	mov    %eax,%ebx
+  for (i = 0; i < ncpu; ++i) {
+801042dd:	85 f6                	test   %esi,%esi
+801042df:	7e 2c                	jle    8010430d <mycpu+0x4d>
+801042e1:	31 d2                	xor    %edx,%edx
+801042e3:	eb 0a                	jmp    801042ef <mycpu+0x2f>
+801042e5:	8d 76 00             	lea    0x0(%esi),%esi
+801042e8:	83 c2 01             	add    $0x1,%edx
+801042eb:	39 f2                	cmp    %esi,%edx
+801042ed:	74 1e                	je     8010430d <mycpu+0x4d>
+    if (cpus[i].apicid == apicid)
+801042ef:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+801042f5:	0f b6 81 80 41 11 80 	movzbl -0x7feebe80(%ecx),%eax
+801042fc:	39 d8                	cmp    %ebx,%eax
+801042fe:	75 e8                	jne    801042e8 <mycpu+0x28>
+}
+80104300:	8d 65 f8             	lea    -0x8(%ebp),%esp
+      return &cpus[i];
+80104303:	8d 81 80 41 11 80    	lea    -0x7feebe80(%ecx),%eax
+}
+80104309:	5b                   	pop    %ebx
+8010430a:	5e                   	pop    %esi
+8010430b:	5d                   	pop    %ebp
+8010430c:	c3                   	ret    
+  panic("unknown apicid\n");
+8010430d:	83 ec 0c             	sub    $0xc,%esp
+80104310:	68 27 81 10 80       	push   $0x80108127
+80104315:	e8 76 c0 ff ff       	call   80100390 <panic>
+    panic("mycpu called with interrupts enabled\n");
+8010431a:	83 ec 0c             	sub    $0xc,%esp
+8010431d:	68 04 82 10 80       	push   $0x80108204
+80104322:	e8 69 c0 ff ff       	call   80100390 <panic>
+80104327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010432e:	66 90                	xchg   %ax,%ax
+
+80104330 <cpuid>:
+cpuid() {
+80104330:	f3 0f 1e fb          	endbr32 
+80104334:	55                   	push   %ebp
+80104335:	89 e5                	mov    %esp,%ebp
+80104337:	83 ec 08             	sub    $0x8,%esp
+  return mycpu()-cpus;
+8010433a:	e8 81 ff ff ff       	call   801042c0 <mycpu>
+}
+8010433f:	c9                   	leave  
+  return mycpu()-cpus;
+80104340:	2d 80 41 11 80       	sub    $0x80114180,%eax
+80104345:	c1 f8 04             	sar    $0x4,%eax
+80104348:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+8010434e:	c3                   	ret    
+8010434f:	90                   	nop
+
+80104350 <myproc>:
+myproc(void) {
+80104350:	f3 0f 1e fb          	endbr32 
+80104354:	55                   	push   %ebp
+80104355:	89 e5                	mov    %esp,%ebp
+80104357:	53                   	push   %ebx
+80104358:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+8010435b:	e8 f0 0a 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+80104360:	e8 5b ff ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+80104365:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010436b:	e8 30 0b 00 00       	call   80104ea0 <popcli>
+}
+80104370:	83 c4 04             	add    $0x4,%esp
+80104373:	89 d8                	mov    %ebx,%eax
+80104375:	5b                   	pop    %ebx
+80104376:	5d                   	pop    %ebp
+80104377:	c3                   	ret    
+80104378:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010437f:	90                   	nop
+
+80104380 <userinit>:
+{
+80104380:	f3 0f 1e fb          	endbr32 
+80104384:	55                   	push   %ebp
+80104385:	89 e5                	mov    %esp,%ebp
+80104387:	53                   	push   %ebx
+80104388:	83 ec 04             	sub    $0x4,%esp
+  p = allocproc();
+8010438b:	e8 f0 fd ff ff       	call   80104180 <allocproc>
+80104390:	89 c3                	mov    %eax,%ebx
+  initproc = p;
+80104392:	a3 b8 b5 10 80       	mov    %eax,0x8010b5b8
+  if((p->pgdir = setupkvm()) == 0)
+80104397:	e8 64 35 00 00       	call   80107900 <setupkvm>
+8010439c:	89 43 04             	mov    %eax,0x4(%ebx)
+8010439f:	85 c0                	test   %eax,%eax
+801043a1:	0f 84 bd 00 00 00    	je     80104464 <userinit+0xe4>
+  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
+801043a7:	83 ec 04             	sub    $0x4,%esp
+801043aa:	68 2c 00 00 00       	push   $0x2c
+801043af:	68 60 b4 10 80       	push   $0x8010b460
+801043b4:	50                   	push   %eax
+801043b5:	e8 16 32 00 00       	call   801075d0 <inituvm>
+  memset(p->tf, 0, sizeof(*p->tf));
+801043ba:	83 c4 0c             	add    $0xc,%esp
+  p->sz = PGSIZE;
+801043bd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+  memset(p->tf, 0, sizeof(*p->tf));
+801043c3:	6a 4c                	push   $0x4c
+801043c5:	6a 00                	push   $0x0
+801043c7:	ff 73 18             	pushl  0x18(%ebx)
+801043ca:	e8 91 0c 00 00       	call   80105060 <memset>
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+801043cf:	8b 43 18             	mov    0x18(%ebx),%eax
+801043d2:	ba 1b 00 00 00       	mov    $0x1b,%edx
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+801043d7:	83 c4 0c             	add    $0xc,%esp
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+801043da:	b9 23 00 00 00       	mov    $0x23,%ecx
+  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+801043df:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+801043e3:	8b 43 18             	mov    0x18(%ebx),%eax
+801043e6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+  p->tf->es = p->tf->ds;
+801043ea:	8b 43 18             	mov    0x18(%ebx),%eax
+801043ed:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+801043f1:	66 89 50 28          	mov    %dx,0x28(%eax)
+  p->tf->ss = p->tf->ds;
+801043f5:	8b 43 18             	mov    0x18(%ebx),%eax
+801043f8:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+801043fc:	66 89 50 48          	mov    %dx,0x48(%eax)
+  p->tf->eflags = FL_IF;
+80104400:	8b 43 18             	mov    0x18(%ebx),%eax
+80104403:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+  p->tf->esp = PGSIZE;
+8010440a:	8b 43 18             	mov    0x18(%ebx),%eax
+8010440d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+  p->tf->eip = 0;  // beginning of initcode.S
+80104414:	8b 43 18             	mov    0x18(%ebx),%eax
+80104417:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+8010441e:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104421:	6a 10                	push   $0x10
+80104423:	68 50 81 10 80       	push   $0x80108150
+80104428:	50                   	push   %eax
+80104429:	e8 f2 0d 00 00       	call   80105220 <safestrcpy>
+  p->cwd = namei("/");
+8010442e:	c7 04 24 59 81 10 80 	movl   $0x80108159,(%esp)
+80104435:	e8 e6 e5 ff ff       	call   80102a20 <namei>
+8010443a:	89 43 68             	mov    %eax,0x68(%ebx)
+  acquire(&ptable.lock);
+8010443d:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+80104444:	e8 07 0b 00 00       	call   80104f50 <acquire>
+  p->state = RUNNABLE;
+80104449:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  release(&ptable.lock);
+80104450:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+80104457:	e8 b4 0b 00 00       	call   80105010 <release>
+}
+8010445c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010445f:	83 c4 10             	add    $0x10,%esp
+80104462:	c9                   	leave  
+80104463:	c3                   	ret    
+    panic("userinit: out of memory?");
+80104464:	83 ec 0c             	sub    $0xc,%esp
+80104467:	68 37 81 10 80       	push   $0x80108137
+8010446c:	e8 1f bf ff ff       	call   80100390 <panic>
+80104471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104478:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010447f:	90                   	nop
+
+80104480 <growproc>:
+{
+80104480:	f3 0f 1e fb          	endbr32 
+80104484:	55                   	push   %ebp
+80104485:	89 e5                	mov    %esp,%ebp
+80104487:	56                   	push   %esi
+80104488:	53                   	push   %ebx
+80104489:	8b 75 08             	mov    0x8(%ebp),%esi
+  pushcli();
+8010448c:	e8 bf 09 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+80104491:	e8 2a fe ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+80104496:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010449c:	e8 ff 09 00 00       	call   80104ea0 <popcli>
+  sz = curproc->sz;
+801044a1:	8b 03                	mov    (%ebx),%eax
+  if(n > 0){
+801044a3:	85 f6                	test   %esi,%esi
+801044a5:	7f 19                	jg     801044c0 <growproc+0x40>
+  } else if(n < 0){
+801044a7:	75 37                	jne    801044e0 <growproc+0x60>
+  switchuvm(curproc);
+801044a9:	83 ec 0c             	sub    $0xc,%esp
+  curproc->sz = sz;
+801044ac:	89 03                	mov    %eax,(%ebx)
+  switchuvm(curproc);
+801044ae:	53                   	push   %ebx
+801044af:	e8 0c 30 00 00       	call   801074c0 <switchuvm>
+  return 0;
+801044b4:	83 c4 10             	add    $0x10,%esp
+801044b7:	31 c0                	xor    %eax,%eax
+}
+801044b9:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801044bc:	5b                   	pop    %ebx
+801044bd:	5e                   	pop    %esi
+801044be:	5d                   	pop    %ebp
+801044bf:	c3                   	ret    
+    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
+801044c0:	83 ec 04             	sub    $0x4,%esp
+801044c3:	01 c6                	add    %eax,%esi
+801044c5:	56                   	push   %esi
+801044c6:	50                   	push   %eax
+801044c7:	ff 73 04             	pushl  0x4(%ebx)
+801044ca:	e8 51 32 00 00       	call   80107720 <allocuvm>
+801044cf:	83 c4 10             	add    $0x10,%esp
+801044d2:	85 c0                	test   %eax,%eax
+801044d4:	75 d3                	jne    801044a9 <growproc+0x29>
+      return -1;
+801044d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801044db:	eb dc                	jmp    801044b9 <growproc+0x39>
+801044dd:	8d 76 00             	lea    0x0(%esi),%esi
+    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
+801044e0:	83 ec 04             	sub    $0x4,%esp
+801044e3:	01 c6                	add    %eax,%esi
+801044e5:	56                   	push   %esi
+801044e6:	50                   	push   %eax
+801044e7:	ff 73 04             	pushl  0x4(%ebx)
+801044ea:	e8 61 33 00 00       	call   80107850 <deallocuvm>
+801044ef:	83 c4 10             	add    $0x10,%esp
+801044f2:	85 c0                	test   %eax,%eax
+801044f4:	75 b3                	jne    801044a9 <growproc+0x29>
+801044f6:	eb de                	jmp    801044d6 <growproc+0x56>
+801044f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044ff:	90                   	nop
+
+80104500 <fork>:
+{
+80104500:	f3 0f 1e fb          	endbr32 
+80104504:	55                   	push   %ebp
+80104505:	89 e5                	mov    %esp,%ebp
+80104507:	57                   	push   %edi
+80104508:	56                   	push   %esi
+80104509:	53                   	push   %ebx
+8010450a:	83 ec 1c             	sub    $0x1c,%esp
+  pushcli();
+8010450d:	e8 3e 09 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+80104512:	e8 a9 fd ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+80104517:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+8010451d:	e8 7e 09 00 00       	call   80104ea0 <popcli>
+  if((np = allocproc()) == 0){
+80104522:	e8 59 fc ff ff       	call   80104180 <allocproc>
+80104527:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010452a:	85 c0                	test   %eax,%eax
+8010452c:	0f 84 bb 00 00 00    	je     801045ed <fork+0xed>
+  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+80104532:	83 ec 08             	sub    $0x8,%esp
+80104535:	ff 33                	pushl  (%ebx)
+80104537:	89 c7                	mov    %eax,%edi
+80104539:	ff 73 04             	pushl  0x4(%ebx)
+8010453c:	e8 8f 34 00 00       	call   801079d0 <copyuvm>
+80104541:	83 c4 10             	add    $0x10,%esp
+80104544:	89 47 04             	mov    %eax,0x4(%edi)
+80104547:	85 c0                	test   %eax,%eax
+80104549:	0f 84 a5 00 00 00    	je     801045f4 <fork+0xf4>
+  np->sz = curproc->sz;
+8010454f:	8b 03                	mov    (%ebx),%eax
+80104551:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80104554:	89 01                	mov    %eax,(%ecx)
+  *np->tf = *curproc->tf;
+80104556:	8b 79 18             	mov    0x18(%ecx),%edi
+  np->parent = curproc;
+80104559:	89 c8                	mov    %ecx,%eax
+8010455b:	89 59 14             	mov    %ebx,0x14(%ecx)
+  *np->tf = *curproc->tf;
+8010455e:	b9 13 00 00 00       	mov    $0x13,%ecx
+80104563:	8b 73 18             	mov    0x18(%ebx),%esi
+80104566:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+  for(i = 0; i < NOFILE; i++)
+80104568:	31 f6                	xor    %esi,%esi
+  np->tf->eax = 0;
+8010456a:	8b 40 18             	mov    0x18(%eax),%eax
+8010456d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+  for(i = 0; i < NOFILE; i++)
+80104574:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[i])
+80104578:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+8010457c:	85 c0                	test   %eax,%eax
+8010457e:	74 13                	je     80104593 <fork+0x93>
+      np->ofile[i] = filedup(curproc->ofile[i]);
+80104580:	83 ec 0c             	sub    $0xc,%esp
+80104583:	50                   	push   %eax
+80104584:	e8 d7 d2 ff ff       	call   80101860 <filedup>
+80104589:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010458c:	83 c4 10             	add    $0x10,%esp
+8010458f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+  for(i = 0; i < NOFILE; i++)
+80104593:	83 c6 01             	add    $0x1,%esi
+80104596:	83 fe 10             	cmp    $0x10,%esi
+80104599:	75 dd                	jne    80104578 <fork+0x78>
+  np->cwd = idup(curproc->cwd);
+8010459b:	83 ec 0c             	sub    $0xc,%esp
+8010459e:	ff 73 68             	pushl  0x68(%ebx)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801045a1:	83 c3 6c             	add    $0x6c,%ebx
+  np->cwd = idup(curproc->cwd);
+801045a4:	e8 77 db ff ff       	call   80102120 <idup>
+801045a9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801045ac:	83 c4 0c             	add    $0xc,%esp
+  np->cwd = idup(curproc->cwd);
+801045af:	89 47 68             	mov    %eax,0x68(%edi)
+  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+801045b2:	8d 47 6c             	lea    0x6c(%edi),%eax
+801045b5:	6a 10                	push   $0x10
+801045b7:	53                   	push   %ebx
+801045b8:	50                   	push   %eax
+801045b9:	e8 62 0c 00 00       	call   80105220 <safestrcpy>
+  pid = np->pid;
+801045be:	8b 5f 10             	mov    0x10(%edi),%ebx
+  acquire(&ptable.lock);
+801045c1:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+801045c8:	e8 83 09 00 00       	call   80104f50 <acquire>
+  np->state = RUNNABLE;
+801045cd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+  release(&ptable.lock);
+801045d4:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+801045db:	e8 30 0a 00 00       	call   80105010 <release>
+  return pid;
+801045e0:	83 c4 10             	add    $0x10,%esp
+}
+801045e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801045e6:	89 d8                	mov    %ebx,%eax
+801045e8:	5b                   	pop    %ebx
+801045e9:	5e                   	pop    %esi
+801045ea:	5f                   	pop    %edi
+801045eb:	5d                   	pop    %ebp
+801045ec:	c3                   	ret    
+    return -1;
+801045ed:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801045f2:	eb ef                	jmp    801045e3 <fork+0xe3>
+    kfree(np->kstack);
+801045f4:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+801045f7:	83 ec 0c             	sub    $0xc,%esp
+801045fa:	ff 73 08             	pushl  0x8(%ebx)
+801045fd:	e8 5e e8 ff ff       	call   80102e60 <kfree>
+    np->kstack = 0;
+80104602:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+    return -1;
+80104609:	83 c4 10             	add    $0x10,%esp
+    np->state = UNUSED;
+8010460c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+    return -1;
+80104613:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80104618:	eb c9                	jmp    801045e3 <fork+0xe3>
+8010461a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104620 <scheduler>:
+{
+80104620:	f3 0f 1e fb          	endbr32 
+80104624:	55                   	push   %ebp
+80104625:	89 e5                	mov    %esp,%ebp
+80104627:	57                   	push   %edi
+80104628:	56                   	push   %esi
+80104629:	53                   	push   %ebx
+8010462a:	83 ec 0c             	sub    $0xc,%esp
+  struct cpu *c = mycpu();
+8010462d:	e8 8e fc ff ff       	call   801042c0 <mycpu>
+  c->proc = 0;
+80104632:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80104639:	00 00 00 
+  struct cpu *c = mycpu();
+8010463c:	89 c6                	mov    %eax,%esi
+  c->proc = 0;
+8010463e:	8d 78 04             	lea    0x4(%eax),%edi
+80104641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  asm volatile("sti");
+80104648:	fb                   	sti    
+    acquire(&ptable.lock);
+80104649:	83 ec 0c             	sub    $0xc,%esp
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010464c:	bb 54 47 11 80       	mov    $0x80114754,%ebx
+    acquire(&ptable.lock);
+80104651:	68 20 47 11 80       	push   $0x80114720
+80104656:	e8 f5 08 00 00       	call   80104f50 <acquire>
+8010465b:	83 c4 10             	add    $0x10,%esp
+8010465e:	66 90                	xchg   %ax,%ax
+      if(p->state != RUNNABLE)
+80104660:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80104664:	75 33                	jne    80104699 <scheduler+0x79>
+      switchuvm(p);
+80104666:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = p;
+80104669:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+      switchuvm(p);
+8010466f:	53                   	push   %ebx
+80104670:	e8 4b 2e 00 00       	call   801074c0 <switchuvm>
+      swtch(&(c->scheduler), p->context);
+80104675:	58                   	pop    %eax
+80104676:	5a                   	pop    %edx
+80104677:	ff 73 1c             	pushl  0x1c(%ebx)
+8010467a:	57                   	push   %edi
+      p->state = RUNNING;
+8010467b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+      swtch(&(c->scheduler), p->context);
+80104682:	e8 fc 0b 00 00       	call   80105283 <swtch>
+      switchkvm();
+80104687:	e8 14 2e 00 00       	call   801074a0 <switchkvm>
+      c->proc = 0;
+8010468c:	83 c4 10             	add    $0x10,%esp
+8010468f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80104696:	00 00 00 
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104699:	83 c3 7c             	add    $0x7c,%ebx
+8010469c:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
+801046a2:	75 bc                	jne    80104660 <scheduler+0x40>
+    release(&ptable.lock);
+801046a4:	83 ec 0c             	sub    $0xc,%esp
+801046a7:	68 20 47 11 80       	push   $0x80114720
+801046ac:	e8 5f 09 00 00       	call   80105010 <release>
+    sti();
+801046b1:	83 c4 10             	add    $0x10,%esp
+801046b4:	eb 92                	jmp    80104648 <scheduler+0x28>
+801046b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801046bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801046c0 <sched>:
+{
+801046c0:	f3 0f 1e fb          	endbr32 
+801046c4:	55                   	push   %ebp
+801046c5:	89 e5                	mov    %esp,%ebp
+801046c7:	56                   	push   %esi
+801046c8:	53                   	push   %ebx
+  pushcli();
+801046c9:	e8 82 07 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+801046ce:	e8 ed fb ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+801046d3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801046d9:	e8 c2 07 00 00       	call   80104ea0 <popcli>
+  if(!holding(&ptable.lock))
+801046de:	83 ec 0c             	sub    $0xc,%esp
+801046e1:	68 20 47 11 80       	push   $0x80114720
+801046e6:	e8 15 08 00 00       	call   80104f00 <holding>
+801046eb:	83 c4 10             	add    $0x10,%esp
+801046ee:	85 c0                	test   %eax,%eax
+801046f0:	74 4f                	je     80104741 <sched+0x81>
+  if(mycpu()->ncli != 1)
+801046f2:	e8 c9 fb ff ff       	call   801042c0 <mycpu>
+801046f7:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+801046fe:	75 68                	jne    80104768 <sched+0xa8>
+  if(p->state == RUNNING)
+80104700:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80104704:	74 55                	je     8010475b <sched+0x9b>
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104706:	9c                   	pushf  
+80104707:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80104708:	f6 c4 02             	test   $0x2,%ah
+8010470b:	75 41                	jne    8010474e <sched+0x8e>
+  intena = mycpu()->intena;
+8010470d:	e8 ae fb ff ff       	call   801042c0 <mycpu>
+  swtch(&p->context, mycpu()->scheduler);
+80104712:	83 c3 1c             	add    $0x1c,%ebx
+  intena = mycpu()->intena;
+80104715:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+  swtch(&p->context, mycpu()->scheduler);
+8010471b:	e8 a0 fb ff ff       	call   801042c0 <mycpu>
+80104720:	83 ec 08             	sub    $0x8,%esp
+80104723:	ff 70 04             	pushl  0x4(%eax)
+80104726:	53                   	push   %ebx
+80104727:	e8 57 0b 00 00       	call   80105283 <swtch>
+  mycpu()->intena = intena;
+8010472c:	e8 8f fb ff ff       	call   801042c0 <mycpu>
+}
+80104731:	83 c4 10             	add    $0x10,%esp
+  mycpu()->intena = intena;
+80104734:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+}
+8010473a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010473d:	5b                   	pop    %ebx
+8010473e:	5e                   	pop    %esi
+8010473f:	5d                   	pop    %ebp
+80104740:	c3                   	ret    
+    panic("sched ptable.lock");
+80104741:	83 ec 0c             	sub    $0xc,%esp
+80104744:	68 5b 81 10 80       	push   $0x8010815b
+80104749:	e8 42 bc ff ff       	call   80100390 <panic>
+    panic("sched interruptible");
+8010474e:	83 ec 0c             	sub    $0xc,%esp
+80104751:	68 87 81 10 80       	push   $0x80108187
+80104756:	e8 35 bc ff ff       	call   80100390 <panic>
+    panic("sched running");
+8010475b:	83 ec 0c             	sub    $0xc,%esp
+8010475e:	68 79 81 10 80       	push   $0x80108179
+80104763:	e8 28 bc ff ff       	call   80100390 <panic>
+    panic("sched locks");
+80104768:	83 ec 0c             	sub    $0xc,%esp
+8010476b:	68 6d 81 10 80       	push   $0x8010816d
+80104770:	e8 1b bc ff ff       	call   80100390 <panic>
+80104775:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010477c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104780 <exit>:
+{
+80104780:	f3 0f 1e fb          	endbr32 
+80104784:	55                   	push   %ebp
+80104785:	89 e5                	mov    %esp,%ebp
+80104787:	57                   	push   %edi
+80104788:	56                   	push   %esi
+80104789:	53                   	push   %ebx
+8010478a:	83 ec 0c             	sub    $0xc,%esp
+  pushcli();
+8010478d:	e8 be 06 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+80104792:	e8 29 fb ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+80104797:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+8010479d:	e8 fe 06 00 00       	call   80104ea0 <popcli>
+  if(curproc == initproc)
+801047a2:	8d 5e 28             	lea    0x28(%esi),%ebx
+801047a5:	8d 7e 68             	lea    0x68(%esi),%edi
+801047a8:	39 35 b8 b5 10 80    	cmp    %esi,0x8010b5b8
+801047ae:	0f 84 f3 00 00 00    	je     801048a7 <exit+0x127>
+801047b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd]){
+801047b8:	8b 03                	mov    (%ebx),%eax
+801047ba:	85 c0                	test   %eax,%eax
+801047bc:	74 12                	je     801047d0 <exit+0x50>
+      fileclose(curproc->ofile[fd]);
+801047be:	83 ec 0c             	sub    $0xc,%esp
+801047c1:	50                   	push   %eax
+801047c2:	e8 e9 d0 ff ff       	call   801018b0 <fileclose>
+      curproc->ofile[fd] = 0;
+801047c7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801047cd:	83 c4 10             	add    $0x10,%esp
+  for(fd = 0; fd < NOFILE; fd++){
+801047d0:	83 c3 04             	add    $0x4,%ebx
+801047d3:	39 df                	cmp    %ebx,%edi
+801047d5:	75 e1                	jne    801047b8 <exit+0x38>
+  begin_op();
+801047d7:	e8 44 ef ff ff       	call   80103720 <begin_op>
+  iput(curproc->cwd);
+801047dc:	83 ec 0c             	sub    $0xc,%esp
+801047df:	ff 76 68             	pushl  0x68(%esi)
+801047e2:	e8 99 da ff ff       	call   80102280 <iput>
+  end_op();
+801047e7:	e8 a4 ef ff ff       	call   80103790 <end_op>
+  curproc->cwd = 0;
+801047ec:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+  acquire(&ptable.lock);
+801047f3:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+801047fa:	e8 51 07 00 00       	call   80104f50 <acquire>
+  wakeup1(curproc->parent);
+801047ff:	8b 56 14             	mov    0x14(%esi),%edx
+80104802:	83 c4 10             	add    $0x10,%esp
+static void
+wakeup1(void *chan)
+{
+  struct proc *p;
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104805:	b8 54 47 11 80       	mov    $0x80114754,%eax
+8010480a:	eb 0e                	jmp    8010481a <exit+0x9a>
+8010480c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104810:	83 c0 7c             	add    $0x7c,%eax
+80104813:	3d 54 66 11 80       	cmp    $0x80116654,%eax
+80104818:	74 1c                	je     80104836 <exit+0xb6>
+    if(p->state == SLEEPING && p->chan == chan)
+8010481a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010481e:	75 f0                	jne    80104810 <exit+0x90>
+80104820:	3b 50 20             	cmp    0x20(%eax),%edx
+80104823:	75 eb                	jne    80104810 <exit+0x90>
+      p->state = RUNNABLE;
+80104825:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+8010482c:	83 c0 7c             	add    $0x7c,%eax
+8010482f:	3d 54 66 11 80       	cmp    $0x80116654,%eax
+80104834:	75 e4                	jne    8010481a <exit+0x9a>
+      p->parent = initproc;
+80104836:	8b 0d b8 b5 10 80    	mov    0x8010b5b8,%ecx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010483c:	ba 54 47 11 80       	mov    $0x80114754,%edx
+80104841:	eb 10                	jmp    80104853 <exit+0xd3>
+80104843:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104847:	90                   	nop
+80104848:	83 c2 7c             	add    $0x7c,%edx
+8010484b:	81 fa 54 66 11 80    	cmp    $0x80116654,%edx
+80104851:	74 3b                	je     8010488e <exit+0x10e>
+    if(p->parent == curproc){
+80104853:	39 72 14             	cmp    %esi,0x14(%edx)
+80104856:	75 f0                	jne    80104848 <exit+0xc8>
+      if(p->state == ZOMBIE)
+80104858:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+      p->parent = initproc;
+8010485c:	89 4a 14             	mov    %ecx,0x14(%edx)
+      if(p->state == ZOMBIE)
+8010485f:	75 e7                	jne    80104848 <exit+0xc8>
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104861:	b8 54 47 11 80       	mov    $0x80114754,%eax
+80104866:	eb 12                	jmp    8010487a <exit+0xfa>
+80104868:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010486f:	90                   	nop
+80104870:	83 c0 7c             	add    $0x7c,%eax
+80104873:	3d 54 66 11 80       	cmp    $0x80116654,%eax
+80104878:	74 ce                	je     80104848 <exit+0xc8>
+    if(p->state == SLEEPING && p->chan == chan)
+8010487a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+8010487e:	75 f0                	jne    80104870 <exit+0xf0>
+80104880:	3b 48 20             	cmp    0x20(%eax),%ecx
+80104883:	75 eb                	jne    80104870 <exit+0xf0>
+      p->state = RUNNABLE;
+80104885:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010488c:	eb e2                	jmp    80104870 <exit+0xf0>
+  curproc->state = ZOMBIE;
+8010488e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+  sched();
+80104895:	e8 26 fe ff ff       	call   801046c0 <sched>
+  panic("zombie exit");
+8010489a:	83 ec 0c             	sub    $0xc,%esp
+8010489d:	68 a8 81 10 80       	push   $0x801081a8
+801048a2:	e8 e9 ba ff ff       	call   80100390 <panic>
+    panic("init exiting");
+801048a7:	83 ec 0c             	sub    $0xc,%esp
+801048aa:	68 9b 81 10 80       	push   $0x8010819b
+801048af:	e8 dc ba ff ff       	call   80100390 <panic>
+801048b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801048bf:	90                   	nop
+
+801048c0 <yield>:
+{
+801048c0:	f3 0f 1e fb          	endbr32 
+801048c4:	55                   	push   %ebp
+801048c5:	89 e5                	mov    %esp,%ebp
+801048c7:	53                   	push   %ebx
+801048c8:	83 ec 10             	sub    $0x10,%esp
+  acquire(&ptable.lock);  //DOC: yieldlock
+801048cb:	68 20 47 11 80       	push   $0x80114720
+801048d0:	e8 7b 06 00 00       	call   80104f50 <acquire>
+  pushcli();
+801048d5:	e8 76 05 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+801048da:	e8 e1 f9 ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+801048df:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801048e5:	e8 b6 05 00 00       	call   80104ea0 <popcli>
+  myproc()->state = RUNNABLE;
+801048ea:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+  sched();
+801048f1:	e8 ca fd ff ff       	call   801046c0 <sched>
+  release(&ptable.lock);
+801048f6:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+801048fd:	e8 0e 07 00 00       	call   80105010 <release>
+}
+80104902:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104905:	83 c4 10             	add    $0x10,%esp
+80104908:	c9                   	leave  
+80104909:	c3                   	ret    
+8010490a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104910 <sleep>:
+{
+80104910:	f3 0f 1e fb          	endbr32 
+80104914:	55                   	push   %ebp
+80104915:	89 e5                	mov    %esp,%ebp
+80104917:	57                   	push   %edi
+80104918:	56                   	push   %esi
+80104919:	53                   	push   %ebx
+8010491a:	83 ec 0c             	sub    $0xc,%esp
+8010491d:	8b 7d 08             	mov    0x8(%ebp),%edi
+80104920:	8b 75 0c             	mov    0xc(%ebp),%esi
+  pushcli();
+80104923:	e8 28 05 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+80104928:	e8 93 f9 ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+8010492d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104933:	e8 68 05 00 00       	call   80104ea0 <popcli>
+  if(p == 0)
+80104938:	85 db                	test   %ebx,%ebx
+8010493a:	0f 84 83 00 00 00    	je     801049c3 <sleep+0xb3>
+  if(lk == 0)
+80104940:	85 f6                	test   %esi,%esi
+80104942:	74 72                	je     801049b6 <sleep+0xa6>
+  if(lk != &ptable.lock){  //DOC: sleeplock0
+80104944:	81 fe 20 47 11 80    	cmp    $0x80114720,%esi
+8010494a:	74 4c                	je     80104998 <sleep+0x88>
+    acquire(&ptable.lock);  //DOC: sleeplock1
+8010494c:	83 ec 0c             	sub    $0xc,%esp
+8010494f:	68 20 47 11 80       	push   $0x80114720
+80104954:	e8 f7 05 00 00       	call   80104f50 <acquire>
+    release(lk);
+80104959:	89 34 24             	mov    %esi,(%esp)
+8010495c:	e8 af 06 00 00       	call   80105010 <release>
+  p->chan = chan;
+80104961:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+80104964:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+8010496b:	e8 50 fd ff ff       	call   801046c0 <sched>
+  p->chan = 0;
+80104970:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+    release(&ptable.lock);
+80104977:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+8010497e:	e8 8d 06 00 00       	call   80105010 <release>
+    acquire(lk);
+80104983:	89 75 08             	mov    %esi,0x8(%ebp)
+80104986:	83 c4 10             	add    $0x10,%esp
+}
+80104989:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010498c:	5b                   	pop    %ebx
+8010498d:	5e                   	pop    %esi
+8010498e:	5f                   	pop    %edi
+8010498f:	5d                   	pop    %ebp
+    acquire(lk);
+80104990:	e9 bb 05 00 00       	jmp    80104f50 <acquire>
+80104995:	8d 76 00             	lea    0x0(%esi),%esi
+  p->chan = chan;
+80104998:	89 7b 20             	mov    %edi,0x20(%ebx)
+  p->state = SLEEPING;
+8010499b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+  sched();
+801049a2:	e8 19 fd ff ff       	call   801046c0 <sched>
+  p->chan = 0;
+801049a7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+}
+801049ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801049b1:	5b                   	pop    %ebx
+801049b2:	5e                   	pop    %esi
+801049b3:	5f                   	pop    %edi
+801049b4:	5d                   	pop    %ebp
+801049b5:	c3                   	ret    
+    panic("sleep without lk");
+801049b6:	83 ec 0c             	sub    $0xc,%esp
+801049b9:	68 ba 81 10 80       	push   $0x801081ba
+801049be:	e8 cd b9 ff ff       	call   80100390 <panic>
+    panic("sleep");
+801049c3:	83 ec 0c             	sub    $0xc,%esp
+801049c6:	68 b4 81 10 80       	push   $0x801081b4
+801049cb:	e8 c0 b9 ff ff       	call   80100390 <panic>
+
+801049d0 <wait>:
+{
+801049d0:	f3 0f 1e fb          	endbr32 
+801049d4:	55                   	push   %ebp
+801049d5:	89 e5                	mov    %esp,%ebp
+801049d7:	56                   	push   %esi
+801049d8:	53                   	push   %ebx
+  pushcli();
+801049d9:	e8 72 04 00 00       	call   80104e50 <pushcli>
+  c = mycpu();
+801049de:	e8 dd f8 ff ff       	call   801042c0 <mycpu>
+  p = c->proc;
+801049e3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+  popcli();
+801049e9:	e8 b2 04 00 00       	call   80104ea0 <popcli>
+  acquire(&ptable.lock);
+801049ee:	83 ec 0c             	sub    $0xc,%esp
+801049f1:	68 20 47 11 80       	push   $0x80114720
+801049f6:	e8 55 05 00 00       	call   80104f50 <acquire>
+801049fb:	83 c4 10             	add    $0x10,%esp
+    havekids = 0;
+801049fe:	31 c0                	xor    %eax,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104a00:	bb 54 47 11 80       	mov    $0x80114754,%ebx
+80104a05:	eb 14                	jmp    80104a1b <wait+0x4b>
+80104a07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a0e:	66 90                	xchg   %ax,%ax
+80104a10:	83 c3 7c             	add    $0x7c,%ebx
+80104a13:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
+80104a19:	74 1b                	je     80104a36 <wait+0x66>
+      if(p->parent != curproc)
+80104a1b:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104a1e:	75 f0                	jne    80104a10 <wait+0x40>
+      if(p->state == ZOMBIE){
+80104a20:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104a24:	74 32                	je     80104a58 <wait+0x88>
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104a26:	83 c3 7c             	add    $0x7c,%ebx
+      havekids = 1;
+80104a29:	b8 01 00 00 00       	mov    $0x1,%eax
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104a2e:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
+80104a34:	75 e5                	jne    80104a1b <wait+0x4b>
+    if(!havekids || curproc->killed){
+80104a36:	85 c0                	test   %eax,%eax
+80104a38:	74 74                	je     80104aae <wait+0xde>
+80104a3a:	8b 46 24             	mov    0x24(%esi),%eax
+80104a3d:	85 c0                	test   %eax,%eax
+80104a3f:	75 6d                	jne    80104aae <wait+0xde>
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+80104a41:	83 ec 08             	sub    $0x8,%esp
+80104a44:	68 20 47 11 80       	push   $0x80114720
+80104a49:	56                   	push   %esi
+80104a4a:	e8 c1 fe ff ff       	call   80104910 <sleep>
+    havekids = 0;
+80104a4f:	83 c4 10             	add    $0x10,%esp
+80104a52:	eb aa                	jmp    801049fe <wait+0x2e>
+80104a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        kfree(p->kstack);
+80104a58:	83 ec 0c             	sub    $0xc,%esp
+80104a5b:	ff 73 08             	pushl  0x8(%ebx)
+        pid = p->pid;
+80104a5e:	8b 73 10             	mov    0x10(%ebx),%esi
+        kfree(p->kstack);
+80104a61:	e8 fa e3 ff ff       	call   80102e60 <kfree>
+        freevm(p->pgdir);
+80104a66:	5a                   	pop    %edx
+80104a67:	ff 73 04             	pushl  0x4(%ebx)
+        p->kstack = 0;
+80104a6a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+        freevm(p->pgdir);
+80104a71:	e8 0a 2e 00 00       	call   80107880 <freevm>
+        release(&ptable.lock);
+80104a76:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+        p->pid = 0;
+80104a7d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+        p->parent = 0;
+80104a84:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+        p->name[0] = 0;
+80104a8b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+        p->killed = 0;
+80104a8f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+        p->state = UNUSED;
+80104a96:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+        release(&ptable.lock);
+80104a9d:	e8 6e 05 00 00       	call   80105010 <release>
+        return pid;
+80104aa2:	83 c4 10             	add    $0x10,%esp
+}
+80104aa5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104aa8:	89 f0                	mov    %esi,%eax
+80104aaa:	5b                   	pop    %ebx
+80104aab:	5e                   	pop    %esi
+80104aac:	5d                   	pop    %ebp
+80104aad:	c3                   	ret    
+      release(&ptable.lock);
+80104aae:	83 ec 0c             	sub    $0xc,%esp
+      return -1;
+80104ab1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+      release(&ptable.lock);
+80104ab6:	68 20 47 11 80       	push   $0x80114720
+80104abb:	e8 50 05 00 00       	call   80105010 <release>
+      return -1;
+80104ac0:	83 c4 10             	add    $0x10,%esp
+80104ac3:	eb e0                	jmp    80104aa5 <wait+0xd5>
+80104ac5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104ad0 <wakeup>:
+}
+
+// Wake up all processes sleeping on chan.
+void
+wakeup(void *chan)
+{
+80104ad0:	f3 0f 1e fb          	endbr32 
+80104ad4:	55                   	push   %ebp
+80104ad5:	89 e5                	mov    %esp,%ebp
+80104ad7:	53                   	push   %ebx
+80104ad8:	83 ec 10             	sub    $0x10,%esp
+80104adb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&ptable.lock);
+80104ade:	68 20 47 11 80       	push   $0x80114720
+80104ae3:	e8 68 04 00 00       	call   80104f50 <acquire>
+80104ae8:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104aeb:	b8 54 47 11 80       	mov    $0x80114754,%eax
+80104af0:	eb 10                	jmp    80104b02 <wakeup+0x32>
+80104af2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104af8:	83 c0 7c             	add    $0x7c,%eax
+80104afb:	3d 54 66 11 80       	cmp    $0x80116654,%eax
+80104b00:	74 1c                	je     80104b1e <wakeup+0x4e>
+    if(p->state == SLEEPING && p->chan == chan)
+80104b02:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104b06:	75 f0                	jne    80104af8 <wakeup+0x28>
+80104b08:	3b 58 20             	cmp    0x20(%eax),%ebx
+80104b0b:	75 eb                	jne    80104af8 <wakeup+0x28>
+      p->state = RUNNABLE;
+80104b0d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+80104b14:	83 c0 7c             	add    $0x7c,%eax
+80104b17:	3d 54 66 11 80       	cmp    $0x80116654,%eax
+80104b1c:	75 e4                	jne    80104b02 <wakeup+0x32>
+  wakeup1(chan);
+  release(&ptable.lock);
+80104b1e:	c7 45 08 20 47 11 80 	movl   $0x80114720,0x8(%ebp)
+}
+80104b25:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104b28:	c9                   	leave  
+  release(&ptable.lock);
+80104b29:	e9 e2 04 00 00       	jmp    80105010 <release>
+80104b2e:	66 90                	xchg   %ax,%ax
+
+80104b30 <kill>:
+// Kill the process with the given pid.
+// Process won't exit until it returns
+// to user space (see trap in trap.c).
+int
+kill(int pid)
+{
+80104b30:	f3 0f 1e fb          	endbr32 
+80104b34:	55                   	push   %ebp
+80104b35:	89 e5                	mov    %esp,%ebp
+80104b37:	53                   	push   %ebx
+80104b38:	83 ec 10             	sub    $0x10,%esp
+80104b3b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+
+  acquire(&ptable.lock);
+80104b3e:	68 20 47 11 80       	push   $0x80114720
+80104b43:	e8 08 04 00 00       	call   80104f50 <acquire>
+80104b48:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104b4b:	b8 54 47 11 80       	mov    $0x80114754,%eax
+80104b50:	eb 10                	jmp    80104b62 <kill+0x32>
+80104b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b58:	83 c0 7c             	add    $0x7c,%eax
+80104b5b:	3d 54 66 11 80       	cmp    $0x80116654,%eax
+80104b60:	74 36                	je     80104b98 <kill+0x68>
+    if(p->pid == pid){
+80104b62:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104b65:	75 f1                	jne    80104b58 <kill+0x28>
+      p->killed = 1;
+      // Wake process from sleep if necessary.
+      if(p->state == SLEEPING)
+80104b67:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+      p->killed = 1;
+80104b6b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+      if(p->state == SLEEPING)
+80104b72:	75 07                	jne    80104b7b <kill+0x4b>
+        p->state = RUNNABLE;
+80104b74:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+      release(&ptable.lock);
+80104b7b:	83 ec 0c             	sub    $0xc,%esp
+80104b7e:	68 20 47 11 80       	push   $0x80114720
+80104b83:	e8 88 04 00 00       	call   80105010 <release>
+      return 0;
+    }
+  }
+  release(&ptable.lock);
+  return -1;
+}
+80104b88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+      return 0;
+80104b8b:	83 c4 10             	add    $0x10,%esp
+80104b8e:	31 c0                	xor    %eax,%eax
+}
+80104b90:	c9                   	leave  
+80104b91:	c3                   	ret    
+80104b92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  release(&ptable.lock);
+80104b98:	83 ec 0c             	sub    $0xc,%esp
+80104b9b:	68 20 47 11 80       	push   $0x80114720
+80104ba0:	e8 6b 04 00 00       	call   80105010 <release>
+}
+80104ba5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  return -1;
+80104ba8:	83 c4 10             	add    $0x10,%esp
+80104bab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104bb0:	c9                   	leave  
+80104bb1:	c3                   	ret    
+80104bb2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104bb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80104bc0 <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+80104bc0:	f3 0f 1e fb          	endbr32 
+80104bc4:	55                   	push   %ebp
+80104bc5:	89 e5                	mov    %esp,%ebp
+80104bc7:	57                   	push   %edi
+80104bc8:	56                   	push   %esi
+80104bc9:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104bcc:	53                   	push   %ebx
+80104bcd:	bb c0 47 11 80       	mov    $0x801147c0,%ebx
+80104bd2:	83 ec 3c             	sub    $0x3c,%esp
+80104bd5:	eb 28                	jmp    80104bff <procdump+0x3f>
+80104bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104bde:	66 90                	xchg   %ax,%ax
+    if(p->state == SLEEPING){
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+      for(i=0; i<10 && pc[i] != 0; i++)
+        cprintf(" %p", pc[i]);
+    }
+    cprintf("\n");
+80104be0:	83 ec 0c             	sub    $0xc,%esp
+80104be3:	68 6b 8b 10 80       	push   $0x80108b6b
+80104be8:	e8 03 bb ff ff       	call   801006f0 <cprintf>
+80104bed:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80104bf0:	83 c3 7c             	add    $0x7c,%ebx
+80104bf3:	81 fb c0 66 11 80    	cmp    $0x801166c0,%ebx
+80104bf9:	0f 84 81 00 00 00    	je     80104c80 <procdump+0xc0>
+    if(p->state == UNUSED)
+80104bff:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104c02:	85 c0                	test   %eax,%eax
+80104c04:	74 ea                	je     80104bf0 <procdump+0x30>
+      state = "???";
+80104c06:	ba cb 81 10 80       	mov    $0x801081cb,%edx
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+80104c0b:	83 f8 05             	cmp    $0x5,%eax
+80104c0e:	77 11                	ja     80104c21 <procdump+0x61>
+80104c10:	8b 14 85 2c 82 10 80 	mov    -0x7fef7dd4(,%eax,4),%edx
+      state = "???";
+80104c17:	b8 cb 81 10 80       	mov    $0x801081cb,%eax
+80104c1c:	85 d2                	test   %edx,%edx
+80104c1e:	0f 44 d0             	cmove  %eax,%edx
+    cprintf("%d %s %s", p->pid, state, p->name);
+80104c21:	53                   	push   %ebx
+80104c22:	52                   	push   %edx
+80104c23:	ff 73 a4             	pushl  -0x5c(%ebx)
+80104c26:	68 cf 81 10 80       	push   $0x801081cf
+80104c2b:	e8 c0 ba ff ff       	call   801006f0 <cprintf>
+    if(p->state == SLEEPING){
+80104c30:	83 c4 10             	add    $0x10,%esp
+80104c33:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+80104c37:	75 a7                	jne    80104be0 <procdump+0x20>
+      getcallerpcs((uint*)p->context->ebp+2, pc);
+80104c39:	83 ec 08             	sub    $0x8,%esp
+80104c3c:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104c3f:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104c42:	50                   	push   %eax
+80104c43:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104c46:	8b 40 0c             	mov    0xc(%eax),%eax
+80104c49:	83 c0 08             	add    $0x8,%eax
+80104c4c:	50                   	push   %eax
+80104c4d:	e8 9e 01 00 00       	call   80104df0 <getcallerpcs>
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104c52:	83 c4 10             	add    $0x10,%esp
+80104c55:	8d 76 00             	lea    0x0(%esi),%esi
+80104c58:	8b 17                	mov    (%edi),%edx
+80104c5a:	85 d2                	test   %edx,%edx
+80104c5c:	74 82                	je     80104be0 <procdump+0x20>
+        cprintf(" %p", pc[i]);
+80104c5e:	83 ec 08             	sub    $0x8,%esp
+80104c61:	83 c7 04             	add    $0x4,%edi
+80104c64:	52                   	push   %edx
+80104c65:	68 e1 7b 10 80       	push   $0x80107be1
+80104c6a:	e8 81 ba ff ff       	call   801006f0 <cprintf>
+      for(i=0; i<10 && pc[i] != 0; i++)
+80104c6f:	83 c4 10             	add    $0x10,%esp
+80104c72:	39 fe                	cmp    %edi,%esi
+80104c74:	75 e2                	jne    80104c58 <procdump+0x98>
+80104c76:	e9 65 ff ff ff       	jmp    80104be0 <procdump+0x20>
+80104c7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c7f:	90                   	nop
+  }
+}
+80104c80:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104c83:	5b                   	pop    %ebx
+80104c84:	5e                   	pop    %esi
+80104c85:	5f                   	pop    %edi
+80104c86:	5d                   	pop    %ebp
+80104c87:	c3                   	ret    
+80104c88:	66 90                	xchg   %ax,%ax
+80104c8a:	66 90                	xchg   %ax,%ax
+80104c8c:	66 90                	xchg   %ax,%ax
+80104c8e:	66 90                	xchg   %ax,%ax
+
+80104c90 <initsleeplock>:
+#include "spinlock.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+80104c90:	f3 0f 1e fb          	endbr32 
+80104c94:	55                   	push   %ebp
+80104c95:	89 e5                	mov    %esp,%ebp
+80104c97:	53                   	push   %ebx
+80104c98:	83 ec 0c             	sub    $0xc,%esp
+80104c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  initlock(&lk->lk, "sleep lock");
+80104c9e:	68 44 82 10 80       	push   $0x80108244
+80104ca3:	8d 43 04             	lea    0x4(%ebx),%eax
+80104ca6:	50                   	push   %eax
+80104ca7:	e8 24 01 00 00       	call   80104dd0 <initlock>
+  lk->name = name;
+80104cac:	8b 45 0c             	mov    0xc(%ebp),%eax
+  lk->locked = 0;
+80104caf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+}
+80104cb5:	83 c4 10             	add    $0x10,%esp
+  lk->pid = 0;
+80104cb8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  lk->name = name;
+80104cbf:	89 43 38             	mov    %eax,0x38(%ebx)
+}
+80104cc2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104cc5:	c9                   	leave  
+80104cc6:	c3                   	ret    
+80104cc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cce:	66 90                	xchg   %ax,%ax
+
+80104cd0 <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+80104cd0:	f3 0f 1e fb          	endbr32 
+80104cd4:	55                   	push   %ebp
+80104cd5:	89 e5                	mov    %esp,%ebp
+80104cd7:	56                   	push   %esi
+80104cd8:	53                   	push   %ebx
+80104cd9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104cdc:	8d 73 04             	lea    0x4(%ebx),%esi
+80104cdf:	83 ec 0c             	sub    $0xc,%esp
+80104ce2:	56                   	push   %esi
+80104ce3:	e8 68 02 00 00       	call   80104f50 <acquire>
+  while (lk->locked) {
+80104ce8:	8b 13                	mov    (%ebx),%edx
+80104cea:	83 c4 10             	add    $0x10,%esp
+80104ced:	85 d2                	test   %edx,%edx
+80104cef:	74 1a                	je     80104d0b <acquiresleep+0x3b>
+80104cf1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    sleep(lk, &lk->lk);
+80104cf8:	83 ec 08             	sub    $0x8,%esp
+80104cfb:	56                   	push   %esi
+80104cfc:	53                   	push   %ebx
+80104cfd:	e8 0e fc ff ff       	call   80104910 <sleep>
+  while (lk->locked) {
+80104d02:	8b 03                	mov    (%ebx),%eax
+80104d04:	83 c4 10             	add    $0x10,%esp
+80104d07:	85 c0                	test   %eax,%eax
+80104d09:	75 ed                	jne    80104cf8 <acquiresleep+0x28>
+  }
+  lk->locked = 1;
+80104d0b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  lk->pid = myproc()->pid;
+80104d11:	e8 3a f6 ff ff       	call   80104350 <myproc>
+80104d16:	8b 40 10             	mov    0x10(%eax),%eax
+80104d19:	89 43 3c             	mov    %eax,0x3c(%ebx)
+  release(&lk->lk);
+80104d1c:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+80104d1f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104d22:	5b                   	pop    %ebx
+80104d23:	5e                   	pop    %esi
+80104d24:	5d                   	pop    %ebp
+  release(&lk->lk);
+80104d25:	e9 e6 02 00 00       	jmp    80105010 <release>
+80104d2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104d30 <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+80104d30:	f3 0f 1e fb          	endbr32 
+80104d34:	55                   	push   %ebp
+80104d35:	89 e5                	mov    %esp,%ebp
+80104d37:	56                   	push   %esi
+80104d38:	53                   	push   %ebx
+80104d39:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  acquire(&lk->lk);
+80104d3c:	8d 73 04             	lea    0x4(%ebx),%esi
+80104d3f:	83 ec 0c             	sub    $0xc,%esp
+80104d42:	56                   	push   %esi
+80104d43:	e8 08 02 00 00       	call   80104f50 <acquire>
+  lk->locked = 0;
+80104d48:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+  lk->pid = 0;
+80104d4e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+  wakeup(lk);
+80104d55:	89 1c 24             	mov    %ebx,(%esp)
+80104d58:	e8 73 fd ff ff       	call   80104ad0 <wakeup>
+  release(&lk->lk);
+80104d5d:	89 75 08             	mov    %esi,0x8(%ebp)
+80104d60:	83 c4 10             	add    $0x10,%esp
+}
+80104d63:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104d66:	5b                   	pop    %ebx
+80104d67:	5e                   	pop    %esi
+80104d68:	5d                   	pop    %ebp
+  release(&lk->lk);
+80104d69:	e9 a2 02 00 00       	jmp    80105010 <release>
+80104d6e:	66 90                	xchg   %ax,%ax
+
+80104d70 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+80104d70:	f3 0f 1e fb          	endbr32 
+80104d74:	55                   	push   %ebp
+80104d75:	89 e5                	mov    %esp,%ebp
+80104d77:	57                   	push   %edi
+80104d78:	31 ff                	xor    %edi,%edi
+80104d7a:	56                   	push   %esi
+80104d7b:	53                   	push   %ebx
+80104d7c:	83 ec 18             	sub    $0x18,%esp
+80104d7f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  int r;
+  
+  acquire(&lk->lk);
+80104d82:	8d 73 04             	lea    0x4(%ebx),%esi
+80104d85:	56                   	push   %esi
+80104d86:	e8 c5 01 00 00       	call   80104f50 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+80104d8b:	8b 03                	mov    (%ebx),%eax
+80104d8d:	83 c4 10             	add    $0x10,%esp
+80104d90:	85 c0                	test   %eax,%eax
+80104d92:	75 1c                	jne    80104db0 <holdingsleep+0x40>
+  release(&lk->lk);
+80104d94:	83 ec 0c             	sub    $0xc,%esp
+80104d97:	56                   	push   %esi
+80104d98:	e8 73 02 00 00       	call   80105010 <release>
+  return r;
+}
+80104d9d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104da0:	89 f8                	mov    %edi,%eax
+80104da2:	5b                   	pop    %ebx
+80104da3:	5e                   	pop    %esi
+80104da4:	5f                   	pop    %edi
+80104da5:	5d                   	pop    %ebp
+80104da6:	c3                   	ret    
+80104da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104dae:	66 90                	xchg   %ax,%ax
+  r = lk->locked && (lk->pid == myproc()->pid);
+80104db0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+80104db3:	e8 98 f5 ff ff       	call   80104350 <myproc>
+80104db8:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104dbb:	0f 94 c0             	sete   %al
+80104dbe:	0f b6 c0             	movzbl %al,%eax
+80104dc1:	89 c7                	mov    %eax,%edi
+80104dc3:	eb cf                	jmp    80104d94 <holdingsleep+0x24>
+80104dc5:	66 90                	xchg   %ax,%ax
+80104dc7:	66 90                	xchg   %ax,%ax
+80104dc9:	66 90                	xchg   %ax,%ax
+80104dcb:	66 90                	xchg   %ax,%ax
+80104dcd:	66 90                	xchg   %ax,%ax
+80104dcf:	90                   	nop
+
+80104dd0 <initlock>:
+#include "proc.h"
+#include "spinlock.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+80104dd0:	f3 0f 1e fb          	endbr32 
+80104dd4:	55                   	push   %ebp
+80104dd5:	89 e5                	mov    %esp,%ebp
+80104dd7:	8b 45 08             	mov    0x8(%ebp),%eax
+  lk->name = name;
+80104dda:	8b 55 0c             	mov    0xc(%ebp),%edx
+  lk->locked = 0;
+80104ddd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  lk->name = name;
+80104de3:	89 50 04             	mov    %edx,0x4(%eax)
+  lk->cpu = 0;
+80104de6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+}
+80104ded:	5d                   	pop    %ebp
+80104dee:	c3                   	ret    
+80104def:	90                   	nop
+
+80104df0 <getcallerpcs>:
+}
+
+// Record the current call stack in pcs[] by following the %ebp chain.
+void
+getcallerpcs(void *v, uint pcs[])
+{
+80104df0:	f3 0f 1e fb          	endbr32 
+80104df4:	55                   	push   %ebp
+  uint *ebp;
+  int i;
+
+  ebp = (uint*)v - 2;
+  for(i = 0; i < 10; i++){
+80104df5:	31 d2                	xor    %edx,%edx
+{
+80104df7:	89 e5                	mov    %esp,%ebp
+80104df9:	53                   	push   %ebx
+  ebp = (uint*)v - 2;
+80104dfa:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+80104dfd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  ebp = (uint*)v - 2;
+80104e00:	83 e8 08             	sub    $0x8,%eax
+  for(i = 0; i < 10; i++){
+80104e03:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104e07:	90                   	nop
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104e08:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104e0e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80104e14:	77 1a                	ja     80104e30 <getcallerpcs+0x40>
+      break;
+    pcs[i] = ebp[1];     // saved %eip
+80104e16:	8b 58 04             	mov    0x4(%eax),%ebx
+80104e19:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+  for(i = 0; i < 10; i++){
+80104e1c:	83 c2 01             	add    $0x1,%edx
+    ebp = (uint*)ebp[0]; // saved %ebp
+80104e1f:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+80104e21:	83 fa 0a             	cmp    $0xa,%edx
+80104e24:	75 e2                	jne    80104e08 <getcallerpcs+0x18>
+  }
+  for(; i < 10; i++)
+    pcs[i] = 0;
+}
+80104e26:	5b                   	pop    %ebx
+80104e27:	5d                   	pop    %ebp
+80104e28:	c3                   	ret    
+80104e29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(; i < 10; i++)
+80104e30:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+80104e33:	8d 51 28             	lea    0x28(%ecx),%edx
+80104e36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e3d:	8d 76 00             	lea    0x0(%esi),%esi
+    pcs[i] = 0;
+80104e40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; i < 10; i++)
+80104e46:	83 c0 04             	add    $0x4,%eax
+80104e49:	39 d0                	cmp    %edx,%eax
+80104e4b:	75 f3                	jne    80104e40 <getcallerpcs+0x50>
+}
+80104e4d:	5b                   	pop    %ebx
+80104e4e:	5d                   	pop    %ebp
+80104e4f:	c3                   	ret    
+
+80104e50 <pushcli>:
+// it takes two popcli to undo two pushcli.  Also, if interrupts
+// are off, then pushcli, popcli leaves them off.
+
+void
+pushcli(void)
+{
+80104e50:	f3 0f 1e fb          	endbr32 
+80104e54:	55                   	push   %ebp
+80104e55:	89 e5                	mov    %esp,%ebp
+80104e57:	53                   	push   %ebx
+80104e58:	83 ec 04             	sub    $0x4,%esp
+80104e5b:	9c                   	pushf  
+80104e5c:	5b                   	pop    %ebx
+  asm volatile("cli");
+80104e5d:	fa                   	cli    
+  int eflags;
+
+  eflags = readeflags();
+  cli();
+  if(mycpu()->ncli == 0)
+80104e5e:	e8 5d f4 ff ff       	call   801042c0 <mycpu>
+80104e63:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104e69:	85 c0                	test   %eax,%eax
+80104e6b:	74 13                	je     80104e80 <pushcli+0x30>
+    mycpu()->intena = eflags & FL_IF;
+  mycpu()->ncli += 1;
+80104e6d:	e8 4e f4 ff ff       	call   801042c0 <mycpu>
+80104e72:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+}
+80104e79:	83 c4 04             	add    $0x4,%esp
+80104e7c:	5b                   	pop    %ebx
+80104e7d:	5d                   	pop    %ebp
+80104e7e:	c3                   	ret    
+80104e7f:	90                   	nop
+    mycpu()->intena = eflags & FL_IF;
+80104e80:	e8 3b f4 ff ff       	call   801042c0 <mycpu>
+80104e85:	81 e3 00 02 00 00    	and    $0x200,%ebx
+80104e8b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+80104e91:	eb da                	jmp    80104e6d <pushcli+0x1d>
+80104e93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104ea0 <popcli>:
+
+void
+popcli(void)
+{
+80104ea0:	f3 0f 1e fb          	endbr32 
+80104ea4:	55                   	push   %ebp
+80104ea5:	89 e5                	mov    %esp,%ebp
+80104ea7:	83 ec 08             	sub    $0x8,%esp
+  asm volatile("pushfl; popl %0" : "=r" (eflags));
+80104eaa:	9c                   	pushf  
+80104eab:	58                   	pop    %eax
+  if(readeflags()&FL_IF)
+80104eac:	f6 c4 02             	test   $0x2,%ah
+80104eaf:	75 31                	jne    80104ee2 <popcli+0x42>
+    panic("popcli - interruptible");
+  if(--mycpu()->ncli < 0)
+80104eb1:	e8 0a f4 ff ff       	call   801042c0 <mycpu>
+80104eb6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80104ebd:	78 30                	js     80104eef <popcli+0x4f>
+    panic("popcli");
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+80104ebf:	e8 fc f3 ff ff       	call   801042c0 <mycpu>
+80104ec4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104eca:	85 d2                	test   %edx,%edx
+80104ecc:	74 02                	je     80104ed0 <popcli+0x30>
+    sti();
+}
+80104ece:	c9                   	leave  
+80104ecf:	c3                   	ret    
+  if(mycpu()->ncli == 0 && mycpu()->intena)
+80104ed0:	e8 eb f3 ff ff       	call   801042c0 <mycpu>
+80104ed5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+80104edb:	85 c0                	test   %eax,%eax
+80104edd:	74 ef                	je     80104ece <popcli+0x2e>
+  asm volatile("sti");
+80104edf:	fb                   	sti    
+}
+80104ee0:	c9                   	leave  
+80104ee1:	c3                   	ret    
+    panic("popcli - interruptible");
+80104ee2:	83 ec 0c             	sub    $0xc,%esp
+80104ee5:	68 4f 82 10 80       	push   $0x8010824f
+80104eea:	e8 a1 b4 ff ff       	call   80100390 <panic>
+    panic("popcli");
+80104eef:	83 ec 0c             	sub    $0xc,%esp
+80104ef2:	68 66 82 10 80       	push   $0x80108266
+80104ef7:	e8 94 b4 ff ff       	call   80100390 <panic>
+80104efc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104f00 <holding>:
+{
+80104f00:	f3 0f 1e fb          	endbr32 
+80104f04:	55                   	push   %ebp
+80104f05:	89 e5                	mov    %esp,%ebp
+80104f07:	56                   	push   %esi
+80104f08:	53                   	push   %ebx
+80104f09:	8b 75 08             	mov    0x8(%ebp),%esi
+80104f0c:	31 db                	xor    %ebx,%ebx
+  pushcli();
+80104f0e:	e8 3d ff ff ff       	call   80104e50 <pushcli>
+  r = lock->locked && lock->cpu == mycpu();
+80104f13:	8b 06                	mov    (%esi),%eax
+80104f15:	85 c0                	test   %eax,%eax
+80104f17:	75 0f                	jne    80104f28 <holding+0x28>
+  popcli();
+80104f19:	e8 82 ff ff ff       	call   80104ea0 <popcli>
+}
+80104f1e:	89 d8                	mov    %ebx,%eax
+80104f20:	5b                   	pop    %ebx
+80104f21:	5e                   	pop    %esi
+80104f22:	5d                   	pop    %ebp
+80104f23:	c3                   	ret    
+80104f24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  r = lock->locked && lock->cpu == mycpu();
+80104f28:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104f2b:	e8 90 f3 ff ff       	call   801042c0 <mycpu>
+80104f30:	39 c3                	cmp    %eax,%ebx
+80104f32:	0f 94 c3             	sete   %bl
+  popcli();
+80104f35:	e8 66 ff ff ff       	call   80104ea0 <popcli>
+  r = lock->locked && lock->cpu == mycpu();
+80104f3a:	0f b6 db             	movzbl %bl,%ebx
+}
+80104f3d:	89 d8                	mov    %ebx,%eax
+80104f3f:	5b                   	pop    %ebx
+80104f40:	5e                   	pop    %esi
+80104f41:	5d                   	pop    %ebp
+80104f42:	c3                   	ret    
+80104f43:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104f50 <acquire>:
+{
+80104f50:	f3 0f 1e fb          	endbr32 
+80104f54:	55                   	push   %ebp
+80104f55:	89 e5                	mov    %esp,%ebp
+80104f57:	56                   	push   %esi
+80104f58:	53                   	push   %ebx
+  pushcli(); // disable interrupts to avoid deadlock.
+80104f59:	e8 f2 fe ff ff       	call   80104e50 <pushcli>
+  if(holding(lk))
+80104f5e:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f61:	83 ec 0c             	sub    $0xc,%esp
+80104f64:	53                   	push   %ebx
+80104f65:	e8 96 ff ff ff       	call   80104f00 <holding>
+80104f6a:	83 c4 10             	add    $0x10,%esp
+80104f6d:	85 c0                	test   %eax,%eax
+80104f6f:	0f 85 7f 00 00 00    	jne    80104ff4 <acquire+0xa4>
+80104f75:	89 c6                	mov    %eax,%esi
+  asm volatile("lock; xchgl %0, %1" :
+80104f77:	ba 01 00 00 00       	mov    $0x1,%edx
+80104f7c:	eb 05                	jmp    80104f83 <acquire+0x33>
+80104f7e:	66 90                	xchg   %ax,%ax
+80104f80:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f83:	89 d0                	mov    %edx,%eax
+80104f85:	f0 87 03             	lock xchg %eax,(%ebx)
+  while(xchg(&lk->locked, 1) != 0)
+80104f88:	85 c0                	test   %eax,%eax
+80104f8a:	75 f4                	jne    80104f80 <acquire+0x30>
+  __sync_synchronize();
+80104f8c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  lk->cpu = mycpu();
+80104f91:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104f94:	e8 27 f3 ff ff       	call   801042c0 <mycpu>
+80104f99:	89 43 08             	mov    %eax,0x8(%ebx)
+  ebp = (uint*)v - 2;
+80104f9c:	89 e8                	mov    %ebp,%eax
+80104f9e:	66 90                	xchg   %ax,%ax
+    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
+80104fa0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+80104fa6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+80104fac:	77 22                	ja     80104fd0 <acquire+0x80>
+    pcs[i] = ebp[1];     // saved %eip
+80104fae:	8b 50 04             	mov    0x4(%eax),%edx
+80104fb1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+  for(i = 0; i < 10; i++){
+80104fb5:	83 c6 01             	add    $0x1,%esi
+    ebp = (uint*)ebp[0]; // saved %ebp
+80104fb8:	8b 00                	mov    (%eax),%eax
+  for(i = 0; i < 10; i++){
+80104fba:	83 fe 0a             	cmp    $0xa,%esi
+80104fbd:	75 e1                	jne    80104fa0 <acquire+0x50>
+}
+80104fbf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104fc2:	5b                   	pop    %ebx
+80104fc3:	5e                   	pop    %esi
+80104fc4:	5d                   	pop    %ebp
+80104fc5:	c3                   	ret    
+80104fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fcd:	8d 76 00             	lea    0x0(%esi),%esi
+  for(; i < 10; i++)
+80104fd0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+80104fd4:	83 c3 34             	add    $0x34,%ebx
+80104fd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fde:	66 90                	xchg   %ax,%ax
+    pcs[i] = 0;
+80104fe0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+  for(; i < 10; i++)
+80104fe6:	83 c0 04             	add    $0x4,%eax
+80104fe9:	39 d8                	cmp    %ebx,%eax
+80104feb:	75 f3                	jne    80104fe0 <acquire+0x90>
+}
+80104fed:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104ff0:	5b                   	pop    %ebx
+80104ff1:	5e                   	pop    %esi
+80104ff2:	5d                   	pop    %ebp
+80104ff3:	c3                   	ret    
+    panic("acquire");
+80104ff4:	83 ec 0c             	sub    $0xc,%esp
+80104ff7:	68 6d 82 10 80       	push   $0x8010826d
+80104ffc:	e8 8f b3 ff ff       	call   80100390 <panic>
+80105001:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105008:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010500f:	90                   	nop
+
+80105010 <release>:
+{
+80105010:	f3 0f 1e fb          	endbr32 
+80105014:	55                   	push   %ebp
+80105015:	89 e5                	mov    %esp,%ebp
+80105017:	53                   	push   %ebx
+80105018:	83 ec 10             	sub    $0x10,%esp
+8010501b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(!holding(lk))
+8010501e:	53                   	push   %ebx
+8010501f:	e8 dc fe ff ff       	call   80104f00 <holding>
+80105024:	83 c4 10             	add    $0x10,%esp
+80105027:	85 c0                	test   %eax,%eax
+80105029:	74 22                	je     8010504d <release+0x3d>
+  lk->pcs[0] = 0;
+8010502b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+  lk->cpu = 0;
+80105032:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+  __sync_synchronize();
+80105039:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
+8010503e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+}
+80105044:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105047:	c9                   	leave  
+  popcli();
+80105048:	e9 53 fe ff ff       	jmp    80104ea0 <popcli>
+    panic("release");
+8010504d:	83 ec 0c             	sub    $0xc,%esp
+80105050:	68 75 82 10 80       	push   $0x80108275
+80105055:	e8 36 b3 ff ff       	call   80100390 <panic>
+8010505a:	66 90                	xchg   %ax,%ax
+8010505c:	66 90                	xchg   %ax,%ax
+8010505e:	66 90                	xchg   %ax,%ax
+
+80105060 <memset>:
+#include "types.h"
+#include "x86.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+80105060:	f3 0f 1e fb          	endbr32 
+80105064:	55                   	push   %ebp
+80105065:	89 e5                	mov    %esp,%ebp
+80105067:	57                   	push   %edi
+80105068:	8b 55 08             	mov    0x8(%ebp),%edx
+8010506b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010506e:	53                   	push   %ebx
+8010506f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if ((int)dst%4 == 0 && n%4 == 0){
+80105072:	89 d7                	mov    %edx,%edi
+80105074:	09 cf                	or     %ecx,%edi
+80105076:	83 e7 03             	and    $0x3,%edi
+80105079:	75 25                	jne    801050a0 <memset+0x40>
+    c &= 0xFF;
+8010507b:	0f b6 f8             	movzbl %al,%edi
+    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
+8010507e:	c1 e0 18             	shl    $0x18,%eax
+80105081:	89 fb                	mov    %edi,%ebx
+80105083:	c1 e9 02             	shr    $0x2,%ecx
+80105086:	c1 e3 10             	shl    $0x10,%ebx
+80105089:	09 d8                	or     %ebx,%eax
+8010508b:	09 f8                	or     %edi,%eax
+8010508d:	c1 e7 08             	shl    $0x8,%edi
+80105090:	09 f8                	or     %edi,%eax
+  asm volatile("cld; rep stosl" :
+80105092:	89 d7                	mov    %edx,%edi
+80105094:	fc                   	cld    
+80105095:	f3 ab                	rep stos %eax,%es:(%edi)
+  } else
+    stosb(dst, c, n);
+  return dst;
+}
+80105097:	5b                   	pop    %ebx
+80105098:	89 d0                	mov    %edx,%eax
+8010509a:	5f                   	pop    %edi
+8010509b:	5d                   	pop    %ebp
+8010509c:	c3                   	ret    
+8010509d:	8d 76 00             	lea    0x0(%esi),%esi
+  asm volatile("cld; rep stosb" :
+801050a0:	89 d7                	mov    %edx,%edi
+801050a2:	fc                   	cld    
+801050a3:	f3 aa                	rep stos %al,%es:(%edi)
+801050a5:	5b                   	pop    %ebx
+801050a6:	89 d0                	mov    %edx,%eax
+801050a8:	5f                   	pop    %edi
+801050a9:	5d                   	pop    %ebp
+801050aa:	c3                   	ret    
+801050ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050af:	90                   	nop
+
+801050b0 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+801050b0:	f3 0f 1e fb          	endbr32 
+801050b4:	55                   	push   %ebp
+801050b5:	89 e5                	mov    %esp,%ebp
+801050b7:	56                   	push   %esi
+801050b8:	8b 75 10             	mov    0x10(%ebp),%esi
+801050bb:	8b 55 08             	mov    0x8(%ebp),%edx
+801050be:	53                   	push   %ebx
+801050bf:	8b 45 0c             	mov    0xc(%ebp),%eax
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+801050c2:	85 f6                	test   %esi,%esi
+801050c4:	74 2a                	je     801050f0 <memcmp+0x40>
+801050c6:	01 c6                	add    %eax,%esi
+801050c8:	eb 10                	jmp    801050da <memcmp+0x2a>
+801050ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(*s1 != *s2)
+      return *s1 - *s2;
+    s1++, s2++;
+801050d0:	83 c0 01             	add    $0x1,%eax
+801050d3:	83 c2 01             	add    $0x1,%edx
+  while(n-- > 0){
+801050d6:	39 f0                	cmp    %esi,%eax
+801050d8:	74 16                	je     801050f0 <memcmp+0x40>
+    if(*s1 != *s2)
+801050da:	0f b6 0a             	movzbl (%edx),%ecx
+801050dd:	0f b6 18             	movzbl (%eax),%ebx
+801050e0:	38 d9                	cmp    %bl,%cl
+801050e2:	74 ec                	je     801050d0 <memcmp+0x20>
+      return *s1 - *s2;
+801050e4:	0f b6 c1             	movzbl %cl,%eax
+801050e7:	29 d8                	sub    %ebx,%eax
+  }
+
+  return 0;
+}
+801050e9:	5b                   	pop    %ebx
+801050ea:	5e                   	pop    %esi
+801050eb:	5d                   	pop    %ebp
+801050ec:	c3                   	ret    
+801050ed:	8d 76 00             	lea    0x0(%esi),%esi
+801050f0:	5b                   	pop    %ebx
+  return 0;
+801050f1:	31 c0                	xor    %eax,%eax
+}
+801050f3:	5e                   	pop    %esi
+801050f4:	5d                   	pop    %ebp
+801050f5:	c3                   	ret    
+801050f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801050fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105100 <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+80105100:	f3 0f 1e fb          	endbr32 
+80105104:	55                   	push   %ebp
+80105105:	89 e5                	mov    %esp,%ebp
+80105107:	57                   	push   %edi
+80105108:	8b 55 08             	mov    0x8(%ebp),%edx
+8010510b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010510e:	56                   	push   %esi
+8010510f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  const char *s;
+  char *d;
+
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+80105112:	39 d6                	cmp    %edx,%esi
+80105114:	73 2a                	jae    80105140 <memmove+0x40>
+80105116:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80105119:	39 fa                	cmp    %edi,%edx
+8010511b:	73 23                	jae    80105140 <memmove+0x40>
+8010511d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+    s += n;
+    d += n;
+    while(n-- > 0)
+80105120:	85 c9                	test   %ecx,%ecx
+80105122:	74 13                	je     80105137 <memmove+0x37>
+80105124:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      *--d = *--s;
+80105128:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+8010512c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+    while(n-- > 0)
+8010512f:	83 e8 01             	sub    $0x1,%eax
+80105132:	83 f8 ff             	cmp    $0xffffffff,%eax
+80105135:	75 f1                	jne    80105128 <memmove+0x28>
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+80105137:	5e                   	pop    %esi
+80105138:	89 d0                	mov    %edx,%eax
+8010513a:	5f                   	pop    %edi
+8010513b:	5d                   	pop    %ebp
+8010513c:	c3                   	ret    
+8010513d:	8d 76 00             	lea    0x0(%esi),%esi
+    while(n-- > 0)
+80105140:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80105143:	89 d7                	mov    %edx,%edi
+80105145:	85 c9                	test   %ecx,%ecx
+80105147:	74 ee                	je     80105137 <memmove+0x37>
+80105149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      *d++ = *s++;
+80105150:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+    while(n-- > 0)
+80105151:	39 f0                	cmp    %esi,%eax
+80105153:	75 fb                	jne    80105150 <memmove+0x50>
+}
+80105155:	5e                   	pop    %esi
+80105156:	89 d0                	mov    %edx,%eax
+80105158:	5f                   	pop    %edi
+80105159:	5d                   	pop    %ebp
+8010515a:	c3                   	ret    
+8010515b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010515f:	90                   	nop
+
+80105160 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+80105160:	f3 0f 1e fb          	endbr32 
+  return memmove(dst, src, n);
+80105164:	eb 9a                	jmp    80105100 <memmove>
+80105166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010516d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105170 <strncmp>:
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+80105170:	f3 0f 1e fb          	endbr32 
+80105174:	55                   	push   %ebp
+80105175:	89 e5                	mov    %esp,%ebp
+80105177:	56                   	push   %esi
+80105178:	8b 75 10             	mov    0x10(%ebp),%esi
+8010517b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010517e:	53                   	push   %ebx
+8010517f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  while(n > 0 && *p && *p == *q)
+80105182:	85 f6                	test   %esi,%esi
+80105184:	74 32                	je     801051b8 <strncmp+0x48>
+80105186:	01 c6                	add    %eax,%esi
+80105188:	eb 14                	jmp    8010519e <strncmp+0x2e>
+8010518a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105190:	38 da                	cmp    %bl,%dl
+80105192:	75 14                	jne    801051a8 <strncmp+0x38>
+    n--, p++, q++;
+80105194:	83 c0 01             	add    $0x1,%eax
+80105197:	83 c1 01             	add    $0x1,%ecx
+  while(n > 0 && *p && *p == *q)
+8010519a:	39 f0                	cmp    %esi,%eax
+8010519c:	74 1a                	je     801051b8 <strncmp+0x48>
+8010519e:	0f b6 11             	movzbl (%ecx),%edx
+801051a1:	0f b6 18             	movzbl (%eax),%ebx
+801051a4:	84 d2                	test   %dl,%dl
+801051a6:	75 e8                	jne    80105190 <strncmp+0x20>
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+801051a8:	0f b6 c2             	movzbl %dl,%eax
+801051ab:	29 d8                	sub    %ebx,%eax
+}
+801051ad:	5b                   	pop    %ebx
+801051ae:	5e                   	pop    %esi
+801051af:	5d                   	pop    %ebp
+801051b0:	c3                   	ret    
+801051b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801051b8:	5b                   	pop    %ebx
+    return 0;
+801051b9:	31 c0                	xor    %eax,%eax
+}
+801051bb:	5e                   	pop    %esi
+801051bc:	5d                   	pop    %ebp
+801051bd:	c3                   	ret    
+801051be:	66 90                	xchg   %ax,%ax
+
+801051c0 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+801051c0:	f3 0f 1e fb          	endbr32 
+801051c4:	55                   	push   %ebp
+801051c5:	89 e5                	mov    %esp,%ebp
+801051c7:	57                   	push   %edi
+801051c8:	56                   	push   %esi
+801051c9:	8b 75 08             	mov    0x8(%ebp),%esi
+801051cc:	53                   	push   %ebx
+801051cd:	8b 45 10             	mov    0x10(%ebp),%eax
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+801051d0:	89 f2                	mov    %esi,%edx
+801051d2:	eb 1b                	jmp    801051ef <strncpy+0x2f>
+801051d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801051d8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+801051dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801051df:	83 c2 01             	add    $0x1,%edx
+801051e2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+801051e6:	89 f9                	mov    %edi,%ecx
+801051e8:	88 4a ff             	mov    %cl,-0x1(%edx)
+801051eb:	84 c9                	test   %cl,%cl
+801051ed:	74 09                	je     801051f8 <strncpy+0x38>
+801051ef:	89 c3                	mov    %eax,%ebx
+801051f1:	83 e8 01             	sub    $0x1,%eax
+801051f4:	85 db                	test   %ebx,%ebx
+801051f6:	7f e0                	jg     801051d8 <strncpy+0x18>
+    ;
+  while(n-- > 0)
+801051f8:	89 d1                	mov    %edx,%ecx
+801051fa:	85 c0                	test   %eax,%eax
+801051fc:	7e 15                	jle    80105213 <strncpy+0x53>
+801051fe:	66 90                	xchg   %ax,%ax
+    *s++ = 0;
+80105200:	83 c1 01             	add    $0x1,%ecx
+80105203:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+  while(n-- > 0)
+80105207:	89 c8                	mov    %ecx,%eax
+80105209:	f7 d0                	not    %eax
+8010520b:	01 d0                	add    %edx,%eax
+8010520d:	01 d8                	add    %ebx,%eax
+8010520f:	85 c0                	test   %eax,%eax
+80105211:	7f ed                	jg     80105200 <strncpy+0x40>
+  return os;
+}
+80105213:	5b                   	pop    %ebx
+80105214:	89 f0                	mov    %esi,%eax
+80105216:	5e                   	pop    %esi
+80105217:	5f                   	pop    %edi
+80105218:	5d                   	pop    %ebp
+80105219:	c3                   	ret    
+8010521a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105220 <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+80105220:	f3 0f 1e fb          	endbr32 
+80105224:	55                   	push   %ebp
+80105225:	89 e5                	mov    %esp,%ebp
+80105227:	56                   	push   %esi
+80105228:	8b 55 10             	mov    0x10(%ebp),%edx
+8010522b:	8b 75 08             	mov    0x8(%ebp),%esi
+8010522e:	53                   	push   %ebx
+8010522f:	8b 45 0c             	mov    0xc(%ebp),%eax
+  char *os;
+
+  os = s;
+  if(n <= 0)
+80105232:	85 d2                	test   %edx,%edx
+80105234:	7e 21                	jle    80105257 <safestrcpy+0x37>
+80105236:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+8010523a:	89 f2                	mov    %esi,%edx
+8010523c:	eb 12                	jmp    80105250 <safestrcpy+0x30>
+8010523e:	66 90                	xchg   %ax,%ax
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+80105240:	0f b6 08             	movzbl (%eax),%ecx
+80105243:	83 c0 01             	add    $0x1,%eax
+80105246:	83 c2 01             	add    $0x1,%edx
+80105249:	88 4a ff             	mov    %cl,-0x1(%edx)
+8010524c:	84 c9                	test   %cl,%cl
+8010524e:	74 04                	je     80105254 <safestrcpy+0x34>
+80105250:	39 d8                	cmp    %ebx,%eax
+80105252:	75 ec                	jne    80105240 <safestrcpy+0x20>
+    ;
+  *s = 0;
+80105254:	c6 02 00             	movb   $0x0,(%edx)
+  return os;
+}
+80105257:	89 f0                	mov    %esi,%eax
+80105259:	5b                   	pop    %ebx
+8010525a:	5e                   	pop    %esi
+8010525b:	5d                   	pop    %ebp
+8010525c:	c3                   	ret    
+8010525d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105260 <strlen>:
+
+int
+strlen(const char *s)
+{
+80105260:	f3 0f 1e fb          	endbr32 
+80105264:	55                   	push   %ebp
+  int n;
+
+  for(n = 0; s[n]; n++)
+80105265:	31 c0                	xor    %eax,%eax
+{
+80105267:	89 e5                	mov    %esp,%ebp
+80105269:	8b 55 08             	mov    0x8(%ebp),%edx
+  for(n = 0; s[n]; n++)
+8010526c:	80 3a 00             	cmpb   $0x0,(%edx)
+8010526f:	74 10                	je     80105281 <strlen+0x21>
+80105271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105278:	83 c0 01             	add    $0x1,%eax
+8010527b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+8010527f:	75 f7                	jne    80105278 <strlen+0x18>
+    ;
+  return n;
+}
+80105281:	5d                   	pop    %ebp
+80105282:	c3                   	ret    
+
+80105283 <swtch>:
+# a struct context, and save its address in *old.
+# Switch stacks to new and pop previously-saved registers.
+
+.globl swtch
+swtch:
+  movl 4(%esp), %eax
+80105283:	8b 44 24 04          	mov    0x4(%esp),%eax
+  movl 8(%esp), %edx
+80105287:	8b 54 24 08          	mov    0x8(%esp),%edx
+
+  # Save old callee-saved registers
+  pushl %ebp
+8010528b:	55                   	push   %ebp
+  pushl %ebx
+8010528c:	53                   	push   %ebx
+  pushl %esi
+8010528d:	56                   	push   %esi
+  pushl %edi
+8010528e:	57                   	push   %edi
+
+  # Switch stacks
+  movl %esp, (%eax)
+8010528f:	89 20                	mov    %esp,(%eax)
+  movl %edx, %esp
+80105291:	89 d4                	mov    %edx,%esp
+
+  # Load new callee-saved registers
+  popl %edi
+80105293:	5f                   	pop    %edi
+  popl %esi
+80105294:	5e                   	pop    %esi
+  popl %ebx
+80105295:	5b                   	pop    %ebx
+  popl %ebp
+80105296:	5d                   	pop    %ebp
+  ret
+80105297:	c3                   	ret    
+80105298:	66 90                	xchg   %ax,%ax
+8010529a:	66 90                	xchg   %ax,%ax
+8010529c:	66 90                	xchg   %ax,%ax
+8010529e:	66 90                	xchg   %ax,%ax
+
+801052a0 <fetchint>:
+// to a saved program counter, and then the first argument.
+
+// Fetch the int at addr from the current process.
+int
+fetchint(uint addr, int *ip)
+{
+801052a0:	f3 0f 1e fb          	endbr32 
+801052a4:	55                   	push   %ebp
+801052a5:	89 e5                	mov    %esp,%ebp
+801052a7:	53                   	push   %ebx
+801052a8:	83 ec 04             	sub    $0x4,%esp
+801052ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *curproc = myproc();
+801052ae:	e8 9d f0 ff ff       	call   80104350 <myproc>
+
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+801052b3:	8b 00                	mov    (%eax),%eax
+801052b5:	39 d8                	cmp    %ebx,%eax
+801052b7:	76 17                	jbe    801052d0 <fetchint+0x30>
+801052b9:	8d 53 04             	lea    0x4(%ebx),%edx
+801052bc:	39 d0                	cmp    %edx,%eax
+801052be:	72 10                	jb     801052d0 <fetchint+0x30>
+    return -1;
+  *ip = *(int*)(addr);
+801052c0:	8b 45 0c             	mov    0xc(%ebp),%eax
+801052c3:	8b 13                	mov    (%ebx),%edx
+801052c5:	89 10                	mov    %edx,(%eax)
+  return 0;
+801052c7:	31 c0                	xor    %eax,%eax
+}
+801052c9:	83 c4 04             	add    $0x4,%esp
+801052cc:	5b                   	pop    %ebx
+801052cd:	5d                   	pop    %ebp
+801052ce:	c3                   	ret    
+801052cf:	90                   	nop
+    return -1;
+801052d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801052d5:	eb f2                	jmp    801052c9 <fetchint+0x29>
+801052d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801052de:	66 90                	xchg   %ax,%ax
+
+801052e0 <fetchstr>:
+// Fetch the nul-terminated string at addr from the current process.
+// Doesn't actually copy the string - just sets *pp to point at it.
+// Returns length of string, not including nul.
+int
+fetchstr(uint addr, char **pp)
+{
+801052e0:	f3 0f 1e fb          	endbr32 
+801052e4:	55                   	push   %ebp
+801052e5:	89 e5                	mov    %esp,%ebp
+801052e7:	53                   	push   %ebx
+801052e8:	83 ec 04             	sub    $0x4,%esp
+801052eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  char *s, *ep;
+  struct proc *curproc = myproc();
+801052ee:	e8 5d f0 ff ff       	call   80104350 <myproc>
+
+  if(addr >= curproc->sz)
+801052f3:	39 18                	cmp    %ebx,(%eax)
+801052f5:	76 31                	jbe    80105328 <fetchstr+0x48>
+    return -1;
+  *pp = (char*)addr;
+801052f7:	8b 55 0c             	mov    0xc(%ebp),%edx
+801052fa:	89 1a                	mov    %ebx,(%edx)
+  ep = (char*)curproc->sz;
+801052fc:	8b 10                	mov    (%eax),%edx
+  for(s = *pp; s < ep; s++){
+801052fe:	39 d3                	cmp    %edx,%ebx
+80105300:	73 26                	jae    80105328 <fetchstr+0x48>
+80105302:	89 d8                	mov    %ebx,%eax
+80105304:	eb 11                	jmp    80105317 <fetchstr+0x37>
+80105306:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010530d:	8d 76 00             	lea    0x0(%esi),%esi
+80105310:	83 c0 01             	add    $0x1,%eax
+80105313:	39 c2                	cmp    %eax,%edx
+80105315:	76 11                	jbe    80105328 <fetchstr+0x48>
+    if(*s == 0)
+80105317:	80 38 00             	cmpb   $0x0,(%eax)
+8010531a:	75 f4                	jne    80105310 <fetchstr+0x30>
+      return s - *pp;
+  }
+  return -1;
+}
+8010531c:	83 c4 04             	add    $0x4,%esp
+      return s - *pp;
+8010531f:	29 d8                	sub    %ebx,%eax
+}
+80105321:	5b                   	pop    %ebx
+80105322:	5d                   	pop    %ebp
+80105323:	c3                   	ret    
+80105324:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105328:	83 c4 04             	add    $0x4,%esp
+    return -1;
+8010532b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105330:	5b                   	pop    %ebx
+80105331:	5d                   	pop    %ebp
+80105332:	c3                   	ret    
+80105333:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010533a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105340 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+int
+argint(int n, int *ip)
+{
+80105340:	f3 0f 1e fb          	endbr32 
+80105344:	55                   	push   %ebp
+80105345:	89 e5                	mov    %esp,%ebp
+80105347:	56                   	push   %esi
+80105348:	53                   	push   %ebx
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80105349:	e8 02 f0 ff ff       	call   80104350 <myproc>
+8010534e:	8b 55 08             	mov    0x8(%ebp),%edx
+80105351:	8b 40 18             	mov    0x18(%eax),%eax
+80105354:	8b 40 44             	mov    0x44(%eax),%eax
+80105357:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+  struct proc *curproc = myproc();
+8010535a:	e8 f1 ef ff ff       	call   80104350 <myproc>
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+8010535f:	8d 73 04             	lea    0x4(%ebx),%esi
+  if(addr >= curproc->sz || addr+4 > curproc->sz)
+80105362:	8b 00                	mov    (%eax),%eax
+80105364:	39 c6                	cmp    %eax,%esi
+80105366:	73 18                	jae    80105380 <argint+0x40>
+80105368:	8d 53 08             	lea    0x8(%ebx),%edx
+8010536b:	39 d0                	cmp    %edx,%eax
+8010536d:	72 11                	jb     80105380 <argint+0x40>
+  *ip = *(int*)(addr);
+8010536f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80105372:	8b 53 04             	mov    0x4(%ebx),%edx
+80105375:	89 10                	mov    %edx,(%eax)
+  return 0;
+80105377:	31 c0                	xor    %eax,%eax
+}
+80105379:	5b                   	pop    %ebx
+8010537a:	5e                   	pop    %esi
+8010537b:	5d                   	pop    %ebp
+8010537c:	c3                   	ret    
+8010537d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105380:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+80105385:	eb f2                	jmp    80105379 <argint+0x39>
+80105387:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010538e:	66 90                	xchg   %ax,%ax
+
+80105390 <argptr>:
+// Fetch the nth word-sized system call argument as a pointer
+// to a block of memory of size bytes.  Check that the pointer
+// lies within the process address space.
+int
+argptr(int n, char **pp, int size)
+{
+80105390:	f3 0f 1e fb          	endbr32 
+80105394:	55                   	push   %ebp
+80105395:	89 e5                	mov    %esp,%ebp
+80105397:	56                   	push   %esi
+80105398:	53                   	push   %ebx
+80105399:	83 ec 10             	sub    $0x10,%esp
+8010539c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int i;
+  struct proc *curproc = myproc();
+8010539f:	e8 ac ef ff ff       	call   80104350 <myproc>
+ 
+  if(argint(n, &i) < 0)
+801053a4:	83 ec 08             	sub    $0x8,%esp
+  struct proc *curproc = myproc();
+801053a7:	89 c6                	mov    %eax,%esi
+  if(argint(n, &i) < 0)
+801053a9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801053ac:	50                   	push   %eax
+801053ad:	ff 75 08             	pushl  0x8(%ebp)
+801053b0:	e8 8b ff ff ff       	call   80105340 <argint>
+    return -1;
+  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+801053b5:	83 c4 10             	add    $0x10,%esp
+801053b8:	85 c0                	test   %eax,%eax
+801053ba:	78 24                	js     801053e0 <argptr+0x50>
+801053bc:	85 db                	test   %ebx,%ebx
+801053be:	78 20                	js     801053e0 <argptr+0x50>
+801053c0:	8b 16                	mov    (%esi),%edx
+801053c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801053c5:	39 c2                	cmp    %eax,%edx
+801053c7:	76 17                	jbe    801053e0 <argptr+0x50>
+801053c9:	01 c3                	add    %eax,%ebx
+801053cb:	39 da                	cmp    %ebx,%edx
+801053cd:	72 11                	jb     801053e0 <argptr+0x50>
+    return -1;
+  *pp = (char*)i;
+801053cf:	8b 55 0c             	mov    0xc(%ebp),%edx
+801053d2:	89 02                	mov    %eax,(%edx)
+  return 0;
+801053d4:	31 c0                	xor    %eax,%eax
+}
+801053d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801053d9:	5b                   	pop    %ebx
+801053da:	5e                   	pop    %esi
+801053db:	5d                   	pop    %ebp
+801053dc:	c3                   	ret    
+801053dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801053e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801053e5:	eb ef                	jmp    801053d6 <argptr+0x46>
+801053e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801053ee:	66 90                	xchg   %ax,%ax
+
+801053f0 <argstr>:
+// Check that the pointer is valid and the string is nul-terminated.
+// (There is no shared writable memory, so the string can't change
+// between this check and being used by the kernel.)
+int
+argstr(int n, char **pp)
+{
+801053f0:	f3 0f 1e fb          	endbr32 
+801053f4:	55                   	push   %ebp
+801053f5:	89 e5                	mov    %esp,%ebp
+801053f7:	83 ec 20             	sub    $0x20,%esp
+  int addr;
+  if(argint(n, &addr) < 0)
+801053fa:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801053fd:	50                   	push   %eax
+801053fe:	ff 75 08             	pushl  0x8(%ebp)
+80105401:	e8 3a ff ff ff       	call   80105340 <argint>
+80105406:	83 c4 10             	add    $0x10,%esp
+80105409:	85 c0                	test   %eax,%eax
+8010540b:	78 13                	js     80105420 <argstr+0x30>
+    return -1;
+  return fetchstr(addr, pp);
+8010540d:	83 ec 08             	sub    $0x8,%esp
+80105410:	ff 75 0c             	pushl  0xc(%ebp)
+80105413:	ff 75 f4             	pushl  -0xc(%ebp)
+80105416:	e8 c5 fe ff ff       	call   801052e0 <fetchstr>
+8010541b:	83 c4 10             	add    $0x10,%esp
+}
+8010541e:	c9                   	leave  
+8010541f:	c3                   	ret    
+80105420:	c9                   	leave  
+    return -1;
+80105421:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105426:	c3                   	ret    
+80105427:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010542e:	66 90                	xchg   %ax,%ax
+
+80105430 <syscall>:
+[SYS_history] sys_history,
+};
+
+void
+syscall(void)
+{
+80105430:	f3 0f 1e fb          	endbr32 
+80105434:	55                   	push   %ebp
+80105435:	89 e5                	mov    %esp,%ebp
+80105437:	53                   	push   %ebx
+80105438:	83 ec 04             	sub    $0x4,%esp
+  int num;
+  struct proc *curproc = myproc();
+8010543b:	e8 10 ef ff ff       	call   80104350 <myproc>
+80105440:	89 c3                	mov    %eax,%ebx
+
+  num = curproc->tf->eax;
+80105442:	8b 40 18             	mov    0x18(%eax),%eax
+80105445:	8b 40 1c             	mov    0x1c(%eax),%eax
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+80105448:	8d 50 ff             	lea    -0x1(%eax),%edx
+8010544b:	83 fa 16             	cmp    $0x16,%edx
+8010544e:	77 20                	ja     80105470 <syscall+0x40>
+80105450:	8b 14 85 a0 82 10 80 	mov    -0x7fef7d60(,%eax,4),%edx
+80105457:	85 d2                	test   %edx,%edx
+80105459:	74 15                	je     80105470 <syscall+0x40>
+    curproc->tf->eax = syscalls[num]();
+8010545b:	ff d2                	call   *%edx
+8010545d:	89 c2                	mov    %eax,%edx
+8010545f:	8b 43 18             	mov    0x18(%ebx),%eax
+80105462:	89 50 1c             	mov    %edx,0x1c(%eax)
+  } else {
+    cprintf("%d %s: unknown sys call %d\n",
+            curproc->pid, curproc->name, num);
+    curproc->tf->eax = -1;
+  }
+}
+80105465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105468:	c9                   	leave  
+80105469:	c3                   	ret    
+8010546a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    cprintf("%d %s: unknown sys call %d\n",
+80105470:	50                   	push   %eax
+            curproc->pid, curproc->name, num);
+80105471:	8d 43 6c             	lea    0x6c(%ebx),%eax
+    cprintf("%d %s: unknown sys call %d\n",
+80105474:	50                   	push   %eax
+80105475:	ff 73 10             	pushl  0x10(%ebx)
+80105478:	68 7d 82 10 80       	push   $0x8010827d
+8010547d:	e8 6e b2 ff ff       	call   801006f0 <cprintf>
+    curproc->tf->eax = -1;
+80105482:	8b 43 18             	mov    0x18(%ebx),%eax
+80105485:	83 c4 10             	add    $0x10,%esp
+80105488:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+8010548f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105492:	c9                   	leave  
+80105493:	c3                   	ret    
+80105494:	66 90                	xchg   %ax,%ax
+80105496:	66 90                	xchg   %ax,%ax
+80105498:	66 90                	xchg   %ax,%ax
+8010549a:	66 90                	xchg   %ax,%ax
+8010549c:	66 90                	xchg   %ax,%ax
+8010549e:	66 90                	xchg   %ax,%ax
+
+801054a0 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+801054a0:	55                   	push   %ebp
+801054a1:	89 e5                	mov    %esp,%ebp
+801054a3:	57                   	push   %edi
+801054a4:	56                   	push   %esi
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+801054a5:	8d 7d da             	lea    -0x26(%ebp),%edi
+{
+801054a8:	53                   	push   %ebx
+801054a9:	83 ec 34             	sub    $0x34,%esp
+801054ac:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+801054af:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  if((dp = nameiparent(path, name)) == 0)
+801054b2:	57                   	push   %edi
+801054b3:	50                   	push   %eax
+{
+801054b4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+801054b7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+  if((dp = nameiparent(path, name)) == 0)
+801054ba:	e8 81 d5 ff ff       	call   80102a40 <nameiparent>
+801054bf:	83 c4 10             	add    $0x10,%esp
+801054c2:	85 c0                	test   %eax,%eax
+801054c4:	0f 84 46 01 00 00    	je     80105610 <create+0x170>
+    return 0;
+  ilock(dp);
+801054ca:	83 ec 0c             	sub    $0xc,%esp
+801054cd:	89 c3                	mov    %eax,%ebx
+801054cf:	50                   	push   %eax
+801054d0:	e8 7b cc ff ff       	call   80102150 <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+801054d5:	83 c4 0c             	add    $0xc,%esp
+801054d8:	6a 00                	push   $0x0
+801054da:	57                   	push   %edi
+801054db:	53                   	push   %ebx
+801054dc:	e8 bf d1 ff ff       	call   801026a0 <dirlookup>
+801054e1:	83 c4 10             	add    $0x10,%esp
+801054e4:	89 c6                	mov    %eax,%esi
+801054e6:	85 c0                	test   %eax,%eax
+801054e8:	74 56                	je     80105540 <create+0xa0>
+    iunlockput(dp);
+801054ea:	83 ec 0c             	sub    $0xc,%esp
+801054ed:	53                   	push   %ebx
+801054ee:	e8 fd ce ff ff       	call   801023f0 <iunlockput>
+    ilock(ip);
+801054f3:	89 34 24             	mov    %esi,(%esp)
+801054f6:	e8 55 cc ff ff       	call   80102150 <ilock>
+    if(type == T_FILE && ip->type == T_FILE)
+801054fb:	83 c4 10             	add    $0x10,%esp
+801054fe:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80105503:	75 1b                	jne    80105520 <create+0x80>
+80105505:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+8010550a:	75 14                	jne    80105520 <create+0x80>
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+8010550c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010550f:	89 f0                	mov    %esi,%eax
+80105511:	5b                   	pop    %ebx
+80105512:	5e                   	pop    %esi
+80105513:	5f                   	pop    %edi
+80105514:	5d                   	pop    %ebp
+80105515:	c3                   	ret    
+80105516:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010551d:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(ip);
+80105520:	83 ec 0c             	sub    $0xc,%esp
+80105523:	56                   	push   %esi
+    return 0;
+80105524:	31 f6                	xor    %esi,%esi
+    iunlockput(ip);
+80105526:	e8 c5 ce ff ff       	call   801023f0 <iunlockput>
+    return 0;
+8010552b:	83 c4 10             	add    $0x10,%esp
+}
+8010552e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105531:	89 f0                	mov    %esi,%eax
+80105533:	5b                   	pop    %ebx
+80105534:	5e                   	pop    %esi
+80105535:	5f                   	pop    %edi
+80105536:	5d                   	pop    %ebp
+80105537:	c3                   	ret    
+80105538:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010553f:	90                   	nop
+  if((ip = ialloc(dp->dev, type)) == 0)
+80105540:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80105544:	83 ec 08             	sub    $0x8,%esp
+80105547:	50                   	push   %eax
+80105548:	ff 33                	pushl  (%ebx)
+8010554a:	e8 81 ca ff ff       	call   80101fd0 <ialloc>
+8010554f:	83 c4 10             	add    $0x10,%esp
+80105552:	89 c6                	mov    %eax,%esi
+80105554:	85 c0                	test   %eax,%eax
+80105556:	0f 84 cd 00 00 00    	je     80105629 <create+0x189>
+  ilock(ip);
+8010555c:	83 ec 0c             	sub    $0xc,%esp
+8010555f:	50                   	push   %eax
+80105560:	e8 eb cb ff ff       	call   80102150 <ilock>
+  ip->major = major;
+80105565:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80105569:	66 89 46 52          	mov    %ax,0x52(%esi)
+  ip->minor = minor;
+8010556d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80105571:	66 89 46 54          	mov    %ax,0x54(%esi)
+  ip->nlink = 1;
+80105575:	b8 01 00 00 00       	mov    $0x1,%eax
+8010557a:	66 89 46 56          	mov    %ax,0x56(%esi)
+  iupdate(ip);
+8010557e:	89 34 24             	mov    %esi,(%esp)
+80105581:	e8 0a cb ff ff       	call   80102090 <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+80105586:	83 c4 10             	add    $0x10,%esp
+80105589:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+8010558e:	74 30                	je     801055c0 <create+0x120>
+  if(dirlink(dp, name, ip->inum) < 0)
+80105590:	83 ec 04             	sub    $0x4,%esp
+80105593:	ff 76 04             	pushl  0x4(%esi)
+80105596:	57                   	push   %edi
+80105597:	53                   	push   %ebx
+80105598:	e8 c3 d3 ff ff       	call   80102960 <dirlink>
+8010559d:	83 c4 10             	add    $0x10,%esp
+801055a0:	85 c0                	test   %eax,%eax
+801055a2:	78 78                	js     8010561c <create+0x17c>
+  iunlockput(dp);
+801055a4:	83 ec 0c             	sub    $0xc,%esp
+801055a7:	53                   	push   %ebx
+801055a8:	e8 43 ce ff ff       	call   801023f0 <iunlockput>
+  return ip;
+801055ad:	83 c4 10             	add    $0x10,%esp
+}
+801055b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801055b3:	89 f0                	mov    %esi,%eax
+801055b5:	5b                   	pop    %ebx
+801055b6:	5e                   	pop    %esi
+801055b7:	5f                   	pop    %edi
+801055b8:	5d                   	pop    %ebp
+801055b9:	c3                   	ret    
+801055ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iupdate(dp);
+801055c0:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink++;  // for ".."
+801055c3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+    iupdate(dp);
+801055c8:	53                   	push   %ebx
+801055c9:	e8 c2 ca ff ff       	call   80102090 <iupdate>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+801055ce:	83 c4 0c             	add    $0xc,%esp
+801055d1:	ff 76 04             	pushl  0x4(%esi)
+801055d4:	68 1c 83 10 80       	push   $0x8010831c
+801055d9:	56                   	push   %esi
+801055da:	e8 81 d3 ff ff       	call   80102960 <dirlink>
+801055df:	83 c4 10             	add    $0x10,%esp
+801055e2:	85 c0                	test   %eax,%eax
+801055e4:	78 18                	js     801055fe <create+0x15e>
+801055e6:	83 ec 04             	sub    $0x4,%esp
+801055e9:	ff 73 04             	pushl  0x4(%ebx)
+801055ec:	68 1b 83 10 80       	push   $0x8010831b
+801055f1:	56                   	push   %esi
+801055f2:	e8 69 d3 ff ff       	call   80102960 <dirlink>
+801055f7:	83 c4 10             	add    $0x10,%esp
+801055fa:	85 c0                	test   %eax,%eax
+801055fc:	79 92                	jns    80105590 <create+0xf0>
+      panic("create dots");
+801055fe:	83 ec 0c             	sub    $0xc,%esp
+80105601:	68 0f 83 10 80       	push   $0x8010830f
+80105606:	e8 85 ad ff ff       	call   80100390 <panic>
+8010560b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010560f:	90                   	nop
+}
+80105610:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 0;
+80105613:	31 f6                	xor    %esi,%esi
+}
+80105615:	5b                   	pop    %ebx
+80105616:	89 f0                	mov    %esi,%eax
+80105618:	5e                   	pop    %esi
+80105619:	5f                   	pop    %edi
+8010561a:	5d                   	pop    %ebp
+8010561b:	c3                   	ret    
+    panic("create: dirlink");
+8010561c:	83 ec 0c             	sub    $0xc,%esp
+8010561f:	68 1e 83 10 80       	push   $0x8010831e
+80105624:	e8 67 ad ff ff       	call   80100390 <panic>
+    panic("create: ialloc");
+80105629:	83 ec 0c             	sub    $0xc,%esp
+8010562c:	68 00 83 10 80       	push   $0x80108300
+80105631:	e8 5a ad ff ff       	call   80100390 <panic>
+80105636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010563d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80105640 <argfd.constprop.0>:
+argfd(int n, int *pfd, struct file **pf)
+80105640:	55                   	push   %ebp
+80105641:	89 e5                	mov    %esp,%ebp
+80105643:	56                   	push   %esi
+80105644:	89 d6                	mov    %edx,%esi
+80105646:	53                   	push   %ebx
+80105647:	89 c3                	mov    %eax,%ebx
+  if(argint(n, &fd) < 0)
+80105649:	8d 45 f4             	lea    -0xc(%ebp),%eax
+argfd(int n, int *pfd, struct file **pf)
+8010564c:	83 ec 18             	sub    $0x18,%esp
+  if(argint(n, &fd) < 0)
+8010564f:	50                   	push   %eax
+80105650:	6a 00                	push   $0x0
+80105652:	e8 e9 fc ff ff       	call   80105340 <argint>
+80105657:	83 c4 10             	add    $0x10,%esp
+8010565a:	85 c0                	test   %eax,%eax
+8010565c:	78 2a                	js     80105688 <argfd.constprop.0+0x48>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+8010565e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80105662:	77 24                	ja     80105688 <argfd.constprop.0+0x48>
+80105664:	e8 e7 ec ff ff       	call   80104350 <myproc>
+80105669:	8b 55 f4             	mov    -0xc(%ebp),%edx
+8010566c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80105670:	85 c0                	test   %eax,%eax
+80105672:	74 14                	je     80105688 <argfd.constprop.0+0x48>
+  if(pfd)
+80105674:	85 db                	test   %ebx,%ebx
+80105676:	74 02                	je     8010567a <argfd.constprop.0+0x3a>
+    *pfd = fd;
+80105678:	89 13                	mov    %edx,(%ebx)
+    *pf = f;
+8010567a:	89 06                	mov    %eax,(%esi)
+  return 0;
+8010567c:	31 c0                	xor    %eax,%eax
+}
+8010567e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105681:	5b                   	pop    %ebx
+80105682:	5e                   	pop    %esi
+80105683:	5d                   	pop    %ebp
+80105684:	c3                   	ret    
+80105685:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105688:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010568d:	eb ef                	jmp    8010567e <argfd.constprop.0+0x3e>
+8010568f:	90                   	nop
+
+80105690 <sys_dup>:
+{
+80105690:	f3 0f 1e fb          	endbr32 
+80105694:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0)
+80105695:	31 c0                	xor    %eax,%eax
+{
+80105697:	89 e5                	mov    %esp,%ebp
+80105699:	56                   	push   %esi
+8010569a:	53                   	push   %ebx
+  if(argfd(0, 0, &f) < 0)
+8010569b:	8d 55 f4             	lea    -0xc(%ebp),%edx
+{
+8010569e:	83 ec 10             	sub    $0x10,%esp
+  if(argfd(0, 0, &f) < 0)
+801056a1:	e8 9a ff ff ff       	call   80105640 <argfd.constprop.0>
+801056a6:	85 c0                	test   %eax,%eax
+801056a8:	78 1e                	js     801056c8 <sys_dup+0x38>
+  if((fd=fdalloc(f)) < 0)
+801056aa:	8b 75 f4             	mov    -0xc(%ebp),%esi
+  for(fd = 0; fd < NOFILE; fd++){
+801056ad:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+801056af:	e8 9c ec ff ff       	call   80104350 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+801056b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd] == 0){
+801056b8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801056bc:	85 d2                	test   %edx,%edx
+801056be:	74 20                	je     801056e0 <sys_dup+0x50>
+  for(fd = 0; fd < NOFILE; fd++){
+801056c0:	83 c3 01             	add    $0x1,%ebx
+801056c3:	83 fb 10             	cmp    $0x10,%ebx
+801056c6:	75 f0                	jne    801056b8 <sys_dup+0x28>
+}
+801056c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+801056cb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+801056d0:	89 d8                	mov    %ebx,%eax
+801056d2:	5b                   	pop    %ebx
+801056d3:	5e                   	pop    %esi
+801056d4:	5d                   	pop    %ebp
+801056d5:	c3                   	ret    
+801056d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056dd:	8d 76 00             	lea    0x0(%esi),%esi
+      curproc->ofile[fd] = f;
+801056e0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+  filedup(f);
+801056e4:	83 ec 0c             	sub    $0xc,%esp
+801056e7:	ff 75 f4             	pushl  -0xc(%ebp)
+801056ea:	e8 71 c1 ff ff       	call   80101860 <filedup>
+  return fd;
+801056ef:	83 c4 10             	add    $0x10,%esp
+}
+801056f2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801056f5:	89 d8                	mov    %ebx,%eax
+801056f7:	5b                   	pop    %ebx
+801056f8:	5e                   	pop    %esi
+801056f9:	5d                   	pop    %ebp
+801056fa:	c3                   	ret    
+801056fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056ff:	90                   	nop
+
+80105700 <sys_read>:
+{
+80105700:	f3 0f 1e fb          	endbr32 
+80105704:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80105705:	31 c0                	xor    %eax,%eax
+{
+80105707:	89 e5                	mov    %esp,%ebp
+80105709:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+8010570c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010570f:	e8 2c ff ff ff       	call   80105640 <argfd.constprop.0>
+80105714:	85 c0                	test   %eax,%eax
+80105716:	78 48                	js     80105760 <sys_read+0x60>
+80105718:	83 ec 08             	sub    $0x8,%esp
+8010571b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010571e:	50                   	push   %eax
+8010571f:	6a 02                	push   $0x2
+80105721:	e8 1a fc ff ff       	call   80105340 <argint>
+80105726:	83 c4 10             	add    $0x10,%esp
+80105729:	85 c0                	test   %eax,%eax
+8010572b:	78 33                	js     80105760 <sys_read+0x60>
+8010572d:	83 ec 04             	sub    $0x4,%esp
+80105730:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105733:	ff 75 f0             	pushl  -0x10(%ebp)
+80105736:	50                   	push   %eax
+80105737:	6a 01                	push   $0x1
+80105739:	e8 52 fc ff ff       	call   80105390 <argptr>
+8010573e:	83 c4 10             	add    $0x10,%esp
+80105741:	85 c0                	test   %eax,%eax
+80105743:	78 1b                	js     80105760 <sys_read+0x60>
+  return fileread(f, p, n);
+80105745:	83 ec 04             	sub    $0x4,%esp
+80105748:	ff 75 f0             	pushl  -0x10(%ebp)
+8010574b:	ff 75 f4             	pushl  -0xc(%ebp)
+8010574e:	ff 75 ec             	pushl  -0x14(%ebp)
+80105751:	e8 8a c2 ff ff       	call   801019e0 <fileread>
+80105756:	83 c4 10             	add    $0x10,%esp
+}
+80105759:	c9                   	leave  
+8010575a:	c3                   	ret    
+8010575b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010575f:	90                   	nop
+80105760:	c9                   	leave  
+    return -1;
+80105761:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105766:	c3                   	ret    
+80105767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010576e:	66 90                	xchg   %ax,%ax
+
+80105770 <sys_write>:
+{
+80105770:	f3 0f 1e fb          	endbr32 
+80105774:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+80105775:	31 c0                	xor    %eax,%eax
+{
+80105777:	89 e5                	mov    %esp,%ebp
+80105779:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
+8010577c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+8010577f:	e8 bc fe ff ff       	call   80105640 <argfd.constprop.0>
+80105784:	85 c0                	test   %eax,%eax
+80105786:	78 48                	js     801057d0 <sys_write+0x60>
+80105788:	83 ec 08             	sub    $0x8,%esp
+8010578b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010578e:	50                   	push   %eax
+8010578f:	6a 02                	push   $0x2
+80105791:	e8 aa fb ff ff       	call   80105340 <argint>
+80105796:	83 c4 10             	add    $0x10,%esp
+80105799:	85 c0                	test   %eax,%eax
+8010579b:	78 33                	js     801057d0 <sys_write+0x60>
+8010579d:	83 ec 04             	sub    $0x4,%esp
+801057a0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801057a3:	ff 75 f0             	pushl  -0x10(%ebp)
+801057a6:	50                   	push   %eax
+801057a7:	6a 01                	push   $0x1
+801057a9:	e8 e2 fb ff ff       	call   80105390 <argptr>
+801057ae:	83 c4 10             	add    $0x10,%esp
+801057b1:	85 c0                	test   %eax,%eax
+801057b3:	78 1b                	js     801057d0 <sys_write+0x60>
+  return filewrite(f, p, n);
+801057b5:	83 ec 04             	sub    $0x4,%esp
+801057b8:	ff 75 f0             	pushl  -0x10(%ebp)
+801057bb:	ff 75 f4             	pushl  -0xc(%ebp)
+801057be:	ff 75 ec             	pushl  -0x14(%ebp)
+801057c1:	e8 ba c2 ff ff       	call   80101a80 <filewrite>
+801057c6:	83 c4 10             	add    $0x10,%esp
+}
+801057c9:	c9                   	leave  
+801057ca:	c3                   	ret    
+801057cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801057cf:	90                   	nop
+801057d0:	c9                   	leave  
+    return -1;
+801057d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801057d6:	c3                   	ret    
+801057d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057de:	66 90                	xchg   %ax,%ax
+
+801057e0 <sys_close>:
+{
+801057e0:	f3 0f 1e fb          	endbr32 
+801057e4:	55                   	push   %ebp
+801057e5:	89 e5                	mov    %esp,%ebp
+801057e7:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, &fd, &f) < 0)
+801057ea:	8d 55 f4             	lea    -0xc(%ebp),%edx
+801057ed:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801057f0:	e8 4b fe ff ff       	call   80105640 <argfd.constprop.0>
+801057f5:	85 c0                	test   %eax,%eax
+801057f7:	78 27                	js     80105820 <sys_close+0x40>
+  myproc()->ofile[fd] = 0;
+801057f9:	e8 52 eb ff ff       	call   80104350 <myproc>
+801057fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
+  fileclose(f);
+80105801:	83 ec 0c             	sub    $0xc,%esp
+  myproc()->ofile[fd] = 0;
+80105804:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+8010580b:	00 
+  fileclose(f);
+8010580c:	ff 75 f4             	pushl  -0xc(%ebp)
+8010580f:	e8 9c c0 ff ff       	call   801018b0 <fileclose>
+  return 0;
+80105814:	83 c4 10             	add    $0x10,%esp
+80105817:	31 c0                	xor    %eax,%eax
+}
+80105819:	c9                   	leave  
+8010581a:	c3                   	ret    
+8010581b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010581f:	90                   	nop
+80105820:	c9                   	leave  
+    return -1;
+80105821:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105826:	c3                   	ret    
+80105827:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010582e:	66 90                	xchg   %ax,%ax
+
+80105830 <sys_fstat>:
+{
+80105830:	f3 0f 1e fb          	endbr32 
+80105834:	55                   	push   %ebp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+80105835:	31 c0                	xor    %eax,%eax
+{
+80105837:	89 e5                	mov    %esp,%ebp
+80105839:	83 ec 18             	sub    $0x18,%esp
+  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
+8010583c:	8d 55 f0             	lea    -0x10(%ebp),%edx
+8010583f:	e8 fc fd ff ff       	call   80105640 <argfd.constprop.0>
+80105844:	85 c0                	test   %eax,%eax
+80105846:	78 30                	js     80105878 <sys_fstat+0x48>
+80105848:	83 ec 04             	sub    $0x4,%esp
+8010584b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010584e:	6a 14                	push   $0x14
+80105850:	50                   	push   %eax
+80105851:	6a 01                	push   $0x1
+80105853:	e8 38 fb ff ff       	call   80105390 <argptr>
+80105858:	83 c4 10             	add    $0x10,%esp
+8010585b:	85 c0                	test   %eax,%eax
+8010585d:	78 19                	js     80105878 <sys_fstat+0x48>
+  return filestat(f, st);
+8010585f:	83 ec 08             	sub    $0x8,%esp
+80105862:	ff 75 f4             	pushl  -0xc(%ebp)
+80105865:	ff 75 f0             	pushl  -0x10(%ebp)
+80105868:	e8 23 c1 ff ff       	call   80101990 <filestat>
+8010586d:	83 c4 10             	add    $0x10,%esp
+}
+80105870:	c9                   	leave  
+80105871:	c3                   	ret    
+80105872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105878:	c9                   	leave  
+    return -1;
+80105879:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010587e:	c3                   	ret    
+8010587f:	90                   	nop
+
+80105880 <sys_link>:
+{
+80105880:	f3 0f 1e fb          	endbr32 
+80105884:	55                   	push   %ebp
+80105885:	89 e5                	mov    %esp,%ebp
+80105887:	57                   	push   %edi
+80105888:	56                   	push   %esi
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80105889:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+{
+8010588c:	53                   	push   %ebx
+8010588d:	83 ec 34             	sub    $0x34,%esp
+  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
+80105890:	50                   	push   %eax
+80105891:	6a 00                	push   $0x0
+80105893:	e8 58 fb ff ff       	call   801053f0 <argstr>
+80105898:	83 c4 10             	add    $0x10,%esp
+8010589b:	85 c0                	test   %eax,%eax
+8010589d:	0f 88 ff 00 00 00    	js     801059a2 <sys_link+0x122>
+801058a3:	83 ec 08             	sub    $0x8,%esp
+801058a6:	8d 45 d0             	lea    -0x30(%ebp),%eax
+801058a9:	50                   	push   %eax
+801058aa:	6a 01                	push   $0x1
+801058ac:	e8 3f fb ff ff       	call   801053f0 <argstr>
+801058b1:	83 c4 10             	add    $0x10,%esp
+801058b4:	85 c0                	test   %eax,%eax
+801058b6:	0f 88 e6 00 00 00    	js     801059a2 <sys_link+0x122>
+  begin_op();
+801058bc:	e8 5f de ff ff       	call   80103720 <begin_op>
+  if((ip = namei(old)) == 0){
+801058c1:	83 ec 0c             	sub    $0xc,%esp
+801058c4:	ff 75 d4             	pushl  -0x2c(%ebp)
+801058c7:	e8 54 d1 ff ff       	call   80102a20 <namei>
+801058cc:	83 c4 10             	add    $0x10,%esp
+801058cf:	89 c3                	mov    %eax,%ebx
+801058d1:	85 c0                	test   %eax,%eax
+801058d3:	0f 84 e8 00 00 00    	je     801059c1 <sys_link+0x141>
+  ilock(ip);
+801058d9:	83 ec 0c             	sub    $0xc,%esp
+801058dc:	50                   	push   %eax
+801058dd:	e8 6e c8 ff ff       	call   80102150 <ilock>
+  if(ip->type == T_DIR){
+801058e2:	83 c4 10             	add    $0x10,%esp
+801058e5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801058ea:	0f 84 b9 00 00 00    	je     801059a9 <sys_link+0x129>
+  iupdate(ip);
+801058f0:	83 ec 0c             	sub    $0xc,%esp
+  ip->nlink++;
+801058f3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+  if((dp = nameiparent(new, name)) == 0)
+801058f8:	8d 7d da             	lea    -0x26(%ebp),%edi
+  iupdate(ip);
+801058fb:	53                   	push   %ebx
+801058fc:	e8 8f c7 ff ff       	call   80102090 <iupdate>
+  iunlock(ip);
+80105901:	89 1c 24             	mov    %ebx,(%esp)
+80105904:	e8 27 c9 ff ff       	call   80102230 <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+80105909:	58                   	pop    %eax
+8010590a:	5a                   	pop    %edx
+8010590b:	57                   	push   %edi
+8010590c:	ff 75 d0             	pushl  -0x30(%ebp)
+8010590f:	e8 2c d1 ff ff       	call   80102a40 <nameiparent>
+80105914:	83 c4 10             	add    $0x10,%esp
+80105917:	89 c6                	mov    %eax,%esi
+80105919:	85 c0                	test   %eax,%eax
+8010591b:	74 5f                	je     8010597c <sys_link+0xfc>
+  ilock(dp);
+8010591d:	83 ec 0c             	sub    $0xc,%esp
+80105920:	50                   	push   %eax
+80105921:	e8 2a c8 ff ff       	call   80102150 <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+80105926:	8b 03                	mov    (%ebx),%eax
+80105928:	83 c4 10             	add    $0x10,%esp
+8010592b:	39 06                	cmp    %eax,(%esi)
+8010592d:	75 41                	jne    80105970 <sys_link+0xf0>
+8010592f:	83 ec 04             	sub    $0x4,%esp
+80105932:	ff 73 04             	pushl  0x4(%ebx)
+80105935:	57                   	push   %edi
+80105936:	56                   	push   %esi
+80105937:	e8 24 d0 ff ff       	call   80102960 <dirlink>
+8010593c:	83 c4 10             	add    $0x10,%esp
+8010593f:	85 c0                	test   %eax,%eax
+80105941:	78 2d                	js     80105970 <sys_link+0xf0>
+  iunlockput(dp);
+80105943:	83 ec 0c             	sub    $0xc,%esp
+80105946:	56                   	push   %esi
+80105947:	e8 a4 ca ff ff       	call   801023f0 <iunlockput>
+  iput(ip);
+8010594c:	89 1c 24             	mov    %ebx,(%esp)
+8010594f:	e8 2c c9 ff ff       	call   80102280 <iput>
+  end_op();
+80105954:	e8 37 de ff ff       	call   80103790 <end_op>
+  return 0;
+80105959:	83 c4 10             	add    $0x10,%esp
+8010595c:	31 c0                	xor    %eax,%eax
+}
+8010595e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105961:	5b                   	pop    %ebx
+80105962:	5e                   	pop    %esi
+80105963:	5f                   	pop    %edi
+80105964:	5d                   	pop    %ebp
+80105965:	c3                   	ret    
+80105966:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010596d:	8d 76 00             	lea    0x0(%esi),%esi
+    iunlockput(dp);
+80105970:	83 ec 0c             	sub    $0xc,%esp
+80105973:	56                   	push   %esi
+80105974:	e8 77 ca ff ff       	call   801023f0 <iunlockput>
+    goto bad;
+80105979:	83 c4 10             	add    $0x10,%esp
+  ilock(ip);
+8010597c:	83 ec 0c             	sub    $0xc,%esp
+8010597f:	53                   	push   %ebx
+80105980:	e8 cb c7 ff ff       	call   80102150 <ilock>
+  ip->nlink--;
+80105985:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+8010598a:	89 1c 24             	mov    %ebx,(%esp)
+8010598d:	e8 fe c6 ff ff       	call   80102090 <iupdate>
+  iunlockput(ip);
+80105992:	89 1c 24             	mov    %ebx,(%esp)
+80105995:	e8 56 ca ff ff       	call   801023f0 <iunlockput>
+  end_op();
+8010599a:	e8 f1 dd ff ff       	call   80103790 <end_op>
+  return -1;
+8010599f:	83 c4 10             	add    $0x10,%esp
+801059a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059a7:	eb b5                	jmp    8010595e <sys_link+0xde>
+    iunlockput(ip);
+801059a9:	83 ec 0c             	sub    $0xc,%esp
+801059ac:	53                   	push   %ebx
+801059ad:	e8 3e ca ff ff       	call   801023f0 <iunlockput>
+    end_op();
+801059b2:	e8 d9 dd ff ff       	call   80103790 <end_op>
+    return -1;
+801059b7:	83 c4 10             	add    $0x10,%esp
+801059ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059bf:	eb 9d                	jmp    8010595e <sys_link+0xde>
+    end_op();
+801059c1:	e8 ca dd ff ff       	call   80103790 <end_op>
+    return -1;
+801059c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801059cb:	eb 91                	jmp    8010595e <sys_link+0xde>
+801059cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801059d0 <sys_unlink>:
+{
+801059d0:	f3 0f 1e fb          	endbr32 
+801059d4:	55                   	push   %ebp
+801059d5:	89 e5                	mov    %esp,%ebp
+801059d7:	57                   	push   %edi
+801059d8:	56                   	push   %esi
+  if(argstr(0, &path) < 0)
+801059d9:	8d 45 c0             	lea    -0x40(%ebp),%eax
+{
+801059dc:	53                   	push   %ebx
+801059dd:	83 ec 54             	sub    $0x54,%esp
+  if(argstr(0, &path) < 0)
+801059e0:	50                   	push   %eax
+801059e1:	6a 00                	push   $0x0
+801059e3:	e8 08 fa ff ff       	call   801053f0 <argstr>
+801059e8:	83 c4 10             	add    $0x10,%esp
+801059eb:	85 c0                	test   %eax,%eax
+801059ed:	0f 88 7d 01 00 00    	js     80105b70 <sys_unlink+0x1a0>
+  begin_op();
+801059f3:	e8 28 dd ff ff       	call   80103720 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+801059f8:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+801059fb:	83 ec 08             	sub    $0x8,%esp
+801059fe:	53                   	push   %ebx
+801059ff:	ff 75 c0             	pushl  -0x40(%ebp)
+80105a02:	e8 39 d0 ff ff       	call   80102a40 <nameiparent>
+80105a07:	83 c4 10             	add    $0x10,%esp
+80105a0a:	89 c6                	mov    %eax,%esi
+80105a0c:	85 c0                	test   %eax,%eax
+80105a0e:	0f 84 66 01 00 00    	je     80105b7a <sys_unlink+0x1aa>
+  ilock(dp);
+80105a14:	83 ec 0c             	sub    $0xc,%esp
+80105a17:	50                   	push   %eax
+80105a18:	e8 33 c7 ff ff       	call   80102150 <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+80105a1d:	58                   	pop    %eax
+80105a1e:	5a                   	pop    %edx
+80105a1f:	68 1c 83 10 80       	push   $0x8010831c
+80105a24:	53                   	push   %ebx
+80105a25:	e8 56 cc ff ff       	call   80102680 <namecmp>
+80105a2a:	83 c4 10             	add    $0x10,%esp
+80105a2d:	85 c0                	test   %eax,%eax
+80105a2f:	0f 84 03 01 00 00    	je     80105b38 <sys_unlink+0x168>
+80105a35:	83 ec 08             	sub    $0x8,%esp
+80105a38:	68 1b 83 10 80       	push   $0x8010831b
+80105a3d:	53                   	push   %ebx
+80105a3e:	e8 3d cc ff ff       	call   80102680 <namecmp>
+80105a43:	83 c4 10             	add    $0x10,%esp
+80105a46:	85 c0                	test   %eax,%eax
+80105a48:	0f 84 ea 00 00 00    	je     80105b38 <sys_unlink+0x168>
+  if((ip = dirlookup(dp, name, &off)) == 0)
+80105a4e:	83 ec 04             	sub    $0x4,%esp
+80105a51:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105a54:	50                   	push   %eax
+80105a55:	53                   	push   %ebx
+80105a56:	56                   	push   %esi
+80105a57:	e8 44 cc ff ff       	call   801026a0 <dirlookup>
+80105a5c:	83 c4 10             	add    $0x10,%esp
+80105a5f:	89 c3                	mov    %eax,%ebx
+80105a61:	85 c0                	test   %eax,%eax
+80105a63:	0f 84 cf 00 00 00    	je     80105b38 <sys_unlink+0x168>
+  ilock(ip);
+80105a69:	83 ec 0c             	sub    $0xc,%esp
+80105a6c:	50                   	push   %eax
+80105a6d:	e8 de c6 ff ff       	call   80102150 <ilock>
+  if(ip->nlink < 1)
+80105a72:	83 c4 10             	add    $0x10,%esp
+80105a75:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+80105a7a:	0f 8e 23 01 00 00    	jle    80105ba3 <sys_unlink+0x1d3>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+80105a80:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105a85:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105a88:	74 66                	je     80105af0 <sys_unlink+0x120>
+  memset(&de, 0, sizeof(de));
+80105a8a:	83 ec 04             	sub    $0x4,%esp
+80105a8d:	6a 10                	push   $0x10
+80105a8f:	6a 00                	push   $0x0
+80105a91:	57                   	push   %edi
+80105a92:	e8 c9 f5 ff ff       	call   80105060 <memset>
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80105a97:	6a 10                	push   $0x10
+80105a99:	ff 75 c4             	pushl  -0x3c(%ebp)
+80105a9c:	57                   	push   %edi
+80105a9d:	56                   	push   %esi
+80105a9e:	e8 ad ca ff ff       	call   80102550 <writei>
+80105aa3:	83 c4 20             	add    $0x20,%esp
+80105aa6:	83 f8 10             	cmp    $0x10,%eax
+80105aa9:	0f 85 e7 00 00 00    	jne    80105b96 <sys_unlink+0x1c6>
+  if(ip->type == T_DIR){
+80105aaf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105ab4:	0f 84 96 00 00 00    	je     80105b50 <sys_unlink+0x180>
+  iunlockput(dp);
+80105aba:	83 ec 0c             	sub    $0xc,%esp
+80105abd:	56                   	push   %esi
+80105abe:	e8 2d c9 ff ff       	call   801023f0 <iunlockput>
+  ip->nlink--;
+80105ac3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+  iupdate(ip);
+80105ac8:	89 1c 24             	mov    %ebx,(%esp)
+80105acb:	e8 c0 c5 ff ff       	call   80102090 <iupdate>
+  iunlockput(ip);
+80105ad0:	89 1c 24             	mov    %ebx,(%esp)
+80105ad3:	e8 18 c9 ff ff       	call   801023f0 <iunlockput>
+  end_op();
+80105ad8:	e8 b3 dc ff ff       	call   80103790 <end_op>
+  return 0;
+80105add:	83 c4 10             	add    $0x10,%esp
+80105ae0:	31 c0                	xor    %eax,%eax
+}
+80105ae2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105ae5:	5b                   	pop    %ebx
+80105ae6:	5e                   	pop    %esi
+80105ae7:	5f                   	pop    %edi
+80105ae8:	5d                   	pop    %ebp
+80105ae9:	c3                   	ret    
+80105aea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+80105af0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105af4:	76 94                	jbe    80105a8a <sys_unlink+0xba>
+80105af6:	ba 20 00 00 00       	mov    $0x20,%edx
+80105afb:	eb 0b                	jmp    80105b08 <sys_unlink+0x138>
+80105afd:	8d 76 00             	lea    0x0(%esi),%esi
+80105b00:	83 c2 10             	add    $0x10,%edx
+80105b03:	39 53 58             	cmp    %edx,0x58(%ebx)
+80105b06:	76 82                	jbe    80105a8a <sys_unlink+0xba>
+    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+80105b08:	6a 10                	push   $0x10
+80105b0a:	52                   	push   %edx
+80105b0b:	57                   	push   %edi
+80105b0c:	53                   	push   %ebx
+80105b0d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80105b10:	e8 3b c9 ff ff       	call   80102450 <readi>
+80105b15:	83 c4 10             	add    $0x10,%esp
+80105b18:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+80105b1b:	83 f8 10             	cmp    $0x10,%eax
+80105b1e:	75 69                	jne    80105b89 <sys_unlink+0x1b9>
+    if(de.inum != 0)
+80105b20:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105b25:	74 d9                	je     80105b00 <sys_unlink+0x130>
+    iunlockput(ip);
+80105b27:	83 ec 0c             	sub    $0xc,%esp
+80105b2a:	53                   	push   %ebx
+80105b2b:	e8 c0 c8 ff ff       	call   801023f0 <iunlockput>
+    goto bad;
+80105b30:	83 c4 10             	add    $0x10,%esp
+80105b33:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b37:	90                   	nop
+  iunlockput(dp);
+80105b38:	83 ec 0c             	sub    $0xc,%esp
+80105b3b:	56                   	push   %esi
+80105b3c:	e8 af c8 ff ff       	call   801023f0 <iunlockput>
+  end_op();
+80105b41:	e8 4a dc ff ff       	call   80103790 <end_op>
+  return -1;
+80105b46:	83 c4 10             	add    $0x10,%esp
+80105b49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b4e:	eb 92                	jmp    80105ae2 <sys_unlink+0x112>
+    iupdate(dp);
+80105b50:	83 ec 0c             	sub    $0xc,%esp
+    dp->nlink--;
+80105b53:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+    iupdate(dp);
+80105b58:	56                   	push   %esi
+80105b59:	e8 32 c5 ff ff       	call   80102090 <iupdate>
+80105b5e:	83 c4 10             	add    $0x10,%esp
+80105b61:	e9 54 ff ff ff       	jmp    80105aba <sys_unlink+0xea>
+80105b66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b6d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105b70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b75:	e9 68 ff ff ff       	jmp    80105ae2 <sys_unlink+0x112>
+    end_op();
+80105b7a:	e8 11 dc ff ff       	call   80103790 <end_op>
+    return -1;
+80105b7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b84:	e9 59 ff ff ff       	jmp    80105ae2 <sys_unlink+0x112>
+      panic("isdirempty: readi");
+80105b89:	83 ec 0c             	sub    $0xc,%esp
+80105b8c:	68 40 83 10 80       	push   $0x80108340
+80105b91:	e8 fa a7 ff ff       	call   80100390 <panic>
+    panic("unlink: writei");
+80105b96:	83 ec 0c             	sub    $0xc,%esp
+80105b99:	68 52 83 10 80       	push   $0x80108352
+80105b9e:	e8 ed a7 ff ff       	call   80100390 <panic>
+    panic("unlink: nlink < 1");
+80105ba3:	83 ec 0c             	sub    $0xc,%esp
+80105ba6:	68 2e 83 10 80       	push   $0x8010832e
+80105bab:	e8 e0 a7 ff ff       	call   80100390 <panic>
+
+80105bb0 <sys_open>:
+
+int
+sys_open(void)
+{
+80105bb0:	f3 0f 1e fb          	endbr32 
+80105bb4:	55                   	push   %ebp
+80105bb5:	89 e5                	mov    %esp,%ebp
+80105bb7:	57                   	push   %edi
+80105bb8:	56                   	push   %esi
+  char *path;
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+80105bb9:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+80105bbc:	53                   	push   %ebx
+80105bbd:	83 ec 24             	sub    $0x24,%esp
+  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
+80105bc0:	50                   	push   %eax
+80105bc1:	6a 00                	push   $0x0
+80105bc3:	e8 28 f8 ff ff       	call   801053f0 <argstr>
+80105bc8:	83 c4 10             	add    $0x10,%esp
+80105bcb:	85 c0                	test   %eax,%eax
+80105bcd:	0f 88 8a 00 00 00    	js     80105c5d <sys_open+0xad>
+80105bd3:	83 ec 08             	sub    $0x8,%esp
+80105bd6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105bd9:	50                   	push   %eax
+80105bda:	6a 01                	push   $0x1
+80105bdc:	e8 5f f7 ff ff       	call   80105340 <argint>
+80105be1:	83 c4 10             	add    $0x10,%esp
+80105be4:	85 c0                	test   %eax,%eax
+80105be6:	78 75                	js     80105c5d <sys_open+0xad>
+    return -1;
+
+  begin_op();
+80105be8:	e8 33 db ff ff       	call   80103720 <begin_op>
+
+  if(omode & O_CREATE){
+80105bed:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105bf1:	75 75                	jne    80105c68 <sys_open+0xb8>
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+80105bf3:	83 ec 0c             	sub    $0xc,%esp
+80105bf6:	ff 75 e0             	pushl  -0x20(%ebp)
+80105bf9:	e8 22 ce ff ff       	call   80102a20 <namei>
+80105bfe:	83 c4 10             	add    $0x10,%esp
+80105c01:	89 c6                	mov    %eax,%esi
+80105c03:	85 c0                	test   %eax,%eax
+80105c05:	74 7e                	je     80105c85 <sys_open+0xd5>
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+80105c07:	83 ec 0c             	sub    $0xc,%esp
+80105c0a:	50                   	push   %eax
+80105c0b:	e8 40 c5 ff ff       	call   80102150 <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105c10:	83 c4 10             	add    $0x10,%esp
+80105c13:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105c18:	0f 84 c2 00 00 00    	je     80105ce0 <sys_open+0x130>
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+80105c1e:	e8 cd bb ff ff       	call   801017f0 <filealloc>
+80105c23:	89 c7                	mov    %eax,%edi
+80105c25:	85 c0                	test   %eax,%eax
+80105c27:	74 23                	je     80105c4c <sys_open+0x9c>
+  struct proc *curproc = myproc();
+80105c29:	e8 22 e7 ff ff       	call   80104350 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+80105c2e:	31 db                	xor    %ebx,%ebx
+    if(curproc->ofile[fd] == 0){
+80105c30:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105c34:	85 d2                	test   %edx,%edx
+80105c36:	74 60                	je     80105c98 <sys_open+0xe8>
+  for(fd = 0; fd < NOFILE; fd++){
+80105c38:	83 c3 01             	add    $0x1,%ebx
+80105c3b:	83 fb 10             	cmp    $0x10,%ebx
+80105c3e:	75 f0                	jne    80105c30 <sys_open+0x80>
+    if(f)
+      fileclose(f);
+80105c40:	83 ec 0c             	sub    $0xc,%esp
+80105c43:	57                   	push   %edi
+80105c44:	e8 67 bc ff ff       	call   801018b0 <fileclose>
+80105c49:	83 c4 10             	add    $0x10,%esp
+    iunlockput(ip);
+80105c4c:	83 ec 0c             	sub    $0xc,%esp
+80105c4f:	56                   	push   %esi
+80105c50:	e8 9b c7 ff ff       	call   801023f0 <iunlockput>
+    end_op();
+80105c55:	e8 36 db ff ff       	call   80103790 <end_op>
+    return -1;
+80105c5a:	83 c4 10             	add    $0x10,%esp
+80105c5d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105c62:	eb 6d                	jmp    80105cd1 <sys_open+0x121>
+80105c64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    ip = create(path, T_FILE, 0, 0);
+80105c68:	83 ec 0c             	sub    $0xc,%esp
+80105c6b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80105c6e:	31 c9                	xor    %ecx,%ecx
+80105c70:	ba 02 00 00 00       	mov    $0x2,%edx
+80105c75:	6a 00                	push   $0x0
+80105c77:	e8 24 f8 ff ff       	call   801054a0 <create>
+    if(ip == 0){
+80105c7c:	83 c4 10             	add    $0x10,%esp
+    ip = create(path, T_FILE, 0, 0);
+80105c7f:	89 c6                	mov    %eax,%esi
+    if(ip == 0){
+80105c81:	85 c0                	test   %eax,%eax
+80105c83:	75 99                	jne    80105c1e <sys_open+0x6e>
+      end_op();
+80105c85:	e8 06 db ff ff       	call   80103790 <end_op>
+      return -1;
+80105c8a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105c8f:	eb 40                	jmp    80105cd1 <sys_open+0x121>
+80105c91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  }
+  iunlock(ip);
+80105c98:	83 ec 0c             	sub    $0xc,%esp
+      curproc->ofile[fd] = f;
+80105c9b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+  iunlock(ip);
+80105c9f:	56                   	push   %esi
+80105ca0:	e8 8b c5 ff ff       	call   80102230 <iunlock>
+  end_op();
+80105ca5:	e8 e6 da ff ff       	call   80103790 <end_op>
+
+  f->type = FD_INODE;
+80105caa:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+80105cb0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80105cb3:	83 c4 10             	add    $0x10,%esp
+  f->ip = ip;
+80105cb6:	89 77 10             	mov    %esi,0x10(%edi)
+  f->readable = !(omode & O_WRONLY);
+80105cb9:	89 d0                	mov    %edx,%eax
+  f->off = 0;
+80105cbb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+  f->readable = !(omode & O_WRONLY);
+80105cc2:	f7 d0                	not    %eax
+80105cc4:	83 e0 01             	and    $0x1,%eax
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80105cc7:	83 e2 03             	and    $0x3,%edx
+  f->readable = !(omode & O_WRONLY);
+80105cca:	88 47 08             	mov    %al,0x8(%edi)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+80105ccd:	0f 95 47 09          	setne  0x9(%edi)
+  return fd;
+}
+80105cd1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105cd4:	89 d8                	mov    %ebx,%eax
+80105cd6:	5b                   	pop    %ebx
+80105cd7:	5e                   	pop    %esi
+80105cd8:	5f                   	pop    %edi
+80105cd9:	5d                   	pop    %ebp
+80105cda:	c3                   	ret    
+80105cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105cdf:	90                   	nop
+    if(ip->type == T_DIR && omode != O_RDONLY){
+80105ce0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105ce3:	85 c9                	test   %ecx,%ecx
+80105ce5:	0f 84 33 ff ff ff    	je     80105c1e <sys_open+0x6e>
+80105ceb:	e9 5c ff ff ff       	jmp    80105c4c <sys_open+0x9c>
+
+80105cf0 <sys_mkdir>:
+
+int
+sys_mkdir(void)
+{
+80105cf0:	f3 0f 1e fb          	endbr32 
+80105cf4:	55                   	push   %ebp
+80105cf5:	89 e5                	mov    %esp,%ebp
+80105cf7:	83 ec 18             	sub    $0x18,%esp
+  char *path;
+  struct inode *ip;
+
+  begin_op();
+80105cfa:	e8 21 da ff ff       	call   80103720 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+80105cff:	83 ec 08             	sub    $0x8,%esp
+80105d02:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105d05:	50                   	push   %eax
+80105d06:	6a 00                	push   $0x0
+80105d08:	e8 e3 f6 ff ff       	call   801053f0 <argstr>
+80105d0d:	83 c4 10             	add    $0x10,%esp
+80105d10:	85 c0                	test   %eax,%eax
+80105d12:	78 34                	js     80105d48 <sys_mkdir+0x58>
+80105d14:	83 ec 0c             	sub    $0xc,%esp
+80105d17:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80105d1a:	31 c9                	xor    %ecx,%ecx
+80105d1c:	ba 01 00 00 00       	mov    $0x1,%edx
+80105d21:	6a 00                	push   $0x0
+80105d23:	e8 78 f7 ff ff       	call   801054a0 <create>
+80105d28:	83 c4 10             	add    $0x10,%esp
+80105d2b:	85 c0                	test   %eax,%eax
+80105d2d:	74 19                	je     80105d48 <sys_mkdir+0x58>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+80105d2f:	83 ec 0c             	sub    $0xc,%esp
+80105d32:	50                   	push   %eax
+80105d33:	e8 b8 c6 ff ff       	call   801023f0 <iunlockput>
+  end_op();
+80105d38:	e8 53 da ff ff       	call   80103790 <end_op>
+  return 0;
+80105d3d:	83 c4 10             	add    $0x10,%esp
+80105d40:	31 c0                	xor    %eax,%eax
+}
+80105d42:	c9                   	leave  
+80105d43:	c3                   	ret    
+80105d44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    end_op();
+80105d48:	e8 43 da ff ff       	call   80103790 <end_op>
+    return -1;
+80105d4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105d52:	c9                   	leave  
+80105d53:	c3                   	ret    
+80105d54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105d5f:	90                   	nop
+
+80105d60 <sys_mknod>:
+
+int
+sys_mknod(void)
+{
+80105d60:	f3 0f 1e fb          	endbr32 
+80105d64:	55                   	push   %ebp
+80105d65:	89 e5                	mov    %esp,%ebp
+80105d67:	83 ec 18             	sub    $0x18,%esp
+  struct inode *ip;
+  char *path;
+  int major, minor;
+
+  begin_op();
+80105d6a:	e8 b1 d9 ff ff       	call   80103720 <begin_op>
+  if((argstr(0, &path)) < 0 ||
+80105d6f:	83 ec 08             	sub    $0x8,%esp
+80105d72:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105d75:	50                   	push   %eax
+80105d76:	6a 00                	push   $0x0
+80105d78:	e8 73 f6 ff ff       	call   801053f0 <argstr>
+80105d7d:	83 c4 10             	add    $0x10,%esp
+80105d80:	85 c0                	test   %eax,%eax
+80105d82:	78 64                	js     80105de8 <sys_mknod+0x88>
+     argint(1, &major) < 0 ||
+80105d84:	83 ec 08             	sub    $0x8,%esp
+80105d87:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105d8a:	50                   	push   %eax
+80105d8b:	6a 01                	push   $0x1
+80105d8d:	e8 ae f5 ff ff       	call   80105340 <argint>
+  if((argstr(0, &path)) < 0 ||
+80105d92:	83 c4 10             	add    $0x10,%esp
+80105d95:	85 c0                	test   %eax,%eax
+80105d97:	78 4f                	js     80105de8 <sys_mknod+0x88>
+     argint(2, &minor) < 0 ||
+80105d99:	83 ec 08             	sub    $0x8,%esp
+80105d9c:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105d9f:	50                   	push   %eax
+80105da0:	6a 02                	push   $0x2
+80105da2:	e8 99 f5 ff ff       	call   80105340 <argint>
+     argint(1, &major) < 0 ||
+80105da7:	83 c4 10             	add    $0x10,%esp
+80105daa:	85 c0                	test   %eax,%eax
+80105dac:	78 3a                	js     80105de8 <sys_mknod+0x88>
+     (ip = create(path, T_DEV, major, minor)) == 0){
+80105dae:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+80105db2:	83 ec 0c             	sub    $0xc,%esp
+80105db5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105db9:	ba 03 00 00 00       	mov    $0x3,%edx
+80105dbe:	50                   	push   %eax
+80105dbf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80105dc2:	e8 d9 f6 ff ff       	call   801054a0 <create>
+     argint(2, &minor) < 0 ||
+80105dc7:	83 c4 10             	add    $0x10,%esp
+80105dca:	85 c0                	test   %eax,%eax
+80105dcc:	74 1a                	je     80105de8 <sys_mknod+0x88>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+80105dce:	83 ec 0c             	sub    $0xc,%esp
+80105dd1:	50                   	push   %eax
+80105dd2:	e8 19 c6 ff ff       	call   801023f0 <iunlockput>
+  end_op();
+80105dd7:	e8 b4 d9 ff ff       	call   80103790 <end_op>
+  return 0;
+80105ddc:	83 c4 10             	add    $0x10,%esp
+80105ddf:	31 c0                	xor    %eax,%eax
+}
+80105de1:	c9                   	leave  
+80105de2:	c3                   	ret    
+80105de3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105de7:	90                   	nop
+    end_op();
+80105de8:	e8 a3 d9 ff ff       	call   80103790 <end_op>
+    return -1;
+80105ded:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105df2:	c9                   	leave  
+80105df3:	c3                   	ret    
+80105df4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105dfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105dff:	90                   	nop
+
+80105e00 <sys_chdir>:
+
+int
+sys_chdir(void)
+{
+80105e00:	f3 0f 1e fb          	endbr32 
+80105e04:	55                   	push   %ebp
+80105e05:	89 e5                	mov    %esp,%ebp
+80105e07:	56                   	push   %esi
+80105e08:	53                   	push   %ebx
+80105e09:	83 ec 10             	sub    $0x10,%esp
+  char *path;
+  struct inode *ip;
+  struct proc *curproc = myproc();
+80105e0c:	e8 3f e5 ff ff       	call   80104350 <myproc>
+80105e11:	89 c6                	mov    %eax,%esi
+  
+  begin_op();
+80105e13:	e8 08 d9 ff ff       	call   80103720 <begin_op>
+  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
+80105e18:	83 ec 08             	sub    $0x8,%esp
+80105e1b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105e1e:	50                   	push   %eax
+80105e1f:	6a 00                	push   $0x0
+80105e21:	e8 ca f5 ff ff       	call   801053f0 <argstr>
+80105e26:	83 c4 10             	add    $0x10,%esp
+80105e29:	85 c0                	test   %eax,%eax
+80105e2b:	78 73                	js     80105ea0 <sys_chdir+0xa0>
+80105e2d:	83 ec 0c             	sub    $0xc,%esp
+80105e30:	ff 75 f4             	pushl  -0xc(%ebp)
+80105e33:	e8 e8 cb ff ff       	call   80102a20 <namei>
+80105e38:	83 c4 10             	add    $0x10,%esp
+80105e3b:	89 c3                	mov    %eax,%ebx
+80105e3d:	85 c0                	test   %eax,%eax
+80105e3f:	74 5f                	je     80105ea0 <sys_chdir+0xa0>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+80105e41:	83 ec 0c             	sub    $0xc,%esp
+80105e44:	50                   	push   %eax
+80105e45:	e8 06 c3 ff ff       	call   80102150 <ilock>
+  if(ip->type != T_DIR){
+80105e4a:	83 c4 10             	add    $0x10,%esp
+80105e4d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105e52:	75 2c                	jne    80105e80 <sys_chdir+0x80>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+80105e54:	83 ec 0c             	sub    $0xc,%esp
+80105e57:	53                   	push   %ebx
+80105e58:	e8 d3 c3 ff ff       	call   80102230 <iunlock>
+  iput(curproc->cwd);
+80105e5d:	58                   	pop    %eax
+80105e5e:	ff 76 68             	pushl  0x68(%esi)
+80105e61:	e8 1a c4 ff ff       	call   80102280 <iput>
+  end_op();
+80105e66:	e8 25 d9 ff ff       	call   80103790 <end_op>
+  curproc->cwd = ip;
+80105e6b:	89 5e 68             	mov    %ebx,0x68(%esi)
+  return 0;
+80105e6e:	83 c4 10             	add    $0x10,%esp
+80105e71:	31 c0                	xor    %eax,%eax
+}
+80105e73:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105e76:	5b                   	pop    %ebx
+80105e77:	5e                   	pop    %esi
+80105e78:	5d                   	pop    %ebp
+80105e79:	c3                   	ret    
+80105e7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    iunlockput(ip);
+80105e80:	83 ec 0c             	sub    $0xc,%esp
+80105e83:	53                   	push   %ebx
+80105e84:	e8 67 c5 ff ff       	call   801023f0 <iunlockput>
+    end_op();
+80105e89:	e8 02 d9 ff ff       	call   80103790 <end_op>
+    return -1;
+80105e8e:	83 c4 10             	add    $0x10,%esp
+80105e91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105e96:	eb db                	jmp    80105e73 <sys_chdir+0x73>
+80105e98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e9f:	90                   	nop
+    end_op();
+80105ea0:	e8 eb d8 ff ff       	call   80103790 <end_op>
+    return -1;
+80105ea5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105eaa:	eb c7                	jmp    80105e73 <sys_chdir+0x73>
+80105eac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105eb0 <sys_exec>:
+
+int
+sys_exec(void)
+{
+80105eb0:	f3 0f 1e fb          	endbr32 
+80105eb4:	55                   	push   %ebp
+80105eb5:	89 e5                	mov    %esp,%ebp
+80105eb7:	57                   	push   %edi
+80105eb8:	56                   	push   %esi
+  char *path, *argv[MAXARG];
+  int i;
+  uint uargv, uarg;
+
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105eb9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+{
+80105ebf:	53                   	push   %ebx
+80105ec0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
+80105ec6:	50                   	push   %eax
+80105ec7:	6a 00                	push   $0x0
+80105ec9:	e8 22 f5 ff ff       	call   801053f0 <argstr>
+80105ece:	83 c4 10             	add    $0x10,%esp
+80105ed1:	85 c0                	test   %eax,%eax
+80105ed3:	0f 88 8b 00 00 00    	js     80105f64 <sys_exec+0xb4>
+80105ed9:	83 ec 08             	sub    $0x8,%esp
+80105edc:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+80105ee2:	50                   	push   %eax
+80105ee3:	6a 01                	push   $0x1
+80105ee5:	e8 56 f4 ff ff       	call   80105340 <argint>
+80105eea:	83 c4 10             	add    $0x10,%esp
+80105eed:	85 c0                	test   %eax,%eax
+80105eef:	78 73                	js     80105f64 <sys_exec+0xb4>
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+80105ef1:	83 ec 04             	sub    $0x4,%esp
+80105ef4:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+  for(i=0;; i++){
+80105efa:	31 db                	xor    %ebx,%ebx
+  memset(argv, 0, sizeof(argv));
+80105efc:	68 80 00 00 00       	push   $0x80
+80105f01:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105f07:	6a 00                	push   $0x0
+80105f09:	50                   	push   %eax
+80105f0a:	e8 51 f1 ff ff       	call   80105060 <memset>
+80105f0f:	83 c4 10             	add    $0x10,%esp
+80105f12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(i >= NELEM(argv))
+      return -1;
+    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
+80105f18:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+80105f1e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80105f25:	83 ec 08             	sub    $0x8,%esp
+80105f28:	57                   	push   %edi
+80105f29:	01 f0                	add    %esi,%eax
+80105f2b:	50                   	push   %eax
+80105f2c:	e8 6f f3 ff ff       	call   801052a0 <fetchint>
+80105f31:	83 c4 10             	add    $0x10,%esp
+80105f34:	85 c0                	test   %eax,%eax
+80105f36:	78 2c                	js     80105f64 <sys_exec+0xb4>
+      return -1;
+    if(uarg == 0){
+80105f38:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+80105f3e:	85 c0                	test   %eax,%eax
+80105f40:	74 36                	je     80105f78 <sys_exec+0xc8>
+      argv[i] = 0;
+      break;
+    }
+    if(fetchstr(uarg, &argv[i]) < 0)
+80105f42:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105f48:	83 ec 08             	sub    $0x8,%esp
+80105f4b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+80105f4e:	52                   	push   %edx
+80105f4f:	50                   	push   %eax
+80105f50:	e8 8b f3 ff ff       	call   801052e0 <fetchstr>
+80105f55:	83 c4 10             	add    $0x10,%esp
+80105f58:	85 c0                	test   %eax,%eax
+80105f5a:	78 08                	js     80105f64 <sys_exec+0xb4>
+  for(i=0;; i++){
+80105f5c:	83 c3 01             	add    $0x1,%ebx
+    if(i >= NELEM(argv))
+80105f5f:	83 fb 20             	cmp    $0x20,%ebx
+80105f62:	75 b4                	jne    80105f18 <sys_exec+0x68>
+      return -1;
+  }
+  return exec(path, argv);
+}
+80105f64:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return -1;
+80105f67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105f6c:	5b                   	pop    %ebx
+80105f6d:	5e                   	pop    %esi
+80105f6e:	5f                   	pop    %edi
+80105f6f:	5d                   	pop    %ebp
+80105f70:	c3                   	ret    
+80105f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return exec(path, argv);
+80105f78:	83 ec 08             	sub    $0x8,%esp
+80105f7b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+      argv[i] = 0;
+80105f81:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105f88:	00 00 00 00 
+  return exec(path, argv);
+80105f8c:	50                   	push   %eax
+80105f8d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+80105f93:	e8 d8 b4 ff ff       	call   80101470 <exec>
+80105f98:	83 c4 10             	add    $0x10,%esp
+}
+80105f9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105f9e:	5b                   	pop    %ebx
+80105f9f:	5e                   	pop    %esi
+80105fa0:	5f                   	pop    %edi
+80105fa1:	5d                   	pop    %ebp
+80105fa2:	c3                   	ret    
+80105fa3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105faa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105fb0 <sys_pipe>:
+
+int
+sys_pipe(void)
+{
+80105fb0:	f3 0f 1e fb          	endbr32 
+80105fb4:	55                   	push   %ebp
+80105fb5:	89 e5                	mov    %esp,%ebp
+80105fb7:	57                   	push   %edi
+80105fb8:	56                   	push   %esi
+  int *fd;
+  struct file *rf, *wf;
+  int fd0, fd1;
+
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80105fb9:	8d 45 dc             	lea    -0x24(%ebp),%eax
+{
+80105fbc:	53                   	push   %ebx
+80105fbd:	83 ec 20             	sub    $0x20,%esp
+  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
+80105fc0:	6a 08                	push   $0x8
+80105fc2:	50                   	push   %eax
+80105fc3:	6a 00                	push   $0x0
+80105fc5:	e8 c6 f3 ff ff       	call   80105390 <argptr>
+80105fca:	83 c4 10             	add    $0x10,%esp
+80105fcd:	85 c0                	test   %eax,%eax
+80105fcf:	78 4e                	js     8010601f <sys_pipe+0x6f>
+    return -1;
+  if(pipealloc(&rf, &wf) < 0)
+80105fd1:	83 ec 08             	sub    $0x8,%esp
+80105fd4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105fd7:	50                   	push   %eax
+80105fd8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105fdb:	50                   	push   %eax
+80105fdc:	e8 ff dd ff ff       	call   80103de0 <pipealloc>
+80105fe1:	83 c4 10             	add    $0x10,%esp
+80105fe4:	85 c0                	test   %eax,%eax
+80105fe6:	78 37                	js     8010601f <sys_pipe+0x6f>
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+80105fe8:	8b 7d e0             	mov    -0x20(%ebp),%edi
+  for(fd = 0; fd < NOFILE; fd++){
+80105feb:	31 db                	xor    %ebx,%ebx
+  struct proc *curproc = myproc();
+80105fed:	e8 5e e3 ff ff       	call   80104350 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+80105ff2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(curproc->ofile[fd] == 0){
+80105ff8:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+80105ffc:	85 f6                	test   %esi,%esi
+80105ffe:	74 30                	je     80106030 <sys_pipe+0x80>
+  for(fd = 0; fd < NOFILE; fd++){
+80106000:	83 c3 01             	add    $0x1,%ebx
+80106003:	83 fb 10             	cmp    $0x10,%ebx
+80106006:	75 f0                	jne    80105ff8 <sys_pipe+0x48>
+    if(fd0 >= 0)
+      myproc()->ofile[fd0] = 0;
+    fileclose(rf);
+80106008:	83 ec 0c             	sub    $0xc,%esp
+8010600b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010600e:	e8 9d b8 ff ff       	call   801018b0 <fileclose>
+    fileclose(wf);
+80106013:	58                   	pop    %eax
+80106014:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106017:	e8 94 b8 ff ff       	call   801018b0 <fileclose>
+    return -1;
+8010601c:	83 c4 10             	add    $0x10,%esp
+8010601f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106024:	eb 5b                	jmp    80106081 <sys_pipe+0xd1>
+80106026:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010602d:	8d 76 00             	lea    0x0(%esi),%esi
+      curproc->ofile[fd] = f;
+80106030:	8d 73 08             	lea    0x8(%ebx),%esi
+80106033:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+80106037:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+  struct proc *curproc = myproc();
+8010603a:	e8 11 e3 ff ff       	call   80104350 <myproc>
+  for(fd = 0; fd < NOFILE; fd++){
+8010603f:	31 d2                	xor    %edx,%edx
+80106041:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(curproc->ofile[fd] == 0){
+80106048:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+8010604c:	85 c9                	test   %ecx,%ecx
+8010604e:	74 20                	je     80106070 <sys_pipe+0xc0>
+  for(fd = 0; fd < NOFILE; fd++){
+80106050:	83 c2 01             	add    $0x1,%edx
+80106053:	83 fa 10             	cmp    $0x10,%edx
+80106056:	75 f0                	jne    80106048 <sys_pipe+0x98>
+      myproc()->ofile[fd0] = 0;
+80106058:	e8 f3 e2 ff ff       	call   80104350 <myproc>
+8010605d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80106064:	00 
+80106065:	eb a1                	jmp    80106008 <sys_pipe+0x58>
+80106067:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010606e:	66 90                	xchg   %ax,%ax
+      curproc->ofile[fd] = f;
+80106070:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+  }
+  fd[0] = fd0;
+80106074:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80106077:	89 18                	mov    %ebx,(%eax)
+  fd[1] = fd1;
+80106079:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010607c:	89 50 04             	mov    %edx,0x4(%eax)
+  return 0;
+8010607f:	31 c0                	xor    %eax,%eax
+}
+80106081:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106084:	5b                   	pop    %ebx
+80106085:	5e                   	pop    %esi
+80106086:	5f                   	pop    %edi
+80106087:	5d                   	pop    %ebp
+80106088:	c3                   	ret    
+80106089:	66 90                	xchg   %ax,%ax
+8010608b:	66 90                	xchg   %ax,%ax
+8010608d:	66 90                	xchg   %ax,%ax
+8010608f:	90                   	nop
+
+80106090 <sys_fork>:
+#include "mmu.h"
+#include "proc.h"
+#include "ASCII_image.h"
+int
+sys_fork(void)
+{
+80106090:	f3 0f 1e fb          	endbr32 
+  return fork();
+80106094:	e9 67 e4 ff ff       	jmp    80104500 <fork>
+80106099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801060a0 <sys_exit>:
+}
+
+int
+sys_exit(void)
+{
+801060a0:	f3 0f 1e fb          	endbr32 
+801060a4:	55                   	push   %ebp
+801060a5:	89 e5                	mov    %esp,%ebp
+801060a7:	83 ec 08             	sub    $0x8,%esp
+  exit();
+801060aa:	e8 d1 e6 ff ff       	call   80104780 <exit>
+  return 0;  // not reached
+}
+801060af:	31 c0                	xor    %eax,%eax
+801060b1:	c9                   	leave  
+801060b2:	c3                   	ret    
+801060b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801060c0 <sys_wait>:
+
+int
+sys_wait(void)
+{
+801060c0:	f3 0f 1e fb          	endbr32 
+  return wait();
+801060c4:	e9 07 e9 ff ff       	jmp    801049d0 <wait>
+801060c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801060d0 <sys_kill>:
+}
+
+int
+sys_kill(void)
+{
+801060d0:	f3 0f 1e fb          	endbr32 
+801060d4:	55                   	push   %ebp
+801060d5:	89 e5                	mov    %esp,%ebp
+801060d7:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+
+  if(argint(0, &pid) < 0)
+801060da:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801060dd:	50                   	push   %eax
+801060de:	6a 00                	push   $0x0
+801060e0:	e8 5b f2 ff ff       	call   80105340 <argint>
+801060e5:	83 c4 10             	add    $0x10,%esp
+801060e8:	85 c0                	test   %eax,%eax
+801060ea:	78 14                	js     80106100 <sys_kill+0x30>
+    return -1;
+  return kill(pid);
+801060ec:	83 ec 0c             	sub    $0xc,%esp
+801060ef:	ff 75 f4             	pushl  -0xc(%ebp)
+801060f2:	e8 39 ea ff ff       	call   80104b30 <kill>
+801060f7:	83 c4 10             	add    $0x10,%esp
+}
+801060fa:	c9                   	leave  
+801060fb:	c3                   	ret    
+801060fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106100:	c9                   	leave  
+    return -1;
+80106101:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106106:	c3                   	ret    
+80106107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010610e:	66 90                	xchg   %ax,%ax
+
+80106110 <sys_getpid>:
+
+int
+sys_getpid(void)
+{
+80106110:	f3 0f 1e fb          	endbr32 
+80106114:	55                   	push   %ebp
+80106115:	89 e5                	mov    %esp,%ebp
+80106117:	83 ec 08             	sub    $0x8,%esp
+  return myproc()->pid;
+8010611a:	e8 31 e2 ff ff       	call   80104350 <myproc>
+8010611f:	8b 40 10             	mov    0x10(%eax),%eax
+}
+80106122:	c9                   	leave  
+80106123:	c3                   	ret    
+80106124:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010612b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010612f:	90                   	nop
+
+80106130 <sys_sbrk>:
+
+int
+sys_sbrk(void)
+{
+80106130:	f3 0f 1e fb          	endbr32 
+80106134:	55                   	push   %ebp
+80106135:	89 e5                	mov    %esp,%ebp
+80106137:	53                   	push   %ebx
+  int addr;
+  int n;
+
+  if(argint(0, &n) < 0)
+80106138:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+8010613b:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+8010613e:	50                   	push   %eax
+8010613f:	6a 00                	push   $0x0
+80106141:	e8 fa f1 ff ff       	call   80105340 <argint>
+80106146:	83 c4 10             	add    $0x10,%esp
+80106149:	85 c0                	test   %eax,%eax
+8010614b:	78 23                	js     80106170 <sys_sbrk+0x40>
+    return -1;
+  addr = myproc()->sz;
+8010614d:	e8 fe e1 ff ff       	call   80104350 <myproc>
+  if(growproc(n) < 0)
+80106152:	83 ec 0c             	sub    $0xc,%esp
+  addr = myproc()->sz;
+80106155:	8b 18                	mov    (%eax),%ebx
+  if(growproc(n) < 0)
+80106157:	ff 75 f4             	pushl  -0xc(%ebp)
+8010615a:	e8 21 e3 ff ff       	call   80104480 <growproc>
+8010615f:	83 c4 10             	add    $0x10,%esp
+80106162:	85 c0                	test   %eax,%eax
+80106164:	78 0a                	js     80106170 <sys_sbrk+0x40>
+    return -1;
+  return addr;
+}
+80106166:	89 d8                	mov    %ebx,%eax
+80106168:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010616b:	c9                   	leave  
+8010616c:	c3                   	ret    
+8010616d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80106170:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80106175:	eb ef                	jmp    80106166 <sys_sbrk+0x36>
+80106177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010617e:	66 90                	xchg   %ax,%ax
+
+80106180 <sys_sleep>:
+
+int
+sys_sleep(void)
+{
+80106180:	f3 0f 1e fb          	endbr32 
+80106184:	55                   	push   %ebp
+80106185:	89 e5                	mov    %esp,%ebp
+80106187:	53                   	push   %ebx
+  int n;
+  uint ticks0;
+
+  if(argint(0, &n) < 0)
+80106188:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+8010618b:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+8010618e:	50                   	push   %eax
+8010618f:	6a 00                	push   $0x0
+80106191:	e8 aa f1 ff ff       	call   80105340 <argint>
+80106196:	83 c4 10             	add    $0x10,%esp
+80106199:	85 c0                	test   %eax,%eax
+8010619b:	0f 88 86 00 00 00    	js     80106227 <sys_sleep+0xa7>
+    return -1;
+  acquire(&tickslock);
+801061a1:	83 ec 0c             	sub    $0xc,%esp
+801061a4:	68 60 66 11 80       	push   $0x80116660
+801061a9:	e8 a2 ed ff ff       	call   80104f50 <acquire>
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+801061ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
+  ticks0 = ticks;
+801061b1:	8b 1d a0 6e 11 80    	mov    0x80116ea0,%ebx
+  while(ticks - ticks0 < n){
+801061b7:	83 c4 10             	add    $0x10,%esp
+801061ba:	85 d2                	test   %edx,%edx
+801061bc:	75 23                	jne    801061e1 <sys_sleep+0x61>
+801061be:	eb 50                	jmp    80106210 <sys_sleep+0x90>
+    if(myproc()->killed){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+801061c0:	83 ec 08             	sub    $0x8,%esp
+801061c3:	68 60 66 11 80       	push   $0x80116660
+801061c8:	68 a0 6e 11 80       	push   $0x80116ea0
+801061cd:	e8 3e e7 ff ff       	call   80104910 <sleep>
+  while(ticks - ticks0 < n){
+801061d2:	a1 a0 6e 11 80       	mov    0x80116ea0,%eax
+801061d7:	83 c4 10             	add    $0x10,%esp
+801061da:	29 d8                	sub    %ebx,%eax
+801061dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801061df:	73 2f                	jae    80106210 <sys_sleep+0x90>
+    if(myproc()->killed){
+801061e1:	e8 6a e1 ff ff       	call   80104350 <myproc>
+801061e6:	8b 40 24             	mov    0x24(%eax),%eax
+801061e9:	85 c0                	test   %eax,%eax
+801061eb:	74 d3                	je     801061c0 <sys_sleep+0x40>
+      release(&tickslock);
+801061ed:	83 ec 0c             	sub    $0xc,%esp
+801061f0:	68 60 66 11 80       	push   $0x80116660
+801061f5:	e8 16 ee ff ff       	call   80105010 <release>
+  }
+  release(&tickslock);
+  return 0;
+}
+801061fa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+      return -1;
+801061fd:	83 c4 10             	add    $0x10,%esp
+80106200:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80106205:	c9                   	leave  
+80106206:	c3                   	ret    
+80106207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010620e:	66 90                	xchg   %ax,%ax
+  release(&tickslock);
+80106210:	83 ec 0c             	sub    $0xc,%esp
+80106213:	68 60 66 11 80       	push   $0x80116660
+80106218:	e8 f3 ed ff ff       	call   80105010 <release>
+  return 0;
+8010621d:	83 c4 10             	add    $0x10,%esp
+80106220:	31 c0                	xor    %eax,%eax
+}
+80106222:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80106225:	c9                   	leave  
+80106226:	c3                   	ret    
+    return -1;
+80106227:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010622c:	eb f4                	jmp    80106222 <sys_sleep+0xa2>
+8010622e:	66 90                	xchg   %ax,%ax
+
+80106230 <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+int
+sys_uptime(void)
+{
+80106230:	f3 0f 1e fb          	endbr32 
+80106234:	55                   	push   %ebp
+80106235:	89 e5                	mov    %esp,%ebp
+80106237:	53                   	push   %ebx
+80106238:	83 ec 10             	sub    $0x10,%esp
+  uint xticks;
+
+  acquire(&tickslock);
+8010623b:	68 60 66 11 80       	push   $0x80116660
+80106240:	e8 0b ed ff ff       	call   80104f50 <acquire>
+  xticks = ticks;
+80106245:	8b 1d a0 6e 11 80    	mov    0x80116ea0,%ebx
+  release(&tickslock);
+8010624b:	c7 04 24 60 66 11 80 	movl   $0x80116660,(%esp)
+80106252:	e8 b9 ed ff ff       	call   80105010 <release>
+  return xticks;
+}
+80106257:	89 d8                	mov    %ebx,%eax
+80106259:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010625c:	c9                   	leave  
+8010625d:	c3                   	ret    
+8010625e:	66 90                	xchg   %ax,%ax
+
+80106260 <sys_draw>:
+
+
+// Implementing a sys_draw function
+int sys_draw(void)
+{
+80106260:	f3 0f 1e fb          	endbr32 
+80106264:	55                   	push   %ebp
+80106265:	89 e5                	mov    %esp,%ebp
+80106267:	56                   	push   %esi
+80106268:	53                   	push   %ebx
+
+  char *buffer;
+  int size;
+
+  // Feches the 1st 32 bit int argument which is the max buffer sizeand assigns it to the size
+  if (argint(1, &size) == -1)
+80106269:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+8010626c:	83 ec 18             	sub    $0x18,%esp
+  if (argint(1, &size) == -1)
+8010626f:	50                   	push   %eax
+80106270:	6a 01                	push   $0x1
+80106272:	e8 c9 f0 ff ff       	call   80105340 <argint>
+80106277:	83 c4 10             	add    $0x10,%esp
+8010627a:	83 f8 ff             	cmp    $0xffffffff,%eax
+8010627d:	74 5e                	je     801062dd <sys_draw+0x7d>
+    return -1;
+  }
+
+  // Check that the buffer pointer in first argument
+  // lies within the process address space or not till size bytes, if it does not then return -1.
+  if (argptr(0, (char **)&buffer, size) == -1)
+8010627f:	83 ec 04             	sub    $0x4,%esp
+80106282:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80106285:	ff 75 f4             	pushl  -0xc(%ebp)
+80106288:	50                   	push   %eax
+80106289:	6a 00                	push   $0x0
+8010628b:	e8 00 f1 ff ff       	call   80105390 <argptr>
+80106290:	83 c4 10             	add    $0x10,%esp
+80106293:	83 f8 ff             	cmp    $0xffffffff,%eax
+80106296:	74 45                	je     801062dd <sys_draw+0x7d>
+  }
+  
+  // copying macro wolfi from ASCII_image.h
+  char *draw = wolfi;
+  
+  int drawsize = 0;
+80106298:	31 d2                	xor    %edx,%edx
+8010629a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  while (draw[drawsize] != '\0')
+  {
+    drawsize++;
+801062a0:	83 c2 01             	add    $0x1,%edx
+  while (draw[drawsize] != '\0')
+801062a3:	80 ba 64 83 10 80 00 	cmpb   $0x0,-0x7fef7c9c(%edx)
+801062aa:	75 f4                	jne    801062a0 <sys_draw+0x40>
+  }
+
+  if (drawsize > size)
+801062ac:	39 55 f4             	cmp    %edx,-0xc(%ebp)
+801062af:	7c 2c                	jl     801062dd <sys_draw+0x7d>
+801062b1:	89 d1                	mov    %edx,%ecx
+801062b3:	bb 20 00 00 00       	mov    $0x20,%ebx
+    //buffer size is insufficient to draw the wolf picture.
+    return -1;
+  }
+  
+  //copying the wolf picture into the buffer.
+  for (int i = 0; i < drawsize; i++)
+801062b8:	31 c0                	xor    %eax,%eax
+801062ba:	eb 0b                	jmp    801062c7 <sys_draw+0x67>
+801062bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801062c0:	0f b6 98 64 83 10 80 	movzbl -0x7fef7c9c(%eax),%ebx
+  {
+    buffer[i] = draw[i];
+801062c7:	8b 75 f0             	mov    -0x10(%ebp),%esi
+801062ca:	88 1c 06             	mov    %bl,(%esi,%eax,1)
+  for (int i = 0; i < drawsize; i++)
+801062cd:	83 c0 01             	add    $0x1,%eax
+801062d0:	39 c8                	cmp    %ecx,%eax
+801062d2:	75 ec                	jne    801062c0 <sys_draw+0x60>
+  }
+  
+  //return the size of draw pictue
+  return drawsize;
+}
+801062d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801062d7:	89 d0                	mov    %edx,%eax
+801062d9:	5b                   	pop    %ebx
+801062da:	5e                   	pop    %esi
+801062db:	5d                   	pop    %ebp
+801062dc:	c3                   	ret    
+    return -1;
+801062dd:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+801062e2:	eb f0                	jmp    801062d4 <sys_draw+0x74>
+801062e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801062eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801062ef:	90                   	nop
+
+801062f0 <sys_history>:
+
+int sys_history(void) {
+801062f0:	f3 0f 1e fb          	endbr32 
+801062f4:	55                   	push   %ebp
+801062f5:	89 e5                	mov    %esp,%ebp
+801062f7:	83 ec 1c             	sub    $0x1c,%esp
+  char *buffer;
+  int historyId;
+  
+  argptr(0, &buffer, 1);
+801062fa:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801062fd:	6a 01                	push   $0x1
+801062ff:	50                   	push   %eax
+80106300:	6a 00                	push   $0x0
+80106302:	e8 89 f0 ff ff       	call   80105390 <argptr>
+  
+  argint(1, &historyId);
+80106307:	58                   	pop    %eax
+80106308:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010630b:	5a                   	pop    %edx
+8010630c:	50                   	push   %eax
+8010630d:	6a 01                	push   $0x1
+8010630f:	e8 2c f0 ff ff       	call   80105340 <argint>
+
+  return history(buffer, historyId);
+80106314:	59                   	pop    %ecx
+80106315:	58                   	pop    %eax
+80106316:	ff 75 f4             	pushl  -0xc(%ebp)
+80106319:	ff 75 f0             	pushl  -0x10(%ebp)
+8010631c:	e8 3f b0 ff ff       	call   80101360 <history>
+}
+80106321:	c9                   	leave  
+80106322:	c3                   	ret    
+
+80106323 <alltraps>:
+
+  # vectors.S sends all traps here.
+.globl alltraps
+alltraps:
+  # Build trap frame.
+  pushl %ds
+80106323:	1e                   	push   %ds
+  pushl %es
+80106324:	06                   	push   %es
+  pushl %fs
+80106325:	0f a0                	push   %fs
+  pushl %gs
+80106327:	0f a8                	push   %gs
+  pushal
+80106329:	60                   	pusha  
+  
+  # Set up data segments.
+  movw $(SEG_KDATA<<3), %ax
+8010632a:	66 b8 10 00          	mov    $0x10,%ax
+  movw %ax, %ds
+8010632e:	8e d8                	mov    %eax,%ds
+  movw %ax, %es
+80106330:	8e c0                	mov    %eax,%es
+
+  # Call trap(tf), where tf=%esp
+  pushl %esp
+80106332:	54                   	push   %esp
+  call trap
+80106333:	e8 c8 00 00 00       	call   80106400 <trap>
+  addl $4, %esp
+80106338:	83 c4 04             	add    $0x4,%esp
+
+8010633b <trapret>:
+
+  # Return falls through to trapret...
+.globl trapret
+trapret:
+  popal
+8010633b:	61                   	popa   
+  popl %gs
+8010633c:	0f a9                	pop    %gs
+  popl %fs
+8010633e:	0f a1                	pop    %fs
+  popl %es
+80106340:	07                   	pop    %es
+  popl %ds
+80106341:	1f                   	pop    %ds
+  addl $0x8, %esp  # trapno and errcode
+80106342:	83 c4 08             	add    $0x8,%esp
+  iret
+80106345:	cf                   	iret   
+80106346:	66 90                	xchg   %ax,%ax
+80106348:	66 90                	xchg   %ax,%ax
+8010634a:	66 90                	xchg   %ax,%ax
+8010634c:	66 90                	xchg   %ax,%ax
+8010634e:	66 90                	xchg   %ax,%ax
+
+80106350 <tvinit>:
+struct spinlock tickslock;
+uint ticks;
+
+void
+tvinit(void)
+{
+80106350:	f3 0f 1e fb          	endbr32 
+80106354:	55                   	push   %ebp
+  int i;
+
+  for(i = 0; i < 256; i++)
+80106355:	31 c0                	xor    %eax,%eax
+{
+80106357:	89 e5                	mov    %esp,%ebp
+80106359:	83 ec 08             	sub    $0x8,%esp
+8010635c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
+80106360:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
+80106367:	c7 04 c5 a2 66 11 80 	movl   $0x8e000008,-0x7fee995e(,%eax,8)
+8010636e:	08 00 00 8e 
+80106372:	66 89 14 c5 a0 66 11 	mov    %dx,-0x7fee9960(,%eax,8)
+80106379:	80 
+8010637a:	c1 ea 10             	shr    $0x10,%edx
+8010637d:	66 89 14 c5 a6 66 11 	mov    %dx,-0x7fee995a(,%eax,8)
+80106384:	80 
+  for(i = 0; i < 256; i++)
+80106385:	83 c0 01             	add    $0x1,%eax
+80106388:	3d 00 01 00 00       	cmp    $0x100,%eax
+8010638d:	75 d1                	jne    80106360 <tvinit+0x10>
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+
+  initlock(&tickslock, "time");
+8010638f:	83 ec 08             	sub    $0x8,%esp
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+80106392:	a1 08 b1 10 80       	mov    0x8010b108,%eax
+80106397:	c7 05 a2 68 11 80 08 	movl   $0xef000008,0x801168a2
+8010639e:	00 00 ef 
+  initlock(&tickslock, "time");
+801063a1:	68 8d 89 10 80       	push   $0x8010898d
+801063a6:	68 60 66 11 80       	push   $0x80116660
+  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+801063ab:	66 a3 a0 68 11 80    	mov    %ax,0x801168a0
+801063b1:	c1 e8 10             	shr    $0x10,%eax
+801063b4:	66 a3 a6 68 11 80    	mov    %ax,0x801168a6
+  initlock(&tickslock, "time");
+801063ba:	e8 11 ea ff ff       	call   80104dd0 <initlock>
+}
+801063bf:	83 c4 10             	add    $0x10,%esp
+801063c2:	c9                   	leave  
+801063c3:	c3                   	ret    
+801063c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801063cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801063cf:	90                   	nop
+
+801063d0 <idtinit>:
+
+void
+idtinit(void)
+{
+801063d0:	f3 0f 1e fb          	endbr32 
+801063d4:	55                   	push   %ebp
+  pd[0] = size-1;
+801063d5:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+801063da:	89 e5                	mov    %esp,%ebp
+801063dc:	83 ec 10             	sub    $0x10,%esp
+801063df:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+  pd[1] = (uint)p;
+801063e3:	b8 a0 66 11 80       	mov    $0x801166a0,%eax
+801063e8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+  pd[2] = (uint)p >> 16;
+801063ec:	c1 e8 10             	shr    $0x10,%eax
+801063ef:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+  asm volatile("lidt (%0)" : : "r" (pd));
+801063f3:	8d 45 fa             	lea    -0x6(%ebp),%eax
+801063f6:	0f 01 18             	lidtl  (%eax)
+  lidt(idt, sizeof(idt));
+}
+801063f9:	c9                   	leave  
+801063fa:	c3                   	ret    
+801063fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801063ff:	90                   	nop
+
+80106400 <trap>:
+
+//PAGEBREAK: 41
+void
+trap(struct trapframe *tf)
+{
+80106400:	f3 0f 1e fb          	endbr32 
+80106404:	55                   	push   %ebp
+80106405:	89 e5                	mov    %esp,%ebp
+80106407:	57                   	push   %edi
+80106408:	56                   	push   %esi
+80106409:	53                   	push   %ebx
+8010640a:	83 ec 1c             	sub    $0x1c,%esp
+8010640d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(tf->trapno == T_SYSCALL){
+80106410:	8b 43 30             	mov    0x30(%ebx),%eax
+80106413:	83 f8 40             	cmp    $0x40,%eax
+80106416:	0f 84 bc 01 00 00    	je     801065d8 <trap+0x1d8>
+    if(myproc()->killed)
+      exit();
+    return;
+  }
+
+  switch(tf->trapno){
+8010641c:	83 e8 20             	sub    $0x20,%eax
+8010641f:	83 f8 1f             	cmp    $0x1f,%eax
+80106422:	77 08                	ja     8010642c <trap+0x2c>
+80106424:	3e ff 24 85 34 8a 10 	notrack jmp *-0x7fef75cc(,%eax,4)
+8010642b:	80 
+    lapiceoi();
+    break;
+
+  //PAGEBREAK: 13
+  default:
+    if(myproc() == 0 || (tf->cs&3) == 0){
+8010642c:	e8 1f df ff ff       	call   80104350 <myproc>
+80106431:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106434:	85 c0                	test   %eax,%eax
+80106436:	0f 84 eb 01 00 00    	je     80106627 <trap+0x227>
+8010643c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80106440:	0f 84 e1 01 00 00    	je     80106627 <trap+0x227>
+
+static inline uint
+rcr2(void)
+{
+  uint val;
+  asm volatile("movl %%cr2,%0" : "=r" (val));
+80106446:	0f 20 d1             	mov    %cr2,%ecx
+80106449:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+              tf->trapno, cpuid(), tf->eip, rcr2());
+      panic("trap");
+    }
+    // In user space, assume process misbehaved.
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010644c:	e8 df de ff ff       	call   80104330 <cpuid>
+80106451:	8b 73 30             	mov    0x30(%ebx),%esi
+80106454:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106457:	8b 43 34             	mov    0x34(%ebx),%eax
+8010645a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+            "eip 0x%x addr 0x%x--kill proc\n",
+            myproc()->pid, myproc()->name, tf->trapno,
+8010645d:	e8 ee de ff ff       	call   80104350 <myproc>
+80106462:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106465:	e8 e6 de ff ff       	call   80104350 <myproc>
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010646a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+8010646d:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80106470:	51                   	push   %ecx
+80106471:	57                   	push   %edi
+80106472:	52                   	push   %edx
+80106473:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106476:	56                   	push   %esi
+            myproc()->pid, myproc()->name, tf->trapno,
+80106477:	8b 75 e0             	mov    -0x20(%ebp),%esi
+8010647a:	83 c6 6c             	add    $0x6c,%esi
+    cprintf("pid %d %s: trap %d err %d on cpu %d "
+8010647d:	56                   	push   %esi
+8010647e:	ff 70 10             	pushl  0x10(%eax)
+80106481:	68 f0 89 10 80       	push   $0x801089f0
+80106486:	e8 65 a2 ff ff       	call   801006f0 <cprintf>
+            tf->err, cpuid(), tf->eip, rcr2());
+    myproc()->killed = 1;
+8010648b:	83 c4 20             	add    $0x20,%esp
+8010648e:	e8 bd de ff ff       	call   80104350 <myproc>
+80106493:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+  }
+
+  // Force process exit if it has been killed and is in user space.
+  // (If it is still executing in the kernel, let it keep running
+  // until it gets to the regular system call return.)
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+8010649a:	e8 b1 de ff ff       	call   80104350 <myproc>
+8010649f:	85 c0                	test   %eax,%eax
+801064a1:	74 1d                	je     801064c0 <trap+0xc0>
+801064a3:	e8 a8 de ff ff       	call   80104350 <myproc>
+801064a8:	8b 50 24             	mov    0x24(%eax),%edx
+801064ab:	85 d2                	test   %edx,%edx
+801064ad:	74 11                	je     801064c0 <trap+0xc0>
+801064af:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801064b3:	83 e0 03             	and    $0x3,%eax
+801064b6:	66 83 f8 03          	cmp    $0x3,%ax
+801064ba:	0f 84 50 01 00 00    	je     80106610 <trap+0x210>
+    exit();
+
+  // Force process to give up CPU on clock tick.
+  // If interrupts were on while locks held, would need to check nlock.
+  if(myproc() && myproc()->state == RUNNING &&
+801064c0:	e8 8b de ff ff       	call   80104350 <myproc>
+801064c5:	85 c0                	test   %eax,%eax
+801064c7:	74 0f                	je     801064d8 <trap+0xd8>
+801064c9:	e8 82 de ff ff       	call   80104350 <myproc>
+801064ce:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+801064d2:	0f 84 e8 00 00 00    	je     801065c0 <trap+0x1c0>
+     tf->trapno == T_IRQ0+IRQ_TIMER)
+    yield();
+
+  // Check if the process has been killed since we yielded
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+801064d8:	e8 73 de ff ff       	call   80104350 <myproc>
+801064dd:	85 c0                	test   %eax,%eax
+801064df:	74 1d                	je     801064fe <trap+0xfe>
+801064e1:	e8 6a de ff ff       	call   80104350 <myproc>
+801064e6:	8b 40 24             	mov    0x24(%eax),%eax
+801064e9:	85 c0                	test   %eax,%eax
+801064eb:	74 11                	je     801064fe <trap+0xfe>
+801064ed:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+801064f1:	83 e0 03             	and    $0x3,%eax
+801064f4:	66 83 f8 03          	cmp    $0x3,%ax
+801064f8:	0f 84 03 01 00 00    	je     80106601 <trap+0x201>
+    exit();
+}
+801064fe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106501:	5b                   	pop    %ebx
+80106502:	5e                   	pop    %esi
+80106503:	5f                   	pop    %edi
+80106504:	5d                   	pop    %ebp
+80106505:	c3                   	ret    
+    ideintr();
+80106506:	e8 c5 c6 ff ff       	call   80102bd0 <ideintr>
+    lapiceoi();
+8010650b:	e8 a0 cd ff ff       	call   801032b0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+80106510:	e8 3b de ff ff       	call   80104350 <myproc>
+80106515:	85 c0                	test   %eax,%eax
+80106517:	75 8a                	jne    801064a3 <trap+0xa3>
+80106519:	eb a5                	jmp    801064c0 <trap+0xc0>
+    if(cpuid() == 0){
+8010651b:	e8 10 de ff ff       	call   80104330 <cpuid>
+80106520:	85 c0                	test   %eax,%eax
+80106522:	75 e7                	jne    8010650b <trap+0x10b>
+      acquire(&tickslock);
+80106524:	83 ec 0c             	sub    $0xc,%esp
+80106527:	68 60 66 11 80       	push   $0x80116660
+8010652c:	e8 1f ea ff ff       	call   80104f50 <acquire>
+      wakeup(&ticks);
+80106531:	c7 04 24 a0 6e 11 80 	movl   $0x80116ea0,(%esp)
+      ticks++;
+80106538:	83 05 a0 6e 11 80 01 	addl   $0x1,0x80116ea0
+      wakeup(&ticks);
+8010653f:	e8 8c e5 ff ff       	call   80104ad0 <wakeup>
+      release(&tickslock);
+80106544:	c7 04 24 60 66 11 80 	movl   $0x80116660,(%esp)
+8010654b:	e8 c0 ea ff ff       	call   80105010 <release>
+80106550:	83 c4 10             	add    $0x10,%esp
+    lapiceoi();
+80106553:	eb b6                	jmp    8010650b <trap+0x10b>
+    kbdintr();
+80106555:	e8 16 cc ff ff       	call   80103170 <kbdintr>
+    lapiceoi();
+8010655a:	e8 51 cd ff ff       	call   801032b0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+8010655f:	e8 ec dd ff ff       	call   80104350 <myproc>
+80106564:	85 c0                	test   %eax,%eax
+80106566:	0f 85 37 ff ff ff    	jne    801064a3 <trap+0xa3>
+8010656c:	e9 4f ff ff ff       	jmp    801064c0 <trap+0xc0>
+    uartintr();
+80106571:	e8 4a 02 00 00       	call   801067c0 <uartintr>
+    lapiceoi();
+80106576:	e8 35 cd ff ff       	call   801032b0 <lapiceoi>
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+8010657b:	e8 d0 dd ff ff       	call   80104350 <myproc>
+80106580:	85 c0                	test   %eax,%eax
+80106582:	0f 85 1b ff ff ff    	jne    801064a3 <trap+0xa3>
+80106588:	e9 33 ff ff ff       	jmp    801064c0 <trap+0xc0>
+    cprintf("cpu%d: spurious interrupt at %x:%x\n",
+8010658d:	8b 7b 38             	mov    0x38(%ebx),%edi
+80106590:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80106594:	e8 97 dd ff ff       	call   80104330 <cpuid>
+80106599:	57                   	push   %edi
+8010659a:	56                   	push   %esi
+8010659b:	50                   	push   %eax
+8010659c:	68 98 89 10 80       	push   $0x80108998
+801065a1:	e8 4a a1 ff ff       	call   801006f0 <cprintf>
+    lapiceoi();
+801065a6:	e8 05 cd ff ff       	call   801032b0 <lapiceoi>
+    break;
+801065ab:	83 c4 10             	add    $0x10,%esp
+  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
+801065ae:	e8 9d dd ff ff       	call   80104350 <myproc>
+801065b3:	85 c0                	test   %eax,%eax
+801065b5:	0f 85 e8 fe ff ff    	jne    801064a3 <trap+0xa3>
+801065bb:	e9 00 ff ff ff       	jmp    801064c0 <trap+0xc0>
+  if(myproc() && myproc()->state == RUNNING &&
+801065c0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+801065c4:	0f 85 0e ff ff ff    	jne    801064d8 <trap+0xd8>
+    yield();
+801065ca:	e8 f1 e2 ff ff       	call   801048c0 <yield>
+801065cf:	e9 04 ff ff ff       	jmp    801064d8 <trap+0xd8>
+801065d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(myproc()->killed)
+801065d8:	e8 73 dd ff ff       	call   80104350 <myproc>
+801065dd:	8b 70 24             	mov    0x24(%eax),%esi
+801065e0:	85 f6                	test   %esi,%esi
+801065e2:	75 3c                	jne    80106620 <trap+0x220>
+    myproc()->tf = tf;
+801065e4:	e8 67 dd ff ff       	call   80104350 <myproc>
+801065e9:	89 58 18             	mov    %ebx,0x18(%eax)
+    syscall();
+801065ec:	e8 3f ee ff ff       	call   80105430 <syscall>
+    if(myproc()->killed)
+801065f1:	e8 5a dd ff ff       	call   80104350 <myproc>
+801065f6:	8b 48 24             	mov    0x24(%eax),%ecx
+801065f9:	85 c9                	test   %ecx,%ecx
+801065fb:	0f 84 fd fe ff ff    	je     801064fe <trap+0xfe>
+}
+80106601:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106604:	5b                   	pop    %ebx
+80106605:	5e                   	pop    %esi
+80106606:	5f                   	pop    %edi
+80106607:	5d                   	pop    %ebp
+      exit();
+80106608:	e9 73 e1 ff ff       	jmp    80104780 <exit>
+8010660d:	8d 76 00             	lea    0x0(%esi),%esi
+    exit();
+80106610:	e8 6b e1 ff ff       	call   80104780 <exit>
+80106615:	e9 a6 fe ff ff       	jmp    801064c0 <trap+0xc0>
+8010661a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      exit();
+80106620:	e8 5b e1 ff ff       	call   80104780 <exit>
+80106625:	eb bd                	jmp    801065e4 <trap+0x1e4>
+80106627:	0f 20 d6             	mov    %cr2,%esi
+      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+8010662a:	e8 01 dd ff ff       	call   80104330 <cpuid>
+8010662f:	83 ec 0c             	sub    $0xc,%esp
+80106632:	56                   	push   %esi
+80106633:	57                   	push   %edi
+80106634:	50                   	push   %eax
+80106635:	ff 73 30             	pushl  0x30(%ebx)
+80106638:	68 bc 89 10 80       	push   $0x801089bc
+8010663d:	e8 ae a0 ff ff       	call   801006f0 <cprintf>
+      panic("trap");
+80106642:	83 c4 14             	add    $0x14,%esp
+80106645:	68 92 89 10 80       	push   $0x80108992
+8010664a:	e8 41 9d ff ff       	call   80100390 <panic>
+8010664f:	90                   	nop
+
+80106650 <uartgetc>:
+  outb(COM1+0, c);
+}
+
+static int
+uartgetc(void)
+{
+80106650:	f3 0f 1e fb          	endbr32 
+  if(!uart)
+80106654:	a1 bc b5 10 80       	mov    0x8010b5bc,%eax
+80106659:	85 c0                	test   %eax,%eax
+8010665b:	74 1b                	je     80106678 <uartgetc+0x28>
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+8010665d:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106662:	ec                   	in     (%dx),%al
+    return -1;
+  if(!(inb(COM1+5) & 0x01))
+80106663:	a8 01                	test   $0x1,%al
+80106665:	74 11                	je     80106678 <uartgetc+0x28>
+80106667:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010666c:	ec                   	in     (%dx),%al
+    return -1;
+  return inb(COM1+0);
+8010666d:	0f b6 c0             	movzbl %al,%eax
+80106670:	c3                   	ret    
+80106671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80106678:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+8010667d:	c3                   	ret    
+8010667e:	66 90                	xchg   %ax,%ax
+
+80106680 <uartputc.part.0>:
+uartputc(int c)
+80106680:	55                   	push   %ebp
+80106681:	89 e5                	mov    %esp,%ebp
+80106683:	57                   	push   %edi
+80106684:	89 c7                	mov    %eax,%edi
+80106686:	56                   	push   %esi
+80106687:	be fd 03 00 00       	mov    $0x3fd,%esi
+8010668c:	53                   	push   %ebx
+8010668d:	bb 80 00 00 00       	mov    $0x80,%ebx
+80106692:	83 ec 0c             	sub    $0xc,%esp
+80106695:	eb 1b                	jmp    801066b2 <uartputc.part.0+0x32>
+80106697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010669e:	66 90                	xchg   %ax,%ax
+    microdelay(10);
+801066a0:	83 ec 0c             	sub    $0xc,%esp
+801066a3:	6a 0a                	push   $0xa
+801066a5:	e8 26 cc ff ff       	call   801032d0 <microdelay>
+  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
+801066aa:	83 c4 10             	add    $0x10,%esp
+801066ad:	83 eb 01             	sub    $0x1,%ebx
+801066b0:	74 07                	je     801066b9 <uartputc.part.0+0x39>
+801066b2:	89 f2                	mov    %esi,%edx
+801066b4:	ec                   	in     (%dx),%al
+801066b5:	a8 20                	test   $0x20,%al
+801066b7:	74 e7                	je     801066a0 <uartputc.part.0+0x20>
+  asm volatile("out %0,%1" : : "a" (data), "d" (port));
+801066b9:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801066be:	89 f8                	mov    %edi,%eax
+801066c0:	ee                   	out    %al,(%dx)
+}
+801066c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801066c4:	5b                   	pop    %ebx
+801066c5:	5e                   	pop    %esi
+801066c6:	5f                   	pop    %edi
+801066c7:	5d                   	pop    %ebp
+801066c8:	c3                   	ret    
+801066c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801066d0 <uartinit>:
+{
+801066d0:	f3 0f 1e fb          	endbr32 
+801066d4:	55                   	push   %ebp
+801066d5:	31 c9                	xor    %ecx,%ecx
+801066d7:	89 c8                	mov    %ecx,%eax
+801066d9:	89 e5                	mov    %esp,%ebp
+801066db:	57                   	push   %edi
+801066dc:	56                   	push   %esi
+801066dd:	53                   	push   %ebx
+801066de:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+801066e3:	89 da                	mov    %ebx,%edx
+801066e5:	83 ec 0c             	sub    $0xc,%esp
+801066e8:	ee                   	out    %al,(%dx)
+801066e9:	bf fb 03 00 00       	mov    $0x3fb,%edi
+801066ee:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+801066f3:	89 fa                	mov    %edi,%edx
+801066f5:	ee                   	out    %al,(%dx)
+801066f6:	b8 0c 00 00 00       	mov    $0xc,%eax
+801066fb:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106700:	ee                   	out    %al,(%dx)
+80106701:	be f9 03 00 00       	mov    $0x3f9,%esi
+80106706:	89 c8                	mov    %ecx,%eax
+80106708:	89 f2                	mov    %esi,%edx
+8010670a:	ee                   	out    %al,(%dx)
+8010670b:	b8 03 00 00 00       	mov    $0x3,%eax
+80106710:	89 fa                	mov    %edi,%edx
+80106712:	ee                   	out    %al,(%dx)
+80106713:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80106718:	89 c8                	mov    %ecx,%eax
+8010671a:	ee                   	out    %al,(%dx)
+8010671b:	b8 01 00 00 00       	mov    $0x1,%eax
+80106720:	89 f2                	mov    %esi,%edx
+80106722:	ee                   	out    %al,(%dx)
+  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
+80106723:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80106728:	ec                   	in     (%dx),%al
+  if(inb(COM1+5) == 0xFF)
+80106729:	3c ff                	cmp    $0xff,%al
+8010672b:	74 52                	je     8010677f <uartinit+0xaf>
+  uart = 1;
+8010672d:	c7 05 bc b5 10 80 01 	movl   $0x1,0x8010b5bc
+80106734:	00 00 00 
+80106737:	89 da                	mov    %ebx,%edx
+80106739:	ec                   	in     (%dx),%al
+8010673a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+8010673f:	ec                   	in     (%dx),%al
+  ioapicenable(IRQ_COM1, 0);
+80106740:	83 ec 08             	sub    $0x8,%esp
+80106743:	be 76 00 00 00       	mov    $0x76,%esi
+  for(p="xv6...\n"; *p; p++)
+80106748:	bb b4 8a 10 80       	mov    $0x80108ab4,%ebx
+  ioapicenable(IRQ_COM1, 0);
+8010674d:	6a 00                	push   $0x0
+8010674f:	6a 04                	push   $0x4
+80106751:	e8 ca c6 ff ff       	call   80102e20 <ioapicenable>
+80106756:	83 c4 10             	add    $0x10,%esp
+  for(p="xv6...\n"; *p; p++)
+80106759:	b8 78 00 00 00       	mov    $0x78,%eax
+8010675e:	eb 04                	jmp    80106764 <uartinit+0x94>
+80106760:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+  if(!uart)
+80106764:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
+8010676a:	85 d2                	test   %edx,%edx
+8010676c:	74 08                	je     80106776 <uartinit+0xa6>
+    uartputc(*p);
+8010676e:	0f be c0             	movsbl %al,%eax
+80106771:	e8 0a ff ff ff       	call   80106680 <uartputc.part.0>
+  for(p="xv6...\n"; *p; p++)
+80106776:	89 f0                	mov    %esi,%eax
+80106778:	83 c3 01             	add    $0x1,%ebx
+8010677b:	84 c0                	test   %al,%al
+8010677d:	75 e1                	jne    80106760 <uartinit+0x90>
+}
+8010677f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106782:	5b                   	pop    %ebx
+80106783:	5e                   	pop    %esi
+80106784:	5f                   	pop    %edi
+80106785:	5d                   	pop    %ebp
+80106786:	c3                   	ret    
+80106787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010678e:	66 90                	xchg   %ax,%ax
+
+80106790 <uartputc>:
+{
+80106790:	f3 0f 1e fb          	endbr32 
+80106794:	55                   	push   %ebp
+  if(!uart)
+80106795:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
+{
+8010679b:	89 e5                	mov    %esp,%ebp
+8010679d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(!uart)
+801067a0:	85 d2                	test   %edx,%edx
+801067a2:	74 0c                	je     801067b0 <uartputc+0x20>
+}
+801067a4:	5d                   	pop    %ebp
+801067a5:	e9 d6 fe ff ff       	jmp    80106680 <uartputc.part.0>
+801067aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801067b0:	5d                   	pop    %ebp
+801067b1:	c3                   	ret    
+801067b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801067b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801067c0 <uartintr>:
+
+void
+uartintr(void)
+{
+801067c0:	f3 0f 1e fb          	endbr32 
+801067c4:	55                   	push   %ebp
+801067c5:	89 e5                	mov    %esp,%ebp
+801067c7:	83 ec 14             	sub    $0x14,%esp
+  consoleintr(uartgetc);
+801067ca:	68 50 66 10 80       	push   $0x80106650
+801067cf:	e8 9c a4 ff ff       	call   80100c70 <consoleintr>
+}
+801067d4:	83 c4 10             	add    $0x10,%esp
+801067d7:	c9                   	leave  
+801067d8:	c3                   	ret    
+
+801067d9 <vector0>:
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+801067d9:	6a 00                	push   $0x0
+  pushl $0
+801067db:	6a 00                	push   $0x0
+  jmp alltraps
+801067dd:	e9 41 fb ff ff       	jmp    80106323 <alltraps>
+
+801067e2 <vector1>:
+.globl vector1
+vector1:
+  pushl $0
+801067e2:	6a 00                	push   $0x0
+  pushl $1
+801067e4:	6a 01                	push   $0x1
+  jmp alltraps
+801067e6:	e9 38 fb ff ff       	jmp    80106323 <alltraps>
+
+801067eb <vector2>:
+.globl vector2
+vector2:
+  pushl $0
+801067eb:	6a 00                	push   $0x0
+  pushl $2
+801067ed:	6a 02                	push   $0x2
+  jmp alltraps
+801067ef:	e9 2f fb ff ff       	jmp    80106323 <alltraps>
+
+801067f4 <vector3>:
+.globl vector3
+vector3:
+  pushl $0
+801067f4:	6a 00                	push   $0x0
+  pushl $3
+801067f6:	6a 03                	push   $0x3
+  jmp alltraps
+801067f8:	e9 26 fb ff ff       	jmp    80106323 <alltraps>
+
+801067fd <vector4>:
+.globl vector4
+vector4:
+  pushl $0
+801067fd:	6a 00                	push   $0x0
+  pushl $4
+801067ff:	6a 04                	push   $0x4
+  jmp alltraps
+80106801:	e9 1d fb ff ff       	jmp    80106323 <alltraps>
+
+80106806 <vector5>:
+.globl vector5
+vector5:
+  pushl $0
+80106806:	6a 00                	push   $0x0
+  pushl $5
+80106808:	6a 05                	push   $0x5
+  jmp alltraps
+8010680a:	e9 14 fb ff ff       	jmp    80106323 <alltraps>
+
+8010680f <vector6>:
+.globl vector6
+vector6:
+  pushl $0
+8010680f:	6a 00                	push   $0x0
+  pushl $6
+80106811:	6a 06                	push   $0x6
+  jmp alltraps
+80106813:	e9 0b fb ff ff       	jmp    80106323 <alltraps>
+
+80106818 <vector7>:
+.globl vector7
+vector7:
+  pushl $0
+80106818:	6a 00                	push   $0x0
+  pushl $7
+8010681a:	6a 07                	push   $0x7
+  jmp alltraps
+8010681c:	e9 02 fb ff ff       	jmp    80106323 <alltraps>
+
+80106821 <vector8>:
+.globl vector8
+vector8:
+  pushl $8
+80106821:	6a 08                	push   $0x8
+  jmp alltraps
+80106823:	e9 fb fa ff ff       	jmp    80106323 <alltraps>
+
+80106828 <vector9>:
+.globl vector9
+vector9:
+  pushl $0
+80106828:	6a 00                	push   $0x0
+  pushl $9
+8010682a:	6a 09                	push   $0x9
+  jmp alltraps
+8010682c:	e9 f2 fa ff ff       	jmp    80106323 <alltraps>
+
+80106831 <vector10>:
+.globl vector10
+vector10:
+  pushl $10
+80106831:	6a 0a                	push   $0xa
+  jmp alltraps
+80106833:	e9 eb fa ff ff       	jmp    80106323 <alltraps>
+
+80106838 <vector11>:
+.globl vector11
+vector11:
+  pushl $11
+80106838:	6a 0b                	push   $0xb
+  jmp alltraps
+8010683a:	e9 e4 fa ff ff       	jmp    80106323 <alltraps>
+
+8010683f <vector12>:
+.globl vector12
+vector12:
+  pushl $12
+8010683f:	6a 0c                	push   $0xc
+  jmp alltraps
+80106841:	e9 dd fa ff ff       	jmp    80106323 <alltraps>
+
+80106846 <vector13>:
+.globl vector13
+vector13:
+  pushl $13
+80106846:	6a 0d                	push   $0xd
+  jmp alltraps
+80106848:	e9 d6 fa ff ff       	jmp    80106323 <alltraps>
+
+8010684d <vector14>:
+.globl vector14
+vector14:
+  pushl $14
+8010684d:	6a 0e                	push   $0xe
+  jmp alltraps
+8010684f:	e9 cf fa ff ff       	jmp    80106323 <alltraps>
+
+80106854 <vector15>:
+.globl vector15
+vector15:
+  pushl $0
+80106854:	6a 00                	push   $0x0
+  pushl $15
+80106856:	6a 0f                	push   $0xf
+  jmp alltraps
+80106858:	e9 c6 fa ff ff       	jmp    80106323 <alltraps>
+
+8010685d <vector16>:
+.globl vector16
+vector16:
+  pushl $0
+8010685d:	6a 00                	push   $0x0
+  pushl $16
+8010685f:	6a 10                	push   $0x10
+  jmp alltraps
+80106861:	e9 bd fa ff ff       	jmp    80106323 <alltraps>
+
+80106866 <vector17>:
+.globl vector17
+vector17:
+  pushl $17
+80106866:	6a 11                	push   $0x11
+  jmp alltraps
+80106868:	e9 b6 fa ff ff       	jmp    80106323 <alltraps>
+
+8010686d <vector18>:
+.globl vector18
+vector18:
+  pushl $0
+8010686d:	6a 00                	push   $0x0
+  pushl $18
+8010686f:	6a 12                	push   $0x12
+  jmp alltraps
+80106871:	e9 ad fa ff ff       	jmp    80106323 <alltraps>
+
+80106876 <vector19>:
+.globl vector19
+vector19:
+  pushl $0
+80106876:	6a 00                	push   $0x0
+  pushl $19
+80106878:	6a 13                	push   $0x13
+  jmp alltraps
+8010687a:	e9 a4 fa ff ff       	jmp    80106323 <alltraps>
+
+8010687f <vector20>:
+.globl vector20
+vector20:
+  pushl $0
+8010687f:	6a 00                	push   $0x0
+  pushl $20
+80106881:	6a 14                	push   $0x14
+  jmp alltraps
+80106883:	e9 9b fa ff ff       	jmp    80106323 <alltraps>
+
+80106888 <vector21>:
+.globl vector21
+vector21:
+  pushl $0
+80106888:	6a 00                	push   $0x0
+  pushl $21
+8010688a:	6a 15                	push   $0x15
+  jmp alltraps
+8010688c:	e9 92 fa ff ff       	jmp    80106323 <alltraps>
+
+80106891 <vector22>:
+.globl vector22
+vector22:
+  pushl $0
+80106891:	6a 00                	push   $0x0
+  pushl $22
+80106893:	6a 16                	push   $0x16
+  jmp alltraps
+80106895:	e9 89 fa ff ff       	jmp    80106323 <alltraps>
+
+8010689a <vector23>:
+.globl vector23
+vector23:
+  pushl $0
+8010689a:	6a 00                	push   $0x0
+  pushl $23
+8010689c:	6a 17                	push   $0x17
+  jmp alltraps
+8010689e:	e9 80 fa ff ff       	jmp    80106323 <alltraps>
+
+801068a3 <vector24>:
+.globl vector24
+vector24:
+  pushl $0
+801068a3:	6a 00                	push   $0x0
+  pushl $24
+801068a5:	6a 18                	push   $0x18
+  jmp alltraps
+801068a7:	e9 77 fa ff ff       	jmp    80106323 <alltraps>
+
+801068ac <vector25>:
+.globl vector25
+vector25:
+  pushl $0
+801068ac:	6a 00                	push   $0x0
+  pushl $25
+801068ae:	6a 19                	push   $0x19
+  jmp alltraps
+801068b0:	e9 6e fa ff ff       	jmp    80106323 <alltraps>
+
+801068b5 <vector26>:
+.globl vector26
+vector26:
+  pushl $0
+801068b5:	6a 00                	push   $0x0
+  pushl $26
+801068b7:	6a 1a                	push   $0x1a
+  jmp alltraps
+801068b9:	e9 65 fa ff ff       	jmp    80106323 <alltraps>
+
+801068be <vector27>:
+.globl vector27
+vector27:
+  pushl $0
+801068be:	6a 00                	push   $0x0
+  pushl $27
+801068c0:	6a 1b                	push   $0x1b
+  jmp alltraps
+801068c2:	e9 5c fa ff ff       	jmp    80106323 <alltraps>
+
+801068c7 <vector28>:
+.globl vector28
+vector28:
+  pushl $0
+801068c7:	6a 00                	push   $0x0
+  pushl $28
+801068c9:	6a 1c                	push   $0x1c
+  jmp alltraps
+801068cb:	e9 53 fa ff ff       	jmp    80106323 <alltraps>
+
+801068d0 <vector29>:
+.globl vector29
+vector29:
+  pushl $0
+801068d0:	6a 00                	push   $0x0
+  pushl $29
+801068d2:	6a 1d                	push   $0x1d
+  jmp alltraps
+801068d4:	e9 4a fa ff ff       	jmp    80106323 <alltraps>
+
+801068d9 <vector30>:
+.globl vector30
+vector30:
+  pushl $0
+801068d9:	6a 00                	push   $0x0
+  pushl $30
+801068db:	6a 1e                	push   $0x1e
+  jmp alltraps
+801068dd:	e9 41 fa ff ff       	jmp    80106323 <alltraps>
+
+801068e2 <vector31>:
+.globl vector31
+vector31:
+  pushl $0
+801068e2:	6a 00                	push   $0x0
+  pushl $31
+801068e4:	6a 1f                	push   $0x1f
+  jmp alltraps
+801068e6:	e9 38 fa ff ff       	jmp    80106323 <alltraps>
+
+801068eb <vector32>:
+.globl vector32
+vector32:
+  pushl $0
+801068eb:	6a 00                	push   $0x0
+  pushl $32
+801068ed:	6a 20                	push   $0x20
+  jmp alltraps
+801068ef:	e9 2f fa ff ff       	jmp    80106323 <alltraps>
+
+801068f4 <vector33>:
+.globl vector33
+vector33:
+  pushl $0
+801068f4:	6a 00                	push   $0x0
+  pushl $33
+801068f6:	6a 21                	push   $0x21
+  jmp alltraps
+801068f8:	e9 26 fa ff ff       	jmp    80106323 <alltraps>
+
+801068fd <vector34>:
+.globl vector34
+vector34:
+  pushl $0
+801068fd:	6a 00                	push   $0x0
+  pushl $34
+801068ff:	6a 22                	push   $0x22
+  jmp alltraps
+80106901:	e9 1d fa ff ff       	jmp    80106323 <alltraps>
+
+80106906 <vector35>:
+.globl vector35
+vector35:
+  pushl $0
+80106906:	6a 00                	push   $0x0
+  pushl $35
+80106908:	6a 23                	push   $0x23
+  jmp alltraps
+8010690a:	e9 14 fa ff ff       	jmp    80106323 <alltraps>
+
+8010690f <vector36>:
+.globl vector36
+vector36:
+  pushl $0
+8010690f:	6a 00                	push   $0x0
+  pushl $36
+80106911:	6a 24                	push   $0x24
+  jmp alltraps
+80106913:	e9 0b fa ff ff       	jmp    80106323 <alltraps>
+
+80106918 <vector37>:
+.globl vector37
+vector37:
+  pushl $0
+80106918:	6a 00                	push   $0x0
+  pushl $37
+8010691a:	6a 25                	push   $0x25
+  jmp alltraps
+8010691c:	e9 02 fa ff ff       	jmp    80106323 <alltraps>
+
+80106921 <vector38>:
+.globl vector38
+vector38:
+  pushl $0
+80106921:	6a 00                	push   $0x0
+  pushl $38
+80106923:	6a 26                	push   $0x26
+  jmp alltraps
+80106925:	e9 f9 f9 ff ff       	jmp    80106323 <alltraps>
+
+8010692a <vector39>:
+.globl vector39
+vector39:
+  pushl $0
+8010692a:	6a 00                	push   $0x0
+  pushl $39
+8010692c:	6a 27                	push   $0x27
+  jmp alltraps
+8010692e:	e9 f0 f9 ff ff       	jmp    80106323 <alltraps>
+
+80106933 <vector40>:
+.globl vector40
+vector40:
+  pushl $0
+80106933:	6a 00                	push   $0x0
+  pushl $40
+80106935:	6a 28                	push   $0x28
+  jmp alltraps
+80106937:	e9 e7 f9 ff ff       	jmp    80106323 <alltraps>
+
+8010693c <vector41>:
+.globl vector41
+vector41:
+  pushl $0
+8010693c:	6a 00                	push   $0x0
+  pushl $41
+8010693e:	6a 29                	push   $0x29
+  jmp alltraps
+80106940:	e9 de f9 ff ff       	jmp    80106323 <alltraps>
+
+80106945 <vector42>:
+.globl vector42
+vector42:
+  pushl $0
+80106945:	6a 00                	push   $0x0
+  pushl $42
+80106947:	6a 2a                	push   $0x2a
+  jmp alltraps
+80106949:	e9 d5 f9 ff ff       	jmp    80106323 <alltraps>
+
+8010694e <vector43>:
+.globl vector43
+vector43:
+  pushl $0
+8010694e:	6a 00                	push   $0x0
+  pushl $43
+80106950:	6a 2b                	push   $0x2b
+  jmp alltraps
+80106952:	e9 cc f9 ff ff       	jmp    80106323 <alltraps>
+
+80106957 <vector44>:
+.globl vector44
+vector44:
+  pushl $0
+80106957:	6a 00                	push   $0x0
+  pushl $44
+80106959:	6a 2c                	push   $0x2c
+  jmp alltraps
+8010695b:	e9 c3 f9 ff ff       	jmp    80106323 <alltraps>
+
+80106960 <vector45>:
+.globl vector45
+vector45:
+  pushl $0
+80106960:	6a 00                	push   $0x0
+  pushl $45
+80106962:	6a 2d                	push   $0x2d
+  jmp alltraps
+80106964:	e9 ba f9 ff ff       	jmp    80106323 <alltraps>
+
+80106969 <vector46>:
+.globl vector46
+vector46:
+  pushl $0
+80106969:	6a 00                	push   $0x0
+  pushl $46
+8010696b:	6a 2e                	push   $0x2e
+  jmp alltraps
+8010696d:	e9 b1 f9 ff ff       	jmp    80106323 <alltraps>
+
+80106972 <vector47>:
+.globl vector47
+vector47:
+  pushl $0
+80106972:	6a 00                	push   $0x0
+  pushl $47
+80106974:	6a 2f                	push   $0x2f
+  jmp alltraps
+80106976:	e9 a8 f9 ff ff       	jmp    80106323 <alltraps>
+
+8010697b <vector48>:
+.globl vector48
+vector48:
+  pushl $0
+8010697b:	6a 00                	push   $0x0
+  pushl $48
+8010697d:	6a 30                	push   $0x30
+  jmp alltraps
+8010697f:	e9 9f f9 ff ff       	jmp    80106323 <alltraps>
+
+80106984 <vector49>:
+.globl vector49
+vector49:
+  pushl $0
+80106984:	6a 00                	push   $0x0
+  pushl $49
+80106986:	6a 31                	push   $0x31
+  jmp alltraps
+80106988:	e9 96 f9 ff ff       	jmp    80106323 <alltraps>
+
+8010698d <vector50>:
+.globl vector50
+vector50:
+  pushl $0
+8010698d:	6a 00                	push   $0x0
+  pushl $50
+8010698f:	6a 32                	push   $0x32
+  jmp alltraps
+80106991:	e9 8d f9 ff ff       	jmp    80106323 <alltraps>
+
+80106996 <vector51>:
+.globl vector51
+vector51:
+  pushl $0
+80106996:	6a 00                	push   $0x0
+  pushl $51
+80106998:	6a 33                	push   $0x33
+  jmp alltraps
+8010699a:	e9 84 f9 ff ff       	jmp    80106323 <alltraps>
+
+8010699f <vector52>:
+.globl vector52
+vector52:
+  pushl $0
+8010699f:	6a 00                	push   $0x0
+  pushl $52
+801069a1:	6a 34                	push   $0x34
+  jmp alltraps
+801069a3:	e9 7b f9 ff ff       	jmp    80106323 <alltraps>
+
+801069a8 <vector53>:
+.globl vector53
+vector53:
+  pushl $0
+801069a8:	6a 00                	push   $0x0
+  pushl $53
+801069aa:	6a 35                	push   $0x35
+  jmp alltraps
+801069ac:	e9 72 f9 ff ff       	jmp    80106323 <alltraps>
+
+801069b1 <vector54>:
+.globl vector54
+vector54:
+  pushl $0
+801069b1:	6a 00                	push   $0x0
+  pushl $54
+801069b3:	6a 36                	push   $0x36
+  jmp alltraps
+801069b5:	e9 69 f9 ff ff       	jmp    80106323 <alltraps>
+
+801069ba <vector55>:
+.globl vector55
+vector55:
+  pushl $0
+801069ba:	6a 00                	push   $0x0
+  pushl $55
+801069bc:	6a 37                	push   $0x37
+  jmp alltraps
+801069be:	e9 60 f9 ff ff       	jmp    80106323 <alltraps>
+
+801069c3 <vector56>:
+.globl vector56
+vector56:
+  pushl $0
+801069c3:	6a 00                	push   $0x0
+  pushl $56
+801069c5:	6a 38                	push   $0x38
+  jmp alltraps
+801069c7:	e9 57 f9 ff ff       	jmp    80106323 <alltraps>
+
+801069cc <vector57>:
+.globl vector57
+vector57:
+  pushl $0
+801069cc:	6a 00                	push   $0x0
+  pushl $57
+801069ce:	6a 39                	push   $0x39
+  jmp alltraps
+801069d0:	e9 4e f9 ff ff       	jmp    80106323 <alltraps>
+
+801069d5 <vector58>:
+.globl vector58
+vector58:
+  pushl $0
+801069d5:	6a 00                	push   $0x0
+  pushl $58
+801069d7:	6a 3a                	push   $0x3a
+  jmp alltraps
+801069d9:	e9 45 f9 ff ff       	jmp    80106323 <alltraps>
+
+801069de <vector59>:
+.globl vector59
+vector59:
+  pushl $0
+801069de:	6a 00                	push   $0x0
+  pushl $59
+801069e0:	6a 3b                	push   $0x3b
+  jmp alltraps
+801069e2:	e9 3c f9 ff ff       	jmp    80106323 <alltraps>
+
+801069e7 <vector60>:
+.globl vector60
+vector60:
+  pushl $0
+801069e7:	6a 00                	push   $0x0
+  pushl $60
+801069e9:	6a 3c                	push   $0x3c
+  jmp alltraps
+801069eb:	e9 33 f9 ff ff       	jmp    80106323 <alltraps>
+
+801069f0 <vector61>:
+.globl vector61
+vector61:
+  pushl $0
+801069f0:	6a 00                	push   $0x0
+  pushl $61
+801069f2:	6a 3d                	push   $0x3d
+  jmp alltraps
+801069f4:	e9 2a f9 ff ff       	jmp    80106323 <alltraps>
+
+801069f9 <vector62>:
+.globl vector62
+vector62:
+  pushl $0
+801069f9:	6a 00                	push   $0x0
+  pushl $62
+801069fb:	6a 3e                	push   $0x3e
+  jmp alltraps
+801069fd:	e9 21 f9 ff ff       	jmp    80106323 <alltraps>
+
+80106a02 <vector63>:
+.globl vector63
+vector63:
+  pushl $0
+80106a02:	6a 00                	push   $0x0
+  pushl $63
+80106a04:	6a 3f                	push   $0x3f
+  jmp alltraps
+80106a06:	e9 18 f9 ff ff       	jmp    80106323 <alltraps>
+
+80106a0b <vector64>:
+.globl vector64
+vector64:
+  pushl $0
+80106a0b:	6a 00                	push   $0x0
+  pushl $64
+80106a0d:	6a 40                	push   $0x40
+  jmp alltraps
+80106a0f:	e9 0f f9 ff ff       	jmp    80106323 <alltraps>
+
+80106a14 <vector65>:
+.globl vector65
+vector65:
+  pushl $0
+80106a14:	6a 00                	push   $0x0
+  pushl $65
+80106a16:	6a 41                	push   $0x41
+  jmp alltraps
+80106a18:	e9 06 f9 ff ff       	jmp    80106323 <alltraps>
+
+80106a1d <vector66>:
+.globl vector66
+vector66:
+  pushl $0
+80106a1d:	6a 00                	push   $0x0
+  pushl $66
+80106a1f:	6a 42                	push   $0x42
+  jmp alltraps
+80106a21:	e9 fd f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a26 <vector67>:
+.globl vector67
+vector67:
+  pushl $0
+80106a26:	6a 00                	push   $0x0
+  pushl $67
+80106a28:	6a 43                	push   $0x43
+  jmp alltraps
+80106a2a:	e9 f4 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a2f <vector68>:
+.globl vector68
+vector68:
+  pushl $0
+80106a2f:	6a 00                	push   $0x0
+  pushl $68
+80106a31:	6a 44                	push   $0x44
+  jmp alltraps
+80106a33:	e9 eb f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a38 <vector69>:
+.globl vector69
+vector69:
+  pushl $0
+80106a38:	6a 00                	push   $0x0
+  pushl $69
+80106a3a:	6a 45                	push   $0x45
+  jmp alltraps
+80106a3c:	e9 e2 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a41 <vector70>:
+.globl vector70
+vector70:
+  pushl $0
+80106a41:	6a 00                	push   $0x0
+  pushl $70
+80106a43:	6a 46                	push   $0x46
+  jmp alltraps
+80106a45:	e9 d9 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a4a <vector71>:
+.globl vector71
+vector71:
+  pushl $0
+80106a4a:	6a 00                	push   $0x0
+  pushl $71
+80106a4c:	6a 47                	push   $0x47
+  jmp alltraps
+80106a4e:	e9 d0 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a53 <vector72>:
+.globl vector72
+vector72:
+  pushl $0
+80106a53:	6a 00                	push   $0x0
+  pushl $72
+80106a55:	6a 48                	push   $0x48
+  jmp alltraps
+80106a57:	e9 c7 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a5c <vector73>:
+.globl vector73
+vector73:
+  pushl $0
+80106a5c:	6a 00                	push   $0x0
+  pushl $73
+80106a5e:	6a 49                	push   $0x49
+  jmp alltraps
+80106a60:	e9 be f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a65 <vector74>:
+.globl vector74
+vector74:
+  pushl $0
+80106a65:	6a 00                	push   $0x0
+  pushl $74
+80106a67:	6a 4a                	push   $0x4a
+  jmp alltraps
+80106a69:	e9 b5 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a6e <vector75>:
+.globl vector75
+vector75:
+  pushl $0
+80106a6e:	6a 00                	push   $0x0
+  pushl $75
+80106a70:	6a 4b                	push   $0x4b
+  jmp alltraps
+80106a72:	e9 ac f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a77 <vector76>:
+.globl vector76
+vector76:
+  pushl $0
+80106a77:	6a 00                	push   $0x0
+  pushl $76
+80106a79:	6a 4c                	push   $0x4c
+  jmp alltraps
+80106a7b:	e9 a3 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a80 <vector77>:
+.globl vector77
+vector77:
+  pushl $0
+80106a80:	6a 00                	push   $0x0
+  pushl $77
+80106a82:	6a 4d                	push   $0x4d
+  jmp alltraps
+80106a84:	e9 9a f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a89 <vector78>:
+.globl vector78
+vector78:
+  pushl $0
+80106a89:	6a 00                	push   $0x0
+  pushl $78
+80106a8b:	6a 4e                	push   $0x4e
+  jmp alltraps
+80106a8d:	e9 91 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a92 <vector79>:
+.globl vector79
+vector79:
+  pushl $0
+80106a92:	6a 00                	push   $0x0
+  pushl $79
+80106a94:	6a 4f                	push   $0x4f
+  jmp alltraps
+80106a96:	e9 88 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106a9b <vector80>:
+.globl vector80
+vector80:
+  pushl $0
+80106a9b:	6a 00                	push   $0x0
+  pushl $80
+80106a9d:	6a 50                	push   $0x50
+  jmp alltraps
+80106a9f:	e9 7f f8 ff ff       	jmp    80106323 <alltraps>
+
+80106aa4 <vector81>:
+.globl vector81
+vector81:
+  pushl $0
+80106aa4:	6a 00                	push   $0x0
+  pushl $81
+80106aa6:	6a 51                	push   $0x51
+  jmp alltraps
+80106aa8:	e9 76 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106aad <vector82>:
+.globl vector82
+vector82:
+  pushl $0
+80106aad:	6a 00                	push   $0x0
+  pushl $82
+80106aaf:	6a 52                	push   $0x52
+  jmp alltraps
+80106ab1:	e9 6d f8 ff ff       	jmp    80106323 <alltraps>
+
+80106ab6 <vector83>:
+.globl vector83
+vector83:
+  pushl $0
+80106ab6:	6a 00                	push   $0x0
+  pushl $83
+80106ab8:	6a 53                	push   $0x53
+  jmp alltraps
+80106aba:	e9 64 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106abf <vector84>:
+.globl vector84
+vector84:
+  pushl $0
+80106abf:	6a 00                	push   $0x0
+  pushl $84
+80106ac1:	6a 54                	push   $0x54
+  jmp alltraps
+80106ac3:	e9 5b f8 ff ff       	jmp    80106323 <alltraps>
+
+80106ac8 <vector85>:
+.globl vector85
+vector85:
+  pushl $0
+80106ac8:	6a 00                	push   $0x0
+  pushl $85
+80106aca:	6a 55                	push   $0x55
+  jmp alltraps
+80106acc:	e9 52 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106ad1 <vector86>:
+.globl vector86
+vector86:
+  pushl $0
+80106ad1:	6a 00                	push   $0x0
+  pushl $86
+80106ad3:	6a 56                	push   $0x56
+  jmp alltraps
+80106ad5:	e9 49 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106ada <vector87>:
+.globl vector87
+vector87:
+  pushl $0
+80106ada:	6a 00                	push   $0x0
+  pushl $87
+80106adc:	6a 57                	push   $0x57
+  jmp alltraps
+80106ade:	e9 40 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106ae3 <vector88>:
+.globl vector88
+vector88:
+  pushl $0
+80106ae3:	6a 00                	push   $0x0
+  pushl $88
+80106ae5:	6a 58                	push   $0x58
+  jmp alltraps
+80106ae7:	e9 37 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106aec <vector89>:
+.globl vector89
+vector89:
+  pushl $0
+80106aec:	6a 00                	push   $0x0
+  pushl $89
+80106aee:	6a 59                	push   $0x59
+  jmp alltraps
+80106af0:	e9 2e f8 ff ff       	jmp    80106323 <alltraps>
+
+80106af5 <vector90>:
+.globl vector90
+vector90:
+  pushl $0
+80106af5:	6a 00                	push   $0x0
+  pushl $90
+80106af7:	6a 5a                	push   $0x5a
+  jmp alltraps
+80106af9:	e9 25 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106afe <vector91>:
+.globl vector91
+vector91:
+  pushl $0
+80106afe:	6a 00                	push   $0x0
+  pushl $91
+80106b00:	6a 5b                	push   $0x5b
+  jmp alltraps
+80106b02:	e9 1c f8 ff ff       	jmp    80106323 <alltraps>
+
+80106b07 <vector92>:
+.globl vector92
+vector92:
+  pushl $0
+80106b07:	6a 00                	push   $0x0
+  pushl $92
+80106b09:	6a 5c                	push   $0x5c
+  jmp alltraps
+80106b0b:	e9 13 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106b10 <vector93>:
+.globl vector93
+vector93:
+  pushl $0
+80106b10:	6a 00                	push   $0x0
+  pushl $93
+80106b12:	6a 5d                	push   $0x5d
+  jmp alltraps
+80106b14:	e9 0a f8 ff ff       	jmp    80106323 <alltraps>
+
+80106b19 <vector94>:
+.globl vector94
+vector94:
+  pushl $0
+80106b19:	6a 00                	push   $0x0
+  pushl $94
+80106b1b:	6a 5e                	push   $0x5e
+  jmp alltraps
+80106b1d:	e9 01 f8 ff ff       	jmp    80106323 <alltraps>
+
+80106b22 <vector95>:
+.globl vector95
+vector95:
+  pushl $0
+80106b22:	6a 00                	push   $0x0
+  pushl $95
+80106b24:	6a 5f                	push   $0x5f
+  jmp alltraps
+80106b26:	e9 f8 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b2b <vector96>:
+.globl vector96
+vector96:
+  pushl $0
+80106b2b:	6a 00                	push   $0x0
+  pushl $96
+80106b2d:	6a 60                	push   $0x60
+  jmp alltraps
+80106b2f:	e9 ef f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b34 <vector97>:
+.globl vector97
+vector97:
+  pushl $0
+80106b34:	6a 00                	push   $0x0
+  pushl $97
+80106b36:	6a 61                	push   $0x61
+  jmp alltraps
+80106b38:	e9 e6 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b3d <vector98>:
+.globl vector98
+vector98:
+  pushl $0
+80106b3d:	6a 00                	push   $0x0
+  pushl $98
+80106b3f:	6a 62                	push   $0x62
+  jmp alltraps
+80106b41:	e9 dd f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b46 <vector99>:
+.globl vector99
+vector99:
+  pushl $0
+80106b46:	6a 00                	push   $0x0
+  pushl $99
+80106b48:	6a 63                	push   $0x63
+  jmp alltraps
+80106b4a:	e9 d4 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b4f <vector100>:
+.globl vector100
+vector100:
+  pushl $0
+80106b4f:	6a 00                	push   $0x0
+  pushl $100
+80106b51:	6a 64                	push   $0x64
+  jmp alltraps
+80106b53:	e9 cb f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b58 <vector101>:
+.globl vector101
+vector101:
+  pushl $0
+80106b58:	6a 00                	push   $0x0
+  pushl $101
+80106b5a:	6a 65                	push   $0x65
+  jmp alltraps
+80106b5c:	e9 c2 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b61 <vector102>:
+.globl vector102
+vector102:
+  pushl $0
+80106b61:	6a 00                	push   $0x0
+  pushl $102
+80106b63:	6a 66                	push   $0x66
+  jmp alltraps
+80106b65:	e9 b9 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b6a <vector103>:
+.globl vector103
+vector103:
+  pushl $0
+80106b6a:	6a 00                	push   $0x0
+  pushl $103
+80106b6c:	6a 67                	push   $0x67
+  jmp alltraps
+80106b6e:	e9 b0 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b73 <vector104>:
+.globl vector104
+vector104:
+  pushl $0
+80106b73:	6a 00                	push   $0x0
+  pushl $104
+80106b75:	6a 68                	push   $0x68
+  jmp alltraps
+80106b77:	e9 a7 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b7c <vector105>:
+.globl vector105
+vector105:
+  pushl $0
+80106b7c:	6a 00                	push   $0x0
+  pushl $105
+80106b7e:	6a 69                	push   $0x69
+  jmp alltraps
+80106b80:	e9 9e f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b85 <vector106>:
+.globl vector106
+vector106:
+  pushl $0
+80106b85:	6a 00                	push   $0x0
+  pushl $106
+80106b87:	6a 6a                	push   $0x6a
+  jmp alltraps
+80106b89:	e9 95 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b8e <vector107>:
+.globl vector107
+vector107:
+  pushl $0
+80106b8e:	6a 00                	push   $0x0
+  pushl $107
+80106b90:	6a 6b                	push   $0x6b
+  jmp alltraps
+80106b92:	e9 8c f7 ff ff       	jmp    80106323 <alltraps>
+
+80106b97 <vector108>:
+.globl vector108
+vector108:
+  pushl $0
+80106b97:	6a 00                	push   $0x0
+  pushl $108
+80106b99:	6a 6c                	push   $0x6c
+  jmp alltraps
+80106b9b:	e9 83 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106ba0 <vector109>:
+.globl vector109
+vector109:
+  pushl $0
+80106ba0:	6a 00                	push   $0x0
+  pushl $109
+80106ba2:	6a 6d                	push   $0x6d
+  jmp alltraps
+80106ba4:	e9 7a f7 ff ff       	jmp    80106323 <alltraps>
+
+80106ba9 <vector110>:
+.globl vector110
+vector110:
+  pushl $0
+80106ba9:	6a 00                	push   $0x0
+  pushl $110
+80106bab:	6a 6e                	push   $0x6e
+  jmp alltraps
+80106bad:	e9 71 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bb2 <vector111>:
+.globl vector111
+vector111:
+  pushl $0
+80106bb2:	6a 00                	push   $0x0
+  pushl $111
+80106bb4:	6a 6f                	push   $0x6f
+  jmp alltraps
+80106bb6:	e9 68 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bbb <vector112>:
+.globl vector112
+vector112:
+  pushl $0
+80106bbb:	6a 00                	push   $0x0
+  pushl $112
+80106bbd:	6a 70                	push   $0x70
+  jmp alltraps
+80106bbf:	e9 5f f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bc4 <vector113>:
+.globl vector113
+vector113:
+  pushl $0
+80106bc4:	6a 00                	push   $0x0
+  pushl $113
+80106bc6:	6a 71                	push   $0x71
+  jmp alltraps
+80106bc8:	e9 56 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bcd <vector114>:
+.globl vector114
+vector114:
+  pushl $0
+80106bcd:	6a 00                	push   $0x0
+  pushl $114
+80106bcf:	6a 72                	push   $0x72
+  jmp alltraps
+80106bd1:	e9 4d f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bd6 <vector115>:
+.globl vector115
+vector115:
+  pushl $0
+80106bd6:	6a 00                	push   $0x0
+  pushl $115
+80106bd8:	6a 73                	push   $0x73
+  jmp alltraps
+80106bda:	e9 44 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bdf <vector116>:
+.globl vector116
+vector116:
+  pushl $0
+80106bdf:	6a 00                	push   $0x0
+  pushl $116
+80106be1:	6a 74                	push   $0x74
+  jmp alltraps
+80106be3:	e9 3b f7 ff ff       	jmp    80106323 <alltraps>
+
+80106be8 <vector117>:
+.globl vector117
+vector117:
+  pushl $0
+80106be8:	6a 00                	push   $0x0
+  pushl $117
+80106bea:	6a 75                	push   $0x75
+  jmp alltraps
+80106bec:	e9 32 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bf1 <vector118>:
+.globl vector118
+vector118:
+  pushl $0
+80106bf1:	6a 00                	push   $0x0
+  pushl $118
+80106bf3:	6a 76                	push   $0x76
+  jmp alltraps
+80106bf5:	e9 29 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106bfa <vector119>:
+.globl vector119
+vector119:
+  pushl $0
+80106bfa:	6a 00                	push   $0x0
+  pushl $119
+80106bfc:	6a 77                	push   $0x77
+  jmp alltraps
+80106bfe:	e9 20 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106c03 <vector120>:
+.globl vector120
+vector120:
+  pushl $0
+80106c03:	6a 00                	push   $0x0
+  pushl $120
+80106c05:	6a 78                	push   $0x78
+  jmp alltraps
+80106c07:	e9 17 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106c0c <vector121>:
+.globl vector121
+vector121:
+  pushl $0
+80106c0c:	6a 00                	push   $0x0
+  pushl $121
+80106c0e:	6a 79                	push   $0x79
+  jmp alltraps
+80106c10:	e9 0e f7 ff ff       	jmp    80106323 <alltraps>
+
+80106c15 <vector122>:
+.globl vector122
+vector122:
+  pushl $0
+80106c15:	6a 00                	push   $0x0
+  pushl $122
+80106c17:	6a 7a                	push   $0x7a
+  jmp alltraps
+80106c19:	e9 05 f7 ff ff       	jmp    80106323 <alltraps>
+
+80106c1e <vector123>:
+.globl vector123
+vector123:
+  pushl $0
+80106c1e:	6a 00                	push   $0x0
+  pushl $123
+80106c20:	6a 7b                	push   $0x7b
+  jmp alltraps
+80106c22:	e9 fc f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c27 <vector124>:
+.globl vector124
+vector124:
+  pushl $0
+80106c27:	6a 00                	push   $0x0
+  pushl $124
+80106c29:	6a 7c                	push   $0x7c
+  jmp alltraps
+80106c2b:	e9 f3 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c30 <vector125>:
+.globl vector125
+vector125:
+  pushl $0
+80106c30:	6a 00                	push   $0x0
+  pushl $125
+80106c32:	6a 7d                	push   $0x7d
+  jmp alltraps
+80106c34:	e9 ea f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c39 <vector126>:
+.globl vector126
+vector126:
+  pushl $0
+80106c39:	6a 00                	push   $0x0
+  pushl $126
+80106c3b:	6a 7e                	push   $0x7e
+  jmp alltraps
+80106c3d:	e9 e1 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c42 <vector127>:
+.globl vector127
+vector127:
+  pushl $0
+80106c42:	6a 00                	push   $0x0
+  pushl $127
+80106c44:	6a 7f                	push   $0x7f
+  jmp alltraps
+80106c46:	e9 d8 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c4b <vector128>:
+.globl vector128
+vector128:
+  pushl $0
+80106c4b:	6a 00                	push   $0x0
+  pushl $128
+80106c4d:	68 80 00 00 00       	push   $0x80
+  jmp alltraps
+80106c52:	e9 cc f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c57 <vector129>:
+.globl vector129
+vector129:
+  pushl $0
+80106c57:	6a 00                	push   $0x0
+  pushl $129
+80106c59:	68 81 00 00 00       	push   $0x81
+  jmp alltraps
+80106c5e:	e9 c0 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c63 <vector130>:
+.globl vector130
+vector130:
+  pushl $0
+80106c63:	6a 00                	push   $0x0
+  pushl $130
+80106c65:	68 82 00 00 00       	push   $0x82
+  jmp alltraps
+80106c6a:	e9 b4 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c6f <vector131>:
+.globl vector131
+vector131:
+  pushl $0
+80106c6f:	6a 00                	push   $0x0
+  pushl $131
+80106c71:	68 83 00 00 00       	push   $0x83
+  jmp alltraps
+80106c76:	e9 a8 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c7b <vector132>:
+.globl vector132
+vector132:
+  pushl $0
+80106c7b:	6a 00                	push   $0x0
+  pushl $132
+80106c7d:	68 84 00 00 00       	push   $0x84
+  jmp alltraps
+80106c82:	e9 9c f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c87 <vector133>:
+.globl vector133
+vector133:
+  pushl $0
+80106c87:	6a 00                	push   $0x0
+  pushl $133
+80106c89:	68 85 00 00 00       	push   $0x85
+  jmp alltraps
+80106c8e:	e9 90 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c93 <vector134>:
+.globl vector134
+vector134:
+  pushl $0
+80106c93:	6a 00                	push   $0x0
+  pushl $134
+80106c95:	68 86 00 00 00       	push   $0x86
+  jmp alltraps
+80106c9a:	e9 84 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106c9f <vector135>:
+.globl vector135
+vector135:
+  pushl $0
+80106c9f:	6a 00                	push   $0x0
+  pushl $135
+80106ca1:	68 87 00 00 00       	push   $0x87
+  jmp alltraps
+80106ca6:	e9 78 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106cab <vector136>:
+.globl vector136
+vector136:
+  pushl $0
+80106cab:	6a 00                	push   $0x0
+  pushl $136
+80106cad:	68 88 00 00 00       	push   $0x88
+  jmp alltraps
+80106cb2:	e9 6c f6 ff ff       	jmp    80106323 <alltraps>
+
+80106cb7 <vector137>:
+.globl vector137
+vector137:
+  pushl $0
+80106cb7:	6a 00                	push   $0x0
+  pushl $137
+80106cb9:	68 89 00 00 00       	push   $0x89
+  jmp alltraps
+80106cbe:	e9 60 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106cc3 <vector138>:
+.globl vector138
+vector138:
+  pushl $0
+80106cc3:	6a 00                	push   $0x0
+  pushl $138
+80106cc5:	68 8a 00 00 00       	push   $0x8a
+  jmp alltraps
+80106cca:	e9 54 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106ccf <vector139>:
+.globl vector139
+vector139:
+  pushl $0
+80106ccf:	6a 00                	push   $0x0
+  pushl $139
+80106cd1:	68 8b 00 00 00       	push   $0x8b
+  jmp alltraps
+80106cd6:	e9 48 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106cdb <vector140>:
+.globl vector140
+vector140:
+  pushl $0
+80106cdb:	6a 00                	push   $0x0
+  pushl $140
+80106cdd:	68 8c 00 00 00       	push   $0x8c
+  jmp alltraps
+80106ce2:	e9 3c f6 ff ff       	jmp    80106323 <alltraps>
+
+80106ce7 <vector141>:
+.globl vector141
+vector141:
+  pushl $0
+80106ce7:	6a 00                	push   $0x0
+  pushl $141
+80106ce9:	68 8d 00 00 00       	push   $0x8d
+  jmp alltraps
+80106cee:	e9 30 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106cf3 <vector142>:
+.globl vector142
+vector142:
+  pushl $0
+80106cf3:	6a 00                	push   $0x0
+  pushl $142
+80106cf5:	68 8e 00 00 00       	push   $0x8e
+  jmp alltraps
+80106cfa:	e9 24 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106cff <vector143>:
+.globl vector143
+vector143:
+  pushl $0
+80106cff:	6a 00                	push   $0x0
+  pushl $143
+80106d01:	68 8f 00 00 00       	push   $0x8f
+  jmp alltraps
+80106d06:	e9 18 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106d0b <vector144>:
+.globl vector144
+vector144:
+  pushl $0
+80106d0b:	6a 00                	push   $0x0
+  pushl $144
+80106d0d:	68 90 00 00 00       	push   $0x90
+  jmp alltraps
+80106d12:	e9 0c f6 ff ff       	jmp    80106323 <alltraps>
+
+80106d17 <vector145>:
+.globl vector145
+vector145:
+  pushl $0
+80106d17:	6a 00                	push   $0x0
+  pushl $145
+80106d19:	68 91 00 00 00       	push   $0x91
+  jmp alltraps
+80106d1e:	e9 00 f6 ff ff       	jmp    80106323 <alltraps>
+
+80106d23 <vector146>:
+.globl vector146
+vector146:
+  pushl $0
+80106d23:	6a 00                	push   $0x0
+  pushl $146
+80106d25:	68 92 00 00 00       	push   $0x92
+  jmp alltraps
+80106d2a:	e9 f4 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d2f <vector147>:
+.globl vector147
+vector147:
+  pushl $0
+80106d2f:	6a 00                	push   $0x0
+  pushl $147
+80106d31:	68 93 00 00 00       	push   $0x93
+  jmp alltraps
+80106d36:	e9 e8 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d3b <vector148>:
+.globl vector148
+vector148:
+  pushl $0
+80106d3b:	6a 00                	push   $0x0
+  pushl $148
+80106d3d:	68 94 00 00 00       	push   $0x94
+  jmp alltraps
+80106d42:	e9 dc f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d47 <vector149>:
+.globl vector149
+vector149:
+  pushl $0
+80106d47:	6a 00                	push   $0x0
+  pushl $149
+80106d49:	68 95 00 00 00       	push   $0x95
+  jmp alltraps
+80106d4e:	e9 d0 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d53 <vector150>:
+.globl vector150
+vector150:
+  pushl $0
+80106d53:	6a 00                	push   $0x0
+  pushl $150
+80106d55:	68 96 00 00 00       	push   $0x96
+  jmp alltraps
+80106d5a:	e9 c4 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d5f <vector151>:
+.globl vector151
+vector151:
+  pushl $0
+80106d5f:	6a 00                	push   $0x0
+  pushl $151
+80106d61:	68 97 00 00 00       	push   $0x97
+  jmp alltraps
+80106d66:	e9 b8 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d6b <vector152>:
+.globl vector152
+vector152:
+  pushl $0
+80106d6b:	6a 00                	push   $0x0
+  pushl $152
+80106d6d:	68 98 00 00 00       	push   $0x98
+  jmp alltraps
+80106d72:	e9 ac f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d77 <vector153>:
+.globl vector153
+vector153:
+  pushl $0
+80106d77:	6a 00                	push   $0x0
+  pushl $153
+80106d79:	68 99 00 00 00       	push   $0x99
+  jmp alltraps
+80106d7e:	e9 a0 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d83 <vector154>:
+.globl vector154
+vector154:
+  pushl $0
+80106d83:	6a 00                	push   $0x0
+  pushl $154
+80106d85:	68 9a 00 00 00       	push   $0x9a
+  jmp alltraps
+80106d8a:	e9 94 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d8f <vector155>:
+.globl vector155
+vector155:
+  pushl $0
+80106d8f:	6a 00                	push   $0x0
+  pushl $155
+80106d91:	68 9b 00 00 00       	push   $0x9b
+  jmp alltraps
+80106d96:	e9 88 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106d9b <vector156>:
+.globl vector156
+vector156:
+  pushl $0
+80106d9b:	6a 00                	push   $0x0
+  pushl $156
+80106d9d:	68 9c 00 00 00       	push   $0x9c
+  jmp alltraps
+80106da2:	e9 7c f5 ff ff       	jmp    80106323 <alltraps>
+
+80106da7 <vector157>:
+.globl vector157
+vector157:
+  pushl $0
+80106da7:	6a 00                	push   $0x0
+  pushl $157
+80106da9:	68 9d 00 00 00       	push   $0x9d
+  jmp alltraps
+80106dae:	e9 70 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106db3 <vector158>:
+.globl vector158
+vector158:
+  pushl $0
+80106db3:	6a 00                	push   $0x0
+  pushl $158
+80106db5:	68 9e 00 00 00       	push   $0x9e
+  jmp alltraps
+80106dba:	e9 64 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106dbf <vector159>:
+.globl vector159
+vector159:
+  pushl $0
+80106dbf:	6a 00                	push   $0x0
+  pushl $159
+80106dc1:	68 9f 00 00 00       	push   $0x9f
+  jmp alltraps
+80106dc6:	e9 58 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106dcb <vector160>:
+.globl vector160
+vector160:
+  pushl $0
+80106dcb:	6a 00                	push   $0x0
+  pushl $160
+80106dcd:	68 a0 00 00 00       	push   $0xa0
+  jmp alltraps
+80106dd2:	e9 4c f5 ff ff       	jmp    80106323 <alltraps>
+
+80106dd7 <vector161>:
+.globl vector161
+vector161:
+  pushl $0
+80106dd7:	6a 00                	push   $0x0
+  pushl $161
+80106dd9:	68 a1 00 00 00       	push   $0xa1
+  jmp alltraps
+80106dde:	e9 40 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106de3 <vector162>:
+.globl vector162
+vector162:
+  pushl $0
+80106de3:	6a 00                	push   $0x0
+  pushl $162
+80106de5:	68 a2 00 00 00       	push   $0xa2
+  jmp alltraps
+80106dea:	e9 34 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106def <vector163>:
+.globl vector163
+vector163:
+  pushl $0
+80106def:	6a 00                	push   $0x0
+  pushl $163
+80106df1:	68 a3 00 00 00       	push   $0xa3
+  jmp alltraps
+80106df6:	e9 28 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106dfb <vector164>:
+.globl vector164
+vector164:
+  pushl $0
+80106dfb:	6a 00                	push   $0x0
+  pushl $164
+80106dfd:	68 a4 00 00 00       	push   $0xa4
+  jmp alltraps
+80106e02:	e9 1c f5 ff ff       	jmp    80106323 <alltraps>
+
+80106e07 <vector165>:
+.globl vector165
+vector165:
+  pushl $0
+80106e07:	6a 00                	push   $0x0
+  pushl $165
+80106e09:	68 a5 00 00 00       	push   $0xa5
+  jmp alltraps
+80106e0e:	e9 10 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106e13 <vector166>:
+.globl vector166
+vector166:
+  pushl $0
+80106e13:	6a 00                	push   $0x0
+  pushl $166
+80106e15:	68 a6 00 00 00       	push   $0xa6
+  jmp alltraps
+80106e1a:	e9 04 f5 ff ff       	jmp    80106323 <alltraps>
+
+80106e1f <vector167>:
+.globl vector167
+vector167:
+  pushl $0
+80106e1f:	6a 00                	push   $0x0
+  pushl $167
+80106e21:	68 a7 00 00 00       	push   $0xa7
+  jmp alltraps
+80106e26:	e9 f8 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e2b <vector168>:
+.globl vector168
+vector168:
+  pushl $0
+80106e2b:	6a 00                	push   $0x0
+  pushl $168
+80106e2d:	68 a8 00 00 00       	push   $0xa8
+  jmp alltraps
+80106e32:	e9 ec f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e37 <vector169>:
+.globl vector169
+vector169:
+  pushl $0
+80106e37:	6a 00                	push   $0x0
+  pushl $169
+80106e39:	68 a9 00 00 00       	push   $0xa9
+  jmp alltraps
+80106e3e:	e9 e0 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e43 <vector170>:
+.globl vector170
+vector170:
+  pushl $0
+80106e43:	6a 00                	push   $0x0
+  pushl $170
+80106e45:	68 aa 00 00 00       	push   $0xaa
+  jmp alltraps
+80106e4a:	e9 d4 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e4f <vector171>:
+.globl vector171
+vector171:
+  pushl $0
+80106e4f:	6a 00                	push   $0x0
+  pushl $171
+80106e51:	68 ab 00 00 00       	push   $0xab
+  jmp alltraps
+80106e56:	e9 c8 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e5b <vector172>:
+.globl vector172
+vector172:
+  pushl $0
+80106e5b:	6a 00                	push   $0x0
+  pushl $172
+80106e5d:	68 ac 00 00 00       	push   $0xac
+  jmp alltraps
+80106e62:	e9 bc f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e67 <vector173>:
+.globl vector173
+vector173:
+  pushl $0
+80106e67:	6a 00                	push   $0x0
+  pushl $173
+80106e69:	68 ad 00 00 00       	push   $0xad
+  jmp alltraps
+80106e6e:	e9 b0 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e73 <vector174>:
+.globl vector174
+vector174:
+  pushl $0
+80106e73:	6a 00                	push   $0x0
+  pushl $174
+80106e75:	68 ae 00 00 00       	push   $0xae
+  jmp alltraps
+80106e7a:	e9 a4 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e7f <vector175>:
+.globl vector175
+vector175:
+  pushl $0
+80106e7f:	6a 00                	push   $0x0
+  pushl $175
+80106e81:	68 af 00 00 00       	push   $0xaf
+  jmp alltraps
+80106e86:	e9 98 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e8b <vector176>:
+.globl vector176
+vector176:
+  pushl $0
+80106e8b:	6a 00                	push   $0x0
+  pushl $176
+80106e8d:	68 b0 00 00 00       	push   $0xb0
+  jmp alltraps
+80106e92:	e9 8c f4 ff ff       	jmp    80106323 <alltraps>
+
+80106e97 <vector177>:
+.globl vector177
+vector177:
+  pushl $0
+80106e97:	6a 00                	push   $0x0
+  pushl $177
+80106e99:	68 b1 00 00 00       	push   $0xb1
+  jmp alltraps
+80106e9e:	e9 80 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106ea3 <vector178>:
+.globl vector178
+vector178:
+  pushl $0
+80106ea3:	6a 00                	push   $0x0
+  pushl $178
+80106ea5:	68 b2 00 00 00       	push   $0xb2
+  jmp alltraps
+80106eaa:	e9 74 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106eaf <vector179>:
+.globl vector179
+vector179:
+  pushl $0
+80106eaf:	6a 00                	push   $0x0
+  pushl $179
+80106eb1:	68 b3 00 00 00       	push   $0xb3
+  jmp alltraps
+80106eb6:	e9 68 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106ebb <vector180>:
+.globl vector180
+vector180:
+  pushl $0
+80106ebb:	6a 00                	push   $0x0
+  pushl $180
+80106ebd:	68 b4 00 00 00       	push   $0xb4
+  jmp alltraps
+80106ec2:	e9 5c f4 ff ff       	jmp    80106323 <alltraps>
+
+80106ec7 <vector181>:
+.globl vector181
+vector181:
+  pushl $0
+80106ec7:	6a 00                	push   $0x0
+  pushl $181
+80106ec9:	68 b5 00 00 00       	push   $0xb5
+  jmp alltraps
+80106ece:	e9 50 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106ed3 <vector182>:
+.globl vector182
+vector182:
+  pushl $0
+80106ed3:	6a 00                	push   $0x0
+  pushl $182
+80106ed5:	68 b6 00 00 00       	push   $0xb6
+  jmp alltraps
+80106eda:	e9 44 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106edf <vector183>:
+.globl vector183
+vector183:
+  pushl $0
+80106edf:	6a 00                	push   $0x0
+  pushl $183
+80106ee1:	68 b7 00 00 00       	push   $0xb7
+  jmp alltraps
+80106ee6:	e9 38 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106eeb <vector184>:
+.globl vector184
+vector184:
+  pushl $0
+80106eeb:	6a 00                	push   $0x0
+  pushl $184
+80106eed:	68 b8 00 00 00       	push   $0xb8
+  jmp alltraps
+80106ef2:	e9 2c f4 ff ff       	jmp    80106323 <alltraps>
+
+80106ef7 <vector185>:
+.globl vector185
+vector185:
+  pushl $0
+80106ef7:	6a 00                	push   $0x0
+  pushl $185
+80106ef9:	68 b9 00 00 00       	push   $0xb9
+  jmp alltraps
+80106efe:	e9 20 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106f03 <vector186>:
+.globl vector186
+vector186:
+  pushl $0
+80106f03:	6a 00                	push   $0x0
+  pushl $186
+80106f05:	68 ba 00 00 00       	push   $0xba
+  jmp alltraps
+80106f0a:	e9 14 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106f0f <vector187>:
+.globl vector187
+vector187:
+  pushl $0
+80106f0f:	6a 00                	push   $0x0
+  pushl $187
+80106f11:	68 bb 00 00 00       	push   $0xbb
+  jmp alltraps
+80106f16:	e9 08 f4 ff ff       	jmp    80106323 <alltraps>
+
+80106f1b <vector188>:
+.globl vector188
+vector188:
+  pushl $0
+80106f1b:	6a 00                	push   $0x0
+  pushl $188
+80106f1d:	68 bc 00 00 00       	push   $0xbc
+  jmp alltraps
+80106f22:	e9 fc f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f27 <vector189>:
+.globl vector189
+vector189:
+  pushl $0
+80106f27:	6a 00                	push   $0x0
+  pushl $189
+80106f29:	68 bd 00 00 00       	push   $0xbd
+  jmp alltraps
+80106f2e:	e9 f0 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f33 <vector190>:
+.globl vector190
+vector190:
+  pushl $0
+80106f33:	6a 00                	push   $0x0
+  pushl $190
+80106f35:	68 be 00 00 00       	push   $0xbe
+  jmp alltraps
+80106f3a:	e9 e4 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f3f <vector191>:
+.globl vector191
+vector191:
+  pushl $0
+80106f3f:	6a 00                	push   $0x0
+  pushl $191
+80106f41:	68 bf 00 00 00       	push   $0xbf
+  jmp alltraps
+80106f46:	e9 d8 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f4b <vector192>:
+.globl vector192
+vector192:
+  pushl $0
+80106f4b:	6a 00                	push   $0x0
+  pushl $192
+80106f4d:	68 c0 00 00 00       	push   $0xc0
+  jmp alltraps
+80106f52:	e9 cc f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f57 <vector193>:
+.globl vector193
+vector193:
+  pushl $0
+80106f57:	6a 00                	push   $0x0
+  pushl $193
+80106f59:	68 c1 00 00 00       	push   $0xc1
+  jmp alltraps
+80106f5e:	e9 c0 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f63 <vector194>:
+.globl vector194
+vector194:
+  pushl $0
+80106f63:	6a 00                	push   $0x0
+  pushl $194
+80106f65:	68 c2 00 00 00       	push   $0xc2
+  jmp alltraps
+80106f6a:	e9 b4 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f6f <vector195>:
+.globl vector195
+vector195:
+  pushl $0
+80106f6f:	6a 00                	push   $0x0
+  pushl $195
+80106f71:	68 c3 00 00 00       	push   $0xc3
+  jmp alltraps
+80106f76:	e9 a8 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f7b <vector196>:
+.globl vector196
+vector196:
+  pushl $0
+80106f7b:	6a 00                	push   $0x0
+  pushl $196
+80106f7d:	68 c4 00 00 00       	push   $0xc4
+  jmp alltraps
+80106f82:	e9 9c f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f87 <vector197>:
+.globl vector197
+vector197:
+  pushl $0
+80106f87:	6a 00                	push   $0x0
+  pushl $197
+80106f89:	68 c5 00 00 00       	push   $0xc5
+  jmp alltraps
+80106f8e:	e9 90 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f93 <vector198>:
+.globl vector198
+vector198:
+  pushl $0
+80106f93:	6a 00                	push   $0x0
+  pushl $198
+80106f95:	68 c6 00 00 00       	push   $0xc6
+  jmp alltraps
+80106f9a:	e9 84 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106f9f <vector199>:
+.globl vector199
+vector199:
+  pushl $0
+80106f9f:	6a 00                	push   $0x0
+  pushl $199
+80106fa1:	68 c7 00 00 00       	push   $0xc7
+  jmp alltraps
+80106fa6:	e9 78 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106fab <vector200>:
+.globl vector200
+vector200:
+  pushl $0
+80106fab:	6a 00                	push   $0x0
+  pushl $200
+80106fad:	68 c8 00 00 00       	push   $0xc8
+  jmp alltraps
+80106fb2:	e9 6c f3 ff ff       	jmp    80106323 <alltraps>
+
+80106fb7 <vector201>:
+.globl vector201
+vector201:
+  pushl $0
+80106fb7:	6a 00                	push   $0x0
+  pushl $201
+80106fb9:	68 c9 00 00 00       	push   $0xc9
+  jmp alltraps
+80106fbe:	e9 60 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106fc3 <vector202>:
+.globl vector202
+vector202:
+  pushl $0
+80106fc3:	6a 00                	push   $0x0
+  pushl $202
+80106fc5:	68 ca 00 00 00       	push   $0xca
+  jmp alltraps
+80106fca:	e9 54 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106fcf <vector203>:
+.globl vector203
+vector203:
+  pushl $0
+80106fcf:	6a 00                	push   $0x0
+  pushl $203
+80106fd1:	68 cb 00 00 00       	push   $0xcb
+  jmp alltraps
+80106fd6:	e9 48 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106fdb <vector204>:
+.globl vector204
+vector204:
+  pushl $0
+80106fdb:	6a 00                	push   $0x0
+  pushl $204
+80106fdd:	68 cc 00 00 00       	push   $0xcc
+  jmp alltraps
+80106fe2:	e9 3c f3 ff ff       	jmp    80106323 <alltraps>
+
+80106fe7 <vector205>:
+.globl vector205
+vector205:
+  pushl $0
+80106fe7:	6a 00                	push   $0x0
+  pushl $205
+80106fe9:	68 cd 00 00 00       	push   $0xcd
+  jmp alltraps
+80106fee:	e9 30 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106ff3 <vector206>:
+.globl vector206
+vector206:
+  pushl $0
+80106ff3:	6a 00                	push   $0x0
+  pushl $206
+80106ff5:	68 ce 00 00 00       	push   $0xce
+  jmp alltraps
+80106ffa:	e9 24 f3 ff ff       	jmp    80106323 <alltraps>
+
+80106fff <vector207>:
+.globl vector207
+vector207:
+  pushl $0
+80106fff:	6a 00                	push   $0x0
+  pushl $207
+80107001:	68 cf 00 00 00       	push   $0xcf
+  jmp alltraps
+80107006:	e9 18 f3 ff ff       	jmp    80106323 <alltraps>
+
+8010700b <vector208>:
+.globl vector208
+vector208:
+  pushl $0
+8010700b:	6a 00                	push   $0x0
+  pushl $208
+8010700d:	68 d0 00 00 00       	push   $0xd0
+  jmp alltraps
+80107012:	e9 0c f3 ff ff       	jmp    80106323 <alltraps>
+
+80107017 <vector209>:
+.globl vector209
+vector209:
+  pushl $0
+80107017:	6a 00                	push   $0x0
+  pushl $209
+80107019:	68 d1 00 00 00       	push   $0xd1
+  jmp alltraps
+8010701e:	e9 00 f3 ff ff       	jmp    80106323 <alltraps>
+
+80107023 <vector210>:
+.globl vector210
+vector210:
+  pushl $0
+80107023:	6a 00                	push   $0x0
+  pushl $210
+80107025:	68 d2 00 00 00       	push   $0xd2
+  jmp alltraps
+8010702a:	e9 f4 f2 ff ff       	jmp    80106323 <alltraps>
+
+8010702f <vector211>:
+.globl vector211
+vector211:
+  pushl $0
+8010702f:	6a 00                	push   $0x0
+  pushl $211
+80107031:	68 d3 00 00 00       	push   $0xd3
+  jmp alltraps
+80107036:	e9 e8 f2 ff ff       	jmp    80106323 <alltraps>
+
+8010703b <vector212>:
+.globl vector212
+vector212:
+  pushl $0
+8010703b:	6a 00                	push   $0x0
+  pushl $212
+8010703d:	68 d4 00 00 00       	push   $0xd4
+  jmp alltraps
+80107042:	e9 dc f2 ff ff       	jmp    80106323 <alltraps>
+
+80107047 <vector213>:
+.globl vector213
+vector213:
+  pushl $0
+80107047:	6a 00                	push   $0x0
+  pushl $213
+80107049:	68 d5 00 00 00       	push   $0xd5
+  jmp alltraps
+8010704e:	e9 d0 f2 ff ff       	jmp    80106323 <alltraps>
+
+80107053 <vector214>:
+.globl vector214
+vector214:
+  pushl $0
+80107053:	6a 00                	push   $0x0
+  pushl $214
+80107055:	68 d6 00 00 00       	push   $0xd6
+  jmp alltraps
+8010705a:	e9 c4 f2 ff ff       	jmp    80106323 <alltraps>
+
+8010705f <vector215>:
+.globl vector215
+vector215:
+  pushl $0
+8010705f:	6a 00                	push   $0x0
+  pushl $215
+80107061:	68 d7 00 00 00       	push   $0xd7
+  jmp alltraps
+80107066:	e9 b8 f2 ff ff       	jmp    80106323 <alltraps>
+
+8010706b <vector216>:
+.globl vector216
+vector216:
+  pushl $0
+8010706b:	6a 00                	push   $0x0
+  pushl $216
+8010706d:	68 d8 00 00 00       	push   $0xd8
+  jmp alltraps
+80107072:	e9 ac f2 ff ff       	jmp    80106323 <alltraps>
+
+80107077 <vector217>:
+.globl vector217
+vector217:
+  pushl $0
+80107077:	6a 00                	push   $0x0
+  pushl $217
+80107079:	68 d9 00 00 00       	push   $0xd9
+  jmp alltraps
+8010707e:	e9 a0 f2 ff ff       	jmp    80106323 <alltraps>
+
+80107083 <vector218>:
+.globl vector218
+vector218:
+  pushl $0
+80107083:	6a 00                	push   $0x0
+  pushl $218
+80107085:	68 da 00 00 00       	push   $0xda
+  jmp alltraps
+8010708a:	e9 94 f2 ff ff       	jmp    80106323 <alltraps>
+
+8010708f <vector219>:
+.globl vector219
+vector219:
+  pushl $0
+8010708f:	6a 00                	push   $0x0
+  pushl $219
+80107091:	68 db 00 00 00       	push   $0xdb
+  jmp alltraps
+80107096:	e9 88 f2 ff ff       	jmp    80106323 <alltraps>
+
+8010709b <vector220>:
+.globl vector220
+vector220:
+  pushl $0
+8010709b:	6a 00                	push   $0x0
+  pushl $220
+8010709d:	68 dc 00 00 00       	push   $0xdc
+  jmp alltraps
+801070a2:	e9 7c f2 ff ff       	jmp    80106323 <alltraps>
+
+801070a7 <vector221>:
+.globl vector221
+vector221:
+  pushl $0
+801070a7:	6a 00                	push   $0x0
+  pushl $221
+801070a9:	68 dd 00 00 00       	push   $0xdd
+  jmp alltraps
+801070ae:	e9 70 f2 ff ff       	jmp    80106323 <alltraps>
+
+801070b3 <vector222>:
+.globl vector222
+vector222:
+  pushl $0
+801070b3:	6a 00                	push   $0x0
+  pushl $222
+801070b5:	68 de 00 00 00       	push   $0xde
+  jmp alltraps
+801070ba:	e9 64 f2 ff ff       	jmp    80106323 <alltraps>
+
+801070bf <vector223>:
+.globl vector223
+vector223:
+  pushl $0
+801070bf:	6a 00                	push   $0x0
+  pushl $223
+801070c1:	68 df 00 00 00       	push   $0xdf
+  jmp alltraps
+801070c6:	e9 58 f2 ff ff       	jmp    80106323 <alltraps>
+
+801070cb <vector224>:
+.globl vector224
+vector224:
+  pushl $0
+801070cb:	6a 00                	push   $0x0
+  pushl $224
+801070cd:	68 e0 00 00 00       	push   $0xe0
+  jmp alltraps
+801070d2:	e9 4c f2 ff ff       	jmp    80106323 <alltraps>
+
+801070d7 <vector225>:
+.globl vector225
+vector225:
+  pushl $0
+801070d7:	6a 00                	push   $0x0
+  pushl $225
+801070d9:	68 e1 00 00 00       	push   $0xe1
+  jmp alltraps
+801070de:	e9 40 f2 ff ff       	jmp    80106323 <alltraps>
+
+801070e3 <vector226>:
+.globl vector226
+vector226:
+  pushl $0
+801070e3:	6a 00                	push   $0x0
+  pushl $226
+801070e5:	68 e2 00 00 00       	push   $0xe2
+  jmp alltraps
+801070ea:	e9 34 f2 ff ff       	jmp    80106323 <alltraps>
+
+801070ef <vector227>:
+.globl vector227
+vector227:
+  pushl $0
+801070ef:	6a 00                	push   $0x0
+  pushl $227
+801070f1:	68 e3 00 00 00       	push   $0xe3
+  jmp alltraps
+801070f6:	e9 28 f2 ff ff       	jmp    80106323 <alltraps>
+
+801070fb <vector228>:
+.globl vector228
+vector228:
+  pushl $0
+801070fb:	6a 00                	push   $0x0
+  pushl $228
+801070fd:	68 e4 00 00 00       	push   $0xe4
+  jmp alltraps
+80107102:	e9 1c f2 ff ff       	jmp    80106323 <alltraps>
+
+80107107 <vector229>:
+.globl vector229
+vector229:
+  pushl $0
+80107107:	6a 00                	push   $0x0
+  pushl $229
+80107109:	68 e5 00 00 00       	push   $0xe5
+  jmp alltraps
+8010710e:	e9 10 f2 ff ff       	jmp    80106323 <alltraps>
+
+80107113 <vector230>:
+.globl vector230
+vector230:
+  pushl $0
+80107113:	6a 00                	push   $0x0
+  pushl $230
+80107115:	68 e6 00 00 00       	push   $0xe6
+  jmp alltraps
+8010711a:	e9 04 f2 ff ff       	jmp    80106323 <alltraps>
+
+8010711f <vector231>:
+.globl vector231
+vector231:
+  pushl $0
+8010711f:	6a 00                	push   $0x0
+  pushl $231
+80107121:	68 e7 00 00 00       	push   $0xe7
+  jmp alltraps
+80107126:	e9 f8 f1 ff ff       	jmp    80106323 <alltraps>
+
+8010712b <vector232>:
+.globl vector232
+vector232:
+  pushl $0
+8010712b:	6a 00                	push   $0x0
+  pushl $232
+8010712d:	68 e8 00 00 00       	push   $0xe8
+  jmp alltraps
+80107132:	e9 ec f1 ff ff       	jmp    80106323 <alltraps>
+
+80107137 <vector233>:
+.globl vector233
+vector233:
+  pushl $0
+80107137:	6a 00                	push   $0x0
+  pushl $233
+80107139:	68 e9 00 00 00       	push   $0xe9
+  jmp alltraps
+8010713e:	e9 e0 f1 ff ff       	jmp    80106323 <alltraps>
+
+80107143 <vector234>:
+.globl vector234
+vector234:
+  pushl $0
+80107143:	6a 00                	push   $0x0
+  pushl $234
+80107145:	68 ea 00 00 00       	push   $0xea
+  jmp alltraps
+8010714a:	e9 d4 f1 ff ff       	jmp    80106323 <alltraps>
+
+8010714f <vector235>:
+.globl vector235
+vector235:
+  pushl $0
+8010714f:	6a 00                	push   $0x0
+  pushl $235
+80107151:	68 eb 00 00 00       	push   $0xeb
+  jmp alltraps
+80107156:	e9 c8 f1 ff ff       	jmp    80106323 <alltraps>
+
+8010715b <vector236>:
+.globl vector236
+vector236:
+  pushl $0
+8010715b:	6a 00                	push   $0x0
+  pushl $236
+8010715d:	68 ec 00 00 00       	push   $0xec
+  jmp alltraps
+80107162:	e9 bc f1 ff ff       	jmp    80106323 <alltraps>
+
+80107167 <vector237>:
+.globl vector237
+vector237:
+  pushl $0
+80107167:	6a 00                	push   $0x0
+  pushl $237
+80107169:	68 ed 00 00 00       	push   $0xed
+  jmp alltraps
+8010716e:	e9 b0 f1 ff ff       	jmp    80106323 <alltraps>
+
+80107173 <vector238>:
+.globl vector238
+vector238:
+  pushl $0
+80107173:	6a 00                	push   $0x0
+  pushl $238
+80107175:	68 ee 00 00 00       	push   $0xee
+  jmp alltraps
+8010717a:	e9 a4 f1 ff ff       	jmp    80106323 <alltraps>
+
+8010717f <vector239>:
+.globl vector239
+vector239:
+  pushl $0
+8010717f:	6a 00                	push   $0x0
+  pushl $239
+80107181:	68 ef 00 00 00       	push   $0xef
+  jmp alltraps
+80107186:	e9 98 f1 ff ff       	jmp    80106323 <alltraps>
+
+8010718b <vector240>:
+.globl vector240
+vector240:
+  pushl $0
+8010718b:	6a 00                	push   $0x0
+  pushl $240
+8010718d:	68 f0 00 00 00       	push   $0xf0
+  jmp alltraps
+80107192:	e9 8c f1 ff ff       	jmp    80106323 <alltraps>
+
+80107197 <vector241>:
+.globl vector241
+vector241:
+  pushl $0
+80107197:	6a 00                	push   $0x0
+  pushl $241
+80107199:	68 f1 00 00 00       	push   $0xf1
+  jmp alltraps
+8010719e:	e9 80 f1 ff ff       	jmp    80106323 <alltraps>
+
+801071a3 <vector242>:
+.globl vector242
+vector242:
+  pushl $0
+801071a3:	6a 00                	push   $0x0
+  pushl $242
+801071a5:	68 f2 00 00 00       	push   $0xf2
+  jmp alltraps
+801071aa:	e9 74 f1 ff ff       	jmp    80106323 <alltraps>
+
+801071af <vector243>:
+.globl vector243
+vector243:
+  pushl $0
+801071af:	6a 00                	push   $0x0
+  pushl $243
+801071b1:	68 f3 00 00 00       	push   $0xf3
+  jmp alltraps
+801071b6:	e9 68 f1 ff ff       	jmp    80106323 <alltraps>
+
+801071bb <vector244>:
+.globl vector244
+vector244:
+  pushl $0
+801071bb:	6a 00                	push   $0x0
+  pushl $244
+801071bd:	68 f4 00 00 00       	push   $0xf4
+  jmp alltraps
+801071c2:	e9 5c f1 ff ff       	jmp    80106323 <alltraps>
+
+801071c7 <vector245>:
+.globl vector245
+vector245:
+  pushl $0
+801071c7:	6a 00                	push   $0x0
+  pushl $245
+801071c9:	68 f5 00 00 00       	push   $0xf5
+  jmp alltraps
+801071ce:	e9 50 f1 ff ff       	jmp    80106323 <alltraps>
+
+801071d3 <vector246>:
+.globl vector246
+vector246:
+  pushl $0
+801071d3:	6a 00                	push   $0x0
+  pushl $246
+801071d5:	68 f6 00 00 00       	push   $0xf6
+  jmp alltraps
+801071da:	e9 44 f1 ff ff       	jmp    80106323 <alltraps>
+
+801071df <vector247>:
+.globl vector247
+vector247:
+  pushl $0
+801071df:	6a 00                	push   $0x0
+  pushl $247
+801071e1:	68 f7 00 00 00       	push   $0xf7
+  jmp alltraps
+801071e6:	e9 38 f1 ff ff       	jmp    80106323 <alltraps>
+
+801071eb <vector248>:
+.globl vector248
+vector248:
+  pushl $0
+801071eb:	6a 00                	push   $0x0
+  pushl $248
+801071ed:	68 f8 00 00 00       	push   $0xf8
+  jmp alltraps
+801071f2:	e9 2c f1 ff ff       	jmp    80106323 <alltraps>
+
+801071f7 <vector249>:
+.globl vector249
+vector249:
+  pushl $0
+801071f7:	6a 00                	push   $0x0
+  pushl $249
+801071f9:	68 f9 00 00 00       	push   $0xf9
+  jmp alltraps
+801071fe:	e9 20 f1 ff ff       	jmp    80106323 <alltraps>
+
+80107203 <vector250>:
+.globl vector250
+vector250:
+  pushl $0
+80107203:	6a 00                	push   $0x0
+  pushl $250
+80107205:	68 fa 00 00 00       	push   $0xfa
+  jmp alltraps
+8010720a:	e9 14 f1 ff ff       	jmp    80106323 <alltraps>
+
+8010720f <vector251>:
+.globl vector251
+vector251:
+  pushl $0
+8010720f:	6a 00                	push   $0x0
+  pushl $251
+80107211:	68 fb 00 00 00       	push   $0xfb
+  jmp alltraps
+80107216:	e9 08 f1 ff ff       	jmp    80106323 <alltraps>
+
+8010721b <vector252>:
+.globl vector252
+vector252:
+  pushl $0
+8010721b:	6a 00                	push   $0x0
+  pushl $252
+8010721d:	68 fc 00 00 00       	push   $0xfc
+  jmp alltraps
+80107222:	e9 fc f0 ff ff       	jmp    80106323 <alltraps>
+
+80107227 <vector253>:
+.globl vector253
+vector253:
+  pushl $0
+80107227:	6a 00                	push   $0x0
+  pushl $253
+80107229:	68 fd 00 00 00       	push   $0xfd
+  jmp alltraps
+8010722e:	e9 f0 f0 ff ff       	jmp    80106323 <alltraps>
+
+80107233 <vector254>:
+.globl vector254
+vector254:
+  pushl $0
+80107233:	6a 00                	push   $0x0
+  pushl $254
+80107235:	68 fe 00 00 00       	push   $0xfe
+  jmp alltraps
+8010723a:	e9 e4 f0 ff ff       	jmp    80106323 <alltraps>
+
+8010723f <vector255>:
+.globl vector255
+vector255:
+  pushl $0
+8010723f:	6a 00                	push   $0x0
+  pushl $255
+80107241:	68 ff 00 00 00       	push   $0xff
+  jmp alltraps
+80107246:	e9 d8 f0 ff ff       	jmp    80106323 <alltraps>
+8010724b:	66 90                	xchg   %ax,%ax
+8010724d:	66 90                	xchg   %ax,%ax
+8010724f:	90                   	nop
+
+80107250 <walkpgdir>:
+// Return the address of the PTE in page table pgdir
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page table pages.
+static pte_t *
+walkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+80107250:	55                   	push   %ebp
+80107251:	89 e5                	mov    %esp,%ebp
+80107253:	57                   	push   %edi
+80107254:	56                   	push   %esi
+80107255:	89 d6                	mov    %edx,%esi
+  pde_t *pde;
+  pte_t *pgtab;
+
+  pde = &pgdir[PDX(va)];
+80107257:	c1 ea 16             	shr    $0x16,%edx
+{
+8010725a:	53                   	push   %ebx
+  pde = &pgdir[PDX(va)];
+8010725b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+{
+8010725e:	83 ec 0c             	sub    $0xc,%esp
+  if(*pde & PTE_P){
+80107261:	8b 1f                	mov    (%edi),%ebx
+80107263:	f6 c3 01             	test   $0x1,%bl
+80107266:	74 28                	je     80107290 <walkpgdir+0x40>
+    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
+80107268:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010726e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+    // The permissions here are overly generous, but they can
+    // be further restricted by the permissions in the page table
+    // entries, if necessary.
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+  }
+  return &pgtab[PTX(va)];
+80107274:	89 f0                	mov    %esi,%eax
+}
+80107276:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return &pgtab[PTX(va)];
+80107279:	c1 e8 0a             	shr    $0xa,%eax
+8010727c:	25 fc 0f 00 00       	and    $0xffc,%eax
+80107281:	01 d8                	add    %ebx,%eax
+}
+80107283:	5b                   	pop    %ebx
+80107284:	5e                   	pop    %esi
+80107285:	5f                   	pop    %edi
+80107286:	5d                   	pop    %ebp
+80107287:	c3                   	ret    
+80107288:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010728f:	90                   	nop
+    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
+80107290:	85 c9                	test   %ecx,%ecx
+80107292:	74 2c                	je     801072c0 <walkpgdir+0x70>
+80107294:	e8 87 bd ff ff       	call   80103020 <kalloc>
+80107299:	89 c3                	mov    %eax,%ebx
+8010729b:	85 c0                	test   %eax,%eax
+8010729d:	74 21                	je     801072c0 <walkpgdir+0x70>
+    memset(pgtab, 0, PGSIZE);
+8010729f:	83 ec 04             	sub    $0x4,%esp
+801072a2:	68 00 10 00 00       	push   $0x1000
+801072a7:	6a 00                	push   $0x0
+801072a9:	50                   	push   %eax
+801072aa:	e8 b1 dd ff ff       	call   80105060 <memset>
+    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+801072af:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+801072b5:	83 c4 10             	add    $0x10,%esp
+801072b8:	83 c8 07             	or     $0x7,%eax
+801072bb:	89 07                	mov    %eax,(%edi)
+801072bd:	eb b5                	jmp    80107274 <walkpgdir+0x24>
+801072bf:	90                   	nop
+}
+801072c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 0;
+801072c3:	31 c0                	xor    %eax,%eax
+}
+801072c5:	5b                   	pop    %ebx
+801072c6:	5e                   	pop    %esi
+801072c7:	5f                   	pop    %edi
+801072c8:	5d                   	pop    %ebp
+801072c9:	c3                   	ret    
+801072ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801072d0 <mappages>:
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa. va and size might not
+// be page-aligned.
+static int
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
+{
+801072d0:	55                   	push   %ebp
+801072d1:	89 e5                	mov    %esp,%ebp
+801072d3:	57                   	push   %edi
+801072d4:	89 c7                	mov    %eax,%edi
+  char *a, *last;
+  pte_t *pte;
+
+  a = (char*)PGROUNDDOWN((uint)va);
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+801072d6:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+{
+801072da:	56                   	push   %esi
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+801072db:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  a = (char*)PGROUNDDOWN((uint)va);
+801072e0:	89 d6                	mov    %edx,%esi
+{
+801072e2:	53                   	push   %ebx
+  a = (char*)PGROUNDDOWN((uint)va);
+801072e3:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+{
+801072e9:	83 ec 1c             	sub    $0x1c,%esp
+  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
+801072ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801072ef:	8b 45 08             	mov    0x8(%ebp),%eax
+801072f2:	29 f0                	sub    %esi,%eax
+801072f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801072f7:	eb 1f                	jmp    80107318 <mappages+0x48>
+801072f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  for(;;){
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_P)
+80107300:	f6 00 01             	testb  $0x1,(%eax)
+80107303:	75 45                	jne    8010734a <mappages+0x7a>
+      panic("remap");
+    *pte = pa | perm | PTE_P;
+80107305:	0b 5d 0c             	or     0xc(%ebp),%ebx
+80107308:	83 cb 01             	or     $0x1,%ebx
+8010730b:	89 18                	mov    %ebx,(%eax)
+    if(a == last)
+8010730d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80107310:	74 2e                	je     80107340 <mappages+0x70>
+      break;
+    a += PGSIZE;
+80107312:	81 c6 00 10 00 00    	add    $0x1000,%esi
+  for(;;){
+80107318:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    if((pte = walkpgdir(pgdir, a, 1)) == 0)
+8010731b:	b9 01 00 00 00       	mov    $0x1,%ecx
+80107320:	89 f2                	mov    %esi,%edx
+80107322:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80107325:	89 f8                	mov    %edi,%eax
+80107327:	e8 24 ff ff ff       	call   80107250 <walkpgdir>
+8010732c:	85 c0                	test   %eax,%eax
+8010732e:	75 d0                	jne    80107300 <mappages+0x30>
+    pa += PGSIZE;
+  }
+  return 0;
+}
+80107330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80107333:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80107338:	5b                   	pop    %ebx
+80107339:	5e                   	pop    %esi
+8010733a:	5f                   	pop    %edi
+8010733b:	5d                   	pop    %ebp
+8010733c:	c3                   	ret    
+8010733d:	8d 76 00             	lea    0x0(%esi),%esi
+80107340:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80107343:	31 c0                	xor    %eax,%eax
+}
+80107345:	5b                   	pop    %ebx
+80107346:	5e                   	pop    %esi
+80107347:	5f                   	pop    %edi
+80107348:	5d                   	pop    %ebp
+80107349:	c3                   	ret    
+      panic("remap");
+8010734a:	83 ec 0c             	sub    $0xc,%esp
+8010734d:	68 bc 8a 10 80       	push   $0x80108abc
+80107352:	e8 39 90 ff ff       	call   80100390 <panic>
+80107357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010735e:	66 90                	xchg   %ax,%ax
+
+80107360 <deallocuvm.part.0>:
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+int
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80107360:	55                   	push   %ebp
+80107361:	89 e5                	mov    %esp,%ebp
+80107363:	57                   	push   %edi
+80107364:	56                   	push   %esi
+80107365:	89 c6                	mov    %eax,%esi
+80107367:	53                   	push   %ebx
+80107368:	89 d3                	mov    %edx,%ebx
+  uint a, pa;
+
+  if(newsz >= oldsz)
+    return oldsz;
+
+  a = PGROUNDUP(newsz);
+8010736a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+80107370:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
+80107376:	83 ec 1c             	sub    $0x1c,%esp
+80107379:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+  for(; a  < oldsz; a += PGSIZE){
+8010737c:	39 da                	cmp    %ebx,%edx
+8010737e:	73 5b                	jae    801073db <deallocuvm.part.0+0x7b>
+80107380:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+80107383:	89 d7                	mov    %edx,%edi
+80107385:	eb 14                	jmp    8010739b <deallocuvm.part.0+0x3b>
+80107387:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010738e:	66 90                	xchg   %ax,%ax
+80107390:	81 c7 00 10 00 00    	add    $0x1000,%edi
+80107396:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80107399:	76 40                	jbe    801073db <deallocuvm.part.0+0x7b>
+    pte = walkpgdir(pgdir, (char*)a, 0);
+8010739b:	31 c9                	xor    %ecx,%ecx
+8010739d:	89 fa                	mov    %edi,%edx
+8010739f:	89 f0                	mov    %esi,%eax
+801073a1:	e8 aa fe ff ff       	call   80107250 <walkpgdir>
+801073a6:	89 c3                	mov    %eax,%ebx
+    if(!pte)
+801073a8:	85 c0                	test   %eax,%eax
+801073aa:	74 44                	je     801073f0 <deallocuvm.part.0+0x90>
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+    else if((*pte & PTE_P) != 0){
+801073ac:	8b 00                	mov    (%eax),%eax
+801073ae:	a8 01                	test   $0x1,%al
+801073b0:	74 de                	je     80107390 <deallocuvm.part.0+0x30>
+      pa = PTE_ADDR(*pte);
+      if(pa == 0)
+801073b2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801073b7:	74 47                	je     80107400 <deallocuvm.part.0+0xa0>
+        panic("kfree");
+      char *v = P2V(pa);
+      kfree(v);
+801073b9:	83 ec 0c             	sub    $0xc,%esp
+      char *v = P2V(pa);
+801073bc:	05 00 00 00 80       	add    $0x80000000,%eax
+801073c1:	81 c7 00 10 00 00    	add    $0x1000,%edi
+      kfree(v);
+801073c7:	50                   	push   %eax
+801073c8:	e8 93 ba ff ff       	call   80102e60 <kfree>
+      *pte = 0;
+801073cd:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801073d3:	83 c4 10             	add    $0x10,%esp
+  for(; a  < oldsz; a += PGSIZE){
+801073d6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801073d9:	77 c0                	ja     8010739b <deallocuvm.part.0+0x3b>
+    }
+  }
+  return newsz;
+}
+801073db:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801073de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801073e1:	5b                   	pop    %ebx
+801073e2:	5e                   	pop    %esi
+801073e3:	5f                   	pop    %edi
+801073e4:	5d                   	pop    %ebp
+801073e5:	c3                   	ret    
+801073e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801073ed:	8d 76 00             	lea    0x0(%esi),%esi
+      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+801073f0:	89 fa                	mov    %edi,%edx
+801073f2:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+801073f8:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+801073fe:	eb 96                	jmp    80107396 <deallocuvm.part.0+0x36>
+        panic("kfree");
+80107400:	83 ec 0c             	sub    $0xc,%esp
+80107403:	68 3e 7e 10 80       	push   $0x80107e3e
+80107408:	e8 83 8f ff ff       	call   80100390 <panic>
+8010740d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107410 <seginit>:
+{
+80107410:	f3 0f 1e fb          	endbr32 
+80107414:	55                   	push   %ebp
+80107415:	89 e5                	mov    %esp,%ebp
+80107417:	83 ec 18             	sub    $0x18,%esp
+  c = &cpus[cpuid()];
+8010741a:	e8 11 cf ff ff       	call   80104330 <cpuid>
+  pd[0] = size-1;
+8010741f:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80107424:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+8010742a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
+8010742e:	c7 80 f8 41 11 80 ff 	movl   $0xffff,-0x7feebe08(%eax)
+80107435:	ff 00 00 
+80107438:	c7 80 fc 41 11 80 00 	movl   $0xcf9a00,-0x7feebe04(%eax)
+8010743f:	9a cf 00 
+  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+80107442:	c7 80 00 42 11 80 ff 	movl   $0xffff,-0x7feebe00(%eax)
+80107449:	ff 00 00 
+8010744c:	c7 80 04 42 11 80 00 	movl   $0xcf9200,-0x7feebdfc(%eax)
+80107453:	92 cf 00 
+  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
+80107456:	c7 80 08 42 11 80 ff 	movl   $0xffff,-0x7feebdf8(%eax)
+8010745d:	ff 00 00 
+80107460:	c7 80 0c 42 11 80 00 	movl   $0xcffa00,-0x7feebdf4(%eax)
+80107467:	fa cf 00 
+  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+8010746a:	c7 80 10 42 11 80 ff 	movl   $0xffff,-0x7feebdf0(%eax)
+80107471:	ff 00 00 
+80107474:	c7 80 14 42 11 80 00 	movl   $0xcff200,-0x7feebdec(%eax)
+8010747b:	f2 cf 00 
+  lgdt(c->gdt, sizeof(c->gdt));
+8010747e:	05 f0 41 11 80       	add    $0x801141f0,%eax
+  pd[1] = (uint)p;
+80107483:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+  pd[2] = (uint)p >> 16;
+80107487:	c1 e8 10             	shr    $0x10,%eax
+8010748a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+  asm volatile("lgdt (%0)" : : "r" (pd));
+8010748e:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80107491:	0f 01 10             	lgdtl  (%eax)
+}
+80107494:	c9                   	leave  
+80107495:	c3                   	ret    
+80107496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010749d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801074a0 <switchkvm>:
+{
+801074a0:	f3 0f 1e fb          	endbr32 
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+801074a4:	a1 a4 6e 11 80       	mov    0x80116ea4,%eax
+801074a9:	05 00 00 00 80       	add    $0x80000000,%eax
+}
+
+static inline void
+lcr3(uint val)
+{
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+801074ae:	0f 22 d8             	mov    %eax,%cr3
+}
+801074b1:	c3                   	ret    
+801074b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801074b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+801074c0 <switchuvm>:
+{
+801074c0:	f3 0f 1e fb          	endbr32 
+801074c4:	55                   	push   %ebp
+801074c5:	89 e5                	mov    %esp,%ebp
+801074c7:	57                   	push   %edi
+801074c8:	56                   	push   %esi
+801074c9:	53                   	push   %ebx
+801074ca:	83 ec 1c             	sub    $0x1c,%esp
+801074cd:	8b 75 08             	mov    0x8(%ebp),%esi
+  if(p == 0)
+801074d0:	85 f6                	test   %esi,%esi
+801074d2:	0f 84 cb 00 00 00    	je     801075a3 <switchuvm+0xe3>
+  if(p->kstack == 0)
+801074d8:	8b 46 08             	mov    0x8(%esi),%eax
+801074db:	85 c0                	test   %eax,%eax
+801074dd:	0f 84 da 00 00 00    	je     801075bd <switchuvm+0xfd>
+  if(p->pgdir == 0)
+801074e3:	8b 46 04             	mov    0x4(%esi),%eax
+801074e6:	85 c0                	test   %eax,%eax
+801074e8:	0f 84 c2 00 00 00    	je     801075b0 <switchuvm+0xf0>
+  pushcli();
+801074ee:	e8 5d d9 ff ff       	call   80104e50 <pushcli>
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+801074f3:	e8 c8 cd ff ff       	call   801042c0 <mycpu>
+801074f8:	89 c3                	mov    %eax,%ebx
+801074fa:	e8 c1 cd ff ff       	call   801042c0 <mycpu>
+801074ff:	89 c7                	mov    %eax,%edi
+80107501:	e8 ba cd ff ff       	call   801042c0 <mycpu>
+80107506:	83 c7 08             	add    $0x8,%edi
+80107509:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010750c:	e8 af cd ff ff       	call   801042c0 <mycpu>
+80107511:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80107514:	ba 67 00 00 00       	mov    $0x67,%edx
+80107519:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80107520:	83 c0 08             	add    $0x8,%eax
+80107523:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+8010752a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+8010752f:	83 c1 08             	add    $0x8,%ecx
+80107532:	c1 e8 18             	shr    $0x18,%eax
+80107535:	c1 e9 10             	shr    $0x10,%ecx
+80107538:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+8010753e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80107544:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80107549:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80107550:	bb 10 00 00 00       	mov    $0x10,%ebx
+  mycpu()->gdt[SEG_TSS].s = 0;
+80107555:	e8 66 cd ff ff       	call   801042c0 <mycpu>
+8010755a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+  mycpu()->ts.ss0 = SEG_KDATA << 3;
+80107561:	e8 5a cd ff ff       	call   801042c0 <mycpu>
+80107566:	66 89 58 10          	mov    %bx,0x10(%eax)
+  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
+8010756a:	8b 5e 08             	mov    0x8(%esi),%ebx
+8010756d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107573:	e8 48 cd ff ff       	call   801042c0 <mycpu>
+80107578:	89 58 0c             	mov    %ebx,0xc(%eax)
+  mycpu()->ts.iomb = (ushort) 0xFFFF;
+8010757b:	e8 40 cd ff ff       	call   801042c0 <mycpu>
+80107580:	66 89 78 6e          	mov    %di,0x6e(%eax)
+  asm volatile("ltr %0" : : "r" (sel));
+80107584:	b8 28 00 00 00       	mov    $0x28,%eax
+80107589:	0f 00 d8             	ltr    %ax
+  lcr3(V2P(p->pgdir));  // switch to process's address space
+8010758c:	8b 46 04             	mov    0x4(%esi),%eax
+8010758f:	05 00 00 00 80       	add    $0x80000000,%eax
+  asm volatile("movl %0,%%cr3" : : "r" (val));
+80107594:	0f 22 d8             	mov    %eax,%cr3
+}
+80107597:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010759a:	5b                   	pop    %ebx
+8010759b:	5e                   	pop    %esi
+8010759c:	5f                   	pop    %edi
+8010759d:	5d                   	pop    %ebp
+  popcli();
+8010759e:	e9 fd d8 ff ff       	jmp    80104ea0 <popcli>
+    panic("switchuvm: no process");
+801075a3:	83 ec 0c             	sub    $0xc,%esp
+801075a6:	68 c2 8a 10 80       	push   $0x80108ac2
+801075ab:	e8 e0 8d ff ff       	call   80100390 <panic>
+    panic("switchuvm: no pgdir");
+801075b0:	83 ec 0c             	sub    $0xc,%esp
+801075b3:	68 ed 8a 10 80       	push   $0x80108aed
+801075b8:	e8 d3 8d ff ff       	call   80100390 <panic>
+    panic("switchuvm: no kstack");
+801075bd:	83 ec 0c             	sub    $0xc,%esp
+801075c0:	68 d8 8a 10 80       	push   $0x80108ad8
+801075c5:	e8 c6 8d ff ff       	call   80100390 <panic>
+801075ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801075d0 <inituvm>:
+{
+801075d0:	f3 0f 1e fb          	endbr32 
+801075d4:	55                   	push   %ebp
+801075d5:	89 e5                	mov    %esp,%ebp
+801075d7:	57                   	push   %edi
+801075d8:	56                   	push   %esi
+801075d9:	53                   	push   %ebx
+801075da:	83 ec 1c             	sub    $0x1c,%esp
+801075dd:	8b 45 0c             	mov    0xc(%ebp),%eax
+801075e0:	8b 75 10             	mov    0x10(%ebp),%esi
+801075e3:	8b 7d 08             	mov    0x8(%ebp),%edi
+801075e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(sz >= PGSIZE)
+801075e9:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+801075ef:	77 4b                	ja     8010763c <inituvm+0x6c>
+  mem = kalloc();
+801075f1:	e8 2a ba ff ff       	call   80103020 <kalloc>
+  memset(mem, 0, PGSIZE);
+801075f6:	83 ec 04             	sub    $0x4,%esp
+801075f9:	68 00 10 00 00       	push   $0x1000
+  mem = kalloc();
+801075fe:	89 c3                	mov    %eax,%ebx
+  memset(mem, 0, PGSIZE);
+80107600:	6a 00                	push   $0x0
+80107602:	50                   	push   %eax
+80107603:	e8 58 da ff ff       	call   80105060 <memset>
+  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+80107608:	58                   	pop    %eax
+80107609:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010760f:	5a                   	pop    %edx
+80107610:	6a 06                	push   $0x6
+80107612:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107617:	31 d2                	xor    %edx,%edx
+80107619:	50                   	push   %eax
+8010761a:	89 f8                	mov    %edi,%eax
+8010761c:	e8 af fc ff ff       	call   801072d0 <mappages>
+  memmove(mem, init, sz);
+80107621:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107624:	89 75 10             	mov    %esi,0x10(%ebp)
+80107627:	83 c4 10             	add    $0x10,%esp
+8010762a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010762d:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80107630:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107633:	5b                   	pop    %ebx
+80107634:	5e                   	pop    %esi
+80107635:	5f                   	pop    %edi
+80107636:	5d                   	pop    %ebp
+  memmove(mem, init, sz);
+80107637:	e9 c4 da ff ff       	jmp    80105100 <memmove>
+    panic("inituvm: more than a page");
+8010763c:	83 ec 0c             	sub    $0xc,%esp
+8010763f:	68 01 8b 10 80       	push   $0x80108b01
+80107644:	e8 47 8d ff ff       	call   80100390 <panic>
+80107649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107650 <loaduvm>:
+{
+80107650:	f3 0f 1e fb          	endbr32 
+80107654:	55                   	push   %ebp
+80107655:	89 e5                	mov    %esp,%ebp
+80107657:	57                   	push   %edi
+80107658:	56                   	push   %esi
+80107659:	53                   	push   %ebx
+8010765a:	83 ec 1c             	sub    $0x1c,%esp
+8010765d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107660:	8b 75 18             	mov    0x18(%ebp),%esi
+  if((uint) addr % PGSIZE != 0)
+80107663:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80107668:	0f 85 99 00 00 00    	jne    80107707 <loaduvm+0xb7>
+  for(i = 0; i < sz; i += PGSIZE){
+8010766e:	01 f0                	add    %esi,%eax
+80107670:	89 f3                	mov    %esi,%ebx
+80107672:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+80107675:	8b 45 14             	mov    0x14(%ebp),%eax
+80107678:	01 f0                	add    %esi,%eax
+8010767a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  for(i = 0; i < sz; i += PGSIZE){
+8010767d:	85 f6                	test   %esi,%esi
+8010767f:	75 15                	jne    80107696 <loaduvm+0x46>
+80107681:	eb 6d                	jmp    801076f0 <loaduvm+0xa0>
+80107683:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107687:	90                   	nop
+80107688:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+8010768e:	89 f0                	mov    %esi,%eax
+80107690:	29 d8                	sub    %ebx,%eax
+80107692:	39 c6                	cmp    %eax,%esi
+80107694:	76 5a                	jbe    801076f0 <loaduvm+0xa0>
+    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
+80107696:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80107699:	8b 45 08             	mov    0x8(%ebp),%eax
+8010769c:	31 c9                	xor    %ecx,%ecx
+8010769e:	29 da                	sub    %ebx,%edx
+801076a0:	e8 ab fb ff ff       	call   80107250 <walkpgdir>
+801076a5:	85 c0                	test   %eax,%eax
+801076a7:	74 51                	je     801076fa <loaduvm+0xaa>
+    pa = PTE_ADDR(*pte);
+801076a9:	8b 00                	mov    (%eax),%eax
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+801076ab:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+    if(sz - i < PGSIZE)
+801076ae:	bf 00 10 00 00       	mov    $0x1000,%edi
+    pa = PTE_ADDR(*pte);
+801076b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+    if(sz - i < PGSIZE)
+801076b8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+801076be:	0f 46 fb             	cmovbe %ebx,%edi
+    if(readi(ip, P2V(pa), offset+i, n) != n)
+801076c1:	29 d9                	sub    %ebx,%ecx
+801076c3:	05 00 00 00 80       	add    $0x80000000,%eax
+801076c8:	57                   	push   %edi
+801076c9:	51                   	push   %ecx
+801076ca:	50                   	push   %eax
+801076cb:	ff 75 10             	pushl  0x10(%ebp)
+801076ce:	e8 7d ad ff ff       	call   80102450 <readi>
+801076d3:	83 c4 10             	add    $0x10,%esp
+801076d6:	39 f8                	cmp    %edi,%eax
+801076d8:	74 ae                	je     80107688 <loaduvm+0x38>
+}
+801076da:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+801076dd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801076e2:	5b                   	pop    %ebx
+801076e3:	5e                   	pop    %esi
+801076e4:	5f                   	pop    %edi
+801076e5:	5d                   	pop    %ebp
+801076e6:	c3                   	ret    
+801076e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801076ee:	66 90                	xchg   %ax,%ax
+801076f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+801076f3:	31 c0                	xor    %eax,%eax
+}
+801076f5:	5b                   	pop    %ebx
+801076f6:	5e                   	pop    %esi
+801076f7:	5f                   	pop    %edi
+801076f8:	5d                   	pop    %ebp
+801076f9:	c3                   	ret    
+      panic("loaduvm: address should exist");
+801076fa:	83 ec 0c             	sub    $0xc,%esp
+801076fd:	68 1b 8b 10 80       	push   $0x80108b1b
+80107702:	e8 89 8c ff ff       	call   80100390 <panic>
+    panic("loaduvm: addr must be page aligned");
+80107707:	83 ec 0c             	sub    $0xc,%esp
+8010770a:	68 bc 8b 10 80       	push   $0x80108bbc
+8010770f:	e8 7c 8c ff ff       	call   80100390 <panic>
+80107714:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010771b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010771f:	90                   	nop
+
+80107720 <allocuvm>:
+{
+80107720:	f3 0f 1e fb          	endbr32 
+80107724:	55                   	push   %ebp
+80107725:	89 e5                	mov    %esp,%ebp
+80107727:	57                   	push   %edi
+80107728:	56                   	push   %esi
+80107729:	53                   	push   %ebx
+8010772a:	83 ec 1c             	sub    $0x1c,%esp
+  if(newsz >= KERNBASE)
+8010772d:	8b 45 10             	mov    0x10(%ebp),%eax
+{
+80107730:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if(newsz >= KERNBASE)
+80107733:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107736:	85 c0                	test   %eax,%eax
+80107738:	0f 88 b2 00 00 00    	js     801077f0 <allocuvm+0xd0>
+  if(newsz < oldsz)
+8010773e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+    return oldsz;
+80107741:	8b 45 0c             	mov    0xc(%ebp),%eax
+  if(newsz < oldsz)
+80107744:	0f 82 96 00 00 00    	jb     801077e0 <allocuvm+0xc0>
+  a = PGROUNDUP(oldsz);
+8010774a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80107750:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+  for(; a < newsz; a += PGSIZE){
+80107756:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107759:	77 40                	ja     8010779b <allocuvm+0x7b>
+8010775b:	e9 83 00 00 00       	jmp    801077e3 <allocuvm+0xc3>
+    memset(mem, 0, PGSIZE);
+80107760:	83 ec 04             	sub    $0x4,%esp
+80107763:	68 00 10 00 00       	push   $0x1000
+80107768:	6a 00                	push   $0x0
+8010776a:	50                   	push   %eax
+8010776b:	e8 f0 d8 ff ff       	call   80105060 <memset>
+    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
+80107770:	58                   	pop    %eax
+80107771:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107777:	5a                   	pop    %edx
+80107778:	6a 06                	push   $0x6
+8010777a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+8010777f:	89 f2                	mov    %esi,%edx
+80107781:	50                   	push   %eax
+80107782:	89 f8                	mov    %edi,%eax
+80107784:	e8 47 fb ff ff       	call   801072d0 <mappages>
+80107789:	83 c4 10             	add    $0x10,%esp
+8010778c:	85 c0                	test   %eax,%eax
+8010778e:	78 78                	js     80107808 <allocuvm+0xe8>
+  for(; a < newsz; a += PGSIZE){
+80107790:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107796:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107799:	76 48                	jbe    801077e3 <allocuvm+0xc3>
+    mem = kalloc();
+8010779b:	e8 80 b8 ff ff       	call   80103020 <kalloc>
+801077a0:	89 c3                	mov    %eax,%ebx
+    if(mem == 0){
+801077a2:	85 c0                	test   %eax,%eax
+801077a4:	75 ba                	jne    80107760 <allocuvm+0x40>
+      cprintf("allocuvm out of memory\n");
+801077a6:	83 ec 0c             	sub    $0xc,%esp
+801077a9:	68 39 8b 10 80       	push   $0x80108b39
+801077ae:	e8 3d 8f ff ff       	call   801006f0 <cprintf>
+  if(newsz >= oldsz)
+801077b3:	8b 45 0c             	mov    0xc(%ebp),%eax
+801077b6:	83 c4 10             	add    $0x10,%esp
+801077b9:	39 45 10             	cmp    %eax,0x10(%ebp)
+801077bc:	74 32                	je     801077f0 <allocuvm+0xd0>
+801077be:	8b 55 10             	mov    0x10(%ebp),%edx
+801077c1:	89 c1                	mov    %eax,%ecx
+801077c3:	89 f8                	mov    %edi,%eax
+801077c5:	e8 96 fb ff ff       	call   80107360 <deallocuvm.part.0>
+      return 0;
+801077ca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+}
+801077d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801077d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801077d7:	5b                   	pop    %ebx
+801077d8:	5e                   	pop    %esi
+801077d9:	5f                   	pop    %edi
+801077da:	5d                   	pop    %ebp
+801077db:	c3                   	ret    
+801077dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return oldsz;
+801077e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+}
+801077e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801077e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801077e9:	5b                   	pop    %ebx
+801077ea:	5e                   	pop    %esi
+801077eb:	5f                   	pop    %edi
+801077ec:	5d                   	pop    %ebp
+801077ed:	c3                   	ret    
+801077ee:	66 90                	xchg   %ax,%ax
+    return 0;
+801077f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+}
+801077f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801077fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801077fd:	5b                   	pop    %ebx
+801077fe:	5e                   	pop    %esi
+801077ff:	5f                   	pop    %edi
+80107800:	5d                   	pop    %ebp
+80107801:	c3                   	ret    
+80107802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      cprintf("allocuvm out of memory (2)\n");
+80107808:	83 ec 0c             	sub    $0xc,%esp
+8010780b:	68 51 8b 10 80       	push   $0x80108b51
+80107810:	e8 db 8e ff ff       	call   801006f0 <cprintf>
+  if(newsz >= oldsz)
+80107815:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107818:	83 c4 10             	add    $0x10,%esp
+8010781b:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010781e:	74 0c                	je     8010782c <allocuvm+0x10c>
+80107820:	8b 55 10             	mov    0x10(%ebp),%edx
+80107823:	89 c1                	mov    %eax,%ecx
+80107825:	89 f8                	mov    %edi,%eax
+80107827:	e8 34 fb ff ff       	call   80107360 <deallocuvm.part.0>
+      kfree(mem);
+8010782c:	83 ec 0c             	sub    $0xc,%esp
+8010782f:	53                   	push   %ebx
+80107830:	e8 2b b6 ff ff       	call   80102e60 <kfree>
+      return 0;
+80107835:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010783c:	83 c4 10             	add    $0x10,%esp
+}
+8010783f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107842:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107845:	5b                   	pop    %ebx
+80107846:	5e                   	pop    %esi
+80107847:	5f                   	pop    %edi
+80107848:	5d                   	pop    %ebp
+80107849:	c3                   	ret    
+8010784a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107850 <deallocuvm>:
+{
+80107850:	f3 0f 1e fb          	endbr32 
+80107854:	55                   	push   %ebp
+80107855:	89 e5                	mov    %esp,%ebp
+80107857:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010785a:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010785d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if(newsz >= oldsz)
+80107860:	39 d1                	cmp    %edx,%ecx
+80107862:	73 0c                	jae    80107870 <deallocuvm+0x20>
+}
+80107864:	5d                   	pop    %ebp
+80107865:	e9 f6 fa ff ff       	jmp    80107360 <deallocuvm.part.0>
+8010786a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107870:	89 d0                	mov    %edx,%eax
+80107872:	5d                   	pop    %ebp
+80107873:	c3                   	ret    
+80107874:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010787b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010787f:	90                   	nop
+
+80107880 <freevm>:
+
+// Free a page table and all the physical memory pages
+// in the user part.
+void
+freevm(pde_t *pgdir)
+{
+80107880:	f3 0f 1e fb          	endbr32 
+80107884:	55                   	push   %ebp
+80107885:	89 e5                	mov    %esp,%ebp
+80107887:	57                   	push   %edi
+80107888:	56                   	push   %esi
+80107889:	53                   	push   %ebx
+8010788a:	83 ec 0c             	sub    $0xc,%esp
+8010788d:	8b 75 08             	mov    0x8(%ebp),%esi
+  uint i;
+
+  if(pgdir == 0)
+80107890:	85 f6                	test   %esi,%esi
+80107892:	74 55                	je     801078e9 <freevm+0x69>
+  if(newsz >= oldsz)
+80107894:	31 c9                	xor    %ecx,%ecx
+80107896:	ba 00 00 00 80       	mov    $0x80000000,%edx
+8010789b:	89 f0                	mov    %esi,%eax
+8010789d:	89 f3                	mov    %esi,%ebx
+8010789f:	e8 bc fa ff ff       	call   80107360 <deallocuvm.part.0>
+    panic("freevm: no pgdir");
+  deallocuvm(pgdir, KERNBASE, 0);
+  for(i = 0; i < NPDENTRIES; i++){
+801078a4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+801078aa:	eb 0b                	jmp    801078b7 <freevm+0x37>
+801078ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801078b0:	83 c3 04             	add    $0x4,%ebx
+801078b3:	39 df                	cmp    %ebx,%edi
+801078b5:	74 23                	je     801078da <freevm+0x5a>
+    if(pgdir[i] & PTE_P){
+801078b7:	8b 03                	mov    (%ebx),%eax
+801078b9:	a8 01                	test   $0x1,%al
+801078bb:	74 f3                	je     801078b0 <freevm+0x30>
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+801078bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+      kfree(v);
+801078c2:	83 ec 0c             	sub    $0xc,%esp
+801078c5:	83 c3 04             	add    $0x4,%ebx
+      char * v = P2V(PTE_ADDR(pgdir[i]));
+801078c8:	05 00 00 00 80       	add    $0x80000000,%eax
+      kfree(v);
+801078cd:	50                   	push   %eax
+801078ce:	e8 8d b5 ff ff       	call   80102e60 <kfree>
+801078d3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < NPDENTRIES; i++){
+801078d6:	39 df                	cmp    %ebx,%edi
+801078d8:	75 dd                	jne    801078b7 <freevm+0x37>
+    }
+  }
+  kfree((char*)pgdir);
+801078da:	89 75 08             	mov    %esi,0x8(%ebp)
+}
+801078dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801078e0:	5b                   	pop    %ebx
+801078e1:	5e                   	pop    %esi
+801078e2:	5f                   	pop    %edi
+801078e3:	5d                   	pop    %ebp
+  kfree((char*)pgdir);
+801078e4:	e9 77 b5 ff ff       	jmp    80102e60 <kfree>
+    panic("freevm: no pgdir");
+801078e9:	83 ec 0c             	sub    $0xc,%esp
+801078ec:	68 6d 8b 10 80       	push   $0x80108b6d
+801078f1:	e8 9a 8a ff ff       	call   80100390 <panic>
+801078f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801078fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80107900 <setupkvm>:
+{
+80107900:	f3 0f 1e fb          	endbr32 
+80107904:	55                   	push   %ebp
+80107905:	89 e5                	mov    %esp,%ebp
+80107907:	56                   	push   %esi
+80107908:	53                   	push   %ebx
+  if((pgdir = (pde_t*)kalloc()) == 0)
+80107909:	e8 12 b7 ff ff       	call   80103020 <kalloc>
+8010790e:	89 c6                	mov    %eax,%esi
+80107910:	85 c0                	test   %eax,%eax
+80107912:	74 42                	je     80107956 <setupkvm+0x56>
+  memset(pgdir, 0, PGSIZE);
+80107914:	83 ec 04             	sub    $0x4,%esp
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+80107917:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
+  memset(pgdir, 0, PGSIZE);
+8010791c:	68 00 10 00 00       	push   $0x1000
+80107921:	6a 00                	push   $0x0
+80107923:	50                   	push   %eax
+80107924:	e8 37 d7 ff ff       	call   80105060 <memset>
+80107929:	83 c4 10             	add    $0x10,%esp
+                (uint)k->phys_start, k->perm) < 0) {
+8010792c:	8b 43 04             	mov    0x4(%ebx),%eax
+    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+8010792f:	83 ec 08             	sub    $0x8,%esp
+80107932:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80107935:	ff 73 0c             	pushl  0xc(%ebx)
+80107938:	8b 13                	mov    (%ebx),%edx
+8010793a:	50                   	push   %eax
+8010793b:	29 c1                	sub    %eax,%ecx
+8010793d:	89 f0                	mov    %esi,%eax
+8010793f:	e8 8c f9 ff ff       	call   801072d0 <mappages>
+80107944:	83 c4 10             	add    $0x10,%esp
+80107947:	85 c0                	test   %eax,%eax
+80107949:	78 15                	js     80107960 <setupkvm+0x60>
+  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
+8010794b:	83 c3 10             	add    $0x10,%ebx
+8010794e:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
+80107954:	75 d6                	jne    8010792c <setupkvm+0x2c>
+}
+80107956:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107959:	89 f0                	mov    %esi,%eax
+8010795b:	5b                   	pop    %ebx
+8010795c:	5e                   	pop    %esi
+8010795d:	5d                   	pop    %ebp
+8010795e:	c3                   	ret    
+8010795f:	90                   	nop
+      freevm(pgdir);
+80107960:	83 ec 0c             	sub    $0xc,%esp
+80107963:	56                   	push   %esi
+      return 0;
+80107964:	31 f6                	xor    %esi,%esi
+      freevm(pgdir);
+80107966:	e8 15 ff ff ff       	call   80107880 <freevm>
+      return 0;
+8010796b:	83 c4 10             	add    $0x10,%esp
+}
+8010796e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107971:	89 f0                	mov    %esi,%eax
+80107973:	5b                   	pop    %ebx
+80107974:	5e                   	pop    %esi
+80107975:	5d                   	pop    %ebp
+80107976:	c3                   	ret    
+80107977:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010797e:	66 90                	xchg   %ax,%ax
+
+80107980 <kvmalloc>:
+{
+80107980:	f3 0f 1e fb          	endbr32 
+80107984:	55                   	push   %ebp
+80107985:	89 e5                	mov    %esp,%ebp
+80107987:	83 ec 08             	sub    $0x8,%esp
+  kpgdir = setupkvm();
+8010798a:	e8 71 ff ff ff       	call   80107900 <setupkvm>
+8010798f:	a3 a4 6e 11 80       	mov    %eax,0x80116ea4
+  lcr3(V2P(kpgdir));   // switch to the kernel page table
+80107994:	05 00 00 00 80       	add    $0x80000000,%eax
+80107999:	0f 22 d8             	mov    %eax,%cr3
+}
+8010799c:	c9                   	leave  
+8010799d:	c3                   	ret    
+8010799e:	66 90                	xchg   %ax,%ax
+
+801079a0 <clearpteu>:
+
+// Clear PTE_U on a page. Used to create an inaccessible
+// page beneath the user stack.
+void
+clearpteu(pde_t *pgdir, char *uva)
+{
+801079a0:	f3 0f 1e fb          	endbr32 
+801079a4:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+801079a5:	31 c9                	xor    %ecx,%ecx
+{
+801079a7:	89 e5                	mov    %esp,%ebp
+801079a9:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+801079ac:	8b 55 0c             	mov    0xc(%ebp),%edx
+801079af:	8b 45 08             	mov    0x8(%ebp),%eax
+801079b2:	e8 99 f8 ff ff       	call   80107250 <walkpgdir>
+  if(pte == 0)
+801079b7:	85 c0                	test   %eax,%eax
+801079b9:	74 05                	je     801079c0 <clearpteu+0x20>
+    panic("clearpteu");
+  *pte &= ~PTE_U;
+801079bb:	83 20 fb             	andl   $0xfffffffb,(%eax)
+}
+801079be:	c9                   	leave  
+801079bf:	c3                   	ret    
+    panic("clearpteu");
+801079c0:	83 ec 0c             	sub    $0xc,%esp
+801079c3:	68 7e 8b 10 80       	push   $0x80108b7e
+801079c8:	e8 c3 89 ff ff       	call   80100390 <panic>
+801079cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801079d0 <copyuvm>:
+
+// Given a parent process's page table, create a copy
+// of it for a child.
+pde_t*
+copyuvm(pde_t *pgdir, uint sz)
+{
+801079d0:	f3 0f 1e fb          	endbr32 
+801079d4:	55                   	push   %ebp
+801079d5:	89 e5                	mov    %esp,%ebp
+801079d7:	57                   	push   %edi
+801079d8:	56                   	push   %esi
+801079d9:	53                   	push   %ebx
+801079da:	83 ec 1c             	sub    $0x1c,%esp
+  pde_t *d;
+  pte_t *pte;
+  uint pa, i, flags;
+  char *mem;
+
+  if((d = setupkvm()) == 0)
+801079dd:	e8 1e ff ff ff       	call   80107900 <setupkvm>
+801079e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801079e5:	85 c0                	test   %eax,%eax
+801079e7:	0f 84 9b 00 00 00    	je     80107a88 <copyuvm+0xb8>
+    return 0;
+  for(i = 0; i < sz; i += PGSIZE){
+801079ed:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801079f0:	85 c9                	test   %ecx,%ecx
+801079f2:	0f 84 90 00 00 00    	je     80107a88 <copyuvm+0xb8>
+801079f8:	31 f6                	xor    %esi,%esi
+801079fa:	eb 46                	jmp    80107a42 <copyuvm+0x72>
+801079fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+80107a00:	83 ec 04             	sub    $0x4,%esp
+80107a03:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80107a09:	68 00 10 00 00       	push   $0x1000
+80107a0e:	57                   	push   %edi
+80107a0f:	50                   	push   %eax
+80107a10:	e8 eb d6 ff ff       	call   80105100 <memmove>
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
+80107a15:	58                   	pop    %eax
+80107a16:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107a1c:	5a                   	pop    %edx
+80107a1d:	ff 75 e4             	pushl  -0x1c(%ebp)
+80107a20:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107a25:	89 f2                	mov    %esi,%edx
+80107a27:	50                   	push   %eax
+80107a28:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107a2b:	e8 a0 f8 ff ff       	call   801072d0 <mappages>
+80107a30:	83 c4 10             	add    $0x10,%esp
+80107a33:	85 c0                	test   %eax,%eax
+80107a35:	78 61                	js     80107a98 <copyuvm+0xc8>
+  for(i = 0; i < sz; i += PGSIZE){
+80107a37:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107a3d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80107a40:	76 46                	jbe    80107a88 <copyuvm+0xb8>
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+80107a42:	8b 45 08             	mov    0x8(%ebp),%eax
+80107a45:	31 c9                	xor    %ecx,%ecx
+80107a47:	89 f2                	mov    %esi,%edx
+80107a49:	e8 02 f8 ff ff       	call   80107250 <walkpgdir>
+80107a4e:	85 c0                	test   %eax,%eax
+80107a50:	74 61                	je     80107ab3 <copyuvm+0xe3>
+    if(!(*pte & PTE_P))
+80107a52:	8b 00                	mov    (%eax),%eax
+80107a54:	a8 01                	test   $0x1,%al
+80107a56:	74 4e                	je     80107aa6 <copyuvm+0xd6>
+    pa = PTE_ADDR(*pte);
+80107a58:	89 c7                	mov    %eax,%edi
+    flags = PTE_FLAGS(*pte);
+80107a5a:	25 ff 0f 00 00       	and    $0xfff,%eax
+80107a5f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    pa = PTE_ADDR(*pte);
+80107a62:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+    if((mem = kalloc()) == 0)
+80107a68:	e8 b3 b5 ff ff       	call   80103020 <kalloc>
+80107a6d:	89 c3                	mov    %eax,%ebx
+80107a6f:	85 c0                	test   %eax,%eax
+80107a71:	75 8d                	jne    80107a00 <copyuvm+0x30>
+    }
+  }
+  return d;
+
+bad:
+  freevm(d);
+80107a73:	83 ec 0c             	sub    $0xc,%esp
+80107a76:	ff 75 e0             	pushl  -0x20(%ebp)
+80107a79:	e8 02 fe ff ff       	call   80107880 <freevm>
+  return 0;
+80107a7e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80107a85:	83 c4 10             	add    $0x10,%esp
+}
+80107a88:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80107a8b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107a8e:	5b                   	pop    %ebx
+80107a8f:	5e                   	pop    %esi
+80107a90:	5f                   	pop    %edi
+80107a91:	5d                   	pop    %ebp
+80107a92:	c3                   	ret    
+80107a93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107a97:	90                   	nop
+      kfree(mem);
+80107a98:	83 ec 0c             	sub    $0xc,%esp
+80107a9b:	53                   	push   %ebx
+80107a9c:	e8 bf b3 ff ff       	call   80102e60 <kfree>
+      goto bad;
+80107aa1:	83 c4 10             	add    $0x10,%esp
+80107aa4:	eb cd                	jmp    80107a73 <copyuvm+0xa3>
+      panic("copyuvm: page not present");
+80107aa6:	83 ec 0c             	sub    $0xc,%esp
+80107aa9:	68 a2 8b 10 80       	push   $0x80108ba2
+80107aae:	e8 dd 88 ff ff       	call   80100390 <panic>
+      panic("copyuvm: pte should exist");
+80107ab3:	83 ec 0c             	sub    $0xc,%esp
+80107ab6:	68 88 8b 10 80       	push   $0x80108b88
+80107abb:	e8 d0 88 ff ff       	call   80100390 <panic>
+
+80107ac0 <uva2ka>:
+
+//PAGEBREAK!
+// Map user virtual address to kernel address.
+char*
+uva2ka(pde_t *pgdir, char *uva)
+{
+80107ac0:	f3 0f 1e fb          	endbr32 
+80107ac4:	55                   	push   %ebp
+  pte_t *pte;
+
+  pte = walkpgdir(pgdir, uva, 0);
+80107ac5:	31 c9                	xor    %ecx,%ecx
+{
+80107ac7:	89 e5                	mov    %esp,%ebp
+80107ac9:	83 ec 08             	sub    $0x8,%esp
+  pte = walkpgdir(pgdir, uva, 0);
+80107acc:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107acf:	8b 45 08             	mov    0x8(%ebp),%eax
+80107ad2:	e8 79 f7 ff ff       	call   80107250 <walkpgdir>
+  if((*pte & PTE_P) == 0)
+80107ad7:	8b 00                	mov    (%eax),%eax
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  return (char*)P2V(PTE_ADDR(*pte));
+}
+80107ad9:	c9                   	leave  
+  if((*pte & PTE_U) == 0)
+80107ada:	89 c2                	mov    %eax,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+80107adc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+  if((*pte & PTE_U) == 0)
+80107ae1:	83 e2 05             	and    $0x5,%edx
+  return (char*)P2V(PTE_ADDR(*pte));
+80107ae4:	05 00 00 00 80       	add    $0x80000000,%eax
+80107ae9:	83 fa 05             	cmp    $0x5,%edx
+80107aec:	ba 00 00 00 00       	mov    $0x0,%edx
+80107af1:	0f 45 c2             	cmovne %edx,%eax
+}
+80107af4:	c3                   	ret    
+80107af5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107afc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80107b00 <copyout>:
+// Copy len bytes from p to user address va in page table pgdir.
+// Most useful when pgdir is not the current page table.
+// uva2ka ensures this only works for PTE_U pages.
+int
+copyout(pde_t *pgdir, uint va, void *p, uint len)
+{
+80107b00:	f3 0f 1e fb          	endbr32 
+80107b04:	55                   	push   %ebp
+80107b05:	89 e5                	mov    %esp,%ebp
+80107b07:	57                   	push   %edi
+80107b08:	56                   	push   %esi
+80107b09:	53                   	push   %ebx
+80107b0a:	83 ec 0c             	sub    $0xc,%esp
+80107b0d:	8b 75 14             	mov    0x14(%ebp),%esi
+80107b10:	8b 55 0c             	mov    0xc(%ebp),%edx
+  char *buf, *pa0;
+  uint n, va0;
+
+  buf = (char*)p;
+  while(len > 0){
+80107b13:	85 f6                	test   %esi,%esi
+80107b15:	75 3c                	jne    80107b53 <copyout+0x53>
+80107b17:	eb 67                	jmp    80107b80 <copyout+0x80>
+80107b19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    va0 = (uint)PGROUNDDOWN(va);
+    pa0 = uva2ka(pgdir, (char*)va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (va - va0);
+80107b20:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107b23:	89 fb                	mov    %edi,%ebx
+80107b25:	29 d3                	sub    %edx,%ebx
+80107b27:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+    if(n > len)
+80107b2d:	39 f3                	cmp    %esi,%ebx
+80107b2f:	0f 47 de             	cmova  %esi,%ebx
+      n = len;
+    memmove(pa0 + (va - va0), buf, n);
+80107b32:	29 fa                	sub    %edi,%edx
+80107b34:	83 ec 04             	sub    $0x4,%esp
+80107b37:	01 c2                	add    %eax,%edx
+80107b39:	53                   	push   %ebx
+80107b3a:	ff 75 10             	pushl  0x10(%ebp)
+80107b3d:	52                   	push   %edx
+80107b3e:	e8 bd d5 ff ff       	call   80105100 <memmove>
+    len -= n;
+    buf += n;
+80107b43:	01 5d 10             	add    %ebx,0x10(%ebp)
+    va = va0 + PGSIZE;
+80107b46:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+  while(len > 0){
+80107b4c:	83 c4 10             	add    $0x10,%esp
+80107b4f:	29 de                	sub    %ebx,%esi
+80107b51:	74 2d                	je     80107b80 <copyout+0x80>
+    va0 = (uint)PGROUNDDOWN(va);
+80107b53:	89 d7                	mov    %edx,%edi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80107b55:	83 ec 08             	sub    $0x8,%esp
+    va0 = (uint)PGROUNDDOWN(va);
+80107b58:	89 55 0c             	mov    %edx,0xc(%ebp)
+80107b5b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+    pa0 = uva2ka(pgdir, (char*)va0);
+80107b61:	57                   	push   %edi
+80107b62:	ff 75 08             	pushl  0x8(%ebp)
+80107b65:	e8 56 ff ff ff       	call   80107ac0 <uva2ka>
+    if(pa0 == 0)
+80107b6a:	83 c4 10             	add    $0x10,%esp
+80107b6d:	85 c0                	test   %eax,%eax
+80107b6f:	75 af                	jne    80107b20 <copyout+0x20>
+  }
+  return 0;
+}
+80107b71:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return -1;
+80107b74:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80107b79:	5b                   	pop    %ebx
+80107b7a:	5e                   	pop    %esi
+80107b7b:	5f                   	pop    %edi
+80107b7c:	5d                   	pop    %ebp
+80107b7d:	c3                   	ret    
+80107b7e:	66 90                	xchg   %ax,%ax
+80107b80:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+80107b83:	31 c0                	xor    %eax,%eax
+}
+80107b85:	5b                   	pop    %ebx
+80107b86:	5e                   	pop    %esi
+80107b87:	5f                   	pop    %edi
+80107b88:	5d                   	pop    %ebp
+80107b89:	c3                   	ret    
diff -ruN xv6-public/kernel.sym xv6-public_task_1/kernel.sym
--- xv6-public/kernel.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/kernel.sym	2021-09-15 20:34:56.384375000 +0530
@@ -0,0 +1,533 @@
+80100000 .text
+80107ba0 .rodata
+80109000 .data
+8010b520 .bss
+00000000 .debug_line
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_aranges
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 .comment
+00000000 bio.c
+00000000 console.c
+8010b520 cons
+8010b558 panicked
+80100410 consputc.part.0
+801005e0 printint
+80107c48 digits.1601
+00000000 exec.c
+00000000 file.c
+00000000 fs.c
+80101ba0 bfree
+80101c20 balloc
+80101d30 iget
+80101e20 bmap
+80102760 namex
+00000000 ide.c
+80102a60 idestart
+8010b580 idelock
+8010b560 havedisk1
+8010b564 idequeue
+00000000 ioapic.c
+00000000 kalloc.c
+00000000 kbd.c
+8010b5b4 shift.1421
+80107f80 shiftcode
+80107e80 togglecode
+80107e60 charcode.1422
+80109200 normalmap
+80109100 shiftmap
+80109000 ctlmap
+00000000 lapic.c
+00000000 log.c
+80103580 install_trans
+80103620 write_head
+00000000 main.c
+801039d0 mpmain
+80103a10 mpenter
+00000000 mp.c
+80103b60 mpsearch1
+00000000 picirq.c
+00000000 pipe.c
+00000000 proc.c
+80104180 allocproc
+8010b000 first.1622
+8010b5b8 initproc
+8010822c states.1648
+00000000 sleeplock.c
+00000000 spinlock.c
+00000000 string.c
+00000000 syscall.c
+801082a0 syscalls
+00000000 sysfile.c
+801054a0 create
+80105640 argfd.constprop.0
+00000000 sysproc.c
+00000000 trap.c
+00000000 uart.c
+80106650 uartgetc
+8010b5bc uart
+80106680 uartputc.part.0
+00000000 vm.c
+80107250 walkpgdir
+801072d0 mappages
+80107360 deallocuvm.part.0
+8010b420 kmap
+80100290 consoleread
+801071a3 vector242
+80106bfa vector119
+8010000c entry
+80106ada vector87
+80106ad1 vector86
+80105220 safestrcpy
+801057e0 sys_close
+8010720f vector251
+80106afe vector91
+801068f4 vector33
+801062f0 sys_history
+80106de3 vector162
+801048c0 yield
+80114080 log
+80114040 kmem
+80107047 vector213
+80106b97 vector108
+801066d0 uartinit
+8010694e vector43
+80110f20 oldBuf
+801032b0 lapiceoi
+80106e07 vector165
+80106ef7 vector185
+80102d70 ioapicinit
+80106bd6 vector115
+801019e0 fileread
+80106c15 vector122
+80106130 sys_sbrk
+80114160 ioapicid
+80106d9b vector156
+801071c7 vector245
+80114034 ioapic
+80106f27 vector189
+80106818 vector7
+801069f0 vector61
+801068a3 vector24
+80106bb2 vector111
+80106fab vector200
+80106a26 vector67
+80106cc3 vector138
+80106a65 vector74
+801046c0 sched
+80105100 memmove
+801069cc vector57
+80105430 syscall
+80107053 vector214
+80106b46 vector99
+80104330 cpuid
+80102550 writei
+80106ce7 vector141
+80106090 sys_fork
+8010c5c0 bcache
+80106e5b vector172
+80107197 vector241
+80104df0 getcallerpcs
+80105cf0 sys_mkdir
+80107227 vector253
+801067f4 vector3
+801067eb vector2
+80102680 namecmp
+801070ef vector227
+80107023 vector210
+801053f0 argstr
+801070cb vector224
+8010693c vector41
+801006f0 cprintf
+80101860 filedup
+80102a20 namei
+80106888 vector21
+80100040 binit
+80106e97 vector177
+80106bf1 vector118
+80106a41 vector70
+80106a38 vector69
+80107167 vector237
+80106a0b vector64
+801068be vector27
+80106c7b vector132
+80106f03 vector186
+80105700 sys_read
+80107077 vector217
+801052a0 fetchint
+80107900 setupkvm
+80105160 memcpy
+80107880 freevm
+801067e2 vector1
+80106ea3 vector178
+80106921 vector38
+80102e60 kfree
+80107173 vector238
+801042c0 mycpu
+80102280 iput
+80106c87 vector133
+80106a5c vector73
+80106d0b vector144
+80107233 vector254
+80101ef0 readsb
+8010b004 nextpid
+80106b58 vector101
+8010702f vector211
+80103be0 mpinit
+80106e73 vector174
+801071af vector243
+801017d0 fileinit
+80104dd0 initlock
+801008e0 shiftbufright
+80106c4b vector128
+80107b00 copyout
+80106aa4 vector81
+80104910 sleep
+801032d0 microdelay
+80106846 vector13
+80106996 vector51
+8010685d vector16
+80110fa0 input
+8010718b vector240
+801069b1 vector54
+80106876 vector19
+80106b07 vector92
+801071bb vector244
+80102420 stati
+80106cdb vector140
+801060d0 sys_kill
+80106960 vector45
+80106a92 vector79
+80103ef0 pipeclose
+80107107 vector229
+80106db3 vector158
+80105830 sys_fstat
+80100680 consolewrite
+8010692a vector39
+80106e2b vector168
+80103790 end_op
+80106906 vector35
+80106bc4 vector113
+80102f00 freerange
+80106c30 vector125
+80100b60 copyBufferToScreen
+80107720 allocuvm
+8010633b trapret
+8010706b vector216
+80106a02 vector63
+801068b5 vector26
+80106f57 vector193
+80103190 lapicinit
+80106f7b vector196
+80107017 vector209
+801067fd vector4
+80106e43 vector170
+8010b5c0 stack
+80106cab vector136
+80106831 vector10
+80106ff3 vector206
+80102230 iunlock
+80106180 sys_sleep
+8010723f vector255
+80106ec7 vector181
+801069de vector59
+80106ac8 vector85
+80106abf vector84
+80106edf vector183
+80106dbf vector159
+8010703b vector212
+80105880 sys_link
+80106972 vector47
+801070fb vector228
+80106945 vector42
+80106bcd vector114
+80107ac0 uva2ka
+80106e7f vector175
+80106cff vector143
+801017f0 filealloc
+80104ad0 wakeup
+80106c63 vector130
+801071d3 vector246
+80106828 vector9
+80106cf3 vector142
+80106b4f vector100
+80106fb7 vector201
+801079a0 clearpteu
+80104350 myproc
+80106350 tvinit
+801069e7 vector60
+8010689a vector23
+80102120 idup
+8010715b vector236
+80103170 kbdintr
+80105bb0 sys_open
+8010711f vector231
+80101360 history
+80106a1d vector66
+801068d0 vector29
+80102450 readi
+80106c9f vector135
+80100c70 consoleintr
+80104b30 kill
+80106a80 vector77
+80101fd0 ialloc
+80106ebb vector180
+80116ea4 kpgdir
+8010700b vector208
+80103380 cmostime
+801067c0 uartintr
+80106b3d vector98
+80106b34 vector97
+80100b40 earaseContentOnInputBuf
+80106e8b vector176
+80106f63 vector194
+801068eb vector32
+80116ea8 end
+80106f9f vector199
+80106c6f vector131
+8010721b vector252
+80101a80 filewrite
+801067d9 vector0
+80105340 argint
+80101470 exec
+80106d17 vector145
+80105770 sys_write
+80105010 release
+801052e0 fetchstr
+80106b8e vector107
+80106933 vector40
+801049d0 wait
+801008a0 copybuffToBeShifted
+80106b61 vector102
+80111040 buf2
+8010a000 entrypgdir
+0010000c _start
+801069c3 vector56
+80106a2f vector68
+8010680f vector6
+8010b48c _binary_initcode_end
+80100000 multiboot_header
+80106c57 vector129
+80104620 scheduler
+801026a0 dirlookup
+80106f87 vector197
+801018b0 fileclose
+80103720 begin_op
+80106d6b vector152
+801110c0 lengthOfOldBuf
+80107980 kvmalloc
+80107113 vector230
+80105170 strncmp
+80106918 vector37
+80106fe7 vector205
+80106dd7 vector161
+80116660 tickslock
+80103f90 pipewrite
+801051c0 strncpy
+80106a4a vector71
+801079d0 copyuvm
+801119c0 ftable
+80106dcb vector160
+80105390 argptr
+8010705f vector215
+80106da7 vector157
+80105690 sys_dup
+80106bbb vector112
+80100390 panic
+80104250 forkret
+80106ed3 vector182
+8010683f vector12
+801050b0 memcmp
+80103090 kbdgetc
+80106ba0 vector109
+8010687f vector20
+80104500 fork
+801069a8 vector53
+8010686d vector18
+0000008a _binary_entryother_size
+80114180 cpus
+80104d30 releasesleep
+80106b22 vector95
+80104f00 holding
+801123c0 sb
+80104f50 acquire
+801070e3 vector226
+80102a40 nameiparent
+80106984 vector49
+80106957 vector44
+8011407c lapic
+80106a89 vector78
+80106323 alltraps
+80106e67 vector173
+801110e0 HistoryMem
+80106be8 vector117
+80111940 buffToBeShifted
+80106aad vector82
+801070b3 vector222
+80106821 vector8
+80106d47 vector149
+80102090 iupdate
+80109000 data
+80105060 memset
+8010712b vector232
+80103a30 main
+801074a0 switchkvm
+80106b85 vector106
+8010709b vector220
+80106af5 vector90
+80106def vector163
+80107143 vector234
+80103900 log_write
+80104cd0 acquiresleep
+801059d0 sys_unlink
+801069f9 vector62
+801068ac vector25
+80106f93 vector198
+80106c03 vector120
+8010b48c _binary_entryother_start
+80102f50 kinit1
+8010698d vector50
+80106854 vector15
+80106d5f vector151
+80106ab6 vector83
+80106aec vector89
+80106ae3 vector88
+80106400 trap
+80106230 sys_uptime
+80106eaf vector179
+801068fd vector34
+80106969 vector46
+801009a0 shiftbufleft
+80106c93 vector134
+801070bf vector223
+801166a0 idt
+80107083 vector218
+801042a0 pinit
+80107850 deallocuvm
+801070d7 vector225
+80103290 lapicid
+80106f0f vector187
+80104480 growproc
+80104d70 holdingsleep
+80114700 ncpu
+801068d9 vector30
+80104380 userinit
+801000d0 bread
+80106c42 vector127
+80104090 piperead
+80116ea0 ticks
+80106f4b vector192
+80106e13 vector166
+80101400 consoleinit
+80100a70 earaseCurrentLineOnScreen
+80106a77 vector76
+80106a6e vector75
+80102bd0 ideintr
+80106f6f vector195
+80106d53 vector150
+801069d5 vector58
+801071eb vector248
+80106c1e vector123
+80106b2b vector96
+801068e2 vector31
+80106fcf vector203
+80100c00 saveCMDinHistoryMem
+80106ccf vector139
+80106d77 vector153
+80106dfb vector164
+80104bc0 procdump
+80106c0c vector121
+80106790 uartputc
+80106806 vector5
+80106e1f vector167
+80106d8f vector155
+801071f7 vector249
+801001f0 brelse
+80107203 vector250
+80106c27 vector124
+80106ba9 vector110
+80106fdb vector204
+80102150 ilock
+80105eb0 sys_exec
+80106cb7 vector137
+8010b460 _binary_initcode_start
+80100b00 copybuffToBeShiftedToOldBuf
+80105283 swtch
+801071df vector247
+80106891 vector22
+80106fc3 vector202
+80107410 seginit
+801023f0 iunlockput
+80106a53 vector72
+801069ba vector55
+80106c39 vector126
+80106a14 vector65
+801068c7 vector28
+8010b516 _binary_entryother_end
+80106e37 vector169
+801001b0 bwrite
+80107137 vector233
+80100ba0 copyBufferToInputBuf
+801063d0 idtinit
+80104780 exit
+801060c0 sys_wait
+801060a0 sys_exit
+80102960 dirlink
+0000002c _binary_initcode_size
+80106d2f vector147
+80104c90 initsleeplock
+80102b40 ideinit
+80107650 loaduvm
+80106b73 vector104
+80106bdf vector116
+80114720 ptable
+80102e20 ioapicenable
+80104ea0 popcli
+8010b008 vectors
+8010699f vector52
+80106866 vector17
+80106eeb vector184
+80105260 strlen
+80105fb0 sys_pipe
+80101f30 iinit
+80103dc0 picinit
+80106fff vector207
+801075d0 inituvm
+80106f33 vector190
+8010717f vector239
+80106b19 vector94
+80106b10 vector93
+80103680 initlog
+80106f1b vector188
+8010697b vector48
+80102c70 iderw
+8010708f vector219
+80106d3b vector148
+801070a7 vector221
+80103020 kalloc
+80112360 devsw
+80106110 sys_getpid
+80106260 sys_draw
+80106a9b vector80
+80106e4f vector171
+80106d83 vector154
+8010690f vector36
+80103de0 pipealloc
+8010714f vector235
+80106b7c vector105
+80105e00 sys_chdir
+801123e0 icache
+80106d23 vector146
+80106f3f vector191
+80106b6a vector103
+80105d60 sys_mknod
+801032e0 lapicstartap
+801074c0 switchuvm
+80104e50 pushcli
+80102fc0 kinit2
+80106838 vector11
+8010684d vector14
+80101990 filestat
Binary files xv6-public/_kill and xv6-public_task_1/_kill differ
diff -ruN xv6-public/kill.asm xv6-public_task_1/kill.asm
--- xv6-public/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/kill.asm	2021-09-15 20:34:57.888372000 +0530
@@ -0,0 +1,1209 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 30                	jle    51 <main+0x51>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 23 02 00 00       	call   260 <atoi>
+  3d:	89 04 24             	mov    %eax,(%esp)
+  40:	e8 be 02 00 00       	call   303 <kill>
+  for(i=1; i<argc; i++)
+  45:	83 c4 10             	add    $0x10,%esp
+  48:	39 f3                	cmp    %esi,%ebx
+  4a:	75 e4                	jne    30 <main+0x30>
+  exit();
+  4c:	e8 82 02 00 00       	call   2d3 <exit>
+    printf(2, "usage: kill pid...\n");
+  51:	50                   	push   %eax
+  52:	50                   	push   %eax
+  53:	68 a8 07 00 00       	push   $0x7a8
+  58:	6a 02                	push   $0x2
+  5a:	e8 e1 03 00 00       	call   440 <printf>
+    exit();
+  5f:	e8 6f 02 00 00       	call   2d3 <exit>
+  64:	66 90                	xchg   %ax,%ax
+  66:	66 90                	xchg   %ax,%ax
+  68:	66 90                	xchg   %ax,%ax
+  6a:	66 90                	xchg   %ax,%ax
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	f3 0f 1e fb          	endbr32 
+  74:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  75:	31 c0                	xor    %eax,%eax
+{
+  77:	89 e5                	mov    %esp,%ebp
+  79:	53                   	push   %ebx
+  7a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  7d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  87:	83 c0 01             	add    $0x1,%eax
+  8a:	84 d2                	test   %dl,%dl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	89 c8                	mov    %ecx,%eax
+  90:	5b                   	pop    %ebx
+  91:	5d                   	pop    %ebp
+  92:	c3                   	ret    
+  93:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	53                   	push   %ebx
+  a8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  ab:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  ae:	0f b6 01             	movzbl (%ecx),%eax
+  b1:	0f b6 1a             	movzbl (%edx),%ebx
+  b4:	84 c0                	test   %al,%al
+  b6:	75 19                	jne    d1 <strcmp+0x31>
+  b8:	eb 26                	jmp    e0 <strcmp+0x40>
+  ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  c0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  c4:	83 c1 01             	add    $0x1,%ecx
+  c7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ca:	0f b6 1a             	movzbl (%edx),%ebx
+  cd:	84 c0                	test   %al,%al
+  cf:	74 0f                	je     e0 <strcmp+0x40>
+  d1:	38 d8                	cmp    %bl,%al
+  d3:	74 eb                	je     c0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  d5:	29 d8                	sub    %ebx,%eax
+}
+  d7:	5b                   	pop    %ebx
+  d8:	5d                   	pop    %ebp
+  d9:	c3                   	ret    
+  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  e0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  e2:	29 d8                	sub    %ebx,%eax
+}
+  e4:	5b                   	pop    %ebx
+  e5:	5d                   	pop    %ebp
+  e6:	c3                   	ret    
+  e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ee:	66 90                	xchg   %ax,%ax
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  fa:	80 3a 00             	cmpb   $0x0,(%edx)
+  fd:	74 21                	je     120 <strlen+0x30>
+  ff:	31 c0                	xor    %eax,%eax
+ 101:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 108:	83 c0 01             	add    $0x1,%eax
+ 10b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 10f:	89 c1                	mov    %eax,%ecx
+ 111:	75 f5                	jne    108 <strlen+0x18>
+    ;
+  return n;
+}
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	5d                   	pop    %ebp
+ 116:	c3                   	ret    
+ 117:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 120:	31 c9                	xor    %ecx,%ecx
+}
+ 122:	5d                   	pop    %ebp
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	c3                   	ret    
+ 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	f3 0f 1e fb          	endbr32 
+ 134:	55                   	push   %ebp
+ 135:	89 e5                	mov    %esp,%ebp
+ 137:	57                   	push   %edi
+ 138:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 13b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 141:	89 d7                	mov    %edx,%edi
+ 143:	fc                   	cld    
+ 144:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 146:	89 d0                	mov    %edx,%eax
+ 148:	5f                   	pop    %edi
+ 149:	5d                   	pop    %ebp
+ 14a:	c3                   	ret    
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	8b 45 08             	mov    0x8(%ebp),%eax
+ 15a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 15e:	0f b6 10             	movzbl (%eax),%edx
+ 161:	84 d2                	test   %dl,%dl
+ 163:	75 16                	jne    17b <strchr+0x2b>
+ 165:	eb 21                	jmp    188 <strchr+0x38>
+ 167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16e:	66 90                	xchg   %ax,%ax
+ 170:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 174:	83 c0 01             	add    $0x1,%eax
+ 177:	84 d2                	test   %dl,%dl
+ 179:	74 0d                	je     188 <strchr+0x38>
+    if(*s == c)
+ 17b:	38 d1                	cmp    %dl,%cl
+ 17d:	75 f1                	jne    170 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 17f:	5d                   	pop    %ebp
+ 180:	c3                   	ret    
+ 181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 188:	31 c0                	xor    %eax,%eax
+}
+ 18a:	5d                   	pop    %ebp
+ 18b:	c3                   	ret    
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+ 195:	89 e5                	mov    %esp,%ebp
+ 197:	57                   	push   %edi
+ 198:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 199:	31 f6                	xor    %esi,%esi
+{
+ 19b:	53                   	push   %ebx
+ 19c:	89 f3                	mov    %esi,%ebx
+ 19e:	83 ec 1c             	sub    $0x1c,%esp
+ 1a1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1a4:	eb 33                	jmp    1d9 <gets+0x49>
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1b6:	6a 01                	push   $0x1
+ 1b8:	50                   	push   %eax
+ 1b9:	6a 00                	push   $0x0
+ 1bb:	e8 2b 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1c0:	83 c4 10             	add    $0x10,%esp
+ 1c3:	85 c0                	test   %eax,%eax
+ 1c5:	7e 1c                	jle    1e3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1cb:	83 c7 01             	add    $0x1,%edi
+ 1ce:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1d1:	3c 0a                	cmp    $0xa,%al
+ 1d3:	74 23                	je     1f8 <gets+0x68>
+ 1d5:	3c 0d                	cmp    $0xd,%al
+ 1d7:	74 1f                	je     1f8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	89 fe                	mov    %edi,%esi
+ 1de:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1e1:	7c cd                	jl     1b0 <gets+0x20>
+ 1e3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1e5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1e8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ee:	5b                   	pop    %ebx
+ 1ef:	5e                   	pop    %esi
+ 1f0:	5f                   	pop    %edi
+ 1f1:	5d                   	pop    %ebp
+ 1f2:	c3                   	ret    
+ 1f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1f7:	90                   	nop
+ 1f8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1fb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1fe:	01 de                	add    %ebx,%esi
+ 200:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 202:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 205:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 208:	5b                   	pop    %ebx
+ 209:	5e                   	pop    %esi
+ 20a:	5f                   	pop    %edi
+ 20b:	5d                   	pop    %ebp
+ 20c:	c3                   	ret    
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	56                   	push   %esi
+ 218:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	6a 00                	push   $0x0
+ 21e:	ff 75 08             	pushl  0x8(%ebp)
+ 221:	e8 ed 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 226:	83 c4 10             	add    $0x10,%esp
+ 229:	85 c0                	test   %eax,%eax
+ 22b:	78 2b                	js     258 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 22d:	83 ec 08             	sub    $0x8,%esp
+ 230:	ff 75 0c             	pushl  0xc(%ebp)
+ 233:	89 c3                	mov    %eax,%ebx
+ 235:	50                   	push   %eax
+ 236:	e8 f0 00 00 00       	call   32b <fstat>
+  close(fd);
+ 23b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 240:	e8 b6 00 00 00       	call   2fb <close>
+  return r;
+ 245:	83 c4 10             	add    $0x10,%esp
+}
+ 248:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 24b:	89 f0                	mov    %esi,%eax
+ 24d:	5b                   	pop    %ebx
+ 24e:	5e                   	pop    %esi
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 258:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 25d:	eb e9                	jmp    248 <stat+0x38>
+ 25f:	90                   	nop
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	53                   	push   %ebx
+ 268:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 26b:	0f be 02             	movsbl (%edx),%eax
+ 26e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 271:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 274:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 279:	77 1a                	ja     295 <atoi+0x35>
+ 27b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	89 c8                	mov    %ecx,%eax
+ 297:	5b                   	pop    %ebx
+ 298:	5d                   	pop    %ebp
+ 299:	c3                   	ret    
+ 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	f3 0f 1e fb          	endbr32 
+ 2a4:	55                   	push   %ebp
+ 2a5:	89 e5                	mov    %esp,%ebp
+ 2a7:	57                   	push   %edi
+ 2a8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2ab:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ae:	56                   	push   %esi
+ 2af:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2b2:	85 c0                	test   %eax,%eax
+ 2b4:	7e 0f                	jle    2c5 <memmove+0x25>
+ 2b6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b8:	89 d7                	mov    %edx,%edi
+ 2ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <draw>:
+SYSCALL(draw)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <history>:
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+ 383:	66 90                	xchg   %ax,%ax
+ 385:	66 90                	xchg   %ax,%ax
+ 387:	66 90                	xchg   %ax,%ax
+ 389:	66 90                	xchg   %ax,%ax
+ 38b:	66 90                	xchg   %ax,%ax
+ 38d:	66 90                	xchg   %ax,%ax
+ 38f:	90                   	nop
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+ 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 39c:	89 d1                	mov    %edx,%ecx
+{
+ 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3a1:	85 d2                	test   %edx,%edx
+ 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
+ 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ad:	74 79                	je     428 <printint+0x98>
+    neg = 1;
+ 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3b6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b8:	31 db                	xor    %ebx,%ebx
+ 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 c8                	mov    %ecx,%eax
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	89 cf                	mov    %ecx,%edi
+ 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3c9:	0f b6 92 c4 07 00 00 	movzbl 0x7c4(%edx),%edx
+ 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3d3:	89 d8                	mov    %ebx,%eax
+ 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+  if(neg)
+ 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3e6:	85 c9                	test   %ecx,%ecx
+ 3e8:	74 0c                	je     3f6 <printint+0x66>
+    buf[i++] = '-';
+ 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ef:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3fd:	eb 07                	jmp    406 <printint+0x76>
+ 3ff:	90                   	nop
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 de fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 42f:	eb 87                	jmp    3b8 <printint+0x28>
+ 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	f3 0f 1e fb          	endbr32 
+ 444:	55                   	push   %ebp
+ 445:	89 e5                	mov    %esp,%ebp
+ 447:	57                   	push   %edi
+ 448:	56                   	push   %esi
+ 449:	53                   	push   %ebx
+ 44a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 44d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 450:	0f b6 1e             	movzbl (%esi),%ebx
+ 453:	84 db                	test   %bl,%bl
+ 455:	0f 84 b4 00 00 00    	je     50f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 45b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 45e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 461:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 464:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 466:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 469:	eb 33                	jmp    49e <printf+0x5e>
+ 46b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+ 470:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 473:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 17                	je     494 <printf+0x54>
+  write(fd, &c, 1);
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	ff 75 08             	pushl  0x8(%ebp)
+ 489:	e8 65 fe ff ff       	call   2f3 <write>
+ 48e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 491:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 494:	0f b6 1e             	movzbl (%esi),%ebx
+ 497:	83 c6 01             	add    $0x1,%esi
+ 49a:	84 db                	test   %bl,%bl
+ 49c:	74 71                	je     50f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 49e:	0f be cb             	movsbl %bl,%ecx
+ 4a1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4a4:	85 d2                	test   %edx,%edx
+ 4a6:	74 c8                	je     470 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4a8:	83 fa 25             	cmp    $0x25,%edx
+ 4ab:	75 e7                	jne    494 <printf+0x54>
+      if(c == 'd'){
+ 4ad:	83 f8 64             	cmp    $0x64,%eax
+ 4b0:	0f 84 9a 00 00 00    	je     550 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4b6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4bc:	83 f9 70             	cmp    $0x70,%ecx
+ 4bf:	74 5f                	je     520 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4c1:	83 f8 73             	cmp    $0x73,%eax
+ 4c4:	0f 84 d6 00 00 00    	je     5a0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ca:	83 f8 63             	cmp    $0x63,%eax
+ 4cd:	0f 84 8d 00 00 00    	je     560 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4d3:	83 f8 25             	cmp    $0x25,%eax
+ 4d6:	0f 84 b4 00 00 00    	je     590 <printf+0x150>
+  write(fd, &c, 1);
+ 4dc:	83 ec 04             	sub    $0x4,%esp
+ 4df:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4e3:	6a 01                	push   $0x1
+ 4e5:	57                   	push   %edi
+ 4e6:	ff 75 08             	pushl  0x8(%ebp)
+ 4e9:	e8 05 fe ff ff       	call   2f3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ee:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4f1:	83 c4 0c             	add    $0xc,%esp
+ 4f4:	6a 01                	push   $0x1
+ 4f6:	83 c6 01             	add    $0x1,%esi
+ 4f9:	57                   	push   %edi
+ 4fa:	ff 75 08             	pushl  0x8(%ebp)
+ 4fd:	e8 f1 fd ff ff       	call   2f3 <write>
+  for(i = 0; fmt[i]; i++){
+ 502:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 506:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 509:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 50b:	84 db                	test   %bl,%bl
+ 50d:	75 8f                	jne    49e <printf+0x5e>
+    }
+  }
+}
+ 50f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 512:	5b                   	pop    %ebx
+ 513:	5e                   	pop    %esi
+ 514:	5f                   	pop    %edi
+ 515:	5d                   	pop    %ebp
+ 516:	c3                   	ret    
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 520:	83 ec 0c             	sub    $0xc,%esp
+ 523:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 528:	6a 00                	push   $0x0
+ 52a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 52d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 530:	8b 13                	mov    (%ebx),%edx
+ 532:	e8 59 fe ff ff       	call   390 <printint>
+        ap++;
+ 537:	89 d8                	mov    %ebx,%eax
+ 539:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 53c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 53e:	83 c0 04             	add    $0x4,%eax
+ 541:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 544:	e9 4b ff ff ff       	jmp    494 <printf+0x54>
+ 549:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	eb ce                	jmp    52a <printf+0xea>
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+        ap++;
+ 56a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 56d:	57                   	push   %edi
+ 56e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 571:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 574:	e8 7a fd ff ff       	call   2f3 <write>
+        ap++;
+ 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 57c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57f:	31 d2                	xor    %edx,%edx
+ 581:	e9 0e ff ff ff       	jmp    494 <printf+0x54>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 590:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+ 596:	e9 59 ff ff ff       	jmp    4f4 <printf+0xb4>
+ 59b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+        s = (char*)*ap;
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5a3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5a5:	83 c0 04             	add    $0x4,%eax
+ 5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5ab:	85 db                	test   %ebx,%ebx
+ 5ad:	74 17                	je     5c6 <printf+0x186>
+        while(*s != 0){
+ 5af:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5b2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5b4:	84 c0                	test   %al,%al
+ 5b6:	0f 84 d8 fe ff ff    	je     494 <printf+0x54>
+ 5bc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5bf:	89 de                	mov    %ebx,%esi
+ 5c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c4:	eb 1a                	jmp    5e0 <printf+0x1a0>
+          s = "(null)";
+ 5c6:	bb bc 07 00 00       	mov    $0x7bc,%ebx
+        while(*s != 0){
+ 5cb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5ce:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d3:	89 de                	mov    %ebx,%esi
+ 5d5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5e3:	83 c6 01             	add    $0x1,%esi
+ 5e6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5e9:	6a 01                	push   $0x1
+ 5eb:	57                   	push   %edi
+ 5ec:	53                   	push   %ebx
+ 5ed:	e8 01 fd ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 5f2:	0f b6 06             	movzbl (%esi),%eax
+ 5f5:	83 c4 10             	add    $0x10,%esp
+ 5f8:	84 c0                	test   %al,%al
+ 5fa:	75 e4                	jne    5e0 <printf+0x1a0>
+ 5fc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ff:	31 d2                	xor    %edx,%edx
+ 601:	e9 8e fe ff ff       	jmp    494 <printf+0x54>
+ 606:	66 90                	xchg   %ax,%ax
+ 608:	66 90                	xchg   %ax,%ax
+ 60a:	66 90                	xchg   %ax,%ax
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	f3 0f 1e fb          	endbr32 
+ 614:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 615:	a1 74 0a 00 00       	mov    0xa74,%eax
+{
+ 61a:	89 e5                	mov    %esp,%ebp
+ 61c:	57                   	push   %edi
+ 61d:	56                   	push   %esi
+ 61e:	53                   	push   %ebx
+ 61f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 622:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 624:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 627:	39 c8                	cmp    %ecx,%eax
+ 629:	73 15                	jae    640 <free+0x30>
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+ 630:	39 d1                	cmp    %edx,%ecx
+ 632:	72 14                	jb     648 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 634:	39 d0                	cmp    %edx,%eax
+ 636:	73 10                	jae    648 <free+0x38>
+{
+ 638:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 63a:	8b 10                	mov    (%eax),%edx
+ 63c:	39 c8                	cmp    %ecx,%eax
+ 63e:	72 f0                	jb     630 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 d0                	cmp    %edx,%eax
+ 642:	72 f4                	jb     638 <free+0x28>
+ 644:	39 d1                	cmp    %edx,%ecx
+ 646:	73 f0                	jae    638 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 fa                	cmp    %edi,%edx
+ 650:	74 1e                	je     670 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 652:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 655:	8b 50 04             	mov    0x4(%eax),%edx
+ 658:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 28                	je     687 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 65f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 661:	5b                   	pop    %ebx
+  freep = p;
+ 662:	a3 74 0a 00 00       	mov    %eax,0xa74
+}
+ 667:	5e                   	pop    %esi
+ 668:	5f                   	pop    %edi
+ 669:	5d                   	pop    %ebp
+ 66a:	c3                   	ret    
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 670:	03 72 04             	add    0x4(%edx),%esi
+ 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 676:	8b 10                	mov    (%eax),%edx
+ 678:	8b 12                	mov    (%edx),%edx
+ 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67d:	8b 50 04             	mov    0x4(%eax),%edx
+ 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 683:	39 f1                	cmp    %esi,%ecx
+ 685:	75 d8                	jne    65f <free+0x4f>
+    p->s.size += bp->s.size;
+ 687:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 68a:	a3 74 0a 00 00       	mov    %eax,0xa74
+    p->s.size += bp->s.size;
+ 68f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 692:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 695:	89 10                	mov    %edx,(%eax)
+}
+ 697:	5b                   	pop    %ebx
+ 698:	5e                   	pop    %esi
+ 699:	5f                   	pop    %edi
+ 69a:	5d                   	pop    %ebp
+ 69b:	c3                   	ret    
+ 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	f3 0f 1e fb          	endbr32 
+ 6a4:	55                   	push   %ebp
+ 6a5:	89 e5                	mov    %esp,%ebp
+ 6a7:	57                   	push   %edi
+ 6a8:	56                   	push   %esi
+ 6a9:	53                   	push   %ebx
+ 6aa:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6ad:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6b0:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b9:	c1 ee 03             	shr    $0x3,%esi
+ 6bc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6bf:	85 ff                	test   %edi,%edi
+ 6c1:	0f 84 a9 00 00 00    	je     770 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6c9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cc:	39 f1                	cmp    %esi,%ecx
+ 6ce:	73 6d                	jae    73d <malloc+0x9d>
+ 6d0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6d6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6db:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6de:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6e5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6e8:	eb 17                	jmp    701 <malloc+0x61>
+ 6ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6f2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	73 4f                	jae    748 <malloc+0xa8>
+ 6f9:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
+ 6ff:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	39 c7                	cmp    %eax,%edi
+ 703:	75 eb                	jne    6f0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 705:	83 ec 0c             	sub    $0xc,%esp
+ 708:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 70b:	e8 4b fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 710:	83 c4 10             	add    $0x10,%esp
+ 713:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 716:	74 1b                	je     733 <malloc+0x93>
+  hp->s.size = nu;
+ 718:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 71b:	83 ec 0c             	sub    $0xc,%esp
+ 71e:	83 c0 08             	add    $0x8,%eax
+ 721:	50                   	push   %eax
+ 722:	e8 e9 fe ff ff       	call   610 <free>
+  return freep;
+ 727:	a1 74 0a 00 00       	mov    0xa74,%eax
+      if((p = morecore(nunits)) == 0)
+ 72c:	83 c4 10             	add    $0x10,%esp
+ 72f:	85 c0                	test   %eax,%eax
+ 731:	75 bd                	jne    6f0 <malloc+0x50>
+        return 0;
+  }
+}
+ 733:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 736:	31 c0                	xor    %eax,%eax
+}
+ 738:	5b                   	pop    %ebx
+ 739:	5e                   	pop    %esi
+ 73a:	5f                   	pop    %edi
+ 73b:	5d                   	pop    %ebp
+ 73c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 73d:	89 c2                	mov    %eax,%edx
+ 73f:	89 f8                	mov    %edi,%eax
+ 741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 748:	39 ce                	cmp    %ecx,%esi
+ 74a:	74 54                	je     7a0 <malloc+0x100>
+        p->s.size -= nunits;
+ 74c:	29 f1                	sub    %esi,%ecx
+ 74e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 751:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 754:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 757:	a3 74 0a 00 00       	mov    %eax,0xa74
+}
+ 75c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 75f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 762:	5b                   	pop    %ebx
+ 763:	5e                   	pop    %esi
+ 764:	5f                   	pop    %edi
+ 765:	5d                   	pop    %ebp
+ 766:	c3                   	ret    
+ 767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 74 0a 00 00 78 	movl   $0xa78,0xa74
+ 777:	0a 00 00 
+    base.s.size = 0;
+ 77a:	bf 78 0a 00 00       	mov    $0xa78,%edi
+    base.s.ptr = freep = prevp = &base;
+ 77f:	c7 05 78 0a 00 00 78 	movl   $0xa78,0xa78
+ 786:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 789:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 78b:	c7 05 7c 0a 00 00 00 	movl   $0x0,0xa7c
+ 792:	00 00 00 
+    if(p->s.size >= nunits){
+ 795:	e9 36 ff ff ff       	jmp    6d0 <malloc+0x30>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 0a                	mov    (%edx),%ecx
+ 7a2:	89 08                	mov    %ecx,(%eax)
+ 7a4:	eb b1                	jmp    757 <malloc+0xb7>
diff -ruN xv6-public/kill.d xv6-public_task_1/kill.d
--- xv6-public/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/kill.d	2021-09-15 20:34:57.852372000 +0530
@@ -0,0 +1 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/kill.o and xv6-public_task_1/kill.o differ
diff -ruN xv6-public/kill.sym xv6-public_task_1/kill.sym
--- xv6-public/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/kill.sym	2021-09-15 20:34:57.892372000 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+000007a8 .rodata
+000007d8 .eh_frame
+00000a74 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+000007c4 digits.1091
+00000000 umalloc.c
+00000a74 freep
+00000a78 base
+00000070 strcpy
+00000440 printf
+000002a0 memmove
+0000031b mknod
+00000190 gets
+00000353 getpid
+000006a0 malloc
+00000363 sleep
+000002e3 pipe
+000002f3 write
+0000037b history
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000a74 __bss_start
+00000130 memset
+00000000 main
+000000a0 strcmp
+0000034b dup
+00000210 stat
+00000a74 _edata
+00000a80 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+00000373 draw
+000000f0 strlen
+00000313 open
+00000150 strchr
+0000033b mkdir
+000002fb close
+00000610 free
diff -ruN xv6-public/lapic.d xv6-public_task_1/lapic.d
--- xv6-public/lapic.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/lapic.d	2021-09-15 20:34:54.232378000 +0530
@@ -0,0 +1,2 @@
+lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
+ memlayout.h traps.h mmu.h x86.h
Binary files xv6-public/lapic.o and xv6-public_task_1/lapic.o differ
Binary files xv6-public/_ln and xv6-public_task_1/_ln differ
diff -ruN xv6-public/ln.asm xv6-public_task_1/ln.asm
--- xv6-public/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ln.asm	2021-09-15 20:34:57.956372000 +0530
@@ -0,0 +1,1201 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+  if(argc != 3){
+   e:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+  11:	55                   	push   %ebp
+  12:	89 e5                	mov    %esp,%ebp
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  19:	74 13                	je     2e <main+0x2e>
+    printf(2, "Usage: ln old new\n");
+  1b:	52                   	push   %edx
+  1c:	52                   	push   %edx
+  1d:	68 98 07 00 00       	push   $0x798
+  22:	6a 02                	push   $0x2
+  24:	e8 07 04 00 00       	call   430 <printf>
+    exit();
+  29:	e8 95 02 00 00       	call   2c3 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2e:	50                   	push   %eax
+  2f:	50                   	push   %eax
+  30:	ff 73 08             	pushl  0x8(%ebx)
+  33:	ff 73 04             	pushl  0x4(%ebx)
+  36:	e8 e8 02 00 00       	call   323 <link>
+  3b:	83 c4 10             	add    $0x10,%esp
+  3e:	85 c0                	test   %eax,%eax
+  40:	78 05                	js     47 <main+0x47>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  42:	e8 7c 02 00 00       	call   2c3 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  47:	ff 73 08             	pushl  0x8(%ebx)
+  4a:	ff 73 04             	pushl  0x4(%ebx)
+  4d:	68 ab 07 00 00       	push   $0x7ab
+  52:	6a 02                	push   $0x2
+  54:	e8 d7 03 00 00       	call   430 <printf>
+  59:	83 c4 10             	add    $0x10,%esp
+  5c:	eb e4                	jmp    42 <main+0x42>
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  65:	31 c0                	xor    %eax,%eax
+{
+  67:	89 e5                	mov    %esp,%ebp
+  69:	53                   	push   %ebx
+  6a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	89 c8                	mov    %ecx,%eax
+  80:	5b                   	pop    %ebx
+  81:	5d                   	pop    %ebp
+  82:	c3                   	ret    
+  83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	f3 0f 1e fb          	endbr32 
+  94:	55                   	push   %ebp
+  95:	89 e5                	mov    %esp,%ebp
+  97:	53                   	push   %ebx
+  98:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  9b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  9e:	0f b6 01             	movzbl (%ecx),%eax
+  a1:	0f b6 1a             	movzbl (%edx),%ebx
+  a4:	84 c0                	test   %al,%al
+  a6:	75 19                	jne    c1 <strcmp+0x31>
+  a8:	eb 26                	jmp    d0 <strcmp+0x40>
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  b0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  b4:	83 c1 01             	add    $0x1,%ecx
+  b7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  ba:	0f b6 1a             	movzbl (%edx),%ebx
+  bd:	84 c0                	test   %al,%al
+  bf:	74 0f                	je     d0 <strcmp+0x40>
+  c1:	38 d8                	cmp    %bl,%al
+  c3:	74 eb                	je     b0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  c5:	29 d8                	sub    %ebx,%eax
+}
+  c7:	5b                   	pop    %ebx
+  c8:	5d                   	pop    %ebp
+  c9:	c3                   	ret    
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  d2:	29 d8                	sub    %ebx,%eax
+}
+  d4:	5b                   	pop    %ebx
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+
+000000e0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  e0:	f3 0f 1e fb          	endbr32 
+  e4:	55                   	push   %ebp
+  e5:	89 e5                	mov    %esp,%ebp
+  e7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ea:	80 3a 00             	cmpb   $0x0,(%edx)
+  ed:	74 21                	je     110 <strlen+0x30>
+  ef:	31 c0                	xor    %eax,%eax
+  f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f8:	83 c0 01             	add    $0x1,%eax
+  fb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  ff:	89 c1                	mov    %eax,%ecx
+ 101:	75 f5                	jne    f8 <strlen+0x18>
+    ;
+  return n;
+}
+ 103:	89 c8                	mov    %ecx,%eax
+ 105:	5d                   	pop    %ebp
+ 106:	c3                   	ret    
+ 107:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	f3 0f 1e fb          	endbr32 
+ 124:	55                   	push   %ebp
+ 125:	89 e5                	mov    %esp,%ebp
+ 127:	57                   	push   %edi
+ 128:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 12b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 131:	89 d7                	mov    %edx,%edi
+ 133:	fc                   	cld    
+ 134:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 136:	89 d0                	mov    %edx,%eax
+ 138:	5f                   	pop    %edi
+ 139:	5d                   	pop    %ebp
+ 13a:	c3                   	ret    
+ 13b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 13f:	90                   	nop
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	8b 45 08             	mov    0x8(%ebp),%eax
+ 14a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14e:	0f b6 10             	movzbl (%eax),%edx
+ 151:	84 d2                	test   %dl,%dl
+ 153:	75 16                	jne    16b <strchr+0x2b>
+ 155:	eb 21                	jmp    178 <strchr+0x38>
+ 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15e:	66 90                	xchg   %ax,%ax
+ 160:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 164:	83 c0 01             	add    $0x1,%eax
+ 167:	84 d2                	test   %dl,%dl
+ 169:	74 0d                	je     178 <strchr+0x38>
+    if(*s == c)
+ 16b:	38 d1                	cmp    %dl,%cl
+ 16d:	75 f1                	jne    160 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 16f:	5d                   	pop    %ebp
+ 170:	c3                   	ret    
+ 171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 178:	31 c0                	xor    %eax,%eax
+}
+ 17a:	5d                   	pop    %ebp
+ 17b:	c3                   	ret    
+ 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	f3 0f 1e fb          	endbr32 
+ 184:	55                   	push   %ebp
+ 185:	89 e5                	mov    %esp,%ebp
+ 187:	57                   	push   %edi
+ 188:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 189:	31 f6                	xor    %esi,%esi
+{
+ 18b:	53                   	push   %ebx
+ 18c:	89 f3                	mov    %esi,%ebx
+ 18e:	83 ec 1c             	sub    $0x1c,%esp
+ 191:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 194:	eb 33                	jmp    1c9 <gets+0x49>
+ 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1a6:	6a 01                	push   $0x1
+ 1a8:	50                   	push   %eax
+ 1a9:	6a 00                	push   $0x0
+ 1ab:	e8 2b 01 00 00       	call   2db <read>
+    if(cc < 1)
+ 1b0:	83 c4 10             	add    $0x10,%esp
+ 1b3:	85 c0                	test   %eax,%eax
+ 1b5:	7e 1c                	jle    1d3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1b7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1bb:	83 c7 01             	add    $0x1,%edi
+ 1be:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1c1:	3c 0a                	cmp    $0xa,%al
+ 1c3:	74 23                	je     1e8 <gets+0x68>
+ 1c5:	3c 0d                	cmp    $0xd,%al
+ 1c7:	74 1f                	je     1e8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1c9:	83 c3 01             	add    $0x1,%ebx
+ 1cc:	89 fe                	mov    %edi,%esi
+ 1ce:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1d1:	7c cd                	jl     1a0 <gets+0x20>
+ 1d3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1d5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1d8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1de:	5b                   	pop    %ebx
+ 1df:	5e                   	pop    %esi
+ 1e0:	5f                   	pop    %edi
+ 1e1:	5d                   	pop    %ebp
+ 1e2:	c3                   	ret    
+ 1e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e7:	90                   	nop
+ 1e8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1eb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1ee:	01 de                	add    %ebx,%esi
+ 1f0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1f2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1f8:	5b                   	pop    %ebx
+ 1f9:	5e                   	pop    %esi
+ 1fa:	5f                   	pop    %edi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	56                   	push   %esi
+ 208:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	6a 00                	push   $0x0
+ 20e:	ff 75 08             	pushl  0x8(%ebp)
+ 211:	e8 ed 00 00 00       	call   303 <open>
+  if(fd < 0)
+ 216:	83 c4 10             	add    $0x10,%esp
+ 219:	85 c0                	test   %eax,%eax
+ 21b:	78 2b                	js     248 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 21d:	83 ec 08             	sub    $0x8,%esp
+ 220:	ff 75 0c             	pushl  0xc(%ebp)
+ 223:	89 c3                	mov    %eax,%ebx
+ 225:	50                   	push   %eax
+ 226:	e8 f0 00 00 00       	call   31b <fstat>
+  close(fd);
+ 22b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 230:	e8 b6 00 00 00       	call   2eb <close>
+  return r;
+ 235:	83 c4 10             	add    $0x10,%esp
+}
+ 238:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 23b:	89 f0                	mov    %esi,%eax
+ 23d:	5b                   	pop    %ebx
+ 23e:	5e                   	pop    %esi
+ 23f:	5d                   	pop    %ebp
+ 240:	c3                   	ret    
+ 241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 248:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 24d:	eb e9                	jmp    238 <stat+0x38>
+ 24f:	90                   	nop
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	53                   	push   %ebx
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 25b:	0f be 02             	movsbl (%edx),%eax
+ 25e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 261:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 264:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 269:	77 1a                	ja     285 <atoi+0x35>
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 270:	83 c2 01             	add    $0x1,%edx
+ 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 02             	movsbl (%edx),%eax
+ 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	89 c8                	mov    %ecx,%eax
+ 287:	5b                   	pop    %ebx
+ 288:	5d                   	pop    %ebp
+ 289:	c3                   	ret    
+ 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	f3 0f 1e fb          	endbr32 
+ 294:	55                   	push   %ebp
+ 295:	89 e5                	mov    %esp,%ebp
+ 297:	57                   	push   %edi
+ 298:	8b 45 10             	mov    0x10(%ebp),%eax
+ 29b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 29e:	56                   	push   %esi
+ 29f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2a2:	85 c0                	test   %eax,%eax
+ 2a4:	7e 0f                	jle    2b5 <memmove+0x25>
+ 2a6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2a8:	89 d7                	mov    %edx,%edi
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 f8                	cmp    %edi,%eax
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	89 d0                	mov    %edx,%eax
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+
+000002bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <exit>:
+SYSCALL(exit)
+ 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <wait>:
+SYSCALL(wait)
+ 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <pipe>:
+SYSCALL(pipe)
+ 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <read>:
+SYSCALL(read)
+ 2db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <write>:
+SYSCALL(write)
+ 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <close>:
+SYSCALL(close)
+ 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <kill>:
+SYSCALL(kill)
+ 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <exec>:
+SYSCALL(exec)
+ 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <open>:
+SYSCALL(open)
+ 303:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <mknod>:
+SYSCALL(mknod)
+ 30b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <unlink>:
+SYSCALL(unlink)
+ 313:	b8 12 00 00 00       	mov    $0x12,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <fstat>:
+SYSCALL(fstat)
+ 31b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <link>:
+SYSCALL(link)
+ 323:	b8 13 00 00 00       	mov    $0x13,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mkdir>:
+SYSCALL(mkdir)
+ 32b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <chdir>:
+SYSCALL(chdir)
+ 333:	b8 09 00 00 00       	mov    $0x9,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <dup>:
+SYSCALL(dup)
+ 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getpid>:
+SYSCALL(getpid)
+ 343:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <sbrk>:
+SYSCALL(sbrk)
+ 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <sleep>:
+SYSCALL(sleep)
+ 353:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <uptime>:
+SYSCALL(uptime)
+ 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <draw>:
+SYSCALL(draw)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <history>:
+ 36b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 c8 07 00 00 	movzbl 0x7c8(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 de fe ff ff       	call   2e3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	f3 0f 1e fb          	endbr32 
+ 434:	55                   	push   %ebp
+ 435:	89 e5                	mov    %esp,%ebp
+ 437:	57                   	push   %edi
+ 438:	56                   	push   %esi
+ 439:	53                   	push   %ebx
+ 43a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 43d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 440:	0f b6 1e             	movzbl (%esi),%ebx
+ 443:	84 db                	test   %bl,%bl
+ 445:	0f 84 b4 00 00 00    	je     4ff <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 44b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 44e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 451:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 454:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 456:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 459:	eb 33                	jmp    48e <printf+0x5e>
+ 45b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+ 460:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 17                	je     484 <printf+0x54>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	ff 75 08             	pushl  0x8(%ebp)
+ 479:	e8 65 fe ff ff       	call   2e3 <write>
+ 47e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 481:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 484:	0f b6 1e             	movzbl (%esi),%ebx
+ 487:	83 c6 01             	add    $0x1,%esi
+ 48a:	84 db                	test   %bl,%bl
+ 48c:	74 71                	je     4ff <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 48e:	0f be cb             	movsbl %bl,%ecx
+ 491:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 494:	85 d2                	test   %edx,%edx
+ 496:	74 c8                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 498:	83 fa 25             	cmp    $0x25,%edx
+ 49b:	75 e7                	jne    484 <printf+0x54>
+      if(c == 'd'){
+ 49d:	83 f8 64             	cmp    $0x64,%eax
+ 4a0:	0f 84 9a 00 00 00    	je     540 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4a6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4ac:	83 f9 70             	cmp    $0x70,%ecx
+ 4af:	74 5f                	je     510 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4b1:	83 f8 73             	cmp    $0x73,%eax
+ 4b4:	0f 84 d6 00 00 00    	je     590 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4ba:	83 f8 63             	cmp    $0x63,%eax
+ 4bd:	0f 84 8d 00 00 00    	je     550 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4c3:	83 f8 25             	cmp    $0x25,%eax
+ 4c6:	0f 84 b4 00 00 00    	je     580 <printf+0x150>
+  write(fd, &c, 1);
+ 4cc:	83 ec 04             	sub    $0x4,%esp
+ 4cf:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4d3:	6a 01                	push   $0x1
+ 4d5:	57                   	push   %edi
+ 4d6:	ff 75 08             	pushl  0x8(%ebp)
+ 4d9:	e8 05 fe ff ff       	call   2e3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4de:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4e1:	83 c4 0c             	add    $0xc,%esp
+ 4e4:	6a 01                	push   $0x1
+ 4e6:	83 c6 01             	add    $0x1,%esi
+ 4e9:	57                   	push   %edi
+ 4ea:	ff 75 08             	pushl  0x8(%ebp)
+ 4ed:	e8 f1 fd ff ff       	call   2e3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4f2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4f6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4f9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4fb:	84 db                	test   %bl,%bl
+ 4fd:	75 8f                	jne    48e <printf+0x5e>
+    }
+  }
+}
+ 4ff:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 502:	5b                   	pop    %ebx
+ 503:	5e                   	pop    %esi
+ 504:	5f                   	pop    %edi
+ 505:	5d                   	pop    %ebp
+ 506:	c3                   	ret    
+ 507:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 51d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 520:	8b 13                	mov    (%ebx),%edx
+ 522:	e8 59 fe ff ff       	call   380 <printint>
+        ap++;
+ 527:	89 d8                	mov    %ebx,%eax
+ 529:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 52e:	83 c0 04             	add    $0x4,%eax
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	e9 4b ff ff ff       	jmp    484 <printf+0x54>
+ 539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	eb ce                	jmp    51a <printf+0xea>
+ 54c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 550:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 553:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 556:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 558:	6a 01                	push   $0x1
+        ap++;
+ 55a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 55d:	57                   	push   %edi
+ 55e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 561:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 564:	e8 7a fd ff ff       	call   2e3 <write>
+        ap++;
+ 569:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 56c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56f:	31 d2                	xor    %edx,%edx
+ 571:	e9 0e ff ff ff       	jmp    484 <printf+0x54>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 580:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+ 586:	e9 59 ff ff ff       	jmp    4e4 <printf+0xb4>
+ 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+        s = (char*)*ap;
+ 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 593:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 595:	83 c0 04             	add    $0x4,%eax
+ 598:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 59b:	85 db                	test   %ebx,%ebx
+ 59d:	74 17                	je     5b6 <printf+0x186>
+        while(*s != 0){
+ 59f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5a2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5a4:	84 c0                	test   %al,%al
+ 5a6:	0f 84 d8 fe ff ff    	je     484 <printf+0x54>
+ 5ac:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5af:	89 de                	mov    %ebx,%esi
+ 5b1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5b4:	eb 1a                	jmp    5d0 <printf+0x1a0>
+          s = "(null)";
+ 5b6:	bb bf 07 00 00       	mov    $0x7bf,%ebx
+        while(*s != 0){
+ 5bb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5be:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c3:	89 de                	mov    %ebx,%esi
+ 5c5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5cf:	90                   	nop
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5d3:	83 c6 01             	add    $0x1,%esi
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	53                   	push   %ebx
+ 5dd:	e8 01 fd ff ff       	call   2e3 <write>
+        while(*s != 0){
+ 5e2:	0f b6 06             	movzbl (%esi),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x1a0>
+ 5ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5ef:	31 d2                	xor    %edx,%edx
+ 5f1:	e9 8e fe ff ff       	jmp    484 <printf+0x54>
+ 5f6:	66 90                	xchg   %ax,%ax
+ 5f8:	66 90                	xchg   %ax,%ax
+ 5fa:	66 90                	xchg   %ax,%ax
+ 5fc:	66 90                	xchg   %ax,%ax
+ 5fe:	66 90                	xchg   %ax,%ax
+
+00000600 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 600:	f3 0f 1e fb          	endbr32 
+ 604:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 605:	a1 74 0a 00 00       	mov    0xa74,%eax
+{
+ 60a:	89 e5                	mov    %esp,%ebp
+ 60c:	57                   	push   %edi
+ 60d:	56                   	push   %esi
+ 60e:	53                   	push   %ebx
+ 60f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 612:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 614:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 617:	39 c8                	cmp    %ecx,%eax
+ 619:	73 15                	jae    630 <free+0x30>
+ 61b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 61f:	90                   	nop
+ 620:	39 d1                	cmp    %edx,%ecx
+ 622:	72 14                	jb     638 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 624:	39 d0                	cmp    %edx,%eax
+ 626:	73 10                	jae    638 <free+0x38>
+{
+ 628:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 62a:	8b 10                	mov    (%eax),%edx
+ 62c:	39 c8                	cmp    %ecx,%eax
+ 62e:	72 f0                	jb     620 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 d0                	cmp    %edx,%eax
+ 632:	72 f4                	jb     628 <free+0x28>
+ 634:	39 d1                	cmp    %edx,%ecx
+ 636:	73 f0                	jae    628 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 fa                	cmp    %edi,%edx
+ 640:	74 1e                	je     660 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 642:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 645:	8b 50 04             	mov    0x4(%eax),%edx
+ 648:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 64b:	39 f1                	cmp    %esi,%ecx
+ 64d:	74 28                	je     677 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 64f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 651:	5b                   	pop    %ebx
+  freep = p;
+ 652:	a3 74 0a 00 00       	mov    %eax,0xa74
+}
+ 657:	5e                   	pop    %esi
+ 658:	5f                   	pop    %edi
+ 659:	5d                   	pop    %ebp
+ 65a:	c3                   	ret    
+ 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 65f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 660:	03 72 04             	add    0x4(%edx),%esi
+ 663:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 666:	8b 10                	mov    (%eax),%edx
+ 668:	8b 12                	mov    (%edx),%edx
+ 66a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 66d:	8b 50 04             	mov    0x4(%eax),%edx
+ 670:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 673:	39 f1                	cmp    %esi,%ecx
+ 675:	75 d8                	jne    64f <free+0x4f>
+    p->s.size += bp->s.size;
+ 677:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 67a:	a3 74 0a 00 00       	mov    %eax,0xa74
+    p->s.size += bp->s.size;
+ 67f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 682:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 685:	89 10                	mov    %edx,(%eax)
+}
+ 687:	5b                   	pop    %ebx
+ 688:	5e                   	pop    %esi
+ 689:	5f                   	pop    %edi
+ 68a:	5d                   	pop    %ebp
+ 68b:	c3                   	ret    
+ 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000690 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 690:	f3 0f 1e fb          	endbr32 
+ 694:	55                   	push   %ebp
+ 695:	89 e5                	mov    %esp,%ebp
+ 697:	57                   	push   %edi
+ 698:	56                   	push   %esi
+ 699:	53                   	push   %ebx
+ 69a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 69d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6a0:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6a9:	c1 ee 03             	shr    $0x3,%esi
+ 6ac:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6af:	85 ff                	test   %edi,%edi
+ 6b1:	0f 84 a9 00 00 00    	je     760 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6b9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bc:	39 f1                	cmp    %esi,%ecx
+ 6be:	73 6d                	jae    72d <malloc+0x9d>
+ 6c0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6c6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6cb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ce:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6d5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6d8:	eb 17                	jmp    6f1 <malloc+0x61>
+ 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6e2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6e5:	39 f1                	cmp    %esi,%ecx
+ 6e7:	73 4f                	jae    738 <malloc+0xa8>
+ 6e9:	8b 3d 74 0a 00 00    	mov    0xa74,%edi
+ 6ef:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	39 c7                	cmp    %eax,%edi
+ 6f3:	75 eb                	jne    6e0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6f5:	83 ec 0c             	sub    $0xc,%esp
+ 6f8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6fb:	e8 4b fc ff ff       	call   34b <sbrk>
+  if(p == (char*)-1)
+ 700:	83 c4 10             	add    $0x10,%esp
+ 703:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 706:	74 1b                	je     723 <malloc+0x93>
+  hp->s.size = nu;
+ 708:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 70b:	83 ec 0c             	sub    $0xc,%esp
+ 70e:	83 c0 08             	add    $0x8,%eax
+ 711:	50                   	push   %eax
+ 712:	e8 e9 fe ff ff       	call   600 <free>
+  return freep;
+ 717:	a1 74 0a 00 00       	mov    0xa74,%eax
+      if((p = morecore(nunits)) == 0)
+ 71c:	83 c4 10             	add    $0x10,%esp
+ 71f:	85 c0                	test   %eax,%eax
+ 721:	75 bd                	jne    6e0 <malloc+0x50>
+        return 0;
+  }
+}
+ 723:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 726:	31 c0                	xor    %eax,%eax
+}
+ 728:	5b                   	pop    %ebx
+ 729:	5e                   	pop    %esi
+ 72a:	5f                   	pop    %edi
+ 72b:	5d                   	pop    %ebp
+ 72c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 72d:	89 c2                	mov    %eax,%edx
+ 72f:	89 f8                	mov    %edi,%eax
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 738:	39 ce                	cmp    %ecx,%esi
+ 73a:	74 54                	je     790 <malloc+0x100>
+        p->s.size -= nunits;
+ 73c:	29 f1                	sub    %esi,%ecx
+ 73e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 741:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 744:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 747:	a3 74 0a 00 00       	mov    %eax,0xa74
+}
+ 74c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 74f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 752:	5b                   	pop    %ebx
+ 753:	5e                   	pop    %esi
+ 754:	5f                   	pop    %edi
+ 755:	5d                   	pop    %ebp
+ 756:	c3                   	ret    
+ 757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 75e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 74 0a 00 00 78 	movl   $0xa78,0xa74
+ 767:	0a 00 00 
+    base.s.size = 0;
+ 76a:	bf 78 0a 00 00       	mov    $0xa78,%edi
+    base.s.ptr = freep = prevp = &base;
+ 76f:	c7 05 78 0a 00 00 78 	movl   $0xa78,0xa78
+ 776:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 779:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 77b:	c7 05 7c 0a 00 00 00 	movl   $0x0,0xa7c
+ 782:	00 00 00 
+    if(p->s.size >= nunits){
+ 785:	e9 36 ff ff ff       	jmp    6c0 <malloc+0x30>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 0a                	mov    (%edx),%ecx
+ 792:	89 08                	mov    %ecx,(%eax)
+ 794:	eb b1                	jmp    747 <malloc+0xb7>
diff -ruN xv6-public/ln.d xv6-public_task_1/ln.d
--- xv6-public/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ln.d	2021-09-15 20:34:57.932372000 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/ln.o and xv6-public_task_1/ln.o differ
diff -ruN xv6-public/ln.sym xv6-public_task_1/ln.sym
--- xv6-public/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ln.sym	2021-09-15 20:34:57.960372000 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+00000798 .rodata
+000007dc .eh_frame
+00000a74 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007c8 digits.1091
+00000000 umalloc.c
+00000a74 freep
+00000a78 base
+00000060 strcpy
+00000430 printf
+00000290 memmove
+0000030b mknod
+00000180 gets
+00000343 getpid
+00000690 malloc
+00000353 sleep
+000002d3 pipe
+000002e3 write
+0000036b history
+0000031b fstat
+000002f3 kill
+00000333 chdir
+000002fb exec
+000002cb wait
+000002db read
+00000313 unlink
+000002bb fork
+0000034b sbrk
+0000035b uptime
+00000a74 __bss_start
+00000120 memset
+00000000 main
+00000090 strcmp
+0000033b dup
+00000200 stat
+00000a74 _edata
+00000a80 _end
+00000323 link
+000002c3 exit
+00000250 atoi
+00000363 draw
+000000e0 strlen
+00000303 open
+00000140 strchr
+0000032b mkdir
+000002eb close
+00000600 free
diff -ruN xv6-public/log.d xv6-public_task_1/log.d
--- xv6-public/log.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/log.d	2021-09-15 20:34:54.436378000 +0530
@@ -0,0 +1,2 @@
+log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/log.o and xv6-public_task_1/log.o differ
Binary files xv6-public/_ls and xv6-public_task_1/_ls differ
diff -ruN xv6-public/ls.asm xv6-public_task_1/ls.asm
--- xv6-public/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ls.asm	2021-09-15 20:34:58.060372000 +0530
@@ -0,0 +1,1482 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	56                   	push   %esi
+  12:	53                   	push   %ebx
+  13:	51                   	push   %ecx
+  14:	83 ec 0c             	sub    $0xc,%esp
+  17:	8b 01                	mov    (%ecx),%eax
+  19:	8b 51 04             	mov    0x4(%ecx),%edx
+  int i;
+
+  if(argc < 2){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 28                	jle    49 <main+0x49>
+  21:	8d 5a 04             	lea    0x4(%edx),%ebx
+  24:	8d 34 82             	lea    (%edx,%eax,4),%esi
+  27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2e:	66 90                	xchg   %ax,%ax
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	83 c3 04             	add    $0x4,%ebx
+  38:	e8 c3 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  3d:	83 c4 10             	add    $0x10,%esp
+  40:	39 f3                	cmp    %esi,%ebx
+  42:	75 ec                	jne    30 <main+0x30>
+  exit();
+  44:	e8 5a 05 00 00       	call   5a3 <exit>
+    ls(".");
+  49:	83 ec 0c             	sub    $0xc,%esp
+  4c:	68 c0 0a 00 00       	push   $0xac0
+  51:	e8 aa 00 00 00       	call   100 <ls>
+    exit();
+  56:	e8 48 05 00 00       	call   5a3 <exit>
+  5b:	66 90                	xchg   %ax,%ax
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <fmtname>:
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	56                   	push   %esi
+  68:	53                   	push   %ebx
+  69:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  6c:	83 ec 0c             	sub    $0xc,%esp
+  6f:	56                   	push   %esi
+  70:	e8 4b 03 00 00       	call   3c0 <strlen>
+  75:	83 c4 10             	add    $0x10,%esp
+  78:	01 f0                	add    %esi,%eax
+  7a:	89 c3                	mov    %eax,%ebx
+  7c:	73 0b                	jae    89 <fmtname+0x29>
+  7e:	eb 0e                	jmp    8e <fmtname+0x2e>
+  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
+  83:	39 c6                	cmp    %eax,%esi
+  85:	77 0a                	ja     91 <fmtname+0x31>
+  87:	89 c3                	mov    %eax,%ebx
+  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+  8c:	75 f2                	jne    80 <fmtname+0x20>
+  8e:	83 c3 01             	add    $0x1,%ebx
+  if(strlen(p) >= DIRSIZ)
+  91:	83 ec 0c             	sub    $0xc,%esp
+  94:	53                   	push   %ebx
+  95:	e8 26 03 00 00       	call   3c0 <strlen>
+  9a:	83 c4 10             	add    $0x10,%esp
+  9d:	83 f8 0d             	cmp    $0xd,%eax
+  a0:	77 4a                	ja     ec <fmtname+0x8c>
+  memmove(buf, p, strlen(p));
+  a2:	83 ec 0c             	sub    $0xc,%esp
+  a5:	53                   	push   %ebx
+  a6:	e8 15 03 00 00       	call   3c0 <strlen>
+  ab:	83 c4 0c             	add    $0xc,%esp
+  ae:	50                   	push   %eax
+  af:	53                   	push   %ebx
+  b0:	68 f4 0d 00 00       	push   $0xdf4
+  b5:	e8 b6 04 00 00       	call   570 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ba:	89 1c 24             	mov    %ebx,(%esp)
+  bd:	e8 fe 02 00 00       	call   3c0 <strlen>
+  c2:	89 1c 24             	mov    %ebx,(%esp)
+  return buf;
+  c5:	bb f4 0d 00 00       	mov    $0xdf4,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	89 c6                	mov    %eax,%esi
+  cc:	e8 ef 02 00 00       	call   3c0 <strlen>
+  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d6:	83 c4 0c             	add    $0xc,%esp
+  d9:	29 f2                	sub    %esi,%edx
+  db:	05 f4 0d 00 00       	add    $0xdf4,%eax
+  e0:	52                   	push   %edx
+  e1:	6a 20                	push   $0x20
+  e3:	50                   	push   %eax
+  e4:	e8 17 03 00 00       	call   400 <memset>
+  return buf;
+  e9:	83 c4 10             	add    $0x10,%esp
+}
+  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ef:	89 d8                	mov    %ebx,%eax
+  f1:	5b                   	pop    %ebx
+  f2:	5e                   	pop    %esi
+  f3:	5d                   	pop    %ebp
+  f4:	c3                   	ret    
+  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <ls>:
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	57                   	push   %edi
+ 108:	56                   	push   %esi
+ 109:	53                   	push   %ebx
+ 10a:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 110:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 113:	6a 00                	push   $0x0
+ 115:	57                   	push   %edi
+ 116:	e8 c8 04 00 00       	call   5e3 <open>
+ 11b:	83 c4 10             	add    $0x10,%esp
+ 11e:	85 c0                	test   %eax,%eax
+ 120:	0f 88 9a 01 00 00    	js     2c0 <ls+0x1c0>
+  if(fstat(fd, &st) < 0){
+ 126:	83 ec 08             	sub    $0x8,%esp
+ 129:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 12f:	89 c3                	mov    %eax,%ebx
+ 131:	56                   	push   %esi
+ 132:	50                   	push   %eax
+ 133:	e8 c3 04 00 00       	call   5fb <fstat>
+ 138:	83 c4 10             	add    $0x10,%esp
+ 13b:	85 c0                	test   %eax,%eax
+ 13d:	0f 88 bd 01 00 00    	js     300 <ls+0x200>
+  switch(st.type){
+ 143:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 14a:	66 83 f8 01          	cmp    $0x1,%ax
+ 14e:	74 60                	je     1b0 <ls+0xb0>
+ 150:	66 83 f8 02          	cmp    $0x2,%ax
+ 154:	74 1a                	je     170 <ls+0x70>
+  close(fd);
+ 156:	83 ec 0c             	sub    $0xc,%esp
+ 159:	53                   	push   %ebx
+ 15a:	e8 6c 04 00 00       	call   5cb <close>
+ 15f:	83 c4 10             	add    $0x10,%esp
+}
+ 162:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 165:	5b                   	pop    %ebx
+ 166:	5e                   	pop    %esi
+ 167:	5f                   	pop    %edi
+ 168:	5d                   	pop    %ebp
+ 169:	c3                   	ret    
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 170:	83 ec 0c             	sub    $0xc,%esp
+ 173:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 179:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 17f:	57                   	push   %edi
+ 180:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 186:	e8 d5 fe ff ff       	call   60 <fmtname>
+ 18b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 191:	59                   	pop    %ecx
+ 192:	5f                   	pop    %edi
+ 193:	52                   	push   %edx
+ 194:	56                   	push   %esi
+ 195:	6a 02                	push   $0x2
+ 197:	50                   	push   %eax
+ 198:	68 a0 0a 00 00       	push   $0xaa0
+ 19d:	6a 01                	push   $0x1
+ 19f:	e8 6c 05 00 00       	call   710 <printf>
+    break;
+ 1a4:	83 c4 20             	add    $0x20,%esp
+ 1a7:	eb ad                	jmp    156 <ls+0x56>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1b0:	83 ec 0c             	sub    $0xc,%esp
+ 1b3:	57                   	push   %edi
+ 1b4:	e8 07 02 00 00       	call   3c0 <strlen>
+ 1b9:	83 c4 10             	add    $0x10,%esp
+ 1bc:	83 c0 10             	add    $0x10,%eax
+ 1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1c4:	0f 87 16 01 00 00    	ja     2e0 <ls+0x1e0>
+    strcpy(buf, path);
+ 1ca:	83 ec 08             	sub    $0x8,%esp
+ 1cd:	57                   	push   %edi
+ 1ce:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 1d4:	57                   	push   %edi
+ 1d5:	e8 66 01 00 00       	call   340 <strcpy>
+    p = buf+strlen(buf);
+ 1da:	89 3c 24             	mov    %edi,(%esp)
+ 1dd:	e8 de 01 00 00       	call   3c0 <strlen>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1e2:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1e5:	01 f8                	add    %edi,%eax
+    *p++ = '/';
+ 1e7:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 1ea:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 1f0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 1f6:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 209:	6a 10                	push   $0x10
+ 20b:	50                   	push   %eax
+ 20c:	53                   	push   %ebx
+ 20d:	e8 a9 03 00 00       	call   5bb <read>
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	83 f8 10             	cmp    $0x10,%eax
+ 218:	0f 85 38 ff ff ff    	jne    156 <ls+0x56>
+      if(de.inum == 0)
+ 21e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 225:	00 
+ 226:	74 d8                	je     200 <ls+0x100>
+      memmove(p, de.name, DIRSIZ);
+ 228:	83 ec 04             	sub    $0x4,%esp
+ 22b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 231:	6a 0e                	push   $0xe
+ 233:	50                   	push   %eax
+ 234:	ff b5 a4 fd ff ff    	pushl  -0x25c(%ebp)
+ 23a:	e8 31 03 00 00       	call   570 <memmove>
+      p[DIRSIZ] = 0;
+ 23f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 245:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 249:	58                   	pop    %eax
+ 24a:	5a                   	pop    %edx
+ 24b:	56                   	push   %esi
+ 24c:	57                   	push   %edi
+ 24d:	e8 8e 02 00 00       	call   4e0 <stat>
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	0f 88 cb 00 00 00    	js     328 <ls+0x228>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 25d:	83 ec 0c             	sub    $0xc,%esp
+ 260:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 266:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 26c:	57                   	push   %edi
+ 26d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 274:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 27a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 280:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 286:	e8 d5 fd ff ff       	call   60 <fmtname>
+ 28b:	5a                   	pop    %edx
+ 28c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 292:	59                   	pop    %ecx
+ 293:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 299:	51                   	push   %ecx
+ 29a:	52                   	push   %edx
+ 29b:	ff b5 b4 fd ff ff    	pushl  -0x24c(%ebp)
+ 2a1:	50                   	push   %eax
+ 2a2:	68 a0 0a 00 00       	push   $0xaa0
+ 2a7:	6a 01                	push   $0x1
+ 2a9:	e8 62 04 00 00       	call   710 <printf>
+ 2ae:	83 c4 20             	add    $0x20,%esp
+ 2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot open %s\n", path);
+ 2c0:	83 ec 04             	sub    $0x4,%esp
+ 2c3:	57                   	push   %edi
+ 2c4:	68 78 0a 00 00       	push   $0xa78
+ 2c9:	6a 02                	push   $0x2
+ 2cb:	e8 40 04 00 00       	call   710 <printf>
+    return;
+ 2d0:	83 c4 10             	add    $0x10,%esp
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+      printf(1, "ls: path too long\n");
+ 2e0:	83 ec 08             	sub    $0x8,%esp
+ 2e3:	68 ad 0a 00 00       	push   $0xaad
+ 2e8:	6a 01                	push   $0x1
+ 2ea:	e8 21 04 00 00       	call   710 <printf>
+      break;
+ 2ef:	83 c4 10             	add    $0x10,%esp
+ 2f2:	e9 5f fe ff ff       	jmp    156 <ls+0x56>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+    printf(2, "ls: cannot stat %s\n", path);
+ 300:	83 ec 04             	sub    $0x4,%esp
+ 303:	57                   	push   %edi
+ 304:	68 8c 0a 00 00       	push   $0xa8c
+ 309:	6a 02                	push   $0x2
+ 30b:	e8 00 04 00 00       	call   710 <printf>
+    close(fd);
+ 310:	89 1c 24             	mov    %ebx,(%esp)
+ 313:	e8 b3 02 00 00       	call   5cb <close>
+    return;
+ 318:	83 c4 10             	add    $0x10,%esp
+}
+ 31b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 31e:	5b                   	pop    %ebx
+ 31f:	5e                   	pop    %esi
+ 320:	5f                   	pop    %edi
+ 321:	5d                   	pop    %ebp
+ 322:	c3                   	ret    
+ 323:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 327:	90                   	nop
+        printf(1, "ls: cannot stat %s\n", buf);
+ 328:	83 ec 04             	sub    $0x4,%esp
+ 32b:	57                   	push   %edi
+ 32c:	68 8c 0a 00 00       	push   $0xa8c
+ 331:	6a 01                	push   $0x1
+ 333:	e8 d8 03 00 00       	call   710 <printf>
+        continue;
+ 338:	83 c4 10             	add    $0x10,%esp
+ 33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	f3 0f 1e fb          	endbr32 
+ 344:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 345:	31 c0                	xor    %eax,%eax
+{
+ 347:	89 e5                	mov    %esp,%ebp
+ 349:	53                   	push   %ebx
+ 34a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 34d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	89 c8                	mov    %ecx,%eax
+ 360:	5b                   	pop    %ebx
+ 361:	5d                   	pop    %ebp
+ 362:	c3                   	ret    
+ 363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	53                   	push   %ebx
+ 378:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 37b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 37e:	0f b6 01             	movzbl (%ecx),%eax
+ 381:	0f b6 1a             	movzbl (%edx),%ebx
+ 384:	84 c0                	test   %al,%al
+ 386:	75 19                	jne    3a1 <strcmp+0x31>
+ 388:	eb 26                	jmp    3b0 <strcmp+0x40>
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 390:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 394:	83 c1 01             	add    $0x1,%ecx
+ 397:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 39a:	0f b6 1a             	movzbl (%edx),%ebx
+ 39d:	84 c0                	test   %al,%al
+ 39f:	74 0f                	je     3b0 <strcmp+0x40>
+ 3a1:	38 d8                	cmp    %bl,%al
+ 3a3:	74 eb                	je     390 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 3a5:	29 d8                	sub    %ebx,%eax
+}
+ 3a7:	5b                   	pop    %ebx
+ 3a8:	5d                   	pop    %ebp
+ 3a9:	c3                   	ret    
+ 3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 3b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 3b2:	29 d8                	sub    %ebx,%eax
+}
+ 3b4:	5b                   	pop    %ebx
+ 3b5:	5d                   	pop    %ebp
+ 3b6:	c3                   	ret    
+ 3b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3be:	66 90                	xchg   %ax,%ax
+
+000003c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3cd:	74 21                	je     3f0 <strlen+0x30>
+ 3cf:	31 c0                	xor    %eax,%eax
+ 3d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3d8:	83 c0 01             	add    $0x1,%eax
+ 3db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3df:	89 c1                	mov    %eax,%ecx
+ 3e1:	75 f5                	jne    3d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 3e3:	89 c8                	mov    %ecx,%eax
+ 3e5:	5d                   	pop    %ebp
+ 3e6:	c3                   	ret    
+ 3e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 40b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 411:	89 d7                	mov    %edx,%edi
+ 413:	fc                   	cld    
+ 414:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 416:	89 d0                	mov    %edx,%eax
+ 418:	5f                   	pop    %edi
+ 419:	5d                   	pop    %ebp
+ 41a:	c3                   	ret    
+ 41b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 41f:	90                   	nop
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	f3 0f 1e fb          	endbr32 
+ 424:	55                   	push   %ebp
+ 425:	89 e5                	mov    %esp,%ebp
+ 427:	8b 45 08             	mov    0x8(%ebp),%eax
+ 42a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42e:	0f b6 10             	movzbl (%eax),%edx
+ 431:	84 d2                	test   %dl,%dl
+ 433:	75 16                	jne    44b <strchr+0x2b>
+ 435:	eb 21                	jmp    458 <strchr+0x38>
+ 437:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43e:	66 90                	xchg   %ax,%ax
+ 440:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 444:	83 c0 01             	add    $0x1,%eax
+ 447:	84 d2                	test   %dl,%dl
+ 449:	74 0d                	je     458 <strchr+0x38>
+    if(*s == c)
+ 44b:	38 d1                	cmp    %dl,%cl
+ 44d:	75 f1                	jne    440 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 44f:	5d                   	pop    %ebp
+ 450:	c3                   	ret    
+ 451:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 458:	31 c0                	xor    %eax,%eax
+}
+ 45a:	5d                   	pop    %ebp
+ 45b:	c3                   	ret    
+ 45c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	f3 0f 1e fb          	endbr32 
+ 464:	55                   	push   %ebp
+ 465:	89 e5                	mov    %esp,%ebp
+ 467:	57                   	push   %edi
+ 468:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 469:	31 f6                	xor    %esi,%esi
+{
+ 46b:	53                   	push   %ebx
+ 46c:	89 f3                	mov    %esi,%ebx
+ 46e:	83 ec 1c             	sub    $0x1c,%esp
+ 471:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 474:	eb 33                	jmp    4a9 <gets+0x49>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 480:	83 ec 04             	sub    $0x4,%esp
+ 483:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 486:	6a 01                	push   $0x1
+ 488:	50                   	push   %eax
+ 489:	6a 00                	push   $0x0
+ 48b:	e8 2b 01 00 00       	call   5bb <read>
+    if(cc < 1)
+ 490:	83 c4 10             	add    $0x10,%esp
+ 493:	85 c0                	test   %eax,%eax
+ 495:	7e 1c                	jle    4b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 497:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 49b:	83 c7 01             	add    $0x1,%edi
+ 49e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 4a1:	3c 0a                	cmp    $0xa,%al
+ 4a3:	74 23                	je     4c8 <gets+0x68>
+ 4a5:	3c 0d                	cmp    $0xd,%al
+ 4a7:	74 1f                	je     4c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 4a9:	83 c3 01             	add    $0x1,%ebx
+ 4ac:	89 fe                	mov    %edi,%esi
+ 4ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4b1:	7c cd                	jl     480 <gets+0x20>
+ 4b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 4b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 4b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4be:	5b                   	pop    %ebx
+ 4bf:	5e                   	pop    %esi
+ 4c0:	5f                   	pop    %edi
+ 4c1:	5d                   	pop    %ebp
+ 4c2:	c3                   	ret    
+ 4c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 4c7:	90                   	nop
+ 4c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 4cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4ce:	01 de                	add    %ebx,%esi
+ 4d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 4d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 4d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d8:	5b                   	pop    %ebx
+ 4d9:	5e                   	pop    %esi
+ 4da:	5f                   	pop    %edi
+ 4db:	5d                   	pop    %ebp
+ 4dc:	c3                   	ret    
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000004e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4e0:	f3 0f 1e fb          	endbr32 
+ 4e4:	55                   	push   %ebp
+ 4e5:	89 e5                	mov    %esp,%ebp
+ 4e7:	56                   	push   %esi
+ 4e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	6a 00                	push   $0x0
+ 4ee:	ff 75 08             	pushl  0x8(%ebp)
+ 4f1:	e8 ed 00 00 00       	call   5e3 <open>
+  if(fd < 0)
+ 4f6:	83 c4 10             	add    $0x10,%esp
+ 4f9:	85 c0                	test   %eax,%eax
+ 4fb:	78 2b                	js     528 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 4fd:	83 ec 08             	sub    $0x8,%esp
+ 500:	ff 75 0c             	pushl  0xc(%ebp)
+ 503:	89 c3                	mov    %eax,%ebx
+ 505:	50                   	push   %eax
+ 506:	e8 f0 00 00 00       	call   5fb <fstat>
+  close(fd);
+ 50b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 50e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 510:	e8 b6 00 00 00       	call   5cb <close>
+  return r;
+ 515:	83 c4 10             	add    $0x10,%esp
+}
+ 518:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 51b:	89 f0                	mov    %esi,%eax
+ 51d:	5b                   	pop    %ebx
+ 51e:	5e                   	pop    %esi
+ 51f:	5d                   	pop    %ebp
+ 520:	c3                   	ret    
+ 521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 528:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 52d:	eb e9                	jmp    518 <stat+0x38>
+ 52f:	90                   	nop
+
+00000530 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 530:	f3 0f 1e fb          	endbr32 
+ 534:	55                   	push   %ebp
+ 535:	89 e5                	mov    %esp,%ebp
+ 537:	53                   	push   %ebx
+ 538:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 53b:	0f be 02             	movsbl (%edx),%eax
+ 53e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 541:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 544:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 549:	77 1a                	ja     565 <atoi+0x35>
+ 54b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 550:	83 c2 01             	add    $0x1,%edx
+ 553:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 556:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 55a:	0f be 02             	movsbl (%edx),%eax
+ 55d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 560:	80 fb 09             	cmp    $0x9,%bl
+ 563:	76 eb                	jbe    550 <atoi+0x20>
+  return n;
+}
+ 565:	89 c8                	mov    %ecx,%eax
+ 567:	5b                   	pop    %ebx
+ 568:	5d                   	pop    %ebp
+ 569:	c3                   	ret    
+ 56a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000570 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 570:	f3 0f 1e fb          	endbr32 
+ 574:	55                   	push   %ebp
+ 575:	89 e5                	mov    %esp,%ebp
+ 577:	57                   	push   %edi
+ 578:	8b 45 10             	mov    0x10(%ebp),%eax
+ 57b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 57e:	56                   	push   %esi
+ 57f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 582:	85 c0                	test   %eax,%eax
+ 584:	7e 0f                	jle    595 <memmove+0x25>
+ 586:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 588:	89 d7                	mov    %edx,%edi
+ 58a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 590:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 591:	39 f8                	cmp    %edi,%eax
+ 593:	75 fb                	jne    590 <memmove+0x20>
+  return vdst;
+}
+ 595:	5e                   	pop    %esi
+ 596:	89 d0                	mov    %edx,%eax
+ 598:	5f                   	pop    %edi
+ 599:	5d                   	pop    %ebp
+ 59a:	c3                   	ret    
+
+0000059b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 59b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <exit>:
+SYSCALL(exit)
+ 5a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <wait>:
+SYSCALL(wait)
+ 5ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <pipe>:
+SYSCALL(pipe)
+ 5b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <read>:
+SYSCALL(read)
+ 5bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <write>:
+SYSCALL(write)
+ 5c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <close>:
+SYSCALL(close)
+ 5cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <kill>:
+SYSCALL(kill)
+ 5d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <exec>:
+SYSCALL(exec)
+ 5db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <open>:
+SYSCALL(open)
+ 5e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <mknod>:
+SYSCALL(mknod)
+ 5eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <unlink>:
+SYSCALL(unlink)
+ 5f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <fstat>:
+SYSCALL(fstat)
+ 5fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <link>:
+SYSCALL(link)
+ 603:	b8 13 00 00 00       	mov    $0x13,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mkdir>:
+SYSCALL(mkdir)
+ 60b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <chdir>:
+SYSCALL(chdir)
+ 613:	b8 09 00 00 00       	mov    $0x9,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <dup>:
+SYSCALL(dup)
+ 61b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <getpid>:
+SYSCALL(getpid)
+ 623:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <sbrk>:
+SYSCALL(sbrk)
+ 62b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <sleep>:
+SYSCALL(sleep)
+ 633:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <uptime>:
+SYSCALL(uptime)
+ 63b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <draw>:
+SYSCALL(draw)
+ 643:	b8 16 00 00 00       	mov    $0x16,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <history>:
+ 64b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+ 653:	66 90                	xchg   %ax,%ax
+ 655:	66 90                	xchg   %ax,%ax
+ 657:	66 90                	xchg   %ax,%ax
+ 659:	66 90                	xchg   %ax,%ax
+ 65b:	66 90                	xchg   %ax,%ax
+ 65d:	66 90                	xchg   %ax,%ax
+ 65f:	90                   	nop
+
+00000660 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 3c             	sub    $0x3c,%esp
+ 669:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 66c:	89 d1                	mov    %edx,%ecx
+{
+ 66e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 671:	85 d2                	test   %edx,%edx
+ 673:	0f 89 7f 00 00 00    	jns    6f8 <printint+0x98>
+ 679:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 67d:	74 79                	je     6f8 <printint+0x98>
+    neg = 1;
+ 67f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 686:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 688:	31 db                	xor    %ebx,%ebx
+ 68a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 690:	89 c8                	mov    %ecx,%eax
+ 692:	31 d2                	xor    %edx,%edx
+ 694:	89 cf                	mov    %ecx,%edi
+ 696:	f7 75 c4             	divl   -0x3c(%ebp)
+ 699:	0f b6 92 cc 0a 00 00 	movzbl 0xacc(%edx),%edx
+ 6a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6a3:	89 d8                	mov    %ebx,%eax
+ 6a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6b1:	76 dd                	jbe    690 <printint+0x30>
+  if(neg)
+ 6b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6b6:	85 c9                	test   %ecx,%ecx
+ 6b8:	74 0c                	je     6c6 <printint+0x66>
+    buf[i++] = '-';
+ 6ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6cd:	eb 07                	jmp    6d6 <printint+0x76>
+ 6cf:	90                   	nop
+ 6d0:	0f b6 13             	movzbl (%ebx),%edx
+ 6d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6d6:	83 ec 04             	sub    $0x4,%esp
+ 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6dc:	6a 01                	push   $0x1
+ 6de:	56                   	push   %esi
+ 6df:	57                   	push   %edi
+ 6e0:	e8 de fe ff ff       	call   5c3 <write>
+  while(--i >= 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6ff:	eb 87                	jmp    688 <printint+0x28>
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+
+00000710 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 710:	f3 0f 1e fb          	endbr32 
+ 714:	55                   	push   %ebp
+ 715:	89 e5                	mov    %esp,%ebp
+ 717:	57                   	push   %edi
+ 718:	56                   	push   %esi
+ 719:	53                   	push   %ebx
+ 71a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 71d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 720:	0f b6 1e             	movzbl (%esi),%ebx
+ 723:	84 db                	test   %bl,%bl
+ 725:	0f 84 b4 00 00 00    	je     7df <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 72b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 72e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 731:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 734:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 736:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 739:	eb 33                	jmp    76e <printf+0x5e>
+ 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+ 740:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 743:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 748:	83 f8 25             	cmp    $0x25,%eax
+ 74b:	74 17                	je     764 <printf+0x54>
+  write(fd, &c, 1);
+ 74d:	83 ec 04             	sub    $0x4,%esp
+ 750:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 753:	6a 01                	push   $0x1
+ 755:	57                   	push   %edi
+ 756:	ff 75 08             	pushl  0x8(%ebp)
+ 759:	e8 65 fe ff ff       	call   5c3 <write>
+ 75e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 761:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 764:	0f b6 1e             	movzbl (%esi),%ebx
+ 767:	83 c6 01             	add    $0x1,%esi
+ 76a:	84 db                	test   %bl,%bl
+ 76c:	74 71                	je     7df <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 76e:	0f be cb             	movsbl %bl,%ecx
+ 771:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 774:	85 d2                	test   %edx,%edx
+ 776:	74 c8                	je     740 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 778:	83 fa 25             	cmp    $0x25,%edx
+ 77b:	75 e7                	jne    764 <printf+0x54>
+      if(c == 'd'){
+ 77d:	83 f8 64             	cmp    $0x64,%eax
+ 780:	0f 84 9a 00 00 00    	je     820 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 786:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 78c:	83 f9 70             	cmp    $0x70,%ecx
+ 78f:	74 5f                	je     7f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 791:	83 f8 73             	cmp    $0x73,%eax
+ 794:	0f 84 d6 00 00 00    	je     870 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 79a:	83 f8 63             	cmp    $0x63,%eax
+ 79d:	0f 84 8d 00 00 00    	je     830 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 7a3:	83 f8 25             	cmp    $0x25,%eax
+ 7a6:	0f 84 b4 00 00 00    	je     860 <printf+0x150>
+  write(fd, &c, 1);
+ 7ac:	83 ec 04             	sub    $0x4,%esp
+ 7af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7b3:	6a 01                	push   $0x1
+ 7b5:	57                   	push   %edi
+ 7b6:	ff 75 08             	pushl  0x8(%ebp)
+ 7b9:	e8 05 fe ff ff       	call   5c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 7be:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 7c1:	83 c4 0c             	add    $0xc,%esp
+ 7c4:	6a 01                	push   $0x1
+ 7c6:	83 c6 01             	add    $0x1,%esi
+ 7c9:	57                   	push   %edi
+ 7ca:	ff 75 08             	pushl  0x8(%ebp)
+ 7cd:	e8 f1 fd ff ff       	call   5c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 7d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 7d6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 7d9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 7db:	84 db                	test   %bl,%bl
+ 7dd:	75 8f                	jne    76e <printf+0x5e>
+    }
+  }
+}
+ 7df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7e2:	5b                   	pop    %ebx
+ 7e3:	5e                   	pop    %esi
+ 7e4:	5f                   	pop    %edi
+ 7e5:	5d                   	pop    %ebp
+ 7e6:	c3                   	ret    
+ 7e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 7f0:	83 ec 0c             	sub    $0xc,%esp
+ 7f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7f8:	6a 00                	push   $0x0
+ 7fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 7fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 800:	8b 13                	mov    (%ebx),%edx
+ 802:	e8 59 fe ff ff       	call   660 <printint>
+        ap++;
+ 807:	89 d8                	mov    %ebx,%eax
+ 809:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 80c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 80e:	83 c0 04             	add    $0x4,%eax
+ 811:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 814:	e9 4b ff ff ff       	jmp    764 <printf+0x54>
+ 819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 820:	83 ec 0c             	sub    $0xc,%esp
+ 823:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 828:	6a 01                	push   $0x1
+ 82a:	eb ce                	jmp    7fa <printf+0xea>
+ 82c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 830:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 833:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 836:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 838:	6a 01                	push   $0x1
+        ap++;
+ 83a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 83d:	57                   	push   %edi
+ 83e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 841:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 844:	e8 7a fd ff ff       	call   5c3 <write>
+        ap++;
+ 849:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 84c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 84f:	31 d2                	xor    %edx,%edx
+ 851:	e9 0e ff ff ff       	jmp    764 <printf+0x54>
+ 856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 85d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 860:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 863:	83 ec 04             	sub    $0x4,%esp
+ 866:	e9 59 ff ff ff       	jmp    7c4 <printf+0xb4>
+ 86b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 86f:	90                   	nop
+        s = (char*)*ap;
+ 870:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 873:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 875:	83 c0 04             	add    $0x4,%eax
+ 878:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 87b:	85 db                	test   %ebx,%ebx
+ 87d:	74 17                	je     896 <printf+0x186>
+        while(*s != 0){
+ 87f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 882:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 884:	84 c0                	test   %al,%al
+ 886:	0f 84 d8 fe ff ff    	je     764 <printf+0x54>
+ 88c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 88f:	89 de                	mov    %ebx,%esi
+ 891:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 894:	eb 1a                	jmp    8b0 <printf+0x1a0>
+          s = "(null)";
+ 896:	bb c2 0a 00 00       	mov    $0xac2,%ebx
+        while(*s != 0){
+ 89b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 89e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8a3:	89 de                	mov    %ebx,%esi
+ 8a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8af:	90                   	nop
+  write(fd, &c, 1);
+ 8b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 8b3:	83 c6 01             	add    $0x1,%esi
+ 8b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8b9:	6a 01                	push   $0x1
+ 8bb:	57                   	push   %edi
+ 8bc:	53                   	push   %ebx
+ 8bd:	e8 01 fd ff ff       	call   5c3 <write>
+        while(*s != 0){
+ 8c2:	0f b6 06             	movzbl (%esi),%eax
+ 8c5:	83 c4 10             	add    $0x10,%esp
+ 8c8:	84 c0                	test   %al,%al
+ 8ca:	75 e4                	jne    8b0 <printf+0x1a0>
+ 8cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 8cf:	31 d2                	xor    %edx,%edx
+ 8d1:	e9 8e fe ff ff       	jmp    764 <printf+0x54>
+ 8d6:	66 90                	xchg   %ax,%ax
+ 8d8:	66 90                	xchg   %ax,%ax
+ 8da:	66 90                	xchg   %ax,%ax
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8e0:	f3 0f 1e fb          	endbr32 
+ 8e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e5:	a1 04 0e 00 00       	mov    0xe04,%eax
+{
+ 8ea:	89 e5                	mov    %esp,%ebp
+ 8ec:	57                   	push   %edi
+ 8ed:	56                   	push   %esi
+ 8ee:	53                   	push   %ebx
+ 8ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 8f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 8f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f7:	39 c8                	cmp    %ecx,%eax
+ 8f9:	73 15                	jae    910 <free+0x30>
+ 8fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8ff:	90                   	nop
+ 900:	39 d1                	cmp    %edx,%ecx
+ 902:	72 14                	jb     918 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 904:	39 d0                	cmp    %edx,%eax
+ 906:	73 10                	jae    918 <free+0x38>
+{
+ 908:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 90a:	8b 10                	mov    (%eax),%edx
+ 90c:	39 c8                	cmp    %ecx,%eax
+ 90e:	72 f0                	jb     900 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 910:	39 d0                	cmp    %edx,%eax
+ 912:	72 f4                	jb     908 <free+0x28>
+ 914:	39 d1                	cmp    %edx,%ecx
+ 916:	73 f0                	jae    908 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 918:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 91b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 91e:	39 fa                	cmp    %edi,%edx
+ 920:	74 1e                	je     940 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 922:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 925:	8b 50 04             	mov    0x4(%eax),%edx
+ 928:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 92b:	39 f1                	cmp    %esi,%ecx
+ 92d:	74 28                	je     957 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 92f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 931:	5b                   	pop    %ebx
+  freep = p;
+ 932:	a3 04 0e 00 00       	mov    %eax,0xe04
+}
+ 937:	5e                   	pop    %esi
+ 938:	5f                   	pop    %edi
+ 939:	5d                   	pop    %ebp
+ 93a:	c3                   	ret    
+ 93b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 93f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 940:	03 72 04             	add    0x4(%edx),%esi
+ 943:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 946:	8b 10                	mov    (%eax),%edx
+ 948:	8b 12                	mov    (%edx),%edx
+ 94a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 94d:	8b 50 04             	mov    0x4(%eax),%edx
+ 950:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 953:	39 f1                	cmp    %esi,%ecx
+ 955:	75 d8                	jne    92f <free+0x4f>
+    p->s.size += bp->s.size;
+ 957:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 95a:	a3 04 0e 00 00       	mov    %eax,0xe04
+    p->s.size += bp->s.size;
+ 95f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 962:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 965:	89 10                	mov    %edx,(%eax)
+}
+ 967:	5b                   	pop    %ebx
+ 968:	5e                   	pop    %esi
+ 969:	5f                   	pop    %edi
+ 96a:	5d                   	pop    %ebp
+ 96b:	c3                   	ret    
+ 96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000970 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 970:	f3 0f 1e fb          	endbr32 
+ 974:	55                   	push   %ebp
+ 975:	89 e5                	mov    %esp,%ebp
+ 977:	57                   	push   %edi
+ 978:	56                   	push   %esi
+ 979:	53                   	push   %ebx
+ 97a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 97d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 980:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 986:	8d 70 07             	lea    0x7(%eax),%esi
+ 989:	c1 ee 03             	shr    $0x3,%esi
+ 98c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 98f:	85 ff                	test   %edi,%edi
+ 991:	0f 84 a9 00 00 00    	je     a40 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 997:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 999:	8b 48 04             	mov    0x4(%eax),%ecx
+ 99c:	39 f1                	cmp    %esi,%ecx
+ 99e:	73 6d                	jae    a0d <malloc+0x9d>
+ 9a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 9a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 9b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 9b8:	eb 17                	jmp    9d1 <malloc+0x61>
+ 9ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 9c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 9c5:	39 f1                	cmp    %esi,%ecx
+ 9c7:	73 4f                	jae    a18 <malloc+0xa8>
+ 9c9:	8b 3d 04 0e 00 00    	mov    0xe04,%edi
+ 9cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9d1:	39 c7                	cmp    %eax,%edi
+ 9d3:	75 eb                	jne    9c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 9d5:	83 ec 0c             	sub    $0xc,%esp
+ 9d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 9db:	e8 4b fc ff ff       	call   62b <sbrk>
+  if(p == (char*)-1)
+ 9e0:	83 c4 10             	add    $0x10,%esp
+ 9e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9e6:	74 1b                	je     a03 <malloc+0x93>
+  hp->s.size = nu;
+ 9e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9eb:	83 ec 0c             	sub    $0xc,%esp
+ 9ee:	83 c0 08             	add    $0x8,%eax
+ 9f1:	50                   	push   %eax
+ 9f2:	e8 e9 fe ff ff       	call   8e0 <free>
+  return freep;
+ 9f7:	a1 04 0e 00 00       	mov    0xe04,%eax
+      if((p = morecore(nunits)) == 0)
+ 9fc:	83 c4 10             	add    $0x10,%esp
+ 9ff:	85 c0                	test   %eax,%eax
+ a01:	75 bd                	jne    9c0 <malloc+0x50>
+        return 0;
+  }
+}
+ a03:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ a06:	31 c0                	xor    %eax,%eax
+}
+ a08:	5b                   	pop    %ebx
+ a09:	5e                   	pop    %esi
+ a0a:	5f                   	pop    %edi
+ a0b:	5d                   	pop    %ebp
+ a0c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a0d:	89 c2                	mov    %eax,%edx
+ a0f:	89 f8                	mov    %edi,%eax
+ a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ a18:	39 ce                	cmp    %ecx,%esi
+ a1a:	74 54                	je     a70 <malloc+0x100>
+        p->s.size -= nunits;
+ a1c:	29 f1                	sub    %esi,%ecx
+ a1e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ a21:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ a24:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ a27:	a3 04 0e 00 00       	mov    %eax,0xe04
+}
+ a2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a2f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ a32:	5b                   	pop    %ebx
+ a33:	5e                   	pop    %esi
+ a34:	5f                   	pop    %edi
+ a35:	5d                   	pop    %ebp
+ a36:	c3                   	ret    
+ a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ a3e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ a40:	c7 05 04 0e 00 00 08 	movl   $0xe08,0xe04
+ a47:	0e 00 00 
+    base.s.size = 0;
+ a4a:	bf 08 0e 00 00       	mov    $0xe08,%edi
+    base.s.ptr = freep = prevp = &base;
+ a4f:	c7 05 08 0e 00 00 08 	movl   $0xe08,0xe08
+ a56:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a59:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ a5b:	c7 05 0c 0e 00 00 00 	movl   $0x0,0xe0c
+ a62:	00 00 00 
+    if(p->s.size >= nunits){
+ a65:	e9 36 ff ff ff       	jmp    9a0 <malloc+0x30>
+ a6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a70:	8b 0a                	mov    (%edx),%ecx
+ a72:	89 08                	mov    %ecx,(%eax)
+ a74:	eb b1                	jmp    a27 <malloc+0xb7>
diff -ruN xv6-public/ls.d xv6-public_task_1/ls.d
--- xv6-public/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ls.d	2021-09-15 20:34:58.028372000 +0530
@@ -0,0 +1 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
Binary files xv6-public/ls.o and xv6-public_task_1/ls.o differ
diff -ruN xv6-public/ls.sym xv6-public_task_1/ls.sym
--- xv6-public/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ls.sym	2021-09-15 20:34:58.068372000 +0530
@@ -0,0 +1,62 @@
+00000000 .text
+00000a78 .rodata
+00000ae0 .eh_frame
+00000df4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 ls.c
+00000df4 buf.1102
+00000000 ulib.c
+00000000 printf.c
+00000660 printint
+00000acc digits.1091
+00000000 umalloc.c
+00000e04 freep
+00000e08 base
+00000340 strcpy
+00000060 fmtname
+00000710 printf
+00000570 memmove
+000005eb mknod
+00000460 gets
+00000623 getpid
+00000970 malloc
+00000633 sleep
+000005b3 pipe
+000005c3 write
+0000064b history
+000005fb fstat
+000005d3 kill
+00000613 chdir
+000005db exec
+000005ab wait
+000005bb read
+000005f3 unlink
+0000059b fork
+0000062b sbrk
+0000063b uptime
+00000df4 __bss_start
+00000400 memset
+00000000 main
+00000370 strcmp
+0000061b dup
+000004e0 stat
+00000df4 _edata
+00000e10 _end
+00000603 link
+00000100 ls
+000005a3 exit
+00000530 atoi
+00000643 draw
+000003c0 strlen
+000005e3 open
+00000420 strchr
+0000060b mkdir
+000005cb close
+000008e0 free
diff -ruN xv6-public/main.d xv6-public_task_1/main.d
--- xv6-public/main.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/main.d	2021-09-15 20:34:54.512378000 +0530
@@ -0,0 +1,2 @@
+main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h
Binary files xv6-public/main.o and xv6-public_task_1/main.o differ
diff -ruN xv6-public/Makefile xv6-public_task_1/Makefile
--- xv6-public/Makefile	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/Makefile	2021-08-20 20:34:39.257777000 +0530
@@ -51,7 +51,7 @@
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+ QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,6 +181,8 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_Drawtest\
+# Drawtest.c is available for xv6 source code for compilation.
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
Binary files xv6-public/_mkdir and xv6-public_task_1/_mkdir differ
diff -ruN xv6-public/mkdir.asm xv6-public_task_1/mkdir.asm
--- xv6-public/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/mkdir.asm	2021-09-15 20:34:58.132372000 +0530
@@ -0,0 +1,1224 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 11 03 00 00       	call   34b <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 cf 07 00 00       	push   $0x7cf
+  58:	6a 02                	push   $0x2
+  5a:	e8 f1 03 00 00       	call   450 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 b8 07 00 00       	push   $0x7b8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 de 03 00 00       	call   450 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <draw>:
+SYSCALL(draw)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <history>:
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+ 393:	66 90                	xchg   %ax,%ax
+ 395:	66 90                	xchg   %ax,%ax
+ 397:	66 90                	xchg   %ax,%ax
+ 399:	66 90                	xchg   %ax,%ax
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 f4 07 00 00 	movzbl 0x7f4(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 de fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 474:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 65 fe ff ff       	call   303 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
+      if(c == 'd'){
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
+  write(fd, &c, 1);
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 05 fe ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 f1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 516:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 519:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
+    }
+  }
+}
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+        ap++;
+ 57a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 584:	e8 7a fd ff ff       	call   303 <write>
+        ap++;
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        s = (char*)*ap;
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
+        while(*s != 0){
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
+          s = "(null)";
+ 5d6:	bb eb 07 00 00       	mov    $0x7eb,%ebx
+        while(*s != 0){
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 01 fd ff ff       	call   303 <write>
+        while(*s != 0){
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 625:	a1 ac 0a 00 00       	mov    0xaac,%eax
+{
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
+{
+ 648:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 671:	5b                   	pop    %ebx
+  freep = p;
+ 672:	a3 ac 0a 00 00       	mov    %eax,0xaac
+}
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 ac 0a 00 00       	mov    %eax,0xaac
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6c0:	8b 3d ac 0a 00 00    	mov    0xaac,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 700:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d ac 0a 00 00    	mov    0xaac,%edi
+ 70f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 4b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
+  hp->s.size = nu;
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
+  return freep;
+ 737:	a1 ac 0a 00 00       	mov    0xaac,%eax
+      if((p = morecore(nunits)) == 0)
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
+        return 0;
+  }
+}
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 746:	31 c0                	xor    %eax,%eax
+}
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
+        p->s.size -= nunits;
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 767:	a3 ac 0a 00 00       	mov    %eax,0xaac
+}
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 ac 0a 00 00 b0 	movl   $0xab0,0xaac
+ 787:	0a 00 00 
+    base.s.size = 0;
+ 78a:	bf b0 0a 00 00       	mov    $0xab0,%edi
+    base.s.ptr = freep = prevp = &base;
+ 78f:	c7 05 b0 0a 00 00 b0 	movl   $0xab0,0xab0
+ 796:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 799:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 79b:	c7 05 b4 0a 00 00 00 	movl   $0x0,0xab4
+ 7a2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/mkdir.d xv6-public_task_1/mkdir.d
--- xv6-public/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/mkdir.d	2021-09-15 20:34:58.104372000 +0530
@@ -0,0 +1 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/mkdir.o and xv6-public_task_1/mkdir.o differ
diff -ruN xv6-public/mkdir.sym xv6-public_task_1/mkdir.sym
--- xv6-public/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/mkdir.sym	2021-09-15 20:34:58.144372000 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+000007b8 .rodata
+00000808 .eh_frame
+00000aac .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007f4 digits.1091
+00000000 umalloc.c
+00000aac freep
+00000ab0 base
+00000080 strcpy
+00000450 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006b0 malloc
+00000373 sleep
+000002f3 pipe
+00000303 write
+0000038b history
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000aac __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000035b dup
+00000220 stat
+00000aac _edata
+00000ab8 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+00000383 draw
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000620 free
Binary files xv6-public/mkfs and xv6-public_task_1/mkfs differ
diff -ruN xv6-public/mp.d xv6-public_task_1/mp.d
--- xv6-public/mp.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/mp.d	2021-09-15 20:34:54.620378000 +0530
@@ -0,0 +1,2 @@
+mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
+ mp.h x86.h mmu.h proc.h
Binary files xv6-public/mp.o and xv6-public_task_1/mp.o differ
diff -ruN xv6-public/picirq.d xv6-public_task_1/picirq.d
--- xv6-public/picirq.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/picirq.d	2021-09-15 20:34:54.660378000 +0530
@@ -0,0 +1 @@
+picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
Binary files xv6-public/picirq.o and xv6-public_task_1/picirq.o differ
diff -ruN xv6-public/pipe.d xv6-public_task_1/pipe.d
--- xv6-public/pipe.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/pipe.d	2021-09-15 20:34:54.752377000 +0530
@@ -0,0 +1,2 @@
+pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
+ proc.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6-public/pipe.o and xv6-public_task_1/pipe.o differ
diff -ruN xv6-public/printf.d xv6-public_task_1/printf.d
--- xv6-public/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/printf.d	2021-09-15 20:34:57.044374000 +0530
@@ -0,0 +1 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/printf.o and xv6-public_task_1/printf.o differ
diff -ruN xv6-public/proc.d xv6-public_task_1/proc.d
--- xv6-public/proc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/proc.d	2021-09-15 20:34:54.944377000 +0530
@@ -0,0 +1,2 @@
+proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h x86.h proc.h spinlock.h
Binary files xv6-public/proc.o and xv6-public_task_1/proc.o differ
Binary files xv6-public/_rm and xv6-public_task_1/_rm differ
diff -ruN xv6-public/rm.asm xv6-public_task_1/rm.asm
--- xv6-public/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/rm.asm	2021-09-15 20:34:58.208372000 +0530
@@ -0,0 +1,1224 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	bf 01 00 00 00       	mov    $0x1,%edi
+  17:	56                   	push   %esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 08             	sub    $0x8,%esp
+  1d:	8b 59 04             	mov    0x4(%ecx),%ebx
+  20:	8b 31                	mov    (%ecx),%esi
+  22:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  25:	83 fe 01             	cmp    $0x1,%esi
+  28:	7e 3a                	jle    64 <main+0x64>
+  2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	pushl  (%ebx)
+  35:	e8 f9 02 00 00       	call   333 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 93 02 00 00       	call   2e3 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	pushl  (%ebx)
+  53:	68 cc 07 00 00       	push   $0x7cc
+  58:	6a 02                	push   $0x2
+  5a:	e8 f1 03 00 00       	call   450 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 b8 07 00 00       	push   $0x7b8
+  6b:	6a 02                	push   $0x2
+  6d:	e8 de 03 00 00       	call   450 <printf>
+    exit();
+  72:	e8 6c 02 00 00       	call   2e3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	f3 0f 1e fb          	endbr32 
+  84:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  85:	31 c0                	xor    %eax,%eax
+{
+  87:	89 e5                	mov    %esp,%ebp
+  89:	53                   	push   %ebx
+  8a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  8d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	89 c8                	mov    %ecx,%eax
+  a0:	5b                   	pop    %ebx
+  a1:	5d                   	pop    %ebp
+  a2:	c3                   	ret    
+  a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	53                   	push   %ebx
+  b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  bb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  be:	0f b6 01             	movzbl (%ecx),%eax
+  c1:	0f b6 1a             	movzbl (%edx),%ebx
+  c4:	84 c0                	test   %al,%al
+  c6:	75 19                	jne    e1 <strcmp+0x31>
+  c8:	eb 26                	jmp    f0 <strcmp+0x40>
+  ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  d0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  d4:	83 c1 01             	add    $0x1,%ecx
+  d7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  da:	0f b6 1a             	movzbl (%edx),%ebx
+  dd:	84 c0                	test   %al,%al
+  df:	74 0f                	je     f0 <strcmp+0x40>
+  e1:	38 d8                	cmp    %bl,%al
+  e3:	74 eb                	je     d0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  e5:	29 d8                	sub    %ebx,%eax
+}
+  e7:	5b                   	pop    %ebx
+  e8:	5d                   	pop    %ebp
+  e9:	c3                   	ret    
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  f0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  f2:	29 d8                	sub    %ebx,%eax
+}
+  f4:	5b                   	pop    %ebx
+  f5:	5d                   	pop    %ebp
+  f6:	c3                   	ret    
+  f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fe:	66 90                	xchg   %ax,%ax
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	f3 0f 1e fb          	endbr32 
+ 104:	55                   	push   %ebp
+ 105:	89 e5                	mov    %esp,%ebp
+ 107:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 10a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 10d:	74 21                	je     130 <strlen+0x30>
+ 10f:	31 c0                	xor    %eax,%eax
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 118:	83 c0 01             	add    $0x1,%eax
+ 11b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 11f:	89 c1                	mov    %eax,%ecx
+ 121:	75 f5                	jne    118 <strlen+0x18>
+    ;
+  return n;
+}
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	5d                   	pop    %ebp
+ 126:	c3                   	ret    
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+ 145:	89 e5                	mov    %esp,%ebp
+ 147:	57                   	push   %edi
+ 148:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 14b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 151:	89 d7                	mov    %edx,%edi
+ 153:	fc                   	cld    
+ 154:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 156:	89 d0                	mov    %edx,%eax
+ 158:	5f                   	pop    %edi
+ 159:	5d                   	pop    %ebp
+ 15a:	c3                   	ret    
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	f3 0f 1e fb          	endbr32 
+ 164:	55                   	push   %ebp
+ 165:	89 e5                	mov    %esp,%ebp
+ 167:	8b 45 08             	mov    0x8(%ebp),%eax
+ 16a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16e:	0f b6 10             	movzbl (%eax),%edx
+ 171:	84 d2                	test   %dl,%dl
+ 173:	75 16                	jne    18b <strchr+0x2b>
+ 175:	eb 21                	jmp    198 <strchr+0x38>
+ 177:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17e:	66 90                	xchg   %ax,%ax
+ 180:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 184:	83 c0 01             	add    $0x1,%eax
+ 187:	84 d2                	test   %dl,%dl
+ 189:	74 0d                	je     198 <strchr+0x38>
+    if(*s == c)
+ 18b:	38 d1                	cmp    %dl,%cl
+ 18d:	75 f1                	jne    180 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 18f:	5d                   	pop    %ebp
+ 190:	c3                   	ret    
+ 191:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 198:	31 c0                	xor    %eax,%eax
+}
+ 19a:	5d                   	pop    %ebp
+ 19b:	c3                   	ret    
+ 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	f3 0f 1e fb          	endbr32 
+ 1a4:	55                   	push   %ebp
+ 1a5:	89 e5                	mov    %esp,%ebp
+ 1a7:	57                   	push   %edi
+ 1a8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a9:	31 f6                	xor    %esi,%esi
+{
+ 1ab:	53                   	push   %ebx
+ 1ac:	89 f3                	mov    %esi,%ebx
+ 1ae:	83 ec 1c             	sub    $0x1c,%esp
+ 1b1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 1b4:	eb 33                	jmp    1e9 <gets+0x49>
+ 1b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 1c0:	83 ec 04             	sub    $0x4,%esp
+ 1c3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 1c6:	6a 01                	push   $0x1
+ 1c8:	50                   	push   %eax
+ 1c9:	6a 00                	push   $0x0
+ 1cb:	e8 2b 01 00 00       	call   2fb <read>
+    if(cc < 1)
+ 1d0:	83 c4 10             	add    $0x10,%esp
+ 1d3:	85 c0                	test   %eax,%eax
+ 1d5:	7e 1c                	jle    1f3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 1d7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1db:	83 c7 01             	add    $0x1,%edi
+ 1de:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 1e1:	3c 0a                	cmp    $0xa,%al
+ 1e3:	74 23                	je     208 <gets+0x68>
+ 1e5:	3c 0d                	cmp    $0xd,%al
+ 1e7:	74 1f                	je     208 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 1e9:	83 c3 01             	add    $0x1,%ebx
+ 1ec:	89 fe                	mov    %edi,%esi
+ 1ee:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1f1:	7c cd                	jl     1c0 <gets+0x20>
+ 1f3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1f5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1f8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fe:	5b                   	pop    %ebx
+ 1ff:	5e                   	pop    %esi
+ 200:	5f                   	pop    %edi
+ 201:	5d                   	pop    %ebp
+ 202:	c3                   	ret    
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	8b 75 08             	mov    0x8(%ebp),%esi
+ 20b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 20e:	01 de                	add    %ebx,%esi
+ 210:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 212:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 215:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 218:	5b                   	pop    %ebx
+ 219:	5e                   	pop    %esi
+ 21a:	5f                   	pop    %edi
+ 21b:	5d                   	pop    %ebp
+ 21c:	c3                   	ret    
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000220 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	56                   	push   %esi
+ 228:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	6a 00                	push   $0x0
+ 22e:	ff 75 08             	pushl  0x8(%ebp)
+ 231:	e8 ed 00 00 00       	call   323 <open>
+  if(fd < 0)
+ 236:	83 c4 10             	add    $0x10,%esp
+ 239:	85 c0                	test   %eax,%eax
+ 23b:	78 2b                	js     268 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 23d:	83 ec 08             	sub    $0x8,%esp
+ 240:	ff 75 0c             	pushl  0xc(%ebp)
+ 243:	89 c3                	mov    %eax,%ebx
+ 245:	50                   	push   %eax
+ 246:	e8 f0 00 00 00       	call   33b <fstat>
+  close(fd);
+ 24b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 24e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 250:	e8 b6 00 00 00       	call   30b <close>
+  return r;
+ 255:	83 c4 10             	add    $0x10,%esp
+}
+ 258:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 25b:	89 f0                	mov    %esi,%eax
+ 25d:	5b                   	pop    %ebx
+ 25e:	5e                   	pop    %esi
+ 25f:	5d                   	pop    %ebp
+ 260:	c3                   	ret    
+ 261:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 268:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 26d:	eb e9                	jmp    258 <stat+0x38>
+ 26f:	90                   	nop
+
+00000270 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	53                   	push   %ebx
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 27b:	0f be 02             	movsbl (%edx),%eax
+ 27e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 281:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 284:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 289:	77 1a                	ja     2a5 <atoi+0x35>
+ 28b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 28f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 290:	83 c2 01             	add    $0x1,%edx
+ 293:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 296:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 29a:	0f be 02             	movsbl (%edx),%eax
+ 29d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2a0:	80 fb 09             	cmp    $0x9,%bl
+ 2a3:	76 eb                	jbe    290 <atoi+0x20>
+  return n;
+}
+ 2a5:	89 c8                	mov    %ecx,%eax
+ 2a7:	5b                   	pop    %ebx
+ 2a8:	5d                   	pop    %ebp
+ 2a9:	c3                   	ret    
+ 2aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000002b0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2bb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2be:	56                   	push   %esi
+ 2bf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2c2:	85 c0                	test   %eax,%eax
+ 2c4:	7e 0f                	jle    2d5 <memmove+0x25>
+ 2c6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2c8:	89 d7                	mov    %edx,%edi
+ 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2d1:	39 f8                	cmp    %edi,%eax
+ 2d3:	75 fb                	jne    2d0 <memmove+0x20>
+  return vdst;
+}
+ 2d5:	5e                   	pop    %esi
+ 2d6:	89 d0                	mov    %edx,%eax
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+
+000002db <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2db:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <exit>:
+SYSCALL(exit)
+ 2e3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <wait>:
+SYSCALL(wait)
+ 2eb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <pipe>:
+SYSCALL(pipe)
+ 2f3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <read>:
+SYSCALL(read)
+ 2fb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <write>:
+SYSCALL(write)
+ 303:	b8 10 00 00 00       	mov    $0x10,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <close>:
+SYSCALL(close)
+ 30b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <kill>:
+SYSCALL(kill)
+ 313:	b8 06 00 00 00       	mov    $0x6,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <exec>:
+SYSCALL(exec)
+ 31b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <open>:
+SYSCALL(open)
+ 323:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mknod>:
+SYSCALL(mknod)
+ 32b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <unlink>:
+SYSCALL(unlink)
+ 333:	b8 12 00 00 00       	mov    $0x12,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <fstat>:
+SYSCALL(fstat)
+ 33b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <link>:
+SYSCALL(link)
+ 343:	b8 13 00 00 00       	mov    $0x13,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mkdir>:
+SYSCALL(mkdir)
+ 34b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <chdir>:
+SYSCALL(chdir)
+ 353:	b8 09 00 00 00       	mov    $0x9,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <dup>:
+SYSCALL(dup)
+ 35b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getpid>:
+SYSCALL(getpid)
+ 363:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <sbrk>:
+SYSCALL(sbrk)
+ 36b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <sleep>:
+SYSCALL(sleep)
+ 373:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <uptime>:
+SYSCALL(uptime)
+ 37b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <draw>:
+SYSCALL(draw)
+ 383:	b8 16 00 00 00       	mov    $0x16,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <history>:
+ 38b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+ 393:	66 90                	xchg   %ax,%ax
+ 395:	66 90                	xchg   %ax,%ax
+ 397:	66 90                	xchg   %ax,%ax
+ 399:	66 90                	xchg   %ax,%ax
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 ec 07 00 00 	movzbl 0x7ec(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 de fe ff ff       	call   303 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	f3 0f 1e fb          	endbr32 
+ 454:	55                   	push   %ebp
+ 455:	89 e5                	mov    %esp,%ebp
+ 457:	57                   	push   %edi
+ 458:	56                   	push   %esi
+ 459:	53                   	push   %ebx
+ 45a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 45d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 460:	0f b6 1e             	movzbl (%esi),%ebx
+ 463:	84 db                	test   %bl,%bl
+ 465:	0f 84 b4 00 00 00    	je     51f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 46b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 46e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 471:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 474:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 476:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 479:	eb 33                	jmp    4ae <printf+0x5e>
+ 47b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+ 480:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 17                	je     4a4 <printf+0x54>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	ff 75 08             	pushl  0x8(%ebp)
+ 499:	e8 65 fe ff ff       	call   303 <write>
+ 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 4a1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a4:	0f b6 1e             	movzbl (%esi),%ebx
+ 4a7:	83 c6 01             	add    $0x1,%esi
+ 4aa:	84 db                	test   %bl,%bl
+ 4ac:	74 71                	je     51f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 4ae:	0f be cb             	movsbl %bl,%ecx
+ 4b1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 4b4:	85 d2                	test   %edx,%edx
+ 4b6:	74 c8                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b8:	83 fa 25             	cmp    $0x25,%edx
+ 4bb:	75 e7                	jne    4a4 <printf+0x54>
+      if(c == 'd'){
+ 4bd:	83 f8 64             	cmp    $0x64,%eax
+ 4c0:	0f 84 9a 00 00 00    	je     560 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 4c6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 4cc:	83 f9 70             	cmp    $0x70,%ecx
+ 4cf:	74 5f                	je     530 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 4d1:	83 f8 73             	cmp    $0x73,%eax
+ 4d4:	0f 84 d6 00 00 00    	je     5b0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 4da:	83 f8 63             	cmp    $0x63,%eax
+ 4dd:	0f 84 8d 00 00 00    	je     570 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 4e3:	83 f8 25             	cmp    $0x25,%eax
+ 4e6:	0f 84 b4 00 00 00    	je     5a0 <printf+0x150>
+  write(fd, &c, 1);
+ 4ec:	83 ec 04             	sub    $0x4,%esp
+ 4ef:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4f3:	6a 01                	push   $0x1
+ 4f5:	57                   	push   %edi
+ 4f6:	ff 75 08             	pushl  0x8(%ebp)
+ 4f9:	e8 05 fe ff ff       	call   303 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4fe:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 501:	83 c4 0c             	add    $0xc,%esp
+ 504:	6a 01                	push   $0x1
+ 506:	83 c6 01             	add    $0x1,%esi
+ 509:	57                   	push   %edi
+ 50a:	ff 75 08             	pushl  0x8(%ebp)
+ 50d:	e8 f1 fd ff ff       	call   303 <write>
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 516:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 519:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 51b:	84 db                	test   %bl,%bl
+ 51d:	75 8f                	jne    4ae <printf+0x5e>
+    }
+  }
+}
+ 51f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 522:	5b                   	pop    %ebx
+ 523:	5e                   	pop    %esi
+ 524:	5f                   	pop    %edi
+ 525:	5d                   	pop    %ebp
+ 526:	c3                   	ret    
+ 527:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 53d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 540:	8b 13                	mov    (%ebx),%edx
+ 542:	e8 59 fe ff ff       	call   3a0 <printint>
+        ap++;
+ 547:	89 d8                	mov    %ebx,%eax
+ 549:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 54e:	83 c0 04             	add    $0x4,%eax
+ 551:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 554:	e9 4b ff ff ff       	jmp    4a4 <printf+0x54>
+ 559:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 560:	83 ec 0c             	sub    $0xc,%esp
+ 563:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 568:	6a 01                	push   $0x1
+ 56a:	eb ce                	jmp    53a <printf+0xea>
+ 56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 573:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 576:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 578:	6a 01                	push   $0x1
+        ap++;
+ 57a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 57d:	57                   	push   %edi
+ 57e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 581:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 584:	e8 7a fd ff ff       	call   303 <write>
+        ap++;
+ 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 58c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 58f:	31 d2                	xor    %edx,%edx
+ 591:	e9 0e ff ff ff       	jmp    4a4 <printf+0x54>
+ 596:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+ 5a6:	e9 59 ff ff ff       	jmp    504 <printf+0xb4>
+ 5ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5af:	90                   	nop
+        s = (char*)*ap;
+ 5b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5b3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 5b5:	83 c0 04             	add    $0x4,%eax
+ 5b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5bb:	85 db                	test   %ebx,%ebx
+ 5bd:	74 17                	je     5d6 <printf+0x186>
+        while(*s != 0){
+ 5bf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 5c2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 5c4:	84 c0                	test   %al,%al
+ 5c6:	0f 84 d8 fe ff ff    	je     4a4 <printf+0x54>
+ 5cc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5cf:	89 de                	mov    %ebx,%esi
+ 5d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5d4:	eb 1a                	jmp    5f0 <printf+0x1a0>
+          s = "(null)";
+ 5d6:	bb e5 07 00 00       	mov    $0x7e5,%ebx
+        while(*s != 0){
+ 5db:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 5de:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e3:	89 de                	mov    %ebx,%esi
+ 5e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c6 01             	add    $0x1,%esi
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	53                   	push   %ebx
+ 5fd:	e8 01 fd ff ff       	call   303 <write>
+        while(*s != 0){
+ 602:	0f b6 06             	movzbl (%esi),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x1a0>
+ 60c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 60f:	31 d2                	xor    %edx,%edx
+ 611:	e9 8e fe ff ff       	jmp    4a4 <printf+0x54>
+ 616:	66 90                	xchg   %ax,%ax
+ 618:	66 90                	xchg   %ax,%ax
+ 61a:	66 90                	xchg   %ax,%ax
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	f3 0f 1e fb          	endbr32 
+ 624:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 625:	a1 a4 0a 00 00       	mov    0xaa4,%eax
+{
+ 62a:	89 e5                	mov    %esp,%ebp
+ 62c:	57                   	push   %edi
+ 62d:	56                   	push   %esi
+ 62e:	53                   	push   %ebx
+ 62f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 632:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 634:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 637:	39 c8                	cmp    %ecx,%eax
+ 639:	73 15                	jae    650 <free+0x30>
+ 63b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 63f:	90                   	nop
+ 640:	39 d1                	cmp    %edx,%ecx
+ 642:	72 14                	jb     658 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 d0                	cmp    %edx,%eax
+ 646:	73 10                	jae    658 <free+0x38>
+{
+ 648:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 64a:	8b 10                	mov    (%eax),%edx
+ 64c:	39 c8                	cmp    %ecx,%eax
+ 64e:	72 f0                	jb     640 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 650:	39 d0                	cmp    %edx,%eax
+ 652:	72 f4                	jb     648 <free+0x28>
+ 654:	39 d1                	cmp    %edx,%ecx
+ 656:	73 f0                	jae    648 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 658:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 65b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 65e:	39 fa                	cmp    %edi,%edx
+ 660:	74 1e                	je     680 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 662:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 665:	8b 50 04             	mov    0x4(%eax),%edx
+ 668:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 66b:	39 f1                	cmp    %esi,%ecx
+ 66d:	74 28                	je     697 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 66f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 671:	5b                   	pop    %ebx
+  freep = p;
+ 672:	a3 a4 0a 00 00       	mov    %eax,0xaa4
+}
+ 677:	5e                   	pop    %esi
+ 678:	5f                   	pop    %edi
+ 679:	5d                   	pop    %ebp
+ 67a:	c3                   	ret    
+ 67b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 67f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 680:	03 72 04             	add    0x4(%edx),%esi
+ 683:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 686:	8b 10                	mov    (%eax),%edx
+ 688:	8b 12                	mov    (%edx),%edx
+ 68a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68d:	8b 50 04             	mov    0x4(%eax),%edx
+ 690:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 693:	39 f1                	cmp    %esi,%ecx
+ 695:	75 d8                	jne    66f <free+0x4f>
+    p->s.size += bp->s.size;
+ 697:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 69a:	a3 a4 0a 00 00       	mov    %eax,0xaa4
+    p->s.size += bp->s.size;
+ 69f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 6a2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 6a5:	89 10                	mov    %edx,(%eax)
+}
+ 6a7:	5b                   	pop    %ebx
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	f3 0f 1e fb          	endbr32 
+ 6b4:	55                   	push   %ebp
+ 6b5:	89 e5                	mov    %esp,%ebp
+ 6b7:	57                   	push   %edi
+ 6b8:	56                   	push   %esi
+ 6b9:	53                   	push   %ebx
+ 6ba:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6bd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6c0:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c6:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c9:	c1 ee 03             	shr    $0x3,%esi
+ 6cc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cf:	85 ff                	test   %edi,%edi
+ 6d1:	0f 84 a9 00 00 00    	je     780 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 6d9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6dc:	39 f1                	cmp    %esi,%ecx
+ 6de:	73 6d                	jae    74d <malloc+0x9d>
+ 6e0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 6e6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6eb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6ee:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6f5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6f8:	eb 17                	jmp    711 <malloc+0x61>
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 700:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 702:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 705:	39 f1                	cmp    %esi,%ecx
+ 707:	73 4f                	jae    758 <malloc+0xa8>
+ 709:	8b 3d a4 0a 00 00    	mov    0xaa4,%edi
+ 70f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 711:	39 c7                	cmp    %eax,%edi
+ 713:	75 eb                	jne    700 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 715:	83 ec 0c             	sub    $0xc,%esp
+ 718:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 71b:	e8 4b fc ff ff       	call   36b <sbrk>
+  if(p == (char*)-1)
+ 720:	83 c4 10             	add    $0x10,%esp
+ 723:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 726:	74 1b                	je     743 <malloc+0x93>
+  hp->s.size = nu;
+ 728:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 72b:	83 ec 0c             	sub    $0xc,%esp
+ 72e:	83 c0 08             	add    $0x8,%eax
+ 731:	50                   	push   %eax
+ 732:	e8 e9 fe ff ff       	call   620 <free>
+  return freep;
+ 737:	a1 a4 0a 00 00       	mov    0xaa4,%eax
+      if((p = morecore(nunits)) == 0)
+ 73c:	83 c4 10             	add    $0x10,%esp
+ 73f:	85 c0                	test   %eax,%eax
+ 741:	75 bd                	jne    700 <malloc+0x50>
+        return 0;
+  }
+}
+ 743:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 746:	31 c0                	xor    %eax,%eax
+}
+ 748:	5b                   	pop    %ebx
+ 749:	5e                   	pop    %esi
+ 74a:	5f                   	pop    %edi
+ 74b:	5d                   	pop    %ebp
+ 74c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 74d:	89 c2                	mov    %eax,%edx
+ 74f:	89 f8                	mov    %edi,%eax
+ 751:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 758:	39 ce                	cmp    %ecx,%esi
+ 75a:	74 54                	je     7b0 <malloc+0x100>
+        p->s.size -= nunits;
+ 75c:	29 f1                	sub    %esi,%ecx
+ 75e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 761:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 764:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 767:	a3 a4 0a 00 00       	mov    %eax,0xaa4
+}
+ 76c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 76f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 772:	5b                   	pop    %ebx
+ 773:	5e                   	pop    %esi
+ 774:	5f                   	pop    %edi
+ 775:	5d                   	pop    %ebp
+ 776:	c3                   	ret    
+ 777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 77e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 780:	c7 05 a4 0a 00 00 a8 	movl   $0xaa8,0xaa4
+ 787:	0a 00 00 
+    base.s.size = 0;
+ 78a:	bf a8 0a 00 00       	mov    $0xaa8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 78f:	c7 05 a8 0a 00 00 a8 	movl   $0xaa8,0xaa8
+ 796:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 799:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 79b:	c7 05 ac 0a 00 00 00 	movl   $0x0,0xaac
+ 7a2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7a5:	e9 36 ff ff ff       	jmp    6e0 <malloc+0x30>
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7b0:	8b 0a                	mov    (%edx),%ecx
+ 7b2:	89 08                	mov    %ecx,(%eax)
+ 7b4:	eb b1                	jmp    767 <malloc+0xb7>
diff -ruN xv6-public/rm.d xv6-public_task_1/rm.d
--- xv6-public/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/rm.d	2021-09-15 20:34:58.184372000 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/rm.o and xv6-public_task_1/rm.o differ
diff -ruN xv6-public/rm.sym xv6-public_task_1/rm.sym
--- xv6-public/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/rm.sym	2021-09-15 20:34:58.216372000 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+000007b8 .rodata
+00000800 .eh_frame
+00000aa4 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+000007ec digits.1091
+00000000 umalloc.c
+00000aa4 freep
+00000aa8 base
+00000080 strcpy
+00000450 printf
+000002b0 memmove
+0000032b mknod
+000001a0 gets
+00000363 getpid
+000006b0 malloc
+00000373 sleep
+000002f3 pipe
+00000303 write
+0000038b history
+0000033b fstat
+00000313 kill
+00000353 chdir
+0000031b exec
+000002eb wait
+000002fb read
+00000333 unlink
+000002db fork
+0000036b sbrk
+0000037b uptime
+00000aa4 __bss_start
+00000140 memset
+00000000 main
+000000b0 strcmp
+0000035b dup
+00000220 stat
+00000aa4 _edata
+00000ab0 _end
+00000343 link
+000002e3 exit
+00000270 atoi
+00000383 draw
+00000100 strlen
+00000323 open
+00000160 strchr
+0000034b mkdir
+0000030b close
+00000620 free
Binary files xv6-public/_sh and xv6-public_task_1/_sh differ
diff -ruN xv6-public/sh.asm xv6-public_task_1/sh.asm
--- xv6-public/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/sh.asm	2021-09-15 20:34:58.688371000 +0530
@@ -0,0 +1,2699 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return;
+}
+
+int
+main(void)
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      15:	eb 12                	jmp    29 <main+0x29>
+      17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      1e:	66 90                	xchg   %ax,%ax
+    if(fd >= 3){
+      20:	83 f8 02             	cmp    $0x2,%eax
+      23:	0f 8f 24 01 00 00    	jg     14d <main+0x14d>
+  while((fd = open("console", O_RDWR)) >= 0){
+      29:	83 ec 08             	sub    $0x8,%esp
+      2c:	6a 02                	push   $0x2
+      2e:	68 e1 13 00 00       	push   $0x13e1
+      33:	e8 6b 0e 00 00       	call   ea3 <open>
+      38:	83 c4 10             	add    $0x10,%esp
+      3b:	85 c0                	test   %eax,%eax
+      3d:	79 e1                	jns    20 <main+0x20>
+      3f:	eb 33                	jmp    74 <main+0x74>
+      41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      buf[strlen(buf)-1] = 0;  // chop \n
+      if(chdir(buf+3) < 0)
+        printf(2, "cannot cd %s\n", buf+3);
+      continue;
+    }
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's'  && buf[3] == 't' && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y' && buf[7] == '\n'){
+      48:	3c 68                	cmp    $0x68,%al
+      4a:	75 0d                	jne    59 <main+0x59>
+      4c:	80 3d 41 1a 00 00 69 	cmpb   $0x69,0x1a41
+      53:	0f 84 97 00 00 00    	je     f0 <main+0xf0>
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      59:	e8 fd 0d 00 00       	call   e5b <fork>
+  if(pid == -1)
+      5e:	83 f8 ff             	cmp    $0xffffffff,%eax
+      61:	0f 84 0c 01 00 00    	je     173 <main+0x173>
+    if(fork1() == 0)
+      67:	85 c0                	test   %eax,%eax
+      69:	0f 84 ef 00 00 00    	je     15e <main+0x15e>
+    wait();
+      6f:	e8 f7 0d 00 00       	call   e6b <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+      74:	83 ec 08             	sub    $0x8,%esp
+      77:	6a 64                	push   $0x64
+      79:	68 40 1a 00 00       	push   $0x1a40
+      7e:	e8 fd 00 00 00       	call   180 <getcmd>
+      83:	83 c4 10             	add    $0x10,%esp
+      86:	85 c0                	test   %eax,%eax
+      88:	0f 88 ba 00 00 00    	js     148 <main+0x148>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      8e:	0f b6 05 40 1a 00 00 	movzbl 0x1a40,%eax
+      95:	3c 63                	cmp    $0x63,%al
+      97:	75 af                	jne    48 <main+0x48>
+      99:	80 3d 41 1a 00 00 64 	cmpb   $0x64,0x1a41
+      a0:	75 b7                	jne    59 <main+0x59>
+      a2:	80 3d 42 1a 00 00 20 	cmpb   $0x20,0x1a42
+      a9:	75 ae                	jne    59 <main+0x59>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      ab:	83 ec 0c             	sub    $0xc,%esp
+      ae:	68 40 1a 00 00       	push   $0x1a40
+      b3:	e8 c8 0b 00 00       	call   c80 <strlen>
+      if(chdir(buf+3) < 0)
+      b8:	c7 04 24 43 1a 00 00 	movl   $0x1a43,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      bf:	c6 80 3f 1a 00 00 00 	movb   $0x0,0x1a3f(%eax)
+      if(chdir(buf+3) < 0)
+      c6:	e8 08 0e 00 00       	call   ed3 <chdir>
+      cb:	83 c4 10             	add    $0x10,%esp
+      ce:	85 c0                	test   %eax,%eax
+      d0:	79 a2                	jns    74 <main+0x74>
+        printf(2, "cannot cd %s\n", buf+3);
+      d2:	50                   	push   %eax
+      d3:	68 43 1a 00 00       	push   $0x1a43
+      d8:	68 e9 13 00 00       	push   $0x13e9
+      dd:	6a 02                	push   $0x2
+      df:	e8 ec 0e 00 00       	call   fd0 <printf>
+      e4:	83 c4 10             	add    $0x10,%esp
+      e7:	eb 8b                	jmp    74 <main+0x74>
+      e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's'  && buf[3] == 't' && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y' && buf[7] == '\n'){
+      f0:	80 3d 42 1a 00 00 73 	cmpb   $0x73,0x1a42
+      f7:	0f 85 5c ff ff ff    	jne    59 <main+0x59>
+      fd:	80 3d 43 1a 00 00 74 	cmpb   $0x74,0x1a43
+     104:	0f 85 4f ff ff ff    	jne    59 <main+0x59>
+     10a:	80 3d 44 1a 00 00 6f 	cmpb   $0x6f,0x1a44
+     111:	0f 85 42 ff ff ff    	jne    59 <main+0x59>
+     117:	80 3d 45 1a 00 00 72 	cmpb   $0x72,0x1a45
+     11e:	0f 85 35 ff ff ff    	jne    59 <main+0x59>
+     124:	80 3d 46 1a 00 00 79 	cmpb   $0x79,0x1a46
+     12b:	0f 85 28 ff ff ff    	jne    59 <main+0x59>
+     131:	80 3d 47 1a 00 00 0a 	cmpb   $0xa,0x1a47
+     138:	0f 85 1b ff ff ff    	jne    59 <main+0x59>
+      printHistory();
+     13e:	e8 8d 00 00 00       	call   1d0 <printHistory>
+      continue;
+     143:	e9 2c ff ff ff       	jmp    74 <main+0x74>
+  exit();
+     148:	e8 16 0d 00 00       	call   e63 <exit>
+      close(fd);
+     14d:	83 ec 0c             	sub    $0xc,%esp
+     150:	50                   	push   %eax
+     151:	e8 35 0d 00 00       	call   e8b <close>
+      break;
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	e9 16 ff ff ff       	jmp    74 <main+0x74>
+      runcmd(parsecmd(buf));
+     15e:	83 ec 0c             	sub    $0xc,%esp
+     161:	68 40 1a 00 00       	push   $0x1a40
+     166:	e8 25 0a 00 00       	call   b90 <parsecmd>
+     16b:	89 04 24             	mov    %eax,(%esp)
+     16e:	e8 dd 00 00 00       	call   250 <runcmd>
+    panic("fork");
+     173:	83 ec 0c             	sub    $0xc,%esp
+     176:	68 6a 13 00 00       	push   $0x136a
+     17b:	e8 b0 00 00 00       	call   230 <panic>
+
+00000180 <getcmd>:
+{
+     180:	f3 0f 1e fb          	endbr32 
+     184:	55                   	push   %ebp
+     185:	89 e5                	mov    %esp,%ebp
+     187:	56                   	push   %esi
+     188:	53                   	push   %ebx
+     189:	8b 75 0c             	mov    0xc(%ebp),%esi
+     18c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     18f:	83 ec 08             	sub    $0x8,%esp
+     192:	68 38 13 00 00       	push   $0x1338
+     197:	6a 02                	push   $0x2
+     199:	e8 32 0e 00 00       	call   fd0 <printf>
+  memset(buf, 0, nbuf);
+     19e:	83 c4 0c             	add    $0xc,%esp
+     1a1:	56                   	push   %esi
+     1a2:	6a 00                	push   $0x0
+     1a4:	53                   	push   %ebx
+     1a5:	e8 16 0b 00 00       	call   cc0 <memset>
+  gets(buf, nbuf);
+     1aa:	58                   	pop    %eax
+     1ab:	5a                   	pop    %edx
+     1ac:	56                   	push   %esi
+     1ad:	53                   	push   %ebx
+     1ae:	e8 6d 0b 00 00       	call   d20 <gets>
+  if(buf[0] == 0) // EOF
+     1b3:	83 c4 10             	add    $0x10,%esp
+     1b6:	31 c0                	xor    %eax,%eax
+     1b8:	80 3b 00             	cmpb   $0x0,(%ebx)
+     1bb:	0f 94 c0             	sete   %al
+}
+     1be:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     1c1:	5b                   	pop    %ebx
+  if(buf[0] == 0) // EOF
+     1c2:	f7 d8                	neg    %eax
+}
+     1c4:	5e                   	pop    %esi
+     1c5:	5d                   	pop    %ebp
+     1c6:	c3                   	ret    
+     1c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     1ce:	66 90                	xchg   %ax,%ax
+
+000001d0 <printHistory>:
+void printHistory(){
+     1d0:	f3 0f 1e fb          	endbr32 
+     1d4:	55                   	push   %ebp
+     1d5:	89 e5                	mov    %esp,%ebp
+     1d7:	56                   	push   %esi
+  uint count = 0;
+     1d8:	31 f6                	xor    %esi,%esi
+void printHistory(){
+     1da:	53                   	push   %ebx
+  for(i= 0; i <MAX_HISTORY; i++){
+     1db:	31 db                	xor    %ebx,%ebx
+     1dd:	eb 09                	jmp    1e8 <printHistory+0x18>
+     1df:	90                   	nop
+     1e0:	83 c3 01             	add    $0x1,%ebx
+     1e3:	83 fb 10             	cmp    $0x10,%ebx
+     1e6:	74 35                	je     21d <printHistory+0x4d>
+    if(history(getHistoryCommand, i) == 0){
+     1e8:	83 ec 08             	sub    $0x8,%esp
+     1eb:	53                   	push   %ebx
+     1ec:	68 c0 1a 00 00       	push   $0x1ac0
+     1f1:	e8 15 0d 00 00       	call   f0b <history>
+     1f6:	83 c4 10             	add    $0x10,%esp
+     1f9:	85 c0                	test   %eax,%eax
+     1fb:	75 e3                	jne    1e0 <printHistory+0x10>
+      count++;
+     1fd:	83 c6 01             	add    $0x1,%esi
+      printf(1, "%d: %s\n", count, getHistoryCommand);
+     200:	68 c0 1a 00 00       	push   $0x1ac0
+  for(i= 0; i <MAX_HISTORY; i++){
+     205:	83 c3 01             	add    $0x1,%ebx
+      printf(1, "%d: %s\n", count, getHistoryCommand);
+     208:	56                   	push   %esi
+     209:	68 3b 13 00 00       	push   $0x133b
+     20e:	6a 01                	push   $0x1
+     210:	e8 bb 0d 00 00       	call   fd0 <printf>
+     215:	83 c4 10             	add    $0x10,%esp
+  for(i= 0; i <MAX_HISTORY; i++){
+     218:	83 fb 10             	cmp    $0x10,%ebx
+     21b:	75 cb                	jne    1e8 <printHistory+0x18>
+}
+     21d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     220:	5b                   	pop    %ebx
+     221:	5e                   	pop    %esi
+     222:	5d                   	pop    %ebp
+     223:	c3                   	ret    
+     224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     22f:	90                   	nop
+
+00000230 <panic>:
+{
+     230:	f3 0f 1e fb          	endbr32 
+     234:	55                   	push   %ebp
+     235:	89 e5                	mov    %esp,%ebp
+     237:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     23a:	ff 75 08             	pushl  0x8(%ebp)
+     23d:	68 3f 13 00 00       	push   $0x133f
+     242:	6a 02                	push   $0x2
+     244:	e8 87 0d 00 00       	call   fd0 <printf>
+  exit();
+     249:	e8 15 0c 00 00       	call   e63 <exit>
+     24e:	66 90                	xchg   %ax,%ax
+
+00000250 <runcmd>:
+{
+     250:	f3 0f 1e fb          	endbr32 
+     254:	55                   	push   %ebp
+     255:	89 e5                	mov    %esp,%ebp
+     257:	53                   	push   %ebx
+     258:	83 ec 14             	sub    $0x14,%esp
+     25b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     25e:	85 db                	test   %ebx,%ebx
+     260:	74 7e                	je     2e0 <runcmd+0x90>
+  switch(cmd->type){
+     262:	83 3b 05             	cmpl   $0x5,(%ebx)
+     265:	0f 87 04 01 00 00    	ja     36f <runcmd+0x11f>
+     26b:	8b 03                	mov    (%ebx),%eax
+     26d:	3e ff 24 85 f8 13 00 	notrack jmp *0x13f8(,%eax,4)
+     274:	00 
+    if(pipe(p) < 0)
+     275:	83 ec 0c             	sub    $0xc,%esp
+     278:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     27b:	50                   	push   %eax
+     27c:	e8 f2 0b 00 00       	call   e73 <pipe>
+     281:	83 c4 10             	add    $0x10,%esp
+     284:	85 c0                	test   %eax,%eax
+     286:	0f 88 05 01 00 00    	js     391 <runcmd+0x141>
+  pid = fork();
+     28c:	e8 ca 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     291:	83 f8 ff             	cmp    $0xffffffff,%eax
+     294:	0f 84 60 01 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0){
+     29a:	85 c0                	test   %eax,%eax
+     29c:	0f 84 fc 00 00 00    	je     39e <runcmd+0x14e>
+  pid = fork();
+     2a2:	e8 b4 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     2a7:	83 f8 ff             	cmp    $0xffffffff,%eax
+     2aa:	0f 84 4a 01 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0){
+     2b0:	85 c0                	test   %eax,%eax
+     2b2:	0f 84 14 01 00 00    	je     3cc <runcmd+0x17c>
+    close(p[0]);
+     2b8:	83 ec 0c             	sub    $0xc,%esp
+     2bb:	ff 75 f0             	pushl  -0x10(%ebp)
+     2be:	e8 c8 0b 00 00       	call   e8b <close>
+    close(p[1]);
+     2c3:	58                   	pop    %eax
+     2c4:	ff 75 f4             	pushl  -0xc(%ebp)
+     2c7:	e8 bf 0b 00 00       	call   e8b <close>
+    wait();
+     2cc:	e8 9a 0b 00 00       	call   e6b <wait>
+    wait();
+     2d1:	e8 95 0b 00 00       	call   e6b <wait>
+    break;
+     2d6:	83 c4 10             	add    $0x10,%esp
+     2d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    exit();
+     2e0:	e8 7e 0b 00 00       	call   e63 <exit>
+  pid = fork();
+     2e5:	e8 71 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     2ea:	83 f8 ff             	cmp    $0xffffffff,%eax
+     2ed:	0f 84 07 01 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0)
+     2f3:	85 c0                	test   %eax,%eax
+     2f5:	75 e9                	jne    2e0 <runcmd+0x90>
+     2f7:	eb 6b                	jmp    364 <runcmd+0x114>
+    if(ecmd->argv[0] == 0)
+     2f9:	8b 43 04             	mov    0x4(%ebx),%eax
+     2fc:	85 c0                	test   %eax,%eax
+     2fe:	74 e0                	je     2e0 <runcmd+0x90>
+    exec(ecmd->argv[0], ecmd->argv);
+     300:	8d 53 04             	lea    0x4(%ebx),%edx
+     303:	51                   	push   %ecx
+     304:	51                   	push   %ecx
+     305:	52                   	push   %edx
+     306:	50                   	push   %eax
+     307:	e8 8f 0b 00 00       	call   e9b <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     30c:	83 c4 0c             	add    $0xc,%esp
+     30f:	ff 73 04             	pushl  0x4(%ebx)
+     312:	68 4a 13 00 00       	push   $0x134a
+     317:	6a 02                	push   $0x2
+     319:	e8 b2 0c 00 00       	call   fd0 <printf>
+    break;
+     31e:	83 c4 10             	add    $0x10,%esp
+     321:	eb bd                	jmp    2e0 <runcmd+0x90>
+  pid = fork();
+     323:	e8 33 0b 00 00       	call   e5b <fork>
+  if(pid == -1)
+     328:	83 f8 ff             	cmp    $0xffffffff,%eax
+     32b:	0f 84 c9 00 00 00    	je     3fa <runcmd+0x1aa>
+    if(fork1() == 0)
+     331:	85 c0                	test   %eax,%eax
+     333:	74 2f                	je     364 <runcmd+0x114>
+    wait();
+     335:	e8 31 0b 00 00       	call   e6b <wait>
+    runcmd(lcmd->right);
+     33a:	83 ec 0c             	sub    $0xc,%esp
+     33d:	ff 73 08             	pushl  0x8(%ebx)
+     340:	e8 0b ff ff ff       	call   250 <runcmd>
+    close(rcmd->fd);
+     345:	83 ec 0c             	sub    $0xc,%esp
+     348:	ff 73 14             	pushl  0x14(%ebx)
+     34b:	e8 3b 0b 00 00       	call   e8b <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     350:	58                   	pop    %eax
+     351:	5a                   	pop    %edx
+     352:	ff 73 10             	pushl  0x10(%ebx)
+     355:	ff 73 08             	pushl  0x8(%ebx)
+     358:	e8 46 0b 00 00       	call   ea3 <open>
+     35d:	83 c4 10             	add    $0x10,%esp
+     360:	85 c0                	test   %eax,%eax
+     362:	78 18                	js     37c <runcmd+0x12c>
+      runcmd(bcmd->cmd);
+     364:	83 ec 0c             	sub    $0xc,%esp
+     367:	ff 73 04             	pushl  0x4(%ebx)
+     36a:	e8 e1 fe ff ff       	call   250 <runcmd>
+    panic("runcmd");
+     36f:	83 ec 0c             	sub    $0xc,%esp
+     372:	68 43 13 00 00       	push   $0x1343
+     377:	e8 b4 fe ff ff       	call   230 <panic>
+      printf(2, "open %s failed\n", rcmd->file);
+     37c:	51                   	push   %ecx
+     37d:	ff 73 08             	pushl  0x8(%ebx)
+     380:	68 5a 13 00 00       	push   $0x135a
+     385:	6a 02                	push   $0x2
+     387:	e8 44 0c 00 00       	call   fd0 <printf>
+      exit();
+     38c:	e8 d2 0a 00 00       	call   e63 <exit>
+      panic("pipe");
+     391:	83 ec 0c             	sub    $0xc,%esp
+     394:	68 6f 13 00 00       	push   $0x136f
+     399:	e8 92 fe ff ff       	call   230 <panic>
+      close(1);
+     39e:	83 ec 0c             	sub    $0xc,%esp
+     3a1:	6a 01                	push   $0x1
+     3a3:	e8 e3 0a 00 00       	call   e8b <close>
+      dup(p[1]);
+     3a8:	58                   	pop    %eax
+     3a9:	ff 75 f4             	pushl  -0xc(%ebp)
+     3ac:	e8 2a 0b 00 00       	call   edb <dup>
+      close(p[0]);
+     3b1:	58                   	pop    %eax
+     3b2:	ff 75 f0             	pushl  -0x10(%ebp)
+     3b5:	e8 d1 0a 00 00       	call   e8b <close>
+      close(p[1]);
+     3ba:	58                   	pop    %eax
+     3bb:	ff 75 f4             	pushl  -0xc(%ebp)
+     3be:	e8 c8 0a 00 00       	call   e8b <close>
+      runcmd(pcmd->left);
+     3c3:	5a                   	pop    %edx
+     3c4:	ff 73 04             	pushl  0x4(%ebx)
+     3c7:	e8 84 fe ff ff       	call   250 <runcmd>
+      close(0);
+     3cc:	83 ec 0c             	sub    $0xc,%esp
+     3cf:	6a 00                	push   $0x0
+     3d1:	e8 b5 0a 00 00       	call   e8b <close>
+      dup(p[0]);
+     3d6:	5a                   	pop    %edx
+     3d7:	ff 75 f0             	pushl  -0x10(%ebp)
+     3da:	e8 fc 0a 00 00       	call   edb <dup>
+      close(p[0]);
+     3df:	59                   	pop    %ecx
+     3e0:	ff 75 f0             	pushl  -0x10(%ebp)
+     3e3:	e8 a3 0a 00 00       	call   e8b <close>
+      close(p[1]);
+     3e8:	58                   	pop    %eax
+     3e9:	ff 75 f4             	pushl  -0xc(%ebp)
+     3ec:	e8 9a 0a 00 00       	call   e8b <close>
+      runcmd(pcmd->right);
+     3f1:	58                   	pop    %eax
+     3f2:	ff 73 08             	pushl  0x8(%ebx)
+     3f5:	e8 56 fe ff ff       	call   250 <runcmd>
+    panic("fork");
+     3fa:	83 ec 0c             	sub    $0xc,%esp
+     3fd:	68 6a 13 00 00       	push   $0x136a
+     402:	e8 29 fe ff ff       	call   230 <panic>
+     407:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     40e:	66 90                	xchg   %ax,%ax
+
+00000410 <fork1>:
+{
+     410:	f3 0f 1e fb          	endbr32 
+     414:	55                   	push   %ebp
+     415:	89 e5                	mov    %esp,%ebp
+     417:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     41a:	e8 3c 0a 00 00       	call   e5b <fork>
+  if(pid == -1)
+     41f:	83 f8 ff             	cmp    $0xffffffff,%eax
+     422:	74 02                	je     426 <fork1+0x16>
+  return pid;
+}
+     424:	c9                   	leave  
+     425:	c3                   	ret    
+    panic("fork");
+     426:	83 ec 0c             	sub    $0xc,%esp
+     429:	68 6a 13 00 00       	push   $0x136a
+     42e:	e8 fd fd ff ff       	call   230 <panic>
+     433:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     43a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000440 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     440:	f3 0f 1e fb          	endbr32 
+     444:	55                   	push   %ebp
+     445:	89 e5                	mov    %esp,%ebp
+     447:	53                   	push   %ebx
+     448:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     44b:	6a 54                	push   $0x54
+     44d:	e8 de 0d 00 00       	call   1230 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     452:	83 c4 0c             	add    $0xc,%esp
+     455:	6a 54                	push   $0x54
+  cmd = malloc(sizeof(*cmd));
+     457:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     459:	6a 00                	push   $0x0
+     45b:	50                   	push   %eax
+     45c:	e8 5f 08 00 00       	call   cc0 <memset>
+  cmd->type = EXEC;
+     461:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     467:	89 d8                	mov    %ebx,%eax
+     469:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     46c:	c9                   	leave  
+     46d:	c3                   	ret    
+     46e:	66 90                	xchg   %ax,%ax
+
+00000470 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     470:	f3 0f 1e fb          	endbr32 
+     474:	55                   	push   %ebp
+     475:	89 e5                	mov    %esp,%ebp
+     477:	53                   	push   %ebx
+     478:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     47b:	6a 18                	push   $0x18
+     47d:	e8 ae 0d 00 00       	call   1230 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     482:	83 c4 0c             	add    $0xc,%esp
+     485:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     487:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     489:	6a 00                	push   $0x0
+     48b:	50                   	push   %eax
+     48c:	e8 2f 08 00 00       	call   cc0 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     491:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     494:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     49a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     49d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     4a0:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     4a3:	8b 45 10             	mov    0x10(%ebp),%eax
+     4a6:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     4a9:	8b 45 14             	mov    0x14(%ebp),%eax
+     4ac:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     4af:	8b 45 18             	mov    0x18(%ebp),%eax
+     4b2:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     4b5:	89 d8                	mov    %ebx,%eax
+     4b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     4ba:	c9                   	leave  
+     4bb:	c3                   	ret    
+     4bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000004c0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     4c0:	f3 0f 1e fb          	endbr32 
+     4c4:	55                   	push   %ebp
+     4c5:	89 e5                	mov    %esp,%ebp
+     4c7:	53                   	push   %ebx
+     4c8:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     4cb:	6a 0c                	push   $0xc
+     4cd:	e8 5e 0d 00 00       	call   1230 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     4d2:	83 c4 0c             	add    $0xc,%esp
+     4d5:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     4d7:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     4d9:	6a 00                	push   $0x0
+     4db:	50                   	push   %eax
+     4dc:	e8 df 07 00 00       	call   cc0 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     4e1:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     4e4:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     4ea:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     4ed:	8b 45 0c             	mov    0xc(%ebp),%eax
+     4f0:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     4f3:	89 d8                	mov    %ebx,%eax
+     4f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     4f8:	c9                   	leave  
+     4f9:	c3                   	ret    
+     4fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000500 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     500:	f3 0f 1e fb          	endbr32 
+     504:	55                   	push   %ebp
+     505:	89 e5                	mov    %esp,%ebp
+     507:	53                   	push   %ebx
+     508:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     50b:	6a 0c                	push   $0xc
+     50d:	e8 1e 0d 00 00       	call   1230 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     512:	83 c4 0c             	add    $0xc,%esp
+     515:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     517:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     519:	6a 00                	push   $0x0
+     51b:	50                   	push   %eax
+     51c:	e8 9f 07 00 00       	call   cc0 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     521:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     524:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     52a:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     52d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     530:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     533:	89 d8                	mov    %ebx,%eax
+     535:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     538:	c9                   	leave  
+     539:	c3                   	ret    
+     53a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000540 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     540:	f3 0f 1e fb          	endbr32 
+     544:	55                   	push   %ebp
+     545:	89 e5                	mov    %esp,%ebp
+     547:	53                   	push   %ebx
+     548:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     54b:	6a 08                	push   $0x8
+     54d:	e8 de 0c 00 00       	call   1230 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     552:	83 c4 0c             	add    $0xc,%esp
+     555:	6a 08                	push   $0x8
+  cmd = malloc(sizeof(*cmd));
+     557:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     559:	6a 00                	push   $0x0
+     55b:	50                   	push   %eax
+     55c:	e8 5f 07 00 00       	call   cc0 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     561:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     564:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     56a:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     56d:	89 d8                	mov    %ebx,%eax
+     56f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     572:	c9                   	leave  
+     573:	c3                   	ret    
+     574:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     57b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     57f:	90                   	nop
+
+00000580 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     580:	f3 0f 1e fb          	endbr32 
+     584:	55                   	push   %ebp
+     585:	89 e5                	mov    %esp,%ebp
+     587:	57                   	push   %edi
+     588:	56                   	push   %esi
+     589:	53                   	push   %ebx
+     58a:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     58d:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     590:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     593:	8b 75 10             	mov    0x10(%ebp),%esi
+  s = *ps;
+     596:	8b 38                	mov    (%eax),%edi
+  while(s < es && strchr(whitespace, *s))
+     598:	39 df                	cmp    %ebx,%edi
+     59a:	72 0b                	jb     5a7 <gettoken+0x27>
+     59c:	eb 21                	jmp    5bf <gettoken+0x3f>
+     59e:	66 90                	xchg   %ax,%ax
+    s++;
+     5a0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     5a3:	39 fb                	cmp    %edi,%ebx
+     5a5:	74 18                	je     5bf <gettoken+0x3f>
+     5a7:	0f be 07             	movsbl (%edi),%eax
+     5aa:	83 ec 08             	sub    $0x8,%esp
+     5ad:	50                   	push   %eax
+     5ae:	68 34 1a 00 00       	push   $0x1a34
+     5b3:	e8 28 07 00 00       	call   ce0 <strchr>
+     5b8:	83 c4 10             	add    $0x10,%esp
+     5bb:	85 c0                	test   %eax,%eax
+     5bd:	75 e1                	jne    5a0 <gettoken+0x20>
+  if(q)
+     5bf:	85 f6                	test   %esi,%esi
+     5c1:	74 02                	je     5c5 <gettoken+0x45>
+    *q = s;
+     5c3:	89 3e                	mov    %edi,(%esi)
+  ret = *s;
+     5c5:	0f b6 07             	movzbl (%edi),%eax
+  switch(*s){
+     5c8:	3c 3c                	cmp    $0x3c,%al
+     5ca:	0f 8f d0 00 00 00    	jg     6a0 <gettoken+0x120>
+     5d0:	3c 3a                	cmp    $0x3a,%al
+     5d2:	0f 8f b4 00 00 00    	jg     68c <gettoken+0x10c>
+     5d8:	84 c0                	test   %al,%al
+     5da:	75 44                	jne    620 <gettoken+0xa0>
+     5dc:	31 f6                	xor    %esi,%esi
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     5de:	8b 55 14             	mov    0x14(%ebp),%edx
+     5e1:	85 d2                	test   %edx,%edx
+     5e3:	74 05                	je     5ea <gettoken+0x6a>
+    *eq = s;
+     5e5:	8b 45 14             	mov    0x14(%ebp),%eax
+     5e8:	89 38                	mov    %edi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     5ea:	39 df                	cmp    %ebx,%edi
+     5ec:	72 09                	jb     5f7 <gettoken+0x77>
+     5ee:	eb 1f                	jmp    60f <gettoken+0x8f>
+    s++;
+     5f0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     5f3:	39 fb                	cmp    %edi,%ebx
+     5f5:	74 18                	je     60f <gettoken+0x8f>
+     5f7:	0f be 07             	movsbl (%edi),%eax
+     5fa:	83 ec 08             	sub    $0x8,%esp
+     5fd:	50                   	push   %eax
+     5fe:	68 34 1a 00 00       	push   $0x1a34
+     603:	e8 d8 06 00 00       	call   ce0 <strchr>
+     608:	83 c4 10             	add    $0x10,%esp
+     60b:	85 c0                	test   %eax,%eax
+     60d:	75 e1                	jne    5f0 <gettoken+0x70>
+  *ps = s;
+     60f:	8b 45 08             	mov    0x8(%ebp),%eax
+     612:	89 38                	mov    %edi,(%eax)
+  return ret;
+}
+     614:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     617:	89 f0                	mov    %esi,%eax
+     619:	5b                   	pop    %ebx
+     61a:	5e                   	pop    %esi
+     61b:	5f                   	pop    %edi
+     61c:	5d                   	pop    %ebp
+     61d:	c3                   	ret    
+     61e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     620:	79 5e                	jns    680 <gettoken+0x100>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     622:	39 fb                	cmp    %edi,%ebx
+     624:	77 34                	ja     65a <gettoken+0xda>
+  if(eq)
+     626:	8b 45 14             	mov    0x14(%ebp),%eax
+     629:	be 61 00 00 00       	mov    $0x61,%esi
+     62e:	85 c0                	test   %eax,%eax
+     630:	75 b3                	jne    5e5 <gettoken+0x65>
+     632:	eb db                	jmp    60f <gettoken+0x8f>
+     634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     638:	0f be 07             	movsbl (%edi),%eax
+     63b:	83 ec 08             	sub    $0x8,%esp
+     63e:	50                   	push   %eax
+     63f:	68 2c 1a 00 00       	push   $0x1a2c
+     644:	e8 97 06 00 00       	call   ce0 <strchr>
+     649:	83 c4 10             	add    $0x10,%esp
+     64c:	85 c0                	test   %eax,%eax
+     64e:	75 22                	jne    672 <gettoken+0xf2>
+      s++;
+     650:	83 c7 01             	add    $0x1,%edi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     653:	39 fb                	cmp    %edi,%ebx
+     655:	74 cf                	je     626 <gettoken+0xa6>
+     657:	0f b6 07             	movzbl (%edi),%eax
+     65a:	83 ec 08             	sub    $0x8,%esp
+     65d:	0f be f0             	movsbl %al,%esi
+     660:	56                   	push   %esi
+     661:	68 34 1a 00 00       	push   $0x1a34
+     666:	e8 75 06 00 00       	call   ce0 <strchr>
+     66b:	83 c4 10             	add    $0x10,%esp
+     66e:	85 c0                	test   %eax,%eax
+     670:	74 c6                	je     638 <gettoken+0xb8>
+    ret = 'a';
+     672:	be 61 00 00 00       	mov    $0x61,%esi
+     677:	e9 62 ff ff ff       	jmp    5de <gettoken+0x5e>
+     67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     680:	3c 26                	cmp    $0x26,%al
+     682:	74 08                	je     68c <gettoken+0x10c>
+     684:	8d 48 d8             	lea    -0x28(%eax),%ecx
+     687:	80 f9 01             	cmp    $0x1,%cl
+     68a:	77 96                	ja     622 <gettoken+0xa2>
+  ret = *s;
+     68c:	0f be f0             	movsbl %al,%esi
+    s++;
+     68f:	83 c7 01             	add    $0x1,%edi
+    break;
+     692:	e9 47 ff ff ff       	jmp    5de <gettoken+0x5e>
+     697:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     69e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     6a0:	3c 3e                	cmp    $0x3e,%al
+     6a2:	75 1c                	jne    6c0 <gettoken+0x140>
+    if(*s == '>'){
+     6a4:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+    s++;
+     6a8:	8d 47 01             	lea    0x1(%edi),%eax
+    if(*s == '>'){
+     6ab:	74 1c                	je     6c9 <gettoken+0x149>
+    s++;
+     6ad:	89 c7                	mov    %eax,%edi
+     6af:	be 3e 00 00 00       	mov    $0x3e,%esi
+     6b4:	e9 25 ff ff ff       	jmp    5de <gettoken+0x5e>
+     6b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     6c0:	3c 7c                	cmp    $0x7c,%al
+     6c2:	74 c8                	je     68c <gettoken+0x10c>
+     6c4:	e9 59 ff ff ff       	jmp    622 <gettoken+0xa2>
+      s++;
+     6c9:	83 c7 02             	add    $0x2,%edi
+      ret = '+';
+     6cc:	be 2b 00 00 00       	mov    $0x2b,%esi
+     6d1:	e9 08 ff ff ff       	jmp    5de <gettoken+0x5e>
+     6d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     6dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000006e0 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     6e0:	f3 0f 1e fb          	endbr32 
+     6e4:	55                   	push   %ebp
+     6e5:	89 e5                	mov    %esp,%ebp
+     6e7:	57                   	push   %edi
+     6e8:	56                   	push   %esi
+     6e9:	53                   	push   %ebx
+     6ea:	83 ec 0c             	sub    $0xc,%esp
+     6ed:	8b 7d 08             	mov    0x8(%ebp),%edi
+     6f0:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     6f3:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     6f5:	39 f3                	cmp    %esi,%ebx
+     6f7:	72 0e                	jb     707 <peek+0x27>
+     6f9:	eb 24                	jmp    71f <peek+0x3f>
+     6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     6ff:	90                   	nop
+    s++;
+     700:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     703:	39 de                	cmp    %ebx,%esi
+     705:	74 18                	je     71f <peek+0x3f>
+     707:	0f be 03             	movsbl (%ebx),%eax
+     70a:	83 ec 08             	sub    $0x8,%esp
+     70d:	50                   	push   %eax
+     70e:	68 34 1a 00 00       	push   $0x1a34
+     713:	e8 c8 05 00 00       	call   ce0 <strchr>
+     718:	83 c4 10             	add    $0x10,%esp
+     71b:	85 c0                	test   %eax,%eax
+     71d:	75 e1                	jne    700 <peek+0x20>
+  *ps = s;
+     71f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     721:	0f be 03             	movsbl (%ebx),%eax
+     724:	31 d2                	xor    %edx,%edx
+     726:	84 c0                	test   %al,%al
+     728:	75 0e                	jne    738 <peek+0x58>
+}
+     72a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     72d:	89 d0                	mov    %edx,%eax
+     72f:	5b                   	pop    %ebx
+     730:	5e                   	pop    %esi
+     731:	5f                   	pop    %edi
+     732:	5d                   	pop    %ebp
+     733:	c3                   	ret    
+     734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return *s && strchr(toks, *s);
+     738:	83 ec 08             	sub    $0x8,%esp
+     73b:	50                   	push   %eax
+     73c:	ff 75 10             	pushl  0x10(%ebp)
+     73f:	e8 9c 05 00 00       	call   ce0 <strchr>
+     744:	83 c4 10             	add    $0x10,%esp
+     747:	31 d2                	xor    %edx,%edx
+     749:	85 c0                	test   %eax,%eax
+     74b:	0f 95 c2             	setne  %dl
+}
+     74e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     751:	5b                   	pop    %ebx
+     752:	89 d0                	mov    %edx,%eax
+     754:	5e                   	pop    %esi
+     755:	5f                   	pop    %edi
+     756:	5d                   	pop    %ebp
+     757:	c3                   	ret    
+     758:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     75f:	90                   	nop
+
+00000760 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     760:	f3 0f 1e fb          	endbr32 
+     764:	55                   	push   %ebp
+     765:	89 e5                	mov    %esp,%ebp
+     767:	57                   	push   %edi
+     768:	56                   	push   %esi
+     769:	53                   	push   %ebx
+     76a:	83 ec 1c             	sub    $0x1c,%esp
+     76d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     770:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     777:	90                   	nop
+     778:	83 ec 04             	sub    $0x4,%esp
+     77b:	68 91 13 00 00       	push   $0x1391
+     780:	53                   	push   %ebx
+     781:	56                   	push   %esi
+     782:	e8 59 ff ff ff       	call   6e0 <peek>
+     787:	83 c4 10             	add    $0x10,%esp
+     78a:	85 c0                	test   %eax,%eax
+     78c:	74 6a                	je     7f8 <parseredirs+0x98>
+    tok = gettoken(ps, es, 0, 0);
+     78e:	6a 00                	push   $0x0
+     790:	6a 00                	push   $0x0
+     792:	53                   	push   %ebx
+     793:	56                   	push   %esi
+     794:	e8 e7 fd ff ff       	call   580 <gettoken>
+     799:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     79b:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     79e:	50                   	push   %eax
+     79f:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     7a2:	50                   	push   %eax
+     7a3:	53                   	push   %ebx
+     7a4:	56                   	push   %esi
+     7a5:	e8 d6 fd ff ff       	call   580 <gettoken>
+     7aa:	83 c4 20             	add    $0x20,%esp
+     7ad:	83 f8 61             	cmp    $0x61,%eax
+     7b0:	75 51                	jne    803 <parseredirs+0xa3>
+      panic("missing file for redirection");
+    switch(tok){
+     7b2:	83 ff 3c             	cmp    $0x3c,%edi
+     7b5:	74 31                	je     7e8 <parseredirs+0x88>
+     7b7:	83 ff 3e             	cmp    $0x3e,%edi
+     7ba:	74 05                	je     7c1 <parseredirs+0x61>
+     7bc:	83 ff 2b             	cmp    $0x2b,%edi
+     7bf:	75 b7                	jne    778 <parseredirs+0x18>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     7c1:	83 ec 0c             	sub    $0xc,%esp
+     7c4:	6a 01                	push   $0x1
+     7c6:	68 01 02 00 00       	push   $0x201
+     7cb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     7ce:	ff 75 e0             	pushl  -0x20(%ebp)
+     7d1:	ff 75 08             	pushl  0x8(%ebp)
+     7d4:	e8 97 fc ff ff       	call   470 <redircmd>
+      break;
+     7d9:	83 c4 20             	add    $0x20,%esp
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     7dc:	89 45 08             	mov    %eax,0x8(%ebp)
+      break;
+     7df:	eb 97                	jmp    778 <parseredirs+0x18>
+     7e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     7e8:	83 ec 0c             	sub    $0xc,%esp
+     7eb:	6a 00                	push   $0x0
+     7ed:	6a 00                	push   $0x0
+     7ef:	eb da                	jmp    7cb <parseredirs+0x6b>
+     7f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+  return cmd;
+}
+     7f8:	8b 45 08             	mov    0x8(%ebp),%eax
+     7fb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     7fe:	5b                   	pop    %ebx
+     7ff:	5e                   	pop    %esi
+     800:	5f                   	pop    %edi
+     801:	5d                   	pop    %ebp
+     802:	c3                   	ret    
+      panic("missing file for redirection");
+     803:	83 ec 0c             	sub    $0xc,%esp
+     806:	68 74 13 00 00       	push   $0x1374
+     80b:	e8 20 fa ff ff       	call   230 <panic>
+
+00000810 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     810:	f3 0f 1e fb          	endbr32 
+     814:	55                   	push   %ebp
+     815:	89 e5                	mov    %esp,%ebp
+     817:	57                   	push   %edi
+     818:	56                   	push   %esi
+     819:	53                   	push   %ebx
+     81a:	83 ec 30             	sub    $0x30,%esp
+     81d:	8b 75 08             	mov    0x8(%ebp),%esi
+     820:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     823:	68 94 13 00 00       	push   $0x1394
+     828:	57                   	push   %edi
+     829:	56                   	push   %esi
+     82a:	e8 b1 fe ff ff       	call   6e0 <peek>
+     82f:	83 c4 10             	add    $0x10,%esp
+     832:	85 c0                	test   %eax,%eax
+     834:	0f 85 96 00 00 00    	jne    8d0 <parseexec+0xc0>
+     83a:	89 c3                	mov    %eax,%ebx
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     83c:	e8 ff fb ff ff       	call   440 <execcmd>
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     841:	83 ec 04             	sub    $0x4,%esp
+     844:	57                   	push   %edi
+     845:	56                   	push   %esi
+     846:	50                   	push   %eax
+  ret = execcmd();
+     847:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  ret = parseredirs(ret, ps, es);
+     84a:	e8 11 ff ff ff       	call   760 <parseredirs>
+  while(!peek(ps, es, "|)&;")){
+     84f:	83 c4 10             	add    $0x10,%esp
+  ret = parseredirs(ret, ps, es);
+     852:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     855:	eb 1c                	jmp    873 <parseexec+0x63>
+     857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     85e:	66 90                	xchg   %ax,%ax
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     860:	83 ec 04             	sub    $0x4,%esp
+     863:	57                   	push   %edi
+     864:	56                   	push   %esi
+     865:	ff 75 d4             	pushl  -0x2c(%ebp)
+     868:	e8 f3 fe ff ff       	call   760 <parseredirs>
+     86d:	83 c4 10             	add    $0x10,%esp
+     870:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     873:	83 ec 04             	sub    $0x4,%esp
+     876:	68 ab 13 00 00       	push   $0x13ab
+     87b:	57                   	push   %edi
+     87c:	56                   	push   %esi
+     87d:	e8 5e fe ff ff       	call   6e0 <peek>
+     882:	83 c4 10             	add    $0x10,%esp
+     885:	85 c0                	test   %eax,%eax
+     887:	75 67                	jne    8f0 <parseexec+0xe0>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     889:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     88c:	50                   	push   %eax
+     88d:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     890:	50                   	push   %eax
+     891:	57                   	push   %edi
+     892:	56                   	push   %esi
+     893:	e8 e8 fc ff ff       	call   580 <gettoken>
+     898:	83 c4 10             	add    $0x10,%esp
+     89b:	85 c0                	test   %eax,%eax
+     89d:	74 51                	je     8f0 <parseexec+0xe0>
+    if(tok != 'a')
+     89f:	83 f8 61             	cmp    $0x61,%eax
+     8a2:	75 6b                	jne    90f <parseexec+0xff>
+    cmd->argv[argc] = q;
+     8a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     8a7:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     8aa:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     8ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     8b1:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     8b5:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     8b8:	83 fb 0a             	cmp    $0xa,%ebx
+     8bb:	75 a3                	jne    860 <parseexec+0x50>
+      panic("too many args");
+     8bd:	83 ec 0c             	sub    $0xc,%esp
+     8c0:	68 9d 13 00 00       	push   $0x139d
+     8c5:	e8 66 f9 ff ff       	call   230 <panic>
+     8ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     8d0:	83 ec 08             	sub    $0x8,%esp
+     8d3:	57                   	push   %edi
+     8d4:	56                   	push   %esi
+     8d5:	e8 66 01 00 00       	call   a40 <parseblock>
+     8da:	83 c4 10             	add    $0x10,%esp
+     8dd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     8e0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     8e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8e6:	5b                   	pop    %ebx
+     8e7:	5e                   	pop    %esi
+     8e8:	5f                   	pop    %edi
+     8e9:	5d                   	pop    %ebp
+     8ea:	c3                   	ret    
+     8eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     8ef:	90                   	nop
+  cmd->argv[argc] = 0;
+     8f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     8f3:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+     8f6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+  cmd->eargv[argc] = 0;
+     8fd:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+}
+     904:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     907:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     90a:	5b                   	pop    %ebx
+     90b:	5e                   	pop    %esi
+     90c:	5f                   	pop    %edi
+     90d:	5d                   	pop    %ebp
+     90e:	c3                   	ret    
+      panic("syntax");
+     90f:	83 ec 0c             	sub    $0xc,%esp
+     912:	68 96 13 00 00       	push   $0x1396
+     917:	e8 14 f9 ff ff       	call   230 <panic>
+     91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <parsepipe>:
+{
+     920:	f3 0f 1e fb          	endbr32 
+     924:	55                   	push   %ebp
+     925:	89 e5                	mov    %esp,%ebp
+     927:	57                   	push   %edi
+     928:	56                   	push   %esi
+     929:	53                   	push   %ebx
+     92a:	83 ec 14             	sub    $0x14,%esp
+     92d:	8b 75 08             	mov    0x8(%ebp),%esi
+     930:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parseexec(ps, es);
+     933:	57                   	push   %edi
+     934:	56                   	push   %esi
+     935:	e8 d6 fe ff ff       	call   810 <parseexec>
+  if(peek(ps, es, "|")){
+     93a:	83 c4 0c             	add    $0xc,%esp
+     93d:	68 b0 13 00 00       	push   $0x13b0
+  cmd = parseexec(ps, es);
+     942:	89 c3                	mov    %eax,%ebx
+  if(peek(ps, es, "|")){
+     944:	57                   	push   %edi
+     945:	56                   	push   %esi
+     946:	e8 95 fd ff ff       	call   6e0 <peek>
+     94b:	83 c4 10             	add    $0x10,%esp
+     94e:	85 c0                	test   %eax,%eax
+     950:	75 0e                	jne    960 <parsepipe+0x40>
+}
+     952:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     955:	89 d8                	mov    %ebx,%eax
+     957:	5b                   	pop    %ebx
+     958:	5e                   	pop    %esi
+     959:	5f                   	pop    %edi
+     95a:	5d                   	pop    %ebp
+     95b:	c3                   	ret    
+     95c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     960:	6a 00                	push   $0x0
+     962:	6a 00                	push   $0x0
+     964:	57                   	push   %edi
+     965:	56                   	push   %esi
+     966:	e8 15 fc ff ff       	call   580 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     96b:	58                   	pop    %eax
+     96c:	5a                   	pop    %edx
+     96d:	57                   	push   %edi
+     96e:	56                   	push   %esi
+     96f:	e8 ac ff ff ff       	call   920 <parsepipe>
+     974:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     977:	83 c4 10             	add    $0x10,%esp
+     97a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     97d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     980:	5b                   	pop    %ebx
+     981:	5e                   	pop    %esi
+     982:	5f                   	pop    %edi
+     983:	5d                   	pop    %ebp
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     984:	e9 37 fb ff ff       	jmp    4c0 <pipecmd>
+     989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000990 <parseline>:
+{
+     990:	f3 0f 1e fb          	endbr32 
+     994:	55                   	push   %ebp
+     995:	89 e5                	mov    %esp,%ebp
+     997:	57                   	push   %edi
+     998:	56                   	push   %esi
+     999:	53                   	push   %ebx
+     99a:	83 ec 14             	sub    $0x14,%esp
+     99d:	8b 75 08             	mov    0x8(%ebp),%esi
+     9a0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parsepipe(ps, es);
+     9a3:	57                   	push   %edi
+     9a4:	56                   	push   %esi
+     9a5:	e8 76 ff ff ff       	call   920 <parsepipe>
+  while(peek(ps, es, "&")){
+     9aa:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     9ad:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     9af:	eb 1f                	jmp    9d0 <parseline+0x40>
+     9b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    gettoken(ps, es, 0, 0);
+     9b8:	6a 00                	push   $0x0
+     9ba:	6a 00                	push   $0x0
+     9bc:	57                   	push   %edi
+     9bd:	56                   	push   %esi
+     9be:	e8 bd fb ff ff       	call   580 <gettoken>
+    cmd = backcmd(cmd);
+     9c3:	89 1c 24             	mov    %ebx,(%esp)
+     9c6:	e8 75 fb ff ff       	call   540 <backcmd>
+     9cb:	83 c4 10             	add    $0x10,%esp
+     9ce:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     9d0:	83 ec 04             	sub    $0x4,%esp
+     9d3:	68 b2 13 00 00       	push   $0x13b2
+     9d8:	57                   	push   %edi
+     9d9:	56                   	push   %esi
+     9da:	e8 01 fd ff ff       	call   6e0 <peek>
+     9df:	83 c4 10             	add    $0x10,%esp
+     9e2:	85 c0                	test   %eax,%eax
+     9e4:	75 d2                	jne    9b8 <parseline+0x28>
+  if(peek(ps, es, ";")){
+     9e6:	83 ec 04             	sub    $0x4,%esp
+     9e9:	68 ae 13 00 00       	push   $0x13ae
+     9ee:	57                   	push   %edi
+     9ef:	56                   	push   %esi
+     9f0:	e8 eb fc ff ff       	call   6e0 <peek>
+     9f5:	83 c4 10             	add    $0x10,%esp
+     9f8:	85 c0                	test   %eax,%eax
+     9fa:	75 14                	jne    a10 <parseline+0x80>
+}
+     9fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     9ff:	89 d8                	mov    %ebx,%eax
+     a01:	5b                   	pop    %ebx
+     a02:	5e                   	pop    %esi
+     a03:	5f                   	pop    %edi
+     a04:	5d                   	pop    %ebp
+     a05:	c3                   	ret    
+     a06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a0d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     a10:	6a 00                	push   $0x0
+     a12:	6a 00                	push   $0x0
+     a14:	57                   	push   %edi
+     a15:	56                   	push   %esi
+     a16:	e8 65 fb ff ff       	call   580 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     a1b:	58                   	pop    %eax
+     a1c:	5a                   	pop    %edx
+     a1d:	57                   	push   %edi
+     a1e:	56                   	push   %esi
+     a1f:	e8 6c ff ff ff       	call   990 <parseline>
+     a24:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     a27:	83 c4 10             	add    $0x10,%esp
+     a2a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     a2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     a30:	5b                   	pop    %ebx
+     a31:	5e                   	pop    %esi
+     a32:	5f                   	pop    %edi
+     a33:	5d                   	pop    %ebp
+    cmd = listcmd(cmd, parseline(ps, es));
+     a34:	e9 c7 fa ff ff       	jmp    500 <listcmd>
+     a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000a40 <parseblock>:
+{
+     a40:	f3 0f 1e fb          	endbr32 
+     a44:	55                   	push   %ebp
+     a45:	89 e5                	mov    %esp,%ebp
+     a47:	57                   	push   %edi
+     a48:	56                   	push   %esi
+     a49:	53                   	push   %ebx
+     a4a:	83 ec 10             	sub    $0x10,%esp
+     a4d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a50:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     a53:	68 94 13 00 00       	push   $0x1394
+     a58:	56                   	push   %esi
+     a59:	53                   	push   %ebx
+     a5a:	e8 81 fc ff ff       	call   6e0 <peek>
+     a5f:	83 c4 10             	add    $0x10,%esp
+     a62:	85 c0                	test   %eax,%eax
+     a64:	74 4a                	je     ab0 <parseblock+0x70>
+  gettoken(ps, es, 0, 0);
+     a66:	6a 00                	push   $0x0
+     a68:	6a 00                	push   $0x0
+     a6a:	56                   	push   %esi
+     a6b:	53                   	push   %ebx
+     a6c:	e8 0f fb ff ff       	call   580 <gettoken>
+  cmd = parseline(ps, es);
+     a71:	58                   	pop    %eax
+     a72:	5a                   	pop    %edx
+     a73:	56                   	push   %esi
+     a74:	53                   	push   %ebx
+     a75:	e8 16 ff ff ff       	call   990 <parseline>
+  if(!peek(ps, es, ")"))
+     a7a:	83 c4 0c             	add    $0xc,%esp
+     a7d:	68 d0 13 00 00       	push   $0x13d0
+  cmd = parseline(ps, es);
+     a82:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     a84:	56                   	push   %esi
+     a85:	53                   	push   %ebx
+     a86:	e8 55 fc ff ff       	call   6e0 <peek>
+     a8b:	83 c4 10             	add    $0x10,%esp
+     a8e:	85 c0                	test   %eax,%eax
+     a90:	74 2b                	je     abd <parseblock+0x7d>
+  gettoken(ps, es, 0, 0);
+     a92:	6a 00                	push   $0x0
+     a94:	6a 00                	push   $0x0
+     a96:	56                   	push   %esi
+     a97:	53                   	push   %ebx
+     a98:	e8 e3 fa ff ff       	call   580 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     a9d:	83 c4 0c             	add    $0xc,%esp
+     aa0:	56                   	push   %esi
+     aa1:	53                   	push   %ebx
+     aa2:	57                   	push   %edi
+     aa3:	e8 b8 fc ff ff       	call   760 <parseredirs>
+}
+     aa8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     aab:	5b                   	pop    %ebx
+     aac:	5e                   	pop    %esi
+     aad:	5f                   	pop    %edi
+     aae:	5d                   	pop    %ebp
+     aaf:	c3                   	ret    
+    panic("parseblock");
+     ab0:	83 ec 0c             	sub    $0xc,%esp
+     ab3:	68 b4 13 00 00       	push   $0x13b4
+     ab8:	e8 73 f7 ff ff       	call   230 <panic>
+    panic("syntax - missing )");
+     abd:	83 ec 0c             	sub    $0xc,%esp
+     ac0:	68 bf 13 00 00       	push   $0x13bf
+     ac5:	e8 66 f7 ff ff       	call   230 <panic>
+     aca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000ad0 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     ad0:	f3 0f 1e fb          	endbr32 
+     ad4:	55                   	push   %ebp
+     ad5:	89 e5                	mov    %esp,%ebp
+     ad7:	53                   	push   %ebx
+     ad8:	83 ec 04             	sub    $0x4,%esp
+     adb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     ade:	85 db                	test   %ebx,%ebx
+     ae0:	0f 84 9a 00 00 00    	je     b80 <nulterminate+0xb0>
+    return 0;
+
+  switch(cmd->type){
+     ae6:	83 3b 05             	cmpl   $0x5,(%ebx)
+     ae9:	77 6d                	ja     b58 <nulterminate+0x88>
+     aeb:	8b 03                	mov    (%ebx),%eax
+     aed:	3e ff 24 85 10 14 00 	notrack jmp *0x1410(,%eax,4)
+     af4:	00 
+     af5:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+     af8:	83 ec 0c             	sub    $0xc,%esp
+     afb:	ff 73 04             	pushl  0x4(%ebx)
+     afe:	e8 cd ff ff ff       	call   ad0 <nulterminate>
+    nulterminate(lcmd->right);
+     b03:	58                   	pop    %eax
+     b04:	ff 73 08             	pushl  0x8(%ebx)
+     b07:	e8 c4 ff ff ff       	call   ad0 <nulterminate>
+    break;
+     b0c:	83 c4 10             	add    $0x10,%esp
+     b0f:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     b11:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b14:	c9                   	leave  
+     b15:	c3                   	ret    
+     b16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b1d:	8d 76 00             	lea    0x0(%esi),%esi
+    nulterminate(bcmd->cmd);
+     b20:	83 ec 0c             	sub    $0xc,%esp
+     b23:	ff 73 04             	pushl  0x4(%ebx)
+     b26:	e8 a5 ff ff ff       	call   ad0 <nulterminate>
+    break;
+     b2b:	89 d8                	mov    %ebx,%eax
+     b2d:	83 c4 10             	add    $0x10,%esp
+}
+     b30:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b33:	c9                   	leave  
+     b34:	c3                   	ret    
+     b35:	8d 76 00             	lea    0x0(%esi),%esi
+    for(i=0; ecmd->argv[i]; i++)
+     b38:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     b3b:	8d 43 08             	lea    0x8(%ebx),%eax
+     b3e:	85 c9                	test   %ecx,%ecx
+     b40:	74 16                	je     b58 <nulterminate+0x88>
+     b42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     b48:	8b 50 24             	mov    0x24(%eax),%edx
+     b4b:	83 c0 04             	add    $0x4,%eax
+     b4e:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     b51:	8b 50 fc             	mov    -0x4(%eax),%edx
+     b54:	85 d2                	test   %edx,%edx
+     b56:	75 f0                	jne    b48 <nulterminate+0x78>
+  switch(cmd->type){
+     b58:	89 d8                	mov    %ebx,%eax
+}
+     b5a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b5d:	c9                   	leave  
+     b5e:	c3                   	ret    
+     b5f:	90                   	nop
+    nulterminate(rcmd->cmd);
+     b60:	83 ec 0c             	sub    $0xc,%esp
+     b63:	ff 73 04             	pushl  0x4(%ebx)
+     b66:	e8 65 ff ff ff       	call   ad0 <nulterminate>
+    *rcmd->efile = 0;
+     b6b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     b6e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     b71:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     b74:	89 d8                	mov    %ebx,%eax
+}
+     b76:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b79:	c9                   	leave  
+     b7a:	c3                   	ret    
+     b7b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b7f:	90                   	nop
+    return 0;
+     b80:	31 c0                	xor    %eax,%eax
+     b82:	eb 8d                	jmp    b11 <nulterminate+0x41>
+     b84:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b8f:	90                   	nop
+
+00000b90 <parsecmd>:
+{
+     b90:	f3 0f 1e fb          	endbr32 
+     b94:	55                   	push   %ebp
+     b95:	89 e5                	mov    %esp,%ebp
+     b97:	56                   	push   %esi
+     b98:	53                   	push   %ebx
+  es = s + strlen(s);
+     b99:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     b9c:	83 ec 0c             	sub    $0xc,%esp
+     b9f:	53                   	push   %ebx
+     ba0:	e8 db 00 00 00       	call   c80 <strlen>
+  cmd = parseline(&s, es);
+     ba5:	59                   	pop    %ecx
+     ba6:	5e                   	pop    %esi
+  es = s + strlen(s);
+     ba7:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     ba9:	8d 45 08             	lea    0x8(%ebp),%eax
+     bac:	53                   	push   %ebx
+     bad:	50                   	push   %eax
+     bae:	e8 dd fd ff ff       	call   990 <parseline>
+  peek(&s, es, "");
+     bb3:	83 c4 0c             	add    $0xc,%esp
+  cmd = parseline(&s, es);
+     bb6:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     bb8:	8d 45 08             	lea    0x8(%ebp),%eax
+     bbb:	68 59 13 00 00       	push   $0x1359
+     bc0:	53                   	push   %ebx
+     bc1:	50                   	push   %eax
+     bc2:	e8 19 fb ff ff       	call   6e0 <peek>
+  if(s != es){
+     bc7:	8b 45 08             	mov    0x8(%ebp),%eax
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	39 d8                	cmp    %ebx,%eax
+     bcf:	75 12                	jne    be3 <parsecmd+0x53>
+  nulterminate(cmd);
+     bd1:	83 ec 0c             	sub    $0xc,%esp
+     bd4:	56                   	push   %esi
+     bd5:	e8 f6 fe ff ff       	call   ad0 <nulterminate>
+}
+     bda:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     bdd:	89 f0                	mov    %esi,%eax
+     bdf:	5b                   	pop    %ebx
+     be0:	5e                   	pop    %esi
+     be1:	5d                   	pop    %ebp
+     be2:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     be3:	52                   	push   %edx
+     be4:	50                   	push   %eax
+     be5:	68 d2 13 00 00       	push   $0x13d2
+     bea:	6a 02                	push   $0x2
+     bec:	e8 df 03 00 00       	call   fd0 <printf>
+    panic("syntax");
+     bf1:	c7 04 24 96 13 00 00 	movl   $0x1396,(%esp)
+     bf8:	e8 33 f6 ff ff       	call   230 <panic>
+     bfd:	66 90                	xchg   %ax,%ax
+     bff:	90                   	nop
+
+00000c00 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     c00:	f3 0f 1e fb          	endbr32 
+     c04:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     c05:	31 c0                	xor    %eax,%eax
+{
+     c07:	89 e5                	mov    %esp,%ebp
+     c09:	53                   	push   %ebx
+     c0a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     c0d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+     c10:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     c14:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+     c17:	83 c0 01             	add    $0x1,%eax
+     c1a:	84 d2                	test   %dl,%dl
+     c1c:	75 f2                	jne    c10 <strcpy+0x10>
+    ;
+  return os;
+}
+     c1e:	89 c8                	mov    %ecx,%eax
+     c20:	5b                   	pop    %ebx
+     c21:	5d                   	pop    %ebp
+     c22:	c3                   	ret    
+     c23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000c30 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     c30:	f3 0f 1e fb          	endbr32 
+     c34:	55                   	push   %ebp
+     c35:	89 e5                	mov    %esp,%ebp
+     c37:	53                   	push   %ebx
+     c38:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     c3b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+     c3e:	0f b6 01             	movzbl (%ecx),%eax
+     c41:	0f b6 1a             	movzbl (%edx),%ebx
+     c44:	84 c0                	test   %al,%al
+     c46:	75 19                	jne    c61 <strcmp+0x31>
+     c48:	eb 26                	jmp    c70 <strcmp+0x40>
+     c4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     c50:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+     c54:	83 c1 01             	add    $0x1,%ecx
+     c57:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+     c5a:	0f b6 1a             	movzbl (%edx),%ebx
+     c5d:	84 c0                	test   %al,%al
+     c5f:	74 0f                	je     c70 <strcmp+0x40>
+     c61:	38 d8                	cmp    %bl,%al
+     c63:	74 eb                	je     c50 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+     c65:	29 d8                	sub    %ebx,%eax
+}
+     c67:	5b                   	pop    %ebx
+     c68:	5d                   	pop    %ebp
+     c69:	c3                   	ret    
+     c6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     c70:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+     c72:	29 d8                	sub    %ebx,%eax
+}
+     c74:	5b                   	pop    %ebx
+     c75:	5d                   	pop    %ebp
+     c76:	c3                   	ret    
+     c77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c7e:	66 90                	xchg   %ax,%ax
+
+00000c80 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     c80:	f3 0f 1e fb          	endbr32 
+     c84:	55                   	push   %ebp
+     c85:	89 e5                	mov    %esp,%ebp
+     c87:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     c8a:	80 3a 00             	cmpb   $0x0,(%edx)
+     c8d:	74 21                	je     cb0 <strlen+0x30>
+     c8f:	31 c0                	xor    %eax,%eax
+     c91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c98:	83 c0 01             	add    $0x1,%eax
+     c9b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+     c9f:	89 c1                	mov    %eax,%ecx
+     ca1:	75 f5                	jne    c98 <strlen+0x18>
+    ;
+  return n;
+}
+     ca3:	89 c8                	mov    %ecx,%eax
+     ca5:	5d                   	pop    %ebp
+     ca6:	c3                   	ret    
+     ca7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cae:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+     cb0:	31 c9                	xor    %ecx,%ecx
+}
+     cb2:	5d                   	pop    %ebp
+     cb3:	89 c8                	mov    %ecx,%eax
+     cb5:	c3                   	ret    
+     cb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cbd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000cc0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     cc0:	f3 0f 1e fb          	endbr32 
+     cc4:	55                   	push   %ebp
+     cc5:	89 e5                	mov    %esp,%ebp
+     cc7:	57                   	push   %edi
+     cc8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     ccb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     cce:	8b 45 0c             	mov    0xc(%ebp),%eax
+     cd1:	89 d7                	mov    %edx,%edi
+     cd3:	fc                   	cld    
+     cd4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     cd6:	89 d0                	mov    %edx,%eax
+     cd8:	5f                   	pop    %edi
+     cd9:	5d                   	pop    %ebp
+     cda:	c3                   	ret    
+     cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cdf:	90                   	nop
+
+00000ce0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     ce0:	f3 0f 1e fb          	endbr32 
+     ce4:	55                   	push   %ebp
+     ce5:	89 e5                	mov    %esp,%ebp
+     ce7:	8b 45 08             	mov    0x8(%ebp),%eax
+     cea:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+     cee:	0f b6 10             	movzbl (%eax),%edx
+     cf1:	84 d2                	test   %dl,%dl
+     cf3:	75 16                	jne    d0b <strchr+0x2b>
+     cf5:	eb 21                	jmp    d18 <strchr+0x38>
+     cf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     cfe:	66 90                	xchg   %ax,%ax
+     d00:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+     d04:	83 c0 01             	add    $0x1,%eax
+     d07:	84 d2                	test   %dl,%dl
+     d09:	74 0d                	je     d18 <strchr+0x38>
+    if(*s == c)
+     d0b:	38 d1                	cmp    %dl,%cl
+     d0d:	75 f1                	jne    d00 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+     d0f:	5d                   	pop    %ebp
+     d10:	c3                   	ret    
+     d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+     d18:	31 c0                	xor    %eax,%eax
+}
+     d1a:	5d                   	pop    %ebp
+     d1b:	c3                   	ret    
+     d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000d20 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     d20:	f3 0f 1e fb          	endbr32 
+     d24:	55                   	push   %ebp
+     d25:	89 e5                	mov    %esp,%ebp
+     d27:	57                   	push   %edi
+     d28:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     d29:	31 f6                	xor    %esi,%esi
+{
+     d2b:	53                   	push   %ebx
+     d2c:	89 f3                	mov    %esi,%ebx
+     d2e:	83 ec 1c             	sub    $0x1c,%esp
+     d31:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+     d34:	eb 33                	jmp    d69 <gets+0x49>
+     d36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d3d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+     d40:	83 ec 04             	sub    $0x4,%esp
+     d43:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     d46:	6a 01                	push   $0x1
+     d48:	50                   	push   %eax
+     d49:	6a 00                	push   $0x0
+     d4b:	e8 2b 01 00 00       	call   e7b <read>
+    if(cc < 1)
+     d50:	83 c4 10             	add    $0x10,%esp
+     d53:	85 c0                	test   %eax,%eax
+     d55:	7e 1c                	jle    d73 <gets+0x53>
+      break;
+    buf[i++] = c;
+     d57:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     d5b:	83 c7 01             	add    $0x1,%edi
+     d5e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+     d61:	3c 0a                	cmp    $0xa,%al
+     d63:	74 23                	je     d88 <gets+0x68>
+     d65:	3c 0d                	cmp    $0xd,%al
+     d67:	74 1f                	je     d88 <gets+0x68>
+  for(i=0; i+1 < max; ){
+     d69:	83 c3 01             	add    $0x1,%ebx
+     d6c:	89 fe                	mov    %edi,%esi
+     d6e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     d71:	7c cd                	jl     d40 <gets+0x20>
+     d73:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+     d75:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+     d78:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     d7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d7e:	5b                   	pop    %ebx
+     d7f:	5e                   	pop    %esi
+     d80:	5f                   	pop    %edi
+     d81:	5d                   	pop    %ebp
+     d82:	c3                   	ret    
+     d83:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     d87:	90                   	nop
+     d88:	8b 75 08             	mov    0x8(%ebp),%esi
+     d8b:	8b 45 08             	mov    0x8(%ebp),%eax
+     d8e:	01 de                	add    %ebx,%esi
+     d90:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+     d92:	c6 03 00             	movb   $0x0,(%ebx)
+}
+     d95:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d98:	5b                   	pop    %ebx
+     d99:	5e                   	pop    %esi
+     d9a:	5f                   	pop    %edi
+     d9b:	5d                   	pop    %ebp
+     d9c:	c3                   	ret    
+     d9d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000da0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     da0:	f3 0f 1e fb          	endbr32 
+     da4:	55                   	push   %ebp
+     da5:	89 e5                	mov    %esp,%ebp
+     da7:	56                   	push   %esi
+     da8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     da9:	83 ec 08             	sub    $0x8,%esp
+     dac:	6a 00                	push   $0x0
+     dae:	ff 75 08             	pushl  0x8(%ebp)
+     db1:	e8 ed 00 00 00       	call   ea3 <open>
+  if(fd < 0)
+     db6:	83 c4 10             	add    $0x10,%esp
+     db9:	85 c0                	test   %eax,%eax
+     dbb:	78 2b                	js     de8 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+     dbd:	83 ec 08             	sub    $0x8,%esp
+     dc0:	ff 75 0c             	pushl  0xc(%ebp)
+     dc3:	89 c3                	mov    %eax,%ebx
+     dc5:	50                   	push   %eax
+     dc6:	e8 f0 00 00 00       	call   ebb <fstat>
+  close(fd);
+     dcb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     dce:	89 c6                	mov    %eax,%esi
+  close(fd);
+     dd0:	e8 b6 00 00 00       	call   e8b <close>
+  return r;
+     dd5:	83 c4 10             	add    $0x10,%esp
+}
+     dd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ddb:	89 f0                	mov    %esi,%eax
+     ddd:	5b                   	pop    %ebx
+     dde:	5e                   	pop    %esi
+     ddf:	5d                   	pop    %ebp
+     de0:	c3                   	ret    
+     de1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+     de8:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     ded:	eb e9                	jmp    dd8 <stat+0x38>
+     def:	90                   	nop
+
+00000df0 <atoi>:
+
+int
+atoi(const char *s)
+{
+     df0:	f3 0f 1e fb          	endbr32 
+     df4:	55                   	push   %ebp
+     df5:	89 e5                	mov    %esp,%ebp
+     df7:	53                   	push   %ebx
+     df8:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     dfb:	0f be 02             	movsbl (%edx),%eax
+     dfe:	8d 48 d0             	lea    -0x30(%eax),%ecx
+     e01:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+     e04:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+     e09:	77 1a                	ja     e25 <atoi+0x35>
+     e0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     e0f:	90                   	nop
+    n = n*10 + *s++ - '0';
+     e10:	83 c2 01             	add    $0x1,%edx
+     e13:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+     e16:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+     e1a:	0f be 02             	movsbl (%edx),%eax
+     e1d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+     e20:	80 fb 09             	cmp    $0x9,%bl
+     e23:	76 eb                	jbe    e10 <atoi+0x20>
+  return n;
+}
+     e25:	89 c8                	mov    %ecx,%eax
+     e27:	5b                   	pop    %ebx
+     e28:	5d                   	pop    %ebp
+     e29:	c3                   	ret    
+     e2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000e30 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     e30:	f3 0f 1e fb          	endbr32 
+     e34:	55                   	push   %ebp
+     e35:	89 e5                	mov    %esp,%ebp
+     e37:	57                   	push   %edi
+     e38:	8b 45 10             	mov    0x10(%ebp),%eax
+     e3b:	8b 55 08             	mov    0x8(%ebp),%edx
+     e3e:	56                   	push   %esi
+     e3f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     e42:	85 c0                	test   %eax,%eax
+     e44:	7e 0f                	jle    e55 <memmove+0x25>
+     e46:	01 d0                	add    %edx,%eax
+  dst = vdst;
+     e48:	89 d7                	mov    %edx,%edi
+     e4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+     e50:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+     e51:	39 f8                	cmp    %edi,%eax
+     e53:	75 fb                	jne    e50 <memmove+0x20>
+  return vdst;
+}
+     e55:	5e                   	pop    %esi
+     e56:	89 d0                	mov    %edx,%eax
+     e58:	5f                   	pop    %edi
+     e59:	5d                   	pop    %ebp
+     e5a:	c3                   	ret    
+
+00000e5b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     e5b:	b8 01 00 00 00       	mov    $0x1,%eax
+     e60:	cd 40                	int    $0x40
+     e62:	c3                   	ret    
+
+00000e63 <exit>:
+SYSCALL(exit)
+     e63:	b8 02 00 00 00       	mov    $0x2,%eax
+     e68:	cd 40                	int    $0x40
+     e6a:	c3                   	ret    
+
+00000e6b <wait>:
+SYSCALL(wait)
+     e6b:	b8 03 00 00 00       	mov    $0x3,%eax
+     e70:	cd 40                	int    $0x40
+     e72:	c3                   	ret    
+
+00000e73 <pipe>:
+SYSCALL(pipe)
+     e73:	b8 04 00 00 00       	mov    $0x4,%eax
+     e78:	cd 40                	int    $0x40
+     e7a:	c3                   	ret    
+
+00000e7b <read>:
+SYSCALL(read)
+     e7b:	b8 05 00 00 00       	mov    $0x5,%eax
+     e80:	cd 40                	int    $0x40
+     e82:	c3                   	ret    
+
+00000e83 <write>:
+SYSCALL(write)
+     e83:	b8 10 00 00 00       	mov    $0x10,%eax
+     e88:	cd 40                	int    $0x40
+     e8a:	c3                   	ret    
+
+00000e8b <close>:
+SYSCALL(close)
+     e8b:	b8 15 00 00 00       	mov    $0x15,%eax
+     e90:	cd 40                	int    $0x40
+     e92:	c3                   	ret    
+
+00000e93 <kill>:
+SYSCALL(kill)
+     e93:	b8 06 00 00 00       	mov    $0x6,%eax
+     e98:	cd 40                	int    $0x40
+     e9a:	c3                   	ret    
+
+00000e9b <exec>:
+SYSCALL(exec)
+     e9b:	b8 07 00 00 00       	mov    $0x7,%eax
+     ea0:	cd 40                	int    $0x40
+     ea2:	c3                   	ret    
+
+00000ea3 <open>:
+SYSCALL(open)
+     ea3:	b8 0f 00 00 00       	mov    $0xf,%eax
+     ea8:	cd 40                	int    $0x40
+     eaa:	c3                   	ret    
+
+00000eab <mknod>:
+SYSCALL(mknod)
+     eab:	b8 11 00 00 00       	mov    $0x11,%eax
+     eb0:	cd 40                	int    $0x40
+     eb2:	c3                   	ret    
+
+00000eb3 <unlink>:
+SYSCALL(unlink)
+     eb3:	b8 12 00 00 00       	mov    $0x12,%eax
+     eb8:	cd 40                	int    $0x40
+     eba:	c3                   	ret    
+
+00000ebb <fstat>:
+SYSCALL(fstat)
+     ebb:	b8 08 00 00 00       	mov    $0x8,%eax
+     ec0:	cd 40                	int    $0x40
+     ec2:	c3                   	ret    
+
+00000ec3 <link>:
+SYSCALL(link)
+     ec3:	b8 13 00 00 00       	mov    $0x13,%eax
+     ec8:	cd 40                	int    $0x40
+     eca:	c3                   	ret    
+
+00000ecb <mkdir>:
+SYSCALL(mkdir)
+     ecb:	b8 14 00 00 00       	mov    $0x14,%eax
+     ed0:	cd 40                	int    $0x40
+     ed2:	c3                   	ret    
+
+00000ed3 <chdir>:
+SYSCALL(chdir)
+     ed3:	b8 09 00 00 00       	mov    $0x9,%eax
+     ed8:	cd 40                	int    $0x40
+     eda:	c3                   	ret    
+
+00000edb <dup>:
+SYSCALL(dup)
+     edb:	b8 0a 00 00 00       	mov    $0xa,%eax
+     ee0:	cd 40                	int    $0x40
+     ee2:	c3                   	ret    
+
+00000ee3 <getpid>:
+SYSCALL(getpid)
+     ee3:	b8 0b 00 00 00       	mov    $0xb,%eax
+     ee8:	cd 40                	int    $0x40
+     eea:	c3                   	ret    
+
+00000eeb <sbrk>:
+SYSCALL(sbrk)
+     eeb:	b8 0c 00 00 00       	mov    $0xc,%eax
+     ef0:	cd 40                	int    $0x40
+     ef2:	c3                   	ret    
+
+00000ef3 <sleep>:
+SYSCALL(sleep)
+     ef3:	b8 0d 00 00 00       	mov    $0xd,%eax
+     ef8:	cd 40                	int    $0x40
+     efa:	c3                   	ret    
+
+00000efb <uptime>:
+SYSCALL(uptime)
+     efb:	b8 0e 00 00 00       	mov    $0xe,%eax
+     f00:	cd 40                	int    $0x40
+     f02:	c3                   	ret    
+
+00000f03 <draw>:
+SYSCALL(draw)
+     f03:	b8 16 00 00 00       	mov    $0x16,%eax
+     f08:	cd 40                	int    $0x40
+     f0a:	c3                   	ret    
+
+00000f0b <history>:
+     f0b:	b8 17 00 00 00       	mov    $0x17,%eax
+     f10:	cd 40                	int    $0x40
+     f12:	c3                   	ret    
+     f13:	66 90                	xchg   %ax,%ax
+     f15:	66 90                	xchg   %ax,%ax
+     f17:	66 90                	xchg   %ax,%ax
+     f19:	66 90                	xchg   %ax,%ax
+     f1b:	66 90                	xchg   %ax,%ax
+     f1d:	66 90                	xchg   %ax,%ax
+     f1f:	90                   	nop
+
+00000f20 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     f20:	55                   	push   %ebp
+     f21:	89 e5                	mov    %esp,%ebp
+     f23:	57                   	push   %edi
+     f24:	56                   	push   %esi
+     f25:	53                   	push   %ebx
+     f26:	83 ec 3c             	sub    $0x3c,%esp
+     f29:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+     f2c:	89 d1                	mov    %edx,%ecx
+{
+     f2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+     f31:	85 d2                	test   %edx,%edx
+     f33:	0f 89 7f 00 00 00    	jns    fb8 <printint+0x98>
+     f39:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     f3d:	74 79                	je     fb8 <printint+0x98>
+    neg = 1;
+     f3f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+     f46:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     f48:	31 db                	xor    %ebx,%ebx
+     f4a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     f4d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     f50:	89 c8                	mov    %ecx,%eax
+     f52:	31 d2                	xor    %edx,%edx
+     f54:	89 cf                	mov    %ecx,%edi
+     f56:	f7 75 c4             	divl   -0x3c(%ebp)
+     f59:	0f b6 92 30 14 00 00 	movzbl 0x1430(%edx),%edx
+     f60:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     f63:	89 d8                	mov    %ebx,%eax
+     f65:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+     f68:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+     f6b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+     f6e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     f71:	76 dd                	jbe    f50 <printint+0x30>
+  if(neg)
+     f73:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     f76:	85 c9                	test   %ecx,%ecx
+     f78:	74 0c                	je     f86 <printint+0x66>
+    buf[i++] = '-';
+     f7a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+     f7f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+     f81:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+     f86:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     f89:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     f8d:	eb 07                	jmp    f96 <printint+0x76>
+     f8f:	90                   	nop
+     f90:	0f b6 13             	movzbl (%ebx),%edx
+     f93:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+     f96:	83 ec 04             	sub    $0x4,%esp
+     f99:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     f9c:	6a 01                	push   $0x1
+     f9e:	56                   	push   %esi
+     f9f:	57                   	push   %edi
+     fa0:	e8 de fe ff ff       	call   e83 <write>
+  while(--i >= 0)
+     fa5:	83 c4 10             	add    $0x10,%esp
+     fa8:	39 de                	cmp    %ebx,%esi
+     faa:	75 e4                	jne    f90 <printint+0x70>
+    putc(fd, buf[i]);
+}
+     fac:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     faf:	5b                   	pop    %ebx
+     fb0:	5e                   	pop    %esi
+     fb1:	5f                   	pop    %edi
+     fb2:	5d                   	pop    %ebp
+     fb3:	c3                   	ret    
+     fb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     fb8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     fbf:	eb 87                	jmp    f48 <printint+0x28>
+     fc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fcf:	90                   	nop
+
+00000fd0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     fd0:	f3 0f 1e fb          	endbr32 
+     fd4:	55                   	push   %ebp
+     fd5:	89 e5                	mov    %esp,%ebp
+     fd7:	57                   	push   %edi
+     fd8:	56                   	push   %esi
+     fd9:	53                   	push   %ebx
+     fda:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     fdd:	8b 75 0c             	mov    0xc(%ebp),%esi
+     fe0:	0f b6 1e             	movzbl (%esi),%ebx
+     fe3:	84 db                	test   %bl,%bl
+     fe5:	0f 84 b4 00 00 00    	je     109f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+     feb:	8d 45 10             	lea    0x10(%ebp),%eax
+     fee:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+     ff1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+     ff4:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+     ff6:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     ff9:	eb 33                	jmp    102e <printf+0x5e>
+     ffb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     fff:	90                   	nop
+    1000:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    1003:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+    1008:	83 f8 25             	cmp    $0x25,%eax
+    100b:	74 17                	je     1024 <printf+0x54>
+  write(fd, &c, 1);
+    100d:	83 ec 04             	sub    $0x4,%esp
+    1010:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    1013:	6a 01                	push   $0x1
+    1015:	57                   	push   %edi
+    1016:	ff 75 08             	pushl  0x8(%ebp)
+    1019:	e8 65 fe ff ff       	call   e83 <write>
+    101e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+    1021:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    1024:	0f b6 1e             	movzbl (%esi),%ebx
+    1027:	83 c6 01             	add    $0x1,%esi
+    102a:	84 db                	test   %bl,%bl
+    102c:	74 71                	je     109f <printf+0xcf>
+    c = fmt[i] & 0xff;
+    102e:	0f be cb             	movsbl %bl,%ecx
+    1031:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    1034:	85 d2                	test   %edx,%edx
+    1036:	74 c8                	je     1000 <printf+0x30>
+      }
+    } else if(state == '%'){
+    1038:	83 fa 25             	cmp    $0x25,%edx
+    103b:	75 e7                	jne    1024 <printf+0x54>
+      if(c == 'd'){
+    103d:	83 f8 64             	cmp    $0x64,%eax
+    1040:	0f 84 9a 00 00 00    	je     10e0 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    1046:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    104c:	83 f9 70             	cmp    $0x70,%ecx
+    104f:	74 5f                	je     10b0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    1051:	83 f8 73             	cmp    $0x73,%eax
+    1054:	0f 84 d6 00 00 00    	je     1130 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    105a:	83 f8 63             	cmp    $0x63,%eax
+    105d:	0f 84 8d 00 00 00    	je     10f0 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    1063:	83 f8 25             	cmp    $0x25,%eax
+    1066:	0f 84 b4 00 00 00    	je     1120 <printf+0x150>
+  write(fd, &c, 1);
+    106c:	83 ec 04             	sub    $0x4,%esp
+    106f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    1073:	6a 01                	push   $0x1
+    1075:	57                   	push   %edi
+    1076:	ff 75 08             	pushl  0x8(%ebp)
+    1079:	e8 05 fe ff ff       	call   e83 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+    107e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    1081:	83 c4 0c             	add    $0xc,%esp
+    1084:	6a 01                	push   $0x1
+    1086:	83 c6 01             	add    $0x1,%esi
+    1089:	57                   	push   %edi
+    108a:	ff 75 08             	pushl  0x8(%ebp)
+    108d:	e8 f1 fd ff ff       	call   e83 <write>
+  for(i = 0; fmt[i]; i++){
+    1092:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+    1096:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    1099:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+    109b:	84 db                	test   %bl,%bl
+    109d:	75 8f                	jne    102e <printf+0x5e>
+    }
+  }
+}
+    109f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    10a2:	5b                   	pop    %ebx
+    10a3:	5e                   	pop    %esi
+    10a4:	5f                   	pop    %edi
+    10a5:	5d                   	pop    %ebp
+    10a6:	c3                   	ret    
+    10a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10ae:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+    10b0:	83 ec 0c             	sub    $0xc,%esp
+    10b3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    10b8:	6a 00                	push   $0x0
+    10ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    10bd:	8b 45 08             	mov    0x8(%ebp),%eax
+    10c0:	8b 13                	mov    (%ebx),%edx
+    10c2:	e8 59 fe ff ff       	call   f20 <printint>
+        ap++;
+    10c7:	89 d8                	mov    %ebx,%eax
+    10c9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    10cc:	31 d2                	xor    %edx,%edx
+        ap++;
+    10ce:	83 c0 04             	add    $0x4,%eax
+    10d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    10d4:	e9 4b ff ff ff       	jmp    1024 <printf+0x54>
+    10d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    10e0:	83 ec 0c             	sub    $0xc,%esp
+    10e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    10e8:	6a 01                	push   $0x1
+    10ea:	eb ce                	jmp    10ba <printf+0xea>
+    10ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    10f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    10f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    10f6:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    10f8:	6a 01                	push   $0x1
+        ap++;
+    10fa:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    10fd:	57                   	push   %edi
+    10fe:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    1101:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1104:	e8 7a fd ff ff       	call   e83 <write>
+        ap++;
+    1109:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    110c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    110f:	31 d2                	xor    %edx,%edx
+    1111:	e9 0e ff ff ff       	jmp    1024 <printf+0x54>
+    1116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    111d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    1120:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    1123:	83 ec 04             	sub    $0x4,%esp
+    1126:	e9 59 ff ff ff       	jmp    1084 <printf+0xb4>
+    112b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    112f:	90                   	nop
+        s = (char*)*ap;
+    1130:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1133:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    1135:	83 c0 04             	add    $0x4,%eax
+    1138:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    113b:	85 db                	test   %ebx,%ebx
+    113d:	74 17                	je     1156 <printf+0x186>
+        while(*s != 0){
+    113f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    1142:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    1144:	84 c0                	test   %al,%al
+    1146:	0f 84 d8 fe ff ff    	je     1024 <printf+0x54>
+    114c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    114f:	89 de                	mov    %ebx,%esi
+    1151:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1154:	eb 1a                	jmp    1170 <printf+0x1a0>
+          s = "(null)";
+    1156:	bb 28 14 00 00       	mov    $0x1428,%ebx
+        while(*s != 0){
+    115b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    115e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1163:	89 de                	mov    %ebx,%esi
+    1165:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1168:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    116f:	90                   	nop
+  write(fd, &c, 1);
+    1170:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    1173:	83 c6 01             	add    $0x1,%esi
+    1176:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    1179:	6a 01                	push   $0x1
+    117b:	57                   	push   %edi
+    117c:	53                   	push   %ebx
+    117d:	e8 01 fd ff ff       	call   e83 <write>
+        while(*s != 0){
+    1182:	0f b6 06             	movzbl (%esi),%eax
+    1185:	83 c4 10             	add    $0x10,%esp
+    1188:	84 c0                	test   %al,%al
+    118a:	75 e4                	jne    1170 <printf+0x1a0>
+    118c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    118f:	31 d2                	xor    %edx,%edx
+    1191:	e9 8e fe ff ff       	jmp    1024 <printf+0x54>
+    1196:	66 90                	xchg   %ax,%ax
+    1198:	66 90                	xchg   %ax,%ax
+    119a:	66 90                	xchg   %ax,%ax
+    119c:	66 90                	xchg   %ax,%ax
+    119e:	66 90                	xchg   %ax,%ax
+
+000011a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    11a0:	f3 0f 1e fb          	endbr32 
+    11a4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11a5:	a1 a4 1a 00 00       	mov    0x1aa4,%eax
+{
+    11aa:	89 e5                	mov    %esp,%ebp
+    11ac:	57                   	push   %edi
+    11ad:	56                   	push   %esi
+    11ae:	53                   	push   %ebx
+    11af:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    11b2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    11b4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11b7:	39 c8                	cmp    %ecx,%eax
+    11b9:	73 15                	jae    11d0 <free+0x30>
+    11bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    11bf:	90                   	nop
+    11c0:	39 d1                	cmp    %edx,%ecx
+    11c2:	72 14                	jb     11d8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    11c4:	39 d0                	cmp    %edx,%eax
+    11c6:	73 10                	jae    11d8 <free+0x38>
+{
+    11c8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    11ca:	8b 10                	mov    (%eax),%edx
+    11cc:	39 c8                	cmp    %ecx,%eax
+    11ce:	72 f0                	jb     11c0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    11d0:	39 d0                	cmp    %edx,%eax
+    11d2:	72 f4                	jb     11c8 <free+0x28>
+    11d4:	39 d1                	cmp    %edx,%ecx
+    11d6:	73 f0                	jae    11c8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    11d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    11db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    11de:	39 fa                	cmp    %edi,%edx
+    11e0:	74 1e                	je     1200 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    11e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    11e5:	8b 50 04             	mov    0x4(%eax),%edx
+    11e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    11eb:	39 f1                	cmp    %esi,%ecx
+    11ed:	74 28                	je     1217 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    11ef:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    11f1:	5b                   	pop    %ebx
+  freep = p;
+    11f2:	a3 a4 1a 00 00       	mov    %eax,0x1aa4
+}
+    11f7:	5e                   	pop    %esi
+    11f8:	5f                   	pop    %edi
+    11f9:	5d                   	pop    %ebp
+    11fa:	c3                   	ret    
+    11fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    11ff:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    1200:	03 72 04             	add    0x4(%edx),%esi
+    1203:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1206:	8b 10                	mov    (%eax),%edx
+    1208:	8b 12                	mov    (%edx),%edx
+    120a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    120d:	8b 50 04             	mov    0x4(%eax),%edx
+    1210:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1213:	39 f1                	cmp    %esi,%ecx
+    1215:	75 d8                	jne    11ef <free+0x4f>
+    p->s.size += bp->s.size;
+    1217:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    121a:	a3 a4 1a 00 00       	mov    %eax,0x1aa4
+    p->s.size += bp->s.size;
+    121f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    1222:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    1225:	89 10                	mov    %edx,(%eax)
+}
+    1227:	5b                   	pop    %ebx
+    1228:	5e                   	pop    %esi
+    1229:	5f                   	pop    %edi
+    122a:	5d                   	pop    %ebp
+    122b:	c3                   	ret    
+    122c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001230 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    1230:	f3 0f 1e fb          	endbr32 
+    1234:	55                   	push   %ebp
+    1235:	89 e5                	mov    %esp,%ebp
+    1237:	57                   	push   %edi
+    1238:	56                   	push   %esi
+    1239:	53                   	push   %ebx
+    123a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    123d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    1240:	8b 3d a4 1a 00 00    	mov    0x1aa4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    1246:	8d 70 07             	lea    0x7(%eax),%esi
+    1249:	c1 ee 03             	shr    $0x3,%esi
+    124c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    124f:	85 ff                	test   %edi,%edi
+    1251:	0f 84 a9 00 00 00    	je     1300 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1257:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    1259:	8b 48 04             	mov    0x4(%eax),%ecx
+    125c:	39 f1                	cmp    %esi,%ecx
+    125e:	73 6d                	jae    12cd <malloc+0x9d>
+    1260:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    1266:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    126b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    126e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    1275:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    1278:	eb 17                	jmp    1291 <malloc+0x61>
+    127a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1280:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    1282:	8b 4a 04             	mov    0x4(%edx),%ecx
+    1285:	39 f1                	cmp    %esi,%ecx
+    1287:	73 4f                	jae    12d8 <malloc+0xa8>
+    1289:	8b 3d a4 1a 00 00    	mov    0x1aa4,%edi
+    128f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1291:	39 c7                	cmp    %eax,%edi
+    1293:	75 eb                	jne    1280 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    1295:	83 ec 0c             	sub    $0xc,%esp
+    1298:	ff 75 e4             	pushl  -0x1c(%ebp)
+    129b:	e8 4b fc ff ff       	call   eeb <sbrk>
+  if(p == (char*)-1)
+    12a0:	83 c4 10             	add    $0x10,%esp
+    12a3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    12a6:	74 1b                	je     12c3 <malloc+0x93>
+  hp->s.size = nu;
+    12a8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    12ab:	83 ec 0c             	sub    $0xc,%esp
+    12ae:	83 c0 08             	add    $0x8,%eax
+    12b1:	50                   	push   %eax
+    12b2:	e8 e9 fe ff ff       	call   11a0 <free>
+  return freep;
+    12b7:	a1 a4 1a 00 00       	mov    0x1aa4,%eax
+      if((p = morecore(nunits)) == 0)
+    12bc:	83 c4 10             	add    $0x10,%esp
+    12bf:	85 c0                	test   %eax,%eax
+    12c1:	75 bd                	jne    1280 <malloc+0x50>
+        return 0;
+  }
+}
+    12c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    12c6:	31 c0                	xor    %eax,%eax
+}
+    12c8:	5b                   	pop    %ebx
+    12c9:	5e                   	pop    %esi
+    12ca:	5f                   	pop    %edi
+    12cb:	5d                   	pop    %ebp
+    12cc:	c3                   	ret    
+    if(p->s.size >= nunits){
+    12cd:	89 c2                	mov    %eax,%edx
+    12cf:	89 f8                	mov    %edi,%eax
+    12d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    12d8:	39 ce                	cmp    %ecx,%esi
+    12da:	74 54                	je     1330 <malloc+0x100>
+        p->s.size -= nunits;
+    12dc:	29 f1                	sub    %esi,%ecx
+    12de:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    12e1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    12e4:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    12e7:	a3 a4 1a 00 00       	mov    %eax,0x1aa4
+}
+    12ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    12ef:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    12f2:	5b                   	pop    %ebx
+    12f3:	5e                   	pop    %esi
+    12f4:	5f                   	pop    %edi
+    12f5:	5d                   	pop    %ebp
+    12f6:	c3                   	ret    
+    12f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    12fe:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    1300:	c7 05 a4 1a 00 00 a8 	movl   $0x1aa8,0x1aa4
+    1307:	1a 00 00 
+    base.s.size = 0;
+    130a:	bf a8 1a 00 00       	mov    $0x1aa8,%edi
+    base.s.ptr = freep = prevp = &base;
+    130f:	c7 05 a8 1a 00 00 a8 	movl   $0x1aa8,0x1aa8
+    1316:	1a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1319:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    131b:	c7 05 ac 1a 00 00 00 	movl   $0x0,0x1aac
+    1322:	00 00 00 
+    if(p->s.size >= nunits){
+    1325:	e9 36 ff ff ff       	jmp    1260 <malloc+0x30>
+    132a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    1330:	8b 0a                	mov    (%edx),%ecx
+    1332:	89 08                	mov    %ecx,(%eax)
+    1334:	eb b1                	jmp    12e7 <malloc+0xb7>
diff -ruN xv6-public/sh.c xv6-public_task_1/sh.c
--- xv6-public/sh.c	2021-09-15 22:30:13.477050520 +0530
+++ xv6-public_task_1/sh.c	2021-09-14 22:19:36.458069000 +0530
@@ -140,6 +140,19 @@
     return -1;
   return 0;
 }
+char getHistoryCommand[INPUT_BUF];
+
+void printHistory(){
+  uint i ;
+  uint count = 0;
+  for(i= 0; i <MAX_HISTORY; i++){
+    if(history(getHistoryCommand, i) == 0){
+      count++;
+      printf(1, "%d: %s\n", count, getHistoryCommand);
+    }
+  }
+  return;
+}
 
 int
 main(void)
@@ -164,6 +177,10 @@
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
+    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's'  && buf[3] == 't' && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y' && buf[7] == '\n'){
+      printHistory();
+      continue;
+    }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
     wait();
diff -ruN xv6-public/sh.d xv6-public_task_1/sh.d
--- xv6-public/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/sh.d	2021-09-15 20:34:58.652371000 +0530
@@ -0,0 +1 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
Binary files xv6-public/sh.o and xv6-public_task_1/sh.o differ
diff -ruN xv6-public/sh.sym xv6-public_task_1/sh.sym
--- xv6-public/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/sh.sym	2021-09-15 20:34:58.692371000 +0530
@@ -0,0 +1,83 @@
+00000000 .text
+00001338 .rodata
+00001444 .eh_frame
+00001a2c .data
+00001a40 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 sh.c
+00001a40 buf.1137
+00000000 ulib.c
+00000000 printf.c
+00000f20 printint
+00001430 digits.1091
+00000000 umalloc.c
+00001aa4 freep
+00001aa8 base
+00000c00 strcpy
+00000fd0 printf
+00000e30 memmove
+00000eab mknod
+00000440 execcmd
+00000d20 gets
+00000ee3 getpid
+00000920 parsepipe
+00000b90 parsecmd
+00000540 backcmd
+000006e0 peek
+00000760 parseredirs
+00000580 gettoken
+00001230 malloc
+00000ef3 sleep
+00001a34 whitespace
+00000410 fork1
+000001d0 printHistory
+00000ad0 nulterminate
+00000e73 pipe
+00001ac0 getHistoryCommand
+00000180 getcmd
+00000e83 write
+00000f0b history
+00000ebb fstat
+00000e93 kill
+00000ed3 chdir
+00000990 parseline
+00000250 runcmd
+00000a40 parseblock
+00000e9b exec
+00000e6b wait
+00001a2c symbols
+00000e7b read
+00000810 parseexec
+00000eb3 unlink
+00000230 panic
+00000e5b fork
+00000eeb sbrk
+00000efb uptime
+00001a3a __bss_start
+00000cc0 memset
+00000000 main
+00000c30 strcmp
+00000edb dup
+000004c0 pipecmd
+00000470 redircmd
+00000da0 stat
+00001a3a _edata
+00001b40 _end
+00000ec3 link
+00000e63 exit
+00000df0 atoi
+00000f03 draw
+00000c80 strlen
+00000ea3 open
+00000ce0 strchr
+00000ecb mkdir
+00000e8b close
+00000500 listcmd
+000011a0 free
diff -ruN xv6-public/sleeplock.d xv6-public_task_1/sleeplock.d
--- xv6-public/sleeplock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/sleeplock.d	2021-09-15 20:34:55.040377000 +0530
@@ -0,0 +1,2 @@
+sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
+ param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
Binary files xv6-public/sleeplock.o and xv6-public_task_1/sleeplock.o differ
diff -ruN xv6-public/spinlock.d xv6-public_task_1/spinlock.d
--- xv6-public/spinlock.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/spinlock.d	2021-09-15 20:34:55.132377000 +0530
@@ -0,0 +1,2 @@
+spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ x86.h memlayout.h mmu.h proc.h spinlock.h
Binary files xv6-public/spinlock.o and xv6-public_task_1/spinlock.o differ
Binary files xv6-public/_stressfs and xv6-public_task_1/_stressfs differ
diff -ruN xv6-public/stressfs.asm xv6-public_task_1/stressfs.asm
--- xv6-public/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/stressfs.asm	2021-09-15 20:34:58.764371000 +0530
@@ -0,0 +1,1303 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   b:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+  10:	ff 71 fc             	pushl  -0x4(%ecx)
+  13:	55                   	push   %ebp
+  14:	89 e5                	mov    %esp,%ebp
+  16:	57                   	push   %edi
+  17:	56                   	push   %esi
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  18:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+{
+  1e:	53                   	push   %ebx
+
+  for(i = 0; i < 4; i++)
+  1f:	31 db                	xor    %ebx,%ebx
+{
+  21:	51                   	push   %ecx
+  22:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  28:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  printf(1, "stressfs starting\n");
+  2f:	68 78 08 00 00       	push   $0x878
+  34:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  36:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  3d:	74 72 65 
+  40:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  47:	73 66 73 
+  printf(1, "stressfs starting\n");
+  4a:	e8 c1 04 00 00       	call   510 <printf>
+  memset(data, 'a', sizeof(data));
+  4f:	83 c4 0c             	add    $0xc,%esp
+  52:	68 00 02 00 00       	push   $0x200
+  57:	6a 61                	push   $0x61
+  59:	56                   	push   %esi
+  5a:	e8 a1 01 00 00       	call   200 <memset>
+  5f:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  62:	e8 34 03 00 00       	call   39b <fork>
+  67:	85 c0                	test   %eax,%eax
+  69:	0f 8f bb 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6f:	83 c3 01             	add    $0x1,%ebx
+  72:	83 fb 04             	cmp    $0x4,%ebx
+  75:	75 eb                	jne    62 <main+0x62>
+  77:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  7c:	83 ec 04             	sub    $0x4,%esp
+  7f:	53                   	push   %ebx
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  80:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  85:	68 8b 08 00 00       	push   $0x88b
+  8a:	6a 01                	push   $0x1
+  8c:	e8 7f 04 00 00       	call   510 <printf>
+  path[8] += i;
+  91:	89 f8                	mov    %edi,%eax
+  fd = open(path, O_CREATE | O_RDWR);
+  93:	5f                   	pop    %edi
+  path[8] += i;
+  94:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  9a:	58                   	pop    %eax
+  9b:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  a1:	68 02 02 00 00       	push   $0x202
+  a6:	50                   	push   %eax
+  a7:	e8 37 03 00 00       	call   3e3 <open>
+  ac:	83 c4 10             	add    $0x10,%esp
+  af:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < 20; i++)
+  b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b8:	83 ec 04             	sub    $0x4,%esp
+  bb:	68 00 02 00 00       	push   $0x200
+  c0:	56                   	push   %esi
+  c1:	57                   	push   %edi
+  c2:	e8 fc 02 00 00       	call   3c3 <write>
+  for(i = 0; i < 20; i++)
+  c7:	83 c4 10             	add    $0x10,%esp
+  ca:	83 eb 01             	sub    $0x1,%ebx
+  cd:	75 e9                	jne    b8 <main+0xb8>
+  close(fd);
+  cf:	83 ec 0c             	sub    $0xc,%esp
+  d2:	57                   	push   %edi
+  d3:	e8 f3 02 00 00       	call   3cb <close>
+
+  printf(1, "read\n");
+  d8:	58                   	pop    %eax
+  d9:	5a                   	pop    %edx
+  da:	68 95 08 00 00       	push   $0x895
+  df:	6a 01                	push   $0x1
+  e1:	e8 2a 04 00 00       	call   510 <printf>
+
+  fd = open(path, O_RDONLY);
+  e6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  ec:	59                   	pop    %ecx
+  ed:	5b                   	pop    %ebx
+  ee:	6a 00                	push   $0x0
+  f0:	bb 14 00 00 00       	mov    $0x14,%ebx
+  f5:	50                   	push   %eax
+  f6:	e8 e8 02 00 00       	call   3e3 <open>
+  fb:	83 c4 10             	add    $0x10,%esp
+  fe:	89 c7                	mov    %eax,%edi
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 ac 02 00 00       	call   3bb <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 ab 02 00 00       	call   3cb <close>
+
+  wait();
+ 120:	e8 86 02 00 00       	call   3ab <wait>
+
+  exit();
+ 125:	e8 79 02 00 00       	call   3a3 <exit>
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 4b ff ff ff       	jmp    7c <main+0x7c>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	f3 0f 1e fb          	endbr32 
+ 144:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 145:	31 c0                	xor    %eax,%eax
+{
+ 147:	89 e5                	mov    %esp,%ebp
+ 149:	53                   	push   %ebx
+ 14a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 14d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 154:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 157:	83 c0 01             	add    $0x1,%eax
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	89 c8                	mov    %ecx,%eax
+ 160:	5b                   	pop    %ebx
+ 161:	5d                   	pop    %ebp
+ 162:	c3                   	ret    
+ 163:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	f3 0f 1e fb          	endbr32 
+ 174:	55                   	push   %ebp
+ 175:	89 e5                	mov    %esp,%ebp
+ 177:	53                   	push   %ebx
+ 178:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 17b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 17e:	0f b6 01             	movzbl (%ecx),%eax
+ 181:	0f b6 1a             	movzbl (%edx),%ebx
+ 184:	84 c0                	test   %al,%al
+ 186:	75 19                	jne    1a1 <strcmp+0x31>
+ 188:	eb 26                	jmp    1b0 <strcmp+0x40>
+ 18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 190:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 194:	83 c1 01             	add    $0x1,%ecx
+ 197:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 19a:	0f b6 1a             	movzbl (%edx),%ebx
+ 19d:	84 c0                	test   %al,%al
+ 19f:	74 0f                	je     1b0 <strcmp+0x40>
+ 1a1:	38 d8                	cmp    %bl,%al
+ 1a3:	74 eb                	je     190 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1a5:	29 d8                	sub    %ebx,%eax
+}
+ 1a7:	5b                   	pop    %ebx
+ 1a8:	5d                   	pop    %ebp
+ 1a9:	c3                   	ret    
+ 1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1b0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 1b2:	29 d8                	sub    %ebx,%eax
+}
+ 1b4:	5b                   	pop    %ebx
+ 1b5:	5d                   	pop    %ebp
+ 1b6:	c3                   	ret    
+ 1b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1be:	66 90                	xchg   %ax,%ax
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1ca:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1cd:	74 21                	je     1f0 <strlen+0x30>
+ 1cf:	31 c0                	xor    %eax,%eax
+ 1d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1d8:	83 c0 01             	add    $0x1,%eax
+ 1db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1df:	89 c1                	mov    %eax,%ecx
+ 1e1:	75 f5                	jne    1d8 <strlen+0x18>
+    ;
+  return n;
+}
+ 1e3:	89 c8                	mov    %ecx,%eax
+ 1e5:	5d                   	pop    %ebp
+ 1e6:	c3                   	ret    
+ 1e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ee:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c9                	xor    %ecx,%ecx
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	c3                   	ret    
+ 1f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	f3 0f 1e fb          	endbr32 
+ 204:	55                   	push   %ebp
+ 205:	89 e5                	mov    %esp,%ebp
+ 207:	57                   	push   %edi
+ 208:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 20b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 211:	89 d7                	mov    %edx,%edi
+ 213:	fc                   	cld    
+ 214:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 216:	89 d0                	mov    %edx,%eax
+ 218:	5f                   	pop    %edi
+ 219:	5d                   	pop    %ebp
+ 21a:	c3                   	ret    
+ 21b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 21f:	90                   	nop
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	8b 45 08             	mov    0x8(%ebp),%eax
+ 22a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 22e:	0f b6 10             	movzbl (%eax),%edx
+ 231:	84 d2                	test   %dl,%dl
+ 233:	75 16                	jne    24b <strchr+0x2b>
+ 235:	eb 21                	jmp    258 <strchr+0x38>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+ 240:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 244:	83 c0 01             	add    $0x1,%eax
+ 247:	84 d2                	test   %dl,%dl
+ 249:	74 0d                	je     258 <strchr+0x38>
+    if(*s == c)
+ 24b:	38 d1                	cmp    %dl,%cl
+ 24d:	75 f1                	jne    240 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 24f:	5d                   	pop    %ebp
+ 250:	c3                   	ret    
+ 251:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 258:	31 c0                	xor    %eax,%eax
+}
+ 25a:	5d                   	pop    %ebp
+ 25b:	c3                   	ret    
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 269:	31 f6                	xor    %esi,%esi
+{
+ 26b:	53                   	push   %ebx
+ 26c:	89 f3                	mov    %esi,%ebx
+ 26e:	83 ec 1c             	sub    $0x1c,%esp
+ 271:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 274:	eb 33                	jmp    2a9 <gets+0x49>
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 280:	83 ec 04             	sub    $0x4,%esp
+ 283:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 286:	6a 01                	push   $0x1
+ 288:	50                   	push   %eax
+ 289:	6a 00                	push   $0x0
+ 28b:	e8 2b 01 00 00       	call   3bb <read>
+    if(cc < 1)
+ 290:	83 c4 10             	add    $0x10,%esp
+ 293:	85 c0                	test   %eax,%eax
+ 295:	7e 1c                	jle    2b3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 297:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 29b:	83 c7 01             	add    $0x1,%edi
+ 29e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2a1:	3c 0a                	cmp    $0xa,%al
+ 2a3:	74 23                	je     2c8 <gets+0x68>
+ 2a5:	3c 0d                	cmp    $0xd,%al
+ 2a7:	74 1f                	je     2c8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2a9:	83 c3 01             	add    $0x1,%ebx
+ 2ac:	89 fe                	mov    %edi,%esi
+ 2ae:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2b1:	7c cd                	jl     280 <gets+0x20>
+ 2b3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 2b5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 2b8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2bb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2be:	5b                   	pop    %ebx
+ 2bf:	5e                   	pop    %esi
+ 2c0:	5f                   	pop    %edi
+ 2c1:	5d                   	pop    %ebp
+ 2c2:	c3                   	ret    
+ 2c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2c7:	90                   	nop
+ 2c8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 2cb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2ce:	01 de                	add    %ebx,%esi
+ 2d0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 2d2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 2d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d8:	5b                   	pop    %ebx
+ 2d9:	5e                   	pop    %esi
+ 2da:	5f                   	pop    %edi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000002e0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2e0:	f3 0f 1e fb          	endbr32 
+ 2e4:	55                   	push   %ebp
+ 2e5:	89 e5                	mov    %esp,%ebp
+ 2e7:	56                   	push   %esi
+ 2e8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	6a 00                	push   $0x0
+ 2ee:	ff 75 08             	pushl  0x8(%ebp)
+ 2f1:	e8 ed 00 00 00       	call   3e3 <open>
+  if(fd < 0)
+ 2f6:	83 c4 10             	add    $0x10,%esp
+ 2f9:	85 c0                	test   %eax,%eax
+ 2fb:	78 2b                	js     328 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 2fd:	83 ec 08             	sub    $0x8,%esp
+ 300:	ff 75 0c             	pushl  0xc(%ebp)
+ 303:	89 c3                	mov    %eax,%ebx
+ 305:	50                   	push   %eax
+ 306:	e8 f0 00 00 00       	call   3fb <fstat>
+  close(fd);
+ 30b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 30e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 310:	e8 b6 00 00 00       	call   3cb <close>
+  return r;
+ 315:	83 c4 10             	add    $0x10,%esp
+}
+ 318:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 31b:	89 f0                	mov    %esi,%eax
+ 31d:	5b                   	pop    %ebx
+ 31e:	5e                   	pop    %esi
+ 31f:	5d                   	pop    %ebp
+ 320:	c3                   	ret    
+ 321:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 328:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 32d:	eb e9                	jmp    318 <stat+0x38>
+ 32f:	90                   	nop
+
+00000330 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	53                   	push   %ebx
+ 338:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 33b:	0f be 02             	movsbl (%edx),%eax
+ 33e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 341:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 344:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 349:	77 1a                	ja     365 <atoi+0x35>
+ 34b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 34f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 350:	83 c2 01             	add    $0x1,%edx
+ 353:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 356:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 35a:	0f be 02             	movsbl (%edx),%eax
+ 35d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 360:	80 fb 09             	cmp    $0x9,%bl
+ 363:	76 eb                	jbe    350 <atoi+0x20>
+  return n;
+}
+ 365:	89 c8                	mov    %ecx,%eax
+ 367:	5b                   	pop    %ebx
+ 368:	5d                   	pop    %ebp
+ 369:	c3                   	ret    
+ 36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 370:	f3 0f 1e fb          	endbr32 
+ 374:	55                   	push   %ebp
+ 375:	89 e5                	mov    %esp,%ebp
+ 377:	57                   	push   %edi
+ 378:	8b 45 10             	mov    0x10(%ebp),%eax
+ 37b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 37e:	56                   	push   %esi
+ 37f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 382:	85 c0                	test   %eax,%eax
+ 384:	7e 0f                	jle    395 <memmove+0x25>
+ 386:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 388:	89 d7                	mov    %edx,%edi
+ 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 390:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 391:	39 f8                	cmp    %edi,%eax
+ 393:	75 fb                	jne    390 <memmove+0x20>
+  return vdst;
+}
+ 395:	5e                   	pop    %esi
+ 396:	89 d0                	mov    %edx,%eax
+ 398:	5f                   	pop    %edi
+ 399:	5d                   	pop    %ebp
+ 39a:	c3                   	ret    
+
+0000039b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 39b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <exit>:
+SYSCALL(exit)
+ 3a3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <wait>:
+SYSCALL(wait)
+ 3ab:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <pipe>:
+SYSCALL(pipe)
+ 3b3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <read>:
+SYSCALL(read)
+ 3bb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <write>:
+SYSCALL(write)
+ 3c3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <close>:
+SYSCALL(close)
+ 3cb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <kill>:
+SYSCALL(kill)
+ 3d3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <exec>:
+SYSCALL(exec)
+ 3db:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <open>:
+SYSCALL(open)
+ 3e3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <mknod>:
+SYSCALL(mknod)
+ 3eb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <unlink>:
+SYSCALL(unlink)
+ 3f3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <fstat>:
+SYSCALL(fstat)
+ 3fb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <link>:
+SYSCALL(link)
+ 403:	b8 13 00 00 00       	mov    $0x13,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <mkdir>:
+SYSCALL(mkdir)
+ 40b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <chdir>:
+SYSCALL(chdir)
+ 413:	b8 09 00 00 00       	mov    $0x9,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <dup>:
+SYSCALL(dup)
+ 41b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getpid>:
+SYSCALL(getpid)
+ 423:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <sbrk>:
+SYSCALL(sbrk)
+ 42b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <sleep>:
+SYSCALL(sleep)
+ 433:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <uptime>:
+SYSCALL(uptime)
+ 43b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <draw>:
+SYSCALL(draw)
+ 443:	b8 16 00 00 00       	mov    $0x16,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <history>:
+ 44b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+ 453:	66 90                	xchg   %ax,%ax
+ 455:	66 90                	xchg   %ax,%ax
+ 457:	66 90                	xchg   %ax,%ax
+ 459:	66 90                	xchg   %ax,%ax
+ 45b:	66 90                	xchg   %ax,%ax
+ 45d:	66 90                	xchg   %ax,%ax
+ 45f:	90                   	nop
+
+00000460 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 3c             	sub    $0x3c,%esp
+ 469:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 46c:	89 d1                	mov    %edx,%ecx
+{
+ 46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 471:	85 d2                	test   %edx,%edx
+ 473:	0f 89 7f 00 00 00    	jns    4f8 <printint+0x98>
+ 479:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 47d:	74 79                	je     4f8 <printint+0x98>
+    neg = 1;
+ 47f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 486:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 488:	31 db                	xor    %ebx,%ebx
+ 48a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 490:	89 c8                	mov    %ecx,%eax
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	89 cf                	mov    %ecx,%edi
+ 496:	f7 75 c4             	divl   -0x3c(%ebp)
+ 499:	0f b6 92 a4 08 00 00 	movzbl 0x8a4(%edx),%edx
+ 4a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4a3:	89 d8                	mov    %ebx,%eax
+ 4a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4b1:	76 dd                	jbe    490 <printint+0x30>
+  if(neg)
+ 4b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4b6:	85 c9                	test   %ecx,%ecx
+ 4b8:	74 0c                	je     4c6 <printint+0x66>
+    buf[i++] = '-';
+ 4ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4cd:	eb 07                	jmp    4d6 <printint+0x76>
+ 4cf:	90                   	nop
+ 4d0:	0f b6 13             	movzbl (%ebx),%edx
+ 4d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4d6:	83 ec 04             	sub    $0x4,%esp
+ 4d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4dc:	6a 01                	push   $0x1
+ 4de:	56                   	push   %esi
+ 4df:	57                   	push   %edi
+ 4e0:	e8 de fe ff ff       	call   3c3 <write>
+  while(--i >= 0)
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ff:	eb 87                	jmp    488 <printint+0x28>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+
+00000510 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 510:	f3 0f 1e fb          	endbr32 
+ 514:	55                   	push   %ebp
+ 515:	89 e5                	mov    %esp,%ebp
+ 517:	57                   	push   %edi
+ 518:	56                   	push   %esi
+ 519:	53                   	push   %ebx
+ 51a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 51d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 520:	0f b6 1e             	movzbl (%esi),%ebx
+ 523:	84 db                	test   %bl,%bl
+ 525:	0f 84 b4 00 00 00    	je     5df <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 52b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 52e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 531:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 534:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 536:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 539:	eb 33                	jmp    56e <printf+0x5e>
+ 53b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 53f:	90                   	nop
+ 540:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 543:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	74 17                	je     564 <printf+0x54>
+  write(fd, &c, 1);
+ 54d:	83 ec 04             	sub    $0x4,%esp
+ 550:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 553:	6a 01                	push   $0x1
+ 555:	57                   	push   %edi
+ 556:	ff 75 08             	pushl  0x8(%ebp)
+ 559:	e8 65 fe ff ff       	call   3c3 <write>
+ 55e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 561:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 564:	0f b6 1e             	movzbl (%esi),%ebx
+ 567:	83 c6 01             	add    $0x1,%esi
+ 56a:	84 db                	test   %bl,%bl
+ 56c:	74 71                	je     5df <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 56e:	0f be cb             	movsbl %bl,%ecx
+ 571:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 574:	85 d2                	test   %edx,%edx
+ 576:	74 c8                	je     540 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 578:	83 fa 25             	cmp    $0x25,%edx
+ 57b:	75 e7                	jne    564 <printf+0x54>
+      if(c == 'd'){
+ 57d:	83 f8 64             	cmp    $0x64,%eax
+ 580:	0f 84 9a 00 00 00    	je     620 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 586:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 58c:	83 f9 70             	cmp    $0x70,%ecx
+ 58f:	74 5f                	je     5f0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 591:	83 f8 73             	cmp    $0x73,%eax
+ 594:	0f 84 d6 00 00 00    	je     670 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 59a:	83 f8 63             	cmp    $0x63,%eax
+ 59d:	0f 84 8d 00 00 00    	je     630 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5a3:	83 f8 25             	cmp    $0x25,%eax
+ 5a6:	0f 84 b4 00 00 00    	je     660 <printf+0x150>
+  write(fd, &c, 1);
+ 5ac:	83 ec 04             	sub    $0x4,%esp
+ 5af:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5b3:	6a 01                	push   $0x1
+ 5b5:	57                   	push   %edi
+ 5b6:	ff 75 08             	pushl  0x8(%ebp)
+ 5b9:	e8 05 fe ff ff       	call   3c3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 5be:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5c1:	83 c4 0c             	add    $0xc,%esp
+ 5c4:	6a 01                	push   $0x1
+ 5c6:	83 c6 01             	add    $0x1,%esi
+ 5c9:	57                   	push   %edi
+ 5ca:	ff 75 08             	pushl  0x8(%ebp)
+ 5cd:	e8 f1 fd ff ff       	call   3c3 <write>
+  for(i = 0; fmt[i]; i++){
+ 5d2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 5d6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 5d9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 5db:	84 db                	test   %bl,%bl
+ 5dd:	75 8f                	jne    56e <printf+0x5e>
+    }
+  }
+}
+ 5df:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5e2:	5b                   	pop    %ebx
+ 5e3:	5e                   	pop    %esi
+ 5e4:	5f                   	pop    %edi
+ 5e5:	5d                   	pop    %ebp
+ 5e6:	c3                   	ret    
+ 5e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ee:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 5f0:	83 ec 0c             	sub    $0xc,%esp
+ 5f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5f8:	6a 00                	push   $0x0
+ 5fa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 5fd:	8b 45 08             	mov    0x8(%ebp),%eax
+ 600:	8b 13                	mov    (%ebx),%edx
+ 602:	e8 59 fe ff ff       	call   460 <printint>
+        ap++;
+ 607:	89 d8                	mov    %ebx,%eax
+ 609:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 60c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 60e:	83 c0 04             	add    $0x4,%eax
+ 611:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 614:	e9 4b ff ff ff       	jmp    564 <printf+0x54>
+ 619:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	eb ce                	jmp    5fa <printf+0xea>
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 630:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 633:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 636:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 638:	6a 01                	push   $0x1
+        ap++;
+ 63a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 63d:	57                   	push   %edi
+ 63e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 641:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 644:	e8 7a fd ff ff       	call   3c3 <write>
+        ap++;
+ 649:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 64c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 64f:	31 d2                	xor    %edx,%edx
+ 651:	e9 0e ff ff ff       	jmp    564 <printf+0x54>
+ 656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 65d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 660:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 663:	83 ec 04             	sub    $0x4,%esp
+ 666:	e9 59 ff ff ff       	jmp    5c4 <printf+0xb4>
+ 66b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 66f:	90                   	nop
+        s = (char*)*ap;
+ 670:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 673:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 675:	83 c0 04             	add    $0x4,%eax
+ 678:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 67b:	85 db                	test   %ebx,%ebx
+ 67d:	74 17                	je     696 <printf+0x186>
+        while(*s != 0){
+ 67f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 682:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 684:	84 c0                	test   %al,%al
+ 686:	0f 84 d8 fe ff ff    	je     564 <printf+0x54>
+ 68c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 68f:	89 de                	mov    %ebx,%esi
+ 691:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 694:	eb 1a                	jmp    6b0 <printf+0x1a0>
+          s = "(null)";
+ 696:	bb 9b 08 00 00       	mov    $0x89b,%ebx
+        while(*s != 0){
+ 69b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 69e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6a3:	89 de                	mov    %ebx,%esi
+ 6a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6af:	90                   	nop
+  write(fd, &c, 1);
+ 6b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 6b3:	83 c6 01             	add    $0x1,%esi
+ 6b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6b9:	6a 01                	push   $0x1
+ 6bb:	57                   	push   %edi
+ 6bc:	53                   	push   %ebx
+ 6bd:	e8 01 fd ff ff       	call   3c3 <write>
+        while(*s != 0){
+ 6c2:	0f b6 06             	movzbl (%esi),%eax
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	84 c0                	test   %al,%al
+ 6ca:	75 e4                	jne    6b0 <printf+0x1a0>
+ 6cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 6cf:	31 d2                	xor    %edx,%edx
+ 6d1:	e9 8e fe ff ff       	jmp    564 <printf+0x54>
+ 6d6:	66 90                	xchg   %ax,%ax
+ 6d8:	66 90                	xchg   %ax,%ax
+ 6da:	66 90                	xchg   %ax,%ax
+ 6dc:	66 90                	xchg   %ax,%ax
+ 6de:	66 90                	xchg   %ax,%ax
+
+000006e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6e0:	f3 0f 1e fb          	endbr32 
+ 6e4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6e5:	a1 5c 0b 00 00       	mov    0xb5c,%eax
+{
+ 6ea:	89 e5                	mov    %esp,%ebp
+ 6ec:	57                   	push   %edi
+ 6ed:	56                   	push   %esi
+ 6ee:	53                   	push   %ebx
+ 6ef:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 6f4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f7:	39 c8                	cmp    %ecx,%eax
+ 6f9:	73 15                	jae    710 <free+0x30>
+ 6fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+ 700:	39 d1                	cmp    %edx,%ecx
+ 702:	72 14                	jb     718 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 704:	39 d0                	cmp    %edx,%eax
+ 706:	73 10                	jae    718 <free+0x38>
+{
+ 708:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 70a:	8b 10                	mov    (%eax),%edx
+ 70c:	39 c8                	cmp    %ecx,%eax
+ 70e:	72 f0                	jb     700 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 710:	39 d0                	cmp    %edx,%eax
+ 712:	72 f4                	jb     708 <free+0x28>
+ 714:	39 d1                	cmp    %edx,%ecx
+ 716:	73 f0                	jae    708 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 718:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 71b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 71e:	39 fa                	cmp    %edi,%edx
+ 720:	74 1e                	je     740 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 722:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 725:	8b 50 04             	mov    0x4(%eax),%edx
+ 728:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 72b:	39 f1                	cmp    %esi,%ecx
+ 72d:	74 28                	je     757 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 72f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 731:	5b                   	pop    %ebx
+  freep = p;
+ 732:	a3 5c 0b 00 00       	mov    %eax,0xb5c
+}
+ 737:	5e                   	pop    %esi
+ 738:	5f                   	pop    %edi
+ 739:	5d                   	pop    %ebp
+ 73a:	c3                   	ret    
+ 73b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 740:	03 72 04             	add    0x4(%edx),%esi
+ 743:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 746:	8b 10                	mov    (%eax),%edx
+ 748:	8b 12                	mov    (%edx),%edx
+ 74a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 74d:	8b 50 04             	mov    0x4(%eax),%edx
+ 750:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 753:	39 f1                	cmp    %esi,%ecx
+ 755:	75 d8                	jne    72f <free+0x4f>
+    p->s.size += bp->s.size;
+ 757:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 75a:	a3 5c 0b 00 00       	mov    %eax,0xb5c
+    p->s.size += bp->s.size;
+ 75f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 762:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 765:	89 10                	mov    %edx,(%eax)
+}
+ 767:	5b                   	pop    %ebx
+ 768:	5e                   	pop    %esi
+ 769:	5f                   	pop    %edi
+ 76a:	5d                   	pop    %ebp
+ 76b:	c3                   	ret    
+ 76c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000770 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 770:	f3 0f 1e fb          	endbr32 
+ 774:	55                   	push   %ebp
+ 775:	89 e5                	mov    %esp,%ebp
+ 777:	57                   	push   %edi
+ 778:	56                   	push   %esi
+ 779:	53                   	push   %ebx
+ 77a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 77d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 780:	8b 3d 5c 0b 00 00    	mov    0xb5c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 786:	8d 70 07             	lea    0x7(%eax),%esi
+ 789:	c1 ee 03             	shr    $0x3,%esi
+ 78c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 78f:	85 ff                	test   %edi,%edi
+ 791:	0f 84 a9 00 00 00    	je     840 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 797:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 799:	8b 48 04             	mov    0x4(%eax),%ecx
+ 79c:	39 f1                	cmp    %esi,%ecx
+ 79e:	73 6d                	jae    80d <malloc+0x9d>
+ 7a0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7a6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7ab:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7ae:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 7b5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 7b8:	eb 17                	jmp    7d1 <malloc+0x61>
+ 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 7c2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7c5:	39 f1                	cmp    %esi,%ecx
+ 7c7:	73 4f                	jae    818 <malloc+0xa8>
+ 7c9:	8b 3d 5c 0b 00 00    	mov    0xb5c,%edi
+ 7cf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7d1:	39 c7                	cmp    %eax,%edi
+ 7d3:	75 eb                	jne    7c0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 7d5:	83 ec 0c             	sub    $0xc,%esp
+ 7d8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 7db:	e8 4b fc ff ff       	call   42b <sbrk>
+  if(p == (char*)-1)
+ 7e0:	83 c4 10             	add    $0x10,%esp
+ 7e3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7e6:	74 1b                	je     803 <malloc+0x93>
+  hp->s.size = nu;
+ 7e8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7eb:	83 ec 0c             	sub    $0xc,%esp
+ 7ee:	83 c0 08             	add    $0x8,%eax
+ 7f1:	50                   	push   %eax
+ 7f2:	e8 e9 fe ff ff       	call   6e0 <free>
+  return freep;
+ 7f7:	a1 5c 0b 00 00       	mov    0xb5c,%eax
+      if((p = morecore(nunits)) == 0)
+ 7fc:	83 c4 10             	add    $0x10,%esp
+ 7ff:	85 c0                	test   %eax,%eax
+ 801:	75 bd                	jne    7c0 <malloc+0x50>
+        return 0;
+  }
+}
+ 803:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 806:	31 c0                	xor    %eax,%eax
+}
+ 808:	5b                   	pop    %ebx
+ 809:	5e                   	pop    %esi
+ 80a:	5f                   	pop    %edi
+ 80b:	5d                   	pop    %ebp
+ 80c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 80d:	89 c2                	mov    %eax,%edx
+ 80f:	89 f8                	mov    %edi,%eax
+ 811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 818:	39 ce                	cmp    %ecx,%esi
+ 81a:	74 54                	je     870 <malloc+0x100>
+        p->s.size -= nunits;
+ 81c:	29 f1                	sub    %esi,%ecx
+ 81e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 821:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 824:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 827:	a3 5c 0b 00 00       	mov    %eax,0xb5c
+}
+ 82c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 82f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 832:	5b                   	pop    %ebx
+ 833:	5e                   	pop    %esi
+ 834:	5f                   	pop    %edi
+ 835:	5d                   	pop    %ebp
+ 836:	c3                   	ret    
+ 837:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 83e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 840:	c7 05 5c 0b 00 00 60 	movl   $0xb60,0xb5c
+ 847:	0b 00 00 
+    base.s.size = 0;
+ 84a:	bf 60 0b 00 00       	mov    $0xb60,%edi
+    base.s.ptr = freep = prevp = &base;
+ 84f:	c7 05 60 0b 00 00 60 	movl   $0xb60,0xb60
+ 856:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 859:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 85b:	c7 05 64 0b 00 00 00 	movl   $0x0,0xb64
+ 862:	00 00 00 
+    if(p->s.size >= nunits){
+ 865:	e9 36 ff ff ff       	jmp    7a0 <malloc+0x30>
+ 86a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 870:	8b 0a                	mov    (%edx),%ecx
+ 872:	89 08                	mov    %ecx,(%eax)
+ 874:	eb b1                	jmp    827 <malloc+0xb7>
diff -ruN xv6-public/stressfs.d xv6-public_task_1/stressfs.d
--- xv6-public/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/stressfs.d	2021-09-15 20:34:58.732371000 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ fs.h fcntl.h
Binary files xv6-public/stressfs.o and xv6-public_task_1/stressfs.o differ
diff -ruN xv6-public/stressfs.sym xv6-public_task_1/stressfs.sym
--- xv6-public/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/stressfs.sym	2021-09-15 20:34:58.772371000 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+00000878 .rodata
+000008b8 .eh_frame
+00000b5c .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000460 printint
+000008a4 digits.1091
+00000000 umalloc.c
+00000b5c freep
+00000b60 base
+00000140 strcpy
+00000510 printf
+00000370 memmove
+000003eb mknod
+00000260 gets
+00000423 getpid
+00000770 malloc
+00000433 sleep
+000003b3 pipe
+000003c3 write
+0000044b history
+000003fb fstat
+000003d3 kill
+00000413 chdir
+000003db exec
+000003ab wait
+000003bb read
+000003f3 unlink
+0000039b fork
+0000042b sbrk
+0000043b uptime
+00000b5c __bss_start
+00000200 memset
+00000000 main
+00000170 strcmp
+0000041b dup
+000002e0 stat
+00000b5c _edata
+00000b68 _end
+00000403 link
+000003a3 exit
+00000330 atoi
+00000443 draw
+000001c0 strlen
+000003e3 open
+00000220 strchr
+0000040b mkdir
+000003cb close
+000006e0 free
diff -ruN xv6-public/string.d xv6-public_task_1/string.d
--- xv6-public/string.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/string.d	2021-09-15 20:34:55.240377000 +0530
@@ -0,0 +1 @@
+string.o: string.c /usr/include/stdc-predef.h types.h x86.h
Binary files xv6-public/string.o and xv6-public_task_1/string.o differ
Binary files xv6-public/swtch.o and xv6-public_task_1/swtch.o differ
diff -ruN xv6-public/syscall.c xv6-public_task_1/syscall.c
--- xv6-public/syscall.c	2021-09-15 22:30:13.481050506 +0530
+++ xv6-public_task_1/syscall.c	2021-09-10 23:24:57.485621000 +0530
@@ -103,6 +103,8 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_draw(void);
+extern int sys_history(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,10 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+// adding system call vector
+[SYS_draw] sys_draw,
+// adding system call history
+[SYS_history] sys_history,
 };
 
 void
diff -ruN xv6-public/syscall.d xv6-public_task_1/syscall.d
--- xv6-public/syscall.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/syscall.d	2021-09-15 20:34:55.364376000 +0530
@@ -0,0 +1,2 @@
+syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h syscall.h
diff -ruN xv6-public/syscall.h xv6-public_task_1/syscall.h
--- xv6-public/syscall.h	2021-09-15 22:30:13.481050506 +0530
+++ xv6-public_task_1/syscall.h	2021-09-10 23:24:50.889642000 +0530
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+// A macro for SYS_draw as 22 which is its system call number.
+#define SYS_draw 22
+#define SYS_history 23
Binary files xv6-public/syscall.o and xv6-public_task_1/syscall.o differ
diff -ruN xv6-public/sysfile.d xv6-public_task_1/sysfile.d
--- xv6-public/sysfile.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/sysfile.d	2021-09-15 20:34:55.584376000 +0530
@@ -0,0 +1,2 @@
+sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
Binary files xv6-public/sysfile.o and xv6-public_task_1/sysfile.o differ
diff -ruN xv6-public/sysproc.c xv6-public_task_1/sysproc.c
--- xv6-public/sysproc.c	2021-09-15 22:30:13.481050506 +0530
+++ xv6-public_task_1/sysproc.c	2021-09-10 23:29:34.348810000 +0530
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-
+#include "ASCII_image.h"
 int
 sys_fork(void)
 {
@@ -89,3 +89,62 @@
   release(&tickslock);
   return xticks;
 }
+
+
+// Implementing a sys_draw function
+int sys_draw(void)
+{
+
+  char *buffer;
+  int size;
+
+  // Feches the 1st 32 bit int argument which is the max buffer sizeand assigns it to the size
+  if (argint(1, &size) == -1)
+  {
+    // Invalid address is accessed
+    return -1;
+  }
+
+  // Check that the buffer pointer in first argument
+  // lies within the process address space or not till size bytes, if it does not then return -1.
+  if (argptr(0, (char **)&buffer, size) == -1)
+  {
+    // does not lie in the process address space.
+    return -1;
+  }
+  
+  // copying macro wolfi from ASCII_image.h
+  char *draw = wolfi;
+  
+  int drawsize = 0;
+  while (draw[drawsize] != '\0')
+  {
+    drawsize++;
+  }
+
+  if (drawsize > size)
+  {
+    //buffer size is insufficient to draw the wolf picture.
+    return -1;
+  }
+  
+  //copying the wolf picture into the buffer.
+  for (int i = 0; i < drawsize; i++)
+  {
+    buffer[i] = draw[i];
+  }
+  
+  //return the size of draw pictue
+  return drawsize;
+}
+
+int sys_history(void) {
+  char *buffer;
+  int historyId;
+  
+  argptr(0, &buffer, 1);
+  
+  argint(1, &historyId);
+
+  return history(buffer, historyId);
+}
diff -ruN xv6-public/sysproc.d xv6-public_task_1/sysproc.d
--- xv6-public/sysproc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/sysproc.d	2021-09-15 20:34:55.676376000 +0530
@@ -0,0 +1,2 @@
+sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
+ date.h param.h memlayout.h mmu.h proc.h ASCII_image.h
Binary files xv6-public/sysproc.o and xv6-public_task_1/sysproc.o differ
Binary files xv6-public/trapasm.o and xv6-public_task_1/trapasm.o differ
diff -ruN xv6-public/trap.d xv6-public_task_1/trap.d
--- xv6-public/trap.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/trap.d	2021-09-15 20:34:55.800376000 +0530
@@ -0,0 +1,2 @@
+trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
+ memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
Binary files xv6-public/trap.o and xv6-public_task_1/trap.o differ
diff -ruN xv6-public/types.h xv6-public_task_1/types.h
--- xv6-public/types.h	2021-09-15 22:30:13.481050506 +0530
+++ xv6-public_task_1/types.h	2021-09-10 22:53:30.264309000 +0530
@@ -2,3 +2,6 @@
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
 typedef uint pde_t;
+
+#define INPUT_BUF 128
+#define MAX_HISTORY 16
\ No newline at end of file
diff -ruN xv6-public/uart.d xv6-public_task_1/uart.d
--- xv6-public/uart.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/uart.d	2021-09-15 20:34:55.892376000 +0530
@@ -0,0 +1,2 @@
+uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
Binary files xv6-public/uart.o and xv6-public_task_1/uart.o differ
diff -ruN xv6-public/ulib.d xv6-public_task_1/ulib.d
--- xv6-public/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/ulib.d	2021-09-15 20:34:56.840374000 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ x86.h
Binary files xv6-public/ulib.o and xv6-public_task_1/ulib.o differ
diff -ruN xv6-public/umalloc.d xv6-public_task_1/umalloc.d
--- xv6-public/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/umalloc.d	2021-09-15 20:34:57.192374000 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ param.h
Binary files xv6-public/umalloc.o and xv6-public_task_1/umalloc.o differ
diff -ruN xv6-public/user.h xv6-public_task_1/user.h
--- xv6-public/user.h	2021-09-15 22:30:13.481050506 +0530
+++ xv6-public_task_1/user.h	2021-09-10 23:27:28.349170000 +0530
@@ -23,6 +23,10 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+// system call created which copies the ASCII image of wolf picture
+int draw(void *buf, uint size);
+// system call which print last 16 commands executed.
+int history(char *buf, uint historyId);
 
 // ulib.c
 int stat(const char*, struct stat*);
Binary files xv6-public/_usertests and xv6-public_task_1/_usertests differ
diff -ruN xv6-public/usertests.asm xv6-public_task_1/usertests.asm
--- xv6-public/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/usertests.asm	2021-09-15 20:34:59.540370000 +0530
@@ -0,0 +1,6699 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	f3 0f 1e fb          	endbr32 
+       4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       8:	83 e4 f0             	and    $0xfffffff0,%esp
+       b:	ff 71 fc             	pushl  -0x4(%ecx)
+       e:	55                   	push   %ebp
+       f:	89 e5                	mov    %esp,%ebp
+      11:	51                   	push   %ecx
+      12:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      15:	68 46 4e 00 00       	push   $0x4e46
+      1a:	6a 01                	push   $0x1
+      1c:	e8 cf 3a 00 00       	call   3af0 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      21:	59                   	pop    %ecx
+      22:	58                   	pop    %eax
+      23:	6a 00                	push   $0x0
+      25:	68 5a 4e 00 00       	push   $0x4e5a
+      2a:	e8 94 39 00 00       	call   39c3 <open>
+      2f:	83 c4 10             	add    $0x10,%esp
+      32:	85 c0                	test   %eax,%eax
+      34:	78 13                	js     49 <main+0x49>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      36:	52                   	push   %edx
+      37:	52                   	push   %edx
+      38:	68 c4 55 00 00       	push   $0x55c4
+      3d:	6a 01                	push   $0x1
+      3f:	e8 ac 3a 00 00       	call   3af0 <printf>
+    exit();
+      44:	e8 3a 39 00 00       	call   3983 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      49:	50                   	push   %eax
+      4a:	50                   	push   %eax
+      4b:	68 00 02 00 00       	push   $0x200
+      50:	68 5a 4e 00 00       	push   $0x4e5a
+      55:	e8 69 39 00 00       	call   39c3 <open>
+      5a:	89 04 24             	mov    %eax,(%esp)
+      5d:	e8 49 39 00 00       	call   39ab <close>
+
+  argptest();
+      62:	e8 29 36 00 00       	call   3690 <argptest>
+  createdelete();
+      67:	e8 04 12 00 00       	call   1270 <createdelete>
+  linkunlink();
+      6c:	e8 df 1a 00 00       	call   1b50 <linkunlink>
+  concreate();
+      71:	e8 da 17 00 00       	call   1850 <concreate>
+  fourfiles();
+      76:	e8 f5 0f 00 00       	call   1070 <fourfiles>
+  sharedfd();
+      7b:	e8 30 0e 00 00       	call   eb0 <sharedfd>
+
+  bigargtest();
+      80:	e8 ab 32 00 00       	call   3330 <bigargtest>
+  bigwrite();
+      85:	e8 06 24 00 00       	call   2490 <bigwrite>
+  bigargtest();
+      8a:	e8 a1 32 00 00       	call   3330 <bigargtest>
+  bsstest();
+      8f:	e8 2c 32 00 00       	call   32c0 <bsstest>
+  sbrktest();
+      94:	e8 37 2d 00 00       	call   2dd0 <sbrktest>
+  validatetest();
+      99:	e8 62 31 00 00       	call   3200 <validatetest>
+
+  opentest();
+      9e:	e8 6d 03 00 00       	call   410 <opentest>
+  writetest();
+      a3:	e8 08 04 00 00       	call   4b0 <writetest>
+  writetest1();
+      a8:	e8 e3 05 00 00       	call   690 <writetest1>
+  createtest();
+      ad:	e8 ae 07 00 00       	call   860 <createtest>
+
+  openiputtest();
+      b2:	e8 59 02 00 00       	call   310 <openiputtest>
+  exitiputtest();
+      b7:	e8 54 01 00 00       	call   210 <exitiputtest>
+  iputtest();
+      bc:	e8 5f 00 00 00       	call   120 <iputtest>
+
+  mem();
+      c1:	e8 1a 0d 00 00       	call   de0 <mem>
+  pipe1();
+      c6:	e8 95 09 00 00       	call   a60 <pipe1>
+  preempt();
+      cb:	e8 30 0b 00 00       	call   c00 <preempt>
+  exitwait();
+      d0:	e8 8b 0c 00 00       	call   d60 <exitwait>
+
+  rmdot();
+      d5:	e8 a6 27 00 00       	call   2880 <rmdot>
+  fourteen();
+      da:	e8 61 26 00 00       	call   2740 <fourteen>
+  bigfile();
+      df:	e8 8c 24 00 00       	call   2570 <bigfile>
+  subdir();
+      e4:	e8 b7 1c 00 00       	call   1da0 <subdir>
+  linktest();
+      e9:	e8 42 15 00 00       	call   1630 <linktest>
+  unlinkread();
+      ee:	e8 ad 13 00 00       	call   14a0 <unlinkread>
+  dirfile();
+      f3:	e8 08 29 00 00       	call   2a00 <dirfile>
+  iref();
+      f8:	e8 03 2b 00 00       	call   2c00 <iref>
+  forktest();
+      fd:	e8 1e 2c 00 00       	call   2d20 <forktest>
+  bigdir(); // slow
+     102:	e8 59 1b 00 00       	call   1c60 <bigdir>
+
+  uio();
+     107:	e8 04 35 00 00       	call   3610 <uio>
+
+  exectest();
+     10c:	e8 ff 08 00 00       	call   a10 <exectest>
+
+  exit();
+     111:	e8 6d 38 00 00       	call   3983 <exit>
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	f3 0f 1e fb          	endbr32 
+     124:	55                   	push   %ebp
+     125:	89 e5                	mov    %esp,%ebp
+     127:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     12a:	68 ec 3e 00 00       	push   $0x3eec
+     12f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     135:	e8 b6 39 00 00       	call   3af0 <printf>
+  if(mkdir("iputdir") < 0){
+     13a:	c7 04 24 7f 3e 00 00 	movl   $0x3e7f,(%esp)
+     141:	e8 a5 38 00 00       	call   39eb <mkdir>
+     146:	83 c4 10             	add    $0x10,%esp
+     149:	85 c0                	test   %eax,%eax
+     14b:	78 58                	js     1a5 <iputtest+0x85>
+  if(chdir("iputdir") < 0){
+     14d:	83 ec 0c             	sub    $0xc,%esp
+     150:	68 7f 3e 00 00       	push   $0x3e7f
+     155:	e8 99 38 00 00       	call   39f3 <chdir>
+     15a:	83 c4 10             	add    $0x10,%esp
+     15d:	85 c0                	test   %eax,%eax
+     15f:	0f 88 85 00 00 00    	js     1ea <iputtest+0xca>
+  if(unlink("../iputdir") < 0){
+     165:	83 ec 0c             	sub    $0xc,%esp
+     168:	68 7c 3e 00 00       	push   $0x3e7c
+     16d:	e8 61 38 00 00       	call   39d3 <unlink>
+     172:	83 c4 10             	add    $0x10,%esp
+     175:	85 c0                	test   %eax,%eax
+     177:	78 5a                	js     1d3 <iputtest+0xb3>
+  if(chdir("/") < 0){
+     179:	83 ec 0c             	sub    $0xc,%esp
+     17c:	68 a1 3e 00 00       	push   $0x3ea1
+     181:	e8 6d 38 00 00       	call   39f3 <chdir>
+     186:	83 c4 10             	add    $0x10,%esp
+     189:	85 c0                	test   %eax,%eax
+     18b:	78 2f                	js     1bc <iputtest+0x9c>
+  printf(stdout, "iput test ok\n");
+     18d:	83 ec 08             	sub    $0x8,%esp
+     190:	68 24 3f 00 00       	push   $0x3f24
+     195:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     19b:	e8 50 39 00 00       	call   3af0 <printf>
+}
+     1a0:	83 c4 10             	add    $0x10,%esp
+     1a3:	c9                   	leave  
+     1a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a5:	50                   	push   %eax
+     1a6:	50                   	push   %eax
+     1a7:	68 58 3e 00 00       	push   $0x3e58
+     1ac:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1b2:	e8 39 39 00 00       	call   3af0 <printf>
+    exit();
+     1b7:	e8 c7 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir / failed\n");
+     1bc:	50                   	push   %eax
+     1bd:	50                   	push   %eax
+     1be:	68 a3 3e 00 00       	push   $0x3ea3
+     1c3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1c9:	e8 22 39 00 00       	call   3af0 <printf>
+    exit();
+     1ce:	e8 b0 37 00 00       	call   3983 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1d3:	52                   	push   %edx
+     1d4:	52                   	push   %edx
+     1d5:	68 87 3e 00 00       	push   $0x3e87
+     1da:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1e0:	e8 0b 39 00 00       	call   3af0 <printf>
+    exit();
+     1e5:	e8 99 37 00 00       	call   3983 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1ea:	51                   	push   %ecx
+     1eb:	51                   	push   %ecx
+     1ec:	68 66 3e 00 00       	push   $0x3e66
+     1f1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     1f7:	e8 f4 38 00 00       	call   3af0 <printf>
+    exit();
+     1fc:	e8 82 37 00 00       	call   3983 <exit>
+     201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     20f:	90                   	nop
+
+00000210 <exitiputtest>:
+{
+     210:	f3 0f 1e fb          	endbr32 
+     214:	55                   	push   %ebp
+     215:	89 e5                	mov    %esp,%ebp
+     217:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     21a:	68 b3 3e 00 00       	push   $0x3eb3
+     21f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     225:	e8 c6 38 00 00       	call   3af0 <printf>
+  pid = fork();
+     22a:	e8 4c 37 00 00       	call   397b <fork>
+  if(pid < 0){
+     22f:	83 c4 10             	add    $0x10,%esp
+     232:	85 c0                	test   %eax,%eax
+     234:	0f 88 86 00 00 00    	js     2c0 <exitiputtest+0xb0>
+  if(pid == 0){
+     23a:	75 4c                	jne    288 <exitiputtest+0x78>
+    if(mkdir("iputdir") < 0){
+     23c:	83 ec 0c             	sub    $0xc,%esp
+     23f:	68 7f 3e 00 00       	push   $0x3e7f
+     244:	e8 a2 37 00 00       	call   39eb <mkdir>
+     249:	83 c4 10             	add    $0x10,%esp
+     24c:	85 c0                	test   %eax,%eax
+     24e:	0f 88 83 00 00 00    	js     2d7 <exitiputtest+0xc7>
+    if(chdir("iputdir") < 0){
+     254:	83 ec 0c             	sub    $0xc,%esp
+     257:	68 7f 3e 00 00       	push   $0x3e7f
+     25c:	e8 92 37 00 00       	call   39f3 <chdir>
+     261:	83 c4 10             	add    $0x10,%esp
+     264:	85 c0                	test   %eax,%eax
+     266:	0f 88 82 00 00 00    	js     2ee <exitiputtest+0xde>
+    if(unlink("../iputdir") < 0){
+     26c:	83 ec 0c             	sub    $0xc,%esp
+     26f:	68 7c 3e 00 00       	push   $0x3e7c
+     274:	e8 5a 37 00 00       	call   39d3 <unlink>
+     279:	83 c4 10             	add    $0x10,%esp
+     27c:	85 c0                	test   %eax,%eax
+     27e:	78 28                	js     2a8 <exitiputtest+0x98>
+    exit();
+     280:	e8 fe 36 00 00       	call   3983 <exit>
+     285:	8d 76 00             	lea    0x0(%esi),%esi
+  wait();
+     288:	e8 fe 36 00 00       	call   398b <wait>
+  printf(stdout, "exitiput test ok\n");
+     28d:	83 ec 08             	sub    $0x8,%esp
+     290:	68 d6 3e 00 00       	push   $0x3ed6
+     295:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     29b:	e8 50 38 00 00       	call   3af0 <printf>
+}
+     2a0:	83 c4 10             	add    $0x10,%esp
+     2a3:	c9                   	leave  
+     2a4:	c3                   	ret    
+     2a5:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     2a8:	83 ec 08             	sub    $0x8,%esp
+     2ab:	68 87 3e 00 00       	push   $0x3e87
+     2b0:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2b6:	e8 35 38 00 00       	call   3af0 <printf>
+      exit();
+     2bb:	e8 c3 36 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     2c0:	51                   	push   %ecx
+     2c1:	51                   	push   %ecx
+     2c2:	68 99 4d 00 00       	push   $0x4d99
+     2c7:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2cd:	e8 1e 38 00 00       	call   3af0 <printf>
+    exit();
+     2d2:	e8 ac 36 00 00       	call   3983 <exit>
+      printf(stdout, "mkdir failed\n");
+     2d7:	52                   	push   %edx
+     2d8:	52                   	push   %edx
+     2d9:	68 58 3e 00 00       	push   $0x3e58
+     2de:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2e4:	e8 07 38 00 00       	call   3af0 <printf>
+      exit();
+     2e9:	e8 95 36 00 00       	call   3983 <exit>
+      printf(stdout, "child chdir failed\n");
+     2ee:	50                   	push   %eax
+     2ef:	50                   	push   %eax
+     2f0:	68 c2 3e 00 00       	push   $0x3ec2
+     2f5:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     2fb:	e8 f0 37 00 00       	call   3af0 <printf>
+      exit();
+     300:	e8 7e 36 00 00       	call   3983 <exit>
+     305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <openiputtest>:
+{
+     310:	f3 0f 1e fb          	endbr32 
+     314:	55                   	push   %ebp
+     315:	89 e5                	mov    %esp,%ebp
+     317:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     31a:	68 e8 3e 00 00       	push   $0x3ee8
+     31f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     325:	e8 c6 37 00 00       	call   3af0 <printf>
+  if(mkdir("oidir") < 0){
+     32a:	c7 04 24 f7 3e 00 00 	movl   $0x3ef7,(%esp)
+     331:	e8 b5 36 00 00       	call   39eb <mkdir>
+     336:	83 c4 10             	add    $0x10,%esp
+     339:	85 c0                	test   %eax,%eax
+     33b:	0f 88 9b 00 00 00    	js     3dc <openiputtest+0xcc>
+  pid = fork();
+     341:	e8 35 36 00 00       	call   397b <fork>
+  if(pid < 0){
+     346:	85 c0                	test   %eax,%eax
+     348:	78 7b                	js     3c5 <openiputtest+0xb5>
+  if(pid == 0){
+     34a:	75 34                	jne    380 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     34c:	83 ec 08             	sub    $0x8,%esp
+     34f:	6a 02                	push   $0x2
+     351:	68 f7 3e 00 00       	push   $0x3ef7
+     356:	e8 68 36 00 00       	call   39c3 <open>
+    if(fd >= 0){
+     35b:	83 c4 10             	add    $0x10,%esp
+     35e:	85 c0                	test   %eax,%eax
+     360:	78 5e                	js     3c0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     362:	83 ec 08             	sub    $0x8,%esp
+     365:	68 7c 4e 00 00       	push   $0x4e7c
+     36a:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     370:	e8 7b 37 00 00       	call   3af0 <printf>
+      exit();
+     375:	e8 09 36 00 00       	call   3983 <exit>
+     37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  sleep(1);
+     380:	83 ec 0c             	sub    $0xc,%esp
+     383:	6a 01                	push   $0x1
+     385:	e8 89 36 00 00       	call   3a13 <sleep>
+  if(unlink("oidir") != 0){
+     38a:	c7 04 24 f7 3e 00 00 	movl   $0x3ef7,(%esp)
+     391:	e8 3d 36 00 00       	call   39d3 <unlink>
+     396:	83 c4 10             	add    $0x10,%esp
+     399:	85 c0                	test   %eax,%eax
+     39b:	75 56                	jne    3f3 <openiputtest+0xe3>
+  wait();
+     39d:	e8 e9 35 00 00       	call   398b <wait>
+  printf(stdout, "openiput test ok\n");
+     3a2:	83 ec 08             	sub    $0x8,%esp
+     3a5:	68 20 3f 00 00       	push   $0x3f20
+     3aa:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     3b0:	e8 3b 37 00 00       	call   3af0 <printf>
+     3b5:	83 c4 10             	add    $0x10,%esp
+}
+     3b8:	c9                   	leave  
+     3b9:	c3                   	ret    
+     3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3c0:	e8 be 35 00 00       	call   3983 <exit>
+    printf(stdout, "fork failed\n");
+     3c5:	52                   	push   %edx
+     3c6:	52                   	push   %edx
+     3c7:	68 99 4d 00 00       	push   $0x4d99
+     3cc:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     3d2:	e8 19 37 00 00       	call   3af0 <printf>
+    exit();
+     3d7:	e8 a7 35 00 00       	call   3983 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3dc:	51                   	push   %ecx
+     3dd:	51                   	push   %ecx
+     3de:	68 fd 3e 00 00       	push   $0x3efd
+     3e3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     3e9:	e8 02 37 00 00       	call   3af0 <printf>
+    exit();
+     3ee:	e8 90 35 00 00       	call   3983 <exit>
+    printf(stdout, "unlink failed\n");
+     3f3:	50                   	push   %eax
+     3f4:	50                   	push   %eax
+     3f5:	68 11 3f 00 00       	push   $0x3f11
+     3fa:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     400:	e8 eb 36 00 00       	call   3af0 <printf>
+    exit();
+     405:	e8 79 35 00 00       	call   3983 <exit>
+     40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000410 <opentest>:
+{
+     410:	f3 0f 1e fb          	endbr32 
+     414:	55                   	push   %ebp
+     415:	89 e5                	mov    %esp,%ebp
+     417:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     41a:	68 32 3f 00 00       	push   $0x3f32
+     41f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     425:	e8 c6 36 00 00       	call   3af0 <printf>
+  fd = open("echo", 0);
+     42a:	58                   	pop    %eax
+     42b:	5a                   	pop    %edx
+     42c:	6a 00                	push   $0x0
+     42e:	68 3d 3f 00 00       	push   $0x3f3d
+     433:	e8 8b 35 00 00       	call   39c3 <open>
+  if(fd < 0){
+     438:	83 c4 10             	add    $0x10,%esp
+     43b:	85 c0                	test   %eax,%eax
+     43d:	78 36                	js     475 <opentest+0x65>
+  close(fd);
+     43f:	83 ec 0c             	sub    $0xc,%esp
+     442:	50                   	push   %eax
+     443:	e8 63 35 00 00       	call   39ab <close>
+  fd = open("doesnotexist", 0);
+     448:	5a                   	pop    %edx
+     449:	59                   	pop    %ecx
+     44a:	6a 00                	push   $0x0
+     44c:	68 55 3f 00 00       	push   $0x3f55
+     451:	e8 6d 35 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     456:	83 c4 10             	add    $0x10,%esp
+     459:	85 c0                	test   %eax,%eax
+     45b:	79 2f                	jns    48c <opentest+0x7c>
+  printf(stdout, "open test ok\n");
+     45d:	83 ec 08             	sub    $0x8,%esp
+     460:	68 80 3f 00 00       	push   $0x3f80
+     465:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     46b:	e8 80 36 00 00       	call   3af0 <printf>
+}
+     470:	83 c4 10             	add    $0x10,%esp
+     473:	c9                   	leave  
+     474:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     475:	50                   	push   %eax
+     476:	50                   	push   %eax
+     477:	68 42 3f 00 00       	push   $0x3f42
+     47c:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     482:	e8 69 36 00 00       	call   3af0 <printf>
+    exit();
+     487:	e8 f7 34 00 00       	call   3983 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     48c:	50                   	push   %eax
+     48d:	50                   	push   %eax
+     48e:	68 62 3f 00 00       	push   $0x3f62
+     493:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     499:	e8 52 36 00 00       	call   3af0 <printf>
+    exit();
+     49e:	e8 e0 34 00 00       	call   3983 <exit>
+     4a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000004b0 <writetest>:
+{
+     4b0:	f3 0f 1e fb          	endbr32 
+     4b4:	55                   	push   %ebp
+     4b5:	89 e5                	mov    %esp,%ebp
+     4b7:	56                   	push   %esi
+     4b8:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     4b9:	83 ec 08             	sub    $0x8,%esp
+     4bc:	68 8e 3f 00 00       	push   $0x3f8e
+     4c1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     4c7:	e8 24 36 00 00       	call   3af0 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     4cc:	58                   	pop    %eax
+     4cd:	5a                   	pop    %edx
+     4ce:	68 02 02 00 00       	push   $0x202
+     4d3:	68 9f 3f 00 00       	push   $0x3f9f
+     4d8:	e8 e6 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     4dd:	83 c4 10             	add    $0x10,%esp
+     4e0:	85 c0                	test   %eax,%eax
+     4e2:	0f 88 8c 01 00 00    	js     674 <writetest+0x1c4>
+    printf(stdout, "creat small succeeded; ok\n");
+     4e8:	83 ec 08             	sub    $0x8,%esp
+     4eb:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4ed:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4ef:	68 a5 3f 00 00       	push   $0x3fa5
+     4f4:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     4fa:	e8 f1 35 00 00       	call   3af0 <printf>
+     4ff:	83 c4 10             	add    $0x10,%esp
+     502:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     508:	83 ec 04             	sub    $0x4,%esp
+     50b:	6a 0a                	push   $0xa
+     50d:	68 dc 3f 00 00       	push   $0x3fdc
+     512:	56                   	push   %esi
+     513:	e8 8b 34 00 00       	call   39a3 <write>
+     518:	83 c4 10             	add    $0x10,%esp
+     51b:	83 f8 0a             	cmp    $0xa,%eax
+     51e:	0f 85 d9 00 00 00    	jne    5fd <writetest+0x14d>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     524:	83 ec 04             	sub    $0x4,%esp
+     527:	6a 0a                	push   $0xa
+     529:	68 e7 3f 00 00       	push   $0x3fe7
+     52e:	56                   	push   %esi
+     52f:	e8 6f 34 00 00       	call   39a3 <write>
+     534:	83 c4 10             	add    $0x10,%esp
+     537:	83 f8 0a             	cmp    $0xa,%eax
+     53a:	0f 85 d6 00 00 00    	jne    616 <writetest+0x166>
+  for(i = 0; i < 100; i++){
+     540:	83 c3 01             	add    $0x1,%ebx
+     543:	83 fb 64             	cmp    $0x64,%ebx
+     546:	75 c0                	jne    508 <writetest+0x58>
+  printf(stdout, "writes ok\n");
+     548:	83 ec 08             	sub    $0x8,%esp
+     54b:	68 f2 3f 00 00       	push   $0x3ff2
+     550:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     556:	e8 95 35 00 00       	call   3af0 <printf>
+  close(fd);
+     55b:	89 34 24             	mov    %esi,(%esp)
+     55e:	e8 48 34 00 00       	call   39ab <close>
+  fd = open("small", O_RDONLY);
+     563:	5b                   	pop    %ebx
+     564:	5e                   	pop    %esi
+     565:	6a 00                	push   $0x0
+     567:	68 9f 3f 00 00       	push   $0x3f9f
+     56c:	e8 52 34 00 00       	call   39c3 <open>
+  if(fd >= 0){
+     571:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     574:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     576:	85 c0                	test   %eax,%eax
+     578:	0f 88 b1 00 00 00    	js     62f <writetest+0x17f>
+    printf(stdout, "open small succeeded ok\n");
+     57e:	83 ec 08             	sub    $0x8,%esp
+     581:	68 fd 3f 00 00       	push   $0x3ffd
+     586:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     58c:	e8 5f 35 00 00       	call   3af0 <printf>
+  i = read(fd, buf, 2000);
+     591:	83 c4 0c             	add    $0xc,%esp
+     594:	68 d0 07 00 00       	push   $0x7d0
+     599:	68 e0 86 00 00       	push   $0x86e0
+     59e:	53                   	push   %ebx
+     59f:	e8 f7 33 00 00       	call   399b <read>
+  if(i == 2000){
+     5a4:	83 c4 10             	add    $0x10,%esp
+     5a7:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     5ac:	0f 85 94 00 00 00    	jne    646 <writetest+0x196>
+    printf(stdout, "read succeeded ok\n");
+     5b2:	83 ec 08             	sub    $0x8,%esp
+     5b5:	68 31 40 00 00       	push   $0x4031
+     5ba:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     5c0:	e8 2b 35 00 00       	call   3af0 <printf>
+  close(fd);
+     5c5:	89 1c 24             	mov    %ebx,(%esp)
+     5c8:	e8 de 33 00 00       	call   39ab <close>
+  if(unlink("small") < 0){
+     5cd:	c7 04 24 9f 3f 00 00 	movl   $0x3f9f,(%esp)
+     5d4:	e8 fa 33 00 00       	call   39d3 <unlink>
+     5d9:	83 c4 10             	add    $0x10,%esp
+     5dc:	85 c0                	test   %eax,%eax
+     5de:	78 7d                	js     65d <writetest+0x1ad>
+  printf(stdout, "small file test ok\n");
+     5e0:	83 ec 08             	sub    $0x8,%esp
+     5e3:	68 59 40 00 00       	push   $0x4059
+     5e8:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     5ee:	e8 fd 34 00 00       	call   3af0 <printf>
+}
+     5f3:	83 c4 10             	add    $0x10,%esp
+     5f6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5f9:	5b                   	pop    %ebx
+     5fa:	5e                   	pop    %esi
+     5fb:	5d                   	pop    %ebp
+     5fc:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5fd:	83 ec 04             	sub    $0x4,%esp
+     600:	53                   	push   %ebx
+     601:	68 a0 4e 00 00       	push   $0x4ea0
+     606:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     60c:	e8 df 34 00 00       	call   3af0 <printf>
+      exit();
+     611:	e8 6d 33 00 00       	call   3983 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     616:	83 ec 04             	sub    $0x4,%esp
+     619:	53                   	push   %ebx
+     61a:	68 c4 4e 00 00       	push   $0x4ec4
+     61f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     625:	e8 c6 34 00 00       	call   3af0 <printf>
+      exit();
+     62a:	e8 54 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: open small failed!\n");
+     62f:	51                   	push   %ecx
+     630:	51                   	push   %ecx
+     631:	68 16 40 00 00       	push   $0x4016
+     636:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     63c:	e8 af 34 00 00       	call   3af0 <printf>
+    exit();
+     641:	e8 3d 33 00 00       	call   3983 <exit>
+    printf(stdout, "read failed\n");
+     646:	52                   	push   %edx
+     647:	52                   	push   %edx
+     648:	68 5d 43 00 00       	push   $0x435d
+     64d:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     653:	e8 98 34 00 00       	call   3af0 <printf>
+    exit();
+     658:	e8 26 33 00 00       	call   3983 <exit>
+    printf(stdout, "unlink small failed\n");
+     65d:	50                   	push   %eax
+     65e:	50                   	push   %eax
+     65f:	68 44 40 00 00       	push   $0x4044
+     664:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     66a:	e8 81 34 00 00       	call   3af0 <printf>
+    exit();
+     66f:	e8 0f 33 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     674:	50                   	push   %eax
+     675:	50                   	push   %eax
+     676:	68 c0 3f 00 00       	push   $0x3fc0
+     67b:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     681:	e8 6a 34 00 00       	call   3af0 <printf>
+    exit();
+     686:	e8 f8 32 00 00       	call   3983 <exit>
+     68b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     68f:	90                   	nop
+
+00000690 <writetest1>:
+{
+     690:	f3 0f 1e fb          	endbr32 
+     694:	55                   	push   %ebp
+     695:	89 e5                	mov    %esp,%ebp
+     697:	56                   	push   %esi
+     698:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     699:	83 ec 08             	sub    $0x8,%esp
+     69c:	68 6d 40 00 00       	push   $0x406d
+     6a1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     6a7:	e8 44 34 00 00       	call   3af0 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     6ac:	58                   	pop    %eax
+     6ad:	5a                   	pop    %edx
+     6ae:	68 02 02 00 00       	push   $0x202
+     6b3:	68 e7 40 00 00       	push   $0x40e7
+     6b8:	e8 06 33 00 00       	call   39c3 <open>
+  if(fd < 0){
+     6bd:	83 c4 10             	add    $0x10,%esp
+     6c0:	85 c0                	test   %eax,%eax
+     6c2:	0f 88 5d 01 00 00    	js     825 <writetest1+0x195>
+     6c8:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     6ca:	31 db                	xor    %ebx,%ebx
+     6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(write(fd, buf, 512) != 512){
+     6d0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6d3:	89 1d e0 86 00 00    	mov    %ebx,0x86e0
+    if(write(fd, buf, 512) != 512){
+     6d9:	68 00 02 00 00       	push   $0x200
+     6de:	68 e0 86 00 00       	push   $0x86e0
+     6e3:	56                   	push   %esi
+     6e4:	e8 ba 32 00 00       	call   39a3 <write>
+     6e9:	83 c4 10             	add    $0x10,%esp
+     6ec:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6f1:	0f 85 b3 00 00 00    	jne    7aa <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6f7:	83 c3 01             	add    $0x1,%ebx
+     6fa:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     700:	75 ce                	jne    6d0 <writetest1+0x40>
+  close(fd);
+     702:	83 ec 0c             	sub    $0xc,%esp
+     705:	56                   	push   %esi
+     706:	e8 a0 32 00 00       	call   39ab <close>
+  fd = open("big", O_RDONLY);
+     70b:	5b                   	pop    %ebx
+     70c:	5e                   	pop    %esi
+     70d:	6a 00                	push   $0x0
+     70f:	68 e7 40 00 00       	push   $0x40e7
+     714:	e8 aa 32 00 00       	call   39c3 <open>
+  if(fd < 0){
+     719:	83 c4 10             	add    $0x10,%esp
+  fd = open("big", O_RDONLY);
+     71c:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+     71e:	85 c0                	test   %eax,%eax
+     720:	0f 88 e8 00 00 00    	js     80e <writetest1+0x17e>
+  n = 0;
+     726:	31 f6                	xor    %esi,%esi
+     728:	eb 1d                	jmp    747 <writetest1+0xb7>
+     72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     730:	3d 00 02 00 00       	cmp    $0x200,%eax
+     735:	0f 85 9f 00 00 00    	jne    7da <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     73b:	a1 e0 86 00 00       	mov    0x86e0,%eax
+     740:	39 f0                	cmp    %esi,%eax
+     742:	75 7f                	jne    7c3 <writetest1+0x133>
+    n++;
+     744:	83 c6 01             	add    $0x1,%esi
+    i = read(fd, buf, 512);
+     747:	83 ec 04             	sub    $0x4,%esp
+     74a:	68 00 02 00 00       	push   $0x200
+     74f:	68 e0 86 00 00       	push   $0x86e0
+     754:	53                   	push   %ebx
+     755:	e8 41 32 00 00       	call   399b <read>
+    if(i == 0){
+     75a:	83 c4 10             	add    $0x10,%esp
+     75d:	85 c0                	test   %eax,%eax
+     75f:	75 cf                	jne    730 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     761:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
+     767:	0f 84 86 00 00 00    	je     7f3 <writetest1+0x163>
+  close(fd);
+     76d:	83 ec 0c             	sub    $0xc,%esp
+     770:	53                   	push   %ebx
+     771:	e8 35 32 00 00       	call   39ab <close>
+  if(unlink("big") < 0){
+     776:	c7 04 24 e7 40 00 00 	movl   $0x40e7,(%esp)
+     77d:	e8 51 32 00 00       	call   39d3 <unlink>
+     782:	83 c4 10             	add    $0x10,%esp
+     785:	85 c0                	test   %eax,%eax
+     787:	0f 88 af 00 00 00    	js     83c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     78d:	83 ec 08             	sub    $0x8,%esp
+     790:	68 0e 41 00 00       	push   $0x410e
+     795:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     79b:	e8 50 33 00 00       	call   3af0 <printf>
+}
+     7a0:	83 c4 10             	add    $0x10,%esp
+     7a3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     7a6:	5b                   	pop    %ebx
+     7a7:	5e                   	pop    %esi
+     7a8:	5d                   	pop    %ebp
+     7a9:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     7aa:	83 ec 04             	sub    $0x4,%esp
+     7ad:	53                   	push   %ebx
+     7ae:	68 97 40 00 00       	push   $0x4097
+     7b3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     7b9:	e8 32 33 00 00       	call   3af0 <printf>
+      exit();
+     7be:	e8 c0 31 00 00       	call   3983 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     7c3:	50                   	push   %eax
+     7c4:	56                   	push   %esi
+     7c5:	68 e8 4e 00 00       	push   $0x4ee8
+     7ca:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     7d0:	e8 1b 33 00 00       	call   3af0 <printf>
+      exit();
+     7d5:	e8 a9 31 00 00       	call   3983 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7da:	83 ec 04             	sub    $0x4,%esp
+     7dd:	50                   	push   %eax
+     7de:	68 eb 40 00 00       	push   $0x40eb
+     7e3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     7e9:	e8 02 33 00 00       	call   3af0 <printf>
+      exit();
+     7ee:	e8 90 31 00 00       	call   3983 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7f3:	52                   	push   %edx
+     7f4:	68 8b 00 00 00       	push   $0x8b
+     7f9:	68 ce 40 00 00       	push   $0x40ce
+     7fe:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     804:	e8 e7 32 00 00       	call   3af0 <printf>
+        exit();
+     809:	e8 75 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: open big failed!\n");
+     80e:	51                   	push   %ecx
+     80f:	51                   	push   %ecx
+     810:	68 b5 40 00 00       	push   $0x40b5
+     815:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     81b:	e8 d0 32 00 00       	call   3af0 <printf>
+    exit();
+     820:	e8 5e 31 00 00       	call   3983 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     825:	50                   	push   %eax
+     826:	50                   	push   %eax
+     827:	68 7d 40 00 00       	push   $0x407d
+     82c:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     832:	e8 b9 32 00 00       	call   3af0 <printf>
+    exit();
+     837:	e8 47 31 00 00       	call   3983 <exit>
+    printf(stdout, "unlink big failed\n");
+     83c:	50                   	push   %eax
+     83d:	50                   	push   %eax
+     83e:	68 fb 40 00 00       	push   $0x40fb
+     843:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     849:	e8 a2 32 00 00       	call   3af0 <printf>
+    exit();
+     84e:	e8 30 31 00 00       	call   3983 <exit>
+     853:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000860 <createtest>:
+{
+     860:	f3 0f 1e fb          	endbr32 
+     864:	55                   	push   %ebp
+     865:	89 e5                	mov    %esp,%ebp
+     867:	53                   	push   %ebx
+  name[2] = '\0';
+     868:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     86d:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     870:	68 08 4f 00 00       	push   $0x4f08
+     875:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     87b:	e8 70 32 00 00       	call   3af0 <printf>
+  name[0] = 'a';
+     880:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
+  name[2] = '\0';
+     887:	83 c4 10             	add    $0x10,%esp
+     88a:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
+  for(i = 0; i < 52; i++){
+     891:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     898:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     89b:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
+    fd = open(name, O_CREATE|O_RDWR);
+     8a1:	83 c3 01             	add    $0x1,%ebx
+     8a4:	68 02 02 00 00       	push   $0x202
+     8a9:	68 e0 a6 00 00       	push   $0xa6e0
+     8ae:	e8 10 31 00 00       	call   39c3 <open>
+    close(fd);
+     8b3:	89 04 24             	mov    %eax,(%esp)
+     8b6:	e8 f0 30 00 00       	call   39ab <close>
+  for(i = 0; i < 52; i++){
+     8bb:	83 c4 10             	add    $0x10,%esp
+     8be:	80 fb 64             	cmp    $0x64,%bl
+     8c1:	75 d5                	jne    898 <createtest+0x38>
+  name[0] = 'a';
+     8c3:	c6 05 e0 a6 00 00 61 	movb   $0x61,0xa6e0
+  name[2] = '\0';
+     8ca:	bb 30 00 00 00       	mov    $0x30,%ebx
+     8cf:	c6 05 e2 a6 00 00 00 	movb   $0x0,0xa6e2
+  for(i = 0; i < 52; i++){
+     8d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8dd:	8d 76 00             	lea    0x0(%esi),%esi
+    unlink(name);
+     8e0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8e3:	88 1d e1 a6 00 00    	mov    %bl,0xa6e1
+    unlink(name);
+     8e9:	83 c3 01             	add    $0x1,%ebx
+     8ec:	68 e0 a6 00 00       	push   $0xa6e0
+     8f1:	e8 dd 30 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 52; i++){
+     8f6:	83 c4 10             	add    $0x10,%esp
+     8f9:	80 fb 64             	cmp    $0x64,%bl
+     8fc:	75 e2                	jne    8e0 <createtest+0x80>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8fe:	83 ec 08             	sub    $0x8,%esp
+     901:	68 30 4f 00 00       	push   $0x4f30
+     906:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     90c:	e8 df 31 00 00       	call   3af0 <printf>
+}
+     911:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     914:	83 c4 10             	add    $0x10,%esp
+     917:	c9                   	leave  
+     918:	c3                   	ret    
+     919:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000920 <dirtest>:
+{
+     920:	f3 0f 1e fb          	endbr32 
+     924:	55                   	push   %ebp
+     925:	89 e5                	mov    %esp,%ebp
+     927:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     92a:	68 1c 41 00 00       	push   $0x411c
+     92f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     935:	e8 b6 31 00 00       	call   3af0 <printf>
+  if(mkdir("dir0") < 0){
+     93a:	c7 04 24 28 41 00 00 	movl   $0x4128,(%esp)
+     941:	e8 a5 30 00 00       	call   39eb <mkdir>
+     946:	83 c4 10             	add    $0x10,%esp
+     949:	85 c0                	test   %eax,%eax
+     94b:	78 58                	js     9a5 <dirtest+0x85>
+  if(chdir("dir0") < 0){
+     94d:	83 ec 0c             	sub    $0xc,%esp
+     950:	68 28 41 00 00       	push   $0x4128
+     955:	e8 99 30 00 00       	call   39f3 <chdir>
+     95a:	83 c4 10             	add    $0x10,%esp
+     95d:	85 c0                	test   %eax,%eax
+     95f:	0f 88 85 00 00 00    	js     9ea <dirtest+0xca>
+  if(chdir("..") < 0){
+     965:	83 ec 0c             	sub    $0xc,%esp
+     968:	68 cd 46 00 00       	push   $0x46cd
+     96d:	e8 81 30 00 00       	call   39f3 <chdir>
+     972:	83 c4 10             	add    $0x10,%esp
+     975:	85 c0                	test   %eax,%eax
+     977:	78 5a                	js     9d3 <dirtest+0xb3>
+  if(unlink("dir0") < 0){
+     979:	83 ec 0c             	sub    $0xc,%esp
+     97c:	68 28 41 00 00       	push   $0x4128
+     981:	e8 4d 30 00 00       	call   39d3 <unlink>
+     986:	83 c4 10             	add    $0x10,%esp
+     989:	85 c0                	test   %eax,%eax
+     98b:	78 2f                	js     9bc <dirtest+0x9c>
+  printf(stdout, "mkdir test ok\n");
+     98d:	83 ec 08             	sub    $0x8,%esp
+     990:	68 65 41 00 00       	push   $0x4165
+     995:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     99b:	e8 50 31 00 00       	call   3af0 <printf>
+}
+     9a0:	83 c4 10             	add    $0x10,%esp
+     9a3:	c9                   	leave  
+     9a4:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     9a5:	50                   	push   %eax
+     9a6:	50                   	push   %eax
+     9a7:	68 58 3e 00 00       	push   $0x3e58
+     9ac:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9b2:	e8 39 31 00 00       	call   3af0 <printf>
+    exit();
+     9b7:	e8 c7 2f 00 00       	call   3983 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     9bc:	50                   	push   %eax
+     9bd:	50                   	push   %eax
+     9be:	68 51 41 00 00       	push   $0x4151
+     9c3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9c9:	e8 22 31 00 00       	call   3af0 <printf>
+    exit();
+     9ce:	e8 b0 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir .. failed\n");
+     9d3:	52                   	push   %edx
+     9d4:	52                   	push   %edx
+     9d5:	68 40 41 00 00       	push   $0x4140
+     9da:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9e0:	e8 0b 31 00 00       	call   3af0 <printf>
+    exit();
+     9e5:	e8 99 2f 00 00       	call   3983 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9ea:	51                   	push   %ecx
+     9eb:	51                   	push   %ecx
+     9ec:	68 2d 41 00 00       	push   $0x412d
+     9f1:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     9f7:	e8 f4 30 00 00       	call   3af0 <printf>
+    exit();
+     9fc:	e8 82 2f 00 00       	call   3983 <exit>
+     a01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a0f:	90                   	nop
+
+00000a10 <exectest>:
+{
+     a10:	f3 0f 1e fb          	endbr32 
+     a14:	55                   	push   %ebp
+     a15:	89 e5                	mov    %esp,%ebp
+     a17:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     a1a:	68 74 41 00 00       	push   $0x4174
+     a1f:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     a25:	e8 c6 30 00 00       	call   3af0 <printf>
+  if(exec("echo", echoargv) < 0){
+     a2a:	5a                   	pop    %edx
+     a2b:	59                   	pop    %ecx
+     a2c:	68 f4 5e 00 00       	push   $0x5ef4
+     a31:	68 3d 3f 00 00       	push   $0x3f3d
+     a36:	e8 80 2f 00 00       	call   39bb <exec>
+     a3b:	83 c4 10             	add    $0x10,%esp
+     a3e:	85 c0                	test   %eax,%eax
+     a40:	78 02                	js     a44 <exectest+0x34>
+}
+     a42:	c9                   	leave  
+     a43:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     a44:	50                   	push   %eax
+     a45:	50                   	push   %eax
+     a46:	68 7f 41 00 00       	push   $0x417f
+     a4b:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+     a51:	e8 9a 30 00 00       	call   3af0 <printf>
+    exit();
+     a56:	e8 28 2f 00 00       	call   3983 <exit>
+     a5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     a5f:	90                   	nop
+
+00000a60 <pipe1>:
+{
+     a60:	f3 0f 1e fb          	endbr32 
+     a64:	55                   	push   %ebp
+     a65:	89 e5                	mov    %esp,%ebp
+     a67:	57                   	push   %edi
+     a68:	56                   	push   %esi
+  if(pipe(fds) != 0){
+     a69:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a6c:	53                   	push   %ebx
+     a6d:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a70:	50                   	push   %eax
+     a71:	e8 1d 2f 00 00       	call   3993 <pipe>
+     a76:	83 c4 10             	add    $0x10,%esp
+     a79:	85 c0                	test   %eax,%eax
+     a7b:	0f 85 38 01 00 00    	jne    bb9 <pipe1+0x159>
+  pid = fork();
+     a81:	e8 f5 2e 00 00       	call   397b <fork>
+  if(pid == 0){
+     a86:	85 c0                	test   %eax,%eax
+     a88:	0f 84 8d 00 00 00    	je     b1b <pipe1+0xbb>
+  } else if(pid > 0){
+     a8e:	0f 8e 38 01 00 00    	jle    bcc <pipe1+0x16c>
+    close(fds[1]);
+     a94:	83 ec 0c             	sub    $0xc,%esp
+     a97:	ff 75 e4             	pushl  -0x1c(%ebp)
+  seq = 0;
+     a9a:	31 db                	xor    %ebx,%ebx
+    cc = 1;
+     a9c:	be 01 00 00 00       	mov    $0x1,%esi
+    close(fds[1]);
+     aa1:	e8 05 2f 00 00       	call   39ab <close>
+    total = 0;
+     aa6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     aad:	83 c4 10             	add    $0x10,%esp
+     ab0:	83 ec 04             	sub    $0x4,%esp
+     ab3:	56                   	push   %esi
+     ab4:	68 e0 86 00 00       	push   $0x86e0
+     ab9:	ff 75 e0             	pushl  -0x20(%ebp)
+     abc:	e8 da 2e 00 00       	call   399b <read>
+     ac1:	83 c4 10             	add    $0x10,%esp
+     ac4:	89 c7                	mov    %eax,%edi
+     ac6:	85 c0                	test   %eax,%eax
+     ac8:	0f 8e a7 00 00 00    	jle    b75 <pipe1+0x115>
+     ace:	8d 0c 3b             	lea    (%ebx,%edi,1),%ecx
+      for(i = 0; i < n; i++){
+     ad1:	31 c0                	xor    %eax,%eax
+     ad3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ad7:	90                   	nop
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     ad8:	89 da                	mov    %ebx,%edx
+     ada:	83 c3 01             	add    $0x1,%ebx
+     add:	38 90 e0 86 00 00    	cmp    %dl,0x86e0(%eax)
+     ae3:	75 1c                	jne    b01 <pipe1+0xa1>
+      for(i = 0; i < n; i++){
+     ae5:	83 c0 01             	add    $0x1,%eax
+     ae8:	39 d9                	cmp    %ebx,%ecx
+     aea:	75 ec                	jne    ad8 <pipe1+0x78>
+      cc = cc * 2;
+     aec:	01 f6                	add    %esi,%esi
+      total += n;
+     aee:	01 7d d4             	add    %edi,-0x2c(%ebp)
+     af1:	b8 00 20 00 00       	mov    $0x2000,%eax
+     af6:	81 fe 00 20 00 00    	cmp    $0x2000,%esi
+     afc:	0f 4f f0             	cmovg  %eax,%esi
+     aff:	eb af                	jmp    ab0 <pipe1+0x50>
+          printf(1, "pipe1 oops 2\n");
+     b01:	83 ec 08             	sub    $0x8,%esp
+     b04:	68 ae 41 00 00       	push   $0x41ae
+     b09:	6a 01                	push   $0x1
+     b0b:	e8 e0 2f 00 00       	call   3af0 <printf>
+          return;
+     b10:	83 c4 10             	add    $0x10,%esp
+}
+     b13:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     b16:	5b                   	pop    %ebx
+     b17:	5e                   	pop    %esi
+     b18:	5f                   	pop    %edi
+     b19:	5d                   	pop    %ebp
+     b1a:	c3                   	ret    
+    close(fds[0]);
+     b1b:	83 ec 0c             	sub    $0xc,%esp
+     b1e:	ff 75 e0             	pushl  -0x20(%ebp)
+  seq = 0;
+     b21:	31 db                	xor    %ebx,%ebx
+    close(fds[0]);
+     b23:	e8 83 2e 00 00       	call   39ab <close>
+     b28:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 1033; i++)
+     b2b:	31 c0                	xor    %eax,%eax
+     b2d:	8d 76 00             	lea    0x0(%esi),%esi
+        buf[i] = seq++;
+     b30:	8d 14 18             	lea    (%eax,%ebx,1),%edx
+      for(i = 0; i < 1033; i++)
+     b33:	83 c0 01             	add    $0x1,%eax
+        buf[i] = seq++;
+     b36:	88 90 df 86 00 00    	mov    %dl,0x86df(%eax)
+      for(i = 0; i < 1033; i++)
+     b3c:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b41:	75 ed                	jne    b30 <pipe1+0xd0>
+      if(write(fds[1], buf, 1033) != 1033){
+     b43:	83 ec 04             	sub    $0x4,%esp
+     b46:	81 c3 09 04 00 00    	add    $0x409,%ebx
+     b4c:	68 09 04 00 00       	push   $0x409
+     b51:	68 e0 86 00 00       	push   $0x86e0
+     b56:	ff 75 e4             	pushl  -0x1c(%ebp)
+     b59:	e8 45 2e 00 00       	call   39a3 <write>
+     b5e:	83 c4 10             	add    $0x10,%esp
+     b61:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b66:	75 77                	jne    bdf <pipe1+0x17f>
+    for(n = 0; n < 5; n++){
+     b68:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b6e:	75 bb                	jne    b2b <pipe1+0xcb>
+    exit();
+     b70:	e8 0e 2e 00 00       	call   3983 <exit>
+    if(total != 5 * 1033){
+     b75:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b7c:	75 26                	jne    ba4 <pipe1+0x144>
+    close(fds[0]);
+     b7e:	83 ec 0c             	sub    $0xc,%esp
+     b81:	ff 75 e0             	pushl  -0x20(%ebp)
+     b84:	e8 22 2e 00 00       	call   39ab <close>
+    wait();
+     b89:	e8 fd 2d 00 00       	call   398b <wait>
+  printf(1, "pipe1 ok\n");
+     b8e:	5a                   	pop    %edx
+     b8f:	59                   	pop    %ecx
+     b90:	68 d3 41 00 00       	push   $0x41d3
+     b95:	6a 01                	push   $0x1
+     b97:	e8 54 2f 00 00       	call   3af0 <printf>
+     b9c:	83 c4 10             	add    $0x10,%esp
+     b9f:	e9 6f ff ff ff       	jmp    b13 <pipe1+0xb3>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     ba4:	53                   	push   %ebx
+     ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
+     ba8:	68 bc 41 00 00       	push   $0x41bc
+     bad:	6a 01                	push   $0x1
+     baf:	e8 3c 2f 00 00       	call   3af0 <printf>
+      exit();
+     bb4:	e8 ca 2d 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+     bb9:	57                   	push   %edi
+     bba:	57                   	push   %edi
+     bbb:	68 91 41 00 00       	push   $0x4191
+     bc0:	6a 01                	push   $0x1
+     bc2:	e8 29 2f 00 00       	call   3af0 <printf>
+    exit();
+     bc7:	e8 b7 2d 00 00       	call   3983 <exit>
+    printf(1, "fork() failed\n");
+     bcc:	50                   	push   %eax
+     bcd:	50                   	push   %eax
+     bce:	68 dd 41 00 00       	push   $0x41dd
+     bd3:	6a 01                	push   $0x1
+     bd5:	e8 16 2f 00 00       	call   3af0 <printf>
+    exit();
+     bda:	e8 a4 2d 00 00       	call   3983 <exit>
+        printf(1, "pipe1 oops 1\n");
+     bdf:	56                   	push   %esi
+     be0:	56                   	push   %esi
+     be1:	68 a0 41 00 00       	push   $0x41a0
+     be6:	6a 01                	push   $0x1
+     be8:	e8 03 2f 00 00       	call   3af0 <printf>
+        exit();
+     bed:	e8 91 2d 00 00       	call   3983 <exit>
+     bf2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000c00 <preempt>:
+{
+     c00:	f3 0f 1e fb          	endbr32 
+     c04:	55                   	push   %ebp
+     c05:	89 e5                	mov    %esp,%ebp
+     c07:	57                   	push   %edi
+     c08:	56                   	push   %esi
+     c09:	53                   	push   %ebx
+     c0a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     c0d:	68 ec 41 00 00       	push   $0x41ec
+     c12:	6a 01                	push   $0x1
+     c14:	e8 d7 2e 00 00       	call   3af0 <printf>
+  pid1 = fork();
+     c19:	e8 5d 2d 00 00       	call   397b <fork>
+  if(pid1 == 0)
+     c1e:	83 c4 10             	add    $0x10,%esp
+     c21:	85 c0                	test   %eax,%eax
+     c23:	75 0b                	jne    c30 <preempt+0x30>
+    for(;;)
+     c25:	eb fe                	jmp    c25 <preempt+0x25>
+     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2e:	66 90                	xchg   %ax,%ax
+     c30:	89 c7                	mov    %eax,%edi
+  pid2 = fork();
+     c32:	e8 44 2d 00 00       	call   397b <fork>
+     c37:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     c39:	85 c0                	test   %eax,%eax
+     c3b:	75 03                	jne    c40 <preempt+0x40>
+    for(;;)
+     c3d:	eb fe                	jmp    c3d <preempt+0x3d>
+     c3f:	90                   	nop
+  pipe(pfds);
+     c40:	83 ec 0c             	sub    $0xc,%esp
+     c43:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     c46:	50                   	push   %eax
+     c47:	e8 47 2d 00 00       	call   3993 <pipe>
+  pid3 = fork();
+     c4c:	e8 2a 2d 00 00       	call   397b <fork>
+  if(pid3 == 0){
+     c51:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     c54:	89 c3                	mov    %eax,%ebx
+  if(pid3 == 0){
+     c56:	85 c0                	test   %eax,%eax
+     c58:	75 3e                	jne    c98 <preempt+0x98>
+    close(pfds[0]);
+     c5a:	83 ec 0c             	sub    $0xc,%esp
+     c5d:	ff 75 e0             	pushl  -0x20(%ebp)
+     c60:	e8 46 2d 00 00       	call   39ab <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c65:	83 c4 0c             	add    $0xc,%esp
+     c68:	6a 01                	push   $0x1
+     c6a:	68 b1 47 00 00       	push   $0x47b1
+     c6f:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c72:	e8 2c 2d 00 00       	call   39a3 <write>
+     c77:	83 c4 10             	add    $0x10,%esp
+     c7a:	83 f8 01             	cmp    $0x1,%eax
+     c7d:	0f 85 a4 00 00 00    	jne    d27 <preempt+0x127>
+    close(pfds[1]);
+     c83:	83 ec 0c             	sub    $0xc,%esp
+     c86:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c89:	e8 1d 2d 00 00       	call   39ab <close>
+     c8e:	83 c4 10             	add    $0x10,%esp
+    for(;;)
+     c91:	eb fe                	jmp    c91 <preempt+0x91>
+     c93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c97:	90                   	nop
+  close(pfds[1]);
+     c98:	83 ec 0c             	sub    $0xc,%esp
+     c9b:	ff 75 e4             	pushl  -0x1c(%ebp)
+     c9e:	e8 08 2d 00 00       	call   39ab <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     ca3:	83 c4 0c             	add    $0xc,%esp
+     ca6:	68 00 20 00 00       	push   $0x2000
+     cab:	68 e0 86 00 00       	push   $0x86e0
+     cb0:	ff 75 e0             	pushl  -0x20(%ebp)
+     cb3:	e8 e3 2c 00 00       	call   399b <read>
+     cb8:	83 c4 10             	add    $0x10,%esp
+     cbb:	83 f8 01             	cmp    $0x1,%eax
+     cbe:	75 7e                	jne    d3e <preempt+0x13e>
+  close(pfds[0]);
+     cc0:	83 ec 0c             	sub    $0xc,%esp
+     cc3:	ff 75 e0             	pushl  -0x20(%ebp)
+     cc6:	e8 e0 2c 00 00       	call   39ab <close>
+  printf(1, "kill... ");
+     ccb:	58                   	pop    %eax
+     ccc:	5a                   	pop    %edx
+     ccd:	68 1d 42 00 00       	push   $0x421d
+     cd2:	6a 01                	push   $0x1
+     cd4:	e8 17 2e 00 00       	call   3af0 <printf>
+  kill(pid1);
+     cd9:	89 3c 24             	mov    %edi,(%esp)
+     cdc:	e8 d2 2c 00 00       	call   39b3 <kill>
+  kill(pid2);
+     ce1:	89 34 24             	mov    %esi,(%esp)
+     ce4:	e8 ca 2c 00 00       	call   39b3 <kill>
+  kill(pid3);
+     ce9:	89 1c 24             	mov    %ebx,(%esp)
+     cec:	e8 c2 2c 00 00       	call   39b3 <kill>
+  printf(1, "wait... ");
+     cf1:	59                   	pop    %ecx
+     cf2:	5b                   	pop    %ebx
+     cf3:	68 26 42 00 00       	push   $0x4226
+     cf8:	6a 01                	push   $0x1
+     cfa:	e8 f1 2d 00 00       	call   3af0 <printf>
+  wait();
+     cff:	e8 87 2c 00 00       	call   398b <wait>
+  wait();
+     d04:	e8 82 2c 00 00       	call   398b <wait>
+  wait();
+     d09:	e8 7d 2c 00 00       	call   398b <wait>
+  printf(1, "preempt ok\n");
+     d0e:	5e                   	pop    %esi
+     d0f:	5f                   	pop    %edi
+     d10:	68 2f 42 00 00       	push   $0x422f
+     d15:	6a 01                	push   $0x1
+     d17:	e8 d4 2d 00 00       	call   3af0 <printf>
+     d1c:	83 c4 10             	add    $0x10,%esp
+}
+     d1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d22:	5b                   	pop    %ebx
+     d23:	5e                   	pop    %esi
+     d24:	5f                   	pop    %edi
+     d25:	5d                   	pop    %ebp
+     d26:	c3                   	ret    
+      printf(1, "preempt write error");
+     d27:	83 ec 08             	sub    $0x8,%esp
+     d2a:	68 f6 41 00 00       	push   $0x41f6
+     d2f:	6a 01                	push   $0x1
+     d31:	e8 ba 2d 00 00       	call   3af0 <printf>
+     d36:	83 c4 10             	add    $0x10,%esp
+     d39:	e9 45 ff ff ff       	jmp    c83 <preempt+0x83>
+    printf(1, "preempt read error");
+     d3e:	83 ec 08             	sub    $0x8,%esp
+     d41:	68 0a 42 00 00       	push   $0x420a
+     d46:	6a 01                	push   $0x1
+     d48:	e8 a3 2d 00 00       	call   3af0 <printf>
+    return;
+     d4d:	83 c4 10             	add    $0x10,%esp
+     d50:	eb cd                	jmp    d1f <preempt+0x11f>
+     d52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000d60 <exitwait>:
+{
+     d60:	f3 0f 1e fb          	endbr32 
+     d64:	55                   	push   %ebp
+     d65:	89 e5                	mov    %esp,%ebp
+     d67:	56                   	push   %esi
+     d68:	be 64 00 00 00       	mov    $0x64,%esi
+     d6d:	53                   	push   %ebx
+     d6e:	eb 10                	jmp    d80 <exitwait+0x20>
+    if(pid){
+     d70:	74 68                	je     dda <exitwait+0x7a>
+      if(wait() != pid){
+     d72:	e8 14 2c 00 00       	call   398b <wait>
+     d77:	39 d8                	cmp    %ebx,%eax
+     d79:	75 2d                	jne    da8 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d7b:	83 ee 01             	sub    $0x1,%esi
+     d7e:	74 41                	je     dc1 <exitwait+0x61>
+    pid = fork();
+     d80:	e8 f6 2b 00 00       	call   397b <fork>
+     d85:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d87:	85 c0                	test   %eax,%eax
+     d89:	79 e5                	jns    d70 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d8b:	83 ec 08             	sub    $0x8,%esp
+     d8e:	68 99 4d 00 00       	push   $0x4d99
+     d93:	6a 01                	push   $0x1
+     d95:	e8 56 2d 00 00       	call   3af0 <printf>
+      return;
+     d9a:	83 c4 10             	add    $0x10,%esp
+}
+     d9d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     da0:	5b                   	pop    %ebx
+     da1:	5e                   	pop    %esi
+     da2:	5d                   	pop    %ebp
+     da3:	c3                   	ret    
+     da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     da8:	83 ec 08             	sub    $0x8,%esp
+     dab:	68 3b 42 00 00       	push   $0x423b
+     db0:	6a 01                	push   $0x1
+     db2:	e8 39 2d 00 00       	call   3af0 <printf>
+        return;
+     db7:	83 c4 10             	add    $0x10,%esp
+}
+     dba:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dbd:	5b                   	pop    %ebx
+     dbe:	5e                   	pop    %esi
+     dbf:	5d                   	pop    %ebp
+     dc0:	c3                   	ret    
+  printf(1, "exitwait ok\n");
+     dc1:	83 ec 08             	sub    $0x8,%esp
+     dc4:	68 4b 42 00 00       	push   $0x424b
+     dc9:	6a 01                	push   $0x1
+     dcb:	e8 20 2d 00 00       	call   3af0 <printf>
+     dd0:	83 c4 10             	add    $0x10,%esp
+}
+     dd3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     dd6:	5b                   	pop    %ebx
+     dd7:	5e                   	pop    %esi
+     dd8:	5d                   	pop    %ebp
+     dd9:	c3                   	ret    
+      exit();
+     dda:	e8 a4 2b 00 00       	call   3983 <exit>
+     ddf:	90                   	nop
+
+00000de0 <mem>:
+{
+     de0:	f3 0f 1e fb          	endbr32 
+     de4:	55                   	push   %ebp
+     de5:	89 e5                	mov    %esp,%ebp
+     de7:	56                   	push   %esi
+     de8:	31 f6                	xor    %esi,%esi
+     dea:	53                   	push   %ebx
+  printf(1, "mem test\n");
+     deb:	83 ec 08             	sub    $0x8,%esp
+     dee:	68 58 42 00 00       	push   $0x4258
+     df3:	6a 01                	push   $0x1
+     df5:	e8 f6 2c 00 00       	call   3af0 <printf>
+  ppid = getpid();
+     dfa:	e8 04 2c 00 00       	call   3a03 <getpid>
+     dff:	89 c3                	mov    %eax,%ebx
+  if((pid = fork()) == 0){
+     e01:	e8 75 2b 00 00       	call   397b <fork>
+     e06:	83 c4 10             	add    $0x10,%esp
+     e09:	85 c0                	test   %eax,%eax
+     e0b:	74 0f                	je     e1c <mem+0x3c>
+     e0d:	e9 8e 00 00 00       	jmp    ea0 <mem+0xc0>
+     e12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *(char**)m2 = m1;
+     e18:	89 30                	mov    %esi,(%eax)
+     e1a:	89 c6                	mov    %eax,%esi
+    while((m2 = malloc(10001)) != 0){
+     e1c:	83 ec 0c             	sub    $0xc,%esp
+     e1f:	68 11 27 00 00       	push   $0x2711
+     e24:	e8 27 2f 00 00       	call   3d50 <malloc>
+     e29:	83 c4 10             	add    $0x10,%esp
+     e2c:	85 c0                	test   %eax,%eax
+     e2e:	75 e8                	jne    e18 <mem+0x38>
+    while(m1){
+     e30:	85 f6                	test   %esi,%esi
+     e32:	74 18                	je     e4c <mem+0x6c>
+     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     e38:	89 f0                	mov    %esi,%eax
+      free(m1);
+     e3a:	83 ec 0c             	sub    $0xc,%esp
+      m2 = *(char**)m1;
+     e3d:	8b 36                	mov    (%esi),%esi
+      free(m1);
+     e3f:	50                   	push   %eax
+     e40:	e8 7b 2e 00 00       	call   3cc0 <free>
+    while(m1){
+     e45:	83 c4 10             	add    $0x10,%esp
+     e48:	85 f6                	test   %esi,%esi
+     e4a:	75 ec                	jne    e38 <mem+0x58>
+    m1 = malloc(1024*20);
+     e4c:	83 ec 0c             	sub    $0xc,%esp
+     e4f:	68 00 50 00 00       	push   $0x5000
+     e54:	e8 f7 2e 00 00       	call   3d50 <malloc>
+    if(m1 == 0){
+     e59:	83 c4 10             	add    $0x10,%esp
+     e5c:	85 c0                	test   %eax,%eax
+     e5e:	74 20                	je     e80 <mem+0xa0>
+    free(m1);
+     e60:	83 ec 0c             	sub    $0xc,%esp
+     e63:	50                   	push   %eax
+     e64:	e8 57 2e 00 00       	call   3cc0 <free>
+    printf(1, "mem ok\n");
+     e69:	58                   	pop    %eax
+     e6a:	5a                   	pop    %edx
+     e6b:	68 7c 42 00 00       	push   $0x427c
+     e70:	6a 01                	push   $0x1
+     e72:	e8 79 2c 00 00       	call   3af0 <printf>
+    exit();
+     e77:	e8 07 2b 00 00       	call   3983 <exit>
+     e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e80:	83 ec 08             	sub    $0x8,%esp
+     e83:	68 62 42 00 00       	push   $0x4262
+     e88:	6a 01                	push   $0x1
+     e8a:	e8 61 2c 00 00       	call   3af0 <printf>
+      kill(ppid);
+     e8f:	89 1c 24             	mov    %ebx,(%esp)
+     e92:	e8 1c 2b 00 00       	call   39b3 <kill>
+      exit();
+     e97:	e8 e7 2a 00 00       	call   3983 <exit>
+     e9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     ea0:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     ea3:	5b                   	pop    %ebx
+     ea4:	5e                   	pop    %esi
+     ea5:	5d                   	pop    %ebp
+    wait();
+     ea6:	e9 e0 2a 00 00       	jmp    398b <wait>
+     eab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     eaf:	90                   	nop
+
+00000eb0 <sharedfd>:
+{
+     eb0:	f3 0f 1e fb          	endbr32 
+     eb4:	55                   	push   %ebp
+     eb5:	89 e5                	mov    %esp,%ebp
+     eb7:	57                   	push   %edi
+     eb8:	56                   	push   %esi
+     eb9:	53                   	push   %ebx
+     eba:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     ebd:	68 84 42 00 00       	push   $0x4284
+     ec2:	6a 01                	push   $0x1
+     ec4:	e8 27 2c 00 00       	call   3af0 <printf>
+  unlink("sharedfd");
+     ec9:	c7 04 24 93 42 00 00 	movl   $0x4293,(%esp)
+     ed0:	e8 fe 2a 00 00       	call   39d3 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     ed5:	5b                   	pop    %ebx
+     ed6:	5e                   	pop    %esi
+     ed7:	68 02 02 00 00       	push   $0x202
+     edc:	68 93 42 00 00       	push   $0x4293
+     ee1:	e8 dd 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     ee6:	83 c4 10             	add    $0x10,%esp
+     ee9:	85 c0                	test   %eax,%eax
+     eeb:	0f 88 26 01 00 00    	js     1017 <sharedfd+0x167>
+     ef1:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     ef3:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ef6:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     efb:	e8 7b 2a 00 00       	call   397b <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f00:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     f03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     f06:	19 c0                	sbb    %eax,%eax
+     f08:	83 ec 04             	sub    $0x4,%esp
+     f0b:	83 e0 f3             	and    $0xfffffff3,%eax
+     f0e:	6a 0a                	push   $0xa
+     f10:	83 c0 70             	add    $0x70,%eax
+     f13:	50                   	push   %eax
+     f14:	56                   	push   %esi
+     f15:	e8 c6 28 00 00       	call   37e0 <memset>
+     f1a:	83 c4 10             	add    $0x10,%esp
+     f1d:	eb 06                	jmp    f25 <sharedfd+0x75>
+     f1f:	90                   	nop
+  for(i = 0; i < 1000; i++){
+     f20:	83 eb 01             	sub    $0x1,%ebx
+     f23:	74 26                	je     f4b <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     f25:	83 ec 04             	sub    $0x4,%esp
+     f28:	6a 0a                	push   $0xa
+     f2a:	56                   	push   %esi
+     f2b:	57                   	push   %edi
+     f2c:	e8 72 2a 00 00       	call   39a3 <write>
+     f31:	83 c4 10             	add    $0x10,%esp
+     f34:	83 f8 0a             	cmp    $0xa,%eax
+     f37:	74 e7                	je     f20 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     f39:	83 ec 08             	sub    $0x8,%esp
+     f3c:	68 84 4f 00 00       	push   $0x4f84
+     f41:	6a 01                	push   $0x1
+     f43:	e8 a8 2b 00 00       	call   3af0 <printf>
+      break;
+     f48:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     f4b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     f4e:	85 c9                	test   %ecx,%ecx
+     f50:	0f 84 f5 00 00 00    	je     104b <sharedfd+0x19b>
+    wait();
+     f56:	e8 30 2a 00 00       	call   398b <wait>
+  close(fd);
+     f5b:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     f5e:	31 db                	xor    %ebx,%ebx
+  close(fd);
+     f60:	57                   	push   %edi
+     f61:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f64:	e8 42 2a 00 00       	call   39ab <close>
+  fd = open("sharedfd", 0);
+     f69:	58                   	pop    %eax
+     f6a:	5a                   	pop    %edx
+     f6b:	6a 00                	push   $0x0
+     f6d:	68 93 42 00 00       	push   $0x4293
+     f72:	e8 4c 2a 00 00       	call   39c3 <open>
+  if(fd < 0){
+     f77:	83 c4 10             	add    $0x10,%esp
+  nc = np = 0;
+     f7a:	31 d2                	xor    %edx,%edx
+  fd = open("sharedfd", 0);
+     f7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f7f:	85 c0                	test   %eax,%eax
+     f81:	0f 88 aa 00 00 00    	js     1031 <sharedfd+0x181>
+     f87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f8e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f90:	83 ec 04             	sub    $0x4,%esp
+     f93:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f96:	6a 0a                	push   $0xa
+     f98:	56                   	push   %esi
+     f99:	ff 75 d0             	pushl  -0x30(%ebp)
+     f9c:	e8 fa 29 00 00       	call   399b <read>
+     fa1:	83 c4 10             	add    $0x10,%esp
+     fa4:	85 c0                	test   %eax,%eax
+     fa6:	7e 28                	jle    fd0 <sharedfd+0x120>
+    for(i = 0; i < sizeof(buf); i++){
+     fa8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fab:	89 f0                	mov    %esi,%eax
+     fad:	eb 13                	jmp    fc2 <sharedfd+0x112>
+     faf:	90                   	nop
+        np++;
+     fb0:	80 f9 70             	cmp    $0x70,%cl
+     fb3:	0f 94 c1             	sete   %cl
+     fb6:	0f b6 c9             	movzbl %cl,%ecx
+     fb9:	01 cb                	add    %ecx,%ebx
+    for(i = 0; i < sizeof(buf); i++){
+     fbb:	83 c0 01             	add    $0x1,%eax
+     fbe:	39 c7                	cmp    %eax,%edi
+     fc0:	74 ce                	je     f90 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     fc2:	0f b6 08             	movzbl (%eax),%ecx
+     fc5:	80 f9 63             	cmp    $0x63,%cl
+     fc8:	75 e6                	jne    fb0 <sharedfd+0x100>
+        nc++;
+     fca:	83 c2 01             	add    $0x1,%edx
+      if(buf[i] == 'p')
+     fcd:	eb ec                	jmp    fbb <sharedfd+0x10b>
+     fcf:	90                   	nop
+  close(fd);
+     fd0:	83 ec 0c             	sub    $0xc,%esp
+     fd3:	ff 75 d0             	pushl  -0x30(%ebp)
+     fd6:	e8 d0 29 00 00       	call   39ab <close>
+  unlink("sharedfd");
+     fdb:	c7 04 24 93 42 00 00 	movl   $0x4293,(%esp)
+     fe2:	e8 ec 29 00 00       	call   39d3 <unlink>
+  if(nc == 10000 && np == 10000){
+     fe7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     fea:	83 c4 10             	add    $0x10,%esp
+     fed:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     ff3:	75 5b                	jne    1050 <sharedfd+0x1a0>
+     ff5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     ffb:	75 53                	jne    1050 <sharedfd+0x1a0>
+    printf(1, "sharedfd ok\n");
+     ffd:	83 ec 08             	sub    $0x8,%esp
+    1000:	68 9c 42 00 00       	push   $0x429c
+    1005:	6a 01                	push   $0x1
+    1007:	e8 e4 2a 00 00       	call   3af0 <printf>
+    100c:	83 c4 10             	add    $0x10,%esp
+}
+    100f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1012:	5b                   	pop    %ebx
+    1013:	5e                   	pop    %esi
+    1014:	5f                   	pop    %edi
+    1015:	5d                   	pop    %ebp
+    1016:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+    1017:	83 ec 08             	sub    $0x8,%esp
+    101a:	68 58 4f 00 00       	push   $0x4f58
+    101f:	6a 01                	push   $0x1
+    1021:	e8 ca 2a 00 00       	call   3af0 <printf>
+    return;
+    1026:	83 c4 10             	add    $0x10,%esp
+}
+    1029:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    102c:	5b                   	pop    %ebx
+    102d:	5e                   	pop    %esi
+    102e:	5f                   	pop    %edi
+    102f:	5d                   	pop    %ebp
+    1030:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+    1031:	83 ec 08             	sub    $0x8,%esp
+    1034:	68 a4 4f 00 00       	push   $0x4fa4
+    1039:	6a 01                	push   $0x1
+    103b:	e8 b0 2a 00 00       	call   3af0 <printf>
+    return;
+    1040:	83 c4 10             	add    $0x10,%esp
+}
+    1043:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1046:	5b                   	pop    %ebx
+    1047:	5e                   	pop    %esi
+    1048:	5f                   	pop    %edi
+    1049:	5d                   	pop    %ebp
+    104a:	c3                   	ret    
+    exit();
+    104b:	e8 33 29 00 00       	call   3983 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    1050:	53                   	push   %ebx
+    1051:	52                   	push   %edx
+    1052:	68 a9 42 00 00       	push   $0x42a9
+    1057:	6a 01                	push   $0x1
+    1059:	e8 92 2a 00 00       	call   3af0 <printf>
+    exit();
+    105e:	e8 20 29 00 00       	call   3983 <exit>
+    1063:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001070 <fourfiles>:
+{
+    1070:	f3 0f 1e fb          	endbr32 
+    1074:	55                   	push   %ebp
+    1075:	89 e5                	mov    %esp,%ebp
+    1077:	57                   	push   %edi
+    1078:	56                   	push   %esi
+  printf(1, "fourfiles test\n");
+    1079:	be be 42 00 00       	mov    $0x42be,%esi
+{
+    107e:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    107f:	31 db                	xor    %ebx,%ebx
+{
+    1081:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1084:	c7 45 d8 be 42 00 00 	movl   $0x42be,-0x28(%ebp)
+  printf(1, "fourfiles test\n");
+    108b:	68 c4 42 00 00       	push   $0x42c4
+    1090:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1092:	c7 45 dc 07 44 00 00 	movl   $0x4407,-0x24(%ebp)
+    1099:	c7 45 e0 0b 44 00 00 	movl   $0x440b,-0x20(%ebp)
+    10a0:	c7 45 e4 c1 42 00 00 	movl   $0x42c1,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    10a7:	e8 44 2a 00 00       	call   3af0 <printf>
+    10ac:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    10af:	83 ec 0c             	sub    $0xc,%esp
+    10b2:	56                   	push   %esi
+    10b3:	e8 1b 29 00 00       	call   39d3 <unlink>
+    pid = fork();
+    10b8:	e8 be 28 00 00       	call   397b <fork>
+    if(pid < 0){
+    10bd:	83 c4 10             	add    $0x10,%esp
+    10c0:	85 c0                	test   %eax,%eax
+    10c2:	0f 88 60 01 00 00    	js     1228 <fourfiles+0x1b8>
+    if(pid == 0){
+    10c8:	0f 84 e5 00 00 00    	je     11b3 <fourfiles+0x143>
+  for(pi = 0; pi < 4; pi++){
+    10ce:	83 c3 01             	add    $0x1,%ebx
+    10d1:	83 fb 04             	cmp    $0x4,%ebx
+    10d4:	74 06                	je     10dc <fourfiles+0x6c>
+    10d6:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    10da:	eb d3                	jmp    10af <fourfiles+0x3f>
+    wait();
+    10dc:	e8 aa 28 00 00       	call   398b <wait>
+  for(i = 0; i < 2; i++){
+    10e1:	31 f6                	xor    %esi,%esi
+    wait();
+    10e3:	e8 a3 28 00 00       	call   398b <wait>
+    10e8:	e8 9e 28 00 00       	call   398b <wait>
+    10ed:	e8 99 28 00 00       	call   398b <wait>
+    fname = names[i];
+    10f2:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
+    fd = open(fname, 0);
+    10f6:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    10f9:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    10fb:	6a 00                	push   $0x0
+    10fd:	50                   	push   %eax
+    fname = names[i];
+    10fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    fd = open(fname, 0);
+    1101:	e8 bd 28 00 00       	call   39c3 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    1106:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    1109:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    110c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1110:	83 ec 04             	sub    $0x4,%esp
+    1113:	68 00 20 00 00       	push   $0x2000
+    1118:	68 e0 86 00 00       	push   $0x86e0
+    111d:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1120:	e8 76 28 00 00       	call   399b <read>
+    1125:	83 c4 10             	add    $0x10,%esp
+    1128:	85 c0                	test   %eax,%eax
+    112a:	7e 22                	jle    114e <fourfiles+0xde>
+      for(j = 0; j < n; j++){
+    112c:	31 d2                	xor    %edx,%edx
+    112e:	66 90                	xchg   %ax,%ax
+        if(buf[j] != '0'+i){
+    1130:	83 fe 01             	cmp    $0x1,%esi
+    1133:	0f be ba e0 86 00 00 	movsbl 0x86e0(%edx),%edi
+    113a:	19 c9                	sbb    %ecx,%ecx
+    113c:	83 c1 31             	add    $0x31,%ecx
+    113f:	39 cf                	cmp    %ecx,%edi
+    1141:	75 5c                	jne    119f <fourfiles+0x12f>
+      for(j = 0; j < n; j++){
+    1143:	83 c2 01             	add    $0x1,%edx
+    1146:	39 d0                	cmp    %edx,%eax
+    1148:	75 e6                	jne    1130 <fourfiles+0xc0>
+      total += n;
+    114a:	01 c3                	add    %eax,%ebx
+    114c:	eb c2                	jmp    1110 <fourfiles+0xa0>
+    close(fd);
+    114e:	83 ec 0c             	sub    $0xc,%esp
+    1151:	ff 75 d4             	pushl  -0x2c(%ebp)
+    1154:	e8 52 28 00 00       	call   39ab <close>
+    if(total != 12*500){
+    1159:	83 c4 10             	add    $0x10,%esp
+    115c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1162:	0f 85 d4 00 00 00    	jne    123c <fourfiles+0x1cc>
+    unlink(fname);
+    1168:	83 ec 0c             	sub    $0xc,%esp
+    116b:	ff 75 d0             	pushl  -0x30(%ebp)
+    116e:	e8 60 28 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 2; i++){
+    1173:	83 c4 10             	add    $0x10,%esp
+    1176:	83 fe 01             	cmp    $0x1,%esi
+    1179:	75 1a                	jne    1195 <fourfiles+0x125>
+  printf(1, "fourfiles ok\n");
+    117b:	83 ec 08             	sub    $0x8,%esp
+    117e:	68 02 43 00 00       	push   $0x4302
+    1183:	6a 01                	push   $0x1
+    1185:	e8 66 29 00 00       	call   3af0 <printf>
+}
+    118a:	83 c4 10             	add    $0x10,%esp
+    118d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1190:	5b                   	pop    %ebx
+    1191:	5e                   	pop    %esi
+    1192:	5f                   	pop    %edi
+    1193:	5d                   	pop    %ebp
+    1194:	c3                   	ret    
+    1195:	be 01 00 00 00       	mov    $0x1,%esi
+    119a:	e9 53 ff ff ff       	jmp    10f2 <fourfiles+0x82>
+          printf(1, "wrong char\n");
+    119f:	83 ec 08             	sub    $0x8,%esp
+    11a2:	68 e5 42 00 00       	push   $0x42e5
+    11a7:	6a 01                	push   $0x1
+    11a9:	e8 42 29 00 00       	call   3af0 <printf>
+          exit();
+    11ae:	e8 d0 27 00 00       	call   3983 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    11b3:	83 ec 08             	sub    $0x8,%esp
+    11b6:	68 02 02 00 00       	push   $0x202
+    11bb:	56                   	push   %esi
+    11bc:	e8 02 28 00 00       	call   39c3 <open>
+      if(fd < 0){
+    11c1:	83 c4 10             	add    $0x10,%esp
+      fd = open(fname, O_CREATE | O_RDWR);
+    11c4:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    11c6:	85 c0                	test   %eax,%eax
+    11c8:	78 45                	js     120f <fourfiles+0x19f>
+      memset(buf, '0'+pi, 512);
+    11ca:	83 ec 04             	sub    $0x4,%esp
+    11cd:	83 c3 30             	add    $0x30,%ebx
+    11d0:	68 00 02 00 00       	push   $0x200
+    11d5:	53                   	push   %ebx
+    11d6:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    11db:	68 e0 86 00 00       	push   $0x86e0
+    11e0:	e8 fb 25 00 00       	call   37e0 <memset>
+    11e5:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    11e8:	83 ec 04             	sub    $0x4,%esp
+    11eb:	68 f4 01 00 00       	push   $0x1f4
+    11f0:	68 e0 86 00 00       	push   $0x86e0
+    11f5:	56                   	push   %esi
+    11f6:	e8 a8 27 00 00       	call   39a3 <write>
+    11fb:	83 c4 10             	add    $0x10,%esp
+    11fe:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    1203:	75 4a                	jne    124f <fourfiles+0x1df>
+      for(i = 0; i < 12; i++){
+    1205:	83 eb 01             	sub    $0x1,%ebx
+    1208:	75 de                	jne    11e8 <fourfiles+0x178>
+      exit();
+    120a:	e8 74 27 00 00       	call   3983 <exit>
+        printf(1, "create failed\n");
+    120f:	51                   	push   %ecx
+    1210:	51                   	push   %ecx
+    1211:	68 5f 45 00 00       	push   $0x455f
+    1216:	6a 01                	push   $0x1
+    1218:	e8 d3 28 00 00       	call   3af0 <printf>
+        exit();
+    121d:	e8 61 27 00 00       	call   3983 <exit>
+    1222:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      printf(1, "fork failed\n");
+    1228:	83 ec 08             	sub    $0x8,%esp
+    122b:	68 99 4d 00 00       	push   $0x4d99
+    1230:	6a 01                	push   $0x1
+    1232:	e8 b9 28 00 00       	call   3af0 <printf>
+      exit();
+    1237:	e8 47 27 00 00       	call   3983 <exit>
+      printf(1, "wrong length %d\n", total);
+    123c:	50                   	push   %eax
+    123d:	53                   	push   %ebx
+    123e:	68 f1 42 00 00       	push   $0x42f1
+    1243:	6a 01                	push   $0x1
+    1245:	e8 a6 28 00 00       	call   3af0 <printf>
+      exit();
+    124a:	e8 34 27 00 00       	call   3983 <exit>
+          printf(1, "write failed %d\n", n);
+    124f:	52                   	push   %edx
+    1250:	50                   	push   %eax
+    1251:	68 d4 42 00 00       	push   $0x42d4
+    1256:	6a 01                	push   $0x1
+    1258:	e8 93 28 00 00       	call   3af0 <printf>
+          exit();
+    125d:	e8 21 27 00 00       	call   3983 <exit>
+    1262:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1269:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001270 <createdelete>:
+{
+    1270:	f3 0f 1e fb          	endbr32 
+    1274:	55                   	push   %ebp
+    1275:	89 e5                	mov    %esp,%ebp
+    1277:	57                   	push   %edi
+    1278:	56                   	push   %esi
+    1279:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    127a:	31 db                	xor    %ebx,%ebx
+{
+    127c:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    127f:	68 10 43 00 00       	push   $0x4310
+    1284:	6a 01                	push   $0x1
+    1286:	e8 65 28 00 00       	call   3af0 <printf>
+    128b:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    128e:	e8 e8 26 00 00       	call   397b <fork>
+    if(pid < 0){
+    1293:	85 c0                	test   %eax,%eax
+    1295:	0f 88 ce 01 00 00    	js     1469 <createdelete+0x1f9>
+    if(pid == 0){
+    129b:	0f 84 17 01 00 00    	je     13b8 <createdelete+0x148>
+  for(pi = 0; pi < 4; pi++){
+    12a1:	83 c3 01             	add    $0x1,%ebx
+    12a4:	83 fb 04             	cmp    $0x4,%ebx
+    12a7:	75 e5                	jne    128e <createdelete+0x1e>
+    wait();
+    12a9:	e8 dd 26 00 00       	call   398b <wait>
+    12ae:	8d 7d c8             	lea    -0x38(%ebp),%edi
+  name[0] = name[1] = name[2] = 0;
+    12b1:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    wait();
+    12b6:	e8 d0 26 00 00       	call   398b <wait>
+    12bb:	e8 cb 26 00 00       	call   398b <wait>
+    12c0:	e8 c6 26 00 00       	call   398b <wait>
+  name[0] = name[1] = name[2] = 0;
+    12c5:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+  for(i = 0; i < N; i++){
+    12c9:	89 7d c0             	mov    %edi,-0x40(%ebp)
+    12cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    for(pi = 0; pi < 4; pi++){
+    12d0:	8d 46 31             	lea    0x31(%esi),%eax
+    12d3:	89 f7                	mov    %esi,%edi
+    12d5:	83 c6 01             	add    $0x1,%esi
+    12d8:	83 fe 09             	cmp    $0x9,%esi
+    12db:	88 45 c7             	mov    %al,-0x39(%ebp)
+    12de:	0f 9f c3             	setg   %bl
+    12e1:	85 f6                	test   %esi,%esi
+    12e3:	0f 94 c0             	sete   %al
+    12e6:	09 c3                	or     %eax,%ebx
+    12e8:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+      name[2] = '\0';
+    12eb:	bb 70 00 00 00       	mov    $0x70,%ebx
+      fd = open(name, 0);
+    12f0:	83 ec 08             	sub    $0x8,%esp
+      name[1] = '0' + i;
+    12f3:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      name[0] = 'p' + pi;
+    12f7:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    12fa:	6a 00                	push   $0x0
+    12fc:	ff 75 c0             	pushl  -0x40(%ebp)
+      name[1] = '0' + i;
+    12ff:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    1302:	e8 bc 26 00 00       	call   39c3 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    1307:	83 c4 10             	add    $0x10,%esp
+    130a:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    130e:	0f 84 8c 00 00 00    	je     13a0 <createdelete+0x130>
+    1314:	85 c0                	test   %eax,%eax
+    1316:	0f 88 21 01 00 00    	js     143d <createdelete+0x1cd>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    131c:	83 ff 08             	cmp    $0x8,%edi
+    131f:	0f 86 60 01 00 00    	jbe    1485 <createdelete+0x215>
+        close(fd);
+    1325:	83 ec 0c             	sub    $0xc,%esp
+    1328:	50                   	push   %eax
+    1329:	e8 7d 26 00 00       	call   39ab <close>
+    132e:	83 c4 10             	add    $0x10,%esp
+    for(pi = 0; pi < 4; pi++){
+    1331:	83 c3 01             	add    $0x1,%ebx
+    1334:	80 fb 74             	cmp    $0x74,%bl
+    1337:	75 b7                	jne    12f0 <createdelete+0x80>
+  for(i = 0; i < N; i++){
+    1339:	83 fe 13             	cmp    $0x13,%esi
+    133c:	75 92                	jne    12d0 <createdelete+0x60>
+    133e:	8b 7d c0             	mov    -0x40(%ebp),%edi
+    1341:	be 70 00 00 00       	mov    $0x70,%esi
+    1346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    134d:	8d 76 00             	lea    0x0(%esi),%esi
+    for(pi = 0; pi < 4; pi++){
+    1350:	8d 46 c0             	lea    -0x40(%esi),%eax
+  name[0] = name[1] = name[2] = 0;
+    1353:	bb 04 00 00 00       	mov    $0x4,%ebx
+    1358:	88 45 c7             	mov    %al,-0x39(%ebp)
+      unlink(name);
+    135b:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    135e:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    1360:	57                   	push   %edi
+      name[0] = 'p' + i;
+    1361:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1364:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    1368:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    136b:	e8 63 26 00 00       	call   39d3 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1370:	83 c4 10             	add    $0x10,%esp
+    1373:	83 eb 01             	sub    $0x1,%ebx
+    1376:	75 e3                	jne    135b <createdelete+0xeb>
+  for(i = 0; i < N; i++){
+    1378:	83 c6 01             	add    $0x1,%esi
+    137b:	89 f0                	mov    %esi,%eax
+    137d:	3c 84                	cmp    $0x84,%al
+    137f:	75 cf                	jne    1350 <createdelete+0xe0>
+  printf(1, "createdelete ok\n");
+    1381:	83 ec 08             	sub    $0x8,%esp
+    1384:	68 23 43 00 00       	push   $0x4323
+    1389:	6a 01                	push   $0x1
+    138b:	e8 60 27 00 00       	call   3af0 <printf>
+}
+    1390:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1393:	5b                   	pop    %ebx
+    1394:	5e                   	pop    %esi
+    1395:	5f                   	pop    %edi
+    1396:	5d                   	pop    %ebp
+    1397:	c3                   	ret    
+    1398:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    139f:	90                   	nop
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    13a0:	83 ff 08             	cmp    $0x8,%edi
+    13a3:	0f 86 d4 00 00 00    	jbe    147d <createdelete+0x20d>
+      if(fd >= 0)
+    13a9:	85 c0                	test   %eax,%eax
+    13ab:	78 84                	js     1331 <createdelete+0xc1>
+    13ad:	e9 73 ff ff ff       	jmp    1325 <createdelete+0xb5>
+    13b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      name[0] = 'p' + pi;
+    13b8:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    13bb:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    13bf:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    13c2:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    13c5:	31 db                	xor    %ebx,%ebx
+    13c7:	eb 0f                	jmp    13d8 <createdelete+0x168>
+    13c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      for(i = 0; i < N; i++){
+    13d0:	83 fb 13             	cmp    $0x13,%ebx
+    13d3:	74 63                	je     1438 <createdelete+0x1c8>
+    13d5:	83 c3 01             	add    $0x1,%ebx
+        fd = open(name, O_CREATE | O_RDWR);
+    13d8:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    13db:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    13de:	68 02 02 00 00       	push   $0x202
+    13e3:	57                   	push   %edi
+        name[1] = '0' + i;
+    13e4:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    13e7:	e8 d7 25 00 00       	call   39c3 <open>
+        if(fd < 0){
+    13ec:	83 c4 10             	add    $0x10,%esp
+    13ef:	85 c0                	test   %eax,%eax
+    13f1:	78 62                	js     1455 <createdelete+0x1e5>
+        close(fd);
+    13f3:	83 ec 0c             	sub    $0xc,%esp
+    13f6:	50                   	push   %eax
+    13f7:	e8 af 25 00 00       	call   39ab <close>
+        if(i > 0 && (i % 2 ) == 0){
+    13fc:	83 c4 10             	add    $0x10,%esp
+    13ff:	85 db                	test   %ebx,%ebx
+    1401:	74 d2                	je     13d5 <createdelete+0x165>
+    1403:	f6 c3 01             	test   $0x1,%bl
+    1406:	75 c8                	jne    13d0 <createdelete+0x160>
+          if(unlink(name) < 0){
+    1408:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    140b:	89 d8                	mov    %ebx,%eax
+          if(unlink(name) < 0){
+    140d:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    140e:	d1 f8                	sar    %eax
+    1410:	83 c0 30             	add    $0x30,%eax
+    1413:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    1416:	e8 b8 25 00 00       	call   39d3 <unlink>
+    141b:	83 c4 10             	add    $0x10,%esp
+    141e:	85 c0                	test   %eax,%eax
+    1420:	79 ae                	jns    13d0 <createdelete+0x160>
+            printf(1, "unlink failed\n");
+    1422:	52                   	push   %edx
+    1423:	52                   	push   %edx
+    1424:	68 11 3f 00 00       	push   $0x3f11
+    1429:	6a 01                	push   $0x1
+    142b:	e8 c0 26 00 00       	call   3af0 <printf>
+            exit();
+    1430:	e8 4e 25 00 00       	call   3983 <exit>
+    1435:	8d 76 00             	lea    0x0(%esi),%esi
+      exit();
+    1438:	e8 46 25 00 00       	call   3983 <exit>
+    143d:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    1440:	83 ec 04             	sub    $0x4,%esp
+    1443:	57                   	push   %edi
+    1444:	68 d0 4f 00 00       	push   $0x4fd0
+    1449:	6a 01                	push   $0x1
+    144b:	e8 a0 26 00 00       	call   3af0 <printf>
+        exit();
+    1450:	e8 2e 25 00 00       	call   3983 <exit>
+          printf(1, "create failed\n");
+    1455:	83 ec 08             	sub    $0x8,%esp
+    1458:	68 5f 45 00 00       	push   $0x455f
+    145d:	6a 01                	push   $0x1
+    145f:	e8 8c 26 00 00       	call   3af0 <printf>
+          exit();
+    1464:	e8 1a 25 00 00       	call   3983 <exit>
+      printf(1, "fork failed\n");
+    1469:	83 ec 08             	sub    $0x8,%esp
+    146c:	68 99 4d 00 00       	push   $0x4d99
+    1471:	6a 01                	push   $0x1
+    1473:	e8 78 26 00 00       	call   3af0 <printf>
+      exit();
+    1478:	e8 06 25 00 00       	call   3983 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    147d:	85 c0                	test   %eax,%eax
+    147f:	0f 88 ac fe ff ff    	js     1331 <createdelete+0xc1>
+    1485:	8b 7d c0             	mov    -0x40(%ebp),%edi
+        printf(1, "oops createdelete %s did exist\n", name);
+    1488:	50                   	push   %eax
+    1489:	57                   	push   %edi
+    148a:	68 f4 4f 00 00       	push   $0x4ff4
+    148f:	6a 01                	push   $0x1
+    1491:	e8 5a 26 00 00       	call   3af0 <printf>
+        exit();
+    1496:	e8 e8 24 00 00       	call   3983 <exit>
+    149b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    149f:	90                   	nop
+
+000014a0 <unlinkread>:
+{
+    14a0:	f3 0f 1e fb          	endbr32 
+    14a4:	55                   	push   %ebp
+    14a5:	89 e5                	mov    %esp,%ebp
+    14a7:	56                   	push   %esi
+    14a8:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    14a9:	83 ec 08             	sub    $0x8,%esp
+    14ac:	68 34 43 00 00       	push   $0x4334
+    14b1:	6a 01                	push   $0x1
+    14b3:	e8 38 26 00 00       	call   3af0 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    14b8:	5b                   	pop    %ebx
+    14b9:	5e                   	pop    %esi
+    14ba:	68 02 02 00 00       	push   $0x202
+    14bf:	68 45 43 00 00       	push   $0x4345
+    14c4:	e8 fa 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14c9:	83 c4 10             	add    $0x10,%esp
+    14cc:	85 c0                	test   %eax,%eax
+    14ce:	0f 88 e6 00 00 00    	js     15ba <unlinkread+0x11a>
+  write(fd, "hello", 5);
+    14d4:	83 ec 04             	sub    $0x4,%esp
+    14d7:	89 c3                	mov    %eax,%ebx
+    14d9:	6a 05                	push   $0x5
+    14db:	68 6a 43 00 00       	push   $0x436a
+    14e0:	50                   	push   %eax
+    14e1:	e8 bd 24 00 00       	call   39a3 <write>
+  close(fd);
+    14e6:	89 1c 24             	mov    %ebx,(%esp)
+    14e9:	e8 bd 24 00 00       	call   39ab <close>
+  fd = open("unlinkread", O_RDWR);
+    14ee:	58                   	pop    %eax
+    14ef:	5a                   	pop    %edx
+    14f0:	6a 02                	push   $0x2
+    14f2:	68 45 43 00 00       	push   $0x4345
+    14f7:	e8 c7 24 00 00       	call   39c3 <open>
+  if(fd < 0){
+    14fc:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_RDWR);
+    14ff:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1501:	85 c0                	test   %eax,%eax
+    1503:	0f 88 10 01 00 00    	js     1619 <unlinkread+0x179>
+  if(unlink("unlinkread") != 0){
+    1509:	83 ec 0c             	sub    $0xc,%esp
+    150c:	68 45 43 00 00       	push   $0x4345
+    1511:	e8 bd 24 00 00       	call   39d3 <unlink>
+    1516:	83 c4 10             	add    $0x10,%esp
+    1519:	85 c0                	test   %eax,%eax
+    151b:	0f 85 e5 00 00 00    	jne    1606 <unlinkread+0x166>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1521:	83 ec 08             	sub    $0x8,%esp
+    1524:	68 02 02 00 00       	push   $0x202
+    1529:	68 45 43 00 00       	push   $0x4345
+    152e:	e8 90 24 00 00       	call   39c3 <open>
+  write(fd1, "yyy", 3);
+    1533:	83 c4 0c             	add    $0xc,%esp
+    1536:	6a 03                	push   $0x3
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    1538:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    153a:	68 a2 43 00 00       	push   $0x43a2
+    153f:	50                   	push   %eax
+    1540:	e8 5e 24 00 00       	call   39a3 <write>
+  close(fd1);
+    1545:	89 34 24             	mov    %esi,(%esp)
+    1548:	e8 5e 24 00 00       	call   39ab <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    154d:	83 c4 0c             	add    $0xc,%esp
+    1550:	68 00 20 00 00       	push   $0x2000
+    1555:	68 e0 86 00 00       	push   $0x86e0
+    155a:	53                   	push   %ebx
+    155b:	e8 3b 24 00 00       	call   399b <read>
+    1560:	83 c4 10             	add    $0x10,%esp
+    1563:	83 f8 05             	cmp    $0x5,%eax
+    1566:	0f 85 87 00 00 00    	jne    15f3 <unlinkread+0x153>
+  if(buf[0] != 'h'){
+    156c:	80 3d e0 86 00 00 68 	cmpb   $0x68,0x86e0
+    1573:	75 6b                	jne    15e0 <unlinkread+0x140>
+  if(write(fd, buf, 10) != 10){
+    1575:	83 ec 04             	sub    $0x4,%esp
+    1578:	6a 0a                	push   $0xa
+    157a:	68 e0 86 00 00       	push   $0x86e0
+    157f:	53                   	push   %ebx
+    1580:	e8 1e 24 00 00       	call   39a3 <write>
+    1585:	83 c4 10             	add    $0x10,%esp
+    1588:	83 f8 0a             	cmp    $0xa,%eax
+    158b:	75 40                	jne    15cd <unlinkread+0x12d>
+  close(fd);
+    158d:	83 ec 0c             	sub    $0xc,%esp
+    1590:	53                   	push   %ebx
+    1591:	e8 15 24 00 00       	call   39ab <close>
+  unlink("unlinkread");
+    1596:	c7 04 24 45 43 00 00 	movl   $0x4345,(%esp)
+    159d:	e8 31 24 00 00       	call   39d3 <unlink>
+  printf(1, "unlinkread ok\n");
+    15a2:	58                   	pop    %eax
+    15a3:	5a                   	pop    %edx
+    15a4:	68 ed 43 00 00       	push   $0x43ed
+    15a9:	6a 01                	push   $0x1
+    15ab:	e8 40 25 00 00       	call   3af0 <printf>
+}
+    15b0:	83 c4 10             	add    $0x10,%esp
+    15b3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    15b6:	5b                   	pop    %ebx
+    15b7:	5e                   	pop    %esi
+    15b8:	5d                   	pop    %ebp
+    15b9:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    15ba:	51                   	push   %ecx
+    15bb:	51                   	push   %ecx
+    15bc:	68 50 43 00 00       	push   $0x4350
+    15c1:	6a 01                	push   $0x1
+    15c3:	e8 28 25 00 00       	call   3af0 <printf>
+    exit();
+    15c8:	e8 b6 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread write failed\n");
+    15cd:	51                   	push   %ecx
+    15ce:	51                   	push   %ecx
+    15cf:	68 d4 43 00 00       	push   $0x43d4
+    15d4:	6a 01                	push   $0x1
+    15d6:	e8 15 25 00 00       	call   3af0 <printf>
+    exit();
+    15db:	e8 a3 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread wrong data\n");
+    15e0:	53                   	push   %ebx
+    15e1:	53                   	push   %ebx
+    15e2:	68 bd 43 00 00       	push   $0x43bd
+    15e7:	6a 01                	push   $0x1
+    15e9:	e8 02 25 00 00       	call   3af0 <printf>
+    exit();
+    15ee:	e8 90 23 00 00       	call   3983 <exit>
+    printf(1, "unlinkread read failed");
+    15f3:	56                   	push   %esi
+    15f4:	56                   	push   %esi
+    15f5:	68 a6 43 00 00       	push   $0x43a6
+    15fa:	6a 01                	push   $0x1
+    15fc:	e8 ef 24 00 00       	call   3af0 <printf>
+    exit();
+    1601:	e8 7d 23 00 00       	call   3983 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    1606:	50                   	push   %eax
+    1607:	50                   	push   %eax
+    1608:	68 88 43 00 00       	push   $0x4388
+    160d:	6a 01                	push   $0x1
+    160f:	e8 dc 24 00 00       	call   3af0 <printf>
+    exit();
+    1614:	e8 6a 23 00 00       	call   3983 <exit>
+    printf(1, "open unlinkread failed\n");
+    1619:	50                   	push   %eax
+    161a:	50                   	push   %eax
+    161b:	68 70 43 00 00       	push   $0x4370
+    1620:	6a 01                	push   $0x1
+    1622:	e8 c9 24 00 00       	call   3af0 <printf>
+    exit();
+    1627:	e8 57 23 00 00       	call   3983 <exit>
+    162c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00001630 <linktest>:
+{
+    1630:	f3 0f 1e fb          	endbr32 
+    1634:	55                   	push   %ebp
+    1635:	89 e5                	mov    %esp,%ebp
+    1637:	53                   	push   %ebx
+    1638:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    163b:	68 fc 43 00 00       	push   $0x43fc
+    1640:	6a 01                	push   $0x1
+    1642:	e8 a9 24 00 00       	call   3af0 <printf>
+  unlink("lf1");
+    1647:	c7 04 24 06 44 00 00 	movl   $0x4406,(%esp)
+    164e:	e8 80 23 00 00       	call   39d3 <unlink>
+  unlink("lf2");
+    1653:	c7 04 24 0a 44 00 00 	movl   $0x440a,(%esp)
+    165a:	e8 74 23 00 00       	call   39d3 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    165f:	58                   	pop    %eax
+    1660:	5a                   	pop    %edx
+    1661:	68 02 02 00 00       	push   $0x202
+    1666:	68 06 44 00 00       	push   $0x4406
+    166b:	e8 53 23 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1670:	83 c4 10             	add    $0x10,%esp
+    1673:	85 c0                	test   %eax,%eax
+    1675:	0f 88 1e 01 00 00    	js     1799 <linktest+0x169>
+  if(write(fd, "hello", 5) != 5){
+    167b:	83 ec 04             	sub    $0x4,%esp
+    167e:	89 c3                	mov    %eax,%ebx
+    1680:	6a 05                	push   $0x5
+    1682:	68 6a 43 00 00       	push   $0x436a
+    1687:	50                   	push   %eax
+    1688:	e8 16 23 00 00       	call   39a3 <write>
+    168d:	83 c4 10             	add    $0x10,%esp
+    1690:	83 f8 05             	cmp    $0x5,%eax
+    1693:	0f 85 98 01 00 00    	jne    1831 <linktest+0x201>
+  close(fd);
+    1699:	83 ec 0c             	sub    $0xc,%esp
+    169c:	53                   	push   %ebx
+    169d:	e8 09 23 00 00       	call   39ab <close>
+  if(link("lf1", "lf2") < 0){
+    16a2:	5b                   	pop    %ebx
+    16a3:	58                   	pop    %eax
+    16a4:	68 0a 44 00 00       	push   $0x440a
+    16a9:	68 06 44 00 00       	push   $0x4406
+    16ae:	e8 30 23 00 00       	call   39e3 <link>
+    16b3:	83 c4 10             	add    $0x10,%esp
+    16b6:	85 c0                	test   %eax,%eax
+    16b8:	0f 88 60 01 00 00    	js     181e <linktest+0x1ee>
+  unlink("lf1");
+    16be:	83 ec 0c             	sub    $0xc,%esp
+    16c1:	68 06 44 00 00       	push   $0x4406
+    16c6:	e8 08 23 00 00       	call   39d3 <unlink>
+  if(open("lf1", 0) >= 0){
+    16cb:	58                   	pop    %eax
+    16cc:	5a                   	pop    %edx
+    16cd:	6a 00                	push   $0x0
+    16cf:	68 06 44 00 00       	push   $0x4406
+    16d4:	e8 ea 22 00 00       	call   39c3 <open>
+    16d9:	83 c4 10             	add    $0x10,%esp
+    16dc:	85 c0                	test   %eax,%eax
+    16de:	0f 89 27 01 00 00    	jns    180b <linktest+0x1db>
+  fd = open("lf2", 0);
+    16e4:	83 ec 08             	sub    $0x8,%esp
+    16e7:	6a 00                	push   $0x0
+    16e9:	68 0a 44 00 00       	push   $0x440a
+    16ee:	e8 d0 22 00 00       	call   39c3 <open>
+  if(fd < 0){
+    16f3:	83 c4 10             	add    $0x10,%esp
+  fd = open("lf2", 0);
+    16f6:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    16f8:	85 c0                	test   %eax,%eax
+    16fa:	0f 88 f8 00 00 00    	js     17f8 <linktest+0x1c8>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    1700:	83 ec 04             	sub    $0x4,%esp
+    1703:	68 00 20 00 00       	push   $0x2000
+    1708:	68 e0 86 00 00       	push   $0x86e0
+    170d:	50                   	push   %eax
+    170e:	e8 88 22 00 00       	call   399b <read>
+    1713:	83 c4 10             	add    $0x10,%esp
+    1716:	83 f8 05             	cmp    $0x5,%eax
+    1719:	0f 85 c6 00 00 00    	jne    17e5 <linktest+0x1b5>
+  close(fd);
+    171f:	83 ec 0c             	sub    $0xc,%esp
+    1722:	53                   	push   %ebx
+    1723:	e8 83 22 00 00       	call   39ab <close>
+  if(link("lf2", "lf2") >= 0){
+    1728:	58                   	pop    %eax
+    1729:	5a                   	pop    %edx
+    172a:	68 0a 44 00 00       	push   $0x440a
+    172f:	68 0a 44 00 00       	push   $0x440a
+    1734:	e8 aa 22 00 00       	call   39e3 <link>
+    1739:	83 c4 10             	add    $0x10,%esp
+    173c:	85 c0                	test   %eax,%eax
+    173e:	0f 89 8e 00 00 00    	jns    17d2 <linktest+0x1a2>
+  unlink("lf2");
+    1744:	83 ec 0c             	sub    $0xc,%esp
+    1747:	68 0a 44 00 00       	push   $0x440a
+    174c:	e8 82 22 00 00       	call   39d3 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    1751:	59                   	pop    %ecx
+    1752:	5b                   	pop    %ebx
+    1753:	68 06 44 00 00       	push   $0x4406
+    1758:	68 0a 44 00 00       	push   $0x440a
+    175d:	e8 81 22 00 00       	call   39e3 <link>
+    1762:	83 c4 10             	add    $0x10,%esp
+    1765:	85 c0                	test   %eax,%eax
+    1767:	79 56                	jns    17bf <linktest+0x18f>
+  if(link(".", "lf1") >= 0){
+    1769:	83 ec 08             	sub    $0x8,%esp
+    176c:	68 06 44 00 00       	push   $0x4406
+    1771:	68 ce 46 00 00       	push   $0x46ce
+    1776:	e8 68 22 00 00       	call   39e3 <link>
+    177b:	83 c4 10             	add    $0x10,%esp
+    177e:	85 c0                	test   %eax,%eax
+    1780:	79 2a                	jns    17ac <linktest+0x17c>
+  printf(1, "linktest ok\n");
+    1782:	83 ec 08             	sub    $0x8,%esp
+    1785:	68 a4 44 00 00       	push   $0x44a4
+    178a:	6a 01                	push   $0x1
+    178c:	e8 5f 23 00 00       	call   3af0 <printf>
+}
+    1791:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1794:	83 c4 10             	add    $0x10,%esp
+    1797:	c9                   	leave  
+    1798:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1799:	50                   	push   %eax
+    179a:	50                   	push   %eax
+    179b:	68 0e 44 00 00       	push   $0x440e
+    17a0:	6a 01                	push   $0x1
+    17a2:	e8 49 23 00 00       	call   3af0 <printf>
+    exit();
+    17a7:	e8 d7 21 00 00       	call   3983 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    17ac:	50                   	push   %eax
+    17ad:	50                   	push   %eax
+    17ae:	68 88 44 00 00       	push   $0x4488
+    17b3:	6a 01                	push   $0x1
+    17b5:	e8 36 23 00 00       	call   3af0 <printf>
+    exit();
+    17ba:	e8 c4 21 00 00       	call   3983 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    17bf:	52                   	push   %edx
+    17c0:	52                   	push   %edx
+    17c1:	68 3c 50 00 00       	push   $0x503c
+    17c6:	6a 01                	push   $0x1
+    17c8:	e8 23 23 00 00       	call   3af0 <printf>
+    exit();
+    17cd:	e8 b1 21 00 00       	call   3983 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    17d2:	50                   	push   %eax
+    17d3:	50                   	push   %eax
+    17d4:	68 6a 44 00 00       	push   $0x446a
+    17d9:	6a 01                	push   $0x1
+    17db:	e8 10 23 00 00       	call   3af0 <printf>
+    exit();
+    17e0:	e8 9e 21 00 00       	call   3983 <exit>
+    printf(1, "read lf2 failed\n");
+    17e5:	51                   	push   %ecx
+    17e6:	51                   	push   %ecx
+    17e7:	68 59 44 00 00       	push   $0x4459
+    17ec:	6a 01                	push   $0x1
+    17ee:	e8 fd 22 00 00       	call   3af0 <printf>
+    exit();
+    17f3:	e8 8b 21 00 00       	call   3983 <exit>
+    printf(1, "open lf2 failed\n");
+    17f8:	53                   	push   %ebx
+    17f9:	53                   	push   %ebx
+    17fa:	68 48 44 00 00       	push   $0x4448
+    17ff:	6a 01                	push   $0x1
+    1801:	e8 ea 22 00 00       	call   3af0 <printf>
+    exit();
+    1806:	e8 78 21 00 00       	call   3983 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    180b:	50                   	push   %eax
+    180c:	50                   	push   %eax
+    180d:	68 14 50 00 00       	push   $0x5014
+    1812:	6a 01                	push   $0x1
+    1814:	e8 d7 22 00 00       	call   3af0 <printf>
+    exit();
+    1819:	e8 65 21 00 00       	call   3983 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    181e:	51                   	push   %ecx
+    181f:	51                   	push   %ecx
+    1820:	68 33 44 00 00       	push   $0x4433
+    1825:	6a 01                	push   $0x1
+    1827:	e8 c4 22 00 00       	call   3af0 <printf>
+    exit();
+    182c:	e8 52 21 00 00       	call   3983 <exit>
+    printf(1, "write lf1 failed\n");
+    1831:	50                   	push   %eax
+    1832:	50                   	push   %eax
+    1833:	68 21 44 00 00       	push   $0x4421
+    1838:	6a 01                	push   $0x1
+    183a:	e8 b1 22 00 00       	call   3af0 <printf>
+    exit();
+    183f:	e8 3f 21 00 00       	call   3983 <exit>
+    1844:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    184b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    184f:	90                   	nop
+
+00001850 <concreate>:
+{
+    1850:	f3 0f 1e fb          	endbr32 
+    1854:	55                   	push   %ebp
+    1855:	89 e5                	mov    %esp,%ebp
+    1857:	57                   	push   %edi
+    1858:	56                   	push   %esi
+  for(i = 0; i < 40; i++){
+    1859:	31 f6                	xor    %esi,%esi
+{
+    185b:	53                   	push   %ebx
+    185c:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    185f:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    1862:	68 b1 44 00 00       	push   $0x44b1
+    1867:	6a 01                	push   $0x1
+    1869:	e8 82 22 00 00       	call   3af0 <printf>
+  file[0] = 'C';
+    186e:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    1872:	83 c4 10             	add    $0x10,%esp
+    1875:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+  for(i = 0; i < 40; i++){
+    1879:	eb 48                	jmp    18c3 <concreate+0x73>
+    187b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    187f:	90                   	nop
+    1880:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
+    if(pid && (i % 3) == 1){
+    1886:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
+    188b:	0f 83 af 00 00 00    	jae    1940 <concreate+0xf0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1891:	83 ec 08             	sub    $0x8,%esp
+    1894:	68 02 02 00 00       	push   $0x202
+    1899:	53                   	push   %ebx
+    189a:	e8 24 21 00 00       	call   39c3 <open>
+      if(fd < 0){
+    189f:	83 c4 10             	add    $0x10,%esp
+    18a2:	85 c0                	test   %eax,%eax
+    18a4:	78 5f                	js     1905 <concreate+0xb5>
+      close(fd);
+    18a6:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    18a9:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    18ac:	50                   	push   %eax
+    18ad:	e8 f9 20 00 00       	call   39ab <close>
+    18b2:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18b5:	e8 d1 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    18ba:	83 fe 28             	cmp    $0x28,%esi
+    18bd:	0f 84 9f 00 00 00    	je     1962 <concreate+0x112>
+    unlink(file);
+    18c3:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    18c6:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    18c9:	53                   	push   %ebx
+    file[1] = '0' + i;
+    18ca:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    18cd:	e8 01 21 00 00       	call   39d3 <unlink>
+    pid = fork();
+    18d2:	e8 a4 20 00 00       	call   397b <fork>
+    if(pid && (i % 3) == 1){
+    18d7:	83 c4 10             	add    $0x10,%esp
+    18da:	85 c0                	test   %eax,%eax
+    18dc:	75 a2                	jne    1880 <concreate+0x30>
+      link("C0", file);
+    18de:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
+    } else if(pid == 0 && (i % 5) == 1){
+    18e4:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
+    18ea:	73 34                	jae    1920 <concreate+0xd0>
+      fd = open(file, O_CREATE | O_RDWR);
+    18ec:	83 ec 08             	sub    $0x8,%esp
+    18ef:	68 02 02 00 00       	push   $0x202
+    18f4:	53                   	push   %ebx
+    18f5:	e8 c9 20 00 00       	call   39c3 <open>
+      if(fd < 0){
+    18fa:	83 c4 10             	add    $0x10,%esp
+    18fd:	85 c0                	test   %eax,%eax
+    18ff:	0f 89 39 02 00 00    	jns    1b3e <concreate+0x2ee>
+        printf(1, "concreate create %s failed\n", file);
+    1905:	83 ec 04             	sub    $0x4,%esp
+    1908:	53                   	push   %ebx
+    1909:	68 c4 44 00 00       	push   $0x44c4
+    190e:	6a 01                	push   $0x1
+    1910:	e8 db 21 00 00       	call   3af0 <printf>
+        exit();
+    1915:	e8 69 20 00 00       	call   3983 <exit>
+    191a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("C0", file);
+    1920:	83 ec 08             	sub    $0x8,%esp
+    1923:	53                   	push   %ebx
+    1924:	68 c1 44 00 00       	push   $0x44c1
+    1929:	e8 b5 20 00 00       	call   39e3 <link>
+    192e:	83 c4 10             	add    $0x10,%esp
+      exit();
+    1931:	e8 4d 20 00 00       	call   3983 <exit>
+    1936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    193d:	8d 76 00             	lea    0x0(%esi),%esi
+      link("C0", file);
+    1940:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    1943:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    1946:	53                   	push   %ebx
+    1947:	68 c1 44 00 00       	push   $0x44c1
+    194c:	e8 92 20 00 00       	call   39e3 <link>
+    1951:	83 c4 10             	add    $0x10,%esp
+      wait();
+    1954:	e8 32 20 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1959:	83 fe 28             	cmp    $0x28,%esi
+    195c:	0f 85 61 ff ff ff    	jne    18c3 <concreate+0x73>
+  memset(fa, 0, sizeof(fa));
+    1962:	83 ec 04             	sub    $0x4,%esp
+    1965:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    1968:	6a 28                	push   $0x28
+    196a:	6a 00                	push   $0x0
+    196c:	50                   	push   %eax
+    196d:	e8 6e 1e 00 00       	call   37e0 <memset>
+  fd = open(".", 0);
+    1972:	5e                   	pop    %esi
+    1973:	5f                   	pop    %edi
+    1974:	6a 00                	push   $0x0
+    1976:	68 ce 46 00 00       	push   $0x46ce
+    197b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    197e:	e8 40 20 00 00       	call   39c3 <open>
+  n = 0;
+    1983:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    198a:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    198d:	89 c6                	mov    %eax,%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    198f:	90                   	nop
+    1990:	83 ec 04             	sub    $0x4,%esp
+    1993:	6a 10                	push   $0x10
+    1995:	57                   	push   %edi
+    1996:	56                   	push   %esi
+    1997:	e8 ff 1f 00 00       	call   399b <read>
+    199c:	83 c4 10             	add    $0x10,%esp
+    199f:	85 c0                	test   %eax,%eax
+    19a1:	7e 3d                	jle    19e0 <concreate+0x190>
+    if(de.inum == 0)
+    19a3:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    19a8:	74 e6                	je     1990 <concreate+0x140>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    19aa:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    19ae:	75 e0                	jne    1990 <concreate+0x140>
+    19b0:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    19b4:	75 da                	jne    1990 <concreate+0x140>
+      i = de.name[1] - '0';
+    19b6:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    19ba:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    19bd:	83 f8 27             	cmp    $0x27,%eax
+    19c0:	0f 87 60 01 00 00    	ja     1b26 <concreate+0x2d6>
+      if(fa[i]){
+    19c6:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    19cb:	0f 85 3d 01 00 00    	jne    1b0e <concreate+0x2be>
+      n++;
+    19d1:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+      fa[i] = 1;
+    19d5:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    19da:	eb b4                	jmp    1990 <concreate+0x140>
+    19dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    19e0:	83 ec 0c             	sub    $0xc,%esp
+    19e3:	56                   	push   %esi
+    19e4:	e8 c2 1f 00 00       	call   39ab <close>
+  if(n != 40){
+    19e9:	83 c4 10             	add    $0x10,%esp
+    19ec:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    19f0:	0f 85 05 01 00 00    	jne    1afb <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    19f6:	31 f6                	xor    %esi,%esi
+    19f8:	eb 4c                	jmp    1a46 <concreate+0x1f6>
+    19fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1a00:	85 ff                	test   %edi,%edi
+    1a02:	74 05                	je     1a09 <concreate+0x1b9>
+    1a04:	83 f8 01             	cmp    $0x1,%eax
+    1a07:	74 6c                	je     1a75 <concreate+0x225>
+      unlink(file);
+    1a09:	83 ec 0c             	sub    $0xc,%esp
+    1a0c:	53                   	push   %ebx
+    1a0d:	e8 c1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a12:	89 1c 24             	mov    %ebx,(%esp)
+    1a15:	e8 b9 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a1a:	89 1c 24             	mov    %ebx,(%esp)
+    1a1d:	e8 b1 1f 00 00       	call   39d3 <unlink>
+      unlink(file);
+    1a22:	89 1c 24             	mov    %ebx,(%esp)
+    1a25:	e8 a9 1f 00 00       	call   39d3 <unlink>
+    1a2a:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    1a2d:	85 ff                	test   %edi,%edi
+    1a2f:	0f 84 fc fe ff ff    	je     1931 <concreate+0xe1>
+      wait();
+    1a35:	e8 51 1f 00 00       	call   398b <wait>
+  for(i = 0; i < 40; i++){
+    1a3a:	83 c6 01             	add    $0x1,%esi
+    1a3d:	83 fe 28             	cmp    $0x28,%esi
+    1a40:	0f 84 8a 00 00 00    	je     1ad0 <concreate+0x280>
+    file[1] = '0' + i;
+    1a46:	8d 46 30             	lea    0x30(%esi),%eax
+    1a49:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    1a4c:	e8 2a 1f 00 00       	call   397b <fork>
+    1a51:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    1a53:	85 c0                	test   %eax,%eax
+    1a55:	0f 88 8c 00 00 00    	js     1ae7 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    1a5b:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    1a60:	f7 e6                	mul    %esi
+    1a62:	89 d0                	mov    %edx,%eax
+    1a64:	83 e2 fe             	and    $0xfffffffe,%edx
+    1a67:	d1 e8                	shr    %eax
+    1a69:	01 c2                	add    %eax,%edx
+    1a6b:	89 f0                	mov    %esi,%eax
+    1a6d:	29 d0                	sub    %edx,%eax
+    1a6f:	89 c1                	mov    %eax,%ecx
+    1a71:	09 f9                	or     %edi,%ecx
+    1a73:	75 8b                	jne    1a00 <concreate+0x1b0>
+      close(open(file, 0));
+    1a75:	83 ec 08             	sub    $0x8,%esp
+    1a78:	6a 00                	push   $0x0
+    1a7a:	53                   	push   %ebx
+    1a7b:	e8 43 1f 00 00       	call   39c3 <open>
+    1a80:	89 04 24             	mov    %eax,(%esp)
+    1a83:	e8 23 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a88:	58                   	pop    %eax
+    1a89:	5a                   	pop    %edx
+    1a8a:	6a 00                	push   $0x0
+    1a8c:	53                   	push   %ebx
+    1a8d:	e8 31 1f 00 00       	call   39c3 <open>
+    1a92:	89 04 24             	mov    %eax,(%esp)
+    1a95:	e8 11 1f 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1a9a:	59                   	pop    %ecx
+    1a9b:	58                   	pop    %eax
+    1a9c:	6a 00                	push   $0x0
+    1a9e:	53                   	push   %ebx
+    1a9f:	e8 1f 1f 00 00       	call   39c3 <open>
+    1aa4:	89 04 24             	mov    %eax,(%esp)
+    1aa7:	e8 ff 1e 00 00       	call   39ab <close>
+      close(open(file, 0));
+    1aac:	58                   	pop    %eax
+    1aad:	5a                   	pop    %edx
+    1aae:	6a 00                	push   $0x0
+    1ab0:	53                   	push   %ebx
+    1ab1:	e8 0d 1f 00 00       	call   39c3 <open>
+    1ab6:	89 04 24             	mov    %eax,(%esp)
+    1ab9:	e8 ed 1e 00 00       	call   39ab <close>
+    1abe:	83 c4 10             	add    $0x10,%esp
+    1ac1:	e9 67 ff ff ff       	jmp    1a2d <concreate+0x1dd>
+    1ac6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1acd:	8d 76 00             	lea    0x0(%esi),%esi
+  printf(1, "concreate ok\n");
+    1ad0:	83 ec 08             	sub    $0x8,%esp
+    1ad3:	68 16 45 00 00       	push   $0x4516
+    1ad8:	6a 01                	push   $0x1
+    1ada:	e8 11 20 00 00       	call   3af0 <printf>
+}
+    1adf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1ae2:	5b                   	pop    %ebx
+    1ae3:	5e                   	pop    %esi
+    1ae4:	5f                   	pop    %edi
+    1ae5:	5d                   	pop    %ebp
+    1ae6:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1ae7:	83 ec 08             	sub    $0x8,%esp
+    1aea:	68 99 4d 00 00       	push   $0x4d99
+    1aef:	6a 01                	push   $0x1
+    1af1:	e8 fa 1f 00 00       	call   3af0 <printf>
+      exit();
+    1af6:	e8 88 1e 00 00       	call   3983 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1afb:	51                   	push   %ecx
+    1afc:	51                   	push   %ecx
+    1afd:	68 60 50 00 00       	push   $0x5060
+    1b02:	6a 01                	push   $0x1
+    1b04:	e8 e7 1f 00 00       	call   3af0 <printf>
+    exit();
+    1b09:	e8 75 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1b0e:	83 ec 04             	sub    $0x4,%esp
+    1b11:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b14:	50                   	push   %eax
+    1b15:	68 f9 44 00 00       	push   $0x44f9
+    1b1a:	6a 01                	push   $0x1
+    1b1c:	e8 cf 1f 00 00       	call   3af0 <printf>
+        exit();
+    1b21:	e8 5d 1e 00 00       	call   3983 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1b26:	83 ec 04             	sub    $0x4,%esp
+    1b29:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1b2c:	50                   	push   %eax
+    1b2d:	68 e0 44 00 00       	push   $0x44e0
+    1b32:	6a 01                	push   $0x1
+    1b34:	e8 b7 1f 00 00       	call   3af0 <printf>
+        exit();
+    1b39:	e8 45 1e 00 00       	call   3983 <exit>
+      close(fd);
+    1b3e:	83 ec 0c             	sub    $0xc,%esp
+    1b41:	50                   	push   %eax
+    1b42:	e8 64 1e 00 00       	call   39ab <close>
+    1b47:	83 c4 10             	add    $0x10,%esp
+    1b4a:	e9 e2 fd ff ff       	jmp    1931 <concreate+0xe1>
+    1b4f:	90                   	nop
+
+00001b50 <linkunlink>:
+{
+    1b50:	f3 0f 1e fb          	endbr32 
+    1b54:	55                   	push   %ebp
+    1b55:	89 e5                	mov    %esp,%ebp
+    1b57:	57                   	push   %edi
+    1b58:	56                   	push   %esi
+    1b59:	53                   	push   %ebx
+    1b5a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1b5d:	68 24 45 00 00       	push   $0x4524
+    1b62:	6a 01                	push   $0x1
+    1b64:	e8 87 1f 00 00       	call   3af0 <printf>
+  unlink("x");
+    1b69:	c7 04 24 b1 47 00 00 	movl   $0x47b1,(%esp)
+    1b70:	e8 5e 1e 00 00       	call   39d3 <unlink>
+  pid = fork();
+    1b75:	e8 01 1e 00 00       	call   397b <fork>
+  if(pid < 0){
+    1b7a:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1b7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1b80:	85 c0                	test   %eax,%eax
+    1b82:	0f 88 b2 00 00 00    	js     1c3a <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b88:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b8c:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b91:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b96:	19 ff                	sbb    %edi,%edi
+    1b98:	83 e7 60             	and    $0x60,%edi
+    1b9b:	83 c7 01             	add    $0x1,%edi
+    1b9e:	eb 1a                	jmp    1bba <linkunlink+0x6a>
+    } else if((x % 3) == 1){
+    1ba0:	83 f8 01             	cmp    $0x1,%eax
+    1ba3:	74 7b                	je     1c20 <linkunlink+0xd0>
+      unlink("x");
+    1ba5:	83 ec 0c             	sub    $0xc,%esp
+    1ba8:	68 b1 47 00 00       	push   $0x47b1
+    1bad:	e8 21 1e 00 00       	call   39d3 <unlink>
+    1bb2:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bb5:	83 eb 01             	sub    $0x1,%ebx
+    1bb8:	74 41                	je     1bfb <linkunlink+0xab>
+    x = x * 1103515245 + 12345;
+    1bba:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1bc0:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1bc6:	89 f8                	mov    %edi,%eax
+    1bc8:	f7 e6                	mul    %esi
+    1bca:	89 d0                	mov    %edx,%eax
+    1bcc:	83 e2 fe             	and    $0xfffffffe,%edx
+    1bcf:	d1 e8                	shr    %eax
+    1bd1:	01 c2                	add    %eax,%edx
+    1bd3:	89 f8                	mov    %edi,%eax
+    1bd5:	29 d0                	sub    %edx,%eax
+    1bd7:	75 c7                	jne    1ba0 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1bd9:	83 ec 08             	sub    $0x8,%esp
+    1bdc:	68 02 02 00 00       	push   $0x202
+    1be1:	68 b1 47 00 00       	push   $0x47b1
+    1be6:	e8 d8 1d 00 00       	call   39c3 <open>
+    1beb:	89 04 24             	mov    %eax,(%esp)
+    1bee:	e8 b8 1d 00 00       	call   39ab <close>
+    1bf3:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1bf6:	83 eb 01             	sub    $0x1,%ebx
+    1bf9:	75 bf                	jne    1bba <linkunlink+0x6a>
+  if(pid)
+    1bfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1bfe:	85 c0                	test   %eax,%eax
+    1c00:	74 4b                	je     1c4d <linkunlink+0xfd>
+    wait();
+    1c02:	e8 84 1d 00 00       	call   398b <wait>
+  printf(1, "linkunlink ok\n");
+    1c07:	83 ec 08             	sub    $0x8,%esp
+    1c0a:	68 39 45 00 00       	push   $0x4539
+    1c0f:	6a 01                	push   $0x1
+    1c11:	e8 da 1e 00 00       	call   3af0 <printf>
+}
+    1c16:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1c19:	5b                   	pop    %ebx
+    1c1a:	5e                   	pop    %esi
+    1c1b:	5f                   	pop    %edi
+    1c1c:	5d                   	pop    %ebp
+    1c1d:	c3                   	ret    
+    1c1e:	66 90                	xchg   %ax,%ax
+      link("cat", "x");
+    1c20:	83 ec 08             	sub    $0x8,%esp
+    1c23:	68 b1 47 00 00       	push   $0x47b1
+    1c28:	68 35 45 00 00       	push   $0x4535
+    1c2d:	e8 b1 1d 00 00       	call   39e3 <link>
+    1c32:	83 c4 10             	add    $0x10,%esp
+    1c35:	e9 7b ff ff ff       	jmp    1bb5 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1c3a:	52                   	push   %edx
+    1c3b:	52                   	push   %edx
+    1c3c:	68 99 4d 00 00       	push   $0x4d99
+    1c41:	6a 01                	push   $0x1
+    1c43:	e8 a8 1e 00 00       	call   3af0 <printf>
+    exit();
+    1c48:	e8 36 1d 00 00       	call   3983 <exit>
+    exit();
+    1c4d:	e8 31 1d 00 00       	call   3983 <exit>
+    1c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001c60 <bigdir>:
+{
+    1c60:	f3 0f 1e fb          	endbr32 
+    1c64:	55                   	push   %ebp
+    1c65:	89 e5                	mov    %esp,%ebp
+    1c67:	57                   	push   %edi
+    1c68:	56                   	push   %esi
+    1c69:	53                   	push   %ebx
+    1c6a:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1c6d:	68 48 45 00 00       	push   $0x4548
+    1c72:	6a 01                	push   $0x1
+    1c74:	e8 77 1e 00 00       	call   3af0 <printf>
+  unlink("bd");
+    1c79:	c7 04 24 55 45 00 00 	movl   $0x4555,(%esp)
+    1c80:	e8 4e 1d 00 00       	call   39d3 <unlink>
+  fd = open("bd", O_CREATE);
+    1c85:	5a                   	pop    %edx
+    1c86:	59                   	pop    %ecx
+    1c87:	68 00 02 00 00       	push   $0x200
+    1c8c:	68 55 45 00 00       	push   $0x4555
+    1c91:	e8 2d 1d 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1c96:	83 c4 10             	add    $0x10,%esp
+    1c99:	85 c0                	test   %eax,%eax
+    1c9b:	0f 88 ea 00 00 00    	js     1d8b <bigdir+0x12b>
+  close(fd);
+    1ca1:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1ca4:	31 f6                	xor    %esi,%esi
+    1ca6:	8d 7d de             	lea    -0x22(%ebp),%edi
+  close(fd);
+    1ca9:	50                   	push   %eax
+    1caa:	e8 fc 1c 00 00       	call   39ab <close>
+    1caf:	83 c4 10             	add    $0x10,%esp
+    1cb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + (i / 64);
+    1cb8:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1cba:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1cbd:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1cc1:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1cc4:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1cc5:	83 c0 30             	add    $0x30,%eax
+    if(link("bd", name) != 0){
+    1cc8:	68 55 45 00 00       	push   $0x4555
+    name[1] = '0' + (i / 64);
+    1ccd:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd0:	89 f0                	mov    %esi,%eax
+    1cd2:	83 e0 3f             	and    $0x3f,%eax
+    name[3] = '\0';
+    1cd5:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[2] = '0' + (i % 64);
+    1cd9:	83 c0 30             	add    $0x30,%eax
+    1cdc:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1cdf:	e8 ff 1c 00 00       	call   39e3 <link>
+    1ce4:	83 c4 10             	add    $0x10,%esp
+    1ce7:	89 c3                	mov    %eax,%ebx
+    1ce9:	85 c0                	test   %eax,%eax
+    1ceb:	75 76                	jne    1d63 <bigdir+0x103>
+  for(i = 0; i < 500; i++){
+    1ced:	83 c6 01             	add    $0x1,%esi
+    1cf0:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1cf6:	75 c0                	jne    1cb8 <bigdir+0x58>
+  unlink("bd");
+    1cf8:	83 ec 0c             	sub    $0xc,%esp
+    1cfb:	68 55 45 00 00       	push   $0x4555
+    1d00:	e8 ce 1c 00 00       	call   39d3 <unlink>
+    1d05:	83 c4 10             	add    $0x10,%esp
+    1d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1d0f:	90                   	nop
+    name[1] = '0' + (i / 64);
+    1d10:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1d12:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1d15:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1d19:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1d1c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1d1d:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1d20:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1d24:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1d27:	89 d8                	mov    %ebx,%eax
+    1d29:	83 e0 3f             	and    $0x3f,%eax
+    1d2c:	83 c0 30             	add    $0x30,%eax
+    1d2f:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1d32:	e8 9c 1c 00 00       	call   39d3 <unlink>
+    1d37:	83 c4 10             	add    $0x10,%esp
+    1d3a:	85 c0                	test   %eax,%eax
+    1d3c:	75 39                	jne    1d77 <bigdir+0x117>
+  for(i = 0; i < 500; i++){
+    1d3e:	83 c3 01             	add    $0x1,%ebx
+    1d41:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1d47:	75 c7                	jne    1d10 <bigdir+0xb0>
+  printf(1, "bigdir ok\n");
+    1d49:	83 ec 08             	sub    $0x8,%esp
+    1d4c:	68 97 45 00 00       	push   $0x4597
+    1d51:	6a 01                	push   $0x1
+    1d53:	e8 98 1d 00 00       	call   3af0 <printf>
+    1d58:	83 c4 10             	add    $0x10,%esp
+}
+    1d5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1d5e:	5b                   	pop    %ebx
+    1d5f:	5e                   	pop    %esi
+    1d60:	5f                   	pop    %edi
+    1d61:	5d                   	pop    %ebp
+    1d62:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1d63:	83 ec 08             	sub    $0x8,%esp
+    1d66:	68 6e 45 00 00       	push   $0x456e
+    1d6b:	6a 01                	push   $0x1
+    1d6d:	e8 7e 1d 00 00       	call   3af0 <printf>
+      exit();
+    1d72:	e8 0c 1c 00 00       	call   3983 <exit>
+      printf(1, "bigdir unlink failed");
+    1d77:	83 ec 08             	sub    $0x8,%esp
+    1d7a:	68 82 45 00 00       	push   $0x4582
+    1d7f:	6a 01                	push   $0x1
+    1d81:	e8 6a 1d 00 00       	call   3af0 <printf>
+      exit();
+    1d86:	e8 f8 1b 00 00       	call   3983 <exit>
+    printf(1, "bigdir create failed\n");
+    1d8b:	50                   	push   %eax
+    1d8c:	50                   	push   %eax
+    1d8d:	68 58 45 00 00       	push   $0x4558
+    1d92:	6a 01                	push   $0x1
+    1d94:	e8 57 1d 00 00       	call   3af0 <printf>
+    exit();
+    1d99:	e8 e5 1b 00 00       	call   3983 <exit>
+    1d9e:	66 90                	xchg   %ax,%ax
+
+00001da0 <subdir>:
+{
+    1da0:	f3 0f 1e fb          	endbr32 
+    1da4:	55                   	push   %ebp
+    1da5:	89 e5                	mov    %esp,%ebp
+    1da7:	53                   	push   %ebx
+    1da8:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1dab:	68 a2 45 00 00       	push   $0x45a2
+    1db0:	6a 01                	push   $0x1
+    1db2:	e8 39 1d 00 00       	call   3af0 <printf>
+  unlink("ff");
+    1db7:	c7 04 24 2b 46 00 00 	movl   $0x462b,(%esp)
+    1dbe:	e8 10 1c 00 00       	call   39d3 <unlink>
+  if(mkdir("dd") != 0){
+    1dc3:	c7 04 24 c8 46 00 00 	movl   $0x46c8,(%esp)
+    1dca:	e8 1c 1c 00 00       	call   39eb <mkdir>
+    1dcf:	83 c4 10             	add    $0x10,%esp
+    1dd2:	85 c0                	test   %eax,%eax
+    1dd4:	0f 85 b3 05 00 00    	jne    238d <subdir+0x5ed>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1dda:	83 ec 08             	sub    $0x8,%esp
+    1ddd:	68 02 02 00 00       	push   $0x202
+    1de2:	68 01 46 00 00       	push   $0x4601
+    1de7:	e8 d7 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1dec:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1def:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1df1:	85 c0                	test   %eax,%eax
+    1df3:	0f 88 81 05 00 00    	js     237a <subdir+0x5da>
+  write(fd, "ff", 2);
+    1df9:	83 ec 04             	sub    $0x4,%esp
+    1dfc:	6a 02                	push   $0x2
+    1dfe:	68 2b 46 00 00       	push   $0x462b
+    1e03:	50                   	push   %eax
+    1e04:	e8 9a 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e09:	89 1c 24             	mov    %ebx,(%esp)
+    1e0c:	e8 9a 1b 00 00       	call   39ab <close>
+  if(unlink("dd") >= 0){
+    1e11:	c7 04 24 c8 46 00 00 	movl   $0x46c8,(%esp)
+    1e18:	e8 b6 1b 00 00       	call   39d3 <unlink>
+    1e1d:	83 c4 10             	add    $0x10,%esp
+    1e20:	85 c0                	test   %eax,%eax
+    1e22:	0f 89 3f 05 00 00    	jns    2367 <subdir+0x5c7>
+  if(mkdir("/dd/dd") != 0){
+    1e28:	83 ec 0c             	sub    $0xc,%esp
+    1e2b:	68 dc 45 00 00       	push   $0x45dc
+    1e30:	e8 b6 1b 00 00       	call   39eb <mkdir>
+    1e35:	83 c4 10             	add    $0x10,%esp
+    1e38:	85 c0                	test   %eax,%eax
+    1e3a:	0f 85 14 05 00 00    	jne    2354 <subdir+0x5b4>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e40:	83 ec 08             	sub    $0x8,%esp
+    1e43:	68 02 02 00 00       	push   $0x202
+    1e48:	68 fe 45 00 00       	push   $0x45fe
+    1e4d:	e8 71 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e52:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1e55:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e57:	85 c0                	test   %eax,%eax
+    1e59:	0f 88 24 04 00 00    	js     2283 <subdir+0x4e3>
+  write(fd, "FF", 2);
+    1e5f:	83 ec 04             	sub    $0x4,%esp
+    1e62:	6a 02                	push   $0x2
+    1e64:	68 1f 46 00 00       	push   $0x461f
+    1e69:	50                   	push   %eax
+    1e6a:	e8 34 1b 00 00       	call   39a3 <write>
+  close(fd);
+    1e6f:	89 1c 24             	mov    %ebx,(%esp)
+    1e72:	e8 34 1b 00 00       	call   39ab <close>
+  fd = open("dd/dd/../ff", 0);
+    1e77:	58                   	pop    %eax
+    1e78:	5a                   	pop    %edx
+    1e79:	6a 00                	push   $0x0
+    1e7b:	68 22 46 00 00       	push   $0x4622
+    1e80:	e8 3e 1b 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1e85:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/../ff", 0);
+    1e88:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e8a:	85 c0                	test   %eax,%eax
+    1e8c:	0f 88 de 03 00 00    	js     2270 <subdir+0x4d0>
+  cc = read(fd, buf, sizeof(buf));
+    1e92:	83 ec 04             	sub    $0x4,%esp
+    1e95:	68 00 20 00 00       	push   $0x2000
+    1e9a:	68 e0 86 00 00       	push   $0x86e0
+    1e9f:	50                   	push   %eax
+    1ea0:	e8 f6 1a 00 00       	call   399b <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1ea5:	83 c4 10             	add    $0x10,%esp
+    1ea8:	83 f8 02             	cmp    $0x2,%eax
+    1eab:	0f 85 3a 03 00 00    	jne    21eb <subdir+0x44b>
+    1eb1:	80 3d e0 86 00 00 66 	cmpb   $0x66,0x86e0
+    1eb8:	0f 85 2d 03 00 00    	jne    21eb <subdir+0x44b>
+  close(fd);
+    1ebe:	83 ec 0c             	sub    $0xc,%esp
+    1ec1:	53                   	push   %ebx
+    1ec2:	e8 e4 1a 00 00       	call   39ab <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1ec7:	59                   	pop    %ecx
+    1ec8:	5b                   	pop    %ebx
+    1ec9:	68 62 46 00 00       	push   $0x4662
+    1ece:	68 fe 45 00 00       	push   $0x45fe
+    1ed3:	e8 0b 1b 00 00       	call   39e3 <link>
+    1ed8:	83 c4 10             	add    $0x10,%esp
+    1edb:	85 c0                	test   %eax,%eax
+    1edd:	0f 85 c6 03 00 00    	jne    22a9 <subdir+0x509>
+  if(unlink("dd/dd/ff") != 0){
+    1ee3:	83 ec 0c             	sub    $0xc,%esp
+    1ee6:	68 fe 45 00 00       	push   $0x45fe
+    1eeb:	e8 e3 1a 00 00       	call   39d3 <unlink>
+    1ef0:	83 c4 10             	add    $0x10,%esp
+    1ef3:	85 c0                	test   %eax,%eax
+    1ef5:	0f 85 16 03 00 00    	jne    2211 <subdir+0x471>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1efb:	83 ec 08             	sub    $0x8,%esp
+    1efe:	6a 00                	push   $0x0
+    1f00:	68 fe 45 00 00       	push   $0x45fe
+    1f05:	e8 b9 1a 00 00       	call   39c3 <open>
+    1f0a:	83 c4 10             	add    $0x10,%esp
+    1f0d:	85 c0                	test   %eax,%eax
+    1f0f:	0f 89 2c 04 00 00    	jns    2341 <subdir+0x5a1>
+  if(chdir("dd") != 0){
+    1f15:	83 ec 0c             	sub    $0xc,%esp
+    1f18:	68 c8 46 00 00       	push   $0x46c8
+    1f1d:	e8 d1 1a 00 00       	call   39f3 <chdir>
+    1f22:	83 c4 10             	add    $0x10,%esp
+    1f25:	85 c0                	test   %eax,%eax
+    1f27:	0f 85 01 04 00 00    	jne    232e <subdir+0x58e>
+  if(chdir("dd/../../dd") != 0){
+    1f2d:	83 ec 0c             	sub    $0xc,%esp
+    1f30:	68 96 46 00 00       	push   $0x4696
+    1f35:	e8 b9 1a 00 00       	call   39f3 <chdir>
+    1f3a:	83 c4 10             	add    $0x10,%esp
+    1f3d:	85 c0                	test   %eax,%eax
+    1f3f:	0f 85 b9 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("dd/../../../dd") != 0){
+    1f45:	83 ec 0c             	sub    $0xc,%esp
+    1f48:	68 bc 46 00 00       	push   $0x46bc
+    1f4d:	e8 a1 1a 00 00       	call   39f3 <chdir>
+    1f52:	83 c4 10             	add    $0x10,%esp
+    1f55:	85 c0                	test   %eax,%eax
+    1f57:	0f 85 a1 02 00 00    	jne    21fe <subdir+0x45e>
+  if(chdir("./..") != 0){
+    1f5d:	83 ec 0c             	sub    $0xc,%esp
+    1f60:	68 cb 46 00 00       	push   $0x46cb
+    1f65:	e8 89 1a 00 00       	call   39f3 <chdir>
+    1f6a:	83 c4 10             	add    $0x10,%esp
+    1f6d:	85 c0                	test   %eax,%eax
+    1f6f:	0f 85 21 03 00 00    	jne    2296 <subdir+0x4f6>
+  fd = open("dd/dd/ffff", 0);
+    1f75:	83 ec 08             	sub    $0x8,%esp
+    1f78:	6a 00                	push   $0x0
+    1f7a:	68 62 46 00 00       	push   $0x4662
+    1f7f:	e8 3f 1a 00 00       	call   39c3 <open>
+  if(fd < 0){
+    1f84:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ffff", 0);
+    1f87:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1f89:	85 c0                	test   %eax,%eax
+    1f8b:	0f 88 e0 04 00 00    	js     2471 <subdir+0x6d1>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1f91:	83 ec 04             	sub    $0x4,%esp
+    1f94:	68 00 20 00 00       	push   $0x2000
+    1f99:	68 e0 86 00 00       	push   $0x86e0
+    1f9e:	50                   	push   %eax
+    1f9f:	e8 f7 19 00 00       	call   399b <read>
+    1fa4:	83 c4 10             	add    $0x10,%esp
+    1fa7:	83 f8 02             	cmp    $0x2,%eax
+    1faa:	0f 85 ae 04 00 00    	jne    245e <subdir+0x6be>
+  close(fd);
+    1fb0:	83 ec 0c             	sub    $0xc,%esp
+    1fb3:	53                   	push   %ebx
+    1fb4:	e8 f2 19 00 00       	call   39ab <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1fb9:	58                   	pop    %eax
+    1fba:	5a                   	pop    %edx
+    1fbb:	6a 00                	push   $0x0
+    1fbd:	68 fe 45 00 00       	push   $0x45fe
+    1fc2:	e8 fc 19 00 00       	call   39c3 <open>
+    1fc7:	83 c4 10             	add    $0x10,%esp
+    1fca:	85 c0                	test   %eax,%eax
+    1fcc:	0f 89 65 02 00 00    	jns    2237 <subdir+0x497>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1fd2:	83 ec 08             	sub    $0x8,%esp
+    1fd5:	68 02 02 00 00       	push   $0x202
+    1fda:	68 16 47 00 00       	push   $0x4716
+    1fdf:	e8 df 19 00 00       	call   39c3 <open>
+    1fe4:	83 c4 10             	add    $0x10,%esp
+    1fe7:	85 c0                	test   %eax,%eax
+    1fe9:	0f 89 35 02 00 00    	jns    2224 <subdir+0x484>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1fef:	83 ec 08             	sub    $0x8,%esp
+    1ff2:	68 02 02 00 00       	push   $0x202
+    1ff7:	68 3b 47 00 00       	push   $0x473b
+    1ffc:	e8 c2 19 00 00       	call   39c3 <open>
+    2001:	83 c4 10             	add    $0x10,%esp
+    2004:	85 c0                	test   %eax,%eax
+    2006:	0f 89 0f 03 00 00    	jns    231b <subdir+0x57b>
+  if(open("dd", O_CREATE) >= 0){
+    200c:	83 ec 08             	sub    $0x8,%esp
+    200f:	68 00 02 00 00       	push   $0x200
+    2014:	68 c8 46 00 00       	push   $0x46c8
+    2019:	e8 a5 19 00 00       	call   39c3 <open>
+    201e:	83 c4 10             	add    $0x10,%esp
+    2021:	85 c0                	test   %eax,%eax
+    2023:	0f 89 df 02 00 00    	jns    2308 <subdir+0x568>
+  if(open("dd", O_RDWR) >= 0){
+    2029:	83 ec 08             	sub    $0x8,%esp
+    202c:	6a 02                	push   $0x2
+    202e:	68 c8 46 00 00       	push   $0x46c8
+    2033:	e8 8b 19 00 00       	call   39c3 <open>
+    2038:	83 c4 10             	add    $0x10,%esp
+    203b:	85 c0                	test   %eax,%eax
+    203d:	0f 89 b2 02 00 00    	jns    22f5 <subdir+0x555>
+  if(open("dd", O_WRONLY) >= 0){
+    2043:	83 ec 08             	sub    $0x8,%esp
+    2046:	6a 01                	push   $0x1
+    2048:	68 c8 46 00 00       	push   $0x46c8
+    204d:	e8 71 19 00 00       	call   39c3 <open>
+    2052:	83 c4 10             	add    $0x10,%esp
+    2055:	85 c0                	test   %eax,%eax
+    2057:	0f 89 85 02 00 00    	jns    22e2 <subdir+0x542>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    205d:	83 ec 08             	sub    $0x8,%esp
+    2060:	68 aa 47 00 00       	push   $0x47aa
+    2065:	68 16 47 00 00       	push   $0x4716
+    206a:	e8 74 19 00 00       	call   39e3 <link>
+    206f:	83 c4 10             	add    $0x10,%esp
+    2072:	85 c0                	test   %eax,%eax
+    2074:	0f 84 55 02 00 00    	je     22cf <subdir+0x52f>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    207a:	83 ec 08             	sub    $0x8,%esp
+    207d:	68 aa 47 00 00       	push   $0x47aa
+    2082:	68 3b 47 00 00       	push   $0x473b
+    2087:	e8 57 19 00 00       	call   39e3 <link>
+    208c:	83 c4 10             	add    $0x10,%esp
+    208f:	85 c0                	test   %eax,%eax
+    2091:	0f 84 25 02 00 00    	je     22bc <subdir+0x51c>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2097:	83 ec 08             	sub    $0x8,%esp
+    209a:	68 62 46 00 00       	push   $0x4662
+    209f:	68 01 46 00 00       	push   $0x4601
+    20a4:	e8 3a 19 00 00       	call   39e3 <link>
+    20a9:	83 c4 10             	add    $0x10,%esp
+    20ac:	85 c0                	test   %eax,%eax
+    20ae:	0f 84 a9 01 00 00    	je     225d <subdir+0x4bd>
+  if(mkdir("dd/ff/ff") == 0){
+    20b4:	83 ec 0c             	sub    $0xc,%esp
+    20b7:	68 16 47 00 00       	push   $0x4716
+    20bc:	e8 2a 19 00 00       	call   39eb <mkdir>
+    20c1:	83 c4 10             	add    $0x10,%esp
+    20c4:	85 c0                	test   %eax,%eax
+    20c6:	0f 84 7e 01 00 00    	je     224a <subdir+0x4aa>
+  if(mkdir("dd/xx/ff") == 0){
+    20cc:	83 ec 0c             	sub    $0xc,%esp
+    20cf:	68 3b 47 00 00       	push   $0x473b
+    20d4:	e8 12 19 00 00       	call   39eb <mkdir>
+    20d9:	83 c4 10             	add    $0x10,%esp
+    20dc:	85 c0                	test   %eax,%eax
+    20de:	0f 84 67 03 00 00    	je     244b <subdir+0x6ab>
+  if(mkdir("dd/dd/ffff") == 0){
+    20e4:	83 ec 0c             	sub    $0xc,%esp
+    20e7:	68 62 46 00 00       	push   $0x4662
+    20ec:	e8 fa 18 00 00       	call   39eb <mkdir>
+    20f1:	83 c4 10             	add    $0x10,%esp
+    20f4:	85 c0                	test   %eax,%eax
+    20f6:	0f 84 3c 03 00 00    	je     2438 <subdir+0x698>
+  if(unlink("dd/xx/ff") == 0){
+    20fc:	83 ec 0c             	sub    $0xc,%esp
+    20ff:	68 3b 47 00 00       	push   $0x473b
+    2104:	e8 ca 18 00 00       	call   39d3 <unlink>
+    2109:	83 c4 10             	add    $0x10,%esp
+    210c:	85 c0                	test   %eax,%eax
+    210e:	0f 84 11 03 00 00    	je     2425 <subdir+0x685>
+  if(unlink("dd/ff/ff") == 0){
+    2114:	83 ec 0c             	sub    $0xc,%esp
+    2117:	68 16 47 00 00       	push   $0x4716
+    211c:	e8 b2 18 00 00       	call   39d3 <unlink>
+    2121:	83 c4 10             	add    $0x10,%esp
+    2124:	85 c0                	test   %eax,%eax
+    2126:	0f 84 e6 02 00 00    	je     2412 <subdir+0x672>
+  if(chdir("dd/ff") == 0){
+    212c:	83 ec 0c             	sub    $0xc,%esp
+    212f:	68 01 46 00 00       	push   $0x4601
+    2134:	e8 ba 18 00 00       	call   39f3 <chdir>
+    2139:	83 c4 10             	add    $0x10,%esp
+    213c:	85 c0                	test   %eax,%eax
+    213e:	0f 84 bb 02 00 00    	je     23ff <subdir+0x65f>
+  if(chdir("dd/xx") == 0){
+    2144:	83 ec 0c             	sub    $0xc,%esp
+    2147:	68 ad 47 00 00       	push   $0x47ad
+    214c:	e8 a2 18 00 00       	call   39f3 <chdir>
+    2151:	83 c4 10             	add    $0x10,%esp
+    2154:	85 c0                	test   %eax,%eax
+    2156:	0f 84 90 02 00 00    	je     23ec <subdir+0x64c>
+  if(unlink("dd/dd/ffff") != 0){
+    215c:	83 ec 0c             	sub    $0xc,%esp
+    215f:	68 62 46 00 00       	push   $0x4662
+    2164:	e8 6a 18 00 00       	call   39d3 <unlink>
+    2169:	83 c4 10             	add    $0x10,%esp
+    216c:	85 c0                	test   %eax,%eax
+    216e:	0f 85 9d 00 00 00    	jne    2211 <subdir+0x471>
+  if(unlink("dd/ff") != 0){
+    2174:	83 ec 0c             	sub    $0xc,%esp
+    2177:	68 01 46 00 00       	push   $0x4601
+    217c:	e8 52 18 00 00       	call   39d3 <unlink>
+    2181:	83 c4 10             	add    $0x10,%esp
+    2184:	85 c0                	test   %eax,%eax
+    2186:	0f 85 4d 02 00 00    	jne    23d9 <subdir+0x639>
+  if(unlink("dd") == 0){
+    218c:	83 ec 0c             	sub    $0xc,%esp
+    218f:	68 c8 46 00 00       	push   $0x46c8
+    2194:	e8 3a 18 00 00       	call   39d3 <unlink>
+    2199:	83 c4 10             	add    $0x10,%esp
+    219c:	85 c0                	test   %eax,%eax
+    219e:	0f 84 22 02 00 00    	je     23c6 <subdir+0x626>
+  if(unlink("dd/dd") < 0){
+    21a4:	83 ec 0c             	sub    $0xc,%esp
+    21a7:	68 dd 45 00 00       	push   $0x45dd
+    21ac:	e8 22 18 00 00       	call   39d3 <unlink>
+    21b1:	83 c4 10             	add    $0x10,%esp
+    21b4:	85 c0                	test   %eax,%eax
+    21b6:	0f 88 f7 01 00 00    	js     23b3 <subdir+0x613>
+  if(unlink("dd") < 0){
+    21bc:	83 ec 0c             	sub    $0xc,%esp
+    21bf:	68 c8 46 00 00       	push   $0x46c8
+    21c4:	e8 0a 18 00 00       	call   39d3 <unlink>
+    21c9:	83 c4 10             	add    $0x10,%esp
+    21cc:	85 c0                	test   %eax,%eax
+    21ce:	0f 88 cc 01 00 00    	js     23a0 <subdir+0x600>
+  printf(1, "subdir ok\n");
+    21d4:	83 ec 08             	sub    $0x8,%esp
+    21d7:	68 aa 48 00 00       	push   $0x48aa
+    21dc:	6a 01                	push   $0x1
+    21de:	e8 0d 19 00 00       	call   3af0 <printf>
+}
+    21e3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    21e6:	83 c4 10             	add    $0x10,%esp
+    21e9:	c9                   	leave  
+    21ea:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    21eb:	50                   	push   %eax
+    21ec:	50                   	push   %eax
+    21ed:	68 47 46 00 00       	push   $0x4647
+    21f2:	6a 01                	push   $0x1
+    21f4:	e8 f7 18 00 00       	call   3af0 <printf>
+    exit();
+    21f9:	e8 85 17 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    21fe:	50                   	push   %eax
+    21ff:	50                   	push   %eax
+    2200:	68 a2 46 00 00       	push   $0x46a2
+    2205:	6a 01                	push   $0x1
+    2207:	e8 e4 18 00 00       	call   3af0 <printf>
+    exit();
+    220c:	e8 72 17 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    2211:	50                   	push   %eax
+    2212:	50                   	push   %eax
+    2213:	68 6d 46 00 00       	push   $0x466d
+    2218:	6a 01                	push   $0x1
+    221a:	e8 d1 18 00 00       	call   3af0 <printf>
+    exit();
+    221f:	e8 5f 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    2224:	51                   	push   %ecx
+    2225:	51                   	push   %ecx
+    2226:	68 1f 47 00 00       	push   $0x471f
+    222b:	6a 01                	push   $0x1
+    222d:	e8 be 18 00 00       	call   3af0 <printf>
+    exit();
+    2232:	e8 4c 17 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    2237:	53                   	push   %ebx
+    2238:	53                   	push   %ebx
+    2239:	68 04 51 00 00       	push   $0x5104
+    223e:	6a 01                	push   $0x1
+    2240:	e8 ab 18 00 00       	call   3af0 <printf>
+    exit();
+    2245:	e8 39 17 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    224a:	51                   	push   %ecx
+    224b:	51                   	push   %ecx
+    224c:	68 b3 47 00 00       	push   $0x47b3
+    2251:	6a 01                	push   $0x1
+    2253:	e8 98 18 00 00       	call   3af0 <printf>
+    exit();
+    2258:	e8 26 17 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    225d:	53                   	push   %ebx
+    225e:	53                   	push   %ebx
+    225f:	68 74 51 00 00       	push   $0x5174
+    2264:	6a 01                	push   $0x1
+    2266:	e8 85 18 00 00       	call   3af0 <printf>
+    exit();
+    226b:	e8 13 17 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    2270:	50                   	push   %eax
+    2271:	50                   	push   %eax
+    2272:	68 2e 46 00 00       	push   $0x462e
+    2277:	6a 01                	push   $0x1
+    2279:	e8 72 18 00 00       	call   3af0 <printf>
+    exit();
+    227e:	e8 00 17 00 00       	call   3983 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    2283:	51                   	push   %ecx
+    2284:	51                   	push   %ecx
+    2285:	68 07 46 00 00       	push   $0x4607
+    228a:	6a 01                	push   $0x1
+    228c:	e8 5f 18 00 00       	call   3af0 <printf>
+    exit();
+    2291:	e8 ed 16 00 00       	call   3983 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2296:	50                   	push   %eax
+    2297:	50                   	push   %eax
+    2298:	68 d0 46 00 00       	push   $0x46d0
+    229d:	6a 01                	push   $0x1
+    229f:	e8 4c 18 00 00       	call   3af0 <printf>
+    exit();
+    22a4:	e8 da 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    22a9:	52                   	push   %edx
+    22aa:	52                   	push   %edx
+    22ab:	68 bc 50 00 00       	push   $0x50bc
+    22b0:	6a 01                	push   $0x1
+    22b2:	e8 39 18 00 00       	call   3af0 <printf>
+    exit();
+    22b7:	e8 c7 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    22bc:	50                   	push   %eax
+    22bd:	50                   	push   %eax
+    22be:	68 50 51 00 00       	push   $0x5150
+    22c3:	6a 01                	push   $0x1
+    22c5:	e8 26 18 00 00       	call   3af0 <printf>
+    exit();
+    22ca:	e8 b4 16 00 00       	call   3983 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    22cf:	50                   	push   %eax
+    22d0:	50                   	push   %eax
+    22d1:	68 2c 51 00 00       	push   $0x512c
+    22d6:	6a 01                	push   $0x1
+    22d8:	e8 13 18 00 00       	call   3af0 <printf>
+    exit();
+    22dd:	e8 a1 16 00 00       	call   3983 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    22e2:	50                   	push   %eax
+    22e3:	50                   	push   %eax
+    22e4:	68 8f 47 00 00       	push   $0x478f
+    22e9:	6a 01                	push   $0x1
+    22eb:	e8 00 18 00 00       	call   3af0 <printf>
+    exit();
+    22f0:	e8 8e 16 00 00       	call   3983 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    22f5:	50                   	push   %eax
+    22f6:	50                   	push   %eax
+    22f7:	68 76 47 00 00       	push   $0x4776
+    22fc:	6a 01                	push   $0x1
+    22fe:	e8 ed 17 00 00       	call   3af0 <printf>
+    exit();
+    2303:	e8 7b 16 00 00       	call   3983 <exit>
+    printf(1, "create dd succeeded!\n");
+    2308:	50                   	push   %eax
+    2309:	50                   	push   %eax
+    230a:	68 60 47 00 00       	push   $0x4760
+    230f:	6a 01                	push   $0x1
+    2311:	e8 da 17 00 00       	call   3af0 <printf>
+    exit();
+    2316:	e8 68 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    231b:	52                   	push   %edx
+    231c:	52                   	push   %edx
+    231d:	68 44 47 00 00       	push   $0x4744
+    2322:	6a 01                	push   $0x1
+    2324:	e8 c7 17 00 00       	call   3af0 <printf>
+    exit();
+    2329:	e8 55 16 00 00       	call   3983 <exit>
+    printf(1, "chdir dd failed\n");
+    232e:	50                   	push   %eax
+    232f:	50                   	push   %eax
+    2330:	68 85 46 00 00       	push   $0x4685
+    2335:	6a 01                	push   $0x1
+    2337:	e8 b4 17 00 00       	call   3af0 <printf>
+    exit();
+    233c:	e8 42 16 00 00       	call   3983 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    2341:	50                   	push   %eax
+    2342:	50                   	push   %eax
+    2343:	68 e0 50 00 00       	push   $0x50e0
+    2348:	6a 01                	push   $0x1
+    234a:	e8 a1 17 00 00       	call   3af0 <printf>
+    exit();
+    234f:	e8 2f 16 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    2354:	53                   	push   %ebx
+    2355:	53                   	push   %ebx
+    2356:	68 e3 45 00 00       	push   $0x45e3
+    235b:	6a 01                	push   $0x1
+    235d:	e8 8e 17 00 00       	call   3af0 <printf>
+    exit();
+    2362:	e8 1c 16 00 00       	call   3983 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    2367:	50                   	push   %eax
+    2368:	50                   	push   %eax
+    2369:	68 94 50 00 00       	push   $0x5094
+    236e:	6a 01                	push   $0x1
+    2370:	e8 7b 17 00 00       	call   3af0 <printf>
+    exit();
+    2375:	e8 09 16 00 00       	call   3983 <exit>
+    printf(1, "create dd/ff failed\n");
+    237a:	50                   	push   %eax
+    237b:	50                   	push   %eax
+    237c:	68 c7 45 00 00       	push   $0x45c7
+    2381:	6a 01                	push   $0x1
+    2383:	e8 68 17 00 00       	call   3af0 <printf>
+    exit();
+    2388:	e8 f6 15 00 00       	call   3983 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    238d:	50                   	push   %eax
+    238e:	50                   	push   %eax
+    238f:	68 af 45 00 00       	push   $0x45af
+    2394:	6a 01                	push   $0x1
+    2396:	e8 55 17 00 00       	call   3af0 <printf>
+    exit();
+    239b:	e8 e3 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd failed\n");
+    23a0:	50                   	push   %eax
+    23a1:	50                   	push   %eax
+    23a2:	68 98 48 00 00       	push   $0x4898
+    23a7:	6a 01                	push   $0x1
+    23a9:	e8 42 17 00 00       	call   3af0 <printf>
+    exit();
+    23ae:	e8 d0 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    23b3:	52                   	push   %edx
+    23b4:	52                   	push   %edx
+    23b5:	68 83 48 00 00       	push   $0x4883
+    23ba:	6a 01                	push   $0x1
+    23bc:	e8 2f 17 00 00       	call   3af0 <printf>
+    exit();
+    23c1:	e8 bd 15 00 00       	call   3983 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    23c6:	51                   	push   %ecx
+    23c7:	51                   	push   %ecx
+    23c8:	68 98 51 00 00       	push   $0x5198
+    23cd:	6a 01                	push   $0x1
+    23cf:	e8 1c 17 00 00       	call   3af0 <printf>
+    exit();
+    23d4:	e8 aa 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    23d9:	53                   	push   %ebx
+    23da:	53                   	push   %ebx
+    23db:	68 6e 48 00 00       	push   $0x486e
+    23e0:	6a 01                	push   $0x1
+    23e2:	e8 09 17 00 00       	call   3af0 <printf>
+    exit();
+    23e7:	e8 97 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    23ec:	50                   	push   %eax
+    23ed:	50                   	push   %eax
+    23ee:	68 56 48 00 00       	push   $0x4856
+    23f3:	6a 01                	push   $0x1
+    23f5:	e8 f6 16 00 00       	call   3af0 <printf>
+    exit();
+    23fa:	e8 84 15 00 00       	call   3983 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    23ff:	50                   	push   %eax
+    2400:	50                   	push   %eax
+    2401:	68 3e 48 00 00       	push   $0x483e
+    2406:	6a 01                	push   $0x1
+    2408:	e8 e3 16 00 00       	call   3af0 <printf>
+    exit();
+    240d:	e8 71 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    2412:	50                   	push   %eax
+    2413:	50                   	push   %eax
+    2414:	68 22 48 00 00       	push   $0x4822
+    2419:	6a 01                	push   $0x1
+    241b:	e8 d0 16 00 00       	call   3af0 <printf>
+    exit();
+    2420:	e8 5e 15 00 00       	call   3983 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    2425:	50                   	push   %eax
+    2426:	50                   	push   %eax
+    2427:	68 06 48 00 00       	push   $0x4806
+    242c:	6a 01                	push   $0x1
+    242e:	e8 bd 16 00 00       	call   3af0 <printf>
+    exit();
+    2433:	e8 4b 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    2438:	50                   	push   %eax
+    2439:	50                   	push   %eax
+    243a:	68 e9 47 00 00       	push   $0x47e9
+    243f:	6a 01                	push   $0x1
+    2441:	e8 aa 16 00 00       	call   3af0 <printf>
+    exit();
+    2446:	e8 38 15 00 00       	call   3983 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    244b:	52                   	push   %edx
+    244c:	52                   	push   %edx
+    244d:	68 ce 47 00 00       	push   $0x47ce
+    2452:	6a 01                	push   $0x1
+    2454:	e8 97 16 00 00       	call   3af0 <printf>
+    exit();
+    2459:	e8 25 15 00 00       	call   3983 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    245e:	51                   	push   %ecx
+    245f:	51                   	push   %ecx
+    2460:	68 fb 46 00 00       	push   $0x46fb
+    2465:	6a 01                	push   $0x1
+    2467:	e8 84 16 00 00       	call   3af0 <printf>
+    exit();
+    246c:	e8 12 15 00 00       	call   3983 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    2471:	53                   	push   %ebx
+    2472:	53                   	push   %ebx
+    2473:	68 e3 46 00 00       	push   $0x46e3
+    2478:	6a 01                	push   $0x1
+    247a:	e8 71 16 00 00       	call   3af0 <printf>
+    exit();
+    247f:	e8 ff 14 00 00       	call   3983 <exit>
+    2484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    248b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    248f:	90                   	nop
+
+00002490 <bigwrite>:
+{
+    2490:	f3 0f 1e fb          	endbr32 
+    2494:	55                   	push   %ebp
+    2495:	89 e5                	mov    %esp,%ebp
+    2497:	56                   	push   %esi
+    2498:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    2499:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    249e:	83 ec 08             	sub    $0x8,%esp
+    24a1:	68 b5 48 00 00       	push   $0x48b5
+    24a6:	6a 01                	push   $0x1
+    24a8:	e8 43 16 00 00       	call   3af0 <printf>
+  unlink("bigwrite");
+    24ad:	c7 04 24 c4 48 00 00 	movl   $0x48c4,(%esp)
+    24b4:	e8 1a 15 00 00       	call   39d3 <unlink>
+    24b9:	83 c4 10             	add    $0x10,%esp
+    24bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24c0:	83 ec 08             	sub    $0x8,%esp
+    24c3:	68 02 02 00 00       	push   $0x202
+    24c8:	68 c4 48 00 00       	push   $0x48c4
+    24cd:	e8 f1 14 00 00       	call   39c3 <open>
+    if(fd < 0){
+    24d2:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    24d5:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    24d7:	85 c0                	test   %eax,%eax
+    24d9:	78 7e                	js     2559 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    24db:	83 ec 04             	sub    $0x4,%esp
+    24de:	53                   	push   %ebx
+    24df:	68 e0 86 00 00       	push   $0x86e0
+    24e4:	50                   	push   %eax
+    24e5:	e8 b9 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    24ea:	83 c4 10             	add    $0x10,%esp
+    24ed:	39 d8                	cmp    %ebx,%eax
+    24ef:	75 55                	jne    2546 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    24f1:	83 ec 04             	sub    $0x4,%esp
+    24f4:	53                   	push   %ebx
+    24f5:	68 e0 86 00 00       	push   $0x86e0
+    24fa:	56                   	push   %esi
+    24fb:	e8 a3 14 00 00       	call   39a3 <write>
+      if(cc != sz){
+    2500:	83 c4 10             	add    $0x10,%esp
+    2503:	39 d8                	cmp    %ebx,%eax
+    2505:	75 3f                	jne    2546 <bigwrite+0xb6>
+    close(fd);
+    2507:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    250a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2510:	56                   	push   %esi
+    2511:	e8 95 14 00 00       	call   39ab <close>
+    unlink("bigwrite");
+    2516:	c7 04 24 c4 48 00 00 	movl   $0x48c4,(%esp)
+    251d:	e8 b1 14 00 00       	call   39d3 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2522:	83 c4 10             	add    $0x10,%esp
+    2525:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    252b:	75 93                	jne    24c0 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    252d:	83 ec 08             	sub    $0x8,%esp
+    2530:	68 f7 48 00 00       	push   $0x48f7
+    2535:	6a 01                	push   $0x1
+    2537:	e8 b4 15 00 00       	call   3af0 <printf>
+}
+    253c:	83 c4 10             	add    $0x10,%esp
+    253f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    2542:	5b                   	pop    %ebx
+    2543:	5e                   	pop    %esi
+    2544:	5d                   	pop    %ebp
+    2545:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    2546:	50                   	push   %eax
+    2547:	53                   	push   %ebx
+    2548:	68 e5 48 00 00       	push   $0x48e5
+    254d:	6a 01                	push   $0x1
+    254f:	e8 9c 15 00 00       	call   3af0 <printf>
+        exit();
+    2554:	e8 2a 14 00 00       	call   3983 <exit>
+      printf(1, "cannot create bigwrite\n");
+    2559:	83 ec 08             	sub    $0x8,%esp
+    255c:	68 cd 48 00 00       	push   $0x48cd
+    2561:	6a 01                	push   $0x1
+    2563:	e8 88 15 00 00       	call   3af0 <printf>
+      exit();
+    2568:	e8 16 14 00 00       	call   3983 <exit>
+    256d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002570 <bigfile>:
+{
+    2570:	f3 0f 1e fb          	endbr32 
+    2574:	55                   	push   %ebp
+    2575:	89 e5                	mov    %esp,%ebp
+    2577:	57                   	push   %edi
+    2578:	56                   	push   %esi
+    2579:	53                   	push   %ebx
+    257a:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    257d:	68 04 49 00 00       	push   $0x4904
+    2582:	6a 01                	push   $0x1
+    2584:	e8 67 15 00 00       	call   3af0 <printf>
+  unlink("bigfile");
+    2589:	c7 04 24 20 49 00 00 	movl   $0x4920,(%esp)
+    2590:	e8 3e 14 00 00       	call   39d3 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    2595:	58                   	pop    %eax
+    2596:	5a                   	pop    %edx
+    2597:	68 02 02 00 00       	push   $0x202
+    259c:	68 20 49 00 00       	push   $0x4920
+    25a1:	e8 1d 14 00 00       	call   39c3 <open>
+  if(fd < 0){
+    25a6:	83 c4 10             	add    $0x10,%esp
+    25a9:	85 c0                	test   %eax,%eax
+    25ab:	0f 88 5a 01 00 00    	js     270b <bigfile+0x19b>
+    25b1:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    25b3:	31 db                	xor    %ebx,%ebx
+    25b5:	8d 76 00             	lea    0x0(%esi),%esi
+    memset(buf, i, 600);
+    25b8:	83 ec 04             	sub    $0x4,%esp
+    25bb:	68 58 02 00 00       	push   $0x258
+    25c0:	53                   	push   %ebx
+    25c1:	68 e0 86 00 00       	push   $0x86e0
+    25c6:	e8 15 12 00 00       	call   37e0 <memset>
+    if(write(fd, buf, 600) != 600){
+    25cb:	83 c4 0c             	add    $0xc,%esp
+    25ce:	68 58 02 00 00       	push   $0x258
+    25d3:	68 e0 86 00 00       	push   $0x86e0
+    25d8:	56                   	push   %esi
+    25d9:	e8 c5 13 00 00       	call   39a3 <write>
+    25de:	83 c4 10             	add    $0x10,%esp
+    25e1:	3d 58 02 00 00       	cmp    $0x258,%eax
+    25e6:	0f 85 f8 00 00 00    	jne    26e4 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    25ec:	83 c3 01             	add    $0x1,%ebx
+    25ef:	83 fb 14             	cmp    $0x14,%ebx
+    25f2:	75 c4                	jne    25b8 <bigfile+0x48>
+  close(fd);
+    25f4:	83 ec 0c             	sub    $0xc,%esp
+    25f7:	56                   	push   %esi
+    25f8:	e8 ae 13 00 00       	call   39ab <close>
+  fd = open("bigfile", 0);
+    25fd:	5e                   	pop    %esi
+    25fe:	5f                   	pop    %edi
+    25ff:	6a 00                	push   $0x0
+    2601:	68 20 49 00 00       	push   $0x4920
+    2606:	e8 b8 13 00 00       	call   39c3 <open>
+  if(fd < 0){
+    260b:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", 0);
+    260e:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2610:	85 c0                	test   %eax,%eax
+    2612:	0f 88 e0 00 00 00    	js     26f8 <bigfile+0x188>
+  total = 0;
+    2618:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    261a:	31 ff                	xor    %edi,%edi
+    261c:	eb 30                	jmp    264e <bigfile+0xde>
+    261e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2620:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2625:	0f 85 91 00 00 00    	jne    26bc <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    262b:	89 fa                	mov    %edi,%edx
+    262d:	0f be 05 e0 86 00 00 	movsbl 0x86e0,%eax
+    2634:	d1 fa                	sar    %edx
+    2636:	39 d0                	cmp    %edx,%eax
+    2638:	75 6e                	jne    26a8 <bigfile+0x138>
+    263a:	0f be 15 0b 88 00 00 	movsbl 0x880b,%edx
+    2641:	39 d0                	cmp    %edx,%eax
+    2643:	75 63                	jne    26a8 <bigfile+0x138>
+    total += cc;
+    2645:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    264b:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    264e:	83 ec 04             	sub    $0x4,%esp
+    2651:	68 2c 01 00 00       	push   $0x12c
+    2656:	68 e0 86 00 00       	push   $0x86e0
+    265b:	56                   	push   %esi
+    265c:	e8 3a 13 00 00       	call   399b <read>
+    if(cc < 0){
+    2661:	83 c4 10             	add    $0x10,%esp
+    2664:	85 c0                	test   %eax,%eax
+    2666:	78 68                	js     26d0 <bigfile+0x160>
+    if(cc == 0)
+    2668:	75 b6                	jne    2620 <bigfile+0xb0>
+  close(fd);
+    266a:	83 ec 0c             	sub    $0xc,%esp
+    266d:	56                   	push   %esi
+    266e:	e8 38 13 00 00       	call   39ab <close>
+  if(total != 20*600){
+    2673:	83 c4 10             	add    $0x10,%esp
+    2676:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    267c:	0f 85 9c 00 00 00    	jne    271e <bigfile+0x1ae>
+  unlink("bigfile");
+    2682:	83 ec 0c             	sub    $0xc,%esp
+    2685:	68 20 49 00 00       	push   $0x4920
+    268a:	e8 44 13 00 00       	call   39d3 <unlink>
+  printf(1, "bigfile test ok\n");
+    268f:	58                   	pop    %eax
+    2690:	5a                   	pop    %edx
+    2691:	68 af 49 00 00       	push   $0x49af
+    2696:	6a 01                	push   $0x1
+    2698:	e8 53 14 00 00       	call   3af0 <printf>
+}
+    269d:	83 c4 10             	add    $0x10,%esp
+    26a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    26a3:	5b                   	pop    %ebx
+    26a4:	5e                   	pop    %esi
+    26a5:	5f                   	pop    %edi
+    26a6:	5d                   	pop    %ebp
+    26a7:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    26a8:	83 ec 08             	sub    $0x8,%esp
+    26ab:	68 7c 49 00 00       	push   $0x497c
+    26b0:	6a 01                	push   $0x1
+    26b2:	e8 39 14 00 00       	call   3af0 <printf>
+      exit();
+    26b7:	e8 c7 12 00 00       	call   3983 <exit>
+      printf(1, "short read bigfile\n");
+    26bc:	83 ec 08             	sub    $0x8,%esp
+    26bf:	68 68 49 00 00       	push   $0x4968
+    26c4:	6a 01                	push   $0x1
+    26c6:	e8 25 14 00 00       	call   3af0 <printf>
+      exit();
+    26cb:	e8 b3 12 00 00       	call   3983 <exit>
+      printf(1, "read bigfile failed\n");
+    26d0:	83 ec 08             	sub    $0x8,%esp
+    26d3:	68 53 49 00 00       	push   $0x4953
+    26d8:	6a 01                	push   $0x1
+    26da:	e8 11 14 00 00       	call   3af0 <printf>
+      exit();
+    26df:	e8 9f 12 00 00       	call   3983 <exit>
+      printf(1, "write bigfile failed\n");
+    26e4:	83 ec 08             	sub    $0x8,%esp
+    26e7:	68 28 49 00 00       	push   $0x4928
+    26ec:	6a 01                	push   $0x1
+    26ee:	e8 fd 13 00 00       	call   3af0 <printf>
+      exit();
+    26f3:	e8 8b 12 00 00       	call   3983 <exit>
+    printf(1, "cannot open bigfile\n");
+    26f8:	53                   	push   %ebx
+    26f9:	53                   	push   %ebx
+    26fa:	68 3e 49 00 00       	push   $0x493e
+    26ff:	6a 01                	push   $0x1
+    2701:	e8 ea 13 00 00       	call   3af0 <printf>
+    exit();
+    2706:	e8 78 12 00 00       	call   3983 <exit>
+    printf(1, "cannot create bigfile");
+    270b:	50                   	push   %eax
+    270c:	50                   	push   %eax
+    270d:	68 12 49 00 00       	push   $0x4912
+    2712:	6a 01                	push   $0x1
+    2714:	e8 d7 13 00 00       	call   3af0 <printf>
+    exit();
+    2719:	e8 65 12 00 00       	call   3983 <exit>
+    printf(1, "read bigfile wrong total\n");
+    271e:	51                   	push   %ecx
+    271f:	51                   	push   %ecx
+    2720:	68 95 49 00 00       	push   $0x4995
+    2725:	6a 01                	push   $0x1
+    2727:	e8 c4 13 00 00       	call   3af0 <printf>
+    exit();
+    272c:	e8 52 12 00 00       	call   3983 <exit>
+    2731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    273f:	90                   	nop
+
+00002740 <fourteen>:
+{
+    2740:	f3 0f 1e fb          	endbr32 
+    2744:	55                   	push   %ebp
+    2745:	89 e5                	mov    %esp,%ebp
+    2747:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    274a:	68 c0 49 00 00       	push   $0x49c0
+    274f:	6a 01                	push   $0x1
+    2751:	e8 9a 13 00 00       	call   3af0 <printf>
+  if(mkdir("12345678901234") != 0){
+    2756:	c7 04 24 fb 49 00 00 	movl   $0x49fb,(%esp)
+    275d:	e8 89 12 00 00       	call   39eb <mkdir>
+    2762:	83 c4 10             	add    $0x10,%esp
+    2765:	85 c0                	test   %eax,%eax
+    2767:	0f 85 97 00 00 00    	jne    2804 <fourteen+0xc4>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    276d:	83 ec 0c             	sub    $0xc,%esp
+    2770:	68 b8 51 00 00       	push   $0x51b8
+    2775:	e8 71 12 00 00       	call   39eb <mkdir>
+    277a:	83 c4 10             	add    $0x10,%esp
+    277d:	85 c0                	test   %eax,%eax
+    277f:	0f 85 de 00 00 00    	jne    2863 <fourteen+0x123>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    2785:	83 ec 08             	sub    $0x8,%esp
+    2788:	68 00 02 00 00       	push   $0x200
+    278d:	68 08 52 00 00       	push   $0x5208
+    2792:	e8 2c 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2797:	83 c4 10             	add    $0x10,%esp
+    279a:	85 c0                	test   %eax,%eax
+    279c:	0f 88 ae 00 00 00    	js     2850 <fourteen+0x110>
+  close(fd);
+    27a2:	83 ec 0c             	sub    $0xc,%esp
+    27a5:	50                   	push   %eax
+    27a6:	e8 00 12 00 00       	call   39ab <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    27ab:	58                   	pop    %eax
+    27ac:	5a                   	pop    %edx
+    27ad:	6a 00                	push   $0x0
+    27af:	68 78 52 00 00       	push   $0x5278
+    27b4:	e8 0a 12 00 00       	call   39c3 <open>
+  if(fd < 0){
+    27b9:	83 c4 10             	add    $0x10,%esp
+    27bc:	85 c0                	test   %eax,%eax
+    27be:	78 7d                	js     283d <fourteen+0xfd>
+  close(fd);
+    27c0:	83 ec 0c             	sub    $0xc,%esp
+    27c3:	50                   	push   %eax
+    27c4:	e8 e2 11 00 00       	call   39ab <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    27c9:	c7 04 24 ec 49 00 00 	movl   $0x49ec,(%esp)
+    27d0:	e8 16 12 00 00       	call   39eb <mkdir>
+    27d5:	83 c4 10             	add    $0x10,%esp
+    27d8:	85 c0                	test   %eax,%eax
+    27da:	74 4e                	je     282a <fourteen+0xea>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    27dc:	83 ec 0c             	sub    $0xc,%esp
+    27df:	68 14 53 00 00       	push   $0x5314
+    27e4:	e8 02 12 00 00       	call   39eb <mkdir>
+    27e9:	83 c4 10             	add    $0x10,%esp
+    27ec:	85 c0                	test   %eax,%eax
+    27ee:	74 27                	je     2817 <fourteen+0xd7>
+  printf(1, "fourteen ok\n");
+    27f0:	83 ec 08             	sub    $0x8,%esp
+    27f3:	68 0a 4a 00 00       	push   $0x4a0a
+    27f8:	6a 01                	push   $0x1
+    27fa:	e8 f1 12 00 00       	call   3af0 <printf>
+}
+    27ff:	83 c4 10             	add    $0x10,%esp
+    2802:	c9                   	leave  
+    2803:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2804:	50                   	push   %eax
+    2805:	50                   	push   %eax
+    2806:	68 cf 49 00 00       	push   $0x49cf
+    280b:	6a 01                	push   $0x1
+    280d:	e8 de 12 00 00       	call   3af0 <printf>
+    exit();
+    2812:	e8 6c 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2817:	50                   	push   %eax
+    2818:	50                   	push   %eax
+    2819:	68 34 53 00 00       	push   $0x5334
+    281e:	6a 01                	push   $0x1
+    2820:	e8 cb 12 00 00       	call   3af0 <printf>
+    exit();
+    2825:	e8 59 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    282a:	52                   	push   %edx
+    282b:	52                   	push   %edx
+    282c:	68 e4 52 00 00       	push   $0x52e4
+    2831:	6a 01                	push   $0x1
+    2833:	e8 b8 12 00 00       	call   3af0 <printf>
+    exit();
+    2838:	e8 46 11 00 00       	call   3983 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    283d:	51                   	push   %ecx
+    283e:	51                   	push   %ecx
+    283f:	68 a8 52 00 00       	push   $0x52a8
+    2844:	6a 01                	push   $0x1
+    2846:	e8 a5 12 00 00       	call   3af0 <printf>
+    exit();
+    284b:	e8 33 11 00 00       	call   3983 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    2850:	51                   	push   %ecx
+    2851:	51                   	push   %ecx
+    2852:	68 38 52 00 00       	push   $0x5238
+    2857:	6a 01                	push   $0x1
+    2859:	e8 92 12 00 00       	call   3af0 <printf>
+    exit();
+    285e:	e8 20 11 00 00       	call   3983 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    2863:	50                   	push   %eax
+    2864:	50                   	push   %eax
+    2865:	68 d8 51 00 00       	push   $0x51d8
+    286a:	6a 01                	push   $0x1
+    286c:	e8 7f 12 00 00       	call   3af0 <printf>
+    exit();
+    2871:	e8 0d 11 00 00       	call   3983 <exit>
+    2876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    287d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00002880 <rmdot>:
+{
+    2880:	f3 0f 1e fb          	endbr32 
+    2884:	55                   	push   %ebp
+    2885:	89 e5                	mov    %esp,%ebp
+    2887:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    288a:	68 17 4a 00 00       	push   $0x4a17
+    288f:	6a 01                	push   $0x1
+    2891:	e8 5a 12 00 00       	call   3af0 <printf>
+  if(mkdir("dots") != 0){
+    2896:	c7 04 24 23 4a 00 00 	movl   $0x4a23,(%esp)
+    289d:	e8 49 11 00 00       	call   39eb <mkdir>
+    28a2:	83 c4 10             	add    $0x10,%esp
+    28a5:	85 c0                	test   %eax,%eax
+    28a7:	0f 85 b0 00 00 00    	jne    295d <rmdot+0xdd>
+  if(chdir("dots") != 0){
+    28ad:	83 ec 0c             	sub    $0xc,%esp
+    28b0:	68 23 4a 00 00       	push   $0x4a23
+    28b5:	e8 39 11 00 00       	call   39f3 <chdir>
+    28ba:	83 c4 10             	add    $0x10,%esp
+    28bd:	85 c0                	test   %eax,%eax
+    28bf:	0f 85 1d 01 00 00    	jne    29e2 <rmdot+0x162>
+  if(unlink(".") == 0){
+    28c5:	83 ec 0c             	sub    $0xc,%esp
+    28c8:	68 ce 46 00 00       	push   $0x46ce
+    28cd:	e8 01 11 00 00       	call   39d3 <unlink>
+    28d2:	83 c4 10             	add    $0x10,%esp
+    28d5:	85 c0                	test   %eax,%eax
+    28d7:	0f 84 f2 00 00 00    	je     29cf <rmdot+0x14f>
+  if(unlink("..") == 0){
+    28dd:	83 ec 0c             	sub    $0xc,%esp
+    28e0:	68 cd 46 00 00       	push   $0x46cd
+    28e5:	e8 e9 10 00 00       	call   39d3 <unlink>
+    28ea:	83 c4 10             	add    $0x10,%esp
+    28ed:	85 c0                	test   %eax,%eax
+    28ef:	0f 84 c7 00 00 00    	je     29bc <rmdot+0x13c>
+  if(chdir("/") != 0){
+    28f5:	83 ec 0c             	sub    $0xc,%esp
+    28f8:	68 a1 3e 00 00       	push   $0x3ea1
+    28fd:	e8 f1 10 00 00       	call   39f3 <chdir>
+    2902:	83 c4 10             	add    $0x10,%esp
+    2905:	85 c0                	test   %eax,%eax
+    2907:	0f 85 9c 00 00 00    	jne    29a9 <rmdot+0x129>
+  if(unlink("dots/.") == 0){
+    290d:	83 ec 0c             	sub    $0xc,%esp
+    2910:	68 6b 4a 00 00       	push   $0x4a6b
+    2915:	e8 b9 10 00 00       	call   39d3 <unlink>
+    291a:	83 c4 10             	add    $0x10,%esp
+    291d:	85 c0                	test   %eax,%eax
+    291f:	74 75                	je     2996 <rmdot+0x116>
+  if(unlink("dots/..") == 0){
+    2921:	83 ec 0c             	sub    $0xc,%esp
+    2924:	68 89 4a 00 00       	push   $0x4a89
+    2929:	e8 a5 10 00 00       	call   39d3 <unlink>
+    292e:	83 c4 10             	add    $0x10,%esp
+    2931:	85 c0                	test   %eax,%eax
+    2933:	74 4e                	je     2983 <rmdot+0x103>
+  if(unlink("dots") != 0){
+    2935:	83 ec 0c             	sub    $0xc,%esp
+    2938:	68 23 4a 00 00       	push   $0x4a23
+    293d:	e8 91 10 00 00       	call   39d3 <unlink>
+    2942:	83 c4 10             	add    $0x10,%esp
+    2945:	85 c0                	test   %eax,%eax
+    2947:	75 27                	jne    2970 <rmdot+0xf0>
+  printf(1, "rmdot ok\n");
+    2949:	83 ec 08             	sub    $0x8,%esp
+    294c:	68 be 4a 00 00       	push   $0x4abe
+    2951:	6a 01                	push   $0x1
+    2953:	e8 98 11 00 00       	call   3af0 <printf>
+}
+    2958:	83 c4 10             	add    $0x10,%esp
+    295b:	c9                   	leave  
+    295c:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    295d:	50                   	push   %eax
+    295e:	50                   	push   %eax
+    295f:	68 28 4a 00 00       	push   $0x4a28
+    2964:	6a 01                	push   $0x1
+    2966:	e8 85 11 00 00       	call   3af0 <printf>
+    exit();
+    296b:	e8 13 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots failed!\n");
+    2970:	50                   	push   %eax
+    2971:	50                   	push   %eax
+    2972:	68 a9 4a 00 00       	push   $0x4aa9
+    2977:	6a 01                	push   $0x1
+    2979:	e8 72 11 00 00       	call   3af0 <printf>
+    exit();
+    297e:	e8 00 10 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    2983:	52                   	push   %edx
+    2984:	52                   	push   %edx
+    2985:	68 91 4a 00 00       	push   $0x4a91
+    298a:	6a 01                	push   $0x1
+    298c:	e8 5f 11 00 00       	call   3af0 <printf>
+    exit();
+    2991:	e8 ed 0f 00 00       	call   3983 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    2996:	51                   	push   %ecx
+    2997:	51                   	push   %ecx
+    2998:	68 72 4a 00 00       	push   $0x4a72
+    299d:	6a 01                	push   $0x1
+    299f:	e8 4c 11 00 00       	call   3af0 <printf>
+    exit();
+    29a4:	e8 da 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir / failed\n");
+    29a9:	50                   	push   %eax
+    29aa:	50                   	push   %eax
+    29ab:	68 a3 3e 00 00       	push   $0x3ea3
+    29b0:	6a 01                	push   $0x1
+    29b2:	e8 39 11 00 00       	call   3af0 <printf>
+    exit();
+    29b7:	e8 c7 0f 00 00       	call   3983 <exit>
+    printf(1, "rm .. worked!\n");
+    29bc:	50                   	push   %eax
+    29bd:	50                   	push   %eax
+    29be:	68 5c 4a 00 00       	push   $0x4a5c
+    29c3:	6a 01                	push   $0x1
+    29c5:	e8 26 11 00 00       	call   3af0 <printf>
+    exit();
+    29ca:	e8 b4 0f 00 00       	call   3983 <exit>
+    printf(1, "rm . worked!\n");
+    29cf:	50                   	push   %eax
+    29d0:	50                   	push   %eax
+    29d1:	68 4e 4a 00 00       	push   $0x4a4e
+    29d6:	6a 01                	push   $0x1
+    29d8:	e8 13 11 00 00       	call   3af0 <printf>
+    exit();
+    29dd:	e8 a1 0f 00 00       	call   3983 <exit>
+    printf(1, "chdir dots failed\n");
+    29e2:	50                   	push   %eax
+    29e3:	50                   	push   %eax
+    29e4:	68 3b 4a 00 00       	push   $0x4a3b
+    29e9:	6a 01                	push   $0x1
+    29eb:	e8 00 11 00 00       	call   3af0 <printf>
+    exit();
+    29f0:	e8 8e 0f 00 00       	call   3983 <exit>
+    29f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    29fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00002a00 <dirfile>:
+{
+    2a00:	f3 0f 1e fb          	endbr32 
+    2a04:	55                   	push   %ebp
+    2a05:	89 e5                	mov    %esp,%ebp
+    2a07:	53                   	push   %ebx
+    2a08:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2a0b:	68 c8 4a 00 00       	push   $0x4ac8
+    2a10:	6a 01                	push   $0x1
+    2a12:	e8 d9 10 00 00       	call   3af0 <printf>
+  fd = open("dirfile", O_CREATE);
+    2a17:	5b                   	pop    %ebx
+    2a18:	58                   	pop    %eax
+    2a19:	68 00 02 00 00       	push   $0x200
+    2a1e:	68 d5 4a 00 00       	push   $0x4ad5
+    2a23:	e8 9b 0f 00 00       	call   39c3 <open>
+  if(fd < 0){
+    2a28:	83 c4 10             	add    $0x10,%esp
+    2a2b:	85 c0                	test   %eax,%eax
+    2a2d:	0f 88 43 01 00 00    	js     2b76 <dirfile+0x176>
+  close(fd);
+    2a33:	83 ec 0c             	sub    $0xc,%esp
+    2a36:	50                   	push   %eax
+    2a37:	e8 6f 0f 00 00       	call   39ab <close>
+  if(chdir("dirfile") == 0){
+    2a3c:	c7 04 24 d5 4a 00 00 	movl   $0x4ad5,(%esp)
+    2a43:	e8 ab 0f 00 00       	call   39f3 <chdir>
+    2a48:	83 c4 10             	add    $0x10,%esp
+    2a4b:	85 c0                	test   %eax,%eax
+    2a4d:	0f 84 10 01 00 00    	je     2b63 <dirfile+0x163>
+  fd = open("dirfile/xx", 0);
+    2a53:	83 ec 08             	sub    $0x8,%esp
+    2a56:	6a 00                	push   $0x0
+    2a58:	68 0e 4b 00 00       	push   $0x4b0e
+    2a5d:	e8 61 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a62:	83 c4 10             	add    $0x10,%esp
+    2a65:	85 c0                	test   %eax,%eax
+    2a67:	0f 89 e3 00 00 00    	jns    2b50 <dirfile+0x150>
+  fd = open("dirfile/xx", O_CREATE);
+    2a6d:	83 ec 08             	sub    $0x8,%esp
+    2a70:	68 00 02 00 00       	push   $0x200
+    2a75:	68 0e 4b 00 00       	push   $0x4b0e
+    2a7a:	e8 44 0f 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2a7f:	83 c4 10             	add    $0x10,%esp
+    2a82:	85 c0                	test   %eax,%eax
+    2a84:	0f 89 c6 00 00 00    	jns    2b50 <dirfile+0x150>
+  if(mkdir("dirfile/xx") == 0){
+    2a8a:	83 ec 0c             	sub    $0xc,%esp
+    2a8d:	68 0e 4b 00 00       	push   $0x4b0e
+    2a92:	e8 54 0f 00 00       	call   39eb <mkdir>
+    2a97:	83 c4 10             	add    $0x10,%esp
+    2a9a:	85 c0                	test   %eax,%eax
+    2a9c:	0f 84 46 01 00 00    	je     2be8 <dirfile+0x1e8>
+  if(unlink("dirfile/xx") == 0){
+    2aa2:	83 ec 0c             	sub    $0xc,%esp
+    2aa5:	68 0e 4b 00 00       	push   $0x4b0e
+    2aaa:	e8 24 0f 00 00       	call   39d3 <unlink>
+    2aaf:	83 c4 10             	add    $0x10,%esp
+    2ab2:	85 c0                	test   %eax,%eax
+    2ab4:	0f 84 1b 01 00 00    	je     2bd5 <dirfile+0x1d5>
+  if(link("README", "dirfile/xx") == 0){
+    2aba:	83 ec 08             	sub    $0x8,%esp
+    2abd:	68 0e 4b 00 00       	push   $0x4b0e
+    2ac2:	68 72 4b 00 00       	push   $0x4b72
+    2ac7:	e8 17 0f 00 00       	call   39e3 <link>
+    2acc:	83 c4 10             	add    $0x10,%esp
+    2acf:	85 c0                	test   %eax,%eax
+    2ad1:	0f 84 eb 00 00 00    	je     2bc2 <dirfile+0x1c2>
+  if(unlink("dirfile") != 0){
+    2ad7:	83 ec 0c             	sub    $0xc,%esp
+    2ada:	68 d5 4a 00 00       	push   $0x4ad5
+    2adf:	e8 ef 0e 00 00       	call   39d3 <unlink>
+    2ae4:	83 c4 10             	add    $0x10,%esp
+    2ae7:	85 c0                	test   %eax,%eax
+    2ae9:	0f 85 c0 00 00 00    	jne    2baf <dirfile+0x1af>
+  fd = open(".", O_RDWR);
+    2aef:	83 ec 08             	sub    $0x8,%esp
+    2af2:	6a 02                	push   $0x2
+    2af4:	68 ce 46 00 00       	push   $0x46ce
+    2af9:	e8 c5 0e 00 00       	call   39c3 <open>
+  if(fd >= 0){
+    2afe:	83 c4 10             	add    $0x10,%esp
+    2b01:	85 c0                	test   %eax,%eax
+    2b03:	0f 89 93 00 00 00    	jns    2b9c <dirfile+0x19c>
+  fd = open(".", 0);
+    2b09:	83 ec 08             	sub    $0x8,%esp
+    2b0c:	6a 00                	push   $0x0
+    2b0e:	68 ce 46 00 00       	push   $0x46ce
+    2b13:	e8 ab 0e 00 00       	call   39c3 <open>
+  if(write(fd, "x", 1) > 0){
+    2b18:	83 c4 0c             	add    $0xc,%esp
+    2b1b:	6a 01                	push   $0x1
+  fd = open(".", 0);
+    2b1d:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2b1f:	68 b1 47 00 00       	push   $0x47b1
+    2b24:	50                   	push   %eax
+    2b25:	e8 79 0e 00 00       	call   39a3 <write>
+    2b2a:	83 c4 10             	add    $0x10,%esp
+    2b2d:	85 c0                	test   %eax,%eax
+    2b2f:	7f 58                	jg     2b89 <dirfile+0x189>
+  close(fd);
+    2b31:	83 ec 0c             	sub    $0xc,%esp
+    2b34:	53                   	push   %ebx
+    2b35:	e8 71 0e 00 00       	call   39ab <close>
+  printf(1, "dir vs file OK\n");
+    2b3a:	58                   	pop    %eax
+    2b3b:	5a                   	pop    %edx
+    2b3c:	68 a5 4b 00 00       	push   $0x4ba5
+    2b41:	6a 01                	push   $0x1
+    2b43:	e8 a8 0f 00 00       	call   3af0 <printf>
+}
+    2b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2b4b:	83 c4 10             	add    $0x10,%esp
+    2b4e:	c9                   	leave  
+    2b4f:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2b50:	50                   	push   %eax
+    2b51:	50                   	push   %eax
+    2b52:	68 19 4b 00 00       	push   $0x4b19
+    2b57:	6a 01                	push   $0x1
+    2b59:	e8 92 0f 00 00       	call   3af0 <printf>
+    exit();
+    2b5e:	e8 20 0e 00 00       	call   3983 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2b63:	52                   	push   %edx
+    2b64:	52                   	push   %edx
+    2b65:	68 f4 4a 00 00       	push   $0x4af4
+    2b6a:	6a 01                	push   $0x1
+    2b6c:	e8 7f 0f 00 00       	call   3af0 <printf>
+    exit();
+    2b71:	e8 0d 0e 00 00       	call   3983 <exit>
+    printf(1, "create dirfile failed\n");
+    2b76:	51                   	push   %ecx
+    2b77:	51                   	push   %ecx
+    2b78:	68 dd 4a 00 00       	push   $0x4add
+    2b7d:	6a 01                	push   $0x1
+    2b7f:	e8 6c 0f 00 00       	call   3af0 <printf>
+    exit();
+    2b84:	e8 fa 0d 00 00       	call   3983 <exit>
+    printf(1, "write . succeeded!\n");
+    2b89:	51                   	push   %ecx
+    2b8a:	51                   	push   %ecx
+    2b8b:	68 91 4b 00 00       	push   $0x4b91
+    2b90:	6a 01                	push   $0x1
+    2b92:	e8 59 0f 00 00       	call   3af0 <printf>
+    exit();
+    2b97:	e8 e7 0d 00 00       	call   3983 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2b9c:	53                   	push   %ebx
+    2b9d:	53                   	push   %ebx
+    2b9e:	68 88 53 00 00       	push   $0x5388
+    2ba3:	6a 01                	push   $0x1
+    2ba5:	e8 46 0f 00 00       	call   3af0 <printf>
+    exit();
+    2baa:	e8 d4 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2baf:	50                   	push   %eax
+    2bb0:	50                   	push   %eax
+    2bb1:	68 79 4b 00 00       	push   $0x4b79
+    2bb6:	6a 01                	push   $0x1
+    2bb8:	e8 33 0f 00 00       	call   3af0 <printf>
+    exit();
+    2bbd:	e8 c1 0d 00 00       	call   3983 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2bc2:	50                   	push   %eax
+    2bc3:	50                   	push   %eax
+    2bc4:	68 68 53 00 00       	push   $0x5368
+    2bc9:	6a 01                	push   $0x1
+    2bcb:	e8 20 0f 00 00       	call   3af0 <printf>
+    exit();
+    2bd0:	e8 ae 0d 00 00       	call   3983 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2bd5:	50                   	push   %eax
+    2bd6:	50                   	push   %eax
+    2bd7:	68 54 4b 00 00       	push   $0x4b54
+    2bdc:	6a 01                	push   $0x1
+    2bde:	e8 0d 0f 00 00       	call   3af0 <printf>
+    exit();
+    2be3:	e8 9b 0d 00 00       	call   3983 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2be8:	50                   	push   %eax
+    2be9:	50                   	push   %eax
+    2bea:	68 37 4b 00 00       	push   $0x4b37
+    2bef:	6a 01                	push   $0x1
+    2bf1:	e8 fa 0e 00 00       	call   3af0 <printf>
+    exit();
+    2bf6:	e8 88 0d 00 00       	call   3983 <exit>
+    2bfb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2bff:	90                   	nop
+
+00002c00 <iref>:
+{
+    2c00:	f3 0f 1e fb          	endbr32 
+    2c04:	55                   	push   %ebp
+    2c05:	89 e5                	mov    %esp,%ebp
+    2c07:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2c08:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2c0d:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2c10:	68 b5 4b 00 00       	push   $0x4bb5
+    2c15:	6a 01                	push   $0x1
+    2c17:	e8 d4 0e 00 00       	call   3af0 <printf>
+    2c1c:	83 c4 10             	add    $0x10,%esp
+    2c1f:	90                   	nop
+    if(mkdir("irefd") != 0){
+    2c20:	83 ec 0c             	sub    $0xc,%esp
+    2c23:	68 c6 4b 00 00       	push   $0x4bc6
+    2c28:	e8 be 0d 00 00       	call   39eb <mkdir>
+    2c2d:	83 c4 10             	add    $0x10,%esp
+    2c30:	85 c0                	test   %eax,%eax
+    2c32:	0f 85 bb 00 00 00    	jne    2cf3 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2c38:	83 ec 0c             	sub    $0xc,%esp
+    2c3b:	68 c6 4b 00 00       	push   $0x4bc6
+    2c40:	e8 ae 0d 00 00       	call   39f3 <chdir>
+    2c45:	83 c4 10             	add    $0x10,%esp
+    2c48:	85 c0                	test   %eax,%eax
+    2c4a:	0f 85 b7 00 00 00    	jne    2d07 <iref+0x107>
+    mkdir("");
+    2c50:	83 ec 0c             	sub    $0xc,%esp
+    2c53:	68 7b 42 00 00       	push   $0x427b
+    2c58:	e8 8e 0d 00 00       	call   39eb <mkdir>
+    link("README", "");
+    2c5d:	59                   	pop    %ecx
+    2c5e:	58                   	pop    %eax
+    2c5f:	68 7b 42 00 00       	push   $0x427b
+    2c64:	68 72 4b 00 00       	push   $0x4b72
+    2c69:	e8 75 0d 00 00       	call   39e3 <link>
+    fd = open("", O_CREATE);
+    2c6e:	58                   	pop    %eax
+    2c6f:	5a                   	pop    %edx
+    2c70:	68 00 02 00 00       	push   $0x200
+    2c75:	68 7b 42 00 00       	push   $0x427b
+    2c7a:	e8 44 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2c7f:	83 c4 10             	add    $0x10,%esp
+    2c82:	85 c0                	test   %eax,%eax
+    2c84:	78 0c                	js     2c92 <iref+0x92>
+      close(fd);
+    2c86:	83 ec 0c             	sub    $0xc,%esp
+    2c89:	50                   	push   %eax
+    2c8a:	e8 1c 0d 00 00       	call   39ab <close>
+    2c8f:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2c92:	83 ec 08             	sub    $0x8,%esp
+    2c95:	68 00 02 00 00       	push   $0x200
+    2c9a:	68 b0 47 00 00       	push   $0x47b0
+    2c9f:	e8 1f 0d 00 00       	call   39c3 <open>
+    if(fd >= 0)
+    2ca4:	83 c4 10             	add    $0x10,%esp
+    2ca7:	85 c0                	test   %eax,%eax
+    2ca9:	78 0c                	js     2cb7 <iref+0xb7>
+      close(fd);
+    2cab:	83 ec 0c             	sub    $0xc,%esp
+    2cae:	50                   	push   %eax
+    2caf:	e8 f7 0c 00 00       	call   39ab <close>
+    2cb4:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2cb7:	83 ec 0c             	sub    $0xc,%esp
+    2cba:	68 b0 47 00 00       	push   $0x47b0
+    2cbf:	e8 0f 0d 00 00       	call   39d3 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2cc4:	83 c4 10             	add    $0x10,%esp
+    2cc7:	83 eb 01             	sub    $0x1,%ebx
+    2cca:	0f 85 50 ff ff ff    	jne    2c20 <iref+0x20>
+  chdir("/");
+    2cd0:	83 ec 0c             	sub    $0xc,%esp
+    2cd3:	68 a1 3e 00 00       	push   $0x3ea1
+    2cd8:	e8 16 0d 00 00       	call   39f3 <chdir>
+  printf(1, "empty file name OK\n");
+    2cdd:	58                   	pop    %eax
+    2cde:	5a                   	pop    %edx
+    2cdf:	68 f4 4b 00 00       	push   $0x4bf4
+    2ce4:	6a 01                	push   $0x1
+    2ce6:	e8 05 0e 00 00       	call   3af0 <printf>
+}
+    2ceb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cee:	83 c4 10             	add    $0x10,%esp
+    2cf1:	c9                   	leave  
+    2cf2:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2cf3:	83 ec 08             	sub    $0x8,%esp
+    2cf6:	68 cc 4b 00 00       	push   $0x4bcc
+    2cfb:	6a 01                	push   $0x1
+    2cfd:	e8 ee 0d 00 00       	call   3af0 <printf>
+      exit();
+    2d02:	e8 7c 0c 00 00       	call   3983 <exit>
+      printf(1, "chdir irefd failed\n");
+    2d07:	83 ec 08             	sub    $0x8,%esp
+    2d0a:	68 e0 4b 00 00       	push   $0x4be0
+    2d0f:	6a 01                	push   $0x1
+    2d11:	e8 da 0d 00 00       	call   3af0 <printf>
+      exit();
+    2d16:	e8 68 0c 00 00       	call   3983 <exit>
+    2d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2d1f:	90                   	nop
+
+00002d20 <forktest>:
+{
+    2d20:	f3 0f 1e fb          	endbr32 
+    2d24:	55                   	push   %ebp
+    2d25:	89 e5                	mov    %esp,%ebp
+    2d27:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2d28:	31 db                	xor    %ebx,%ebx
+{
+    2d2a:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2d2d:	68 08 4c 00 00       	push   $0x4c08
+    2d32:	6a 01                	push   $0x1
+    2d34:	e8 b7 0d 00 00       	call   3af0 <printf>
+    2d39:	83 c4 10             	add    $0x10,%esp
+    2d3c:	eb 0f                	jmp    2d4d <forktest+0x2d>
+    2d3e:	66 90                	xchg   %ax,%ax
+    if(pid == 0)
+    2d40:	74 4a                	je     2d8c <forktest+0x6c>
+  for(n=0; n<1000; n++){
+    2d42:	83 c3 01             	add    $0x1,%ebx
+    2d45:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2d4b:	74 6b                	je     2db8 <forktest+0x98>
+    pid = fork();
+    2d4d:	e8 29 0c 00 00       	call   397b <fork>
+    if(pid < 0)
+    2d52:	85 c0                	test   %eax,%eax
+    2d54:	79 ea                	jns    2d40 <forktest+0x20>
+  for(; n > 0; n--){
+    2d56:	85 db                	test   %ebx,%ebx
+    2d58:	74 14                	je     2d6e <forktest+0x4e>
+    2d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2d60:	e8 26 0c 00 00       	call   398b <wait>
+    2d65:	85 c0                	test   %eax,%eax
+    2d67:	78 28                	js     2d91 <forktest+0x71>
+  for(; n > 0; n--){
+    2d69:	83 eb 01             	sub    $0x1,%ebx
+    2d6c:	75 f2                	jne    2d60 <forktest+0x40>
+  if(wait() != -1){
+    2d6e:	e8 18 0c 00 00       	call   398b <wait>
+    2d73:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2d76:	75 2d                	jne    2da5 <forktest+0x85>
+  printf(1, "fork test OK\n");
+    2d78:	83 ec 08             	sub    $0x8,%esp
+    2d7b:	68 3a 4c 00 00       	push   $0x4c3a
+    2d80:	6a 01                	push   $0x1
+    2d82:	e8 69 0d 00 00       	call   3af0 <printf>
+}
+    2d87:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2d8a:	c9                   	leave  
+    2d8b:	c3                   	ret    
+      exit();
+    2d8c:	e8 f2 0b 00 00       	call   3983 <exit>
+      printf(1, "wait stopped early\n");
+    2d91:	83 ec 08             	sub    $0x8,%esp
+    2d94:	68 13 4c 00 00       	push   $0x4c13
+    2d99:	6a 01                	push   $0x1
+    2d9b:	e8 50 0d 00 00       	call   3af0 <printf>
+      exit();
+    2da0:	e8 de 0b 00 00       	call   3983 <exit>
+    printf(1, "wait got too many\n");
+    2da5:	52                   	push   %edx
+    2da6:	52                   	push   %edx
+    2da7:	68 27 4c 00 00       	push   $0x4c27
+    2dac:	6a 01                	push   $0x1
+    2dae:	e8 3d 0d 00 00       	call   3af0 <printf>
+    exit();
+    2db3:	e8 cb 0b 00 00       	call   3983 <exit>
+    printf(1, "fork claimed to work 1000 times!\n");
+    2db8:	50                   	push   %eax
+    2db9:	50                   	push   %eax
+    2dba:	68 a8 53 00 00       	push   $0x53a8
+    2dbf:	6a 01                	push   $0x1
+    2dc1:	e8 2a 0d 00 00       	call   3af0 <printf>
+    exit();
+    2dc6:	e8 b8 0b 00 00       	call   3983 <exit>
+    2dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2dcf:	90                   	nop
+
+00002dd0 <sbrktest>:
+{
+    2dd0:	f3 0f 1e fb          	endbr32 
+    2dd4:	55                   	push   %ebp
+    2dd5:	89 e5                	mov    %esp,%ebp
+    2dd7:	57                   	push   %edi
+  for(i = 0; i < 5000; i++){
+    2dd8:	31 ff                	xor    %edi,%edi
+{
+    2dda:	56                   	push   %esi
+    2ddb:	53                   	push   %ebx
+    2ddc:	83 ec 54             	sub    $0x54,%esp
+  printf(stdout, "sbrk test\n");
+    2ddf:	68 48 4c 00 00       	push   $0x4c48
+    2de4:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    2dea:	e8 01 0d 00 00       	call   3af0 <printf>
+  oldbrk = sbrk(0);
+    2def:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2df6:	e8 10 0c 00 00       	call   3a0b <sbrk>
+  a = sbrk(0);
+    2dfb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2e02:	89 c3                	mov    %eax,%ebx
+  a = sbrk(0);
+    2e04:	e8 02 0c 00 00       	call   3a0b <sbrk>
+    2e09:	83 c4 10             	add    $0x10,%esp
+    2e0c:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 5000; i++){
+    2e0e:	eb 02                	jmp    2e12 <sbrktest+0x42>
+    a = b + 1;
+    2e10:	89 c6                	mov    %eax,%esi
+    b = sbrk(1);
+    2e12:	83 ec 0c             	sub    $0xc,%esp
+    2e15:	6a 01                	push   $0x1
+    2e17:	e8 ef 0b 00 00       	call   3a0b <sbrk>
+    if(b != a){
+    2e1c:	83 c4 10             	add    $0x10,%esp
+    2e1f:	39 f0                	cmp    %esi,%eax
+    2e21:	0f 85 84 02 00 00    	jne    30ab <sbrktest+0x2db>
+  for(i = 0; i < 5000; i++){
+    2e27:	83 c7 01             	add    $0x1,%edi
+    *b = 1;
+    2e2a:	c6 06 01             	movb   $0x1,(%esi)
+    a = b + 1;
+    2e2d:	8d 46 01             	lea    0x1(%esi),%eax
+  for(i = 0; i < 5000; i++){
+    2e30:	81 ff 88 13 00 00    	cmp    $0x1388,%edi
+    2e36:	75 d8                	jne    2e10 <sbrktest+0x40>
+  pid = fork();
+    2e38:	e8 3e 0b 00 00       	call   397b <fork>
+    2e3d:	89 c7                	mov    %eax,%edi
+  if(pid < 0){
+    2e3f:	85 c0                	test   %eax,%eax
+    2e41:	0f 88 91 03 00 00    	js     31d8 <sbrktest+0x408>
+  c = sbrk(1);
+    2e47:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2e4a:	83 c6 02             	add    $0x2,%esi
+  c = sbrk(1);
+    2e4d:	6a 01                	push   $0x1
+    2e4f:	e8 b7 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(1);
+    2e54:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2e5b:	e8 ab 0b 00 00       	call   3a0b <sbrk>
+  if(c != a + 1){
+    2e60:	83 c4 10             	add    $0x10,%esp
+    2e63:	39 c6                	cmp    %eax,%esi
+    2e65:	0f 85 56 03 00 00    	jne    31c1 <sbrktest+0x3f1>
+  if(pid == 0)
+    2e6b:	85 ff                	test   %edi,%edi
+    2e6d:	0f 84 49 03 00 00    	je     31bc <sbrktest+0x3ec>
+  wait();
+    2e73:	e8 13 0b 00 00       	call   398b <wait>
+  a = sbrk(0);
+    2e78:	83 ec 0c             	sub    $0xc,%esp
+    2e7b:	6a 00                	push   $0x0
+    2e7d:	e8 89 0b 00 00       	call   3a0b <sbrk>
+    2e82:	89 c6                	mov    %eax,%esi
+  amt = (BIG) - (uint)a;
+    2e84:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2e89:	29 f0                	sub    %esi,%eax
+  p = sbrk(amt);
+    2e8b:	89 04 24             	mov    %eax,(%esp)
+    2e8e:	e8 78 0b 00 00       	call   3a0b <sbrk>
+  if (p != a) {
+    2e93:	83 c4 10             	add    $0x10,%esp
+    2e96:	39 c6                	cmp    %eax,%esi
+    2e98:	0f 85 07 03 00 00    	jne    31a5 <sbrktest+0x3d5>
+  a = sbrk(0);
+    2e9e:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2ea1:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2ea8:	6a 00                	push   $0x0
+    2eaa:	e8 5c 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(-4096);
+    2eaf:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2eb6:	89 c6                	mov    %eax,%esi
+  c = sbrk(-4096);
+    2eb8:	e8 4e 0b 00 00       	call   3a0b <sbrk>
+  if(c == (char*)0xffffffff){
+    2ebd:	83 c4 10             	add    $0x10,%esp
+    2ec0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ec3:	0f 84 c5 02 00 00    	je     318e <sbrktest+0x3be>
+  c = sbrk(0);
+    2ec9:	83 ec 0c             	sub    $0xc,%esp
+    2ecc:	6a 00                	push   $0x0
+    2ece:	e8 38 0b 00 00       	call   3a0b <sbrk>
+  if(c != a - 4096){
+    2ed3:	8d 96 00 f0 ff ff    	lea    -0x1000(%esi),%edx
+    2ed9:	83 c4 10             	add    $0x10,%esp
+    2edc:	39 d0                	cmp    %edx,%eax
+    2ede:	0f 85 93 02 00 00    	jne    3177 <sbrktest+0x3a7>
+  a = sbrk(0);
+    2ee4:	83 ec 0c             	sub    $0xc,%esp
+    2ee7:	6a 00                	push   $0x0
+    2ee9:	e8 1d 0b 00 00       	call   3a0b <sbrk>
+  c = sbrk(4096);
+    2eee:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  a = sbrk(0);
+    2ef5:	89 c6                	mov    %eax,%esi
+  c = sbrk(4096);
+    2ef7:	e8 0f 0b 00 00       	call   3a0b <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2efc:	83 c4 10             	add    $0x10,%esp
+  c = sbrk(4096);
+    2eff:	89 c7                	mov    %eax,%edi
+  if(c != a || sbrk(0) != a + 4096){
+    2f01:	39 c6                	cmp    %eax,%esi
+    2f03:	0f 85 57 02 00 00    	jne    3160 <sbrktest+0x390>
+    2f09:	83 ec 0c             	sub    $0xc,%esp
+    2f0c:	6a 00                	push   $0x0
+    2f0e:	e8 f8 0a 00 00       	call   3a0b <sbrk>
+    2f13:	8d 96 00 10 00 00    	lea    0x1000(%esi),%edx
+    2f19:	83 c4 10             	add    $0x10,%esp
+    2f1c:	39 c2                	cmp    %eax,%edx
+    2f1e:	0f 85 3c 02 00 00    	jne    3160 <sbrktest+0x390>
+  if(*lastaddr == 99){
+    2f24:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2f2b:	0f 84 18 02 00 00    	je     3149 <sbrktest+0x379>
+  a = sbrk(0);
+    2f31:	83 ec 0c             	sub    $0xc,%esp
+    2f34:	6a 00                	push   $0x0
+    2f36:	e8 d0 0a 00 00       	call   3a0b <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f3b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2f42:	89 c6                	mov    %eax,%esi
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2f44:	e8 c2 0a 00 00       	call   3a0b <sbrk>
+    2f49:	89 d9                	mov    %ebx,%ecx
+    2f4b:	29 c1                	sub    %eax,%ecx
+    2f4d:	89 0c 24             	mov    %ecx,(%esp)
+    2f50:	e8 b6 0a 00 00       	call   3a0b <sbrk>
+  if(c != a){
+    2f55:	83 c4 10             	add    $0x10,%esp
+    2f58:	39 c6                	cmp    %eax,%esi
+    2f5a:	0f 85 d2 01 00 00    	jne    3132 <sbrktest+0x362>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f60:	be 00 00 00 80       	mov    $0x80000000,%esi
+    2f65:	8d 76 00             	lea    0x0(%esi),%esi
+    ppid = getpid();
+    2f68:	e8 96 0a 00 00       	call   3a03 <getpid>
+    2f6d:	89 c7                	mov    %eax,%edi
+    pid = fork();
+    2f6f:	e8 07 0a 00 00       	call   397b <fork>
+    if(pid < 0){
+    2f74:	85 c0                	test   %eax,%eax
+    2f76:	0f 88 9e 01 00 00    	js     311a <sbrktest+0x34a>
+    if(pid == 0){
+    2f7c:	0f 84 76 01 00 00    	je     30f8 <sbrktest+0x328>
+    wait();
+    2f82:	e8 04 0a 00 00       	call   398b <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2f87:	81 c6 50 c3 00 00    	add    $0xc350,%esi
+    2f8d:	81 fe 80 84 1e 80    	cmp    $0x801e8480,%esi
+    2f93:	75 d3                	jne    2f68 <sbrktest+0x198>
+  if(pipe(fds) != 0){
+    2f95:	83 ec 0c             	sub    $0xc,%esp
+    2f98:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2f9b:	50                   	push   %eax
+    2f9c:	e8 f2 09 00 00       	call   3993 <pipe>
+    2fa1:	83 c4 10             	add    $0x10,%esp
+    2fa4:	85 c0                	test   %eax,%eax
+    2fa6:	0f 85 34 01 00 00    	jne    30e0 <sbrktest+0x310>
+    2fac:	8d 75 c0             	lea    -0x40(%ebp),%esi
+    2faf:	89 f7                	mov    %esi,%edi
+    if((pids[i] = fork()) == 0){
+    2fb1:	e8 c5 09 00 00       	call   397b <fork>
+    2fb6:	89 07                	mov    %eax,(%edi)
+    2fb8:	85 c0                	test   %eax,%eax
+    2fba:	0f 84 8f 00 00 00    	je     304f <sbrktest+0x27f>
+    if(pids[i] != -1)
+    2fc0:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2fc3:	74 14                	je     2fd9 <sbrktest+0x209>
+      read(fds[0], &scratch, 1);
+    2fc5:	83 ec 04             	sub    $0x4,%esp
+    2fc8:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2fcb:	6a 01                	push   $0x1
+    2fcd:	50                   	push   %eax
+    2fce:	ff 75 b8             	pushl  -0x48(%ebp)
+    2fd1:	e8 c5 09 00 00       	call   399b <read>
+    2fd6:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2fd9:	83 c7 04             	add    $0x4,%edi
+    2fdc:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    2fdf:	39 c7                	cmp    %eax,%edi
+    2fe1:	75 ce                	jne    2fb1 <sbrktest+0x1e1>
+  c = sbrk(4096);
+    2fe3:	83 ec 0c             	sub    $0xc,%esp
+    2fe6:	68 00 10 00 00       	push   $0x1000
+    2feb:	e8 1b 0a 00 00       	call   3a0b <sbrk>
+    2ff0:	83 c4 10             	add    $0x10,%esp
+    2ff3:	89 c7                	mov    %eax,%edi
+    if(pids[i] == -1)
+    2ff5:	8b 06                	mov    (%esi),%eax
+    2ff7:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ffa:	74 11                	je     300d <sbrktest+0x23d>
+    kill(pids[i]);
+    2ffc:	83 ec 0c             	sub    $0xc,%esp
+    2fff:	50                   	push   %eax
+    3000:	e8 ae 09 00 00       	call   39b3 <kill>
+    wait();
+    3005:	e8 81 09 00 00       	call   398b <wait>
+    300a:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    300d:	83 c6 04             	add    $0x4,%esi
+    3010:	8d 45 e8             	lea    -0x18(%ebp),%eax
+    3013:	39 f0                	cmp    %esi,%eax
+    3015:	75 de                	jne    2ff5 <sbrktest+0x225>
+  if(c == (char*)0xffffffff){
+    3017:	83 ff ff             	cmp    $0xffffffff,%edi
+    301a:	0f 84 a9 00 00 00    	je     30c9 <sbrktest+0x2f9>
+  if(sbrk(0) > oldbrk)
+    3020:	83 ec 0c             	sub    $0xc,%esp
+    3023:	6a 00                	push   $0x0
+    3025:	e8 e1 09 00 00       	call   3a0b <sbrk>
+    302a:	83 c4 10             	add    $0x10,%esp
+    302d:	39 c3                	cmp    %eax,%ebx
+    302f:	72 61                	jb     3092 <sbrktest+0x2c2>
+  printf(stdout, "sbrk test OK\n");
+    3031:	83 ec 08             	sub    $0x8,%esp
+    3034:	68 f0 4c 00 00       	push   $0x4cf0
+    3039:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    303f:	e8 ac 0a 00 00       	call   3af0 <printf>
+}
+    3044:	83 c4 10             	add    $0x10,%esp
+    3047:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    304a:	5b                   	pop    %ebx
+    304b:	5e                   	pop    %esi
+    304c:	5f                   	pop    %edi
+    304d:	5d                   	pop    %ebp
+    304e:	c3                   	ret    
+      sbrk(BIG - (uint)sbrk(0));
+    304f:	83 ec 0c             	sub    $0xc,%esp
+    3052:	6a 00                	push   $0x0
+    3054:	e8 b2 09 00 00       	call   3a0b <sbrk>
+    3059:	89 c2                	mov    %eax,%edx
+    305b:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    3060:	29 d0                	sub    %edx,%eax
+    3062:	89 04 24             	mov    %eax,(%esp)
+    3065:	e8 a1 09 00 00       	call   3a0b <sbrk>
+      write(fds[1], "x", 1);
+    306a:	83 c4 0c             	add    $0xc,%esp
+    306d:	6a 01                	push   $0x1
+    306f:	68 b1 47 00 00       	push   $0x47b1
+    3074:	ff 75 bc             	pushl  -0x44(%ebp)
+    3077:	e8 27 09 00 00       	call   39a3 <write>
+    307c:	83 c4 10             	add    $0x10,%esp
+    307f:	90                   	nop
+      for(;;) sleep(1000);
+    3080:	83 ec 0c             	sub    $0xc,%esp
+    3083:	68 e8 03 00 00       	push   $0x3e8
+    3088:	e8 86 09 00 00       	call   3a13 <sleep>
+    308d:	83 c4 10             	add    $0x10,%esp
+    3090:	eb ee                	jmp    3080 <sbrktest+0x2b0>
+    sbrk(-(sbrk(0) - oldbrk));
+    3092:	83 ec 0c             	sub    $0xc,%esp
+    3095:	6a 00                	push   $0x0
+    3097:	e8 6f 09 00 00       	call   3a0b <sbrk>
+    309c:	29 c3                	sub    %eax,%ebx
+    309e:	89 1c 24             	mov    %ebx,(%esp)
+    30a1:	e8 65 09 00 00       	call   3a0b <sbrk>
+    30a6:	83 c4 10             	add    $0x10,%esp
+    30a9:	eb 86                	jmp    3031 <sbrktest+0x261>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    30ab:	83 ec 0c             	sub    $0xc,%esp
+    30ae:	50                   	push   %eax
+    30af:	56                   	push   %esi
+    30b0:	57                   	push   %edi
+    30b1:	68 53 4c 00 00       	push   $0x4c53
+    30b6:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    30bc:	e8 2f 0a 00 00       	call   3af0 <printf>
+      exit();
+    30c1:	83 c4 20             	add    $0x20,%esp
+    30c4:	e8 ba 08 00 00       	call   3983 <exit>
+    printf(stdout, "failed sbrk leaked memory\n");
+    30c9:	50                   	push   %eax
+    30ca:	50                   	push   %eax
+    30cb:	68 d5 4c 00 00       	push   $0x4cd5
+    30d0:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    30d6:	e8 15 0a 00 00       	call   3af0 <printf>
+    exit();
+    30db:	e8 a3 08 00 00       	call   3983 <exit>
+    printf(1, "pipe() failed\n");
+    30e0:	52                   	push   %edx
+    30e1:	52                   	push   %edx
+    30e2:	68 91 41 00 00       	push   $0x4191
+    30e7:	6a 01                	push   $0x1
+    30e9:	e8 02 0a 00 00       	call   3af0 <printf>
+    exit();
+    30ee:	e8 90 08 00 00       	call   3983 <exit>
+    30f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    30f7:	90                   	nop
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    30f8:	0f be 06             	movsbl (%esi),%eax
+    30fb:	50                   	push   %eax
+    30fc:	56                   	push   %esi
+    30fd:	68 bc 4c 00 00       	push   $0x4cbc
+    3102:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3108:	e8 e3 09 00 00       	call   3af0 <printf>
+      kill(ppid);
+    310d:	89 3c 24             	mov    %edi,(%esp)
+    3110:	e8 9e 08 00 00       	call   39b3 <kill>
+      exit();
+    3115:	e8 69 08 00 00       	call   3983 <exit>
+      printf(stdout, "fork failed\n");
+    311a:	83 ec 08             	sub    $0x8,%esp
+    311d:	68 99 4d 00 00       	push   $0x4d99
+    3122:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3128:	e8 c3 09 00 00       	call   3af0 <printf>
+      exit();
+    312d:	e8 51 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    3132:	50                   	push   %eax
+    3133:	56                   	push   %esi
+    3134:	68 9c 54 00 00       	push   $0x549c
+    3139:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    313f:	e8 ac 09 00 00       	call   3af0 <printf>
+    exit();
+    3144:	e8 3a 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    3149:	51                   	push   %ecx
+    314a:	51                   	push   %ecx
+    314b:	68 6c 54 00 00       	push   $0x546c
+    3150:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3156:	e8 95 09 00 00       	call   3af0 <printf>
+    exit();
+    315b:	e8 23 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    3160:	57                   	push   %edi
+    3161:	56                   	push   %esi
+    3162:	68 44 54 00 00       	push   $0x5444
+    3167:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    316d:	e8 7e 09 00 00       	call   3af0 <printf>
+    exit();
+    3172:	e8 0c 08 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    3177:	50                   	push   %eax
+    3178:	56                   	push   %esi
+    3179:	68 0c 54 00 00       	push   $0x540c
+    317e:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3184:	e8 67 09 00 00       	call   3af0 <printf>
+    exit();
+    3189:	e8 f5 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    318e:	53                   	push   %ebx
+    318f:	53                   	push   %ebx
+    3190:	68 a1 4c 00 00       	push   $0x4ca1
+    3195:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    319b:	e8 50 09 00 00       	call   3af0 <printf>
+    exit();
+    31a0:	e8 de 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    31a5:	56                   	push   %esi
+    31a6:	56                   	push   %esi
+    31a7:	68 cc 53 00 00       	push   $0x53cc
+    31ac:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    31b2:	e8 39 09 00 00       	call   3af0 <printf>
+    exit();
+    31b7:	e8 c7 07 00 00       	call   3983 <exit>
+    exit();
+    31bc:	e8 c2 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    31c1:	57                   	push   %edi
+    31c2:	57                   	push   %edi
+    31c3:	68 85 4c 00 00       	push   $0x4c85
+    31c8:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    31ce:	e8 1d 09 00 00       	call   3af0 <printf>
+    exit();
+    31d3:	e8 ab 07 00 00       	call   3983 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    31d8:	50                   	push   %eax
+    31d9:	50                   	push   %eax
+    31da:	68 6e 4c 00 00       	push   $0x4c6e
+    31df:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    31e5:	e8 06 09 00 00       	call   3af0 <printf>
+    exit();
+    31ea:	e8 94 07 00 00       	call   3983 <exit>
+    31ef:	90                   	nop
+
+000031f0 <validateint>:
+{
+    31f0:	f3 0f 1e fb          	endbr32 
+}
+    31f4:	c3                   	ret    
+    31f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    31fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003200 <validatetest>:
+{
+    3200:	f3 0f 1e fb          	endbr32 
+    3204:	55                   	push   %ebp
+    3205:	89 e5                	mov    %esp,%ebp
+    3207:	56                   	push   %esi
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3208:	31 f6                	xor    %esi,%esi
+{
+    320a:	53                   	push   %ebx
+  printf(stdout, "validate test\n");
+    320b:	83 ec 08             	sub    $0x8,%esp
+    320e:	68 fe 4c 00 00       	push   $0x4cfe
+    3213:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3219:	e8 d2 08 00 00       	call   3af0 <printf>
+    321e:	83 c4 10             	add    $0x10,%esp
+    3221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if((pid = fork()) == 0){
+    3228:	e8 4e 07 00 00       	call   397b <fork>
+    322d:	89 c3                	mov    %eax,%ebx
+    322f:	85 c0                	test   %eax,%eax
+    3231:	74 63                	je     3296 <validatetest+0x96>
+    sleep(0);
+    3233:	83 ec 0c             	sub    $0xc,%esp
+    3236:	6a 00                	push   $0x0
+    3238:	e8 d6 07 00 00       	call   3a13 <sleep>
+    sleep(0);
+    323d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    3244:	e8 ca 07 00 00       	call   3a13 <sleep>
+    kill(pid);
+    3249:	89 1c 24             	mov    %ebx,(%esp)
+    324c:	e8 62 07 00 00       	call   39b3 <kill>
+    wait();
+    3251:	e8 35 07 00 00       	call   398b <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    3256:	58                   	pop    %eax
+    3257:	5a                   	pop    %edx
+    3258:	56                   	push   %esi
+    3259:	68 0d 4d 00 00       	push   $0x4d0d
+    325e:	e8 80 07 00 00       	call   39e3 <link>
+    3263:	83 c4 10             	add    $0x10,%esp
+    3266:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3269:	75 30                	jne    329b <validatetest+0x9b>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    326b:	81 c6 00 10 00 00    	add    $0x1000,%esi
+    3271:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
+    3277:	75 af                	jne    3228 <validatetest+0x28>
+  printf(stdout, "validate ok\n");
+    3279:	83 ec 08             	sub    $0x8,%esp
+    327c:	68 31 4d 00 00       	push   $0x4d31
+    3281:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3287:	e8 64 08 00 00       	call   3af0 <printf>
+}
+    328c:	83 c4 10             	add    $0x10,%esp
+    328f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3292:	5b                   	pop    %ebx
+    3293:	5e                   	pop    %esi
+    3294:	5d                   	pop    %ebp
+    3295:	c3                   	ret    
+      exit();
+    3296:	e8 e8 06 00 00       	call   3983 <exit>
+      printf(stdout, "link should not succeed\n");
+    329b:	83 ec 08             	sub    $0x8,%esp
+    329e:	68 18 4d 00 00       	push   $0x4d18
+    32a3:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    32a9:	e8 42 08 00 00       	call   3af0 <printf>
+      exit();
+    32ae:	e8 d0 06 00 00       	call   3983 <exit>
+    32b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    32ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000032c0 <bsstest>:
+{
+    32c0:	f3 0f 1e fb          	endbr32 
+    32c4:	55                   	push   %ebp
+    32c5:	89 e5                	mov    %esp,%ebp
+    32c7:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    32ca:	68 3e 4d 00 00       	push   $0x4d3e
+    32cf:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    32d5:	e8 16 08 00 00       	call   3af0 <printf>
+    32da:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(uninit); i++){
+    32dd:	31 c0                	xor    %eax,%eax
+    32df:	90                   	nop
+    if(uninit[i] != '\0'){
+    32e0:	80 b8 c0 5f 00 00 00 	cmpb   $0x0,0x5fc0(%eax)
+    32e7:	75 22                	jne    330b <bsstest+0x4b>
+  for(i = 0; i < sizeof(uninit); i++){
+    32e9:	83 c0 01             	add    $0x1,%eax
+    32ec:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    32f1:	75 ed                	jne    32e0 <bsstest+0x20>
+  printf(stdout, "bss test ok\n");
+    32f3:	83 ec 08             	sub    $0x8,%esp
+    32f6:	68 59 4d 00 00       	push   $0x4d59
+    32fb:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3301:	e8 ea 07 00 00       	call   3af0 <printf>
+}
+    3306:	83 c4 10             	add    $0x10,%esp
+    3309:	c9                   	leave  
+    330a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    330b:	83 ec 08             	sub    $0x8,%esp
+    330e:	68 48 4d 00 00       	push   $0x4d48
+    3313:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3319:	e8 d2 07 00 00       	call   3af0 <printf>
+      exit();
+    331e:	e8 60 06 00 00       	call   3983 <exit>
+    3323:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    332a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003330 <bigargtest>:
+{
+    3330:	f3 0f 1e fb          	endbr32 
+    3334:	55                   	push   %ebp
+    3335:	89 e5                	mov    %esp,%ebp
+    3337:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    333a:	68 66 4d 00 00       	push   $0x4d66
+    333f:	e8 8f 06 00 00       	call   39d3 <unlink>
+  pid = fork();
+    3344:	e8 32 06 00 00       	call   397b <fork>
+  if(pid == 0){
+    3349:	83 c4 10             	add    $0x10,%esp
+    334c:	85 c0                	test   %eax,%eax
+    334e:	74 40                	je     3390 <bigargtest+0x60>
+  } else if(pid < 0){
+    3350:	0f 88 c1 00 00 00    	js     3417 <bigargtest+0xe7>
+  wait();
+    3356:	e8 30 06 00 00       	call   398b <wait>
+  fd = open("bigarg-ok", 0);
+    335b:	83 ec 08             	sub    $0x8,%esp
+    335e:	6a 00                	push   $0x0
+    3360:	68 66 4d 00 00       	push   $0x4d66
+    3365:	e8 59 06 00 00       	call   39c3 <open>
+  if(fd < 0){
+    336a:	83 c4 10             	add    $0x10,%esp
+    336d:	85 c0                	test   %eax,%eax
+    336f:	0f 88 8b 00 00 00    	js     3400 <bigargtest+0xd0>
+  close(fd);
+    3375:	83 ec 0c             	sub    $0xc,%esp
+    3378:	50                   	push   %eax
+    3379:	e8 2d 06 00 00       	call   39ab <close>
+  unlink("bigarg-ok");
+    337e:	c7 04 24 66 4d 00 00 	movl   $0x4d66,(%esp)
+    3385:	e8 49 06 00 00       	call   39d3 <unlink>
+}
+    338a:	83 c4 10             	add    $0x10,%esp
+    338d:	c9                   	leave  
+    338e:	c3                   	ret    
+    338f:	90                   	nop
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    3390:	c7 04 85 20 5f 00 00 	movl   $0x54c0,0x5f20(,%eax,4)
+    3397:	c0 54 00 00 
+    for(i = 0; i < MAXARG-1; i++)
+    339b:	83 c0 01             	add    $0x1,%eax
+    339e:	83 f8 1f             	cmp    $0x1f,%eax
+    33a1:	75 ed                	jne    3390 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    33a3:	51                   	push   %ecx
+    33a4:	51                   	push   %ecx
+    33a5:	68 70 4d 00 00       	push   $0x4d70
+    33aa:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    args[MAXARG-1] = 0;
+    33b0:	c7 05 9c 5f 00 00 00 	movl   $0x0,0x5f9c
+    33b7:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    33ba:	e8 31 07 00 00       	call   3af0 <printf>
+    exec("echo", args);
+    33bf:	58                   	pop    %eax
+    33c0:	5a                   	pop    %edx
+    33c1:	68 20 5f 00 00       	push   $0x5f20
+    33c6:	68 3d 3f 00 00       	push   $0x3f3d
+    33cb:	e8 eb 05 00 00       	call   39bb <exec>
+    printf(stdout, "bigarg test ok\n");
+    33d0:	59                   	pop    %ecx
+    33d1:	58                   	pop    %eax
+    33d2:	68 7d 4d 00 00       	push   $0x4d7d
+    33d7:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    33dd:	e8 0e 07 00 00       	call   3af0 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    33e2:	58                   	pop    %eax
+    33e3:	5a                   	pop    %edx
+    33e4:	68 00 02 00 00       	push   $0x200
+    33e9:	68 66 4d 00 00       	push   $0x4d66
+    33ee:	e8 d0 05 00 00       	call   39c3 <open>
+    close(fd);
+    33f3:	89 04 24             	mov    %eax,(%esp)
+    33f6:	e8 b0 05 00 00       	call   39ab <close>
+    exit();
+    33fb:	e8 83 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    3400:	50                   	push   %eax
+    3401:	50                   	push   %eax
+    3402:	68 a6 4d 00 00       	push   $0x4da6
+    3407:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    340d:	e8 de 06 00 00       	call   3af0 <printf>
+    exit();
+    3412:	e8 6c 05 00 00       	call   3983 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3417:	52                   	push   %edx
+    3418:	52                   	push   %edx
+    3419:	68 8d 4d 00 00       	push   $0x4d8d
+    341e:	ff 35 f0 5e 00 00    	pushl  0x5ef0
+    3424:	e8 c7 06 00 00       	call   3af0 <printf>
+    exit();
+    3429:	e8 55 05 00 00       	call   3983 <exit>
+    342e:	66 90                	xchg   %ax,%ax
+
+00003430 <fsfull>:
+{
+    3430:	f3 0f 1e fb          	endbr32 
+    3434:	55                   	push   %ebp
+    3435:	89 e5                	mov    %esp,%ebp
+    3437:	57                   	push   %edi
+    3438:	56                   	push   %esi
+  for(nfiles = 0; ; nfiles++){
+    3439:	31 f6                	xor    %esi,%esi
+{
+    343b:	53                   	push   %ebx
+    343c:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    343f:	68 bb 4d 00 00       	push   $0x4dbb
+    3444:	6a 01                	push   $0x1
+    3446:	e8 a5 06 00 00       	call   3af0 <printf>
+    344b:	83 c4 10             	add    $0x10,%esp
+    344e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + nfiles / 1000;
+    3450:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3455:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    345a:	83 ec 04             	sub    $0x4,%esp
+    name[0] = 'f';
+    345d:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3461:	f7 e6                	mul    %esi
+    name[5] = '\0';
+    3463:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3467:	c1 ea 06             	shr    $0x6,%edx
+    346a:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    346d:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3473:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3476:	89 f0                	mov    %esi,%eax
+    3478:	29 d0                	sub    %edx,%eax
+    347a:	89 c2                	mov    %eax,%edx
+    347c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    3481:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3483:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3488:	c1 ea 05             	shr    $0x5,%edx
+    348b:	83 c2 30             	add    $0x30,%edx
+    348e:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3491:	f7 e6                	mul    %esi
+    3493:	89 f0                	mov    %esi,%eax
+    3495:	c1 ea 05             	shr    $0x5,%edx
+    3498:	6b d2 64             	imul   $0x64,%edx,%edx
+    349b:	29 d0                	sub    %edx,%eax
+    349d:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    349f:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    34a1:	c1 ea 03             	shr    $0x3,%edx
+    34a4:	83 c2 30             	add    $0x30,%edx
+    34a7:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    34aa:	f7 e1                	mul    %ecx
+    34ac:	89 f1                	mov    %esi,%ecx
+    34ae:	c1 ea 03             	shr    $0x3,%edx
+    34b1:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    34b4:	01 c0                	add    %eax,%eax
+    34b6:	29 c1                	sub    %eax,%ecx
+    34b8:	89 c8                	mov    %ecx,%eax
+    34ba:	83 c0 30             	add    $0x30,%eax
+    34bd:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    34c0:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34c3:	50                   	push   %eax
+    34c4:	68 c8 4d 00 00       	push   $0x4dc8
+    34c9:	6a 01                	push   $0x1
+    34cb:	e8 20 06 00 00       	call   3af0 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    34d0:	58                   	pop    %eax
+    34d1:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34d4:	5a                   	pop    %edx
+    34d5:	68 02 02 00 00       	push   $0x202
+    34da:	50                   	push   %eax
+    34db:	e8 e3 04 00 00       	call   39c3 <open>
+    if(fd < 0){
+    34e0:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    34e3:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    34e5:	85 c0                	test   %eax,%eax
+    34e7:	78 4d                	js     3536 <fsfull+0x106>
+    int total = 0;
+    34e9:	31 db                	xor    %ebx,%ebx
+    34eb:	eb 05                	jmp    34f2 <fsfull+0xc2>
+    34ed:	8d 76 00             	lea    0x0(%esi),%esi
+      total += cc;
+    34f0:	01 c3                	add    %eax,%ebx
+      int cc = write(fd, buf, 512);
+    34f2:	83 ec 04             	sub    $0x4,%esp
+    34f5:	68 00 02 00 00       	push   $0x200
+    34fa:	68 e0 86 00 00       	push   $0x86e0
+    34ff:	57                   	push   %edi
+    3500:	e8 9e 04 00 00       	call   39a3 <write>
+      if(cc < 512)
+    3505:	83 c4 10             	add    $0x10,%esp
+    3508:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    350d:	7f e1                	jg     34f0 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    350f:	83 ec 04             	sub    $0x4,%esp
+    3512:	53                   	push   %ebx
+    3513:	68 e4 4d 00 00       	push   $0x4de4
+    3518:	6a 01                	push   $0x1
+    351a:	e8 d1 05 00 00       	call   3af0 <printf>
+    close(fd);
+    351f:	89 3c 24             	mov    %edi,(%esp)
+    3522:	e8 84 04 00 00       	call   39ab <close>
+    if(total == 0)
+    3527:	83 c4 10             	add    $0x10,%esp
+    352a:	85 db                	test   %ebx,%ebx
+    352c:	74 1e                	je     354c <fsfull+0x11c>
+  for(nfiles = 0; ; nfiles++){
+    352e:	83 c6 01             	add    $0x1,%esi
+    3531:	e9 1a ff ff ff       	jmp    3450 <fsfull+0x20>
+      printf(1, "open %s failed\n", name);
+    3536:	83 ec 04             	sub    $0x4,%esp
+    3539:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    353c:	50                   	push   %eax
+    353d:	68 d4 4d 00 00       	push   $0x4dd4
+    3542:	6a 01                	push   $0x1
+    3544:	e8 a7 05 00 00       	call   3af0 <printf>
+      break;
+    3549:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    354c:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3551:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
+    3556:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    355d:	8d 76 00             	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    3560:	89 f0                	mov    %esi,%eax
+    3562:	89 f1                	mov    %esi,%ecx
+    unlink(name);
+    3564:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'f';
+    3567:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    356b:	f7 ef                	imul   %edi
+    356d:	c1 f9 1f             	sar    $0x1f,%ecx
+    name[5] = '\0';
+    3570:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    3574:	c1 fa 06             	sar    $0x6,%edx
+    3577:	29 ca                	sub    %ecx,%edx
+    3579:	8d 42 30             	lea    0x30(%edx),%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    357c:	69 d2 e8 03 00 00    	imul   $0x3e8,%edx,%edx
+    name[1] = '0' + nfiles / 1000;
+    3582:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3585:	89 f0                	mov    %esi,%eax
+    3587:	29 d0                	sub    %edx,%eax
+    3589:	f7 e3                	mul    %ebx
+    name[3] = '0' + (nfiles % 100) / 10;
+    358b:	89 f0                	mov    %esi,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    358d:	c1 ea 05             	shr    $0x5,%edx
+    3590:	83 c2 30             	add    $0x30,%edx
+    3593:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3596:	f7 eb                	imul   %ebx
+    3598:	89 f0                	mov    %esi,%eax
+    359a:	c1 fa 05             	sar    $0x5,%edx
+    359d:	29 ca                	sub    %ecx,%edx
+    359f:	6b d2 64             	imul   $0x64,%edx,%edx
+    35a2:	29 d0                	sub    %edx,%eax
+    35a4:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+    35a9:	f7 e2                	mul    %edx
+    name[4] = '0' + (nfiles % 10);
+    35ab:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    35ad:	c1 ea 03             	shr    $0x3,%edx
+    35b0:	83 c2 30             	add    $0x30,%edx
+    35b3:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    35b6:	ba 67 66 66 66       	mov    $0x66666667,%edx
+    35bb:	f7 ea                	imul   %edx
+    35bd:	c1 fa 02             	sar    $0x2,%edx
+    35c0:	29 ca                	sub    %ecx,%edx
+    35c2:	89 f1                	mov    %esi,%ecx
+    nfiles--;
+    35c4:	83 ee 01             	sub    $0x1,%esi
+    name[4] = '0' + (nfiles % 10);
+    35c7:	8d 04 92             	lea    (%edx,%edx,4),%eax
+    35ca:	01 c0                	add    %eax,%eax
+    35cc:	29 c1                	sub    %eax,%ecx
+    35ce:	89 c8                	mov    %ecx,%eax
+    35d0:	83 c0 30             	add    $0x30,%eax
+    35d3:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    35d6:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    35d9:	50                   	push   %eax
+    35da:	e8 f4 03 00 00       	call   39d3 <unlink>
+  while(nfiles >= 0){
+    35df:	83 c4 10             	add    $0x10,%esp
+    35e2:	83 fe ff             	cmp    $0xffffffff,%esi
+    35e5:	0f 85 75 ff ff ff    	jne    3560 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    35eb:	83 ec 08             	sub    $0x8,%esp
+    35ee:	68 f4 4d 00 00       	push   $0x4df4
+    35f3:	6a 01                	push   $0x1
+    35f5:	e8 f6 04 00 00       	call   3af0 <printf>
+}
+    35fa:	83 c4 10             	add    $0x10,%esp
+    35fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3600:	5b                   	pop    %ebx
+    3601:	5e                   	pop    %esi
+    3602:	5f                   	pop    %edi
+    3603:	5d                   	pop    %ebp
+    3604:	c3                   	ret    
+    3605:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    360c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003610 <uio>:
+{
+    3610:	f3 0f 1e fb          	endbr32 
+    3614:	55                   	push   %ebp
+    3615:	89 e5                	mov    %esp,%ebp
+    3617:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    361a:	68 0a 4e 00 00       	push   $0x4e0a
+    361f:	6a 01                	push   $0x1
+    3621:	e8 ca 04 00 00       	call   3af0 <printf>
+  pid = fork();
+    3626:	e8 50 03 00 00       	call   397b <fork>
+  if(pid == 0){
+    362b:	83 c4 10             	add    $0x10,%esp
+    362e:	85 c0                	test   %eax,%eax
+    3630:	74 1b                	je     364d <uio+0x3d>
+  } else if(pid < 0){
+    3632:	78 3d                	js     3671 <uio+0x61>
+  wait();
+    3634:	e8 52 03 00 00       	call   398b <wait>
+  printf(1, "uio test done\n");
+    3639:	83 ec 08             	sub    $0x8,%esp
+    363c:	68 14 4e 00 00       	push   $0x4e14
+    3641:	6a 01                	push   $0x1
+    3643:	e8 a8 04 00 00       	call   3af0 <printf>
+}
+    3648:	83 c4 10             	add    $0x10,%esp
+    364b:	c9                   	leave  
+    364c:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    364d:	b8 09 00 00 00       	mov    $0x9,%eax
+    3652:	ba 70 00 00 00       	mov    $0x70,%edx
+    3657:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    3658:	ba 71 00 00 00       	mov    $0x71,%edx
+    365d:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    365e:	52                   	push   %edx
+    365f:	52                   	push   %edx
+    3660:	68 a0 55 00 00       	push   $0x55a0
+    3665:	6a 01                	push   $0x1
+    3667:	e8 84 04 00 00       	call   3af0 <printf>
+    exit();
+    366c:	e8 12 03 00 00       	call   3983 <exit>
+    printf (1, "fork failed\n");
+    3671:	50                   	push   %eax
+    3672:	50                   	push   %eax
+    3673:	68 99 4d 00 00       	push   $0x4d99
+    3678:	6a 01                	push   $0x1
+    367a:	e8 71 04 00 00       	call   3af0 <printf>
+    exit();
+    367f:	e8 ff 02 00 00       	call   3983 <exit>
+    3684:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    368b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    368f:	90                   	nop
+
+00003690 <argptest>:
+{
+    3690:	f3 0f 1e fb          	endbr32 
+    3694:	55                   	push   %ebp
+    3695:	89 e5                	mov    %esp,%ebp
+    3697:	53                   	push   %ebx
+    3698:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    369b:	6a 00                	push   $0x0
+    369d:	68 23 4e 00 00       	push   $0x4e23
+    36a2:	e8 1c 03 00 00       	call   39c3 <open>
+  if (fd < 0) {
+    36a7:	83 c4 10             	add    $0x10,%esp
+    36aa:	85 c0                	test   %eax,%eax
+    36ac:	78 39                	js     36e7 <argptest+0x57>
+  read(fd, sbrk(0) - 1, -1);
+    36ae:	83 ec 0c             	sub    $0xc,%esp
+    36b1:	89 c3                	mov    %eax,%ebx
+    36b3:	6a 00                	push   $0x0
+    36b5:	e8 51 03 00 00       	call   3a0b <sbrk>
+    36ba:	83 c4 0c             	add    $0xc,%esp
+    36bd:	83 e8 01             	sub    $0x1,%eax
+    36c0:	6a ff                	push   $0xffffffff
+    36c2:	50                   	push   %eax
+    36c3:	53                   	push   %ebx
+    36c4:	e8 d2 02 00 00       	call   399b <read>
+  close(fd);
+    36c9:	89 1c 24             	mov    %ebx,(%esp)
+    36cc:	e8 da 02 00 00       	call   39ab <close>
+  printf(1, "arg test passed\n");
+    36d1:	58                   	pop    %eax
+    36d2:	5a                   	pop    %edx
+    36d3:	68 35 4e 00 00       	push   $0x4e35
+    36d8:	6a 01                	push   $0x1
+    36da:	e8 11 04 00 00       	call   3af0 <printf>
+}
+    36df:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36e2:	83 c4 10             	add    $0x10,%esp
+    36e5:	c9                   	leave  
+    36e6:	c3                   	ret    
+    printf(2, "open failed\n");
+    36e7:	51                   	push   %ecx
+    36e8:	51                   	push   %ecx
+    36e9:	68 28 4e 00 00       	push   $0x4e28
+    36ee:	6a 02                	push   $0x2
+    36f0:	e8 fb 03 00 00       	call   3af0 <printf>
+    exit();
+    36f5:	e8 89 02 00 00       	call   3983 <exit>
+    36fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003700 <rand>:
+{
+    3700:	f3 0f 1e fb          	endbr32 
+  randstate = randstate * 1664525 + 1013904223;
+    3704:	69 05 ec 5e 00 00 0d 	imul   $0x19660d,0x5eec,%eax
+    370b:	66 19 00 
+    370e:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    3713:	a3 ec 5e 00 00       	mov    %eax,0x5eec
+}
+    3718:	c3                   	ret    
+    3719:	66 90                	xchg   %ax,%ax
+    371b:	66 90                	xchg   %ax,%ax
+    371d:	66 90                	xchg   %ax,%ax
+    371f:	90                   	nop
+
+00003720 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3720:	f3 0f 1e fb          	endbr32 
+    3724:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    3725:	31 c0                	xor    %eax,%eax
+{
+    3727:	89 e5                	mov    %esp,%ebp
+    3729:	53                   	push   %ebx
+    372a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    372d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+    3730:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+    3734:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+    3737:	83 c0 01             	add    $0x1,%eax
+    373a:	84 d2                	test   %dl,%dl
+    373c:	75 f2                	jne    3730 <strcpy+0x10>
+    ;
+  return os;
+}
+    373e:	89 c8                	mov    %ecx,%eax
+    3740:	5b                   	pop    %ebx
+    3741:	5d                   	pop    %ebp
+    3742:	c3                   	ret    
+    3743:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    374a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003750 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    3750:	f3 0f 1e fb          	endbr32 
+    3754:	55                   	push   %ebp
+    3755:	89 e5                	mov    %esp,%ebp
+    3757:	53                   	push   %ebx
+    3758:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    375b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+    375e:	0f b6 01             	movzbl (%ecx),%eax
+    3761:	0f b6 1a             	movzbl (%edx),%ebx
+    3764:	84 c0                	test   %al,%al
+    3766:	75 19                	jne    3781 <strcmp+0x31>
+    3768:	eb 26                	jmp    3790 <strcmp+0x40>
+    376a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3770:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+    3774:	83 c1 01             	add    $0x1,%ecx
+    3777:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+    377a:	0f b6 1a             	movzbl (%edx),%ebx
+    377d:	84 c0                	test   %al,%al
+    377f:	74 0f                	je     3790 <strcmp+0x40>
+    3781:	38 d8                	cmp    %bl,%al
+    3783:	74 eb                	je     3770 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+    3785:	29 d8                	sub    %ebx,%eax
+}
+    3787:	5b                   	pop    %ebx
+    3788:	5d                   	pop    %ebp
+    3789:	c3                   	ret    
+    378a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    3790:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+    3792:	29 d8                	sub    %ebx,%eax
+}
+    3794:	5b                   	pop    %ebx
+    3795:	5d                   	pop    %ebp
+    3796:	c3                   	ret    
+    3797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    379e:	66 90                	xchg   %ax,%ax
+
+000037a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    37a0:	f3 0f 1e fb          	endbr32 
+    37a4:	55                   	push   %ebp
+    37a5:	89 e5                	mov    %esp,%ebp
+    37a7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    37aa:	80 3a 00             	cmpb   $0x0,(%edx)
+    37ad:	74 21                	je     37d0 <strlen+0x30>
+    37af:	31 c0                	xor    %eax,%eax
+    37b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37b8:	83 c0 01             	add    $0x1,%eax
+    37bb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+    37bf:	89 c1                	mov    %eax,%ecx
+    37c1:	75 f5                	jne    37b8 <strlen+0x18>
+    ;
+  return n;
+}
+    37c3:	89 c8                	mov    %ecx,%eax
+    37c5:	5d                   	pop    %ebp
+    37c6:	c3                   	ret    
+    37c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37ce:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+    37d0:	31 c9                	xor    %ecx,%ecx
+}
+    37d2:	5d                   	pop    %ebp
+    37d3:	89 c8                	mov    %ecx,%eax
+    37d5:	c3                   	ret    
+    37d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    37dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000037e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    37e0:	f3 0f 1e fb          	endbr32 
+    37e4:	55                   	push   %ebp
+    37e5:	89 e5                	mov    %esp,%ebp
+    37e7:	57                   	push   %edi
+    37e8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    37eb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    37ee:	8b 45 0c             	mov    0xc(%ebp),%eax
+    37f1:	89 d7                	mov    %edx,%edi
+    37f3:	fc                   	cld    
+    37f4:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    37f6:	89 d0                	mov    %edx,%eax
+    37f8:	5f                   	pop    %edi
+    37f9:	5d                   	pop    %ebp
+    37fa:	c3                   	ret    
+    37fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    37ff:	90                   	nop
+
+00003800 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3800:	f3 0f 1e fb          	endbr32 
+    3804:	55                   	push   %ebp
+    3805:	89 e5                	mov    %esp,%ebp
+    3807:	8b 45 08             	mov    0x8(%ebp),%eax
+    380a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+    380e:	0f b6 10             	movzbl (%eax),%edx
+    3811:	84 d2                	test   %dl,%dl
+    3813:	75 16                	jne    382b <strchr+0x2b>
+    3815:	eb 21                	jmp    3838 <strchr+0x38>
+    3817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    381e:	66 90                	xchg   %ax,%ax
+    3820:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+    3824:	83 c0 01             	add    $0x1,%eax
+    3827:	84 d2                	test   %dl,%dl
+    3829:	74 0d                	je     3838 <strchr+0x38>
+    if(*s == c)
+    382b:	38 d1                	cmp    %dl,%cl
+    382d:	75 f1                	jne    3820 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+    382f:	5d                   	pop    %ebp
+    3830:	c3                   	ret    
+    3831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+    3838:	31 c0                	xor    %eax,%eax
+}
+    383a:	5d                   	pop    %ebp
+    383b:	c3                   	ret    
+    383c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003840 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    3840:	f3 0f 1e fb          	endbr32 
+    3844:	55                   	push   %ebp
+    3845:	89 e5                	mov    %esp,%ebp
+    3847:	57                   	push   %edi
+    3848:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    3849:	31 f6                	xor    %esi,%esi
+{
+    384b:	53                   	push   %ebx
+    384c:	89 f3                	mov    %esi,%ebx
+    384e:	83 ec 1c             	sub    $0x1c,%esp
+    3851:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+    3854:	eb 33                	jmp    3889 <gets+0x49>
+    3856:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    385d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+    3860:	83 ec 04             	sub    $0x4,%esp
+    3863:	8d 45 e7             	lea    -0x19(%ebp),%eax
+    3866:	6a 01                	push   $0x1
+    3868:	50                   	push   %eax
+    3869:	6a 00                	push   $0x0
+    386b:	e8 2b 01 00 00       	call   399b <read>
+    if(cc < 1)
+    3870:	83 c4 10             	add    $0x10,%esp
+    3873:	85 c0                	test   %eax,%eax
+    3875:	7e 1c                	jle    3893 <gets+0x53>
+      break;
+    buf[i++] = c;
+    3877:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    387b:	83 c7 01             	add    $0x1,%edi
+    387e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+    3881:	3c 0a                	cmp    $0xa,%al
+    3883:	74 23                	je     38a8 <gets+0x68>
+    3885:	3c 0d                	cmp    $0xd,%al
+    3887:	74 1f                	je     38a8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+    3889:	83 c3 01             	add    $0x1,%ebx
+    388c:	89 fe                	mov    %edi,%esi
+    388e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    3891:	7c cd                	jl     3860 <gets+0x20>
+    3893:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+    3895:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+    3898:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    389b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    389e:	5b                   	pop    %ebx
+    389f:	5e                   	pop    %esi
+    38a0:	5f                   	pop    %edi
+    38a1:	5d                   	pop    %ebp
+    38a2:	c3                   	ret    
+    38a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    38a7:	90                   	nop
+    38a8:	8b 75 08             	mov    0x8(%ebp),%esi
+    38ab:	8b 45 08             	mov    0x8(%ebp),%eax
+    38ae:	01 de                	add    %ebx,%esi
+    38b0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+    38b2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+    38b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    38b8:	5b                   	pop    %ebx
+    38b9:	5e                   	pop    %esi
+    38ba:	5f                   	pop    %edi
+    38bb:	5d                   	pop    %ebp
+    38bc:	c3                   	ret    
+    38bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000038c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    38c0:	f3 0f 1e fb          	endbr32 
+    38c4:	55                   	push   %ebp
+    38c5:	89 e5                	mov    %esp,%ebp
+    38c7:	56                   	push   %esi
+    38c8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    38c9:	83 ec 08             	sub    $0x8,%esp
+    38cc:	6a 00                	push   $0x0
+    38ce:	ff 75 08             	pushl  0x8(%ebp)
+    38d1:	e8 ed 00 00 00       	call   39c3 <open>
+  if(fd < 0)
+    38d6:	83 c4 10             	add    $0x10,%esp
+    38d9:	85 c0                	test   %eax,%eax
+    38db:	78 2b                	js     3908 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+    38dd:	83 ec 08             	sub    $0x8,%esp
+    38e0:	ff 75 0c             	pushl  0xc(%ebp)
+    38e3:	89 c3                	mov    %eax,%ebx
+    38e5:	50                   	push   %eax
+    38e6:	e8 f0 00 00 00       	call   39db <fstat>
+  close(fd);
+    38eb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    38ee:	89 c6                	mov    %eax,%esi
+  close(fd);
+    38f0:	e8 b6 00 00 00       	call   39ab <close>
+  return r;
+    38f5:	83 c4 10             	add    $0x10,%esp
+}
+    38f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    38fb:	89 f0                	mov    %esi,%eax
+    38fd:	5b                   	pop    %ebx
+    38fe:	5e                   	pop    %esi
+    38ff:	5d                   	pop    %ebp
+    3900:	c3                   	ret    
+    3901:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+    3908:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    390d:	eb e9                	jmp    38f8 <stat+0x38>
+    390f:	90                   	nop
+
+00003910 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3910:	f3 0f 1e fb          	endbr32 
+    3914:	55                   	push   %ebp
+    3915:	89 e5                	mov    %esp,%ebp
+    3917:	53                   	push   %ebx
+    3918:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    391b:	0f be 02             	movsbl (%edx),%eax
+    391e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+    3921:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+    3924:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+    3929:	77 1a                	ja     3945 <atoi+0x35>
+    392b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    392f:	90                   	nop
+    n = n*10 + *s++ - '0';
+    3930:	83 c2 01             	add    $0x1,%edx
+    3933:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+    3936:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+    393a:	0f be 02             	movsbl (%edx),%eax
+    393d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+    3940:	80 fb 09             	cmp    $0x9,%bl
+    3943:	76 eb                	jbe    3930 <atoi+0x20>
+  return n;
+}
+    3945:	89 c8                	mov    %ecx,%eax
+    3947:	5b                   	pop    %ebx
+    3948:	5d                   	pop    %ebp
+    3949:	c3                   	ret    
+    394a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003950 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    3950:	f3 0f 1e fb          	endbr32 
+    3954:	55                   	push   %ebp
+    3955:	89 e5                	mov    %esp,%ebp
+    3957:	57                   	push   %edi
+    3958:	8b 45 10             	mov    0x10(%ebp),%eax
+    395b:	8b 55 08             	mov    0x8(%ebp),%edx
+    395e:	56                   	push   %esi
+    395f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    3962:	85 c0                	test   %eax,%eax
+    3964:	7e 0f                	jle    3975 <memmove+0x25>
+    3966:	01 d0                	add    %edx,%eax
+  dst = vdst;
+    3968:	89 d7                	mov    %edx,%edi
+    396a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+    3970:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+    3971:	39 f8                	cmp    %edi,%eax
+    3973:	75 fb                	jne    3970 <memmove+0x20>
+  return vdst;
+}
+    3975:	5e                   	pop    %esi
+    3976:	89 d0                	mov    %edx,%eax
+    3978:	5f                   	pop    %edi
+    3979:	5d                   	pop    %ebp
+    397a:	c3                   	ret    
+
+0000397b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    397b:	b8 01 00 00 00       	mov    $0x1,%eax
+    3980:	cd 40                	int    $0x40
+    3982:	c3                   	ret    
+
+00003983 <exit>:
+SYSCALL(exit)
+    3983:	b8 02 00 00 00       	mov    $0x2,%eax
+    3988:	cd 40                	int    $0x40
+    398a:	c3                   	ret    
+
+0000398b <wait>:
+SYSCALL(wait)
+    398b:	b8 03 00 00 00       	mov    $0x3,%eax
+    3990:	cd 40                	int    $0x40
+    3992:	c3                   	ret    
+
+00003993 <pipe>:
+SYSCALL(pipe)
+    3993:	b8 04 00 00 00       	mov    $0x4,%eax
+    3998:	cd 40                	int    $0x40
+    399a:	c3                   	ret    
+
+0000399b <read>:
+SYSCALL(read)
+    399b:	b8 05 00 00 00       	mov    $0x5,%eax
+    39a0:	cd 40                	int    $0x40
+    39a2:	c3                   	ret    
+
+000039a3 <write>:
+SYSCALL(write)
+    39a3:	b8 10 00 00 00       	mov    $0x10,%eax
+    39a8:	cd 40                	int    $0x40
+    39aa:	c3                   	ret    
+
+000039ab <close>:
+SYSCALL(close)
+    39ab:	b8 15 00 00 00       	mov    $0x15,%eax
+    39b0:	cd 40                	int    $0x40
+    39b2:	c3                   	ret    
+
+000039b3 <kill>:
+SYSCALL(kill)
+    39b3:	b8 06 00 00 00       	mov    $0x6,%eax
+    39b8:	cd 40                	int    $0x40
+    39ba:	c3                   	ret    
+
+000039bb <exec>:
+SYSCALL(exec)
+    39bb:	b8 07 00 00 00       	mov    $0x7,%eax
+    39c0:	cd 40                	int    $0x40
+    39c2:	c3                   	ret    
+
+000039c3 <open>:
+SYSCALL(open)
+    39c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+    39c8:	cd 40                	int    $0x40
+    39ca:	c3                   	ret    
+
+000039cb <mknod>:
+SYSCALL(mknod)
+    39cb:	b8 11 00 00 00       	mov    $0x11,%eax
+    39d0:	cd 40                	int    $0x40
+    39d2:	c3                   	ret    
+
+000039d3 <unlink>:
+SYSCALL(unlink)
+    39d3:	b8 12 00 00 00       	mov    $0x12,%eax
+    39d8:	cd 40                	int    $0x40
+    39da:	c3                   	ret    
+
+000039db <fstat>:
+SYSCALL(fstat)
+    39db:	b8 08 00 00 00       	mov    $0x8,%eax
+    39e0:	cd 40                	int    $0x40
+    39e2:	c3                   	ret    
+
+000039e3 <link>:
+SYSCALL(link)
+    39e3:	b8 13 00 00 00       	mov    $0x13,%eax
+    39e8:	cd 40                	int    $0x40
+    39ea:	c3                   	ret    
+
+000039eb <mkdir>:
+SYSCALL(mkdir)
+    39eb:	b8 14 00 00 00       	mov    $0x14,%eax
+    39f0:	cd 40                	int    $0x40
+    39f2:	c3                   	ret    
+
+000039f3 <chdir>:
+SYSCALL(chdir)
+    39f3:	b8 09 00 00 00       	mov    $0x9,%eax
+    39f8:	cd 40                	int    $0x40
+    39fa:	c3                   	ret    
+
+000039fb <dup>:
+SYSCALL(dup)
+    39fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3a00:	cd 40                	int    $0x40
+    3a02:	c3                   	ret    
+
+00003a03 <getpid>:
+SYSCALL(getpid)
+    3a03:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3a08:	cd 40                	int    $0x40
+    3a0a:	c3                   	ret    
+
+00003a0b <sbrk>:
+SYSCALL(sbrk)
+    3a0b:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3a10:	cd 40                	int    $0x40
+    3a12:	c3                   	ret    
+
+00003a13 <sleep>:
+SYSCALL(sleep)
+    3a13:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3a18:	cd 40                	int    $0x40
+    3a1a:	c3                   	ret    
+
+00003a1b <uptime>:
+SYSCALL(uptime)
+    3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3a20:	cd 40                	int    $0x40
+    3a22:	c3                   	ret    
+
+00003a23 <draw>:
+SYSCALL(draw)
+    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
+    3a28:	cd 40                	int    $0x40
+    3a2a:	c3                   	ret    
+
+00003a2b <history>:
+    3a2b:	b8 17 00 00 00       	mov    $0x17,%eax
+    3a30:	cd 40                	int    $0x40
+    3a32:	c3                   	ret    
+    3a33:	66 90                	xchg   %ax,%ax
+    3a35:	66 90                	xchg   %ax,%ax
+    3a37:	66 90                	xchg   %ax,%ax
+    3a39:	66 90                	xchg   %ax,%ax
+    3a3b:	66 90                	xchg   %ax,%ax
+    3a3d:	66 90                	xchg   %ax,%ax
+    3a3f:	90                   	nop
+
+00003a40 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    3a40:	55                   	push   %ebp
+    3a41:	89 e5                	mov    %esp,%ebp
+    3a43:	57                   	push   %edi
+    3a44:	56                   	push   %esi
+    3a45:	53                   	push   %ebx
+    3a46:	83 ec 3c             	sub    $0x3c,%esp
+    3a49:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+    3a4c:	89 d1                	mov    %edx,%ecx
+{
+    3a4e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+    3a51:	85 d2                	test   %edx,%edx
+    3a53:	0f 89 7f 00 00 00    	jns    3ad8 <printint+0x98>
+    3a59:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    3a5d:	74 79                	je     3ad8 <printint+0x98>
+    neg = 1;
+    3a5f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+    3a66:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    3a68:	31 db                	xor    %ebx,%ebx
+    3a6a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    3a6d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    3a70:	89 c8                	mov    %ecx,%eax
+    3a72:	31 d2                	xor    %edx,%edx
+    3a74:	89 cf                	mov    %ecx,%edi
+    3a76:	f7 75 c4             	divl   -0x3c(%ebp)
+    3a79:	0f b6 92 f8 55 00 00 	movzbl 0x55f8(%edx),%edx
+    3a80:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    3a83:	89 d8                	mov    %ebx,%eax
+    3a85:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+    3a88:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+    3a8b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+    3a8e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    3a91:	76 dd                	jbe    3a70 <printint+0x30>
+  if(neg)
+    3a93:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    3a96:	85 c9                	test   %ecx,%ecx
+    3a98:	74 0c                	je     3aa6 <printint+0x66>
+    buf[i++] = '-';
+    3a9a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+    3a9f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+    3aa1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+    3aa6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    3aa9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    3aad:	eb 07                	jmp    3ab6 <printint+0x76>
+    3aaf:	90                   	nop
+    3ab0:	0f b6 13             	movzbl (%ebx),%edx
+    3ab3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+    3ab6:	83 ec 04             	sub    $0x4,%esp
+    3ab9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3abc:	6a 01                	push   $0x1
+    3abe:	56                   	push   %esi
+    3abf:	57                   	push   %edi
+    3ac0:	e8 de fe ff ff       	call   39a3 <write>
+  while(--i >= 0)
+    3ac5:	83 c4 10             	add    $0x10,%esp
+    3ac8:	39 de                	cmp    %ebx,%esi
+    3aca:	75 e4                	jne    3ab0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+    3acc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3acf:	5b                   	pop    %ebx
+    3ad0:	5e                   	pop    %esi
+    3ad1:	5f                   	pop    %edi
+    3ad2:	5d                   	pop    %ebp
+    3ad3:	c3                   	ret    
+    3ad4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3ad8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3adf:	eb 87                	jmp    3a68 <printint+0x28>
+    3ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3ae8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3aef:	90                   	nop
+
+00003af0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3af0:	f3 0f 1e fb          	endbr32 
+    3af4:	55                   	push   %ebp
+    3af5:	89 e5                	mov    %esp,%ebp
+    3af7:	57                   	push   %edi
+    3af8:	56                   	push   %esi
+    3af9:	53                   	push   %ebx
+    3afa:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3afd:	8b 75 0c             	mov    0xc(%ebp),%esi
+    3b00:	0f b6 1e             	movzbl (%esi),%ebx
+    3b03:	84 db                	test   %bl,%bl
+    3b05:	0f 84 b4 00 00 00    	je     3bbf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+    3b0b:	8d 45 10             	lea    0x10(%ebp),%eax
+    3b0e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+    3b11:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    3b14:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+    3b16:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3b19:	eb 33                	jmp    3b4e <printf+0x5e>
+    3b1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3b1f:	90                   	nop
+    3b20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    3b23:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+    3b28:	83 f8 25             	cmp    $0x25,%eax
+    3b2b:	74 17                	je     3b44 <printf+0x54>
+  write(fd, &c, 1);
+    3b2d:	83 ec 04             	sub    $0x4,%esp
+    3b30:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    3b33:	6a 01                	push   $0x1
+    3b35:	57                   	push   %edi
+    3b36:	ff 75 08             	pushl  0x8(%ebp)
+    3b39:	e8 65 fe ff ff       	call   39a3 <write>
+    3b3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+    3b41:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3b44:	0f b6 1e             	movzbl (%esi),%ebx
+    3b47:	83 c6 01             	add    $0x1,%esi
+    3b4a:	84 db                	test   %bl,%bl
+    3b4c:	74 71                	je     3bbf <printf+0xcf>
+    c = fmt[i] & 0xff;
+    3b4e:	0f be cb             	movsbl %bl,%ecx
+    3b51:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+    3b54:	85 d2                	test   %edx,%edx
+    3b56:	74 c8                	je     3b20 <printf+0x30>
+      }
+    } else if(state == '%'){
+    3b58:	83 fa 25             	cmp    $0x25,%edx
+    3b5b:	75 e7                	jne    3b44 <printf+0x54>
+      if(c == 'd'){
+    3b5d:	83 f8 64             	cmp    $0x64,%eax
+    3b60:	0f 84 9a 00 00 00    	je     3c00 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+    3b66:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+    3b6c:	83 f9 70             	cmp    $0x70,%ecx
+    3b6f:	74 5f                	je     3bd0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+    3b71:	83 f8 73             	cmp    $0x73,%eax
+    3b74:	0f 84 d6 00 00 00    	je     3c50 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+    3b7a:	83 f8 63             	cmp    $0x63,%eax
+    3b7d:	0f 84 8d 00 00 00    	je     3c10 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+    3b83:	83 f8 25             	cmp    $0x25,%eax
+    3b86:	0f 84 b4 00 00 00    	je     3c40 <printf+0x150>
+  write(fd, &c, 1);
+    3b8c:	83 ec 04             	sub    $0x4,%esp
+    3b8f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3b93:	6a 01                	push   $0x1
+    3b95:	57                   	push   %edi
+    3b96:	ff 75 08             	pushl  0x8(%ebp)
+    3b99:	e8 05 fe ff ff       	call   39a3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+    3b9e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3ba1:	83 c4 0c             	add    $0xc,%esp
+    3ba4:	6a 01                	push   $0x1
+    3ba6:	83 c6 01             	add    $0x1,%esi
+    3ba9:	57                   	push   %edi
+    3baa:	ff 75 08             	pushl  0x8(%ebp)
+    3bad:	e8 f1 fd ff ff       	call   39a3 <write>
+  for(i = 0; fmt[i]; i++){
+    3bb2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+    3bb6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+    3bb9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+    3bbb:	84 db                	test   %bl,%bl
+    3bbd:	75 8f                	jne    3b4e <printf+0x5e>
+    }
+  }
+}
+    3bbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3bc2:	5b                   	pop    %ebx
+    3bc3:	5e                   	pop    %esi
+    3bc4:	5f                   	pop    %edi
+    3bc5:	5d                   	pop    %ebp
+    3bc6:	c3                   	ret    
+    3bc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3bce:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+    3bd0:	83 ec 0c             	sub    $0xc,%esp
+    3bd3:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3bd8:	6a 00                	push   $0x0
+    3bda:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    3bdd:	8b 45 08             	mov    0x8(%ebp),%eax
+    3be0:	8b 13                	mov    (%ebx),%edx
+    3be2:	e8 59 fe ff ff       	call   3a40 <printint>
+        ap++;
+    3be7:	89 d8                	mov    %ebx,%eax
+    3be9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3bec:	31 d2                	xor    %edx,%edx
+        ap++;
+    3bee:	83 c0 04             	add    $0x4,%eax
+    3bf1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3bf4:	e9 4b ff ff ff       	jmp    3b44 <printf+0x54>
+    3bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+    3c00:	83 ec 0c             	sub    $0xc,%esp
+    3c03:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3c08:	6a 01                	push   $0x1
+    3c0a:	eb ce                	jmp    3bda <printf+0xea>
+    3c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+    3c10:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+    3c13:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3c16:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+    3c18:	6a 01                	push   $0x1
+        ap++;
+    3c1a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+    3c1d:	57                   	push   %edi
+    3c1e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+    3c21:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c24:	e8 7a fd ff ff       	call   39a3 <write>
+        ap++;
+    3c29:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    3c2c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3c2f:	31 d2                	xor    %edx,%edx
+    3c31:	e9 0e ff ff ff       	jmp    3b44 <printf+0x54>
+    3c36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c3d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+    3c40:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c43:	83 ec 04             	sub    $0x4,%esp
+    3c46:	e9 59 ff ff ff       	jmp    3ba4 <printf+0xb4>
+    3c4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3c4f:	90                   	nop
+        s = (char*)*ap;
+    3c50:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3c53:	8b 18                	mov    (%eax),%ebx
+        ap++;
+    3c55:	83 c0 04             	add    $0x4,%eax
+    3c58:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    3c5b:	85 db                	test   %ebx,%ebx
+    3c5d:	74 17                	je     3c76 <printf+0x186>
+        while(*s != 0){
+    3c5f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+    3c62:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+    3c64:	84 c0                	test   %al,%al
+    3c66:	0f 84 d8 fe ff ff    	je     3b44 <printf+0x54>
+    3c6c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c6f:	89 de                	mov    %ebx,%esi
+    3c71:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c74:	eb 1a                	jmp    3c90 <printf+0x1a0>
+          s = "(null)";
+    3c76:	bb ee 55 00 00       	mov    $0x55ee,%ebx
+        while(*s != 0){
+    3c7b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    3c7e:	b8 28 00 00 00       	mov    $0x28,%eax
+    3c83:	89 de                	mov    %ebx,%esi
+    3c85:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3c88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c8f:	90                   	nop
+  write(fd, &c, 1);
+    3c90:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3c93:	83 c6 01             	add    $0x1,%esi
+    3c96:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3c99:	6a 01                	push   $0x1
+    3c9b:	57                   	push   %edi
+    3c9c:	53                   	push   %ebx
+    3c9d:	e8 01 fd ff ff       	call   39a3 <write>
+        while(*s != 0){
+    3ca2:	0f b6 06             	movzbl (%esi),%eax
+    3ca5:	83 c4 10             	add    $0x10,%esp
+    3ca8:	84 c0                	test   %al,%al
+    3caa:	75 e4                	jne    3c90 <printf+0x1a0>
+    3cac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+    3caf:	31 d2                	xor    %edx,%edx
+    3cb1:	e9 8e fe ff ff       	jmp    3b44 <printf+0x54>
+    3cb6:	66 90                	xchg   %ax,%ax
+    3cb8:	66 90                	xchg   %ax,%ax
+    3cba:	66 90                	xchg   %ax,%ax
+    3cbc:	66 90                	xchg   %ax,%ax
+    3cbe:	66 90                	xchg   %ax,%ax
+
+00003cc0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3cc0:	f3 0f 1e fb          	endbr32 
+    3cc4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cc5:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
+{
+    3cca:	89 e5                	mov    %esp,%ebp
+    3ccc:	57                   	push   %edi
+    3ccd:	56                   	push   %esi
+    3cce:	53                   	push   %ebx
+    3ccf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    3cd2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+    3cd4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cd7:	39 c8                	cmp    %ecx,%eax
+    3cd9:	73 15                	jae    3cf0 <free+0x30>
+    3cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3cdf:	90                   	nop
+    3ce0:	39 d1                	cmp    %edx,%ecx
+    3ce2:	72 14                	jb     3cf8 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3ce4:	39 d0                	cmp    %edx,%eax
+    3ce6:	73 10                	jae    3cf8 <free+0x38>
+{
+    3ce8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3cea:	8b 10                	mov    (%eax),%edx
+    3cec:	39 c8                	cmp    %ecx,%eax
+    3cee:	72 f0                	jb     3ce0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3cf0:	39 d0                	cmp    %edx,%eax
+    3cf2:	72 f4                	jb     3ce8 <free+0x28>
+    3cf4:	39 d1                	cmp    %edx,%ecx
+    3cf6:	73 f0                	jae    3ce8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3cf8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3cfb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3cfe:	39 fa                	cmp    %edi,%edx
+    3d00:	74 1e                	je     3d20 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+    3d02:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d05:	8b 50 04             	mov    0x4(%eax),%edx
+    3d08:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d0b:	39 f1                	cmp    %esi,%ecx
+    3d0d:	74 28                	je     3d37 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+    3d0f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+    3d11:	5b                   	pop    %ebx
+  freep = p;
+    3d12:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+}
+    3d17:	5e                   	pop    %esi
+    3d18:	5f                   	pop    %edi
+    3d19:	5d                   	pop    %ebp
+    3d1a:	c3                   	ret    
+    3d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3d1f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+    3d20:	03 72 04             	add    0x4(%edx),%esi
+    3d23:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3d26:	8b 10                	mov    (%eax),%edx
+    3d28:	8b 12                	mov    (%edx),%edx
+    3d2a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3d2d:	8b 50 04             	mov    0x4(%eax),%edx
+    3d30:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    3d33:	39 f1                	cmp    %esi,%ecx
+    3d35:	75 d8                	jne    3d0f <free+0x4f>
+    p->s.size += bp->s.size;
+    3d37:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+    3d3a:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+    p->s.size += bp->s.size;
+    3d3f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+    3d42:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    3d45:	89 10                	mov    %edx,(%eax)
+}
+    3d47:	5b                   	pop    %ebx
+    3d48:	5e                   	pop    %esi
+    3d49:	5f                   	pop    %edi
+    3d4a:	5d                   	pop    %ebp
+    3d4b:	c3                   	ret    
+    3d4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00003d50 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3d50:	f3 0f 1e fb          	endbr32 
+    3d54:	55                   	push   %ebp
+    3d55:	89 e5                	mov    %esp,%ebp
+    3d57:	57                   	push   %edi
+    3d58:	56                   	push   %esi
+    3d59:	53                   	push   %ebx
+    3d5a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d5d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3d60:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3d66:	8d 70 07             	lea    0x7(%eax),%esi
+    3d69:	c1 ee 03             	shr    $0x3,%esi
+    3d6c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    3d6f:	85 ff                	test   %edi,%edi
+    3d71:	0f 84 a9 00 00 00    	je     3e20 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3d77:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+    3d79:	8b 48 04             	mov    0x4(%eax),%ecx
+    3d7c:	39 f1                	cmp    %esi,%ecx
+    3d7e:	73 6d                	jae    3ded <malloc+0x9d>
+    3d80:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    3d86:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3d8b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3d8e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    3d95:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    3d98:	eb 17                	jmp    3db1 <malloc+0x61>
+    3d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3da0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+    3da2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3da5:	39 f1                	cmp    %esi,%ecx
+    3da7:	73 4f                	jae    3df8 <malloc+0xa8>
+    3da9:	8b 3d a0 5f 00 00    	mov    0x5fa0,%edi
+    3daf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3db1:	39 c7                	cmp    %eax,%edi
+    3db3:	75 eb                	jne    3da0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+    3db5:	83 ec 0c             	sub    $0xc,%esp
+    3db8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    3dbb:	e8 4b fc ff ff       	call   3a0b <sbrk>
+  if(p == (char*)-1)
+    3dc0:	83 c4 10             	add    $0x10,%esp
+    3dc3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3dc6:	74 1b                	je     3de3 <malloc+0x93>
+  hp->s.size = nu;
+    3dc8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3dcb:	83 ec 0c             	sub    $0xc,%esp
+    3dce:	83 c0 08             	add    $0x8,%eax
+    3dd1:	50                   	push   %eax
+    3dd2:	e8 e9 fe ff ff       	call   3cc0 <free>
+  return freep;
+    3dd7:	a1 a0 5f 00 00       	mov    0x5fa0,%eax
+      if((p = morecore(nunits)) == 0)
+    3ddc:	83 c4 10             	add    $0x10,%esp
+    3ddf:	85 c0                	test   %eax,%eax
+    3de1:	75 bd                	jne    3da0 <malloc+0x50>
+        return 0;
+  }
+}
+    3de3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3de6:	31 c0                	xor    %eax,%eax
+}
+    3de8:	5b                   	pop    %ebx
+    3de9:	5e                   	pop    %esi
+    3dea:	5f                   	pop    %edi
+    3deb:	5d                   	pop    %ebp
+    3dec:	c3                   	ret    
+    if(p->s.size >= nunits){
+    3ded:	89 c2                	mov    %eax,%edx
+    3def:	89 f8                	mov    %edi,%eax
+    3df1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+    3df8:	39 ce                	cmp    %ecx,%esi
+    3dfa:	74 54                	je     3e50 <malloc+0x100>
+        p->s.size -= nunits;
+    3dfc:	29 f1                	sub    %esi,%ecx
+    3dfe:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+    3e01:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+    3e04:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+    3e07:	a3 a0 5f 00 00       	mov    %eax,0x5fa0
+}
+    3e0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3e0f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+    3e12:	5b                   	pop    %ebx
+    3e13:	5e                   	pop    %esi
+    3e14:	5f                   	pop    %edi
+    3e15:	5d                   	pop    %ebp
+    3e16:	c3                   	ret    
+    3e17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3e1e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+    3e20:	c7 05 a0 5f 00 00 a4 	movl   $0x5fa4,0x5fa0
+    3e27:	5f 00 00 
+    base.s.size = 0;
+    3e2a:	bf a4 5f 00 00       	mov    $0x5fa4,%edi
+    base.s.ptr = freep = prevp = &base;
+    3e2f:	c7 05 a4 5f 00 00 a4 	movl   $0x5fa4,0x5fa4
+    3e36:	5f 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3e39:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+    3e3b:	c7 05 a8 5f 00 00 00 	movl   $0x0,0x5fa8
+    3e42:	00 00 00 
+    if(p->s.size >= nunits){
+    3e45:	e9 36 ff ff ff       	jmp    3d80 <malloc+0x30>
+    3e4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    3e50:	8b 0a                	mov    (%edx),%ecx
+    3e52:	89 08                	mov    %ecx,(%eax)
+    3e54:	eb b1                	jmp    3e07 <malloc+0xb7>
diff -ruN xv6-public/usertests.d xv6-public_task_1/usertests.d
--- xv6-public/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/usertests.d	2021-09-15 20:34:59.452370000 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and xv6-public_task_1/usertests.o differ
diff -ruN xv6-public/usertests.sym xv6-public_task_1/usertests.sym
--- xv6-public/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/usertests.sym	2021-09-15 20:34:59.548370000 +0530
@@ -0,0 +1,105 @@
+00000000 .text
+00003e58 .rodata
+0000560c .eh_frame
+00005eec .data
+00005f20 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 usertests.c
+00005f20 args.1455
+00000000 ulib.c
+00000000 printf.c
+00003a40 printint
+000055f8 digits.1091
+00000000 umalloc.c
+00005fa0 freep
+00005fa4 base
+00003720 strcpy
+00000d60 exitwait
+00003af0 printf
+00005ef0 stdout
+00003330 bigargtest
+00003950 memmove
+00000310 openiputtest
+000039cb mknod
+00003840 gets
+00003a03 getpid
+00000a60 pipe1
+00002c00 iref
+00003d50 malloc
+00003a13 sleep
+00000210 exitiputtest
+00003430 fsfull
+00001c60 bigdir
+00002d20 forktest
+00000690 writetest1
+00002490 bigwrite
+00000eb0 sharedfd
+00005eec randstate
+00003993 pipe
+00005fc0 uninit
+00002a00 dirfile
+000039a3 write
+00003a2b history
+000032c0 bsstest
+00005ef4 echoargv
+000039db fstat
+000039b3 kill
+00003200 validatetest
+00002880 rmdot
+000039f3 chdir
+00000a10 exectest
+000039bb exec
+0000398b wait
+00003700 rand
+0000399b read
+00000c00 preempt
+000039d3 unlink
+00003690 argptest
+00000de0 mem
+0000397b fork
+00003a0b sbrk
+00003a1b uptime
+00005f08 __bss_start
+000037e0 memset
+00000860 createtest
+00000000 main
+00001270 createdelete
+00003750 strcmp
+000004b0 writetest
+000039fb dup
+00002dd0 sbrktest
+00000410 opentest
+00001da0 subdir
+00003610 uio
+00001630 linktest
+000086e0 buf
+00000920 dirtest
+00000120 iputtest
+000038c0 stat
+00002570 bigfile
+00005f08 _edata
+0000a6e4 _end
+000014a0 unlinkread
+000039e3 link
+00003983 exit
+00003910 atoi
+00001b50 linkunlink
+00003a23 draw
+0000a6e0 name
+000037a0 strlen
+000039c3 open
+00003800 strchr
+00001850 concreate
+00002740 fourteen
+000031f0 validateint
+00001070 fourfiles
+000039eb mkdir
+000039ab close
+00003cc0 free
Binary files xv6-public/usys.o and xv6-public_task_1/usys.o differ
diff -ruN xv6-public/usys.S xv6-public_task_1/usys.S
--- xv6-public/usys.S	2021-09-15 22:30:13.481050506 +0530
+++ xv6-public_task_1/usys.S	2021-09-10 23:47:37.918005000 +0530
@@ -29,3 +29,5 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(draw)
+SYSCALL(history)
\ No newline at end of file
Binary files xv6-public/vectors.o and xv6-public_task_1/vectors.o differ
diff -ruN xv6-public/vectors.S xv6-public_task_1/vectors.S
--- xv6-public/vectors.S	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/vectors.S	2021-09-15 20:34:55.912376000 +0530
@@ -0,0 +1,1537 @@
+# generated by vectors.pl - do not edit
+# handlers
+.globl alltraps
+.globl vector0
+vector0:
+  pushl $0
+  pushl $0
+  jmp alltraps
+.globl vector1
+vector1:
+  pushl $0
+  pushl $1
+  jmp alltraps
+.globl vector2
+vector2:
+  pushl $0
+  pushl $2
+  jmp alltraps
+.globl vector3
+vector3:
+  pushl $0
+  pushl $3
+  jmp alltraps
+.globl vector4
+vector4:
+  pushl $0
+  pushl $4
+  jmp alltraps
+.globl vector5
+vector5:
+  pushl $0
+  pushl $5
+  jmp alltraps
+.globl vector6
+vector6:
+  pushl $0
+  pushl $6
+  jmp alltraps
+.globl vector7
+vector7:
+  pushl $0
+  pushl $7
+  jmp alltraps
+.globl vector8
+vector8:
+  pushl $8
+  jmp alltraps
+.globl vector9
+vector9:
+  pushl $0
+  pushl $9
+  jmp alltraps
+.globl vector10
+vector10:
+  pushl $10
+  jmp alltraps
+.globl vector11
+vector11:
+  pushl $11
+  jmp alltraps
+.globl vector12
+vector12:
+  pushl $12
+  jmp alltraps
+.globl vector13
+vector13:
+  pushl $13
+  jmp alltraps
+.globl vector14
+vector14:
+  pushl $14
+  jmp alltraps
+.globl vector15
+vector15:
+  pushl $0
+  pushl $15
+  jmp alltraps
+.globl vector16
+vector16:
+  pushl $0
+  pushl $16
+  jmp alltraps
+.globl vector17
+vector17:
+  pushl $17
+  jmp alltraps
+.globl vector18
+vector18:
+  pushl $0
+  pushl $18
+  jmp alltraps
+.globl vector19
+vector19:
+  pushl $0
+  pushl $19
+  jmp alltraps
+.globl vector20
+vector20:
+  pushl $0
+  pushl $20
+  jmp alltraps
+.globl vector21
+vector21:
+  pushl $0
+  pushl $21
+  jmp alltraps
+.globl vector22
+vector22:
+  pushl $0
+  pushl $22
+  jmp alltraps
+.globl vector23
+vector23:
+  pushl $0
+  pushl $23
+  jmp alltraps
+.globl vector24
+vector24:
+  pushl $0
+  pushl $24
+  jmp alltraps
+.globl vector25
+vector25:
+  pushl $0
+  pushl $25
+  jmp alltraps
+.globl vector26
+vector26:
+  pushl $0
+  pushl $26
+  jmp alltraps
+.globl vector27
+vector27:
+  pushl $0
+  pushl $27
+  jmp alltraps
+.globl vector28
+vector28:
+  pushl $0
+  pushl $28
+  jmp alltraps
+.globl vector29
+vector29:
+  pushl $0
+  pushl $29
+  jmp alltraps
+.globl vector30
+vector30:
+  pushl $0
+  pushl $30
+  jmp alltraps
+.globl vector31
+vector31:
+  pushl $0
+  pushl $31
+  jmp alltraps
+.globl vector32
+vector32:
+  pushl $0
+  pushl $32
+  jmp alltraps
+.globl vector33
+vector33:
+  pushl $0
+  pushl $33
+  jmp alltraps
+.globl vector34
+vector34:
+  pushl $0
+  pushl $34
+  jmp alltraps
+.globl vector35
+vector35:
+  pushl $0
+  pushl $35
+  jmp alltraps
+.globl vector36
+vector36:
+  pushl $0
+  pushl $36
+  jmp alltraps
+.globl vector37
+vector37:
+  pushl $0
+  pushl $37
+  jmp alltraps
+.globl vector38
+vector38:
+  pushl $0
+  pushl $38
+  jmp alltraps
+.globl vector39
+vector39:
+  pushl $0
+  pushl $39
+  jmp alltraps
+.globl vector40
+vector40:
+  pushl $0
+  pushl $40
+  jmp alltraps
+.globl vector41
+vector41:
+  pushl $0
+  pushl $41
+  jmp alltraps
+.globl vector42
+vector42:
+  pushl $0
+  pushl $42
+  jmp alltraps
+.globl vector43
+vector43:
+  pushl $0
+  pushl $43
+  jmp alltraps
+.globl vector44
+vector44:
+  pushl $0
+  pushl $44
+  jmp alltraps
+.globl vector45
+vector45:
+  pushl $0
+  pushl $45
+  jmp alltraps
+.globl vector46
+vector46:
+  pushl $0
+  pushl $46
+  jmp alltraps
+.globl vector47
+vector47:
+  pushl $0
+  pushl $47
+  jmp alltraps
+.globl vector48
+vector48:
+  pushl $0
+  pushl $48
+  jmp alltraps
+.globl vector49
+vector49:
+  pushl $0
+  pushl $49
+  jmp alltraps
+.globl vector50
+vector50:
+  pushl $0
+  pushl $50
+  jmp alltraps
+.globl vector51
+vector51:
+  pushl $0
+  pushl $51
+  jmp alltraps
+.globl vector52
+vector52:
+  pushl $0
+  pushl $52
+  jmp alltraps
+.globl vector53
+vector53:
+  pushl $0
+  pushl $53
+  jmp alltraps
+.globl vector54
+vector54:
+  pushl $0
+  pushl $54
+  jmp alltraps
+.globl vector55
+vector55:
+  pushl $0
+  pushl $55
+  jmp alltraps
+.globl vector56
+vector56:
+  pushl $0
+  pushl $56
+  jmp alltraps
+.globl vector57
+vector57:
+  pushl $0
+  pushl $57
+  jmp alltraps
+.globl vector58
+vector58:
+  pushl $0
+  pushl $58
+  jmp alltraps
+.globl vector59
+vector59:
+  pushl $0
+  pushl $59
+  jmp alltraps
+.globl vector60
+vector60:
+  pushl $0
+  pushl $60
+  jmp alltraps
+.globl vector61
+vector61:
+  pushl $0
+  pushl $61
+  jmp alltraps
+.globl vector62
+vector62:
+  pushl $0
+  pushl $62
+  jmp alltraps
+.globl vector63
+vector63:
+  pushl $0
+  pushl $63
+  jmp alltraps
+.globl vector64
+vector64:
+  pushl $0
+  pushl $64
+  jmp alltraps
+.globl vector65
+vector65:
+  pushl $0
+  pushl $65
+  jmp alltraps
+.globl vector66
+vector66:
+  pushl $0
+  pushl $66
+  jmp alltraps
+.globl vector67
+vector67:
+  pushl $0
+  pushl $67
+  jmp alltraps
+.globl vector68
+vector68:
+  pushl $0
+  pushl $68
+  jmp alltraps
+.globl vector69
+vector69:
+  pushl $0
+  pushl $69
+  jmp alltraps
+.globl vector70
+vector70:
+  pushl $0
+  pushl $70
+  jmp alltraps
+.globl vector71
+vector71:
+  pushl $0
+  pushl $71
+  jmp alltraps
+.globl vector72
+vector72:
+  pushl $0
+  pushl $72
+  jmp alltraps
+.globl vector73
+vector73:
+  pushl $0
+  pushl $73
+  jmp alltraps
+.globl vector74
+vector74:
+  pushl $0
+  pushl $74
+  jmp alltraps
+.globl vector75
+vector75:
+  pushl $0
+  pushl $75
+  jmp alltraps
+.globl vector76
+vector76:
+  pushl $0
+  pushl $76
+  jmp alltraps
+.globl vector77
+vector77:
+  pushl $0
+  pushl $77
+  jmp alltraps
+.globl vector78
+vector78:
+  pushl $0
+  pushl $78
+  jmp alltraps
+.globl vector79
+vector79:
+  pushl $0
+  pushl $79
+  jmp alltraps
+.globl vector80
+vector80:
+  pushl $0
+  pushl $80
+  jmp alltraps
+.globl vector81
+vector81:
+  pushl $0
+  pushl $81
+  jmp alltraps
+.globl vector82
+vector82:
+  pushl $0
+  pushl $82
+  jmp alltraps
+.globl vector83
+vector83:
+  pushl $0
+  pushl $83
+  jmp alltraps
+.globl vector84
+vector84:
+  pushl $0
+  pushl $84
+  jmp alltraps
+.globl vector85
+vector85:
+  pushl $0
+  pushl $85
+  jmp alltraps
+.globl vector86
+vector86:
+  pushl $0
+  pushl $86
+  jmp alltraps
+.globl vector87
+vector87:
+  pushl $0
+  pushl $87
+  jmp alltraps
+.globl vector88
+vector88:
+  pushl $0
+  pushl $88
+  jmp alltraps
+.globl vector89
+vector89:
+  pushl $0
+  pushl $89
+  jmp alltraps
+.globl vector90
+vector90:
+  pushl $0
+  pushl $90
+  jmp alltraps
+.globl vector91
+vector91:
+  pushl $0
+  pushl $91
+  jmp alltraps
+.globl vector92
+vector92:
+  pushl $0
+  pushl $92
+  jmp alltraps
+.globl vector93
+vector93:
+  pushl $0
+  pushl $93
+  jmp alltraps
+.globl vector94
+vector94:
+  pushl $0
+  pushl $94
+  jmp alltraps
+.globl vector95
+vector95:
+  pushl $0
+  pushl $95
+  jmp alltraps
+.globl vector96
+vector96:
+  pushl $0
+  pushl $96
+  jmp alltraps
+.globl vector97
+vector97:
+  pushl $0
+  pushl $97
+  jmp alltraps
+.globl vector98
+vector98:
+  pushl $0
+  pushl $98
+  jmp alltraps
+.globl vector99
+vector99:
+  pushl $0
+  pushl $99
+  jmp alltraps
+.globl vector100
+vector100:
+  pushl $0
+  pushl $100
+  jmp alltraps
+.globl vector101
+vector101:
+  pushl $0
+  pushl $101
+  jmp alltraps
+.globl vector102
+vector102:
+  pushl $0
+  pushl $102
+  jmp alltraps
+.globl vector103
+vector103:
+  pushl $0
+  pushl $103
+  jmp alltraps
+.globl vector104
+vector104:
+  pushl $0
+  pushl $104
+  jmp alltraps
+.globl vector105
+vector105:
+  pushl $0
+  pushl $105
+  jmp alltraps
+.globl vector106
+vector106:
+  pushl $0
+  pushl $106
+  jmp alltraps
+.globl vector107
+vector107:
+  pushl $0
+  pushl $107
+  jmp alltraps
+.globl vector108
+vector108:
+  pushl $0
+  pushl $108
+  jmp alltraps
+.globl vector109
+vector109:
+  pushl $0
+  pushl $109
+  jmp alltraps
+.globl vector110
+vector110:
+  pushl $0
+  pushl $110
+  jmp alltraps
+.globl vector111
+vector111:
+  pushl $0
+  pushl $111
+  jmp alltraps
+.globl vector112
+vector112:
+  pushl $0
+  pushl $112
+  jmp alltraps
+.globl vector113
+vector113:
+  pushl $0
+  pushl $113
+  jmp alltraps
+.globl vector114
+vector114:
+  pushl $0
+  pushl $114
+  jmp alltraps
+.globl vector115
+vector115:
+  pushl $0
+  pushl $115
+  jmp alltraps
+.globl vector116
+vector116:
+  pushl $0
+  pushl $116
+  jmp alltraps
+.globl vector117
+vector117:
+  pushl $0
+  pushl $117
+  jmp alltraps
+.globl vector118
+vector118:
+  pushl $0
+  pushl $118
+  jmp alltraps
+.globl vector119
+vector119:
+  pushl $0
+  pushl $119
+  jmp alltraps
+.globl vector120
+vector120:
+  pushl $0
+  pushl $120
+  jmp alltraps
+.globl vector121
+vector121:
+  pushl $0
+  pushl $121
+  jmp alltraps
+.globl vector122
+vector122:
+  pushl $0
+  pushl $122
+  jmp alltraps
+.globl vector123
+vector123:
+  pushl $0
+  pushl $123
+  jmp alltraps
+.globl vector124
+vector124:
+  pushl $0
+  pushl $124
+  jmp alltraps
+.globl vector125
+vector125:
+  pushl $0
+  pushl $125
+  jmp alltraps
+.globl vector126
+vector126:
+  pushl $0
+  pushl $126
+  jmp alltraps
+.globl vector127
+vector127:
+  pushl $0
+  pushl $127
+  jmp alltraps
+.globl vector128
+vector128:
+  pushl $0
+  pushl $128
+  jmp alltraps
+.globl vector129
+vector129:
+  pushl $0
+  pushl $129
+  jmp alltraps
+.globl vector130
+vector130:
+  pushl $0
+  pushl $130
+  jmp alltraps
+.globl vector131
+vector131:
+  pushl $0
+  pushl $131
+  jmp alltraps
+.globl vector132
+vector132:
+  pushl $0
+  pushl $132
+  jmp alltraps
+.globl vector133
+vector133:
+  pushl $0
+  pushl $133
+  jmp alltraps
+.globl vector134
+vector134:
+  pushl $0
+  pushl $134
+  jmp alltraps
+.globl vector135
+vector135:
+  pushl $0
+  pushl $135
+  jmp alltraps
+.globl vector136
+vector136:
+  pushl $0
+  pushl $136
+  jmp alltraps
+.globl vector137
+vector137:
+  pushl $0
+  pushl $137
+  jmp alltraps
+.globl vector138
+vector138:
+  pushl $0
+  pushl $138
+  jmp alltraps
+.globl vector139
+vector139:
+  pushl $0
+  pushl $139
+  jmp alltraps
+.globl vector140
+vector140:
+  pushl $0
+  pushl $140
+  jmp alltraps
+.globl vector141
+vector141:
+  pushl $0
+  pushl $141
+  jmp alltraps
+.globl vector142
+vector142:
+  pushl $0
+  pushl $142
+  jmp alltraps
+.globl vector143
+vector143:
+  pushl $0
+  pushl $143
+  jmp alltraps
+.globl vector144
+vector144:
+  pushl $0
+  pushl $144
+  jmp alltraps
+.globl vector145
+vector145:
+  pushl $0
+  pushl $145
+  jmp alltraps
+.globl vector146
+vector146:
+  pushl $0
+  pushl $146
+  jmp alltraps
+.globl vector147
+vector147:
+  pushl $0
+  pushl $147
+  jmp alltraps
+.globl vector148
+vector148:
+  pushl $0
+  pushl $148
+  jmp alltraps
+.globl vector149
+vector149:
+  pushl $0
+  pushl $149
+  jmp alltraps
+.globl vector150
+vector150:
+  pushl $0
+  pushl $150
+  jmp alltraps
+.globl vector151
+vector151:
+  pushl $0
+  pushl $151
+  jmp alltraps
+.globl vector152
+vector152:
+  pushl $0
+  pushl $152
+  jmp alltraps
+.globl vector153
+vector153:
+  pushl $0
+  pushl $153
+  jmp alltraps
+.globl vector154
+vector154:
+  pushl $0
+  pushl $154
+  jmp alltraps
+.globl vector155
+vector155:
+  pushl $0
+  pushl $155
+  jmp alltraps
+.globl vector156
+vector156:
+  pushl $0
+  pushl $156
+  jmp alltraps
+.globl vector157
+vector157:
+  pushl $0
+  pushl $157
+  jmp alltraps
+.globl vector158
+vector158:
+  pushl $0
+  pushl $158
+  jmp alltraps
+.globl vector159
+vector159:
+  pushl $0
+  pushl $159
+  jmp alltraps
+.globl vector160
+vector160:
+  pushl $0
+  pushl $160
+  jmp alltraps
+.globl vector161
+vector161:
+  pushl $0
+  pushl $161
+  jmp alltraps
+.globl vector162
+vector162:
+  pushl $0
+  pushl $162
+  jmp alltraps
+.globl vector163
+vector163:
+  pushl $0
+  pushl $163
+  jmp alltraps
+.globl vector164
+vector164:
+  pushl $0
+  pushl $164
+  jmp alltraps
+.globl vector165
+vector165:
+  pushl $0
+  pushl $165
+  jmp alltraps
+.globl vector166
+vector166:
+  pushl $0
+  pushl $166
+  jmp alltraps
+.globl vector167
+vector167:
+  pushl $0
+  pushl $167
+  jmp alltraps
+.globl vector168
+vector168:
+  pushl $0
+  pushl $168
+  jmp alltraps
+.globl vector169
+vector169:
+  pushl $0
+  pushl $169
+  jmp alltraps
+.globl vector170
+vector170:
+  pushl $0
+  pushl $170
+  jmp alltraps
+.globl vector171
+vector171:
+  pushl $0
+  pushl $171
+  jmp alltraps
+.globl vector172
+vector172:
+  pushl $0
+  pushl $172
+  jmp alltraps
+.globl vector173
+vector173:
+  pushl $0
+  pushl $173
+  jmp alltraps
+.globl vector174
+vector174:
+  pushl $0
+  pushl $174
+  jmp alltraps
+.globl vector175
+vector175:
+  pushl $0
+  pushl $175
+  jmp alltraps
+.globl vector176
+vector176:
+  pushl $0
+  pushl $176
+  jmp alltraps
+.globl vector177
+vector177:
+  pushl $0
+  pushl $177
+  jmp alltraps
+.globl vector178
+vector178:
+  pushl $0
+  pushl $178
+  jmp alltraps
+.globl vector179
+vector179:
+  pushl $0
+  pushl $179
+  jmp alltraps
+.globl vector180
+vector180:
+  pushl $0
+  pushl $180
+  jmp alltraps
+.globl vector181
+vector181:
+  pushl $0
+  pushl $181
+  jmp alltraps
+.globl vector182
+vector182:
+  pushl $0
+  pushl $182
+  jmp alltraps
+.globl vector183
+vector183:
+  pushl $0
+  pushl $183
+  jmp alltraps
+.globl vector184
+vector184:
+  pushl $0
+  pushl $184
+  jmp alltraps
+.globl vector185
+vector185:
+  pushl $0
+  pushl $185
+  jmp alltraps
+.globl vector186
+vector186:
+  pushl $0
+  pushl $186
+  jmp alltraps
+.globl vector187
+vector187:
+  pushl $0
+  pushl $187
+  jmp alltraps
+.globl vector188
+vector188:
+  pushl $0
+  pushl $188
+  jmp alltraps
+.globl vector189
+vector189:
+  pushl $0
+  pushl $189
+  jmp alltraps
+.globl vector190
+vector190:
+  pushl $0
+  pushl $190
+  jmp alltraps
+.globl vector191
+vector191:
+  pushl $0
+  pushl $191
+  jmp alltraps
+.globl vector192
+vector192:
+  pushl $0
+  pushl $192
+  jmp alltraps
+.globl vector193
+vector193:
+  pushl $0
+  pushl $193
+  jmp alltraps
+.globl vector194
+vector194:
+  pushl $0
+  pushl $194
+  jmp alltraps
+.globl vector195
+vector195:
+  pushl $0
+  pushl $195
+  jmp alltraps
+.globl vector196
+vector196:
+  pushl $0
+  pushl $196
+  jmp alltraps
+.globl vector197
+vector197:
+  pushl $0
+  pushl $197
+  jmp alltraps
+.globl vector198
+vector198:
+  pushl $0
+  pushl $198
+  jmp alltraps
+.globl vector199
+vector199:
+  pushl $0
+  pushl $199
+  jmp alltraps
+.globl vector200
+vector200:
+  pushl $0
+  pushl $200
+  jmp alltraps
+.globl vector201
+vector201:
+  pushl $0
+  pushl $201
+  jmp alltraps
+.globl vector202
+vector202:
+  pushl $0
+  pushl $202
+  jmp alltraps
+.globl vector203
+vector203:
+  pushl $0
+  pushl $203
+  jmp alltraps
+.globl vector204
+vector204:
+  pushl $0
+  pushl $204
+  jmp alltraps
+.globl vector205
+vector205:
+  pushl $0
+  pushl $205
+  jmp alltraps
+.globl vector206
+vector206:
+  pushl $0
+  pushl $206
+  jmp alltraps
+.globl vector207
+vector207:
+  pushl $0
+  pushl $207
+  jmp alltraps
+.globl vector208
+vector208:
+  pushl $0
+  pushl $208
+  jmp alltraps
+.globl vector209
+vector209:
+  pushl $0
+  pushl $209
+  jmp alltraps
+.globl vector210
+vector210:
+  pushl $0
+  pushl $210
+  jmp alltraps
+.globl vector211
+vector211:
+  pushl $0
+  pushl $211
+  jmp alltraps
+.globl vector212
+vector212:
+  pushl $0
+  pushl $212
+  jmp alltraps
+.globl vector213
+vector213:
+  pushl $0
+  pushl $213
+  jmp alltraps
+.globl vector214
+vector214:
+  pushl $0
+  pushl $214
+  jmp alltraps
+.globl vector215
+vector215:
+  pushl $0
+  pushl $215
+  jmp alltraps
+.globl vector216
+vector216:
+  pushl $0
+  pushl $216
+  jmp alltraps
+.globl vector217
+vector217:
+  pushl $0
+  pushl $217
+  jmp alltraps
+.globl vector218
+vector218:
+  pushl $0
+  pushl $218
+  jmp alltraps
+.globl vector219
+vector219:
+  pushl $0
+  pushl $219
+  jmp alltraps
+.globl vector220
+vector220:
+  pushl $0
+  pushl $220
+  jmp alltraps
+.globl vector221
+vector221:
+  pushl $0
+  pushl $221
+  jmp alltraps
+.globl vector222
+vector222:
+  pushl $0
+  pushl $222
+  jmp alltraps
+.globl vector223
+vector223:
+  pushl $0
+  pushl $223
+  jmp alltraps
+.globl vector224
+vector224:
+  pushl $0
+  pushl $224
+  jmp alltraps
+.globl vector225
+vector225:
+  pushl $0
+  pushl $225
+  jmp alltraps
+.globl vector226
+vector226:
+  pushl $0
+  pushl $226
+  jmp alltraps
+.globl vector227
+vector227:
+  pushl $0
+  pushl $227
+  jmp alltraps
+.globl vector228
+vector228:
+  pushl $0
+  pushl $228
+  jmp alltraps
+.globl vector229
+vector229:
+  pushl $0
+  pushl $229
+  jmp alltraps
+.globl vector230
+vector230:
+  pushl $0
+  pushl $230
+  jmp alltraps
+.globl vector231
+vector231:
+  pushl $0
+  pushl $231
+  jmp alltraps
+.globl vector232
+vector232:
+  pushl $0
+  pushl $232
+  jmp alltraps
+.globl vector233
+vector233:
+  pushl $0
+  pushl $233
+  jmp alltraps
+.globl vector234
+vector234:
+  pushl $0
+  pushl $234
+  jmp alltraps
+.globl vector235
+vector235:
+  pushl $0
+  pushl $235
+  jmp alltraps
+.globl vector236
+vector236:
+  pushl $0
+  pushl $236
+  jmp alltraps
+.globl vector237
+vector237:
+  pushl $0
+  pushl $237
+  jmp alltraps
+.globl vector238
+vector238:
+  pushl $0
+  pushl $238
+  jmp alltraps
+.globl vector239
+vector239:
+  pushl $0
+  pushl $239
+  jmp alltraps
+.globl vector240
+vector240:
+  pushl $0
+  pushl $240
+  jmp alltraps
+.globl vector241
+vector241:
+  pushl $0
+  pushl $241
+  jmp alltraps
+.globl vector242
+vector242:
+  pushl $0
+  pushl $242
+  jmp alltraps
+.globl vector243
+vector243:
+  pushl $0
+  pushl $243
+  jmp alltraps
+.globl vector244
+vector244:
+  pushl $0
+  pushl $244
+  jmp alltraps
+.globl vector245
+vector245:
+  pushl $0
+  pushl $245
+  jmp alltraps
+.globl vector246
+vector246:
+  pushl $0
+  pushl $246
+  jmp alltraps
+.globl vector247
+vector247:
+  pushl $0
+  pushl $247
+  jmp alltraps
+.globl vector248
+vector248:
+  pushl $0
+  pushl $248
+  jmp alltraps
+.globl vector249
+vector249:
+  pushl $0
+  pushl $249
+  jmp alltraps
+.globl vector250
+vector250:
+  pushl $0
+  pushl $250
+  jmp alltraps
+.globl vector251
+vector251:
+  pushl $0
+  pushl $251
+  jmp alltraps
+.globl vector252
+vector252:
+  pushl $0
+  pushl $252
+  jmp alltraps
+.globl vector253
+vector253:
+  pushl $0
+  pushl $253
+  jmp alltraps
+.globl vector254
+vector254:
+  pushl $0
+  pushl $254
+  jmp alltraps
+.globl vector255
+vector255:
+  pushl $0
+  pushl $255
+  jmp alltraps
+
+# vector table
+.data
+.globl vectors
+vectors:
+  .long vector0
+  .long vector1
+  .long vector2
+  .long vector3
+  .long vector4
+  .long vector5
+  .long vector6
+  .long vector7
+  .long vector8
+  .long vector9
+  .long vector10
+  .long vector11
+  .long vector12
+  .long vector13
+  .long vector14
+  .long vector15
+  .long vector16
+  .long vector17
+  .long vector18
+  .long vector19
+  .long vector20
+  .long vector21
+  .long vector22
+  .long vector23
+  .long vector24
+  .long vector25
+  .long vector26
+  .long vector27
+  .long vector28
+  .long vector29
+  .long vector30
+  .long vector31
+  .long vector32
+  .long vector33
+  .long vector34
+  .long vector35
+  .long vector36
+  .long vector37
+  .long vector38
+  .long vector39
+  .long vector40
+  .long vector41
+  .long vector42
+  .long vector43
+  .long vector44
+  .long vector45
+  .long vector46
+  .long vector47
+  .long vector48
+  .long vector49
+  .long vector50
+  .long vector51
+  .long vector52
+  .long vector53
+  .long vector54
+  .long vector55
+  .long vector56
+  .long vector57
+  .long vector58
+  .long vector59
+  .long vector60
+  .long vector61
+  .long vector62
+  .long vector63
+  .long vector64
+  .long vector65
+  .long vector66
+  .long vector67
+  .long vector68
+  .long vector69
+  .long vector70
+  .long vector71
+  .long vector72
+  .long vector73
+  .long vector74
+  .long vector75
+  .long vector76
+  .long vector77
+  .long vector78
+  .long vector79
+  .long vector80
+  .long vector81
+  .long vector82
+  .long vector83
+  .long vector84
+  .long vector85
+  .long vector86
+  .long vector87
+  .long vector88
+  .long vector89
+  .long vector90
+  .long vector91
+  .long vector92
+  .long vector93
+  .long vector94
+  .long vector95
+  .long vector96
+  .long vector97
+  .long vector98
+  .long vector99
+  .long vector100
+  .long vector101
+  .long vector102
+  .long vector103
+  .long vector104
+  .long vector105
+  .long vector106
+  .long vector107
+  .long vector108
+  .long vector109
+  .long vector110
+  .long vector111
+  .long vector112
+  .long vector113
+  .long vector114
+  .long vector115
+  .long vector116
+  .long vector117
+  .long vector118
+  .long vector119
+  .long vector120
+  .long vector121
+  .long vector122
+  .long vector123
+  .long vector124
+  .long vector125
+  .long vector126
+  .long vector127
+  .long vector128
+  .long vector129
+  .long vector130
+  .long vector131
+  .long vector132
+  .long vector133
+  .long vector134
+  .long vector135
+  .long vector136
+  .long vector137
+  .long vector138
+  .long vector139
+  .long vector140
+  .long vector141
+  .long vector142
+  .long vector143
+  .long vector144
+  .long vector145
+  .long vector146
+  .long vector147
+  .long vector148
+  .long vector149
+  .long vector150
+  .long vector151
+  .long vector152
+  .long vector153
+  .long vector154
+  .long vector155
+  .long vector156
+  .long vector157
+  .long vector158
+  .long vector159
+  .long vector160
+  .long vector161
+  .long vector162
+  .long vector163
+  .long vector164
+  .long vector165
+  .long vector166
+  .long vector167
+  .long vector168
+  .long vector169
+  .long vector170
+  .long vector171
+  .long vector172
+  .long vector173
+  .long vector174
+  .long vector175
+  .long vector176
+  .long vector177
+  .long vector178
+  .long vector179
+  .long vector180
+  .long vector181
+  .long vector182
+  .long vector183
+  .long vector184
+  .long vector185
+  .long vector186
+  .long vector187
+  .long vector188
+  .long vector189
+  .long vector190
+  .long vector191
+  .long vector192
+  .long vector193
+  .long vector194
+  .long vector195
+  .long vector196
+  .long vector197
+  .long vector198
+  .long vector199
+  .long vector200
+  .long vector201
+  .long vector202
+  .long vector203
+  .long vector204
+  .long vector205
+  .long vector206
+  .long vector207
+  .long vector208
+  .long vector209
+  .long vector210
+  .long vector211
+  .long vector212
+  .long vector213
+  .long vector214
+  .long vector215
+  .long vector216
+  .long vector217
+  .long vector218
+  .long vector219
+  .long vector220
+  .long vector221
+  .long vector222
+  .long vector223
+  .long vector224
+  .long vector225
+  .long vector226
+  .long vector227
+  .long vector228
+  .long vector229
+  .long vector230
+  .long vector231
+  .long vector232
+  .long vector233
+  .long vector234
+  .long vector235
+  .long vector236
+  .long vector237
+  .long vector238
+  .long vector239
+  .long vector240
+  .long vector241
+  .long vector242
+  .long vector243
+  .long vector244
+  .long vector245
+  .long vector246
+  .long vector247
+  .long vector248
+  .long vector249
+  .long vector250
+  .long vector251
+  .long vector252
+  .long vector253
+  .long vector254
+  .long vector255
diff -ruN xv6-public/vm.d xv6-public_task_1/vm.d
--- xv6-public/vm.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/vm.d	2021-09-15 20:34:56.128375000 +0530
@@ -0,0 +1,2 @@
+vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
+ memlayout.h mmu.h proc.h elf.h
Binary files xv6-public/vm.o and xv6-public_task_1/vm.o differ
Binary files xv6-public/_wc and xv6-public_task_1/_wc differ
diff -ruN xv6-public/wc.asm xv6-public_task_1/wc.asm
--- xv6-public/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/wc.asm	2021-09-15 20:34:59.640370000 +0530
@@ -0,0 +1,1346 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	57                   	push   %edi
+  12:	56                   	push   %esi
+  13:	be 01 00 00 00       	mov    $0x1,%esi
+  18:	53                   	push   %ebx
+  19:	51                   	push   %ecx
+  1a:	83 ec 18             	sub    $0x18,%esp
+  1d:	8b 01                	mov    (%ecx),%eax
+  1f:	8b 59 04             	mov    0x4(%ecx),%ebx
+  22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  25:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  28:	83 f8 01             	cmp    $0x1,%eax
+  2b:	7e 52                	jle    7f <main+0x7f>
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	pushl  (%ebx)
+  37:	e8 f7 03 00 00       	call   433 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	pushl  (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+  4d:	83 c3 04             	add    $0x4,%ebx
+    wc(fd, argv[i]);
+  50:	50                   	push   %eax
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 bd 03 00 00       	call   41b <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 88 03 00 00       	call   3f3 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	pushl  (%ebx)
+  6e:	68 eb 08 00 00       	push   $0x8eb
+  73:	6a 01                	push   $0x1
+  75:	e8 e6 04 00 00       	call   560 <printf>
+      exit();
+  7a:	e8 74 03 00 00       	call   3f3 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 dd 08 00 00       	push   $0x8dd
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 61 03 00 00       	call   3f3 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	f3 0f 1e fb          	endbr32 
+  a4:	55                   	push   %ebp
+  a5:	89 e5                	mov    %esp,%ebp
+  a7:	57                   	push   %edi
+  a8:	56                   	push   %esi
+  a9:	53                   	push   %ebx
+  l = w = c = 0;
+  aa:	31 db                	xor    %ebx,%ebx
+{
+  ac:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  af:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  bd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c8:	83 ec 04             	sub    $0x4,%esp
+  cb:	68 00 02 00 00       	push   $0x200
+  d0:	68 20 0c 00 00       	push   $0xc20
+  d5:	ff 75 08             	pushl  0x8(%ebp)
+  d8:	e8 2e 03 00 00       	call   40b <read>
+  dd:	83 c4 10             	add    $0x10,%esp
+  e0:	89 c6                	mov    %eax,%esi
+  e2:	85 c0                	test   %eax,%eax
+  e4:	7e 62                	jle    148 <wc+0xa8>
+    for(i=0; i<n; i++){
+  e6:	31 ff                	xor    %edi,%edi
+  e8:	eb 14                	jmp    fe <wc+0x5e>
+  ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        inword = 0;
+  f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  f7:	83 c7 01             	add    $0x1,%edi
+  fa:	39 fe                	cmp    %edi,%esi
+  fc:	74 42                	je     140 <wc+0xa0>
+      if(buf[i] == '\n')
+  fe:	0f be 87 20 0c 00 00 	movsbl 0xc20(%edi),%eax
+        l++;
+ 105:	31 c9                	xor    %ecx,%ecx
+ 107:	3c 0a                	cmp    $0xa,%al
+ 109:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10c:	83 ec 08             	sub    $0x8,%esp
+ 10f:	50                   	push   %eax
+        l++;
+ 110:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 112:	68 c8 08 00 00       	push   $0x8c8
+ 117:	e8 54 01 00 00       	call   270 <strchr>
+ 11c:	83 c4 10             	add    $0x10,%esp
+ 11f:	85 c0                	test   %eax,%eax
+ 121:	75 cd                	jne    f0 <wc+0x50>
+      else if(!inword){
+ 123:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 126:	85 d2                	test   %edx,%edx
+ 128:	75 cd                	jne    f7 <wc+0x57>
+    for(i=0; i<n; i++){
+ 12a:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 12d:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+        inword = 1;
+ 131:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 138:	39 fe                	cmp    %edi,%esi
+ 13a:	75 c2                	jne    fe <wc+0x5e>
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 140:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 143:	eb 83                	jmp    c8 <wc+0x28>
+ 145:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 148:	75 24                	jne    16e <wc+0xce>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 14a:	83 ec 08             	sub    $0x8,%esp
+ 14d:	ff 75 0c             	pushl  0xc(%ebp)
+ 150:	ff 75 dc             	pushl  -0x24(%ebp)
+ 153:	ff 75 e0             	pushl  -0x20(%ebp)
+ 156:	53                   	push   %ebx
+ 157:	68 de 08 00 00       	push   $0x8de
+ 15c:	6a 01                	push   $0x1
+ 15e:	e8 fd 03 00 00       	call   560 <printf>
+}
+ 163:	83 c4 20             	add    $0x20,%esp
+ 166:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 169:	5b                   	pop    %ebx
+ 16a:	5e                   	pop    %esi
+ 16b:	5f                   	pop    %edi
+ 16c:	5d                   	pop    %ebp
+ 16d:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 16e:	50                   	push   %eax
+ 16f:	50                   	push   %eax
+ 170:	68 ce 08 00 00       	push   $0x8ce
+ 175:	6a 01                	push   $0x1
+ 177:	e8 e4 03 00 00       	call   560 <printf>
+    exit();
+ 17c:	e8 72 02 00 00       	call   3f3 <exit>
+ 181:	66 90                	xchg   %ax,%ax
+ 183:	66 90                	xchg   %ax,%ax
+ 185:	66 90                	xchg   %ax,%ax
+ 187:	66 90                	xchg   %ax,%ax
+ 189:	66 90                	xchg   %ax,%ax
+ 18b:	66 90                	xchg   %ax,%ax
+ 18d:	66 90                	xchg   %ax,%ax
+ 18f:	90                   	nop
+
+00000190 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 190:	f3 0f 1e fb          	endbr32 
+ 194:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 195:	31 c0                	xor    %eax,%eax
+{
+ 197:	89 e5                	mov    %esp,%ebp
+ 199:	53                   	push   %ebx
+ 19a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 19d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+ 1a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 1a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 1a7:	83 c0 01             	add    $0x1,%eax
+ 1aa:	84 d2                	test   %dl,%dl
+ 1ac:	75 f2                	jne    1a0 <strcpy+0x10>
+    ;
+  return os;
+}
+ 1ae:	89 c8                	mov    %ecx,%eax
+ 1b0:	5b                   	pop    %ebx
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000001c0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1c0:	f3 0f 1e fb          	endbr32 
+ 1c4:	55                   	push   %ebp
+ 1c5:	89 e5                	mov    %esp,%ebp
+ 1c7:	53                   	push   %ebx
+ 1c8:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 1cb:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+ 1ce:	0f b6 01             	movzbl (%ecx),%eax
+ 1d1:	0f b6 1a             	movzbl (%edx),%ebx
+ 1d4:	84 c0                	test   %al,%al
+ 1d6:	75 19                	jne    1f1 <strcmp+0x31>
+ 1d8:	eb 26                	jmp    200 <strcmp+0x40>
+ 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 1e0:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+ 1e4:	83 c1 01             	add    $0x1,%ecx
+ 1e7:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+ 1ea:	0f b6 1a             	movzbl (%edx),%ebx
+ 1ed:	84 c0                	test   %al,%al
+ 1ef:	74 0f                	je     200 <strcmp+0x40>
+ 1f1:	38 d8                	cmp    %bl,%al
+ 1f3:	74 eb                	je     1e0 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+ 1f5:	29 d8                	sub    %ebx,%eax
+}
+ 1f7:	5b                   	pop    %ebx
+ 1f8:	5d                   	pop    %ebp
+ 1f9:	c3                   	ret    
+ 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 200:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+ 202:	29 d8                	sub    %ebx,%eax
+}
+ 204:	5b                   	pop    %ebx
+ 205:	5d                   	pop    %ebp
+ 206:	c3                   	ret    
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 210:	f3 0f 1e fb          	endbr32 
+ 214:	55                   	push   %ebp
+ 215:	89 e5                	mov    %esp,%ebp
+ 217:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 21a:	80 3a 00             	cmpb   $0x0,(%edx)
+ 21d:	74 21                	je     240 <strlen+0x30>
+ 21f:	31 c0                	xor    %eax,%eax
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	83 c0 01             	add    $0x1,%eax
+ 22b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 22f:	89 c1                	mov    %eax,%ecx
+ 231:	75 f5                	jne    228 <strlen+0x18>
+    ;
+  return n;
+}
+ 233:	89 c8                	mov    %ecx,%eax
+ 235:	5d                   	pop    %ebp
+ 236:	c3                   	ret    
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+ 240:	31 c9                	xor    %ecx,%ecx
+}
+ 242:	5d                   	pop    %ebp
+ 243:	89 c8                	mov    %ecx,%eax
+ 245:	c3                   	ret    
+ 246:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000250 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 250:	f3 0f 1e fb          	endbr32 
+ 254:	55                   	push   %ebp
+ 255:	89 e5                	mov    %esp,%ebp
+ 257:	57                   	push   %edi
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 25b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 25e:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 261:	89 d7                	mov    %edx,%edi
+ 263:	fc                   	cld    
+ 264:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 266:	89 d0                	mov    %edx,%eax
+ 268:	5f                   	pop    %edi
+ 269:	5d                   	pop    %ebp
+ 26a:	c3                   	ret    
+ 26b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 26f:	90                   	nop
+
+00000270 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 270:	f3 0f 1e fb          	endbr32 
+ 274:	55                   	push   %ebp
+ 275:	89 e5                	mov    %esp,%ebp
+ 277:	8b 45 08             	mov    0x8(%ebp),%eax
+ 27a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 27e:	0f b6 10             	movzbl (%eax),%edx
+ 281:	84 d2                	test   %dl,%dl
+ 283:	75 16                	jne    29b <strchr+0x2b>
+ 285:	eb 21                	jmp    2a8 <strchr+0x38>
+ 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28e:	66 90                	xchg   %ax,%ax
+ 290:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 294:	83 c0 01             	add    $0x1,%eax
+ 297:	84 d2                	test   %dl,%dl
+ 299:	74 0d                	je     2a8 <strchr+0x38>
+    if(*s == c)
+ 29b:	38 d1                	cmp    %dl,%cl
+ 29d:	75 f1                	jne    290 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 29f:	5d                   	pop    %ebp
+ 2a0:	c3                   	ret    
+ 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 2a8:	31 c0                	xor    %eax,%eax
+}
+ 2aa:	5d                   	pop    %ebp
+ 2ab:	c3                   	ret    
+ 2ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002b0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2b0:	f3 0f 1e fb          	endbr32 
+ 2b4:	55                   	push   %ebp
+ 2b5:	89 e5                	mov    %esp,%ebp
+ 2b7:	57                   	push   %edi
+ 2b8:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 2b9:	31 f6                	xor    %esi,%esi
+{
+ 2bb:	53                   	push   %ebx
+ 2bc:	89 f3                	mov    %esi,%ebx
+ 2be:	83 ec 1c             	sub    $0x1c,%esp
+ 2c1:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 2c4:	eb 33                	jmp    2f9 <gets+0x49>
+ 2c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cd:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 2d0:	83 ec 04             	sub    $0x4,%esp
+ 2d3:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 2d6:	6a 01                	push   $0x1
+ 2d8:	50                   	push   %eax
+ 2d9:	6a 00                	push   $0x0
+ 2db:	e8 2b 01 00 00       	call   40b <read>
+    if(cc < 1)
+ 2e0:	83 c4 10             	add    $0x10,%esp
+ 2e3:	85 c0                	test   %eax,%eax
+ 2e5:	7e 1c                	jle    303 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 2e7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2eb:	83 c7 01             	add    $0x1,%edi
+ 2ee:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 2f1:	3c 0a                	cmp    $0xa,%al
+ 2f3:	74 23                	je     318 <gets+0x68>
+ 2f5:	3c 0d                	cmp    $0xd,%al
+ 2f7:	74 1f                	je     318 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 2f9:	83 c3 01             	add    $0x1,%ebx
+ 2fc:	89 fe                	mov    %edi,%esi
+ 2fe:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 301:	7c cd                	jl     2d0 <gets+0x20>
+ 303:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 305:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 308:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 30b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 30e:	5b                   	pop    %ebx
+ 30f:	5e                   	pop    %esi
+ 310:	5f                   	pop    %edi
+ 311:	5d                   	pop    %ebp
+ 312:	c3                   	ret    
+ 313:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 317:	90                   	nop
+ 318:	8b 75 08             	mov    0x8(%ebp),%esi
+ 31b:	8b 45 08             	mov    0x8(%ebp),%eax
+ 31e:	01 de                	add    %ebx,%esi
+ 320:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 322:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 325:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 328:	5b                   	pop    %ebx
+ 329:	5e                   	pop    %esi
+ 32a:	5f                   	pop    %edi
+ 32b:	5d                   	pop    %ebp
+ 32c:	c3                   	ret    
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000330 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 330:	f3 0f 1e fb          	endbr32 
+ 334:	55                   	push   %ebp
+ 335:	89 e5                	mov    %esp,%ebp
+ 337:	56                   	push   %esi
+ 338:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 339:	83 ec 08             	sub    $0x8,%esp
+ 33c:	6a 00                	push   $0x0
+ 33e:	ff 75 08             	pushl  0x8(%ebp)
+ 341:	e8 ed 00 00 00       	call   433 <open>
+  if(fd < 0)
+ 346:	83 c4 10             	add    $0x10,%esp
+ 349:	85 c0                	test   %eax,%eax
+ 34b:	78 2b                	js     378 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 34d:	83 ec 08             	sub    $0x8,%esp
+ 350:	ff 75 0c             	pushl  0xc(%ebp)
+ 353:	89 c3                	mov    %eax,%ebx
+ 355:	50                   	push   %eax
+ 356:	e8 f0 00 00 00       	call   44b <fstat>
+  close(fd);
+ 35b:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 35e:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 360:	e8 b6 00 00 00       	call   41b <close>
+  return r;
+ 365:	83 c4 10             	add    $0x10,%esp
+}
+ 368:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 36b:	89 f0                	mov    %esi,%eax
+ 36d:	5b                   	pop    %ebx
+ 36e:	5e                   	pop    %esi
+ 36f:	5d                   	pop    %ebp
+ 370:	c3                   	ret    
+ 371:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 378:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 37d:	eb e9                	jmp    368 <stat+0x38>
+ 37f:	90                   	nop
+
+00000380 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 380:	f3 0f 1e fb          	endbr32 
+ 384:	55                   	push   %ebp
+ 385:	89 e5                	mov    %esp,%ebp
+ 387:	53                   	push   %ebx
+ 388:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 38b:	0f be 02             	movsbl (%edx),%eax
+ 38e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 391:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 394:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 399:	77 1a                	ja     3b5 <atoi+0x35>
+ 39b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 39f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 3a0:	83 c2 01             	add    $0x1,%edx
+ 3a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 3a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 3aa:	0f be 02             	movsbl (%edx),%eax
+ 3ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 3b0:	80 fb 09             	cmp    $0x9,%bl
+ 3b3:	76 eb                	jbe    3a0 <atoi+0x20>
+  return n;
+}
+ 3b5:	89 c8                	mov    %ecx,%eax
+ 3b7:	5b                   	pop    %ebx
+ 3b8:	5d                   	pop    %ebp
+ 3b9:	c3                   	ret    
+ 3ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000003c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3c0:	f3 0f 1e fb          	endbr32 
+ 3c4:	55                   	push   %ebp
+ 3c5:	89 e5                	mov    %esp,%ebp
+ 3c7:	57                   	push   %edi
+ 3c8:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3cb:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3ce:	56                   	push   %esi
+ 3cf:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3d2:	85 c0                	test   %eax,%eax
+ 3d4:	7e 0f                	jle    3e5 <memmove+0x25>
+ 3d6:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3d8:	89 d7                	mov    %edx,%edi
+ 3da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3e1:	39 f8                	cmp    %edi,%eax
+ 3e3:	75 fb                	jne    3e0 <memmove+0x20>
+  return vdst;
+}
+ 3e5:	5e                   	pop    %esi
+ 3e6:	89 d0                	mov    %edx,%eax
+ 3e8:	5f                   	pop    %edi
+ 3e9:	5d                   	pop    %ebp
+ 3ea:	c3                   	ret    
+
+000003eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <exit>:
+SYSCALL(exit)
+ 3f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <wait>:
+SYSCALL(wait)
+ 3fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <pipe>:
+SYSCALL(pipe)
+ 403:	b8 04 00 00 00       	mov    $0x4,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <read>:
+SYSCALL(read)
+ 40b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <write>:
+SYSCALL(write)
+ 413:	b8 10 00 00 00       	mov    $0x10,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <close>:
+SYSCALL(close)
+ 41b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <kill>:
+SYSCALL(kill)
+ 423:	b8 06 00 00 00       	mov    $0x6,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <exec>:
+SYSCALL(exec)
+ 42b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <open>:
+SYSCALL(open)
+ 433:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <mknod>:
+SYSCALL(mknod)
+ 43b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <unlink>:
+SYSCALL(unlink)
+ 443:	b8 12 00 00 00       	mov    $0x12,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <fstat>:
+SYSCALL(fstat)
+ 44b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <link>:
+SYSCALL(link)
+ 453:	b8 13 00 00 00       	mov    $0x13,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <mkdir>:
+SYSCALL(mkdir)
+ 45b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <chdir>:
+SYSCALL(chdir)
+ 463:	b8 09 00 00 00       	mov    $0x9,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <dup>:
+SYSCALL(dup)
+ 46b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <getpid>:
+SYSCALL(getpid)
+ 473:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <sbrk>:
+SYSCALL(sbrk)
+ 47b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <sleep>:
+SYSCALL(sleep)
+ 483:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <uptime>:
+SYSCALL(uptime)
+ 48b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <draw>:
+SYSCALL(draw)
+ 493:	b8 16 00 00 00       	mov    $0x16,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+
+0000049b <history>:
+ 49b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 4a0:	cd 40                	int    $0x40
+ 4a2:	c3                   	ret    
+ 4a3:	66 90                	xchg   %ax,%ax
+ 4a5:	66 90                	xchg   %ax,%ax
+ 4a7:	66 90                	xchg   %ax,%ax
+ 4a9:	66 90                	xchg   %ax,%ax
+ 4ab:	66 90                	xchg   %ax,%ax
+ 4ad:	66 90                	xchg   %ax,%ax
+ 4af:	90                   	nop
+
+000004b0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4b0:	55                   	push   %ebp
+ 4b1:	89 e5                	mov    %esp,%ebp
+ 4b3:	57                   	push   %edi
+ 4b4:	56                   	push   %esi
+ 4b5:	53                   	push   %ebx
+ 4b6:	83 ec 3c             	sub    $0x3c,%esp
+ 4b9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 4bc:	89 d1                	mov    %edx,%ecx
+{
+ 4be:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 4c1:	85 d2                	test   %edx,%edx
+ 4c3:	0f 89 7f 00 00 00    	jns    548 <printint+0x98>
+ 4c9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4cd:	74 79                	je     548 <printint+0x98>
+    neg = 1;
+ 4cf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 4d6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4d8:	31 db                	xor    %ebx,%ebx
+ 4da:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4dd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4e0:	89 c8                	mov    %ecx,%eax
+ 4e2:	31 d2                	xor    %edx,%edx
+ 4e4:	89 cf                	mov    %ecx,%edi
+ 4e6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4e9:	0f b6 92 08 09 00 00 	movzbl 0x908(%edx),%edx
+ 4f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4f3:	89 d8                	mov    %ebx,%eax
+ 4f5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4f8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4fb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4fe:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 501:	76 dd                	jbe    4e0 <printint+0x30>
+  if(neg)
+ 503:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 506:	85 c9                	test   %ecx,%ecx
+ 508:	74 0c                	je     516 <printint+0x66>
+    buf[i++] = '-';
+ 50a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 50f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 511:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 516:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 519:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 51d:	eb 07                	jmp    526 <printint+0x76>
+ 51f:	90                   	nop
+ 520:	0f b6 13             	movzbl (%ebx),%edx
+ 523:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 526:	83 ec 04             	sub    $0x4,%esp
+ 529:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 52c:	6a 01                	push   $0x1
+ 52e:	56                   	push   %esi
+ 52f:	57                   	push   %edi
+ 530:	e8 de fe ff ff       	call   413 <write>
+  while(--i >= 0)
+ 535:	83 c4 10             	add    $0x10,%esp
+ 538:	39 de                	cmp    %ebx,%esi
+ 53a:	75 e4                	jne    520 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 53c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 53f:	5b                   	pop    %ebx
+ 540:	5e                   	pop    %esi
+ 541:	5f                   	pop    %edi
+ 542:	5d                   	pop    %ebp
+ 543:	c3                   	ret    
+ 544:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 548:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 54f:	eb 87                	jmp    4d8 <printint+0x28>
+ 551:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 558:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
+
+00000560 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 560:	f3 0f 1e fb          	endbr32 
+ 564:	55                   	push   %ebp
+ 565:	89 e5                	mov    %esp,%ebp
+ 567:	57                   	push   %edi
+ 568:	56                   	push   %esi
+ 569:	53                   	push   %ebx
+ 56a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 56d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 570:	0f b6 1e             	movzbl (%esi),%ebx
+ 573:	84 db                	test   %bl,%bl
+ 575:	0f 84 b4 00 00 00    	je     62f <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 57b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 57e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 581:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 584:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 586:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 589:	eb 33                	jmp    5be <printf+0x5e>
+ 58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+ 590:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 593:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 598:	83 f8 25             	cmp    $0x25,%eax
+ 59b:	74 17                	je     5b4 <printf+0x54>
+  write(fd, &c, 1);
+ 59d:	83 ec 04             	sub    $0x4,%esp
+ 5a0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 5a3:	6a 01                	push   $0x1
+ 5a5:	57                   	push   %edi
+ 5a6:	ff 75 08             	pushl  0x8(%ebp)
+ 5a9:	e8 65 fe ff ff       	call   413 <write>
+ 5ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 5b1:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5b4:	0f b6 1e             	movzbl (%esi),%ebx
+ 5b7:	83 c6 01             	add    $0x1,%esi
+ 5ba:	84 db                	test   %bl,%bl
+ 5bc:	74 71                	je     62f <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 5be:	0f be cb             	movsbl %bl,%ecx
+ 5c1:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 5c4:	85 d2                	test   %edx,%edx
+ 5c6:	74 c8                	je     590 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 5c8:	83 fa 25             	cmp    $0x25,%edx
+ 5cb:	75 e7                	jne    5b4 <printf+0x54>
+      if(c == 'd'){
+ 5cd:	83 f8 64             	cmp    $0x64,%eax
+ 5d0:	0f 84 9a 00 00 00    	je     670 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 5d6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 5dc:	83 f9 70             	cmp    $0x70,%ecx
+ 5df:	74 5f                	je     640 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 5e1:	83 f8 73             	cmp    $0x73,%eax
+ 5e4:	0f 84 d6 00 00 00    	je     6c0 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 5ea:	83 f8 63             	cmp    $0x63,%eax
+ 5ed:	0f 84 8d 00 00 00    	je     680 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 5f3:	83 f8 25             	cmp    $0x25,%eax
+ 5f6:	0f 84 b4 00 00 00    	je     6b0 <printf+0x150>
+  write(fd, &c, 1);
+ 5fc:	83 ec 04             	sub    $0x4,%esp
+ 5ff:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 603:	6a 01                	push   $0x1
+ 605:	57                   	push   %edi
+ 606:	ff 75 08             	pushl  0x8(%ebp)
+ 609:	e8 05 fe ff ff       	call   413 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 60e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 611:	83 c4 0c             	add    $0xc,%esp
+ 614:	6a 01                	push   $0x1
+ 616:	83 c6 01             	add    $0x1,%esi
+ 619:	57                   	push   %edi
+ 61a:	ff 75 08             	pushl  0x8(%ebp)
+ 61d:	e8 f1 fd ff ff       	call   413 <write>
+  for(i = 0; fmt[i]; i++){
+ 622:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 626:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 629:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 62b:	84 db                	test   %bl,%bl
+ 62d:	75 8f                	jne    5be <printf+0x5e>
+    }
+  }
+}
+ 62f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 632:	5b                   	pop    %ebx
+ 633:	5e                   	pop    %esi
+ 634:	5f                   	pop    %edi
+ 635:	5d                   	pop    %ebp
+ 636:	c3                   	ret    
+ 637:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63e:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 648:	6a 00                	push   $0x0
+ 64a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 64d:	8b 45 08             	mov    0x8(%ebp),%eax
+ 650:	8b 13                	mov    (%ebx),%edx
+ 652:	e8 59 fe ff ff       	call   4b0 <printint>
+        ap++;
+ 657:	89 d8                	mov    %ebx,%eax
+ 659:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 65c:	31 d2                	xor    %edx,%edx
+        ap++;
+ 65e:	83 c0 04             	add    $0x4,%eax
+ 661:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 664:	e9 4b ff ff ff       	jmp    5b4 <printf+0x54>
+ 669:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 670:	83 ec 0c             	sub    $0xc,%esp
+ 673:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 678:	6a 01                	push   $0x1
+ 67a:	eb ce                	jmp    64a <printf+0xea>
+ 67c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 680:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 683:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 686:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 688:	6a 01                	push   $0x1
+        ap++;
+ 68a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 68d:	57                   	push   %edi
+ 68e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 691:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 694:	e8 7a fd ff ff       	call   413 <write>
+        ap++;
+ 699:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 69c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 69f:	31 d2                	xor    %edx,%edx
+ 6a1:	e9 0e ff ff ff       	jmp    5b4 <printf+0x54>
+ 6a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ad:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 6b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6b3:	83 ec 04             	sub    $0x4,%esp
+ 6b6:	e9 59 ff ff ff       	jmp    614 <printf+0xb4>
+ 6bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6bf:	90                   	nop
+        s = (char*)*ap;
+ 6c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 6c3:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 6c5:	83 c0 04             	add    $0x4,%eax
+ 6c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 6cb:	85 db                	test   %ebx,%ebx
+ 6cd:	74 17                	je     6e6 <printf+0x186>
+        while(*s != 0){
+ 6cf:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 6d2:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 6d4:	84 c0                	test   %al,%al
+ 6d6:	0f 84 d8 fe ff ff    	je     5b4 <printf+0x54>
+ 6dc:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6df:	89 de                	mov    %ebx,%esi
+ 6e1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6e4:	eb 1a                	jmp    700 <printf+0x1a0>
+          s = "(null)";
+ 6e6:	bb ff 08 00 00       	mov    $0x8ff,%ebx
+        while(*s != 0){
+ 6eb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 6ee:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6f3:	89 de                	mov    %ebx,%esi
+ 6f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 6f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6ff:	90                   	nop
+  write(fd, &c, 1);
+ 700:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 703:	83 c6 01             	add    $0x1,%esi
+ 706:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 709:	6a 01                	push   $0x1
+ 70b:	57                   	push   %edi
+ 70c:	53                   	push   %ebx
+ 70d:	e8 01 fd ff ff       	call   413 <write>
+        while(*s != 0){
+ 712:	0f b6 06             	movzbl (%esi),%eax
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	84 c0                	test   %al,%al
+ 71a:	75 e4                	jne    700 <printf+0x1a0>
+ 71c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 71f:	31 d2                	xor    %edx,%edx
+ 721:	e9 8e fe ff ff       	jmp    5b4 <printf+0x54>
+ 726:	66 90                	xchg   %ax,%ax
+ 728:	66 90                	xchg   %ax,%ax
+ 72a:	66 90                	xchg   %ax,%ax
+ 72c:	66 90                	xchg   %ax,%ax
+ 72e:	66 90                	xchg   %ax,%ax
+
+00000730 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 730:	f3 0f 1e fb          	endbr32 
+ 734:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 735:	a1 00 0c 00 00       	mov    0xc00,%eax
+{
+ 73a:	89 e5                	mov    %esp,%ebp
+ 73c:	57                   	push   %edi
+ 73d:	56                   	push   %esi
+ 73e:	53                   	push   %ebx
+ 73f:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 742:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 744:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 747:	39 c8                	cmp    %ecx,%eax
+ 749:	73 15                	jae    760 <free+0x30>
+ 74b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 74f:	90                   	nop
+ 750:	39 d1                	cmp    %edx,%ecx
+ 752:	72 14                	jb     768 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 754:	39 d0                	cmp    %edx,%eax
+ 756:	73 10                	jae    768 <free+0x38>
+{
+ 758:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 75a:	8b 10                	mov    (%eax),%edx
+ 75c:	39 c8                	cmp    %ecx,%eax
+ 75e:	72 f0                	jb     750 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 760:	39 d0                	cmp    %edx,%eax
+ 762:	72 f4                	jb     758 <free+0x28>
+ 764:	39 d1                	cmp    %edx,%ecx
+ 766:	73 f0                	jae    758 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 768:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 76b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 76e:	39 fa                	cmp    %edi,%edx
+ 770:	74 1e                	je     790 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 772:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 775:	8b 50 04             	mov    0x4(%eax),%edx
+ 778:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 77b:	39 f1                	cmp    %esi,%ecx
+ 77d:	74 28                	je     7a7 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 77f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 781:	5b                   	pop    %ebx
+  freep = p;
+ 782:	a3 00 0c 00 00       	mov    %eax,0xc00
+}
+ 787:	5e                   	pop    %esi
+ 788:	5f                   	pop    %edi
+ 789:	5d                   	pop    %ebp
+ 78a:	c3                   	ret    
+ 78b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 78f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 790:	03 72 04             	add    0x4(%edx),%esi
+ 793:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 796:	8b 10                	mov    (%eax),%edx
+ 798:	8b 12                	mov    (%edx),%edx
+ 79a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 79d:	8b 50 04             	mov    0x4(%eax),%edx
+ 7a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 7a3:	39 f1                	cmp    %esi,%ecx
+ 7a5:	75 d8                	jne    77f <free+0x4f>
+    p->s.size += bp->s.size;
+ 7a7:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 7aa:	a3 00 0c 00 00       	mov    %eax,0xc00
+    p->s.size += bp->s.size;
+ 7af:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 7b2:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 7b5:	89 10                	mov    %edx,(%eax)
+}
+ 7b7:	5b                   	pop    %ebx
+ 7b8:	5e                   	pop    %esi
+ 7b9:	5f                   	pop    %edi
+ 7ba:	5d                   	pop    %ebp
+ 7bb:	c3                   	ret    
+ 7bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000007c0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7c0:	f3 0f 1e fb          	endbr32 
+ 7c4:	55                   	push   %ebp
+ 7c5:	89 e5                	mov    %esp,%ebp
+ 7c7:	57                   	push   %edi
+ 7c8:	56                   	push   %esi
+ 7c9:	53                   	push   %ebx
+ 7ca:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7cd:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 7d0:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7d6:	8d 70 07             	lea    0x7(%eax),%esi
+ 7d9:	c1 ee 03             	shr    $0x3,%esi
+ 7dc:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 7df:	85 ff                	test   %edi,%edi
+ 7e1:	0f 84 a9 00 00 00    	je     890 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7e7:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 7e9:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7ec:	39 f1                	cmp    %esi,%ecx
+ 7ee:	73 6d                	jae    85d <malloc+0x9d>
+ 7f0:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 7f6:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7fb:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7fe:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 805:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 808:	eb 17                	jmp    821 <malloc+0x61>
+ 80a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 810:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 812:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 815:	39 f1                	cmp    %esi,%ecx
+ 817:	73 4f                	jae    868 <malloc+0xa8>
+ 819:	8b 3d 00 0c 00 00    	mov    0xc00,%edi
+ 81f:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 821:	39 c7                	cmp    %eax,%edi
+ 823:	75 eb                	jne    810 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 825:	83 ec 0c             	sub    $0xc,%esp
+ 828:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 82b:	e8 4b fc ff ff       	call   47b <sbrk>
+  if(p == (char*)-1)
+ 830:	83 c4 10             	add    $0x10,%esp
+ 833:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 836:	74 1b                	je     853 <malloc+0x93>
+  hp->s.size = nu;
+ 838:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 83b:	83 ec 0c             	sub    $0xc,%esp
+ 83e:	83 c0 08             	add    $0x8,%eax
+ 841:	50                   	push   %eax
+ 842:	e8 e9 fe ff ff       	call   730 <free>
+  return freep;
+ 847:	a1 00 0c 00 00       	mov    0xc00,%eax
+      if((p = morecore(nunits)) == 0)
+ 84c:	83 c4 10             	add    $0x10,%esp
+ 84f:	85 c0                	test   %eax,%eax
+ 851:	75 bd                	jne    810 <malloc+0x50>
+        return 0;
+  }
+}
+ 853:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 856:	31 c0                	xor    %eax,%eax
+}
+ 858:	5b                   	pop    %ebx
+ 859:	5e                   	pop    %esi
+ 85a:	5f                   	pop    %edi
+ 85b:	5d                   	pop    %ebp
+ 85c:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 85d:	89 c2                	mov    %eax,%edx
+ 85f:	89 f8                	mov    %edi,%eax
+ 861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 868:	39 ce                	cmp    %ecx,%esi
+ 86a:	74 54                	je     8c0 <malloc+0x100>
+        p->s.size -= nunits;
+ 86c:	29 f1                	sub    %esi,%ecx
+ 86e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 871:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 874:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 877:	a3 00 0c 00 00       	mov    %eax,0xc00
+}
+ 87c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 87f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 882:	5b                   	pop    %ebx
+ 883:	5e                   	pop    %esi
+ 884:	5f                   	pop    %edi
+ 885:	5d                   	pop    %ebp
+ 886:	c3                   	ret    
+ 887:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 88e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 890:	c7 05 00 0c 00 00 04 	movl   $0xc04,0xc00
+ 897:	0c 00 00 
+    base.s.size = 0;
+ 89a:	bf 04 0c 00 00       	mov    $0xc04,%edi
+    base.s.ptr = freep = prevp = &base;
+ 89f:	c7 05 04 0c 00 00 04 	movl   $0xc04,0xc04
+ 8a6:	0c 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8a9:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 8ab:	c7 05 08 0c 00 00 00 	movl   $0x0,0xc08
+ 8b2:	00 00 00 
+    if(p->s.size >= nunits){
+ 8b5:	e9 36 ff ff ff       	jmp    7f0 <malloc+0x30>
+ 8ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 8c0:	8b 0a                	mov    (%edx),%ecx
+ 8c2:	89 08                	mov    %ecx,(%eax)
+ 8c4:	eb b1                	jmp    877 <malloc+0xb7>
diff -ruN xv6-public/wc.d xv6-public_task_1/wc.d
--- xv6-public/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/wc.d	2021-09-15 20:34:59.600370000 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/wc.o and xv6-public_task_1/wc.o differ
diff -ruN xv6-public/wc.sym xv6-public_task_1/wc.sym
--- xv6-public/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/wc.sym	2021-09-15 20:34:59.648370000 +0530
@@ -0,0 +1,61 @@
+00000000 .text
+000008c8 .rodata
+0000091c .eh_frame
+00000c00 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+000004b0 printint
+00000908 digits.1091
+00000000 umalloc.c
+00000c00 freep
+00000c04 base
+00000190 strcpy
+00000560 printf
+000003c0 memmove
+0000043b mknod
+000002b0 gets
+00000473 getpid
+000007c0 malloc
+00000483 sleep
+00000403 pipe
+00000413 write
+0000049b history
+0000044b fstat
+00000423 kill
+00000463 chdir
+0000042b exec
+000003fb wait
+0000040b read
+00000443 unlink
+000000a0 wc
+000003eb fork
+0000047b sbrk
+0000048b uptime
+00000bf0 __bss_start
+00000250 memset
+00000000 main
+000001c0 strcmp
+0000046b dup
+00000c20 buf
+00000330 stat
+00000bf0 _edata
+00000e20 _end
+00000453 link
+000003f3 exit
+00000380 atoi
+00000493 draw
+00000210 strlen
+00000433 open
+00000270 strchr
+0000045b mkdir
+0000041b close
+00000730 free
Binary files xv6-public/xv6.img and xv6-public_task_1/xv6.img differ
Binary files xv6-public/_zombie and xv6-public_task_1/_zombie differ
diff -ruN xv6-public/zombie.asm xv6-public_task_1/zombie.asm
--- xv6-public/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/zombie.asm	2021-09-15 20:34:59.700370000 +0530
@@ -0,0 +1,1176 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	f3 0f 1e fb          	endbr32 
+   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   8:	83 e4 f0             	and    $0xfffffff0,%esp
+   b:	ff 71 fc             	pushl  -0x4(%ecx)
+   e:	55                   	push   %ebp
+   f:	89 e5                	mov    %esp,%ebp
+  11:	51                   	push   %ecx
+  12:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  15:	e8 71 02 00 00       	call   28b <fork>
+  1a:	85 c0                	test   %eax,%eax
+  1c:	7e 0d                	jle    2b <main+0x2b>
+    sleep(5);  // Let child exit before parent.
+  1e:	83 ec 0c             	sub    $0xc,%esp
+  21:	6a 05                	push   $0x5
+  23:	e8 fb 02 00 00       	call   323 <sleep>
+  28:	83 c4 10             	add    $0x10,%esp
+  exit();
+  2b:	e8 63 02 00 00       	call   293 <exit>
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	f3 0f 1e fb          	endbr32 
+  34:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  35:	31 c0                	xor    %eax,%eax
+{
+  37:	89 e5                	mov    %esp,%ebp
+  39:	53                   	push   %ebx
+  3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	89 c8                	mov    %ecx,%eax
+  50:	5b                   	pop    %ebx
+  51:	5d                   	pop    %ebp
+  52:	c3                   	ret    
+  53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	f3 0f 1e fb          	endbr32 
+  64:	55                   	push   %ebp
+  65:	89 e5                	mov    %esp,%ebp
+  67:	53                   	push   %ebx
+  68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  6b:	8b 55 0c             	mov    0xc(%ebp),%edx
+  while(*p && *p == *q)
+  6e:	0f b6 01             	movzbl (%ecx),%eax
+  71:	0f b6 1a             	movzbl (%edx),%ebx
+  74:	84 c0                	test   %al,%al
+  76:	75 19                	jne    91 <strcmp+0x31>
+  78:	eb 26                	jmp    a0 <strcmp+0x40>
+  7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+    p++, q++;
+  84:	83 c1 01             	add    $0x1,%ecx
+  87:	83 c2 01             	add    $0x1,%edx
+  while(*p && *p == *q)
+  8a:	0f b6 1a             	movzbl (%edx),%ebx
+  8d:	84 c0                	test   %al,%al
+  8f:	74 0f                	je     a0 <strcmp+0x40>
+  91:	38 d8                	cmp    %bl,%al
+  93:	74 eb                	je     80 <strcmp+0x20>
+  return (uchar)*p - (uchar)*q;
+  95:	29 d8                	sub    %ebx,%eax
+}
+  97:	5b                   	pop    %ebx
+  98:	5d                   	pop    %ebp
+  99:	c3                   	ret    
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  a0:	31 c0                	xor    %eax,%eax
+  return (uchar)*p - (uchar)*q;
+  a2:	29 d8                	sub    %ebx,%eax
+}
+  a4:	5b                   	pop    %ebx
+  a5:	5d                   	pop    %ebp
+  a6:	c3                   	ret    
+  a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ae:	66 90                	xchg   %ax,%ax
+
+000000b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  b0:	f3 0f 1e fb          	endbr32 
+  b4:	55                   	push   %ebp
+  b5:	89 e5                	mov    %esp,%ebp
+  b7:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ba:	80 3a 00             	cmpb   $0x0,(%edx)
+  bd:	74 21                	je     e0 <strlen+0x30>
+  bf:	31 c0                	xor    %eax,%eax
+  c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  c8:	83 c0 01             	add    $0x1,%eax
+  cb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  cf:	89 c1                	mov    %eax,%ecx
+  d1:	75 f5                	jne    c8 <strlen+0x18>
+    ;
+  return n;
+}
+  d3:	89 c8                	mov    %ecx,%eax
+  d5:	5d                   	pop    %ebp
+  d6:	c3                   	ret    
+  d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  de:	66 90                	xchg   %ax,%ax
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	f3 0f 1e fb          	endbr32 
+  f4:	55                   	push   %ebp
+  f5:	89 e5                	mov    %esp,%ebp
+  f7:	57                   	push   %edi
+  f8:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  fb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fe:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 101:	89 d7                	mov    %edx,%edi
+ 103:	fc                   	cld    
+ 104:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 106:	89 d0                	mov    %edx,%eax
+ 108:	5f                   	pop    %edi
+ 109:	5d                   	pop    %ebp
+ 10a:	c3                   	ret    
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	f3 0f 1e fb          	endbr32 
+ 114:	55                   	push   %ebp
+ 115:	89 e5                	mov    %esp,%ebp
+ 117:	8b 45 08             	mov    0x8(%ebp),%eax
+ 11a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11e:	0f b6 10             	movzbl (%eax),%edx
+ 121:	84 d2                	test   %dl,%dl
+ 123:	75 16                	jne    13b <strchr+0x2b>
+ 125:	eb 21                	jmp    148 <strchr+0x38>
+ 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12e:	66 90                	xchg   %ax,%ax
+ 130:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 134:	83 c0 01             	add    $0x1,%eax
+ 137:	84 d2                	test   %dl,%dl
+ 139:	74 0d                	je     148 <strchr+0x38>
+    if(*s == c)
+ 13b:	38 d1                	cmp    %dl,%cl
+ 13d:	75 f1                	jne    130 <strchr+0x20>
+      return (char*)s;
+  return 0;
+}
+ 13f:	5d                   	pop    %ebp
+ 140:	c3                   	ret    
+ 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 148:	31 c0                	xor    %eax,%eax
+}
+ 14a:	5d                   	pop    %ebp
+ 14b:	c3                   	ret    
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	f3 0f 1e fb          	endbr32 
+ 154:	55                   	push   %ebp
+ 155:	89 e5                	mov    %esp,%ebp
+ 157:	57                   	push   %edi
+ 158:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 159:	31 f6                	xor    %esi,%esi
+{
+ 15b:	53                   	push   %ebx
+ 15c:	89 f3                	mov    %esi,%ebx
+ 15e:	83 ec 1c             	sub    $0x1c,%esp
+ 161:	8b 7d 08             	mov    0x8(%ebp),%edi
+  for(i=0; i+1 < max; ){
+ 164:	eb 33                	jmp    199 <gets+0x49>
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	8d 45 e7             	lea    -0x19(%ebp),%eax
+ 176:	6a 01                	push   $0x1
+ 178:	50                   	push   %eax
+ 179:	6a 00                	push   $0x0
+ 17b:	e8 2b 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 180:	83 c4 10             	add    $0x10,%esp
+ 183:	85 c0                	test   %eax,%eax
+ 185:	7e 1c                	jle    1a3 <gets+0x53>
+      break;
+    buf[i++] = c;
+ 187:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 18b:	83 c7 01             	add    $0x1,%edi
+ 18e:	88 47 ff             	mov    %al,-0x1(%edi)
+    if(c == '\n' || c == '\r')
+ 191:	3c 0a                	cmp    $0xa,%al
+ 193:	74 23                	je     1b8 <gets+0x68>
+ 195:	3c 0d                	cmp    $0xd,%al
+ 197:	74 1f                	je     1b8 <gets+0x68>
+  for(i=0; i+1 < max; ){
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	89 fe                	mov    %edi,%esi
+ 19e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1a1:	7c cd                	jl     170 <gets+0x20>
+ 1a3:	89 f3                	mov    %esi,%ebx
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+ 1a5:	8b 45 08             	mov    0x8(%ebp),%eax
+  buf[i] = '\0';
+ 1a8:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ae:	5b                   	pop    %ebx
+ 1af:	5e                   	pop    %esi
+ 1b0:	5f                   	pop    %edi
+ 1b1:	5d                   	pop    %ebp
+ 1b2:	c3                   	ret    
+ 1b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1b7:	90                   	nop
+ 1b8:	8b 75 08             	mov    0x8(%ebp),%esi
+ 1bb:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1be:	01 de                	add    %ebx,%esi
+ 1c0:	89 f3                	mov    %esi,%ebx
+  buf[i] = '\0';
+ 1c2:	c6 03 00             	movb   $0x0,(%ebx)
+}
+ 1c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1c8:	5b                   	pop    %ebx
+ 1c9:	5e                   	pop    %esi
+ 1ca:	5f                   	pop    %edi
+ 1cb:	5d                   	pop    %ebp
+ 1cc:	c3                   	ret    
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	f3 0f 1e fb          	endbr32 
+ 1d4:	55                   	push   %ebp
+ 1d5:	89 e5                	mov    %esp,%ebp
+ 1d7:	56                   	push   %esi
+ 1d8:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	6a 00                	push   $0x0
+ 1de:	ff 75 08             	pushl  0x8(%ebp)
+ 1e1:	e8 ed 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e6:	83 c4 10             	add    $0x10,%esp
+ 1e9:	85 c0                	test   %eax,%eax
+ 1eb:	78 2b                	js     218 <stat+0x48>
+    return -1;
+  r = fstat(fd, st);
+ 1ed:	83 ec 08             	sub    $0x8,%esp
+ 1f0:	ff 75 0c             	pushl  0xc(%ebp)
+ 1f3:	89 c3                	mov    %eax,%ebx
+ 1f5:	50                   	push   %eax
+ 1f6:	e8 f0 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1fb:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fe:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 200:	e8 b6 00 00 00       	call   2bb <close>
+  return r;
+ 205:	83 c4 10             	add    $0x10,%esp
+}
+ 208:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 20b:	89 f0                	mov    %esi,%eax
+ 20d:	5b                   	pop    %ebx
+ 20e:	5e                   	pop    %esi
+ 20f:	5d                   	pop    %ebp
+ 210:	c3                   	ret    
+ 211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+ 218:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 21d:	eb e9                	jmp    208 <stat+0x38>
+ 21f:	90                   	nop
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	f3 0f 1e fb          	endbr32 
+ 224:	55                   	push   %ebp
+ 225:	89 e5                	mov    %esp,%ebp
+ 227:	53                   	push   %ebx
+ 228:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 22b:	0f be 02             	movsbl (%edx),%eax
+ 22e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 231:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 234:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 239:	77 1a                	ja     255 <atoi+0x35>
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	89 c8                	mov    %ecx,%eax
+ 257:	5b                   	pop    %ebx
+ 258:	5d                   	pop    %ebp
+ 259:	c3                   	ret    
+ 25a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	f3 0f 1e fb          	endbr32 
+ 264:	55                   	push   %ebp
+ 265:	89 e5                	mov    %esp,%ebp
+ 267:	57                   	push   %edi
+ 268:	8b 45 10             	mov    0x10(%ebp),%eax
+ 26b:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26e:	56                   	push   %esi
+ 26f:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 272:	85 c0                	test   %eax,%eax
+ 274:	7e 0f                	jle    285 <memmove+0x25>
+ 276:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 278:	89 d7                	mov    %edx,%edi
+ 27a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <draw>:
+SYSCALL(draw)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <history>:
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+ 343:	66 90                	xchg   %ax,%ax
+ 345:	66 90                	xchg   %ax,%ax
+ 347:	66 90                	xchg   %ax,%ax
+ 349:	66 90                	xchg   %ax,%ax
+ 34b:	66 90                	xchg   %ax,%ax
+ 34d:	66 90                	xchg   %ax,%ax
+ 34f:	90                   	nop
+
+00000350 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	56                   	push   %esi
+ 355:	53                   	push   %ebx
+ 356:	83 ec 3c             	sub    $0x3c,%esp
+ 359:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 35c:	89 d1                	mov    %edx,%ecx
+{
+ 35e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 361:	85 d2                	test   %edx,%edx
+ 363:	0f 89 7f 00 00 00    	jns    3e8 <printint+0x98>
+ 369:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 36d:	74 79                	je     3e8 <printint+0x98>
+    neg = 1;
+ 36f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 376:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 378:	31 db                	xor    %ebx,%ebx
+ 37a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 380:	89 c8                	mov    %ecx,%eax
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	89 cf                	mov    %ecx,%edi
+ 386:	f7 75 c4             	divl   -0x3c(%ebp)
+ 389:	0f b6 92 70 07 00 00 	movzbl 0x770(%edx),%edx
+ 390:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 393:	89 d8                	mov    %ebx,%eax
+ 395:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 398:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 39b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 39e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3a1:	76 dd                	jbe    380 <printint+0x30>
+  if(neg)
+ 3a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3a6:	85 c9                	test   %ecx,%ecx
+ 3a8:	74 0c                	je     3b6 <printint+0x66>
+    buf[i++] = '-';
+ 3aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3af:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3bd:	eb 07                	jmp    3c6 <printint+0x76>
+ 3bf:	90                   	nop
+ 3c0:	0f b6 13             	movzbl (%ebx),%edx
+ 3c3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3c6:	83 ec 04             	sub    $0x4,%esp
+ 3c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3cc:	6a 01                	push   $0x1
+ 3ce:	56                   	push   %esi
+ 3cf:	57                   	push   %edi
+ 3d0:	e8 de fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3d5:	83 c4 10             	add    $0x10,%esp
+ 3d8:	39 de                	cmp    %ebx,%esi
+ 3da:	75 e4                	jne    3c0 <printint+0x70>
+    putc(fd, buf[i]);
+}
+ 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3df:	5b                   	pop    %ebx
+ 3e0:	5e                   	pop    %esi
+ 3e1:	5f                   	pop    %edi
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ef:	eb 87                	jmp    378 <printint+0x28>
+ 3f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ff:	90                   	nop
+
+00000400 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 400:	f3 0f 1e fb          	endbr32 
+ 404:	55                   	push   %ebp
+ 405:	89 e5                	mov    %esp,%ebp
+ 407:	57                   	push   %edi
+ 408:	56                   	push   %esi
+ 409:	53                   	push   %ebx
+ 40a:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 40d:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 410:	0f b6 1e             	movzbl (%esi),%ebx
+ 413:	84 db                	test   %bl,%bl
+ 415:	0f 84 b4 00 00 00    	je     4cf <printf+0xcf>
+  ap = (uint*)(void*)&fmt + 1;
+ 41b:	8d 45 10             	lea    0x10(%ebp),%eax
+ 41e:	83 c6 01             	add    $0x1,%esi
+  write(fd, &c, 1);
+ 421:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 424:	31 d2                	xor    %edx,%edx
+  ap = (uint*)(void*)&fmt + 1;
+ 426:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 429:	eb 33                	jmp    45e <printf+0x5e>
+ 42b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+ 430:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 433:	ba 25 00 00 00       	mov    $0x25,%edx
+      if(c == '%'){
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	74 17                	je     454 <printf+0x54>
+  write(fd, &c, 1);
+ 43d:	83 ec 04             	sub    $0x4,%esp
+ 440:	88 5d e7             	mov    %bl,-0x19(%ebp)
+ 443:	6a 01                	push   $0x1
+ 445:	57                   	push   %edi
+ 446:	ff 75 08             	pushl  0x8(%ebp)
+ 449:	e8 65 fe ff ff       	call   2b3 <write>
+ 44e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+      } else {
+        putc(fd, c);
+ 451:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 454:	0f b6 1e             	movzbl (%esi),%ebx
+ 457:	83 c6 01             	add    $0x1,%esi
+ 45a:	84 db                	test   %bl,%bl
+ 45c:	74 71                	je     4cf <printf+0xcf>
+    c = fmt[i] & 0xff;
+ 45e:	0f be cb             	movsbl %bl,%ecx
+ 461:	0f b6 c3             	movzbl %bl,%eax
+    if(state == 0){
+ 464:	85 d2                	test   %edx,%edx
+ 466:	74 c8                	je     430 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 468:	83 fa 25             	cmp    $0x25,%edx
+ 46b:	75 e7                	jne    454 <printf+0x54>
+      if(c == 'd'){
+ 46d:	83 f8 64             	cmp    $0x64,%eax
+ 470:	0f 84 9a 00 00 00    	je     510 <printf+0x110>
+        printint(fd, *ap, 10, 1);
+        ap++;
+      } else if(c == 'x' || c == 'p'){
+ 476:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+ 47c:	83 f9 70             	cmp    $0x70,%ecx
+ 47f:	74 5f                	je     4e0 <printf+0xe0>
+        printint(fd, *ap, 16, 0);
+        ap++;
+      } else if(c == 's'){
+ 481:	83 f8 73             	cmp    $0x73,%eax
+ 484:	0f 84 d6 00 00 00    	je     560 <printf+0x160>
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+ 48a:	83 f8 63             	cmp    $0x63,%eax
+ 48d:	0f 84 8d 00 00 00    	je     520 <printf+0x120>
+        putc(fd, *ap);
+        ap++;
+      } else if(c == '%'){
+ 493:	83 f8 25             	cmp    $0x25,%eax
+ 496:	0f 84 b4 00 00 00    	je     550 <printf+0x150>
+  write(fd, &c, 1);
+ 49c:	83 ec 04             	sub    $0x4,%esp
+ 49f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	ff 75 08             	pushl  0x8(%ebp)
+ 4a9:	e8 05 fe ff ff       	call   2b3 <write>
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+ 4ae:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 4b1:	83 c4 0c             	add    $0xc,%esp
+ 4b4:	6a 01                	push   $0x1
+ 4b6:	83 c6 01             	add    $0x1,%esi
+ 4b9:	57                   	push   %edi
+ 4ba:	ff 75 08             	pushl  0x8(%ebp)
+ 4bd:	e8 f1 fd ff ff       	call   2b3 <write>
+  for(i = 0; fmt[i]; i++){
+ 4c2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+        putc(fd, c);
+ 4c6:	83 c4 10             	add    $0x10,%esp
+      }
+      state = 0;
+ 4c9:	31 d2                	xor    %edx,%edx
+  for(i = 0; fmt[i]; i++){
+ 4cb:	84 db                	test   %bl,%bl
+ 4cd:	75 8f                	jne    45e <printf+0x5e>
+    }
+  }
+}
+ 4cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d2:	5b                   	pop    %ebx
+ 4d3:	5e                   	pop    %esi
+ 4d4:	5f                   	pop    %edi
+ 4d5:	5d                   	pop    %ebp
+ 4d6:	c3                   	ret    
+ 4d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4de:	66 90                	xchg   %ax,%ax
+        printint(fd, *ap, 16, 0);
+ 4e0:	83 ec 0c             	sub    $0xc,%esp
+ 4e3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4e8:	6a 00                	push   $0x0
+ 4ea:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+ 4ed:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4f0:	8b 13                	mov    (%ebx),%edx
+ 4f2:	e8 59 fe ff ff       	call   350 <printint>
+        ap++;
+ 4f7:	89 d8                	mov    %ebx,%eax
+ 4f9:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4fc:	31 d2                	xor    %edx,%edx
+        ap++;
+ 4fe:	83 c0 04             	add    $0x4,%eax
+ 501:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 504:	e9 4b ff ff ff       	jmp    454 <printf+0x54>
+ 509:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        printint(fd, *ap, 10, 1);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 518:	6a 01                	push   $0x1
+ 51a:	eb ce                	jmp    4ea <printf+0xea>
+ 51c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        putc(fd, *ap);
+ 520:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+  write(fd, &c, 1);
+ 523:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 526:	8b 03                	mov    (%ebx),%eax
+  write(fd, &c, 1);
+ 528:	6a 01                	push   $0x1
+        ap++;
+ 52a:	83 c3 04             	add    $0x4,%ebx
+  write(fd, &c, 1);
+ 52d:	57                   	push   %edi
+ 52e:	ff 75 08             	pushl  0x8(%ebp)
+        putc(fd, *ap);
+ 531:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 534:	e8 7a fd ff ff       	call   2b3 <write>
+        ap++;
+ 539:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+ 53c:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 53f:	31 d2                	xor    %edx,%edx
+ 541:	e9 0e ff ff ff       	jmp    454 <printf+0x54>
+ 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 550:	88 5d e7             	mov    %bl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 553:	83 ec 04             	sub    $0x4,%esp
+ 556:	e9 59 ff ff ff       	jmp    4b4 <printf+0xb4>
+ 55b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 55f:	90                   	nop
+        s = (char*)*ap;
+ 560:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 563:	8b 18                	mov    (%eax),%ebx
+        ap++;
+ 565:	83 c0 04             	add    $0x4,%eax
+ 568:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 56b:	85 db                	test   %ebx,%ebx
+ 56d:	74 17                	je     586 <printf+0x186>
+        while(*s != 0){
+ 56f:	0f b6 03             	movzbl (%ebx),%eax
+      state = 0;
+ 572:	31 d2                	xor    %edx,%edx
+        while(*s != 0){
+ 574:	84 c0                	test   %al,%al
+ 576:	0f 84 d8 fe ff ff    	je     454 <printf+0x54>
+ 57c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 57f:	89 de                	mov    %ebx,%esi
+ 581:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 584:	eb 1a                	jmp    5a0 <printf+0x1a0>
+          s = "(null)";
+ 586:	bb 68 07 00 00       	mov    $0x768,%ebx
+        while(*s != 0){
+ 58b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+ 58e:	b8 28 00 00 00       	mov    $0x28,%eax
+ 593:	89 de                	mov    %ebx,%esi
+ 595:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+  write(fd, &c, 1);
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5a3:	83 c6 01             	add    $0x1,%esi
+ 5a6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5a9:	6a 01                	push   $0x1
+ 5ab:	57                   	push   %edi
+ 5ac:	53                   	push   %ebx
+ 5ad:	e8 01 fd ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 5b2:	0f b6 06             	movzbl (%esi),%eax
+ 5b5:	83 c4 10             	add    $0x10,%esp
+ 5b8:	84 c0                	test   %al,%al
+ 5ba:	75 e4                	jne    5a0 <printf+0x1a0>
+ 5bc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+      state = 0;
+ 5bf:	31 d2                	xor    %edx,%edx
+ 5c1:	e9 8e fe ff ff       	jmp    454 <printf+0x54>
+ 5c6:	66 90                	xchg   %ax,%ax
+ 5c8:	66 90                	xchg   %ax,%ax
+ 5ca:	66 90                	xchg   %ax,%ax
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	f3 0f 1e fb          	endbr32 
+ 5d4:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d5:	a1 18 0a 00 00       	mov    0xa18,%eax
+{
+ 5da:	89 e5                	mov    %esp,%ebp
+ 5dc:	57                   	push   %edi
+ 5dd:	56                   	push   %esi
+ 5de:	53                   	push   %ebx
+ 5df:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 5e2:	8b 10                	mov    (%eax),%edx
+  bp = (Header*)ap - 1;
+ 5e4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e7:	39 c8                	cmp    %ecx,%eax
+ 5e9:	73 15                	jae    600 <free+0x30>
+ 5eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5ef:	90                   	nop
+ 5f0:	39 d1                	cmp    %edx,%ecx
+ 5f2:	72 14                	jb     608 <free+0x38>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	39 d0                	cmp    %edx,%eax
+ 5f6:	73 10                	jae    608 <free+0x38>
+{
+ 5f8:	89 d0                	mov    %edx,%eax
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5fa:	8b 10                	mov    (%eax),%edx
+ 5fc:	39 c8                	cmp    %ecx,%eax
+ 5fe:	72 f0                	jb     5f0 <free+0x20>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 600:	39 d0                	cmp    %edx,%eax
+ 602:	72 f4                	jb     5f8 <free+0x28>
+ 604:	39 d1                	cmp    %edx,%ecx
+ 606:	73 f0                	jae    5f8 <free+0x28>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60e:	39 fa                	cmp    %edi,%edx
+ 610:	74 1e                	je     630 <free+0x60>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+ 612:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 615:	8b 50 04             	mov    0x4(%eax),%edx
+ 618:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 61b:	39 f1                	cmp    %esi,%ecx
+ 61d:	74 28                	je     647 <free+0x77>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+ 61f:	89 08                	mov    %ecx,(%eax)
+  freep = p;
+}
+ 621:	5b                   	pop    %ebx
+  freep = p;
+ 622:	a3 18 0a 00 00       	mov    %eax,0xa18
+}
+ 627:	5e                   	pop    %esi
+ 628:	5f                   	pop    %edi
+ 629:	5d                   	pop    %ebp
+ 62a:	c3                   	ret    
+ 62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 62f:	90                   	nop
+    bp->s.size += p->s.ptr->s.size;
+ 630:	03 72 04             	add    0x4(%edx),%esi
+ 633:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 636:	8b 10                	mov    (%eax),%edx
+ 638:	8b 12                	mov    (%edx),%edx
+ 63a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63d:	8b 50 04             	mov    0x4(%eax),%edx
+ 640:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+ 643:	39 f1                	cmp    %esi,%ecx
+ 645:	75 d8                	jne    61f <free+0x4f>
+    p->s.size += bp->s.size;
+ 647:	03 53 fc             	add    -0x4(%ebx),%edx
+  freep = p;
+ 64a:	a3 18 0a 00 00       	mov    %eax,0xa18
+    p->s.size += bp->s.size;
+ 64f:	89 50 04             	mov    %edx,0x4(%eax)
+    p->s.ptr = bp->s.ptr;
+ 652:	8b 53 f8             	mov    -0x8(%ebx),%edx
+ 655:	89 10                	mov    %edx,(%eax)
+}
+ 657:	5b                   	pop    %ebx
+ 658:	5e                   	pop    %esi
+ 659:	5f                   	pop    %edi
+ 65a:	5d                   	pop    %ebp
+ 65b:	c3                   	ret    
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	f3 0f 1e fb          	endbr32 
+ 664:	55                   	push   %ebp
+ 665:	89 e5                	mov    %esp,%ebp
+ 667:	57                   	push   %edi
+ 668:	56                   	push   %esi
+ 669:	53                   	push   %ebx
+ 66a:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 66d:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 670:	8b 3d 18 0a 00 00    	mov    0xa18,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 676:	8d 70 07             	lea    0x7(%eax),%esi
+ 679:	c1 ee 03             	shr    $0x3,%esi
+ 67c:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 67f:	85 ff                	test   %edi,%edi
+ 681:	0f 84 a9 00 00 00    	je     730 <malloc+0xd0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 687:	8b 07                	mov    (%edi),%eax
+    if(p->s.size >= nunits){
+ 689:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68c:	39 f1                	cmp    %esi,%ecx
+ 68e:	73 6d                	jae    6fd <malloc+0x9d>
+ 690:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+ 696:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 69b:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 69e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+ 6a5:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+ 6a8:	eb 17                	jmp    6c1 <malloc+0x61>
+ 6aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b0:	8b 10                	mov    (%eax),%edx
+    if(p->s.size >= nunits){
+ 6b2:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6b5:	39 f1                	cmp    %esi,%ecx
+ 6b7:	73 4f                	jae    708 <malloc+0xa8>
+ 6b9:	8b 3d 18 0a 00 00    	mov    0xa18,%edi
+ 6bf:	89 d0                	mov    %edx,%eax
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6c1:	39 c7                	cmp    %eax,%edi
+ 6c3:	75 eb                	jne    6b0 <malloc+0x50>
+  p = sbrk(nu * sizeof(Header));
+ 6c5:	83 ec 0c             	sub    $0xc,%esp
+ 6c8:	ff 75 e4             	pushl  -0x1c(%ebp)
+ 6cb:	e8 4b fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6d0:	83 c4 10             	add    $0x10,%esp
+ 6d3:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6d6:	74 1b                	je     6f3 <malloc+0x93>
+  hp->s.size = nu;
+ 6d8:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6db:	83 ec 0c             	sub    $0xc,%esp
+ 6de:	83 c0 08             	add    $0x8,%eax
+ 6e1:	50                   	push   %eax
+ 6e2:	e8 e9 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6e7:	a1 18 0a 00 00       	mov    0xa18,%eax
+      if((p = morecore(nunits)) == 0)
+ 6ec:	83 c4 10             	add    $0x10,%esp
+ 6ef:	85 c0                	test   %eax,%eax
+ 6f1:	75 bd                	jne    6b0 <malloc+0x50>
+        return 0;
+  }
+}
+ 6f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6f6:	31 c0                	xor    %eax,%eax
+}
+ 6f8:	5b                   	pop    %ebx
+ 6f9:	5e                   	pop    %esi
+ 6fa:	5f                   	pop    %edi
+ 6fb:	5d                   	pop    %ebp
+ 6fc:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6fd:	89 c2                	mov    %eax,%edx
+ 6ff:	89 f8                	mov    %edi,%eax
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+      if(p->s.size == nunits)
+ 708:	39 ce                	cmp    %ecx,%esi
+ 70a:	74 54                	je     760 <malloc+0x100>
+        p->s.size -= nunits;
+ 70c:	29 f1                	sub    %esi,%ecx
+ 70e:	89 4a 04             	mov    %ecx,0x4(%edx)
+        p += p->s.size;
+ 711:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+        p->s.size = nunits;
+ 714:	89 72 04             	mov    %esi,0x4(%edx)
+      freep = prevp;
+ 717:	a3 18 0a 00 00       	mov    %eax,0xa18
+}
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 71f:	8d 42 08             	lea    0x8(%edx),%eax
+}
+ 722:	5b                   	pop    %ebx
+ 723:	5e                   	pop    %esi
+ 724:	5f                   	pop    %edi
+ 725:	5d                   	pop    %ebp
+ 726:	c3                   	ret    
+ 727:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 72e:	66 90                	xchg   %ax,%ax
+    base.s.ptr = freep = prevp = &base;
+ 730:	c7 05 18 0a 00 00 1c 	movl   $0xa1c,0xa18
+ 737:	0a 00 00 
+    base.s.size = 0;
+ 73a:	bf 1c 0a 00 00       	mov    $0xa1c,%edi
+    base.s.ptr = freep = prevp = &base;
+ 73f:	c7 05 1c 0a 00 00 1c 	movl   $0xa1c,0xa1c
+ 746:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 749:	89 f8                	mov    %edi,%eax
+    base.s.size = 0;
+ 74b:	c7 05 20 0a 00 00 00 	movl   $0x0,0xa20
+ 752:	00 00 00 
+    if(p->s.size >= nunits){
+ 755:	e9 36 ff ff ff       	jmp    690 <malloc+0x30>
+ 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 760:	8b 0a                	mov    (%edx),%ecx
+ 762:	89 08                	mov    %ecx,(%eax)
+ 764:	eb b1                	jmp    717 <malloc+0xb7>
diff -ruN xv6-public/zombie.d xv6-public_task_1/zombie.d
--- xv6-public/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/zombie.d	2021-09-15 20:34:59.680370000 +0530
@@ -0,0 +1 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files xv6-public/zombie.o and xv6-public_task_1/zombie.o differ
diff -ruN xv6-public/zombie.sym xv6-public_task_1/zombie.sym
--- xv6-public/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public_task_1/zombie.sym	2021-09-15 20:34:59.708370000 +0530
@@ -0,0 +1,59 @@
+00000000 .text
+00000768 .rodata
+00000784 .eh_frame
+00000a18 .bss
+00000000 .comment
+00000000 .debug_aranges
+00000000 .debug_info
+00000000 .debug_abbrev
+00000000 .debug_line
+00000000 .debug_str
+00000000 .debug_loc
+00000000 .debug_ranges
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000350 printint
+00000770 digits.1091
+00000000 umalloc.c
+00000a18 freep
+00000a1c base
+00000030 strcpy
+00000400 printf
+00000260 memmove
+000002db mknod
+00000150 gets
+00000313 getpid
+00000660 malloc
+00000323 sleep
+000002a3 pipe
+000002b3 write
+0000033b history
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000a18 __bss_start
+000000f0 memset
+00000000 main
+00000060 strcmp
+0000030b dup
+000001d0 stat
+00000a18 _edata
+00000a24 _end
+000002f3 link
+00000293 exit
+00000220 atoi
+00000333 draw
+000000b0 strlen
+000002d3 open
+00000110 strchr
+000002fb mkdir
+000002bb close
+000005d0 free
